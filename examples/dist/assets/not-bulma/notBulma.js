var notBulma = (function (exports) {
	'use strict';

	var DEV = true;

	// Store the references to globals in case someone tries to monkey patch these, causing the below
	// to de-opt (this occurs often when using popular extensions).
	var is_array = Array.isArray;
	var array_from = Array.from;
	var define_property = Object.defineProperty;
	var get_descriptor = Object.getOwnPropertyDescriptor;
	var get_descriptors = Object.getOwnPropertyDescriptors;
	var object_prototype = Object.prototype;
	var array_prototype = Array.prototype;
	var get_prototype_of = Object.getPrototypeOf;

	/**
	 * @param {any} thing
	 * @returns {thing is Function}
	 */
	function is_function(thing) {
		return typeof thing === 'function';
	}

	const noop = () => {};

	/** @param {Function} fn */
	function run$1(fn) {
		return fn();
	}

	/** @param {Array<() => void>} arr */
	function run_all(arr) {
		for (var i = 0; i < arr.length; i++) {
			arr[i]();
		}
	}

	const DERIVED = 1 << 1;
	const EFFECT = 1 << 2;
	const RENDER_EFFECT = 1 << 3;
	const BLOCK_EFFECT = 1 << 4;
	const BRANCH_EFFECT = 1 << 5;
	const ROOT_EFFECT = 1 << 6;
	const BOUNDARY_EFFECT = 1 << 7;
	const UNOWNED = 1 << 8;
	const DISCONNECTED = 1 << 9;
	const CLEAN = 1 << 10;
	const DIRTY = 1 << 11;
	const MAYBE_DIRTY = 1 << 12;
	const INERT = 1 << 13;
	const DESTROYED = 1 << 14;
	const EFFECT_RAN = 1 << 15;
	/** 'Transparent' effects do not create a transition boundary */
	const EFFECT_TRANSPARENT = 1 << 16;
	/** Svelte 4 legacy mode props need to be handled with deriveds and be recognized elsewhere, hence the dedicated flag */
	const LEGACY_DERIVED_PROP = 1 << 17;
	const INSPECT_EFFECT = 1 << 18;
	const HEAD_EFFECT = 1 << 19;
	const EFFECT_HAS_DERIVED = 1 << 20;

	const STATE_SYMBOL = Symbol('$state');
	const STATE_SYMBOL_METADATA = Symbol('$state metadata');
	const LEGACY_PROPS = Symbol('legacy props');
	const LOADING_ATTR_SYMBOL = Symbol('');

	/** @import { Equals } from '#client' */
	/** @type {Equals} */
	function equals(value) {
		return value === this.v;
	}

	/**
	 * @param {unknown} a
	 * @param {unknown} b
	 * @returns {boolean}
	 */
	function safe_not_equal(a, b) {
		return a != a
			? b == b
			: a !== b || (a !== null && typeof a === 'object') || typeof a === 'function';
	}

	/** @type {Equals} */
	function safe_equals(value) {
		return !safe_not_equal(value, this.v);
	}

	/* This file is generated by scripts/process-messages/index.js. Do not edit! */


	/**
	 * Using `bind:value` together with a checkbox input is not allowed. Use `bind:checked` instead
	 * @returns {never}
	 */
	function bind_invalid_checkbox_value() {
		{
			const error = new Error(`bind_invalid_checkbox_value\nUsing \`bind:value\` together with a checkbox input is not allowed. Use \`bind:checked\` instead\nhttps://svelte.dev/e/bind_invalid_checkbox_value`);

			error.name = 'Svelte error';
			throw error;
		}
	}

	/**
	 * A derived value cannot reference itself recursively
	 * @returns {never}
	 */
	function derived_references_self() {
		{
			const error = new Error(`derived_references_self\nA derived value cannot reference itself recursively\nhttps://svelte.dev/e/derived_references_self`);

			error.name = 'Svelte error';
			throw error;
		}
	}

	/**
	 * `%rune%` cannot be used inside an effect cleanup function
	 * @param {string} rune
	 * @returns {never}
	 */
	function effect_in_teardown(rune) {
		{
			const error = new Error(`effect_in_teardown\n\`${rune}\` cannot be used inside an effect cleanup function\nhttps://svelte.dev/e/effect_in_teardown`);

			error.name = 'Svelte error';
			throw error;
		}
	}

	/**
	 * Effect cannot be created inside a `$derived` value that was not itself created inside an effect
	 * @returns {never}
	 */
	function effect_in_unowned_derived() {
		{
			const error = new Error(`effect_in_unowned_derived\nEffect cannot be created inside a \`$derived\` value that was not itself created inside an effect\nhttps://svelte.dev/e/effect_in_unowned_derived`);

			error.name = 'Svelte error';
			throw error;
		}
	}

	/**
	 * `%rune%` can only be used inside an effect (e.g. during component initialisation)
	 * @param {string} rune
	 * @returns {never}
	 */
	function effect_orphan(rune) {
		{
			const error = new Error(`effect_orphan\n\`${rune}\` can only be used inside an effect (e.g. during component initialisation)\nhttps://svelte.dev/e/effect_orphan`);

			error.name = 'Svelte error';
			throw error;
		}
	}

	/**
	 * Maximum update depth exceeded. This can happen when a reactive block or effect repeatedly sets a new value. Svelte limits the number of nested updates to prevent infinite loops
	 * @returns {never}
	 */
	function effect_update_depth_exceeded() {
		{
			const error = new Error(`effect_update_depth_exceeded\nMaximum update depth exceeded. This can happen when a reactive block or effect repeatedly sets a new value. Svelte limits the number of nested updates to prevent infinite loops\nhttps://svelte.dev/e/effect_update_depth_exceeded`);

			error.name = 'Svelte error';
			throw error;
		}
	}

	/**
	 * Failed to hydrate the application
	 * @returns {never}
	 */
	function hydration_failed() {
		{
			const error = new Error(`hydration_failed\nFailed to hydrate the application\nhttps://svelte.dev/e/hydration_failed`);

			error.name = 'Svelte error';
			throw error;
		}
	}

	/**
	 * Could not `{@render}` snippet due to the expression being `null` or `undefined`. Consider using optional chaining `{@render snippet?.()}`
	 * @returns {never}
	 */
	function invalid_snippet() {
		{
			const error = new Error(`invalid_snippet\nCould not \`{@render}\` snippet due to the expression being \`null\` or \`undefined\`. Consider using optional chaining \`{@render snippet?.()}\`\nhttps://svelte.dev/e/invalid_snippet`);

			error.name = 'Svelte error';
			throw error;
		}
	}

	/**
	 * `%name%(...)` cannot be used in runes mode
	 * @param {string} name
	 * @returns {never}
	 */
	function lifecycle_legacy_only(name) {
		{
			const error = new Error(`lifecycle_legacy_only\n\`${name}(...)\` cannot be used in runes mode\nhttps://svelte.dev/e/lifecycle_legacy_only`);

			error.name = 'Svelte error';
			throw error;
		}
	}

	/**
	 * Cannot do `bind:%key%={undefined}` when `%key%` has a fallback value
	 * @param {string} key
	 * @returns {never}
	 */
	function props_invalid_value(key) {
		{
			const error = new Error(`props_invalid_value\nCannot do \`bind:${key}={undefined}\` when \`${key}\` has a fallback value\nhttps://svelte.dev/e/props_invalid_value`);

			error.name = 'Svelte error';
			throw error;
		}
	}

	/**
	 * Rest element properties of `$props()` such as `%property%` are readonly
	 * @param {string} property
	 * @returns {never}
	 */
	function props_rest_readonly(property) {
		{
			const error = new Error(`props_rest_readonly\nRest element properties of \`$props()\` such as \`${property}\` are readonly\nhttps://svelte.dev/e/props_rest_readonly`);

			error.name = 'Svelte error';
			throw error;
		}
	}

	/**
	 * The `%rune%` rune is only available inside `.svelte` and `.svelte.js/ts` files
	 * @param {string} rune
	 * @returns {never}
	 */
	function rune_outside_svelte(rune) {
		{
			const error = new Error(`rune_outside_svelte\nThe \`${rune}\` rune is only available inside \`.svelte\` and \`.svelte.js/ts\` files\nhttps://svelte.dev/e/rune_outside_svelte`);

			error.name = 'Svelte error';
			throw error;
		}
	}

	/**
	 * Property descriptors defined on `$state` objects must contain `value` and always be `enumerable`, `configurable` and `writable`.
	 * @returns {never}
	 */
	function state_descriptors_fixed() {
		{
			const error = new Error(`state_descriptors_fixed\nProperty descriptors defined on \`$state\` objects must contain \`value\` and always be \`enumerable\`, \`configurable\` and \`writable\`.\nhttps://svelte.dev/e/state_descriptors_fixed`);

			error.name = 'Svelte error';
			throw error;
		}
	}

	/**
	 * Cannot set prototype of `$state` object
	 * @returns {never}
	 */
	function state_prototype_fixed() {
		{
			const error = new Error(`state_prototype_fixed\nCannot set prototype of \`$state\` object\nhttps://svelte.dev/e/state_prototype_fixed`);

			error.name = 'Svelte error';
			throw error;
		}
	}

	/**
	 * Reading state that was created inside the same derived is forbidden. Consider using `untrack` to read locally created state
	 * @returns {never}
	 */
	function state_unsafe_local_read() {
		{
			const error = new Error(`state_unsafe_local_read\nReading state that was created inside the same derived is forbidden. Consider using \`untrack\` to read locally created state\nhttps://svelte.dev/e/state_unsafe_local_read`);

			error.name = 'Svelte error';
			throw error;
		}
	}

	/**
	 * Updating state inside a derived or a template expression is forbidden. If the value should not be reactive, declare it without `$state`
	 * @returns {never}
	 */
	function state_unsafe_mutation() {
		{
			const error = new Error(`state_unsafe_mutation\nUpdating state inside a derived or a template expression is forbidden. If the value should not be reactive, declare it without \`$state\`\nhttps://svelte.dev/e/state_unsafe_mutation`);

			error.name = 'Svelte error';
			throw error;
		}
	}

	let legacy_mode_flag = false;

	function enable_legacy_mode_flag() {
		legacy_mode_flag = true;
	}

	const EACH_ITEM_REACTIVE = 1;
	const EACH_INDEX_REACTIVE = 1 << 1;
	/** See EachBlock interface metadata.is_controlled for an explanation what this is */
	const EACH_IS_CONTROLLED = 1 << 2;
	const EACH_IS_ANIMATED = 1 << 3;
	const EACH_ITEM_IMMUTABLE = 1 << 4;

	const PROPS_IS_IMMUTABLE = 1;
	const PROPS_IS_RUNES = 1 << 1;
	const PROPS_IS_UPDATED = 1 << 2;
	const PROPS_IS_BINDABLE = 1 << 3;
	const PROPS_IS_LAZY_INITIAL = 1 << 4;
	const TRANSITION_GLOBAL = 1 << 2;

	const TEMPLATE_FRAGMENT = 1;
	const TEMPLATE_USE_IMPORT_NODE = 1 << 1;

	const HYDRATION_START = '[';
	/** used to indicate that an `{:else}...` block was rendered */
	const HYDRATION_START_ELSE = '[!';
	const HYDRATION_END = ']';
	const HYDRATION_ERROR = {};

	const UNINITIALIZED = Symbol();

	// Dev-time component properties
	const FILENAME = Symbol('filename');

	const NAMESPACE_SVG = 'http://www.w3.org/2000/svg';

	/* This file is generated by scripts/process-messages/index.js. Do not edit! */


	var bold$1 = 'font-weight: bold';
	var normal$1 = 'font-weight: normal';

	/**
	 * The following properties cannot be cloned with `$state.snapshot` — the return value contains the originals:
	 * 
	 * %properties%
	 * @param {string | undefined | null} [properties]
	 */
	function state_snapshot_uncloneable(properties) {
		{
			console.warn(`%c[svelte] state_snapshot_uncloneable\n%c${properties
			? `The following properties cannot be cloned with \`$state.snapshot\` — the return value contains the originals:

${properties}`
			: "Value cannot be cloned with `$state.snapshot` — the original value was returned"}\nhttps://svelte.dev/e/state_snapshot_uncloneable`, bold$1, normal$1);
		}
	}

	/** @import { Snapshot } from './types' */

	/**
	 * In dev, we keep track of which properties could not be cloned. In prod
	 * we don't bother, but we keep a dummy array around so that the
	 * signature stays the same
	 * @type {string[]}
	 */
	const empty = [];

	/**
	 * @template T
	 * @param {T} value
	 * @param {boolean} [skip_warning]
	 * @returns {Snapshot<T>}
	 */
	function snapshot(value, skip_warning = false) {
		if (!skip_warning) {
			/** @type {string[]} */
			const paths = [];

			const copy = clone(value, new Map(), '', paths);
			if (paths.length === 1 && paths[0] === '') {
				// value could not be cloned
				state_snapshot_uncloneable();
			} else if (paths.length > 0) {
				// some properties could not be cloned
				const slice = paths.length > 10 ? paths.slice(0, 7) : paths.slice(0, 10);
				const excess = paths.length - slice.length;

				let uncloned = slice.map((path) => `- <value>${path}`).join('\n');
				if (excess > 0) uncloned += `\n- ...and ${excess} more`;

				state_snapshot_uncloneable(uncloned);
			}

			return copy;
		}

		return clone(value, new Map(), '', empty);
	}

	/**
	 * @template T
	 * @param {T} value
	 * @param {Map<T, Snapshot<T>>} cloned
	 * @param {string} path
	 * @param {string[]} paths
	 * @param {null | T} original The original value, if `value` was produced from a `toJSON` call
	 * @returns {Snapshot<T>}
	 */
	function clone(value, cloned, path, paths, original = null) {
		if (typeof value === 'object' && value !== null) {
			var unwrapped = cloned.get(value);
			if (unwrapped !== undefined) return unwrapped;

			if (value instanceof Map) return /** @type {Snapshot<T>} */ (new Map(value));
			if (value instanceof Set) return /** @type {Snapshot<T>} */ (new Set(value));

			if (is_array(value)) {
				var copy = /** @type {Snapshot<any>} */ (Array(value.length));
				cloned.set(value, copy);

				if (original !== null) {
					cloned.set(original, copy);
				}

				for (var i = 0; i < value.length; i += 1) {
					var element = value[i];
					if (i in value) {
						copy[i] = clone(element, cloned, `${path}[${i}]` , paths);
					}
				}

				return copy;
			}

			if (get_prototype_of(value) === object_prototype) {
				/** @type {Snapshot<any>} */
				copy = {};
				cloned.set(value, copy);

				if (original !== null) {
					cloned.set(original, copy);
				}

				for (var key in value) {
					// @ts-expect-error
					copy[key] = clone(value[key], cloned, `${path}.${key}` , paths);
				}

				return copy;
			}

			if (value instanceof Date) {
				return /** @type {Snapshot<T>} */ (structuredClone(value));
			}

			if (typeof (/** @type {T & { toJSON?: any } } */ (value).toJSON) === 'function') {
				return clone(
					/** @type {T & { toJSON(): any } } */ (value).toJSON(),
					cloned,
					`${path}.toJSON()` ,
					paths,
					// Associate the instance with the toJSON clone
					value
				);
			}
		}

		if (value instanceof EventTarget) {
			// can't be cloned
			return /** @type {Snapshot<T>} */ (value);
		}

		try {
			return /** @type {Snapshot<T>} */ (structuredClone(value));
		} catch (e) {
			{
				paths.push(path);
			}

			return /** @type {Snapshot<T>} */ (value);
		}
	}

	/** @import { Derived, Reaction, Signal, Value } from '#client' */

	/**
	 * @param {string} label
	 */
	function get_stack$1(label) {
		let error = Error();
		const stack = error.stack;

		if (stack) {
			const lines = stack.split('\n');
			const new_lines = ['\n'];

			for (let i = 0; i < lines.length; i++) {
				const line = lines[i];

				if (line === 'Error') {
					continue;
				}
				if (line.includes('validate_each_keys')) {
					return null;
				}
				if (line.includes('svelte/src/internal')) {
					continue;
				}
				new_lines.push(line);
			}

			if (new_lines.length === 1) {
				return null;
			}

			define_property(error, 'stack', {
				value: new_lines.join('\n')
			});

			define_property(error, 'name', {
				// 'Error' suffix is required for stack traces to be rendered properly
				value: `${label}Error`
			});
		}
		return error;
	}

	/** @import { Derived, Effect, Reaction, Source, Value } from '#client' */

	let inspect_effects = new Set();

	/**
	 * @param {Set<any>} v
	 */
	function set_inspect_effects(v) {
		inspect_effects = v;
	}

	/**
	 * @template V
	 * @param {V} v
	 * @param {Error | null} [stack]
	 * @returns {Source<V>}
	 */
	function source(v, stack) {
		/** @type {Value} */
		var signal = {
			f: 0, // TODO ideally we could skip this altogether, but it causes type errors
			v,
			reactions: null,
			equals,
			version: 0
		};

		{
			signal.created = stack ?? get_stack$1('CreatedAt');
			signal.debug = null;
		}

		return signal;
	}

	/**
	 * @template V
	 * @param {V} v
	 */
	function state(v) {
		return push_derived_source(source(v));
	}

	/**
	 * @template V
	 * @param {V} initial_value
	 * @param {boolean} [immutable]
	 * @returns {Source<V>}
	 */
	/*#__NO_SIDE_EFFECTS__*/
	function mutable_source(initial_value, immutable = false) {
		const s = source(initial_value);
		if (!immutable) {
			s.equals = safe_equals;
		}

		// bind the signal to the component context, in case we need to
		// track updates to trigger beforeUpdate/afterUpdate callbacks
		if (legacy_mode_flag && component_context !== null && component_context.l !== null) {
			(component_context.l.s ??= []).push(s);
		}

		return s;
	}

	/**
	 * @template V
	 * @param {V} v
	 * @param {boolean} [immutable]
	 * @returns {Source<V>}
	 */
	function mutable_state(v, immutable = false) {
		return push_derived_source(mutable_source(v, immutable));
	}

	/**
	 * @template V
	 * @param {Source<V>} source
	 */
	/*#__NO_SIDE_EFFECTS__*/
	function push_derived_source(source) {
		if (active_reaction !== null && (active_reaction.f & DERIVED) !== 0) {
			if (derived_sources === null) {
				set_derived_sources([source]);
			} else {
				derived_sources.push(source);
			}
		}

		return source;
	}

	/**
	 * @template V
	 * @param {Value<V>} source
	 * @param {V} value
	 */
	function mutate(source, value) {
		set(
			source,
			untrack(() => get$2(source))
		);
		return value;
	}

	/**
	 * @template V
	 * @param {Source<V>} source
	 * @param {V} value
	 * @returns {V}
	 */
	function set(source, value) {
		if (
			active_reaction !== null &&
			is_runes() &&
			(active_reaction.f & (DERIVED | BLOCK_EFFECT)) !== 0 &&
			// If the source was created locally within the current derived, then
			// we allow the mutation.
			(derived_sources === null || !derived_sources.includes(source))
		) {
			state_unsafe_mutation();
		}

		return internal_set(source, value);
	}

	/**
	 * @template V
	 * @param {Source<V>} source
	 * @param {V} value
	 * @returns {V}
	 */
	function internal_set(source, value) {
		if (!source.equals(value)) {
			source.v = value;
			source.version = increment_version();

			{
				source.updated = get_stack$1('UpdatedAt');
			}

			mark_reactions(source, DIRTY);

			// If the current signal is running for the first time, it won't have any
			// reactions as we only allocate and assign the reactions after the signal
			// has fully executed. So in the case of ensuring it registers the reaction
			// properly for itself, we need to ensure the current effect actually gets
			// scheduled. i.e: `$effect(() => x++)`
			if (
				is_runes() &&
				active_effect !== null &&
				(active_effect.f & CLEAN) !== 0 &&
				(active_effect.f & BRANCH_EFFECT) === 0
			) {
				if (new_deps !== null && new_deps.includes(source)) {
					set_signal_status(active_effect, DIRTY);
					schedule_effect(active_effect);
				} else {
					if (untracked_writes === null) {
						set_untracked_writes([source]);
					} else {
						untracked_writes.push(source);
					}
				}
			}

			if (inspect_effects.size > 0) {
				const inspects = Array.from(inspect_effects);
				var previously_flushing_effect = is_flushing_effect;
				set_is_flushing_effect(true);
				try {
					for (const effect of inspects) {
						// Mark clean inspect-effects as maybe dirty and then check their dirtiness
						// instead of just updating the effects - this way we avoid overfiring.
						if ((effect.f & CLEAN) !== 0) {
							set_signal_status(effect, MAYBE_DIRTY);
						}
						if (check_dirtiness(effect)) {
							update_effect(effect);
						}
					}
				} finally {
					set_is_flushing_effect(previously_flushing_effect);
				}
				inspect_effects.clear();
			}
		}

		return value;
	}

	/**
	 * @param {Value} signal
	 * @param {number} status should be DIRTY or MAYBE_DIRTY
	 * @returns {void}
	 */
	function mark_reactions(signal, status) {
		var reactions = signal.reactions;
		if (reactions === null) return;

		var runes = is_runes();
		var length = reactions.length;

		for (var i = 0; i < length; i++) {
			var reaction = reactions[i];
			var flags = reaction.f;

			// Skip any effects that are already dirty
			if ((flags & DIRTY) !== 0) continue;

			// In legacy mode, skip the current effect to prevent infinite loops
			if (!runes && reaction === active_effect) continue;

			// Inspect effects need to run immediately, so that the stack trace makes sense
			if ((flags & INSPECT_EFFECT) !== 0) {
				inspect_effects.add(reaction);
				continue;
			}

			set_signal_status(reaction, status);

			// If the signal a) was previously clean or b) is an unowned derived, then mark it
			if ((flags & (CLEAN | UNOWNED)) !== 0) {
				if ((flags & DERIVED) !== 0) {
					mark_reactions(/** @type {Derived} */ (reaction), MAYBE_DIRTY);
				} else {
					schedule_effect(/** @type {Effect} */ (reaction));
				}
			}
		}
	}

	/* This file is generated by scripts/process-messages/index.js. Do not edit! */


	var bold = 'font-weight: bold';
	var normal = 'font-weight: normal';

	/**
	 * The `%attribute%` attribute on `%html%` changed its value between server and client renders. The client value, `%value%`, will be ignored in favour of the server value
	 * @param {string} attribute
	 * @param {string} html
	 * @param {string} value
	 */
	function hydration_attribute_changed(attribute, html, value) {
		{
			console.warn(`%c[svelte] hydration_attribute_changed\n%cThe \`${attribute}\` attribute on \`${html}\` changed its value between server and client renders. The client value, \`${value}\`, will be ignored in favour of the server value\nhttps://svelte.dev/e/hydration_attribute_changed`, bold, normal);
		}
	}

	/**
	 * The value of an `{@html ...}` block %location% changed between server and client renders. The client value will be ignored in favour of the server value
	 * @param {string | undefined | null} [location]
	 */
	function hydration_html_changed(location) {
		{
			console.warn(`%c[svelte] hydration_html_changed\n%c${location ? `The value of an \`{@html ...}\` block ${location} changed between server and client renders. The client value will be ignored in favour of the server value` : "The value of an `{@html ...}` block changed between server and client renders. The client value will be ignored in favour of the server value"}\nhttps://svelte.dev/e/hydration_html_changed`, bold, normal);
		}
	}

	/**
	 * Hydration failed because the initial UI does not match what was rendered on the server. The error occurred near %location%
	 * @param {string | undefined | null} [location]
	 */
	function hydration_mismatch(location) {
		{
			console.warn(`%c[svelte] hydration_mismatch\n%c${"Hydration failed because the initial UI does not match what was rendered on the server"}\nhttps://svelte.dev/e/hydration_mismatch`, bold, normal);
		}
	}

	/**
	 * The `render` function passed to `createRawSnippet` should return HTML for a single element
	 */
	function invalid_raw_snippet_render() {
		{
			console.warn(`%c[svelte] invalid_raw_snippet_render\n%cThe \`render\` function passed to \`createRawSnippet\` should return HTML for a single element\nhttps://svelte.dev/e/invalid_raw_snippet_render`, bold, normal);
		}
	}

	/**
	 * Tried to unmount a component that was not mounted
	 */
	function lifecycle_double_unmount() {
		{
			console.warn(`%c[svelte] lifecycle_double_unmount\n%cTried to unmount a component that was not mounted\nhttps://svelte.dev/e/lifecycle_double_unmount`, bold, normal);
		}
	}

	/**
	 * %parent% passed a value to %child% with `bind:`, but the value is owned by %owner%. Consider creating a binding between %owner% and %parent%
	 * @param {string} parent
	 * @param {string} child
	 * @param {string} owner
	 */
	function ownership_invalid_binding(parent, child, owner) {
		{
			console.warn(`%c[svelte] ownership_invalid_binding\n%c${parent} passed a value to ${child} with \`bind:\`, but the value is owned by ${owner}. Consider creating a binding between ${owner} and ${parent}\nhttps://svelte.dev/e/ownership_invalid_binding`, bold, normal);
		}
	}

	/**
	 * %component% mutated a value owned by %owner%. This is strongly discouraged. Consider passing values to child components with `bind:`, or use a callback instead
	 * @param {string | undefined | null} [component]
	 * @param {string | undefined | null} [owner]
	 */
	function ownership_invalid_mutation(component, owner) {
		{
			console.warn(`%c[svelte] ownership_invalid_mutation\n%c${component ? `${component} mutated a value owned by ${owner}. This is strongly discouraged. Consider passing values to child components with \`bind:\`, or use a callback instead` : "Mutating a value outside the component that created it is strongly discouraged. Consider passing values to child components with `bind:`, or use a callback instead"}\nhttps://svelte.dev/e/ownership_invalid_mutation`, bold, normal);
		}
	}

	/**
	 * Reactive `$state(...)` proxies and the values they proxy have different identities. Because of this, comparisons with `%operator%` will produce unexpected results
	 * @param {string} operator
	 */
	function state_proxy_equality_mismatch(operator) {
		{
			console.warn(`%c[svelte] state_proxy_equality_mismatch\n%cReactive \`$state(...)\` proxies and the values they proxy have different identities. Because of this, comparisons with \`${operator}\` will produce unexpected results\nhttps://svelte.dev/e/state_proxy_equality_mismatch`, bold, normal);
		}
	}

	/** @import { TemplateNode } from '#client' */


	/**
	 * Use this variable to guard everything related to hydration code so it can be treeshaken out
	 * if the user doesn't use the `hydrate` method and these code paths are therefore not needed.
	 */
	let hydrating = false;

	/** @param {boolean} value */
	function set_hydrating(value) {
		hydrating = value;
	}

	/**
	 * The node that is currently being hydrated. This starts out as the first node inside the opening
	 * <!--[--> comment, and updates each time a component calls `$.child(...)` or `$.sibling(...)`.
	 * When entering a block (e.g. `{#if ...}`), `hydrate_node` is the block opening comment; by the
	 * time we leave the block it is the closing comment, which serves as the block's anchor.
	 * @type {TemplateNode}
	 */
	let hydrate_node;

	/** @param {TemplateNode} node */
	function set_hydrate_node(node) {
		if (node === null) {
			hydration_mismatch();
			throw HYDRATION_ERROR;
		}

		return (hydrate_node = node);
	}

	function hydrate_next() {
		return set_hydrate_node(/** @type {TemplateNode} */ (get_next_sibling(hydrate_node)));
	}

	/** @param {TemplateNode} node */
	function reset(node) {
		if (!hydrating) return;

		// If the node has remaining siblings, something has gone wrong
		if (get_next_sibling(hydrate_node) !== null) {
			hydration_mismatch();
			throw HYDRATION_ERROR;
		}

		hydrate_node = node;
	}

	function next(count = 1) {
		if (hydrating) {
			var i = count;
			var node = hydrate_node;

			while (i--) {
				node = /** @type {TemplateNode} */ (get_next_sibling(node));
			}

			hydrate_node = node;
		}
	}

	/**
	 * Removes all nodes starting at `hydrate_node` up until the next hydration end comment
	 */
	function remove_nodes() {
		var depth = 0;
		var node = hydrate_node;

		while (true) {
			if (node.nodeType === 8) {
				var data = /** @type {Comment} */ (node).data;

				if (data === HYDRATION_END) {
					if (depth === 0) return node;
					depth -= 1;
				} else if (data === HYDRATION_START || data === HYDRATION_START_ELSE) {
					depth += 1;
				}
			}

			var next = /** @type {TemplateNode} */ (get_next_sibling(node));
			node.remove();
			node = next;
		}
	}

	/** @import { ProxyMetadata } from '#client' */
	/** @typedef {{ file: string, line: number, column: number }} Location */


	/** @type {Record<string, Array<{ start: Location, end: Location, component: Function }>>} */
	const boundaries = {};

	const chrome_pattern = /at (?:.+ \()?(.+):(\d+):(\d+)\)?$/;
	const firefox_pattern = /@(.+):(\d+):(\d+)$/;

	function get_stack() {
		const stack = new Error().stack;
		if (!stack) return null;

		const entries = [];

		for (const line of stack.split('\n')) {
			let match = chrome_pattern.exec(line) ?? firefox_pattern.exec(line);

			if (match) {
				entries.push({
					file: match[1],
					line: +match[2],
					column: +match[3]
				});
			}
		}

		return entries;
	}

	/**
	 * Determines which `.svelte` component is responsible for a given state change
	 * @returns {Function | null}
	 */
	function get_component() {
		// first 4 lines are svelte internals; adjust this number if we change the internal call stack
		const stack = get_stack()?.slice(4);
		if (!stack) return null;

		for (let i = 0; i < stack.length; i++) {
			const entry = stack[i];
			const modules = boundaries[entry.file];
			if (!modules) {
				// If the first entry is not a component, that means the modification very likely happened
				// within a .svelte.js file, possibly triggered by a component. Since these files are not part
				// of the bondaries/component context heuristic, we need to bail in this case, else we would
				// have false positives when the .svelte.ts file provides a state creator function, encapsulating
				// the state and its mutations, and is being called from a component other than the one who
				// called the state creator function.
				if (i === 0) return null;
				continue;
			}

			for (const module of modules) {
				if (module.end == null) {
					return null;
				}
				if (module.start.line < entry.line && module.end.line > entry.line) {
					return module.component;
				}
			}
		}

		return null;
	}

	const ADD_OWNER = Symbol('ADD_OWNER');

	/**
	 * @param {any} object
	 * @param {any} owner
	 * @param {boolean} [global]
	 * @param {boolean} [skip_warning]
	 */
	function add_owner(object, owner, global = false, skip_warning = false) {
		if (object && !global) {
			const component = dev_current_component_function;
			const metadata = object[STATE_SYMBOL_METADATA];
			if (metadata && !has_owner(metadata, component)) {
				let original = get_owner(metadata);

				if (owner[FILENAME] !== component[FILENAME] && !skip_warning) {
					ownership_invalid_binding(component[FILENAME], owner[FILENAME], original[FILENAME]);
				}
			}
		}

		add_owner_to_object(object, owner, new Set());
	}

	/**
	 * @param {ProxyMetadata | null} from
	 * @param {ProxyMetadata} to
	 */
	function widen_ownership(from, to) {
		if (to.owners === null) {
			return;
		}

		while (from) {
			if (from.owners === null) {
				to.owners = null;
				break;
			}

			for (const owner of from.owners) {
				to.owners.add(owner);
			}

			from = from.parent;
		}
	}

	/**
	 * @param {any} object
	 * @param {Function} owner
	 * @param {Set<any>} seen
	 */
	function add_owner_to_object(object, owner, seen) {
		const metadata = /** @type {ProxyMetadata} */ (object?.[STATE_SYMBOL_METADATA]);

		if (metadata) {
			// this is a state proxy, add owner directly, if not globally shared
			if ('owners' in metadata && metadata.owners != null) {
				metadata.owners.add(owner);
			}
		} else if (object && typeof object === 'object') {
			if (seen.has(object)) return;
			seen.add(object);
			if (ADD_OWNER in object && object[ADD_OWNER]) {
				// this is a class with state fields. we put this in a render effect
				// so that if state is replaced (e.g. `instance.name = { first, last }`)
				// the new state is also co-owned by the caller of `getContext`
				render_effect(() => {
					object[ADD_OWNER](owner);
				});
			} else {
				var proto = get_prototype_of(object);

				if (proto === Object.prototype) {
					// recurse until we find a state proxy
					for (const key in object) {
						add_owner_to_object(object[key], owner, seen);
					}
				} else if (proto === Array.prototype) {
					// recurse until we find a state proxy
					for (let i = 0; i < object.length; i += 1) {
						add_owner_to_object(object[i], owner, seen);
					}
				}
			}
		}
	}

	/**
	 * @param {ProxyMetadata} metadata
	 * @param {Function} component
	 * @returns {boolean}
	 */
	function has_owner(metadata, component) {
		if (metadata.owners === null) {
			return true;
		}

		return (
			metadata.owners.has(component) ||
			(metadata.parent !== null && has_owner(metadata.parent, component))
		);
	}

	/**
	 * @param {ProxyMetadata} metadata
	 * @returns {any}
	 */
	function get_owner(metadata) {
		return (
			metadata?.owners?.values().next().value ??
			get_owner(/** @type {ProxyMetadata} */ (metadata.parent))
		);
	}

	/**
	 * @param {ProxyMetadata} metadata
	 */
	function check_ownership(metadata) {

		const component = get_component();

		if (component && !has_owner(metadata, component)) {
			let original = get_owner(metadata);

			// @ts-expect-error
			if (original[FILENAME] !== component[FILENAME]) {
				// @ts-expect-error
				ownership_invalid_mutation(component[FILENAME], original[FILENAME]);
			} else {
				ownership_invalid_mutation();
			}
		}
	}

	/** @import { ProxyMetadata, ProxyStateObject, Source } from '#client' */

	/**
	 * @template T
	 * @param {T} value
	 * @param {ProxyMetadata | null} [parent]
	 * @param {Source<T>} [prev] dev mode only
	 * @returns {T}
	 */
	function proxy(value, parent = null, prev) {
		/** @type {Error | null} */
		var stack = null;
		{
			stack = get_stack$1('CreatedAt');
		}
		// if non-proxyable, or is already a proxy, return `value`
		if (typeof value !== 'object' || value === null || STATE_SYMBOL in value) {
			return value;
		}

		const prototype = get_prototype_of(value);

		if (prototype !== object_prototype && prototype !== array_prototype) {
			return value;
		}

		/** @type {Map<any, Source<any>>} */
		var sources = new Map();
		var is_proxied_array = is_array(value);
		var version = source(0);

		if (is_proxied_array) {
			// We need to create the length source eagerly to ensure that
			// mutations to the array are properly synced with our proxy
			sources.set('length', source(/** @type {any[]} */ (value).length, stack));
		}

		/** @type {ProxyMetadata} */
		var metadata;

		{
			metadata = {
				parent,
				owners: null
			};

			{
				metadata.owners =
					parent === null
						? component_context !== null
							? new Set([component_context.function])
							: null
						: new Set();
			}
		}

		return new Proxy(/** @type {any} */ (value), {
			defineProperty(_, prop, descriptor) {
				if (
					!('value' in descriptor) ||
					descriptor.configurable === false ||
					descriptor.enumerable === false ||
					descriptor.writable === false
				) {
					// we disallow non-basic descriptors, because unless they are applied to the
					// target object — which we avoid, so that state can be forked — we will run
					// afoul of the various invariants
					// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/getOwnPropertyDescriptor#invariants
					state_descriptors_fixed();
				}

				var s = sources.get(prop);

				if (s === undefined) {
					s = source(descriptor.value, stack);
					sources.set(prop, s);
				} else {
					set(s, proxy(descriptor.value, metadata));
				}

				return true;
			},

			deleteProperty(target, prop) {
				var s = sources.get(prop);

				if (s === undefined) {
					if (prop in target) {
						sources.set(prop, source(UNINITIALIZED, stack));
					}
				} else {
					// When working with arrays, we need to also ensure we update the length when removing
					// an indexed property
					if (is_proxied_array && typeof prop === 'string') {
						var ls = /** @type {Source<number>} */ (sources.get('length'));
						var n = Number(prop);

						if (Number.isInteger(n) && n < ls.v) {
							set(ls, n);
						}
					}
					set(s, UNINITIALIZED);
					update_version(version);
				}

				return true;
			},

			get(target, prop, receiver) {
				if (prop === STATE_SYMBOL_METADATA) {
					return metadata;
				}

				if (prop === STATE_SYMBOL) {
					return value;
				}

				var s = sources.get(prop);
				var exists = prop in target;

				// create a source, but only if it's an own property and not a prototype property
				if (s === undefined && (!exists || get_descriptor(target, prop)?.writable)) {
					s = source(proxy(exists ? target[prop] : UNINITIALIZED, metadata), stack);
					sources.set(prop, s);
				}

				if (s !== undefined) {
					var v = get$2(s);

					// In case of something like `foo = bar.map(...)`, foo would have ownership
					// of the array itself, while the individual items would have ownership
					// of the component that created bar. That means if we later do `foo[0].baz = 42`,
					// we could get a false-positive ownership violation, since the two proxies
					// are not connected to each other via the parent metadata relationship.
					// For this reason, we need to widen the ownership of the children
					// upon access when we detect they are not connected.
					{
						/** @type {ProxyMetadata | undefined} */
						var prop_metadata = v?.[STATE_SYMBOL_METADATA];
						if (prop_metadata && prop_metadata?.parent !== metadata) {
							widen_ownership(metadata, prop_metadata);
						}
					}

					return v === UNINITIALIZED ? undefined : v;
				}

				return Reflect.get(target, prop, receiver);
			},

			getOwnPropertyDescriptor(target, prop) {
				var descriptor = Reflect.getOwnPropertyDescriptor(target, prop);

				if (descriptor && 'value' in descriptor) {
					var s = sources.get(prop);
					if (s) descriptor.value = get$2(s);
				} else if (descriptor === undefined) {
					var source = sources.get(prop);
					var value = source?.v;

					if (source !== undefined && value !== UNINITIALIZED) {
						return {
							enumerable: true,
							configurable: true,
							value,
							writable: true
						};
					}
				}

				return descriptor;
			},

			has(target, prop) {
				if (prop === STATE_SYMBOL_METADATA) {
					return true;
				}

				if (prop === STATE_SYMBOL) {
					return true;
				}

				var s = sources.get(prop);
				var has = (s !== undefined && s.v !== UNINITIALIZED) || Reflect.has(target, prop);

				if (
					s !== undefined ||
					(active_effect !== null && (!has || get_descriptor(target, prop)?.writable))
				) {
					if (s === undefined) {
						s = source(has ? proxy(target[prop], metadata) : UNINITIALIZED, stack);
						sources.set(prop, s);
					}

					var value = get$2(s);
					if (value === UNINITIALIZED) {
						return false;
					}
				}

				return has;
			},

			set(target, prop, value, receiver) {
				var s = sources.get(prop);
				var has = prop in target;

				// variable.length = value -> clear all signals with index >= value
				if (is_proxied_array && prop === 'length') {
					for (var i = value; i < /** @type {Source<number>} */ (s).v; i += 1) {
						var other_s = sources.get(i + '');
						if (other_s !== undefined) {
							set(other_s, UNINITIALIZED);
						} else if (i in target) {
							// If the item exists in the original, we need to create a uninitialized source,
							// else a later read of the property would result in a source being created with
							// the value of the original item at that index.
							other_s = source(UNINITIALIZED, stack);
							sources.set(i + '', other_s);
						}
					}
				}

				// If we haven't yet created a source for this property, we need to ensure
				// we do so otherwise if we read it later, then the write won't be tracked and
				// the heuristics of effects will be different vs if we had read the proxied
				// object property before writing to that property.
				if (s === undefined) {
					if (!has || get_descriptor(target, prop)?.writable) {
						s = source(undefined, stack);
						set(s, proxy(value, metadata));
						sources.set(prop, s);
					}
				} else {
					has = s.v !== UNINITIALIZED;
					set(s, proxy(value, metadata));
				}

				{
					/** @type {ProxyMetadata | undefined} */
					var prop_metadata = value?.[STATE_SYMBOL_METADATA];
					if (prop_metadata && prop_metadata?.parent !== metadata) {
						widen_ownership(metadata, prop_metadata);
					}
					check_ownership(metadata);
				}

				var descriptor = Reflect.getOwnPropertyDescriptor(target, prop);

				// Set the new value before updating any signals so that any listeners get the new value
				if (descriptor?.set) {
					descriptor.set.call(receiver, value);
				}

				if (!has) {
					// If we have mutated an array directly, we might need to
					// signal that length has also changed. Do it before updating metadata
					// to ensure that iterating over the array as a result of a metadata update
					// will not cause the length to be out of sync.
					if (is_proxied_array && typeof prop === 'string') {
						var ls = /** @type {Source<number>} */ (sources.get('length'));
						var n = Number(prop);

						if (Number.isInteger(n) && n >= ls.v) {
							set(ls, n + 1);
						}
					}

					update_version(version);
				}

				return true;
			},

			ownKeys(target) {
				get$2(version);

				var own_keys = Reflect.ownKeys(target).filter((key) => {
					var source = sources.get(key);
					return source === undefined || source.v !== UNINITIALIZED;
				});

				for (var [key, source] of sources) {
					if (source.v !== UNINITIALIZED && !(key in target)) {
						own_keys.push(key);
					}
				}

				return own_keys;
			},

			setPrototypeOf() {
				state_prototype_fixed();
			}
		});
	}

	/**
	 * @param {Source<number>} signal
	 * @param {1 | -1} [d]
	 */
	function update_version(signal, d = 1) {
		set(signal, signal.v + d);
	}

	/**
	 * @param {any} value
	 */
	function get_proxied_value(value) {
		if (value !== null && typeof value === 'object' && STATE_SYMBOL in value) {
			return value[STATE_SYMBOL];
		}

		return value;
	}

	/**
	 * @param {any} a
	 * @param {any} b
	 */
	function is(a, b) {
		return Object.is(get_proxied_value(a), get_proxied_value(b));
	}

	function init_array_prototype_warnings() {
		const array_prototype = Array.prototype;
		// The REPL ends up here over and over, and this prevents it from adding more and more patches
		// of the same kind to the prototype, which would slow down everything over time.
		// @ts-expect-error
		const cleanup = Array.__svelte_cleanup;
		if (cleanup) {
			cleanup();
		}

		const { indexOf, lastIndexOf, includes } = array_prototype;

		array_prototype.indexOf = function (item, from_index) {
			const index = indexOf.call(this, item, from_index);

			if (index === -1) {
				const test = indexOf.call(get_proxied_value(this), get_proxied_value(item), from_index);

				if (test !== -1) {
					state_proxy_equality_mismatch('array.indexOf(...)');
				}
			}

			return index;
		};

		array_prototype.lastIndexOf = function (item, from_index) {
			// we need to specify this.length - 1 because it's probably using something like
			// `arguments` inside so passing undefined is different from not passing anything
			const index = lastIndexOf.call(this, item, from_index ?? this.length - 1);

			if (index === -1) {
				// we need to specify this.length - 1 because it's probably using something like
				// `arguments` inside so passing undefined is different from not passing anything
				const test = lastIndexOf.call(
					get_proxied_value(this),
					get_proxied_value(item),
					from_index ?? this.length - 1
				);

				if (test !== -1) {
					state_proxy_equality_mismatch('array.lastIndexOf(...)');
				}
			}

			return index;
		};

		array_prototype.includes = function (item, from_index) {
			const has = includes.call(this, item, from_index);

			if (!has) {
				const test = includes.call(get_proxied_value(this), get_proxied_value(item), from_index);

				if (test) {
					state_proxy_equality_mismatch('array.includes(...)');
				}
			}

			return has;
		};

		// @ts-expect-error
		Array.__svelte_cleanup = () => {
			array_prototype.indexOf = indexOf;
			array_prototype.lastIndexOf = lastIndexOf;
			array_prototype.includes = includes;
		};
	}

	/** @import { TemplateNode } from '#client' */

	// export these for reference in the compiled code, making global name deduplication unnecessary
	/** @type {Window} */
	var $window;

	/** @type {() => Node | null} */
	var first_child_getter;
	/** @type {() => Node | null} */
	var next_sibling_getter;

	/**
	 * Initialize these lazily to avoid issues when using the runtime in a server context
	 * where these globals are not available while avoiding a separate server entry point
	 */
	function init_operations() {
		if ($window !== undefined) {
			return;
		}

		$window = window;

		var element_prototype = Element.prototype;
		var node_prototype = Node.prototype;

		// @ts-ignore
		first_child_getter = get_descriptor(node_prototype, 'firstChild').get;
		// @ts-ignore
		next_sibling_getter = get_descriptor(node_prototype, 'nextSibling').get;

		// the following assignments improve perf of lookups on DOM nodes
		// @ts-expect-error
		element_prototype.__click = undefined;
		// @ts-expect-error
		element_prototype.__className = '';
		// @ts-expect-error
		element_prototype.__attributes = null;
		// @ts-expect-error
		element_prototype.__styles = null;
		// @ts-expect-error
		element_prototype.__e = undefined;

		// @ts-expect-error
		Text.prototype.__t = undefined;

		{
			// @ts-expect-error
			element_prototype.__svelte_meta = null;

			init_array_prototype_warnings();
		}
	}

	/**
	 * @param {string} value
	 * @returns {Text}
	 */
	function create_text(value = '') {
		return document.createTextNode(value);
	}

	/**
	 * @template {Node} N
	 * @param {N} node
	 * @returns {Node | null}
	 */
	/*@__NO_SIDE_EFFECTS__*/
	function get_first_child(node) {
		return first_child_getter.call(node);
	}

	/**
	 * @template {Node} N
	 * @param {N} node
	 * @returns {Node | null}
	 */
	/*@__NO_SIDE_EFFECTS__*/
	function get_next_sibling(node) {
		return next_sibling_getter.call(node);
	}

	/**
	 * Don't mark this as side-effect-free, hydration needs to walk all nodes
	 * @template {Node} N
	 * @param {N} node
	 * @param {boolean} is_text
	 * @returns {Node | null}
	 */
	function child(node, is_text) {
		if (!hydrating) {
			return get_first_child(node);
		}

		var child = /** @type {TemplateNode} */ (get_first_child(hydrate_node));

		// Child can be null if we have an element with a single child, like `<p>{text}</p>`, where `text` is empty
		if (child === null) {
			child = hydrate_node.appendChild(create_text());
		} else if (is_text && child.nodeType !== 3) {
			var text = create_text();
			child?.before(text);
			set_hydrate_node(text);
			return text;
		}

		set_hydrate_node(child);
		return child;
	}

	/**
	 * Don't mark this as side-effect-free, hydration needs to walk all nodes
	 * @param {DocumentFragment | TemplateNode[]} fragment
	 * @param {boolean} is_text
	 * @returns {Node | null}
	 */
	function first_child(fragment, is_text) {
		if (!hydrating) {
			// when not hydrating, `fragment` is a `DocumentFragment` (the result of calling `open_frag`)
			var first = /** @type {DocumentFragment} */ (get_first_child(/** @type {Node} */ (fragment)));

			// TODO prevent user comments with the empty string when preserveComments is true
			if (first instanceof Comment && first.data === '') return get_next_sibling(first);

			return first;
		}

		// if an {expression} is empty during SSR, there might be no
		// text node to hydrate — we must therefore create one
		if (is_text && hydrate_node?.nodeType !== 3) {
			var text = create_text();

			hydrate_node?.before(text);
			set_hydrate_node(text);
			return text;
		}

		return hydrate_node;
	}

	/**
	 * Don't mark this as side-effect-free, hydration needs to walk all nodes
	 * @param {TemplateNode} node
	 * @param {number} count
	 * @param {boolean} is_text
	 * @returns {Node | null}
	 */
	function sibling(node, count = 1, is_text = false) {
		let next_sibling = hydrating ? hydrate_node : node;
		var last_sibling;

		while (count--) {
			last_sibling = next_sibling;
			next_sibling = /** @type {TemplateNode} */ (get_next_sibling(next_sibling));
		}

		if (!hydrating) {
			return next_sibling;
		}

		var type = next_sibling?.nodeType;

		// if a sibling {expression} is empty during SSR, there might be no
		// text node to hydrate — we must therefore create one
		if (is_text && type !== 3) {
			var text = create_text();
			// If the next sibling is `null` and we're handling text then it's because
			// the SSR content was empty for the text, so we need to generate a new text
			// node and insert it after the last sibling
			if (next_sibling === null) {
				last_sibling?.after(text);
			} else {
				next_sibling.before(text);
			}
			set_hydrate_node(text);
			return text;
		}

		set_hydrate_node(next_sibling);
		return /** @type {TemplateNode} */ (next_sibling);
	}

	/**
	 * @template {Node} N
	 * @param {N} node
	 * @returns {void}
	 */
	function clear_text_content(node) {
		node.textContent = '';
	}

	/** @import { Derived, Effect } from '#client' */

	/**
	 * @template V
	 * @param {() => V} fn
	 * @returns {Derived<V>}
	 */
	/*#__NO_SIDE_EFFECTS__*/
	function derived(fn) {
		var flags = DERIVED | DIRTY;

		if (active_effect === null) {
			flags |= UNOWNED;
		} else {
			// Since deriveds are evaluated lazily, any effects created inside them are
			// created too late to ensure that the parent effect is added to the tree
			active_effect.f |= EFFECT_HAS_DERIVED;
		}

		var parent_derived =
			active_reaction !== null && (active_reaction.f & DERIVED) !== 0
				? /** @type {Derived} */ (active_reaction)
				: null;

		/** @type {Derived<V>} */
		const signal = {
			children: null,
			ctx: component_context,
			deps: null,
			equals,
			f: flags,
			fn,
			reactions: null,
			v: /** @type {V} */ (null),
			version: 0,
			parent: parent_derived ?? active_effect
		};

		{
			signal.created = get_stack$1('CreatedAt');
		}

		if (parent_derived !== null) {
			(parent_derived.children ??= []).push(signal);
		}

		return signal;
	}

	/**
	 * @template V
	 * @param {() => V} fn
	 * @returns {Derived<V>}
	 */
	/*#__NO_SIDE_EFFECTS__*/
	function derived_safe_equal(fn) {
		const signal = derived(fn);
		signal.equals = safe_equals;
		return signal;
	}

	/**
	 * @param {Derived} derived
	 * @returns {void}
	 */
	function destroy_derived_children(derived) {
		var children = derived.children;

		if (children !== null) {
			derived.children = null;

			for (var i = 0; i < children.length; i += 1) {
				var child = children[i];
				if ((child.f & DERIVED) !== 0) {
					destroy_derived(/** @type {Derived} */ (child));
				} else {
					destroy_effect(/** @type {Effect} */ (child));
				}
			}
		}
	}

	/**
	 * The currently updating deriveds, used to detect infinite recursion
	 * in dev mode and provide a nicer error than 'too much recursion'
	 * @type {Derived[]}
	 */
	let stack = [];

	/**
	 * @param {Derived} derived
	 * @returns {Effect | null}
	 */
	function get_derived_parent_effect(derived) {
		var parent = derived.parent;
		while (parent !== null) {
			if ((parent.f & DERIVED) === 0) {
				return /** @type {Effect} */ (parent);
			}
			parent = parent.parent;
		}
		return null;
	}

	/**
	 * @template T
	 * @param {Derived} derived
	 * @returns {T}
	 */
	function execute_derived(derived) {
		var value;
		var prev_active_effect = active_effect;

		set_active_effect(get_derived_parent_effect(derived));

		{
			let prev_inspect_effects = inspect_effects;
			set_inspect_effects(new Set());
			try {
				if (stack.includes(derived)) {
					derived_references_self();
				}

				stack.push(derived);

				destroy_derived_children(derived);
				value = update_reaction(derived);
			} finally {
				set_active_effect(prev_active_effect);
				set_inspect_effects(prev_inspect_effects);
				stack.pop();
			}
		}

		return value;
	}

	/**
	 * @param {Derived} derived
	 * @returns {void}
	 */
	function update_derived(derived) {
		var value = execute_derived(derived);
		var status =
			(skip_reaction || (derived.f & UNOWNED) !== 0) && derived.deps !== null ? MAYBE_DIRTY : CLEAN;

		set_signal_status(derived, status);

		if (!derived.equals(value)) {
			derived.v = value;
			derived.version = increment_version();
		}
	}

	/**
	 * @param {Derived} derived
	 * @returns {void}
	 */
	function destroy_derived(derived) {
		destroy_derived_children(derived);
		remove_reactions(derived, 0);
		set_signal_status(derived, DESTROYED);

		derived.v = derived.children = derived.deps = derived.ctx = derived.reactions = null;
	}

	/** @import { ComponentContext, ComponentContextLegacy, Derived, Effect, TemplateNode, TransitionManager } from '#client' */

	/**
	 * @param {'$effect' | '$effect.pre' | '$inspect'} rune
	 */
	function validate_effect(rune) {
		if (active_effect === null && active_reaction === null) {
			effect_orphan(rune);
		}

		if (active_reaction !== null && (active_reaction.f & UNOWNED) !== 0) {
			effect_in_unowned_derived();
		}

		if (is_destroying_effect) {
			effect_in_teardown(rune);
		}
	}

	/**
	 * @param {Effect} effect
	 * @param {Effect} parent_effect
	 */
	function push_effect(effect, parent_effect) {
		var parent_last = parent_effect.last;
		if (parent_last === null) {
			parent_effect.last = parent_effect.first = effect;
		} else {
			parent_last.next = effect;
			effect.prev = parent_last;
			parent_effect.last = effect;
		}
	}

	/**
	 * @param {number} type
	 * @param {null | (() => void | (() => void))} fn
	 * @param {boolean} sync
	 * @param {boolean} push
	 * @returns {Effect}
	 */
	function create_effect(type, fn, sync, push = true) {
		var is_root = (type & ROOT_EFFECT) !== 0;
		var parent_effect = active_effect;

		{
			// Ensure the parent is never an inspect effect
			while (parent_effect !== null && (parent_effect.f & INSPECT_EFFECT) !== 0) {
				parent_effect = parent_effect.parent;
			}
		}

		/** @type {Effect} */
		var effect = {
			ctx: component_context,
			deps: null,
			deriveds: null,
			nodes_start: null,
			nodes_end: null,
			f: type | DIRTY,
			first: null,
			fn,
			last: null,
			next: null,
			parent: is_root ? null : parent_effect,
			prev: null,
			teardown: null,
			transitions: null,
			version: 0
		};

		{
			effect.component_function = dev_current_component_function;
		}

		if (sync) {
			var previously_flushing_effect = is_flushing_effect;

			try {
				set_is_flushing_effect(true);
				update_effect(effect);
				effect.f |= EFFECT_RAN;
			} catch (e) {
				destroy_effect(effect);
				throw e;
			} finally {
				set_is_flushing_effect(previously_flushing_effect);
			}
		} else if (fn !== null) {
			schedule_effect(effect);
		}

		// if an effect has no dependencies, no DOM and no teardown function,
		// don't bother adding it to the effect tree
		var inert =
			sync &&
			effect.deps === null &&
			effect.first === null &&
			effect.nodes_start === null &&
			effect.teardown === null &&
			(effect.f & EFFECT_HAS_DERIVED) === 0;

		if (!inert && !is_root && push) {
			if (parent_effect !== null) {
				push_effect(effect, parent_effect);
			}

			// if we're in a derived, add the effect there too
			if (active_reaction !== null && (active_reaction.f & DERIVED) !== 0) {
				var derived = /** @type {Derived} */ (active_reaction);
				(derived.children ??= []).push(effect);
			}
		}

		return effect;
	}

	/**
	 * @param {() => void} fn
	 */
	function teardown(fn) {
		const effect = create_effect(RENDER_EFFECT, null, false);
		set_signal_status(effect, CLEAN);
		effect.teardown = fn;
		return effect;
	}

	/**
	 * Internal representation of `$effect(...)`
	 * @param {() => void | (() => void)} fn
	 */
	function user_effect(fn) {
		validate_effect('$effect');

		// Non-nested `$effect(...)` in a component should be deferred
		// until the component is mounted
		var defer =
			active_effect !== null &&
			(active_effect.f & BRANCH_EFFECT) !== 0 &&
			component_context !== null &&
			!component_context.m;

		{
			define_property(fn, 'name', {
				value: '$effect'
			});
		}

		if (defer) {
			var context = /** @type {ComponentContext} */ (component_context);
			(context.e ??= []).push({
				fn,
				effect: active_effect,
				reaction: active_reaction
			});
		} else {
			var signal = effect(fn);
			return signal;
		}
	}

	/**
	 * Internal representation of `$effect.pre(...)`
	 * @param {() => void | (() => void)} fn
	 * @returns {Effect}
	 */
	function user_pre_effect(fn) {
		validate_effect('$effect.pre');
		{
			define_property(fn, 'name', {
				value: '$effect.pre'
			});
		}
		return render_effect(fn);
	}

	/**
	 * An effect root whose children can transition out
	 * @param {() => void} fn
	 * @returns {(options?: { outro?: boolean }) => Promise<void>}
	 */
	function component_root(fn) {
		const effect = create_effect(ROOT_EFFECT, fn, true);

		return (options = {}) => {
			return new Promise((fulfil) => {
				if (options.outro) {
					pause_effect(effect, () => {
						destroy_effect(effect);
						fulfil(undefined);
					});
				} else {
					destroy_effect(effect);
					fulfil(undefined);
				}
			});
		};
	}

	/**
	 * @param {() => void | (() => void)} fn
	 * @returns {Effect}
	 */
	function effect(fn) {
		return create_effect(EFFECT, fn, false);
	}

	/**
	 * Internal representation of `$: ..`
	 * @param {() => any} deps
	 * @param {() => void | (() => void)} fn
	 */
	function legacy_pre_effect(deps, fn) {
		var context = /** @type {ComponentContextLegacy} */ (component_context);

		/** @type {{ effect: null | Effect, ran: boolean }} */
		var token = { effect: null, ran: false };
		context.l.r1.push(token);

		token.effect = render_effect(() => {
			deps();

			// If this legacy pre effect has already run before the end of the reset, then
			// bail out to emulate the same behavior.
			if (token.ran) return;

			token.ran = true;
			set(context.l.r2, true);
			untrack(fn);
		});
	}

	function legacy_pre_effect_reset() {
		var context = /** @type {ComponentContextLegacy} */ (component_context);

		render_effect(() => {
			if (!get$2(context.l.r2)) return;

			// Run dirty `$:` statements
			for (var token of context.l.r1) {
				var effect = token.effect;

				// If the effect is CLEAN, then make it MAYBE_DIRTY. This ensures we traverse through
				// the effects dependencies and correctly ensure each dependency is up-to-date.
				if ((effect.f & CLEAN) !== 0) {
					set_signal_status(effect, MAYBE_DIRTY);
				}

				if (check_dirtiness(effect)) {
					update_effect(effect);
				}

				token.ran = false;
			}

			context.l.r2.v = false; // set directly to avoid rerunning this effect
		});
	}

	/**
	 * @param {() => void | (() => void)} fn
	 * @returns {Effect}
	 */
	function render_effect(fn) {
		return create_effect(RENDER_EFFECT, fn, true);
	}

	/**
	 * @param {() => void | (() => void)} fn
	 * @returns {Effect}
	 */
	function template_effect(fn) {
		{
			define_property(fn, 'name', {
				value: '{expression}'
			});
		}
		return block(fn);
	}

	/**
	 * @param {(() => void)} fn
	 * @param {number} flags
	 */
	function block(fn, flags = 0) {
		return create_effect(RENDER_EFFECT | BLOCK_EFFECT | flags, fn, true);
	}

	/**
	 * @param {(() => void)} fn
	 * @param {boolean} [push]
	 */
	function branch(fn, push = true) {
		return create_effect(RENDER_EFFECT | BRANCH_EFFECT, fn, true, push);
	}

	/**
	 * @param {Effect} effect
	 */
	function execute_effect_teardown(effect) {
		var teardown = effect.teardown;
		if (teardown !== null) {
			const previously_destroying_effect = is_destroying_effect;
			const previous_reaction = active_reaction;
			set_is_destroying_effect(true);
			set_active_reaction(null);
			try {
				teardown.call(null);
			} finally {
				set_is_destroying_effect(previously_destroying_effect);
				set_active_reaction(previous_reaction);
			}
		}
	}

	/**
	 * @param {Effect} signal
	 * @returns {void}
	 */
	function destroy_effect_deriveds(signal) {
		var deriveds = signal.deriveds;

		if (deriveds !== null) {
			signal.deriveds = null;

			for (var i = 0; i < deriveds.length; i += 1) {
				destroy_derived(deriveds[i]);
			}
		}
	}

	/**
	 * @param {Effect} signal
	 * @param {boolean} remove_dom
	 * @returns {void}
	 */
	function destroy_effect_children(signal, remove_dom = false) {
		var effect = signal.first;
		signal.first = signal.last = null;

		while (effect !== null) {
			var next = effect.next;
			destroy_effect(effect, remove_dom);
			effect = next;
		}
	}

	/**
	 * @param {Effect} signal
	 * @returns {void}
	 */
	function destroy_block_effect_children(signal) {
		var effect = signal.first;

		while (effect !== null) {
			var next = effect.next;
			if ((effect.f & BRANCH_EFFECT) === 0) {
				destroy_effect(effect);
			}
			effect = next;
		}
	}

	/**
	 * @param {Effect} effect
	 * @param {boolean} [remove_dom]
	 * @returns {void}
	 */
	function destroy_effect(effect, remove_dom = true) {
		var removed = false;

		if ((remove_dom || (effect.f & HEAD_EFFECT) !== 0) && effect.nodes_start !== null) {
			/** @type {TemplateNode | null} */
			var node = effect.nodes_start;
			var end = effect.nodes_end;

			while (node !== null) {
				/** @type {TemplateNode | null} */
				var next = node === end ? null : /** @type {TemplateNode} */ (get_next_sibling(node));

				node.remove();
				node = next;
			}

			removed = true;
		}

		destroy_effect_children(effect, remove_dom && !removed);
		destroy_effect_deriveds(effect);
		remove_reactions(effect, 0);
		set_signal_status(effect, DESTROYED);

		var transitions = effect.transitions;

		if (transitions !== null) {
			for (const transition of transitions) {
				transition.stop();
			}
		}

		execute_effect_teardown(effect);

		var parent = effect.parent;

		// If the parent doesn't have any children, then skip this work altogether
		if (parent !== null && parent.first !== null) {
			unlink_effect(effect);
		}

		{
			effect.component_function = null;
		}

		// `first` and `child` are nulled out in destroy_effect_children
		// we don't null out `parent` so that error propagation can work correctly
		effect.next =
			effect.prev =
			effect.teardown =
			effect.ctx =
			effect.deps =
			effect.fn =
			effect.nodes_start =
			effect.nodes_end =
				null;
	}

	/**
	 * Detach an effect from the effect tree, freeing up memory and
	 * reducing the amount of work that happens on subsequent traversals
	 * @param {Effect} effect
	 */
	function unlink_effect(effect) {
		var parent = effect.parent;
		var prev = effect.prev;
		var next = effect.next;

		if (prev !== null) prev.next = next;
		if (next !== null) next.prev = prev;

		if (parent !== null) {
			if (parent.first === effect) parent.first = next;
			if (parent.last === effect) parent.last = prev;
		}
	}

	/**
	 * When a block effect is removed, we don't immediately destroy it or yank it
	 * out of the DOM, because it might have transitions. Instead, we 'pause' it.
	 * It stays around (in memory, and in the DOM) until outro transitions have
	 * completed, and if the state change is reversed then we _resume_ it.
	 * A paused effect does not update, and the DOM subtree becomes inert.
	 * @param {Effect} effect
	 * @param {() => void} [callback]
	 */
	function pause_effect(effect, callback) {
		/** @type {TransitionManager[]} */
		var transitions = [];

		pause_children(effect, transitions, true);

		run_out_transitions(transitions, () => {
			destroy_effect(effect);
			if (callback) callback();
		});
	}

	/**
	 * @param {TransitionManager[]} transitions
	 * @param {() => void} fn
	 */
	function run_out_transitions(transitions, fn) {
		var remaining = transitions.length;
		if (remaining > 0) {
			var check = () => --remaining || fn();
			for (var transition of transitions) {
				transition.out(check);
			}
		} else {
			fn();
		}
	}

	/**
	 * @param {Effect} effect
	 * @param {TransitionManager[]} transitions
	 * @param {boolean} local
	 */
	function pause_children(effect, transitions, local) {
		if ((effect.f & INERT) !== 0) return;
		effect.f ^= INERT;

		if (effect.transitions !== null) {
			for (const transition of effect.transitions) {
				if (transition.is_global || local) {
					transitions.push(transition);
				}
			}
		}

		var child = effect.first;

		while (child !== null) {
			var sibling = child.next;
			var transparent = (child.f & EFFECT_TRANSPARENT) !== 0 || (child.f & BRANCH_EFFECT) !== 0;
			// TODO we don't need to call pause_children recursively with a linked list in place
			// it's slightly more involved though as we have to account for `transparent` changing
			// through the tree.
			pause_children(child, transitions, transparent ? local : false);
			child = sibling;
		}
	}

	/**
	 * The opposite of `pause_effect`. We call this if (for example)
	 * `x` becomes falsy then truthy: `{#if x}...{/if}`
	 * @param {Effect} effect
	 */
	function resume_effect(effect) {
		resume_children(effect, true);
	}

	/**
	 * @param {Effect} effect
	 * @param {boolean} local
	 */
	function resume_children(effect, local) {
		if ((effect.f & INERT) === 0) return;

		// If a dependency of this effect changed while it was paused,
		// apply the change now
		if (check_dirtiness(effect)) {
			update_effect(effect);
		}

		// Ensure we toggle the flag after possibly updating the effect so that
		// each block logic can correctly operate on inert items
		effect.f ^= INERT;

		var child = effect.first;

		while (child !== null) {
			var sibling = child.next;
			var transparent = (child.f & EFFECT_TRANSPARENT) !== 0 || (child.f & BRANCH_EFFECT) !== 0;
			// TODO we don't need to call resume_children recursively with a linked list in place
			// it's slightly more involved though as we have to account for `transparent` changing
			// through the tree.
			resume_children(child, transparent ? local : false);
			child = sibling;
		}

		if (effect.transitions !== null) {
			for (const transition of effect.transitions) {
				if (transition.is_global || local) {
					transition.in();
				}
			}
		}
	}

	// Fallback for when requestIdleCallback is not available
	const request_idle_callback =
		typeof requestIdleCallback === 'undefined'
			? (/** @type {() => void} */ cb) => setTimeout(cb, 1)
			: requestIdleCallback;

	let is_micro_task_queued$1 = false;
	let is_idle_task_queued = false;

	/** @type {Array<() => void>} */
	let current_queued_micro_tasks = [];
	/** @type {Array<() => void>} */
	let current_queued_idle_tasks = [];

	function process_micro_tasks() {
		is_micro_task_queued$1 = false;
		const tasks = current_queued_micro_tasks.slice();
		current_queued_micro_tasks = [];
		run_all(tasks);
	}

	function process_idle_tasks() {
		is_idle_task_queued = false;
		const tasks = current_queued_idle_tasks.slice();
		current_queued_idle_tasks = [];
		run_all(tasks);
	}

	/**
	 * @param {() => void} fn
	 */
	function queue_micro_task(fn) {
		if (!is_micro_task_queued$1) {
			is_micro_task_queued$1 = true;
			queueMicrotask(process_micro_tasks);
		}
		current_queued_micro_tasks.push(fn);
	}

	/**
	 * @param {() => void} fn
	 */
	function queue_idle_task(fn) {
		if (!is_idle_task_queued) {
			is_idle_task_queued = true;
			request_idle_callback(process_idle_tasks);
		}
		current_queued_idle_tasks.push(fn);
	}

	/**
	 * Synchronously run any queued tasks.
	 */
	function flush_tasks() {
		if (is_micro_task_queued$1) {
			process_micro_tasks();
		}
		if (is_idle_task_queued) {
			process_idle_tasks();
		}
	}

	/* This file is generated by scripts/process-messages/index.js. Do not edit! */


	/**
	 * `%name%(...)` can only be used during component initialisation
	 * @param {string} name
	 * @returns {never}
	 */
	function lifecycle_outside_component(name) {
		{
			const error = new Error(`lifecycle_outside_component\n\`${name}(...)\` can only be used during component initialisation\nhttps://svelte.dev/e/lifecycle_outside_component`);

			error.name = 'Svelte error';
			throw error;
		}
	}

	/** @import { ComponentContext, Derived, Effect, Reaction, Signal, Source, Value } from '#client' */

	const FLUSH_MICROTASK = 0;
	const FLUSH_SYNC = 1;
	// Used for DEV time error handling
	/** @param {WeakSet<Error>} value */
	const handled_errors = new WeakSet();
	let is_throwing_error = false;

	// Used for controlling the flush of effects.
	let scheduler_mode = FLUSH_MICROTASK;
	// Used for handling scheduling
	let is_micro_task_queued = false;

	/** @type {Effect | null} */
	let last_scheduled_effect = null;

	let is_flushing_effect = false;
	let is_destroying_effect = false;

	/** @param {boolean} value */
	function set_is_flushing_effect(value) {
		is_flushing_effect = value;
	}

	/** @param {boolean} value */
	function set_is_destroying_effect(value) {
		is_destroying_effect = value;
	}

	// Handle effect queues

	/** @type {Effect[]} */
	let queued_root_effects = [];

	let flush_count = 0;
	/** @type {Effect[]} Stack of effects, dev only */
	let dev_effect_stack = [];
	// Handle signal reactivity tree dependencies and reactions

	/** @type {null | Reaction} */
	let active_reaction = null;

	/** @param {null | Reaction} reaction */
	function set_active_reaction(reaction) {
		active_reaction = reaction;
	}

	/** @type {null | Effect} */
	let active_effect = null;

	/** @param {null | Effect} effect */
	function set_active_effect(effect) {
		active_effect = effect;
	}

	/**
	 * When sources are created within a derived, we record them so that we can safely allow
	 * local mutations to these sources without the side-effect error being invoked unnecessarily.
	 * @type {null | Source[]}
	 */
	let derived_sources = null;

	/**
	 * @param {Source[] | null} sources
	 */
	function set_derived_sources(sources) {
		derived_sources = sources;
	}

	/**
	 * The dependencies of the reaction that is currently being executed. In many cases,
	 * the dependencies are unchanged between runs, and so this will be `null` unless
	 * and until a new dependency is accessed — we track this via `skipped_deps`
	 * @type {null | Value[]}
	 */
	let new_deps = null;

	let skipped_deps = 0;

	/**
	 * Tracks writes that the effect it's executed in doesn't listen to yet,
	 * so that the dependency can be added to the effect later on if it then reads it
	 * @type {null | Source[]}
	 */
	let untracked_writes = null;

	/** @param {null | Source[]} value */
	function set_untracked_writes(value) {
		untracked_writes = value;
	}

	/** @type {number} Used by sources and deriveds for handling updates to unowned deriveds */
	let current_version = 0;

	// If we are working with a get() chain that has no active container,
	// to prevent memory leaks, we skip adding the reaction.
	let skip_reaction = false;

	// Handling runtime component context
	/** @type {ComponentContext | null} */
	let component_context = null;

	/**
	 * The current component function. Different from current component context:
	 * ```html
	 * <!-- App.svelte -->
	 * <Foo>
	 *   <Bar /> <!-- context == Foo.svelte, function == App.svelte -->
	 * </Foo>
	 * ```
	 * @type {ComponentContext['function']}
	 */
	let dev_current_component_function = null;

	function increment_version() {
		return ++current_version;
	}

	/** @returns {boolean} */
	function is_runes() {
		return !legacy_mode_flag || (component_context !== null && component_context.l === null);
	}

	/**
	 * Determines whether a derived or effect is dirty.
	 * If it is MAYBE_DIRTY, will set the status to CLEAN
	 * @param {Reaction} reaction
	 * @returns {boolean}
	 */
	function check_dirtiness(reaction) {
		var flags = reaction.f;

		if ((flags & DIRTY) !== 0) {
			return true;
		}

		if ((flags & MAYBE_DIRTY) !== 0) {
			var dependencies = reaction.deps;
			var is_unowned = (flags & UNOWNED) !== 0;

			if (dependencies !== null) {
				var i;

				if ((flags & DISCONNECTED) !== 0) {
					for (i = 0; i < dependencies.length; i++) {
						(dependencies[i].reactions ??= []).push(reaction);
					}

					reaction.f ^= DISCONNECTED;
				}

				for (i = 0; i < dependencies.length; i++) {
					var dependency = dependencies[i];

					if (check_dirtiness(/** @type {Derived} */ (dependency))) {
						update_derived(/** @type {Derived} */ (dependency));
					}

					// If we are working with an unowned signal as part of an effect (due to !skip_reaction)
					// and the version hasn't changed, we still need to check that this reaction
					// is linked to the dependency source – otherwise future updates will not be caught.
					if (
						is_unowned &&
						active_effect !== null &&
						!skip_reaction &&
						!dependency?.reactions?.includes(reaction)
					) {
						(dependency.reactions ??= []).push(reaction);
					}

					if (dependency.version > reaction.version) {
						return true;
					}
				}
			}

			// Unowned signals should never be marked as clean.
			if (!is_unowned) {
				set_signal_status(reaction, CLEAN);
			}
		}

		return false;
	}

	/**
	 * @param {unknown} error
	 * @param {Effect} effect
	 */
	function propagate_error(error, effect) {
		/** @type {Effect | null} */
		var current = effect;

		while (current !== null) {
			if ((current.f & BOUNDARY_EFFECT) !== 0) {
				try {
					// @ts-expect-error
					current.fn(error);
					return;
				} catch {
					// Remove boundary flag from effect
					current.f ^= BOUNDARY_EFFECT;
				}
			}

			current = current.parent;
		}

		is_throwing_error = false;
		throw error;
	}

	/**
	 * @param {Effect} effect
	 */
	function should_rethrow_error(effect) {
		return (
			(effect.f & DESTROYED) === 0 &&
			(effect.parent === null || (effect.parent.f & BOUNDARY_EFFECT) === 0)
		);
	}

	/**
	 * @param {unknown} error
	 * @param {Effect} effect
	 * @param {Effect | null} previous_effect
	 * @param {ComponentContext | null} component_context
	 */
	function handle_error(error, effect, previous_effect, component_context) {
		if (is_throwing_error) {
			if (previous_effect === null) {
				is_throwing_error = false;
			}

			if (should_rethrow_error(effect)) {
				throw error;
			}

			return;
		}

		if (previous_effect !== null) {
			is_throwing_error = true;
		}

		if (
			component_context === null ||
			!(error instanceof Error) ||
			handled_errors.has(error)
		) {
			propagate_error(error, effect);
			return;
		}

		handled_errors.add(error);

		const component_stack = [];

		const effect_name = effect.fn?.name;

		if (effect_name) {
			component_stack.push(effect_name);
		}

		/** @type {ComponentContext | null} */
		let current_context = component_context;

		while (current_context !== null) {
			{
				/** @type {string} */
				var filename = current_context.function?.[FILENAME];

				if (filename) {
					const file = filename.split('/').pop();
					component_stack.push(file);
				}
			}

			current_context = current_context.p;
		}

		const indent = /Firefox/.test(navigator.userAgent) ? '  ' : '\t';
		define_property(error, 'message', {
			value: error.message + `\n${component_stack.map((name) => `\n${indent}in ${name}`).join('')}\n`
		});
		define_property(error, 'component_stack', {
			value: component_stack
		});

		const stack = error.stack;

		// Filter out internal files from callstack
		if (stack) {
			const lines = stack.split('\n');
			const new_lines = [];
			for (let i = 0; i < lines.length; i++) {
				const line = lines[i];
				if (line.includes('svelte/src/internal')) {
					continue;
				}
				new_lines.push(line);
			}
			define_property(error, 'stack', {
				value: new_lines.join('\n')
			});
		}

		propagate_error(error, effect);

		if (should_rethrow_error(effect)) {
			throw error;
		}
	}

	/**
	 * @template V
	 * @param {Reaction} reaction
	 * @returns {V}
	 */
	function update_reaction(reaction) {
		var previous_deps = new_deps;
		var previous_skipped_deps = skipped_deps;
		var previous_untracked_writes = untracked_writes;
		var previous_reaction = active_reaction;
		var previous_skip_reaction = skip_reaction;
		var prev_derived_sources = derived_sources;
		var previous_component_context = component_context;
		var flags = reaction.f;

		new_deps = /** @type {null | Value[]} */ (null);
		skipped_deps = 0;
		untracked_writes = null;
		active_reaction = (flags & (BRANCH_EFFECT | ROOT_EFFECT)) === 0 ? reaction : null;
		skip_reaction = !is_flushing_effect && (flags & UNOWNED) !== 0;
		derived_sources = null;
		component_context = reaction.ctx;

		try {
			var result = /** @type {Function} */ (0, reaction.fn)();
			var deps = reaction.deps;

			if (new_deps !== null) {
				var i;

				remove_reactions(reaction, skipped_deps);

				if (deps !== null && skipped_deps > 0) {
					deps.length = skipped_deps + new_deps.length;
					for (i = 0; i < new_deps.length; i++) {
						deps[skipped_deps + i] = new_deps[i];
					}
				} else {
					reaction.deps = deps = new_deps;
				}

				if (!skip_reaction) {
					for (i = skipped_deps; i < deps.length; i++) {
						(deps[i].reactions ??= []).push(reaction);
					}
				}
			} else if (deps !== null && skipped_deps < deps.length) {
				remove_reactions(reaction, skipped_deps);
				deps.length = skipped_deps;
			}

			return result;
		} finally {
			new_deps = previous_deps;
			skipped_deps = previous_skipped_deps;
			untracked_writes = previous_untracked_writes;
			active_reaction = previous_reaction;
			skip_reaction = previous_skip_reaction;
			derived_sources = prev_derived_sources;
			component_context = previous_component_context;
		}
	}

	/**
	 * @template V
	 * @param {Reaction} signal
	 * @param {Value<V>} dependency
	 * @returns {void}
	 */
	function remove_reaction(signal, dependency) {
		let reactions = dependency.reactions;
		if (reactions !== null) {
			var index = reactions.indexOf(signal);
			if (index !== -1) {
				var new_length = reactions.length - 1;
				if (new_length === 0) {
					reactions = dependency.reactions = null;
				} else {
					// Swap with last element and then remove.
					reactions[index] = reactions[new_length];
					reactions.pop();
				}
			}
		}
		// If the derived has no reactions, then we can disconnect it from the graph,
		// allowing it to either reconnect in the future, or be GC'd by the VM.
		if (
			reactions === null &&
			(dependency.f & DERIVED) !== 0 &&
			// Destroying a child effect while updating a parent effect can cause a dependency to appear
			// to be unused, when in fact it is used by the currently-updating parent. Checking `new_deps`
			// allows us to skip the expensive work of disconnecting and immediately reconnecting it
			(new_deps === null || !new_deps.includes(dependency))
		) {
			set_signal_status(dependency, MAYBE_DIRTY);
			// If we are working with a derived that is owned by an effect, then mark it as being
			// disconnected.
			if ((dependency.f & (UNOWNED | DISCONNECTED)) === 0) {
				dependency.f ^= DISCONNECTED;
			}
			remove_reactions(/** @type {Derived} **/ (dependency), 0);
		}
	}

	/**
	 * @param {Reaction} signal
	 * @param {number} start_index
	 * @returns {void}
	 */
	function remove_reactions(signal, start_index) {
		var dependencies = signal.deps;
		if (dependencies === null) return;

		for (var i = start_index; i < dependencies.length; i++) {
			remove_reaction(signal, dependencies[i]);
		}
	}

	/**
	 * @param {Effect} effect
	 * @returns {void}
	 */
	function update_effect(effect) {
		var flags = effect.f;

		if ((flags & DESTROYED) !== 0) {
			return;
		}

		set_signal_status(effect, CLEAN);

		var previous_effect = active_effect;
		var previous_component_context = component_context;

		active_effect = effect;

		{
			var previous_component_fn = dev_current_component_function;
			dev_current_component_function = effect.component_function;
		}

		try {
			if ((flags & BLOCK_EFFECT) !== 0) {
				destroy_block_effect_children(effect);
			} else {
				destroy_effect_children(effect);
			}
			destroy_effect_deriveds(effect);

			execute_effect_teardown(effect);
			var teardown = update_reaction(effect);
			effect.teardown = typeof teardown === 'function' ? teardown : null;
			effect.version = current_version;

			if (DEV) {
				dev_effect_stack.push(effect);
			}
		} catch (error) {
			handle_error(error, effect, previous_effect, previous_component_context || effect.ctx);
		} finally {
			active_effect = previous_effect;

			{
				dev_current_component_function = previous_component_fn;
			}
		}
	}

	function log_effect_stack() {
		// eslint-disable-next-line no-console
		console.error(
			'Last ten effects were: ',
			dev_effect_stack.slice(-10).map((d) => d.fn)
		);
		dev_effect_stack = [];
	}

	function infinite_loop_guard() {
		if (flush_count > 1000) {
			flush_count = 0;
			try {
				effect_update_depth_exceeded();
			} catch (error) {
				{
					// stack is garbage, ignore. Instead add a console.error message.
					define_property(error, 'stack', {
						value: ''
					});
				}
				// Try and handle the error so it can be caught at a boundary, that's
				// if there's an effect available from when it was last scheduled
				if (last_scheduled_effect !== null) {
					{
						try {
							handle_error(error, last_scheduled_effect, null, null);
						} catch (e) {
							// Only log the effect stack if the error is re-thrown
							log_effect_stack();
							throw e;
						}
					}
				} else {
					{
						log_effect_stack();
					}
					throw error;
				}
			}
		}
		flush_count++;
	}

	/**
	 * @param {Array<Effect>} root_effects
	 * @returns {void}
	 */
	function flush_queued_root_effects(root_effects) {
		var length = root_effects.length;
		if (length === 0) {
			return;
		}
		infinite_loop_guard();

		var previously_flushing_effect = is_flushing_effect;
		is_flushing_effect = true;

		try {
			for (var i = 0; i < length; i++) {
				var effect = root_effects[i];

				if ((effect.f & CLEAN) === 0) {
					effect.f ^= CLEAN;
				}

				/** @type {Effect[]} */
				var collected_effects = [];

				process_effects(effect, collected_effects);
				flush_queued_effects(collected_effects);
			}
		} finally {
			is_flushing_effect = previously_flushing_effect;
		}
	}

	/**
	 * @param {Array<Effect>} effects
	 * @returns {void}
	 */
	function flush_queued_effects(effects) {
		var length = effects.length;
		if (length === 0) return;

		for (var i = 0; i < length; i++) {
			var effect = effects[i];

			if ((effect.f & (DESTROYED | INERT)) === 0) {
				try {
					if (check_dirtiness(effect)) {
						update_effect(effect);

						// Effects with no dependencies or teardown do not get added to the effect tree.
						// Deferred effects (e.g. `$effect(...)`) _are_ added to the tree because we
						// don't know if we need to keep them until they are executed. Doing the check
						// here (rather than in `update_effect`) allows us to skip the work for
						// immediate effects.
						if (effect.deps === null && effect.first === null && effect.nodes_start === null) {
							if (effect.teardown === null) {
								// remove this effect from the graph
								unlink_effect(effect);
							} else {
								// keep the effect in the graph, but free up some memory
								effect.fn = null;
							}
						}
					}
				} catch (error) {
					handle_error(error, effect, null, effect.ctx);
				}
			}
		}
	}

	function process_deferred() {
		is_micro_task_queued = false;
		if (flush_count > 1001) {
			return;
		}
		const previous_queued_root_effects = queued_root_effects;
		queued_root_effects = [];
		flush_queued_root_effects(previous_queued_root_effects);

		if (!is_micro_task_queued) {
			flush_count = 0;
			last_scheduled_effect = null;
			{
				dev_effect_stack = [];
			}
		}
	}

	/**
	 * @param {Effect} signal
	 * @returns {void}
	 */
	function schedule_effect(signal) {
		if (scheduler_mode === FLUSH_MICROTASK) {
			if (!is_micro_task_queued) {
				is_micro_task_queued = true;
				queueMicrotask(process_deferred);
			}
		}

		last_scheduled_effect = signal;

		var effect = signal;

		while (effect.parent !== null) {
			effect = effect.parent;
			var flags = effect.f;

			if ((flags & (ROOT_EFFECT | BRANCH_EFFECT)) !== 0) {
				if ((flags & CLEAN) === 0) return;
				effect.f ^= CLEAN;
			}
		}

		queued_root_effects.push(effect);
	}

	/**
	 *
	 * This function both runs render effects and collects user effects in topological order
	 * from the starting effect passed in. Effects will be collected when they match the filtered
	 * bitwise flag passed in only. The collected effects array will be populated with all the user
	 * effects to be flushed.
	 *
	 * @param {Effect} effect
	 * @param {Effect[]} collected_effects
	 * @returns {void}
	 */
	function process_effects(effect, collected_effects) {
		var current_effect = effect.first;
		var effects = [];

		main_loop: while (current_effect !== null) {
			var flags = current_effect.f;
			var is_branch = (flags & BRANCH_EFFECT) !== 0;
			var is_skippable_branch = is_branch && (flags & CLEAN) !== 0;
			var sibling = current_effect.next;

			if (!is_skippable_branch && (flags & INERT) === 0) {
				if ((flags & RENDER_EFFECT) !== 0) {
					if (is_branch) {
						current_effect.f ^= CLEAN;
					} else {
						try {
							if (check_dirtiness(current_effect)) {
								update_effect(current_effect);
							}
						} catch (error) {
							handle_error(error, current_effect, null, current_effect.ctx);
						}
					}

					var child = current_effect.first;

					if (child !== null) {
						current_effect = child;
						continue;
					}
				} else if ((flags & EFFECT) !== 0) {
					effects.push(current_effect);
				}
			}

			if (sibling === null) {
				let parent = current_effect.parent;

				while (parent !== null) {
					if (effect === parent) {
						break main_loop;
					}
					var parent_sibling = parent.next;
					if (parent_sibling !== null) {
						current_effect = parent_sibling;
						continue main_loop;
					}
					parent = parent.parent;
				}
			}

			current_effect = sibling;
		}

		// We might be dealing with many effects here, far more than can be spread into
		// an array push call (callstack overflow). So let's deal with each effect in a loop.
		for (var i = 0; i < effects.length; i++) {
			child = effects[i];
			collected_effects.push(child);
			process_effects(child, collected_effects);
		}
	}

	/**
	 * Internal version of `flushSync` with the option to not flush previous effects.
	 * Returns the result of the passed function, if given.
	 * @param {() => any} [fn]
	 * @returns {any}
	 */
	function flush_sync(fn) {
		var previous_scheduler_mode = scheduler_mode;
		var previous_queued_root_effects = queued_root_effects;

		try {
			infinite_loop_guard();

			/** @type {Effect[]} */
			const root_effects = [];

			scheduler_mode = FLUSH_SYNC;
			queued_root_effects = root_effects;
			is_micro_task_queued = false;

			flush_queued_root_effects(previous_queued_root_effects);

			var result = fn?.();

			flush_tasks();
			if (queued_root_effects.length > 0 || root_effects.length > 0) {
				flush_sync();
			}

			flush_count = 0;
			last_scheduled_effect = null;
			if (DEV) {
				dev_effect_stack = [];
			}

			return result;
		} finally {
			scheduler_mode = previous_scheduler_mode;
			queued_root_effects = previous_queued_root_effects;
		}
	}

	/**
	 * Returns a promise that resolves once any pending state changes have been applied.
	 * @returns {Promise<void>}
	 */
	async function tick() {
		await Promise.resolve();
		// By calling flush_sync we guarantee that any pending state changes are applied after one tick.
		// TODO look into whether we can make flushing subsequent updates synchronously in the future.
		flush_sync();
	}

	/**
	 * @template V
	 * @param {Value<V>} signal
	 * @returns {V}
	 */
	function get$2(signal) {
		var flags = signal.f;
		var is_derived = (flags & DERIVED) !== 0;

		// If the derived is destroyed, just execute it again without retaining
		// its memoisation properties as the derived is stale
		if (is_derived && (flags & DESTROYED) !== 0) {
			var value = execute_derived(/** @type {Derived} */ (signal));
			// Ensure the derived remains destroyed
			destroy_derived(/** @type {Derived} */ (signal));
			return value;
		}

		// Register the dependency on the current reaction signal.
		if (active_reaction !== null) {
			if (derived_sources !== null && derived_sources.includes(signal)) {
				state_unsafe_local_read();
			}
			var deps = active_reaction.deps;

			// If the signal is accessing the same dependencies in the same
			// order as it did last time, increment `skipped_deps`
			// rather than updating `new_deps`, which creates GC cost
			if (new_deps === null && deps !== null && deps[skipped_deps] === signal) {
				skipped_deps++;
			} else if (new_deps === null) {
				new_deps = [signal];
			} else {
				new_deps.push(signal);
			}

			if (
				untracked_writes !== null &&
				active_effect !== null &&
				(active_effect.f & CLEAN) !== 0 &&
				(active_effect.f & BRANCH_EFFECT) === 0 &&
				untracked_writes.includes(signal)
			) {
				set_signal_status(active_effect, DIRTY);
				schedule_effect(active_effect);
			}
		} else if (is_derived && /** @type {Derived} */ (signal).deps === null) {
			var derived = /** @type {Derived} */ (signal);
			var parent = derived.parent;
			var target = derived;

			while (parent !== null) {
				// Attach the derived to the nearest parent effect, if there are deriveds
				// in between then we also need to attach them too
				if ((parent.f & DERIVED) !== 0) {
					var parent_derived = /** @type {Derived} */ (parent);

					target = parent_derived;
					parent = parent_derived.parent;
				} else {
					var parent_effect = /** @type {Effect} */ (parent);

					if (!parent_effect.deriveds?.includes(target)) {
						(parent_effect.deriveds ??= []).push(target);
					}
					break;
				}
			}
		}

		if (is_derived) {
			derived = /** @type {Derived} */ (signal);

			if (check_dirtiness(derived)) {
				update_derived(derived);
			}
		}

		return signal.v;
	}

	/**
	 * When used inside a [`$derived`](https://svelte.dev/docs/svelte/$derived) or [`$effect`](https://svelte.dev/docs/svelte/$effect),
	 * any state read inside `fn` will not be treated as a dependency.
	 *
	 * ```ts
	 * $effect(() => {
	 *   // this will run when `data` changes, but not when `time` changes
	 *   save(data, {
	 *     timestamp: untrack(() => time)
	 *   });
	 * });
	 * ```
	 * @template T
	 * @param {() => T} fn
	 * @returns {T}
	 */
	function untrack(fn) {
		const previous_reaction = active_reaction;
		try {
			active_reaction = null;
			return fn();
		} finally {
			active_reaction = previous_reaction;
		}
	}

	const STATUS_MASK = ~(DIRTY | MAYBE_DIRTY | CLEAN);

	/**
	 * @param {Signal} signal
	 * @param {number} status
	 * @returns {void}
	 */
	function set_signal_status(signal, status) {
		signal.f = (signal.f & STATUS_MASK) | status;
	}

	/**
	 * Retrieves the context that belongs to the closest parent component with the specified `key`.
	 * Must be called during component initialisation.
	 *
	 * @template T
	 * @param {any} key
	 * @returns {T}
	 */
	function getContext(key) {
		const context_map = get_or_init_context_map('getContext');
		const result = /** @type {T} */ (context_map.get(key));

		{
			const fn = /** @type {ComponentContext} */ (component_context).function;
			if (fn) {
				add_owner(result, fn, true);
			}
		}

		return result;
	}

	/**
	 * Associates an arbitrary `context` object with the current component and the specified `key`
	 * and returns that object. The context is then available to children of the component
	 * (including slotted content) with `getContext`.
	 *
	 * Like lifecycle functions, this must be called during component initialisation.
	 *
	 * @template T
	 * @param {any} key
	 * @param {T} context
	 * @returns {T}
	 */
	function setContext(key, context) {
		const context_map = get_or_init_context_map('setContext');
		context_map.set(key, context);
		return context;
	}

	/**
	 * Checks whether a given `key` has been set in the context of a parent component.
	 * Must be called during component initialisation.
	 *
	 * @param {any} key
	 * @returns {boolean}
	 */
	function hasContext(key) {
		const context_map = get_or_init_context_map('hasContext');
		return context_map.has(key);
	}

	/**
	 * Retrieves the whole context map that belongs to the closest parent component.
	 * Must be called during component initialisation. Useful, for example, if you
	 * programmatically create a component and want to pass the existing context to it.
	 *
	 * @template {Map<any, any>} [T=Map<any, any>]
	 * @returns {T}
	 */
	function getAllContexts() {
		const context_map = get_or_init_context_map('getAllContexts');

		{
			const fn = component_context?.function;
			if (fn) {
				for (const value of context_map.values()) {
					add_owner(value, fn, true);
				}
			}
		}

		return /** @type {T} */ (context_map);
	}

	/**
	 * @param {string} name
	 * @returns {Map<unknown, unknown>}
	 */
	function get_or_init_context_map(name) {
		if (component_context === null) {
			lifecycle_outside_component(name);
		}

		return (component_context.c ??= new Map(get_parent_context(component_context) || undefined));
	}

	/**
	 * @param {ComponentContext} component_context
	 * @returns {Map<unknown, unknown> | null}
	 */
	function get_parent_context(component_context) {
		let parent = component_context.p;
		while (parent !== null) {
			const context_map = parent.c;
			if (context_map !== null) {
				return context_map;
			}
			parent = parent.p;
		}
		return null;
	}

	/**
	 * @template {number | bigint} T
	 * @param {Value<T>} signal
	 * @param {1 | -1} [d]
	 * @returns {T}
	 */
	function update(signal, d = 1) {
		var value = get$2(signal);
		var result = d === 1 ? value++ : value--;

		set(signal, value);

		// @ts-expect-error
		return result;
	}

	/**
	 * @param {Record<string, unknown>} props
	 * @param {any} runes
	 * @param {Function} [fn]
	 * @returns {void}
	 */
	function push(props, runes = false, fn) {
		component_context = {
			p: component_context,
			c: null,
			e: null,
			m: false,
			s: props,
			x: null,
			l: null
		};

		if (legacy_mode_flag && !runes) {
			component_context.l = {
				s: null,
				u: null,
				r1: [],
				r2: source(false)
			};
		}

		{
			// component function
			component_context.function = fn;
			dev_current_component_function = fn;
		}
	}

	/**
	 * @template {Record<string, any>} T
	 * @param {T} [component]
	 * @returns {T}
	 */
	function pop(component) {
		const context_stack_item = component_context;
		if (context_stack_item !== null) {
			if (component !== undefined) {
				context_stack_item.x = component;
			}
			const component_effects = context_stack_item.e;
			if (component_effects !== null) {
				var previous_effect = active_effect;
				var previous_reaction = active_reaction;
				context_stack_item.e = null;
				try {
					for (var i = 0; i < component_effects.length; i++) {
						var component_effect = component_effects[i];
						set_active_effect(component_effect.effect);
						set_active_reaction(component_effect.reaction);
						effect(component_effect.fn);
					}
				} finally {
					set_active_effect(previous_effect);
					set_active_reaction(previous_reaction);
				}
			}
			component_context = context_stack_item.p;
			{
				dev_current_component_function = context_stack_item.p?.function ?? null;
			}
			context_stack_item.m = true;
		}
		// Micro-optimization: Don't set .a above to the empty object
		// so it can be garbage-collected when the return here is unused
		return component || /** @type {T} */ ({});
	}

	/**
	 * Possibly traverse an object and read all its properties so that they're all reactive in case this is `$state`.
	 * Does only check first level of an object for performance reasons (heuristic should be good for 99% of all cases).
	 * @param {any} value
	 * @returns {void}
	 */
	function deep_read_state(value) {
		if (typeof value !== 'object' || !value || value instanceof EventTarget) {
			return;
		}

		if (STATE_SYMBOL in value) {
			deep_read(value);
		} else if (!Array.isArray(value)) {
			for (let key in value) {
				const prop = value[key];
				if (typeof prop === 'object' && prop && STATE_SYMBOL in prop) {
					deep_read(prop);
				}
			}
		}
	}

	/**
	 * Deeply traverse an object and read all its properties
	 * so that they're all reactive in case this is `$state`
	 * @param {any} value
	 * @param {Set<any>} visited
	 * @returns {void}
	 */
	function deep_read(value, visited = new Set()) {
		if (
			typeof value === 'object' &&
			value !== null &&
			// We don't want to traverse DOM elements
			!(value instanceof EventTarget) &&
			!visited.has(value)
		) {
			visited.add(value);
			// When working with a possible SvelteDate, this
			// will ensure we capture changes to it.
			if (value instanceof Date) {
				value.getTime();
			}
			for (let key in value) {
				try {
					deep_read(value[key], visited);
				} catch (e) {
					// continue
				}
			}
			const proto = get_prototype_of(value);
			if (
				proto !== Object.prototype &&
				proto !== Array.prototype &&
				proto !== Map.prototype &&
				proto !== Set.prototype &&
				proto !== Date.prototype
			) {
				const descriptors = get_descriptors(proto);
				for (let key in descriptors) {
					const get = descriptors[key].get;
					if (get) {
						try {
							get.call(value);
						} catch (e) {
							// continue
						}
					}
				}
			}
		}
	}

	{
		/**
		 * @param {string} rune
		 */
		function throw_rune_error(rune) {
			if (!(rune in globalThis)) {
				// TODO if people start adjusting the "this can contain runes" config through v-p-s more, adjust this message
				/** @type {any} */
				let value; // let's hope noone modifies this global, but belts and braces
				Object.defineProperty(globalThis, rune, {
					configurable: true,
					// eslint-disable-next-line getter-return
					get: () => {
						if (value !== undefined) {
							return value;
						}

						rune_outside_svelte(rune);
					},
					set: (v) => {
						value = v;
					}
				});
			}
		}

		throw_rune_error('$state');
		throw_rune_error('$effect');
		throw_rune_error('$derived');
		throw_rune_error('$inspect');
		throw_rune_error('$props');
		throw_rune_error('$bindable');
	}

	const regex_return_characters = /\r/g;

	/**
	 * @param {string} str
	 * @returns {string}
	 */
	function hash(str) {
		str = str.replace(regex_return_characters, '');
		let hash = 5381;
		let i = str.length;

		while (i--) hash = ((hash << 5) - hash) ^ str.charCodeAt(i);
		return (hash >>> 0).toString(36);
	}

	/**
	 * @param {string} name
	 */
	function is_capture_event(name) {
		return name.endsWith('capture') && name !== 'gotpointercapture' && name !== 'lostpointercapture';
	}

	/** List of Element events that will be delegated */
	const DELEGATED_EVENTS = [
		'beforeinput',
		'click',
		'change',
		'dblclick',
		'contextmenu',
		'focusin',
		'focusout',
		'input',
		'keydown',
		'keyup',
		'mousedown',
		'mousemove',
		'mouseout',
		'mouseover',
		'mouseup',
		'pointerdown',
		'pointermove',
		'pointerout',
		'pointerover',
		'pointerup',
		'touchend',
		'touchmove',
		'touchstart'
	];

	/**
	 * Returns `true` if `event_name` is a delegated event
	 * @param {string} event_name
	 */
	function is_delegated(event_name) {
		return DELEGATED_EVENTS.includes(event_name);
	}

	/**
	 * @type {Record<string, string>}
	 * List of attribute names that should be aliased to their property names
	 * because they behave differently between setting them as an attribute and
	 * setting them as a property.
	 */
	const ATTRIBUTE_ALIASES = {
		// no `class: 'className'` because we handle that separately
		formnovalidate: 'formNoValidate',
		ismap: 'isMap',
		nomodule: 'noModule',
		playsinline: 'playsInline',
		readonly: 'readOnly',
		defaultvalue: 'defaultValue',
		defaultchecked: 'defaultChecked',
		srcobject: 'srcObject'
	};

	/**
	 * @param {string} name
	 */
	function normalize_attribute(name) {
		name = name.toLowerCase();
		return ATTRIBUTE_ALIASES[name] ?? name;
	}

	/**
	 * Subset of delegated events which should be passive by default.
	 * These two are already passive via browser defaults on window, document and body.
	 * But since
	 * - we're delegating them
	 * - they happen often
	 * - they apply to mobile which is generally less performant
	 * we're marking them as passive by default for other elements, too.
	 */
	const PASSIVE_EVENTS = ['touchstart', 'touchmove'];

	/**
	 * Returns `true` if `name` is a passive event
	 * @param {string} name
	 */
	function is_passive_event(name) {
		return PASSIVE_EVENTS.includes(name);
	}

	/** List of elements that require raw contents and should not have SSR comments put in them */
	const RAW_TEXT_ELEMENTS = /** @type {const} */ (['textarea', 'script', 'style', 'title']);

	/** @param {string} name */
	function is_raw_text_element(name) {
		return RAW_TEXT_ELEMENTS.includes(/** @type {RAW_TEXT_ELEMENTS[number]} */ (name));
	}

	/**
	 * Prevent devtools trying to make `location` a clickable link by inserting a zero-width space
	 * @param {string | undefined} location
	 */
	function sanitize_location(location) {
		return location?.replace(/\//g, '/\u200b');
	}

	/**
	 * @param {HTMLElement} dom
	 * @param {boolean} value
	 * @returns {void}
	 */
	function autofocus(dom, value) {
		if (value) {
			const body = document.body;
			dom.autofocus = true;

			queue_micro_task(() => {
				if (document.activeElement === body) {
					dom.focus();
				}
			});
		}
	}

	/**
	 * The child of a textarea actually corresponds to the defaultValue property, so we need
	 * to remove it upon hydration to avoid a bug when someone resets the form value.
	 * @param {HTMLTextAreaElement} dom
	 * @returns {void}
	 */
	function remove_textarea_child(dom) {
		if (hydrating && get_first_child(dom) !== null) {
			clear_text_content(dom);
		}
	}

	let listening_to_form_reset = false;

	function add_form_reset_listener() {
		if (!listening_to_form_reset) {
			listening_to_form_reset = true;
			document.addEventListener(
				'reset',
				(evt) => {
					// Needs to happen one tick later or else the dom properties of the form
					// elements have not updated to their reset values yet
					Promise.resolve().then(() => {
						if (!evt.defaultPrevented) {
							for (const e of /**@type {HTMLFormElement} */ (evt.target).elements) {
								// @ts-expect-error
								e.__on_r?.();
							}
						}
					});
				},
				// In the capture phase to guarantee we get noticed of it (no possiblity of stopPropagation)
				{ capture: true }
			);
		}
	}

	/**
	 * @template T
	 * @param {() => T} fn
	 */
	function without_reactive_context(fn) {
		var previous_reaction = active_reaction;
		var previous_effect = active_effect;
		set_active_reaction(null);
		set_active_effect(null);
		try {
			return fn();
		} finally {
			set_active_reaction(previous_reaction);
			set_active_effect(previous_effect);
		}
	}

	/**
	 * Listen to the given event, and then instantiate a global form reset listener if not already done,
	 * to notify all bindings when the form is reset
	 * @param {HTMLElement} element
	 * @param {string} event
	 * @param {(is_reset?: true) => void} handler
	 * @param {(is_reset?: true) => void} [on_reset]
	 */
	function listen_to_event_and_reset_event(element, event, handler, on_reset = handler) {
		element.addEventListener(event, () => without_reactive_context(handler));
		// @ts-expect-error
		const prev = element.__on_r;
		if (prev) {
			// special case for checkbox that can have multiple binds (group & checked)
			// @ts-expect-error
			element.__on_r = () => {
				prev();
				on_reset(true);
			};
		} else {
			// @ts-expect-error
			element.__on_r = () => on_reset(true);
		}

		add_form_reset_listener();
	}

	/** @import { Location } from 'locate-character' */

	/** @type {Set<string>} */
	const all_registered_events = new Set();

	/** @type {Set<(events: Array<string>) => void>} */
	const root_event_handles = new Set();

	/**
	 * @param {string} event_name
	 * @param {EventTarget} dom
	 * @param {EventListener} handler
	 * @param {AddEventListenerOptions} options
	 */
	function create_event(event_name, dom, handler, options) {
		/**
		 * @this {EventTarget}
		 */
		function target_handler(/** @type {Event} */ event) {
			if (!options.capture) {
				// Only call in the bubble phase, else delegated events would be called before the capturing events
				handle_event_propagation.call(dom, event);
			}
			if (!event.cancelBubble) {
				return without_reactive_context(() => {
					return handler.call(this, event);
				});
			}
		}

		// Chrome has a bug where pointer events don't work when attached to a DOM element that has been cloned
		// with cloneNode() and the DOM element is disconnected from the document. To ensure the event works, we
		// defer the attachment till after it's been appended to the document. TODO: remove this once Chrome fixes
		// this bug. The same applies to wheel events and touch events.
		if (
			event_name.startsWith('pointer') ||
			event_name.startsWith('touch') ||
			event_name === 'wheel'
		) {
			queue_micro_task(() => {
				dom.addEventListener(event_name, target_handler, options);
			});
		} else {
			dom.addEventListener(event_name, target_handler, options);
		}

		return target_handler;
	}

	/**
	 * @param {string} event_name
	 * @param {Element} dom
	 * @param {EventListener} handler
	 * @param {boolean} capture
	 * @param {boolean} [passive]
	 * @returns {void}
	 */
	function event(event_name, dom, handler, capture, passive) {
		var options = { capture, passive };
		var target_handler = create_event(event_name, dom, handler, options);

		// @ts-ignore
		if (dom === document.body || dom === window || dom === document) {
			teardown(() => {
				dom.removeEventListener(event_name, target_handler, options);
			});
		}
	}

	/**
	 * @param {Array<string>} events
	 * @returns {void}
	 */
	function delegate(events) {
		for (var i = 0; i < events.length; i++) {
			all_registered_events.add(events[i]);
		}

		for (var fn of root_event_handles) {
			fn(events);
		}
	}

	/**
	 * @this {EventTarget}
	 * @param {Event} event
	 * @returns {void}
	 */
	function handle_event_propagation(event) {
		var handler_element = this;
		var owner_document = /** @type {Node} */ (handler_element).ownerDocument;
		var event_name = event.type;
		var path = event.composedPath?.() || [];
		var current_target = /** @type {null | Element} */ (path[0] || event.target);

		// composedPath contains list of nodes the event has propagated through.
		// We check __root to skip all nodes below it in case this is a
		// parent of the __root node, which indicates that there's nested
		// mounted apps. In this case we don't want to trigger events multiple times.
		var path_idx = 0;

		// @ts-expect-error is added below
		var handled_at = event.__root;

		if (handled_at) {
			var at_idx = path.indexOf(handled_at);
			if (
				at_idx !== -1 &&
				(handler_element === document || handler_element === /** @type {any} */ (window))
			) {
				// This is the fallback document listener or a window listener, but the event was already handled
				// -> ignore, but set handle_at to document/window so that we're resetting the event
				// chain in case someone manually dispatches the same event object again.
				// @ts-expect-error
				event.__root = handler_element;
				return;
			}

			// We're deliberately not skipping if the index is higher, because
			// someone could create an event programmatically and emit it multiple times,
			// in which case we want to handle the whole propagation chain properly each time.
			// (this will only be a false negative if the event is dispatched multiple times and
			// the fallback document listener isn't reached in between, but that's super rare)
			var handler_idx = path.indexOf(handler_element);
			if (handler_idx === -1) {
				// handle_idx can theoretically be -1 (happened in some JSDOM testing scenarios with an event listener on the window object)
				// so guard against that, too, and assume that everything was handled at this point.
				return;
			}

			if (at_idx <= handler_idx) {
				path_idx = at_idx;
			}
		}

		current_target = /** @type {Element} */ (path[path_idx] || event.target);
		// there can only be one delegated event per element, and we either already handled the current target,
		// or this is the very first target in the chain which has a non-delegated listener, in which case it's safe
		// to handle a possible delegated event on it later (through the root delegation listener for example).
		if (current_target === handler_element) return;

		// Proxy currentTarget to correct target
		define_property(event, 'currentTarget', {
			configurable: true,
			get() {
				return current_target || owner_document;
			}
		});

		// This started because of Chromium issue https://chromestatus.com/feature/5128696823545856,
		// where removal or moving of of the DOM can cause sync `blur` events to fire, which can cause logic
		// to run inside the current `active_reaction`, which isn't what we want at all. However, on reflection,
		// it's probably best that all event handled by Svelte have this behaviour, as we don't really want
		// an event handler to run in the context of another reaction or effect.
		var previous_reaction = active_reaction;
		var previous_effect = active_effect;
		set_active_reaction(null);
		set_active_effect(null);

		try {
			/**
			 * @type {unknown}
			 */
			var throw_error;
			/**
			 * @type {unknown[]}
			 */
			var other_errors = [];

			while (current_target !== null) {
				/** @type {null | Element} */
				var parent_element =
					current_target.assignedSlot ||
					current_target.parentNode ||
					/** @type {any} */ (current_target).host ||
					null;

				try {
					// @ts-expect-error
					var delegated = current_target['__' + event_name];

					if (delegated !== undefined && !(/** @type {any} */ (current_target).disabled)) {
						if (is_array(delegated)) {
							var [fn, ...data] = delegated;
							fn.apply(current_target, [event, ...data]);
						} else {
							delegated.call(current_target, event);
						}
					}
				} catch (error) {
					if (throw_error) {
						other_errors.push(error);
					} else {
						throw_error = error;
					}
				}
				if (event.cancelBubble || parent_element === handler_element || parent_element === null) {
					break;
				}
				current_target = parent_element;
			}

			if (throw_error) {
				for (let error of other_errors) {
					// Throw the rest of the errors, one-by-one on a microtask
					queueMicrotask(() => {
						throw error;
					});
				}
				throw throw_error;
			}
		} finally {
			// @ts-expect-error is used above
			event.__root = handler_element;
			// @ts-ignore remove proxy on currentTarget
			delete event.currentTarget;
			set_active_reaction(previous_reaction);
			set_active_effect(previous_effect);
		}
	}

	/** @param {string} html */
	function create_fragment_from_html(html) {
		var elem = document.createElement('template');
		elem.innerHTML = html;
		return elem.content;
	}

	/** @import { Effect, TemplateNode } from '#client' */

	/**
	 * @param {TemplateNode} start
	 * @param {TemplateNode | null} end
	 */
	function assign_nodes(start, end) {
		var effect = /** @type {Effect} */ (active_effect);
		if (effect.nodes_start === null) {
			effect.nodes_start = start;
			effect.nodes_end = end;
		}
	}

	/**
	 * @param {string} content
	 * @param {number} flags
	 * @returns {() => Node | Node[]}
	 */
	/*#__NO_SIDE_EFFECTS__*/
	function template(content, flags) {
		var is_fragment = (flags & TEMPLATE_FRAGMENT) !== 0;
		var use_import_node = (flags & TEMPLATE_USE_IMPORT_NODE) !== 0;

		/** @type {Node} */
		var node;

		/**
		 * Whether or not the first item is a text/element node. If not, we need to
		 * create an additional comment node to act as `effect.nodes.start`
		 */
		var has_start = !content.startsWith('<!>');

		return () => {
			if (hydrating) {
				assign_nodes(hydrate_node, null);
				return hydrate_node;
			}

			if (node === undefined) {
				node = create_fragment_from_html(has_start ? content : '<!>' + content);
				if (!is_fragment) node = /** @type {Node} */ (get_first_child(node));
			}

			var clone = /** @type {TemplateNode} */ (
				use_import_node ? document.importNode(node, true) : node.cloneNode(true)
			);

			if (is_fragment) {
				var start = /** @type {TemplateNode} */ (get_first_child(clone));
				var end = /** @type {TemplateNode} */ (clone.lastChild);

				assign_nodes(start, end);
			} else {
				assign_nodes(clone, clone);
			}

			return clone;
		};
	}

	/**
	 * Don't mark this as side-effect-free, hydration needs to walk all nodes
	 * @param {any} value
	 */
	function text(value = '') {
		if (!hydrating) {
			var t = create_text(value + '');
			assign_nodes(t, t);
			return t;
		}

		var node = hydrate_node;

		if (node.nodeType !== 3) {
			// if an {expression} is empty during SSR, we need to insert an empty text node
			node.before((node = create_text()));
			set_hydrate_node(node);
		}

		assign_nodes(node, node);
		return node;
	}

	function comment() {
		// we're not delegating to `template` here for performance reasons
		if (hydrating) {
			assign_nodes(hydrate_node, null);
			return hydrate_node;
		}

		var frag = document.createDocumentFragment();
		var start = document.createComment('');
		var anchor = create_text();
		frag.append(start, anchor);

		assign_nodes(start, anchor);

		return frag;
	}

	/**
	 * Assign the created (or in hydration mode, traversed) dom elements to the current block
	 * and insert the elements into the dom (in client mode).
	 * @param {Text | Comment | Element} anchor
	 * @param {DocumentFragment | Element} dom
	 */
	function append(anchor, dom) {
		if (hydrating) {
			/** @type {Effect} */ (active_effect).nodes_end = hydrate_node;
			hydrate_next();
			return;
		}

		if (anchor === null) {
			// edge case — void `<svelte:element>` with content
			return;
		}

		anchor.before(/** @type {Node} */ (dom));
	}

	/** @import { ComponentContext, Effect, TemplateNode } from '#client' */
	/** @import { Component, ComponentType, SvelteComponent, MountOptions } from '../../index.js' */

	/**
	 * This is normally true — block effects should run their intro transitions —
	 * but is false during hydration (unless `options.intro` is `true`) and
	 * when creating the children of a `<svelte:element>` that just changed tag
	 */
	let should_intro = true;

	/** @param {boolean} value */
	function set_should_intro(value) {
		should_intro = value;
	}

	/**
	 * @param {Element} text
	 * @param {string} value
	 * @returns {void}
	 */
	function set_text(text, value) {
		// For objects, we apply string coercion (which might make things like $state array references in the template reactive) before diffing
		var str = value == null ? '' : typeof value === 'object' ? value + '' : value;
		// @ts-expect-error
		if (str !== (text.__t ??= text.nodeValue)) {
			// @ts-expect-error
			text.__t = str;
			text.nodeValue = str == null ? '' : str + '';
		}
	}

	/**
	 * Mounts a component to the given target and returns the exports and potentially the props (if compiled with `accessors: true`) of the component.
	 * Transitions will play during the initial render unless the `intro` option is set to `false`.
	 *
	 * @template {Record<string, any>} Props
	 * @template {Record<string, any>} Exports
	 * @param {ComponentType<SvelteComponent<Props>> | Component<Props, Exports, any>} component
	 * @param {MountOptions<Props>} options
	 * @returns {Exports}
	 */
	function mount(component, options) {
		return _mount(component, options);
	}

	/**
	 * Hydrates a component on the given target and returns the exports and potentially the props (if compiled with `accessors: true`) of the component
	 *
	 * @template {Record<string, any>} Props
	 * @template {Record<string, any>} Exports
	 * @param {ComponentType<SvelteComponent<Props>> | Component<Props, Exports, any>} component
	 * @param {{} extends Props ? {
	 * 		target: Document | Element | ShadowRoot;
	 * 		props?: Props;
	 * 		events?: Record<string, (e: any) => any>;
	 *  	context?: Map<any, any>;
	 * 		intro?: boolean;
	 * 		recover?: boolean;
	 * 	} : {
	 * 		target: Document | Element | ShadowRoot;
	 * 		props: Props;
	 * 		events?: Record<string, (e: any) => any>;
	 *  	context?: Map<any, any>;
	 * 		intro?: boolean;
	 * 		recover?: boolean;
	 * 	}} options
	 * @returns {Exports}
	 */
	function hydrate(component, options) {
		init_operations();
		options.intro = options.intro ?? false;
		const target = options.target;
		const was_hydrating = hydrating;
		const previous_hydrate_node = hydrate_node;

		try {
			var anchor = /** @type {TemplateNode} */ (get_first_child(target));
			while (
				anchor &&
				(anchor.nodeType !== 8 || /** @type {Comment} */ (anchor).data !== HYDRATION_START)
			) {
				anchor = /** @type {TemplateNode} */ (get_next_sibling(anchor));
			}

			if (!anchor) {
				throw HYDRATION_ERROR;
			}

			set_hydrating(true);
			set_hydrate_node(/** @type {Comment} */ (anchor));
			hydrate_next();

			const instance = _mount(component, { ...options, anchor });

			if (
				hydrate_node === null ||
				hydrate_node.nodeType !== 8 ||
				/** @type {Comment} */ (hydrate_node).data !== HYDRATION_END
			) {
				hydration_mismatch();
				throw HYDRATION_ERROR;
			}

			set_hydrating(false);

			return /**  @type {Exports} */ (instance);
		} catch (error) {
			if (error === HYDRATION_ERROR) {
				if (options.recover === false) {
					hydration_failed();
				}

				// If an error occured above, the operations might not yet have been initialised.
				init_operations();
				clear_text_content(target);

				set_hydrating(false);
				return mount(component, options);
			}

			throw error;
		} finally {
			set_hydrating(was_hydrating);
			set_hydrate_node(previous_hydrate_node);
		}
	}

	/** @type {Map<string, number>} */
	const document_listeners = new Map();

	/**
	 * @template {Record<string, any>} Exports
	 * @param {ComponentType<SvelteComponent<any>> | Component<any>} Component
	 * @param {MountOptions} options
	 * @returns {Exports}
	 */
	function _mount(Component, { target, anchor, props = {}, events, context, intro = true }) {
		init_operations();

		var registered_events = new Set();

		/** @param {Array<string>} events */
		var event_handle = (events) => {
			for (var i = 0; i < events.length; i++) {
				var event_name = events[i];

				if (registered_events.has(event_name)) continue;
				registered_events.add(event_name);

				var passive = is_passive_event(event_name);

				// Add the event listener to both the container and the document.
				// The container listener ensures we catch events from within in case
				// the outer content stops propagation of the event.
				target.addEventListener(event_name, handle_event_propagation, { passive });

				var n = document_listeners.get(event_name);

				if (n === undefined) {
					// The document listener ensures we catch events that originate from elements that were
					// manually moved outside of the container (e.g. via manual portals).
					document.addEventListener(event_name, handle_event_propagation, { passive });
					document_listeners.set(event_name, 1);
				} else {
					document_listeners.set(event_name, n + 1);
				}
			}
		};

		event_handle(array_from(all_registered_events));
		root_event_handles.add(event_handle);

		/** @type {Exports} */
		// @ts-expect-error will be defined because the render effect runs synchronously
		var component = undefined;

		var unmount = component_root(() => {
			var anchor_node = anchor ?? target.appendChild(create_text());

			branch(() => {
				if (context) {
					push({});
					var ctx = /** @type {ComponentContext} */ (component_context);
					ctx.c = context;
				}

				if (events) {
					// We can't spread the object or else we'd lose the state proxy stuff, if it is one
					/** @type {any} */ (props).$$events = events;
				}

				if (hydrating) {
					assign_nodes(/** @type {TemplateNode} */ (anchor_node), null);
				}

				should_intro = intro;
				// @ts-expect-error the public typings are not what the actual function looks like
				component = Component(anchor_node, props) || {};
				should_intro = true;

				if (hydrating) {
					/** @type {Effect} */ (active_effect).nodes_end = hydrate_node;
				}

				if (context) {
					pop();
				}
			});

			return () => {
				for (var event_name of registered_events) {
					target.removeEventListener(event_name, handle_event_propagation);

					var n = /** @type {number} */ (document_listeners.get(event_name));

					if (--n === 0) {
						document.removeEventListener(event_name, handle_event_propagation);
						document_listeners.delete(event_name);
					} else {
						document_listeners.set(event_name, n);
					}
				}

				root_event_handles.delete(event_handle);

				if (anchor_node !== anchor) {
					anchor_node.parentNode?.removeChild(anchor_node);
				}
			};
		});

		mounted_components.set(component, unmount);
		return component;
	}

	/**
	 * References of the components that were mounted or hydrated.
	 * Uses a `WeakMap` to avoid memory leaks.
	 */
	let mounted_components = new WeakMap();

	/**
	 * Unmounts a component that was previously mounted using `mount` or `hydrate`.
	 *
	 * Since 5.13.0, if `options.outro` is `true`, [transitions](https://svelte.dev/docs/svelte/transition) will play before the component is removed from the DOM.
	 *
	 * Returns a `Promise` that resolves after transitions have completed if `options.outro` is true, or immediately otherwise (prior to 5.13.0, returns `void`).
	 *
	 * ```js
	 * import { mount, unmount } from 'svelte';
	 * import App from './App.svelte';
	 *
	 * const app = mount(App, { target: document.body });
	 *
	 * // later...
	 * unmount(app, { outro: true });
	 * ```
	 * @param {Record<string, any>} component
	 * @param {{ outro?: boolean }} [options]
	 * @returns {Promise<void>}
	 */
	function unmount(component, options) {
		const fn = mounted_components.get(component);

		if (fn) {
			mounted_components.delete(component);
			return fn(options);
		}

		{
			lifecycle_double_unmount();
		}

		return Promise.resolve();
	}

	/** @import { Effect, TemplateNode } from '#client' */

	/**
	 * @param {TemplateNode} node
	 * @param {(branch: (fn: (anchor: Node) => void, flag?: boolean) => void) => void} fn
	 * @param {boolean} [elseif] True if this is an `{:else if ...}` block rather than an `{#if ...}`, as that affects which transitions are considered 'local'
	 * @returns {void}
	 */
	function if_block(node, fn, elseif = false) {
		if (hydrating) {
			hydrate_next();
		}

		var anchor = node;

		/** @type {Effect | null} */
		var consequent_effect = null;

		/** @type {Effect | null} */
		var alternate_effect = null;

		/** @type {UNINITIALIZED | boolean | null} */
		var condition = UNINITIALIZED;

		var flags = elseif ? EFFECT_TRANSPARENT : 0;

		var has_branch = false;

		const set_branch = (/** @type {(anchor: Node) => void} */ fn, flag = true) => {
			has_branch = true;
			update_branch(flag, fn);
		};

		const update_branch = (
			/** @type {boolean | null} */ new_condition,
			/** @type {null | ((anchor: Node) => void)} */ fn
		) => {
			if (condition === (condition = new_condition)) return;

			/** Whether or not there was a hydration mismatch. Needs to be a `let` or else it isn't treeshaken out */
			let mismatch = false;

			if (hydrating) {
				const is_else = /** @type {Comment} */ (anchor).data === HYDRATION_START_ELSE;

				if (!!condition === is_else) {
					// Hydration mismatch: remove everything inside the anchor and start fresh.
					// This could happen with `{#if browser}...{/if}`, for example
					anchor = remove_nodes();

					set_hydrate_node(anchor);
					set_hydrating(false);
					mismatch = true;
				}
			}

			if (condition) {
				if (consequent_effect) {
					resume_effect(consequent_effect);
				} else if (fn) {
					consequent_effect = branch(() => fn(anchor));
				}

				if (alternate_effect) {
					pause_effect(alternate_effect, () => {
						alternate_effect = null;
					});
				}
			} else {
				if (alternate_effect) {
					resume_effect(alternate_effect);
				} else if (fn) {
					alternate_effect = branch(() => fn(anchor));
				}

				if (consequent_effect) {
					pause_effect(consequent_effect, () => {
						consequent_effect = null;
					});
				}
			}

			if (mismatch) {
				// continue in hydration mode
				set_hydrating(true);
			}
		};

		block(() => {
			has_branch = false;
			fn(set_branch);
			if (!has_branch) {
				update_branch(null, null);
			}
		}, flags);

		if (hydrating) {
			anchor = hydrate_node;
		}
	}

	/** @import { EachItem, EachState, Effect, MaybeSource, Source, TemplateNode, TransitionManager, Value } from '#client' */

	/**
	 * The row of a keyed each block that is currently updating. We track this
	 * so that `animate:` directives have something to attach themselves to
	 * @type {EachItem | null}
	 */
	let current_each_item = null;

	/** @param {EachItem | null} item */
	function set_current_each_item(item) {
		current_each_item = item;
	}

	/**
	 * @param {any} _
	 * @param {number} i
	 */
	function index$d(_, i) {
		return i;
	}

	/**
	 * Pause multiple effects simultaneously, and coordinate their
	 * subsequent destruction. Used in each blocks
	 * @param {EachState} state
	 * @param {EachItem[]} items
	 * @param {null | Node} controlled_anchor
	 * @param {Map<any, EachItem>} items_map
	 */
	function pause_effects(state, items, controlled_anchor, items_map) {
		/** @type {TransitionManager[]} */
		var transitions = [];
		var length = items.length;

		for (var i = 0; i < length; i++) {
			pause_children(items[i].e, transitions, true);
		}

		var is_controlled = length > 0 && transitions.length === 0 && controlled_anchor !== null;
		// If we have a controlled anchor, it means that the each block is inside a single
		// DOM element, so we can apply a fast-path for clearing the contents of the element.
		if (is_controlled) {
			var parent_node = /** @type {Element} */ (
				/** @type {Element} */ (controlled_anchor).parentNode
			);
			clear_text_content(parent_node);
			parent_node.append(/** @type {Element} */ (controlled_anchor));
			items_map.clear();
			link(state, items[0].prev, items[length - 1].next);
		}

		run_out_transitions(transitions, () => {
			for (var i = 0; i < length; i++) {
				var item = items[i];
				if (!is_controlled) {
					items_map.delete(item.k);
					link(state, item.prev, item.next);
				}
				destroy_effect(item.e, !is_controlled);
			}
		});
	}

	/**
	 * @template V
	 * @param {Element | Comment} node The next sibling node, or the parent node if this is a 'controlled' block
	 * @param {number} flags
	 * @param {() => V[]} get_collection
	 * @param {(value: V, index: number) => any} get_key
	 * @param {(anchor: Node, item: MaybeSource<V>, index: MaybeSource<number>) => void} render_fn
	 * @param {null | ((anchor: Node) => void)} fallback_fn
	 * @returns {void}
	 */
	function each(node, flags, get_collection, get_key, render_fn, fallback_fn = null) {
		var anchor = node;

		/** @type {EachState} */
		var state = { flags, items: new Map(), first: null };

		var is_controlled = (flags & EACH_IS_CONTROLLED) !== 0;

		if (is_controlled) {
			var parent_node = /** @type {Element} */ (node);

			anchor = hydrating
				? set_hydrate_node(/** @type {Comment | Text} */ (get_first_child(parent_node)))
				: parent_node.appendChild(create_text());
		}

		if (hydrating) {
			hydrate_next();
		}

		/** @type {Effect | null} */
		var fallback = null;

		var was_empty = false;

		block(() => {
			var collection = get_collection();

			var array = is_array(collection)
				? collection
				: collection == null
					? []
					: array_from(collection);

			var length = array.length;

			if (was_empty && length === 0) {
				// ignore updates if the array is empty,
				// and it already was empty on previous run
				return;
			}
			was_empty = length === 0;

			/** `true` if there was a hydration mismatch. Needs to be a `let` or else it isn't treeshaken out */
			let mismatch = false;

			if (hydrating) {
				var is_else = /** @type {Comment} */ (anchor).data === HYDRATION_START_ELSE;

				if (is_else !== (length === 0)) {
					// hydration mismatch — remove the server-rendered DOM and start over
					anchor = remove_nodes();

					set_hydrate_node(anchor);
					set_hydrating(false);
					mismatch = true;
				}
			}

			// this is separate to the previous block because `hydrating` might change
			if (hydrating) {
				/** @type {EachItem | null} */
				var prev = null;

				/** @type {EachItem} */
				var item;

				for (var i = 0; i < length; i++) {
					if (
						hydrate_node.nodeType === 8 &&
						/** @type {Comment} */ (hydrate_node).data === HYDRATION_END
					) {
						// The server rendered fewer items than expected,
						// so break out and continue appending non-hydrated items
						anchor = /** @type {Comment} */ (hydrate_node);
						mismatch = true;
						set_hydrating(false);
						break;
					}

					var value = array[i];
					var key = get_key(value, i);
					item = create_item(
						hydrate_node,
						state,
						prev,
						null,
						value,
						key,
						i,
						render_fn,
						flags,
						get_collection
					);
					state.items.set(key, item);

					prev = item;
				}

				// remove excess nodes
				if (length > 0) {
					set_hydrate_node(remove_nodes());
				}
			}

			if (!hydrating) {
				var effect = /** @type {Effect} */ (active_reaction);
				reconcile(
					array,
					state,
					anchor,
					render_fn,
					flags,
					(effect.f & INERT) !== 0,
					get_key,
					get_collection
				);
			}

			if (fallback_fn !== null) {
				if (length === 0) {
					if (fallback) {
						resume_effect(fallback);
					} else {
						fallback = branch(() => fallback_fn(anchor));
					}
				} else if (fallback !== null) {
					pause_effect(fallback, () => {
						fallback = null;
					});
				}
			}

			if (mismatch) {
				// continue in hydration mode
				set_hydrating(true);
			}

			// When we mount the each block for the first time, the collection won't be
			// connected to this effect as the effect hasn't finished running yet and its deps
			// won't be assigned. However, it's possible that when reconciling the each block
			// that a mutation occurred and it's made the collection MAYBE_DIRTY, so reading the
			// collection again can provide consistency to the reactive graph again as the deriveds
			// will now be `CLEAN`.
			get_collection();
		});

		if (hydrating) {
			anchor = hydrate_node;
		}
	}

	/**
	 * Add, remove, or reorder items output by an each block as its input changes
	 * @template V
	 * @param {Array<V>} array
	 * @param {EachState} state
	 * @param {Element | Comment | Text} anchor
	 * @param {(anchor: Node, item: MaybeSource<V>, index: number | Source<number>) => void} render_fn
	 * @param {number} flags
	 * @param {boolean} is_inert
	 * @param {(value: V, index: number) => any} get_key
	 * @param {() => V[]} get_collection
	 * @returns {void}
	 */
	function reconcile(array, state, anchor, render_fn, flags, is_inert, get_key, get_collection) {
		var is_animated = (flags & EACH_IS_ANIMATED) !== 0;
		var should_update = (flags & (EACH_ITEM_REACTIVE | EACH_INDEX_REACTIVE)) !== 0;

		var length = array.length;
		var items = state.items;
		var first = state.first;
		var current = first;

		/** @type {undefined | Set<EachItem>} */
		var seen;

		/** @type {EachItem | null} */
		var prev = null;

		/** @type {undefined | Set<EachItem>} */
		var to_animate;

		/** @type {EachItem[]} */
		var matched = [];

		/** @type {EachItem[]} */
		var stashed = [];

		/** @type {V} */
		var value;

		/** @type {any} */
		var key;

		/** @type {EachItem | undefined} */
		var item;

		/** @type {number} */
		var i;

		if (is_animated) {
			for (i = 0; i < length; i += 1) {
				value = array[i];
				key = get_key(value, i);
				item = items.get(key);

				if (item !== undefined) {
					item.a?.measure();
					(to_animate ??= new Set()).add(item);
				}
			}
		}

		for (i = 0; i < length; i += 1) {
			value = array[i];
			key = get_key(value, i);
			item = items.get(key);

			if (item === undefined) {
				var child_anchor = current ? /** @type {TemplateNode} */ (current.e.nodes_start) : anchor;

				prev = create_item(
					child_anchor,
					state,
					prev,
					prev === null ? state.first : prev.next,
					value,
					key,
					i,
					render_fn,
					flags,
					get_collection
				);

				items.set(key, prev);

				matched = [];
				stashed = [];

				current = prev.next;
				continue;
			}

			if (should_update) {
				update_item(item, value, i, flags);
			}

			if ((item.e.f & INERT) !== 0) {
				resume_effect(item.e);
				if (is_animated) {
					item.a?.unfix();
					(to_animate ??= new Set()).delete(item);
				}
			}

			if (item !== current) {
				if (seen !== undefined && seen.has(item)) {
					if (matched.length < stashed.length) {
						// more efficient to move later items to the front
						var start = stashed[0];
						var j;

						prev = start.prev;

						var a = matched[0];
						var b = matched[matched.length - 1];

						for (j = 0; j < matched.length; j += 1) {
							move(matched[j], start, anchor);
						}

						for (j = 0; j < stashed.length; j += 1) {
							seen.delete(stashed[j]);
						}

						link(state, a.prev, b.next);
						link(state, prev, a);
						link(state, b, start);

						current = start;
						prev = b;
						i -= 1;

						matched = [];
						stashed = [];
					} else {
						// more efficient to move earlier items to the back
						seen.delete(item);
						move(item, current, anchor);

						link(state, item.prev, item.next);
						link(state, item, prev === null ? state.first : prev.next);
						link(state, prev, item);

						prev = item;
					}

					continue;
				}

				matched = [];
				stashed = [];

				while (current !== null && current.k !== key) {
					// If the each block isn't inert and an item has an effect that is already inert,
					// skip over adding it to our seen Set as the item is already being handled
					if (is_inert || (current.e.f & INERT) === 0) {
						(seen ??= new Set()).add(current);
					}
					stashed.push(current);
					current = current.next;
				}

				if (current === null) {
					continue;
				}

				item = current;
			}

			matched.push(item);
			prev = item;
			current = item.next;
		}

		if (current !== null || seen !== undefined) {
			var to_destroy = seen === undefined ? [] : array_from(seen);

			while (current !== null) {
				// If the each block isn't inert, then inert effects are currently outroing and will be removed once the transition is finished
				if (is_inert || (current.e.f & INERT) === 0) {
					to_destroy.push(current);
				}
				current = current.next;
			}

			var destroy_length = to_destroy.length;

			if (destroy_length > 0) {
				var controlled_anchor = (flags & EACH_IS_CONTROLLED) !== 0 && length === 0 ? anchor : null;

				if (is_animated) {
					for (i = 0; i < destroy_length; i += 1) {
						to_destroy[i].a?.measure();
					}

					for (i = 0; i < destroy_length; i += 1) {
						to_destroy[i].a?.fix();
					}
				}

				pause_effects(state, to_destroy, controlled_anchor, items);
			}
		}

		if (is_animated) {
			queue_micro_task(() => {
				if (to_animate === undefined) return;
				for (item of to_animate) {
					item.a?.apply();
				}
			});
		}

		/** @type {Effect} */ (active_effect).first = state.first && state.first.e;
		/** @type {Effect} */ (active_effect).last = prev && prev.e;
	}

	/**
	 * @param {EachItem} item
	 * @param {any} value
	 * @param {number} index
	 * @param {number} type
	 * @returns {void}
	 */
	function update_item(item, value, index, type) {
		if ((type & EACH_ITEM_REACTIVE) !== 0) {
			internal_set(item.v, value);
		}

		if ((type & EACH_INDEX_REACTIVE) !== 0) {
			internal_set(/** @type {Value<number>} */ (item.i), index);
		} else {
			item.i = index;
		}
	}

	/**
	 * @template V
	 * @param {Node} anchor
	 * @param {EachState} state
	 * @param {EachItem | null} prev
	 * @param {EachItem | null} next
	 * @param {V} value
	 * @param {unknown} key
	 * @param {number} index
	 * @param {(anchor: Node, item: V | Source<V>, index: number | Value<number>) => void} render_fn
	 * @param {number} flags
	 * @param {() => V[]} get_collection
	 * @returns {EachItem}
	 */
	function create_item(
		anchor,
		state,
		prev,
		next,
		value,
		key,
		index,
		render_fn,
		flags,
		get_collection
	) {
		var previous_each_item = current_each_item;
		var reactive = (flags & EACH_ITEM_REACTIVE) !== 0;
		var mutable = (flags & EACH_ITEM_IMMUTABLE) === 0;

		var v = reactive ? (mutable ? mutable_source(value) : source(value)) : value;
		var i = (flags & EACH_INDEX_REACTIVE) === 0 ? index : source(index);

		if (reactive) {
			// For tracing purposes, we need to link the source signal we create with the
			// collection + index so that tracing works as intended
			/** @type {Value} */ (v).debug = () => {
				var collection_index = typeof i === 'number' ? index : i.v;
				// eslint-disable-next-line @typescript-eslint/no-unused-expressions
				get_collection()[collection_index];
			};
		}

		/** @type {EachItem} */
		var item = {
			i,
			v,
			k: key,
			a: null,
			// @ts-expect-error
			e: null,
			prev,
			next
		};

		current_each_item = item;

		try {
			item.e = branch(() => render_fn(anchor, v, i), hydrating);

			item.e.prev = prev && prev.e;
			item.e.next = next && next.e;

			if (prev === null) {
				state.first = item;
			} else {
				prev.next = item;
				prev.e.next = item.e;
			}

			if (next !== null) {
				next.prev = item;
				next.e.prev = item.e;
			}

			return item;
		} finally {
			current_each_item = previous_each_item;
		}
	}

	/**
	 * @param {EachItem} item
	 * @param {EachItem | null} next
	 * @param {Text | Element | Comment} anchor
	 */
	function move(item, next, anchor) {
		var end = item.next ? /** @type {TemplateNode} */ (item.next.e.nodes_start) : anchor;

		var dest = next ? /** @type {TemplateNode} */ (next.e.nodes_start) : anchor;
		var node = /** @type {TemplateNode} */ (item.e.nodes_start);

		while (node !== end) {
			var next_node = /** @type {TemplateNode} */ (get_next_sibling(node));
			dest.before(node);
			node = next_node;
		}
	}

	/**
	 * @param {EachState} state
	 * @param {EachItem | null} prev
	 * @param {EachItem | null} next
	 */
	function link(state, prev, next) {
		if (prev === null) {
			state.first = next;
		} else {
			prev.next = next;
			prev.e.next = next && next.e;
		}

		if (next !== null) {
			next.prev = prev;
			next.e.prev = prev && prev.e;
		}
	}

	/** @import { Effect, TemplateNode } from '#client' */

	/**
	 * @param {Element} element
	 * @param {string | null} server_hash
	 * @param {string} value
	 */
	function check_hash(element, server_hash, value) {
		if (!server_hash || server_hash === hash(String(value ?? ''))) return;

		let location;

		// @ts-expect-error
		const loc = element.__svelte_meta?.loc;
		if (loc) {
			location = `near ${loc.file}:${loc.line}:${loc.column}`;
		} else if (dev_current_component_function?.[FILENAME]) {
			location = `in ${dev_current_component_function[FILENAME]}`;
		}

		hydration_html_changed(sanitize_location(location));
	}

	/**
	 * @param {Element | Text | Comment} node
	 * @param {() => string} get_value
	 * @param {boolean} svg
	 * @param {boolean} mathml
	 * @param {boolean} [skip_warning]
	 * @returns {void}
	 */
	function html(node, get_value, svg, mathml, skip_warning) {
		var anchor = node;

		var value = '';

		/** @type {Effect | undefined} */
		var effect;

		block(() => {
			if (value === (value = get_value() ?? '')) {
				if (hydrating) {
					hydrate_next();
				}
				return;
			}

			if (effect !== undefined) {
				destroy_effect(effect);
				effect = undefined;
			}

			if (value === '') return;

			effect = branch(() => {
				if (hydrating) {
					// We're deliberately not trying to repair mismatches between server and client,
					// as it's costly and error-prone (and it's an edge case to have a mismatch anyway)
					var hash = /** @type {Comment} */ (hydrate_node).data;
					var next = hydrate_next();
					var last = next;

					while (
						next !== null &&
						(next.nodeType !== 8 || /** @type {Comment} */ (next).data !== '')
					) {
						last = next;
						next = /** @type {TemplateNode} */ (get_next_sibling(next));
					}

					if (next === null) {
						hydration_mismatch();
						throw HYDRATION_ERROR;
					}

					{
						check_hash(/** @type {Element} */ (next.parentNode), hash, value);
					}

					assign_nodes(hydrate_node, last);
					anchor = set_hydrate_node(next);
					return;
				}

				var html = value + '';

				// Don't use create_fragment_with_script_from_html here because that would mean script tags are executed.
				// @html is basically `.innerHTML = ...` and that doesn't execute scripts either due to security reasons.
				/** @type {DocumentFragment | Element} */
				var node = create_fragment_from_html(html);

				assign_nodes(
					/** @type {TemplateNode} */ (get_first_child(node)),
					/** @type {TemplateNode} */ (node.lastChild)
				);

				{
					anchor.before(node);
				}
			});
		});
	}

	/**
	 * @param {Comment} anchor
	 * @param {Record<string, any>} $$props
	 * @param {string} name
	 * @param {Record<string, unknown>} slot_props
	 * @param {null | ((anchor: Comment) => void)} fallback_fn
	 */
	function slot(anchor, $$props, name, slot_props, fallback_fn) {
		if (hydrating) {
			hydrate_next();
		}

		var slot_fn = $$props.$$slots?.[name];
		// Interop: Can use snippets to fill slots
		var is_interop = false;
		if (slot_fn === true) {
			slot_fn = $$props[name === 'default' ? 'children' : name];
			is_interop = true;
		}

		if (slot_fn === undefined) {
			if (fallback_fn !== null) {
				fallback_fn(anchor);
			}
		} else {
			slot_fn(anchor, is_interop ? () => slot_props : slot_props);
		}
	}

	/** @import { Snippet } from 'svelte' */
	/** @import { Effect, TemplateNode } from '#client' */
	/** @import { Getters } from '#shared' */

	/**
	 * @template {(node: TemplateNode, ...args: any[]) => void} SnippetFn
	 * @param {TemplateNode} node
	 * @param {() => SnippetFn | null | undefined} get_snippet
	 * @param {(() => any)[]} args
	 * @returns {void}
	 */
	function snippet(node, get_snippet, ...args) {
		var anchor = node;

		/** @type {SnippetFn | null | undefined} */
		// @ts-ignore
		var snippet = noop;

		/** @type {Effect | null} */
		var snippet_effect;

		block(() => {
			if (snippet === (snippet = get_snippet())) return;

			if (snippet_effect) {
				destroy_effect(snippet_effect);
				snippet_effect = null;
			}

			if (snippet == null) {
				invalid_snippet();
			}

			snippet_effect = branch(() => /** @type {SnippetFn} */ (snippet)(anchor, ...args));
		}, EFFECT_TRANSPARENT);

		if (hydrating) {
			anchor = hydrate_node;
		}
	}

	/**
	 * Create a snippet programmatically
	 * @template {unknown[]} Params
	 * @param {(...params: Getters<Params>) => {
	 *   render: () => string
	 *   setup?: (element: Element) => void | (() => void)
	 * }} fn
	 * @returns {Snippet<Params>}
	 */
	function createRawSnippet(fn) {
		// @ts-expect-error the types are a lie
		return (/** @type {TemplateNode} */ anchor, /** @type {Getters<Params>} */ ...params) => {
			var snippet = fn(...params);

			/** @type {Element} */
			var element;

			if (hydrating) {
				element = /** @type {Element} */ (hydrate_node);
				hydrate_next();
			} else {
				var html = snippet.render().trim();
				var fragment = create_fragment_from_html(html);
				element = /** @type {Element} */ (get_first_child(fragment));

				if ((get_next_sibling(element) !== null || element.nodeType !== 1)) {
					invalid_raw_snippet_render();
				}

				anchor.before(element);
			}

			const result = snippet.setup?.(element);
			assign_nodes(element, element);

			if (typeof result === 'function') {
				teardown(result);
			}
		};
	}

	/** @import { TemplateNode, Dom, Effect } from '#client' */

	/**
	 * @template P
	 * @template {(props: P) => void} C
	 * @param {TemplateNode} node
	 * @param {() => C} get_component
	 * @param {(anchor: TemplateNode, component: C) => Dom | void} render_fn
	 * @returns {void}
	 */
	function component(node, get_component, render_fn) {
		if (hydrating) {
			hydrate_next();
		}

		var anchor = node;

		/** @type {C} */
		var component;

		/** @type {Effect | null} */
		var effect;

		block(() => {
			if (component === (component = get_component())) return;

			if (effect) {
				pause_effect(effect);
				effect = null;
			}

			if (component) {
				effect = branch(() => render_fn(anchor, component));
			}
		}, EFFECT_TRANSPARENT);

		if (hydrating) {
			anchor = hydrate_node;
		}
	}

	/** @import { Effect, TemplateNode } from '#client' */

	/**
	 * @param {Comment | Element} node
	 * @param {() => string} get_tag
	 * @param {boolean} is_svg
	 * @param {undefined | ((element: Element, anchor: Node | null) => void)} render_fn,
	 * @param {undefined | (() => string)} get_namespace
	 * @param {undefined | [number, number]} location
	 * @returns {void}
	 */
	function element(node, get_tag, is_svg, render_fn, get_namespace, location) {
		let was_hydrating = hydrating;

		if (hydrating) {
			hydrate_next();
		}

		/** @type {string | null} */
		var tag;

		/** @type {string | null} */
		var current_tag;

		/** @type {null | Element} */
		var element = null;

		if (hydrating && hydrate_node.nodeType === 1) {
			element = /** @type {Element} */ (hydrate_node);
			hydrate_next();
		}

		var anchor = /** @type {TemplateNode} */ (hydrating ? hydrate_node : node);

		/** @type {Effect | null} */
		var effect;

		/**
		 * The keyed `{#each ...}` item block, if any, that this element is inside.
		 * We track this so we can set it when changing the element, allowing any
		 * `animate:` directive to bind itself to the correct block
		 */
		var each_item_block = current_each_item;

		block(() => {
			const next_tag = get_tag() || null;
			var ns = next_tag === 'svg' ? NAMESPACE_SVG : null;

			// Assumption: Noone changes the namespace but not the tag (what would that even mean?)
			if (next_tag === tag) return;

			// See explanation of `each_item_block` above
			var previous_each_item = current_each_item;
			set_current_each_item(each_item_block);

			if (effect) {
				if (next_tag === null) {
					// start outro
					pause_effect(effect, () => {
						effect = null;
						current_tag = null;
					});
				} else if (next_tag === current_tag) {
					// same tag as is currently rendered — abort outro
					resume_effect(effect);
				} else {
					// tag is changing — destroy immediately, render contents without intro transitions
					destroy_effect(effect);
					set_should_intro(false);
				}
			}

			if (next_tag && next_tag !== current_tag) {
				effect = branch(() => {
					element = hydrating
						? /** @type {Element} */ (element)
						: ns
							? document.createElementNS(ns, next_tag)
							: document.createElement(next_tag);

					assign_nodes(element, element);

					if (render_fn) {
						if (hydrating && is_raw_text_element(next_tag)) {
							// prevent hydration glitches
							element.append(document.createComment(''));
						}

						// If hydrating, use the existing ssr comment as the anchor so that the
						// inner open and close methods can pick up the existing nodes correctly
						var child_anchor = /** @type {TemplateNode} */ (
							hydrating ? get_first_child(element) : element.appendChild(create_text())
						);

						if (hydrating) {
							if (child_anchor === null) {
								set_hydrating(false);
							} else {
								set_hydrate_node(child_anchor);
							}
						}

						// `child_anchor` is undefined if this is a void element, but we still
						// need to call `render_fn` in order to run actions etc. If the element
						// contains children, it's a user error (which is warned on elsewhere)
						// and the DOM will be silently discarded
						render_fn(element, child_anchor);
					}

					// we do this after calling `render_fn` so that child effects don't override `nodes.end`
					/** @type {Effect} */ (active_effect).nodes_end = element;

					anchor.before(element);
				});
			}

			tag = next_tag;
			if (tag) current_tag = tag;
			set_should_intro(true);

			set_current_each_item(previous_each_item);
		}, EFFECT_TRANSPARENT);

		if (was_hydrating) {
			set_hydrating(true);
			set_hydrate_node(anchor);
		}
	}

	/**
	 * The value/checked attribute in the template actually corresponds to the defaultValue property, so we need
	 * to remove it upon hydration to avoid a bug when someone resets the form value.
	 * @param {HTMLInputElement} input
	 * @returns {void}
	 */
	function remove_input_defaults(input) {
		if (!hydrating) return;

		var already_removed = false;

		// We try and remove the default attributes later, rather than sync during hydration.
		// Doing it sync during hydration has a negative impact on performance, but deferring the
		// work in an idle task alleviates this greatly. If a form reset event comes in before
		// the idle callback, then we ensure the input defaults are cleared just before.
		var remove_defaults = () => {
			if (already_removed) return;
			already_removed = true;

			// Remove the attributes but preserve the values
			if (input.hasAttribute('value')) {
				var value = input.value;
				set_attribute(input, 'value', null);
				input.value = value;
			}

			if (input.hasAttribute('checked')) {
				var checked = input.checked;
				set_attribute(input, 'checked', null);
				input.checked = checked;
			}
		};

		// @ts-expect-error
		input.__on_r = remove_defaults;
		queue_idle_task(remove_defaults);
		add_form_reset_listener();
	}

	/**
	 * @param {Element} element
	 * @param {any} value
	 */
	function set_value(element, value) {
		// @ts-expect-error
		var attributes = (element.__attributes ??= {});

		if (
			attributes.value ===
				(attributes.value =
					// treat null and undefined the same for the initial value
					value ?? undefined) ||
			// @ts-expect-error
			// `progress` elements always need their value set when its `0`
			(element.value === value && (value !== 0 || element.nodeName !== 'PROGRESS'))
		) {
			return;
		}

		// @ts-expect-error
		element.value = value;
	}

	/**
	 * Sets the `selected` attribute on an `option` element.
	 * Not set through the property because that doesn't reflect to the DOM,
	 * which means it wouldn't be taken into account when a form is reset.
	 * @param {HTMLOptionElement} element
	 * @param {boolean} selected
	 */
	function set_selected(element, selected) {
		if (selected) {
			// The selected option could've changed via user selection, and
			// setting the value without this check would set it back.
			if (!element.hasAttribute('selected')) {
				element.setAttribute('selected', '');
			}
		} else {
			element.removeAttribute('selected');
		}
	}

	/**
	 * @param {Element} element
	 * @param {string} attribute
	 * @param {string | null} value
	 * @param {boolean} [skip_warning]
	 */
	function set_attribute(element, attribute, value, skip_warning) {
		// @ts-expect-error
		var attributes = (element.__attributes ??= {});

		if (hydrating) {
			attributes[attribute] = element.getAttribute(attribute);

			if (
				attribute === 'src' ||
				attribute === 'srcset' ||
				(attribute === 'href' && element.nodeName === 'LINK')
			) {
				{
					check_src_in_dev_hydration(element, attribute, value ?? '');
				}

				// If we reset these attributes, they would result in another network request, which we want to avoid.
				// We assume they are the same between client and server as checking if they are equal is expensive
				// (we can't just compare the strings as they can be different between client and server but result in the
				// same url, so we would need to create hidden anchor elements to compare them)
				return;
			}
		}

		if (attributes[attribute] === (attributes[attribute] = value)) return;

		if (attribute === 'style' && '__styles' in element) {
			// reset styles to force style: directive to update
			element.__styles = {};
		}

		if (attribute === 'loading') {
			// @ts-expect-error
			element[LOADING_ATTR_SYMBOL] = value;
		}

		if (value == null) {
			element.removeAttribute(attribute);
		} else if (typeof value !== 'string' && get_setters(element).includes(attribute)) {
			// @ts-ignore
			element[attribute] = value;
		} else {
			element.setAttribute(attribute, value);
		}
	}

	/**
	 * Spreads attributes onto a DOM element, taking into account the currently set attributes
	 * @param {Element & ElementCSSInlineStyle} element
	 * @param {Record<string, any> | undefined} prev
	 * @param {Record<string, any>} next New attributes - this function mutates this object
	 * @param {string} [css_hash]
	 * @param {boolean} [preserve_attribute_case]
	 * @param {boolean} [is_custom_element]
	 * @param {boolean} [skip_warning]
	 * @returns {Record<string, any>}
	 */
	function set_attributes(
		element,
		prev,
		next,
		css_hash,
		preserve_attribute_case = false,
		is_custom_element = false,
		skip_warning = false
	) {
		var current = prev || {};
		var is_option_element = element.tagName === 'OPTION';

		for (var key in prev) {
			if (!(key in next)) {
				next[key] = null;
			}
		}

		if (css_hash !== undefined) {
			next.class = next.class ? next.class + ' ' + css_hash : css_hash;
		}

		var setters = get_setters(element);

		// @ts-expect-error
		var attributes = /** @type {Record<string, unknown>} **/ (element.__attributes ??= {});

		// since key is captured we use const
		for (const key in next) {
			// let instead of var because referenced in a closure
			let value = next[key];

			// Up here because we want to do this for the initial value, too, even if it's undefined,
			// and this wouldn't be reached in case of undefined because of the equality check below
			if (is_option_element && key === 'value' && value == null) {
				// The <option> element is a special case because removing the value attribute means
				// the value is set to the text content of the option element, and setting the value
				// to null or undefined means the value is set to the string "null" or "undefined".
				// To align with how we handle this case in non-spread-scenarios, this logic is needed.
				// There's a super-edge-case bug here that is left in in favor of smaller code size:
				// Because of the "set missing props to null" logic above, we can't differentiate
				// between a missing value and an explicitly set value of null or undefined. That means
				// that once set, the value attribute of an <option> element can't be removed. This is
				// a very rare edge case, and removing the attribute altogether isn't possible either
				// for the <option value={undefined}> case, so we're not losing any functionality here.
				// @ts-ignore
				element.value = element.__value = '';
				current[key] = value;
				continue;
			}

			var prev_value = current[key];
			if (value === prev_value) continue;

			current[key] = value;

			var prefix = key[0] + key[1]; // this is faster than key.slice(0, 2)
			if (prefix === '$$') continue;

			if (prefix === 'on') {
				/** @type {{ capture?: true }} */
				const opts = {};
				const event_handle_key = '$$' + key;
				let event_name = key.slice(2);
				var delegated = is_delegated(event_name);

				if (is_capture_event(event_name)) {
					event_name = event_name.slice(0, -7);
					opts.capture = true;
				}

				if (!delegated && prev_value) {
					// Listening to same event but different handler -> our handle function below takes care of this
					// If we were to remove and add listeners in this case, it could happen that the event is "swallowed"
					// (the browser seems to not know yet that a new one exists now) and doesn't reach the handler
					// https://github.com/sveltejs/svelte/issues/11903
					if (value != null) continue;

					element.removeEventListener(event_name, current[event_handle_key], opts);
					current[event_handle_key] = null;
				}

				if (value != null) {
					if (!delegated) {
						/**
						 * @this {any}
						 * @param {Event} evt
						 */
						function handle(evt) {
							current[key].call(this, evt);
						}

						current[event_handle_key] = create_event(event_name, element, handle, opts);
					} else {
						// @ts-ignore
						element[`__${event_name}`] = value;
						delegate([event_name]);
					}
				} else if (delegated) {
					// @ts-ignore
					element[`__${event_name}`] = undefined;
				}
			} else if (key === 'style' && value != null) {
				element.style.cssText = value + '';
			} else if (key === 'autofocus') {
				autofocus(/** @type {HTMLElement} */ (element), Boolean(value));
			} else if (key === '__value' || (key === 'value' && value != null)) {
				// @ts-ignore
				element.value = element[key] = element.__value = value;
			} else if (key === 'selected' && is_option_element) {
				set_selected(/** @type {HTMLOptionElement} */ (element), value);
			} else {
				var name = key;
				if (!preserve_attribute_case) {
					name = normalize_attribute(name);
				}

				var is_default = name === 'defaultValue' || name === 'defaultChecked';

				if (value == null && !is_custom_element && !is_default) {
					attributes[key] = null;

					if (name === 'value' || name === 'checked') {
						// removing value/checked also removes defaultValue/defaultChecked — preserve
						let input = /** @type {HTMLInputElement} */ (element);

						if (name === 'value') {
							let prev = input.defaultValue;
							input.removeAttribute(name);
							input.defaultValue = prev;
						} else {
							let prev = input.defaultChecked;
							input.removeAttribute(name);
							input.defaultChecked = prev;
						}
					} else {
						element.removeAttribute(key);
					}
				} else if (
					is_default ||
					(setters.includes(name) && (is_custom_element || typeof value !== 'string'))
				) {
					// @ts-ignore
					element[name] = value;
				} else if (typeof value !== 'function') {
					if (hydrating && (name === 'src' || name === 'href' || name === 'srcset')) {
						if (!skip_warning) check_src_in_dev_hydration(element, name, value ?? '');
					} else {
						set_attribute(element, name, value);
					}
				}
			}
			if (key === 'style' && '__styles' in element) {
				// reset styles to force style: directive to update
				element.__styles = {};
			}
		}

		return current;
	}

	/** @type {Map<string, string[]>} */
	var setters_cache = new Map();

	/** @param {Element} element */
	function get_setters(element) {
		var setters = setters_cache.get(element.nodeName);
		if (setters) return setters;
		setters_cache.set(element.nodeName, (setters = []));

		var descriptors;
		var proto = element; // In the case of custom elements there might be setters on the instance
		var element_proto = Element.prototype;

		// Stop at Element, from there on there's only unnecessary setters we're not interested in
		// Do not use contructor.name here as that's unreliable in some browser environments
		while (element_proto !== proto) {
			descriptors = get_descriptors(proto);

			for (var key in descriptors) {
				if (descriptors[key].set) {
					setters.push(key);
				}
			}

			proto = get_prototype_of(proto);
		}

		return setters;
	}

	/**
	 * @param {any} element
	 * @param {string} attribute
	 * @param {string} value
	 */
	function check_src_in_dev_hydration(element, attribute, value) {
		if (attribute === 'srcset' && srcset_url_equal(element, value)) return;
		if (src_url_equal(element.getAttribute(attribute) ?? '', value)) return;

		hydration_attribute_changed(
			attribute,
			element.outerHTML.replace(element.innerHTML, element.innerHTML && '...'),
			String(value)
		);
	}

	/**
	 * @param {string} element_src
	 * @param {string} url
	 * @returns {boolean}
	 */
	function src_url_equal(element_src, url) {
		if (element_src === url) return true;
		return new URL(element_src, document.baseURI).href === new URL(url, document.baseURI).href;
	}

	/** @param {string} srcset */
	function split_srcset(srcset) {
		return srcset.split(',').map((src) => src.trim().split(' ').filter(Boolean));
	}

	/**
	 * @param {HTMLSourceElement | HTMLImageElement} element
	 * @param {string} srcset
	 * @returns {boolean}
	 */
	function srcset_url_equal(element, srcset) {
		var element_urls = split_srcset(element.srcset);
		var urls = split_srcset(srcset);

		return (
			urls.length === element_urls.length &&
			urls.every(
				([url, width], i) =>
					width === element_urls[i][1] &&
					// We need to test both ways because Vite will create an a full URL with
					// `new URL(asset, import.meta.url).href` for the client when `base: './'`, and the
					// relative URLs inside srcset are not automatically resolved to absolute URLs by
					// browsers (in contrast to img.src). This means both SSR and DOM code could
					// contain relative or absolute URLs.
					(src_url_equal(element_urls[i][0], url) || src_url_equal(url, element_urls[i][0]))
			)
		);
	}

	/**
	 * @param {HTMLElement} dom
	 * @param {string} value
	 * @returns {void}
	 */
	function set_class(dom, value) {
		// @ts-expect-error need to add __className to patched prototype
		var prev_class_name = dom.__className;
		var next_class_name = to_class(value);

		if (hydrating && dom.className === next_class_name) {
			// In case of hydration don't reset the class as it's already correct.
			// @ts-expect-error need to add __className to patched prototype
			dom.__className = next_class_name;
		} else if (
			prev_class_name !== next_class_name ||
			(hydrating && dom.className !== next_class_name)
		) {
			// Removing the attribute when the value is only an empty string causes
			// peformance issues vs simply making the className an empty string. So
			// we should only remove the class if the the value is nullish.
			if (value == null) {
				dom.removeAttribute('class');
			} else {
				dom.className = next_class_name;
			}

			// @ts-expect-error need to add __className to patched prototype
			dom.__className = next_class_name;
		}
	}

	/**
	 * @template V
	 * @param {V} value
	 * @returns {string | V}
	 */
	function to_class(value) {
		return value == null ? '' : value;
	}

	/**
	 * @param {Element} dom
	 * @param {string} class_name
	 * @param {boolean} value
	 * @returns {void}
	 */
	function toggle_class(dom, class_name, value) {
		if (value) {
			if (dom.classList.contains(class_name)) return;
			dom.classList.add(class_name);
		} else {
			if (!dom.classList.contains(class_name)) return;
			dom.classList.remove(class_name);
		}
	}

	/** @import { Raf } from '#client' */

	const now = () => performance.now() ;

	/** @type {Raf} */
	const raf = {
		// don't access requestAnimationFrame eagerly outside method
		// this allows basic testing of user code without JSDOM
		// bunder will eval and remove ternary when the user's app is built
		tick: /** @param {any} _ */ (_) => (requestAnimationFrame )(_),
		now: () => now(),
		tasks: new Set()
	};

	/** @import { TaskCallback, Task, TaskEntry } from '#client' */

	// TODO move this into timing.js where it probably belongs

	/**
	 * @returns {void}
	 */
	function run_tasks() {
		// use `raf.now()` instead of the `requestAnimationFrame` callback argument, because
		// otherwise things can get wonky https://github.com/sveltejs/svelte/pull/14541
		const now = raf.now();

		raf.tasks.forEach((task) => {
			if (!task.c(now)) {
				raf.tasks.delete(task);
				task.f();
			}
		});

		if (raf.tasks.size !== 0) {
			raf.tick(run_tasks);
		}
	}

	/**
	 * Creates a new task that runs on each raf frame
	 * until it returns a falsy value or is aborted
	 * @param {TaskCallback} callback
	 * @returns {Task}
	 */
	function loop(callback) {
		/** @type {TaskEntry} */
		let task;

		if (raf.tasks.size === 0) {
			raf.tick(run_tasks);
		}

		return {
			promise: new Promise((fulfill) => {
				raf.tasks.add((task = { c: callback, f: fulfill }));
			}),
			abort() {
				raf.tasks.delete(task);
			}
		};
	}

	/** @import { AnimateFn, Animation, AnimationConfig, EachItem, Effect, TransitionFn, TransitionManager } from '#client' */

	/**
	 * @param {Element} element
	 * @param {'introstart' | 'introend' | 'outrostart' | 'outroend'} type
	 * @returns {void}
	 */
	function dispatch_event(element, type) {
		element.dispatchEvent(new CustomEvent(type));
	}

	/**
	 * Converts a property to the camel-case format expected by Element.animate(), KeyframeEffect(), and KeyframeEffect.setKeyframes().
	 * @param {string} style
	 * @returns {string}
	 */
	function css_property_to_camelcase(style) {
		// in compliance with spec
		if (style === 'float') return 'cssFloat';
		if (style === 'offset') return 'cssOffset';

		// do not rename custom @properties
		if (style.startsWith('--')) return style;

		const parts = style.split('-');
		if (parts.length === 1) return parts[0];
		return (
			parts[0] +
			parts
				.slice(1)
				.map(/** @param {any} word */ (word) => word[0].toUpperCase() + word.slice(1))
				.join('')
		);
	}

	/**
	 * @param {string} css
	 * @returns {Keyframe}
	 */
	function css_to_keyframe(css) {
		/** @type {Keyframe} */
		const keyframe = {};
		const parts = css.split(';');
		for (const part of parts) {
			const [property, value] = part.split(':');
			if (!property || value === undefined) break;

			const formatted_property = css_property_to_camelcase(property.trim());
			keyframe[formatted_property] = value.trim();
		}
		return keyframe;
	}

	/** @param {number} t */
	const linear$1 = (t) => t;

	/**
	 * Called inside keyed `{#each ...}` blocks (as `$.animation(...)`). This creates an animation manager
	 * and attaches it to the block, so that moves can be animated following reconciliation.
	 * @template P
	 * @param {Element} element
	 * @param {() => AnimateFn<P | undefined>} get_fn
	 * @param {(() => P) | null} get_params
	 */
	function animation(element, get_fn, get_params) {
		var item = /** @type {EachItem} */ (current_each_item);

		/** @type {DOMRect} */
		var from;

		/** @type {DOMRect} */
		var to;

		/** @type {Animation | undefined} */
		var animation;

		/** @type {null | { position: string, width: string, height: string, transform: string }} */
		var original_styles = null;

		item.a ??= {
			element,
			measure() {
				from = this.element.getBoundingClientRect();
			},
			apply() {
				animation?.abort();

				to = this.element.getBoundingClientRect();

				if (
					from.left !== to.left ||
					from.right !== to.right ||
					from.top !== to.top ||
					from.bottom !== to.bottom
				) {
					const options = get_fn()(this.element, { from, to }, get_params?.());

					animation = animate(this.element, options, undefined, 1, () => {
						animation?.abort();
						animation = undefined;
					});
				}
			},
			fix() {
				// If an animation is already running, transforming the element is likely to fail,
				// because the styles applied by the animation take precedence. In the case of crossfade,
				// that means the `translate(...)` of the crossfade transition overrules the `translate(...)`
				// we would apply below, leading to the element jumping somewhere to the top left.
				if (element.getAnimations().length) return;

				// It's important to destructure these to get fixed values - the object itself has getters,
				// and changing the style to 'absolute' can for example influence the width.
				var { position, width, height } = getComputedStyle(element);

				if (position !== 'absolute' && position !== 'fixed') {
					var style = /** @type {HTMLElement | SVGElement} */ (element).style;

					original_styles = {
						position: style.position,
						width: style.width,
						height: style.height,
						transform: style.transform
					};

					style.position = 'absolute';
					style.width = width;
					style.height = height;
					var to = element.getBoundingClientRect();

					if (from.left !== to.left || from.top !== to.top) {
						var transform = `translate(${from.left - to.left}px, ${from.top - to.top}px)`;
						style.transform = style.transform ? `${style.transform} ${transform}` : transform;
					}
				}
			},
			unfix() {
				if (original_styles) {
					var style = /** @type {HTMLElement | SVGElement} */ (element).style;

					style.position = original_styles.position;
					style.width = original_styles.width;
					style.height = original_styles.height;
					style.transform = original_styles.transform;
				}
			}
		};

		// in the case of a `<svelte:element>`, it's possible for `$.animation(...)` to be called
		// when an animation manager already exists, if the tag changes. in that case, we need to
		// swap out the element rather than creating a new manager, in case it happened at the same
		// moment as a reconciliation
		item.a.element = element;
	}

	/**
	 * Called inside block effects as `$.transition(...)`. This creates a transition manager and
	 * attaches it to the current effect — later, inside `pause_effect` and `resume_effect`, we
	 * use this to create `intro` and `outro` transitions.
	 * @template P
	 * @param {number} flags
	 * @param {HTMLElement} element
	 * @param {() => TransitionFn<P | undefined>} get_fn
	 * @param {(() => P) | null} get_params
	 * @returns {void}
	 */
	function transition(flags, element, get_fn, get_params) {
		var is_global = (flags & TRANSITION_GLOBAL) !== 0;

		/** @type {'in' | 'out' | 'both'} */
		var direction = 'both' ;

		/** @type {AnimationConfig | ((opts: { direction: 'in' | 'out' }) => AnimationConfig) | undefined} */
		var current_options;

		var inert = element.inert;

		/** @type {Animation | undefined} */
		var intro;

		/** @type {Animation | undefined} */
		var outro;

		function get_options() {
			var previous_reaction = active_reaction;
			var previous_effect = active_effect;
			set_active_reaction(null);
			set_active_effect(null);
			try {
				// If a transition is still ongoing, we use the existing options rather than generating
				// new ones. This ensures that reversible transitions reverse smoothly, rather than
				// jumping to a new spot because (for example) a different `duration` was used
				return (current_options ??= get_fn()(element, get_params?.() ?? /** @type {P} */ ({}), {
					direction
				}));
			} finally {
				set_active_reaction(previous_reaction);
				set_active_effect(previous_effect);
			}
		}

		/** @type {TransitionManager} */
		var transition = {
			is_global,
			in() {
				element.inert = inert;

				dispatch_event(element, 'introstart');

				intro = animate(element, get_options(), outro, 1, () => {
					dispatch_event(element, 'introend');

					// Ensure we cancel the animation to prevent leaking
					intro?.abort();
					intro = current_options = undefined;
				});
			},
			out(fn) {

				element.inert = true;

				dispatch_event(element, 'outrostart');

				outro = animate(element, get_options(), intro, 0, () => {
					dispatch_event(element, 'outroend');
					fn?.();
				});
			},
			stop: () => {
				intro?.abort();
				outro?.abort();
			}
		};

		var e = /** @type {Effect} */ (active_effect);

		(e.transitions ??= []).push(transition);

		// if this is a local transition, we only want to run it if the parent (branch) effect's
		// parent (block) effect is where the state change happened. we can determine that by
		// looking at whether the block effect is currently initializing
		if (should_intro) {
			var run = is_global;

			if (!run) {
				var block = /** @type {Effect | null} */ (e.parent);

				// skip over transparent blocks (e.g. snippets, else-if blocks)
				while (block && (block.f & EFFECT_TRANSPARENT) !== 0) {
					while ((block = block.parent)) {
						if ((block.f & BLOCK_EFFECT) !== 0) break;
					}
				}

				run = !block || (block.f & EFFECT_RAN) !== 0;
			}

			if (run) {
				effect(() => {
					untrack(() => transition.in());
				});
			}
		}
	}

	/**
	 * Animates an element, according to the provided configuration
	 * @param {Element} element
	 * @param {AnimationConfig | ((opts: { direction: 'in' | 'out' }) => AnimationConfig)} options
	 * @param {Animation | undefined} counterpart The corresponding intro/outro to this outro/intro
	 * @param {number} t2 The target `t` value — `1` for intro, `0` for outro
	 * @param {(() => void)} on_finish Called after successfully completing the animation
	 * @returns {Animation}
	 */
	function animate(element, options, counterpart, t2, on_finish) {
		var is_intro = t2 === 1;

		if (is_function(options)) {
			// In the case of a deferred transition (such as `crossfade`), `option` will be
			// a function rather than an `AnimationConfig`. We need to call this function
			// once the DOM has been updated...
			/** @type {Animation} */
			var a;
			var aborted = false;

			queue_micro_task(() => {
				if (aborted) return;
				var o = options({ direction: is_intro ? 'in' : 'out' });
				a = animate(element, o, counterpart, t2, on_finish);
			});

			// ...but we want to do so without using `async`/`await` everywhere, so
			// we return a facade that allows everything to remain synchronous
			return {
				abort: () => {
					aborted = true;
					a?.abort();
				},
				deactivate: () => a.deactivate(),
				reset: () => a.reset(),
				t: () => a.t()
			};
		}

		counterpart?.deactivate();

		if (!options?.duration) {
			on_finish();

			return {
				abort: noop,
				deactivate: noop,
				reset: noop,
				t: () => t2
			};
		}

		const { delay = 0, css, tick, easing = linear$1 } = options;

		var keyframes = [];

		if (is_intro && counterpart === undefined) {
			if (tick) {
				tick(0, 1); // TODO put in nested effect, to avoid interleaved reads/writes?
			}

			if (css) {
				var styles = css_to_keyframe(css(0, 1));
				keyframes.push(styles, styles);
			}
		}

		var get_t = () => 1 - t2;

		// create a dummy animation that lasts as long as the delay (but with whatever devtools
		// multiplier is in effect). in the common case that it is `0`, we keep it anyway so that
		// the CSS keyframes aren't created until the DOM is updated
		var animation = element.animate(keyframes, { duration: delay });

		animation.onfinish = () => {
			// for bidirectional transitions, we start from the current position,
			// rather than doing a full intro/outro
			var t1 = counterpart?.t() ?? 1 - t2;
			counterpart?.abort();

			var delta = t2 - t1;
			var duration = /** @type {number} */ (options.duration) * Math.abs(delta);
			var keyframes = [];

			if (duration > 0) {
				if (css) {
					var n = Math.ceil(duration / (1000 / 60)); // `n` must be an integer, or we risk missing the `t2` value

					for (var i = 0; i <= n; i += 1) {
						var t = t1 + delta * easing(i / n);
						var styles = css(t, 1 - t);
						keyframes.push(css_to_keyframe(styles));
					}
				}

				get_t = () => {
					var time = /** @type {number} */ (
						/** @type {globalThis.Animation} */ (animation).currentTime
					);

					return t1 + delta * easing(time / duration);
				};

				if (tick) {
					loop(() => {
						if (animation.playState !== 'running') return false;

						var t = get_t();
						tick(t, 1 - t);

						return true;
					});
				}
			}

			animation = element.animate(keyframes, { duration, fill: 'forwards' });

			animation.onfinish = () => {
				get_t = () => t2;
				tick?.(t2, 1 - t2);
				on_finish();
			};
		};

		return {
			abort: () => {
				if (animation) {
					animation.cancel();
					// This prevents memory leaks in Chromium
					animation.effect = null;
					// This prevents onfinish to be launched after cancel(),
					// which can happen in some rare cases
					// see https://github.com/sveltejs/svelte/issues/13681
					animation.onfinish = noop;
				}
			},
			deactivate: () => {
				on_finish = noop;
			},
			reset: () => {
				if (t2 === 0) {
					tick?.(1, 0);
				}
			},
			t: () => get_t()
		};
	}

	/**
	 * @param {HTMLInputElement} input
	 * @param {() => unknown} get
	 * @param {(value: unknown) => void} set
	 * @returns {void}
	 */
	function bind_value(input, get, set = get) {
		var runes = is_runes();

		listen_to_event_and_reset_event(input, 'input', (is_reset) => {
			if (input.type === 'checkbox') {
				// TODO should this happen in prod too?
				bind_invalid_checkbox_value();
			}

			/** @type {any} */
			var value = is_reset ? input.defaultValue : input.value;
			value = is_numberlike_input(input) ? to_number(value) : value;
			set(value);

			// In runes mode, respect any validation in accessors (doesn't apply in legacy mode,
			// because we use mutable state which ensures the render effect always runs)
			if (runes && value !== (value = get())) {
				var start = input.selectionStart;
				var end = input.selectionEnd;

				// the value is coerced on assignment
				input.value = value ?? '';

				// Restore selection
				if (end !== null) {
					input.selectionStart = start;
					input.selectionEnd = Math.min(end, input.value.length);
				}
			}
		});

		if (
			// If we are hydrating and the value has since changed,
			// then use the updated value from the input instead.
			(hydrating && input.defaultValue !== input.value) ||
			// If defaultValue is set, then value == defaultValue
			// TODO Svelte 6: remove input.value check and set to empty string?
			(untrack(get) == null && input.value)
		) {
			set(is_numberlike_input(input) ? to_number(input.value) : input.value);
		}

		render_effect(() => {
			if (input.type === 'checkbox') {
				// TODO should this happen in prod too?
				bind_invalid_checkbox_value();
			}

			var value = get();

			if (is_numberlike_input(input) && value === to_number(input.value)) {
				// handles 0 vs 00 case (see https://github.com/sveltejs/svelte/issues/9959)
				return;
			}

			if (input.type === 'date' && !value && !input.value) {
				// Handles the case where a temporarily invalid date is set (while typing, for example with a leading 0 for the day)
				// and prevents this state from clearing the other parts of the date input (see https://github.com/sveltejs/svelte/issues/7897)
				return;
			}

			// don't set the value of the input if it's the same to allow
			// minlength to work properly
			if (value !== input.value) {
				// @ts-expect-error the value is coerced on assignment
				input.value = value ?? '';
			}
		});
	}

	/**
	 * @param {HTMLInputElement} input
	 * @param {() => unknown} get
	 * @param {(value: unknown) => void} set
	 * @returns {void}
	 */
	function bind_checked(input, get, set = get) {
		listen_to_event_and_reset_event(input, 'change', (is_reset) => {
			var value = is_reset ? input.defaultChecked : input.checked;
			set(value);
		});

		if (
			// If we are hydrating and the value has since changed,
			// then use the update value from the input instead.
			(hydrating && input.defaultChecked !== input.checked) ||
			// If defaultChecked is set, then checked == defaultChecked
			untrack(get) == null
		) {
			set(input.checked);
		}

		render_effect(() => {
			var value = get();
			input.checked = Boolean(value);
		});
	}

	/**
	 * @param {HTMLInputElement} input
	 */
	function is_numberlike_input(input) {
		var type = input.type;
		return type === 'number' || type === 'range';
	}

	/**
	 * @param {string} value
	 */
	function to_number(value) {
		return value === '' ? null : +value;
	}

	/**
	 * Makes an `export`ed (non-prop) variable available on the `$$props` object
	 * so that consumers can do `bind:x` on the component.
	 * @template V
	 * @param {Record<string, unknown>} props
	 * @param {string} prop
	 * @param {V} value
	 * @returns {void}
	 */
	function bind_prop(props, prop, value) {
		var desc = get_descriptor(props, prop);

		if (desc && desc.set) {
			props[prop] = value;
			teardown(() => {
				props[prop] = null;
			});
		}
	}

	/**
	 * Selects the correct option(s) (depending on whether this is a multiple select)
	 * @template V
	 * @param {HTMLSelectElement} select
	 * @param {V} value
	 * @param {boolean} [mounting]
	 */
	function select_option(select, value, mounting) {
		if (select.multiple) {
			return select_options(select, value);
		}

		for (var option of select.options) {
			var option_value = get_option_value(option);
			if (is(option_value, value)) {
				option.selected = true;
				return;
			}
		}

		if (!mounting || value !== undefined) {
			select.selectedIndex = -1; // no option should be selected
		}
	}

	/**
	 * Selects the correct option(s) if `value` is given,
	 * and then sets up a mutation observer to sync the
	 * current selection to the dom when it changes. Such
	 * changes could for example occur when options are
	 * inside an `#each` block.
	 * @template V
	 * @param {HTMLSelectElement} select
	 * @param {() => V} [get_value]
	 */
	function init_select(select, get_value) {
		let mounting = true;
		effect(() => {
			if (get_value) {
				select_option(select, untrack(get_value), mounting);
			}
			mounting = false;

			var observer = new MutationObserver(() => {
				// @ts-ignore
				var value = select.__value;
				select_option(select, value);
				// Deliberately don't update the potential binding value,
				// the model should be preserved unless explicitly changed
			});

			observer.observe(select, {
				// Listen to option element changes
				childList: true,
				subtree: true, // because of <optgroup>
				// Listen to option element value attribute changes
				// (doesn't get notified of select value changes,
				// because that property is not reflected as an attribute)
				attributes: true,
				attributeFilter: ['value']
			});

			return () => {
				observer.disconnect();
			};
		});
	}

	/**
	 * @template V
	 * @param {HTMLSelectElement} select
	 * @param {V} value
	 */
	function select_options(select, value) {
		for (var option of select.options) {
			// @ts-ignore
			option.selected = ~value.indexOf(get_option_value(option));
		}
	}

	/** @param {HTMLOptionElement} option */
	function get_option_value(option) {
		// __value only exists if the <option> has a value attribute
		if ('__value' in option) {
			return option.__value;
		} else {
			return option.value;
		}
	}

	/**
	 * @param {any} bound_value
	 * @param {Element} element_or_component
	 * @returns {boolean}
	 */
	function is_bound_this(bound_value, element_or_component) {
		return (
			bound_value === element_or_component || bound_value?.[STATE_SYMBOL] === element_or_component
		);
	}

	/**
	 * @param {any} element_or_component
	 * @param {(value: unknown, ...parts: unknown[]) => void} update
	 * @param {(...parts: unknown[]) => unknown} get_value
	 * @param {() => unknown[]} [get_parts] Set if the this binding is used inside an each block,
	 * 										returns all the parts of the each block context that are used in the expression
	 * @returns {void}
	 */
	function bind_this(element_or_component = {}, update, get_value, get_parts) {
		effect(() => {
			/** @type {unknown[]} */
			var old_parts;

			/** @type {unknown[]} */
			var parts;

			render_effect(() => {
				old_parts = parts;
				// We only track changes to the parts, not the value itself to avoid unnecessary reruns.
				parts = get_parts?.() || [];

				untrack(() => {
					if (element_or_component !== get_value(...parts)) {
						update(element_or_component, ...parts);
						// If this is an effect rerun (cause: each block context changes), then nullfiy the binding at
						// the previous position if it isn't already taken over by a different effect.
						if (old_parts && is_bound_this(get_value(...old_parts), element_or_component)) {
							update(null, ...old_parts);
						}
					}
				});
			});

			return () => {
				// We cannot use effects in the teardown phase, we we use a microtask instead.
				queue_micro_task(() => {
					if (parts && is_bound_this(get_value(...parts), element_or_component)) {
						update(null, ...parts);
					}
				});
			};
		});

		return element_or_component;
	}

	/** @import { ActionReturn } from 'svelte/action' */

	/**
	 * Substitute for the `preventDefault` event modifier
	 * @deprecated
	 * @param {(event: Event, ...args: Array<unknown>) => void} fn
	 * @returns {(event: Event, ...args: unknown[]) => void}
	 */
	function preventDefault(fn) {
		return function (...args) {
			var event = /** @type {Event} */ (args[0]);
			event.preventDefault();
			// @ts-ignore
			return fn?.apply(this, args);
		};
	}

	/** @import { ComponentContextLegacy } from '#client' */

	/**
	 * Legacy-mode only: Call `onMount` callbacks and set up `beforeUpdate`/`afterUpdate` effects
	 * @param {boolean} [immutable]
	 */
	function init(immutable = false) {
		const context = /** @type {ComponentContextLegacy} */ (component_context);

		const callbacks = context.l.u;
		if (!callbacks) return;

		let props = () => deep_read_state(context.s);

		if (immutable) {
			let version = 0;
			let prev = /** @type {Record<string, any>} */ ({});

			// In legacy immutable mode, before/afterUpdate only fire if the object identity of a prop changes
			const d = derived(() => {
				let changed = false;
				const props = context.s;
				for (const key in props) {
					if (props[key] !== prev[key]) {
						prev[key] = props[key];
						changed = true;
					}
				}
				if (changed) version++;
				return version;
			});

			props = () => get$2(d);
		}

		// beforeUpdate
		if (callbacks.b.length) {
			user_pre_effect(() => {
				observe_all(context, props);
				run_all(callbacks.b);
			});
		}

		// onMount (must run before afterUpdate)
		user_effect(() => {
			const fns = untrack(() => callbacks.m.map(run$1));
			return () => {
				for (const fn of fns) {
					if (typeof fn === 'function') {
						fn();
					}
				}
			};
		});

		// afterUpdate
		if (callbacks.a.length) {
			user_effect(() => {
				observe_all(context, props);
				run_all(callbacks.a);
			});
		}
	}

	/**
	 * Invoke the getter of all signals associated with a component
	 * so they can be registered to the effect this function is called in.
	 * @param {ComponentContextLegacy} context
	 * @param {(() => void)} props
	 */
	function observe_all(context, props) {
		if (context.l.s) {
			for (const signal of context.l.s) get$2(signal);
		}

		props();
	}

	/**
	 * @this {any}
	 * @param {Record<string, unknown>} $$props
	 * @param {Event} event
	 * @returns {void}
	 */
	function bubble_event($$props, event) {
		var events = /** @type {Record<string, Function[] | Function>} */ ($$props.$$events)?.[
			event.type
		];

		var callbacks = is_array(events) ? events.slice() : events == null ? [] : [events];

		for (var fn of callbacks) {
			// Preserve "this" context
			fn.call(this, event);
		}
	}

	/** @import { Readable } from './public' */

	/**
	 * @template T
	 * @param {Readable<T> | null | undefined} store
	 * @param {(value: T) => void} run
	 * @param {(value: T) => void} [invalidate]
	 * @returns {() => void}
	 */
	function subscribe_to_store(store, run, invalidate) {
		if (store == null) {
			// @ts-expect-error
			run(undefined);

			return noop;
		}

		// Svelte store takes a private second argument
		// StartStopNotifier could mutate state, and we want to silence the corresponding validation error
		const unsub = untrack(() =>
			store.subscribe(
				run,
				// @ts-expect-error
				invalidate
			)
		);

		// Also support RxJS
		// @ts-expect-error TODO fix this in the types?
		return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;
	}

	/** @import { StoreReferencesContainer } from '#client' */
	/** @import { Store } from '#shared' */

	/**
	 * Whether or not the prop currently being read is a store binding, as in
	 * `<Child bind:x={$y} />`. If it is, we treat the prop as mutable even in
	 * runes mode, and skip `binding_property_non_reactive` validation
	 */
	let is_store_binding = false;

	/**
	 * Gets the current value of a store. If the store isn't subscribed to yet, it will create a proxy
	 * signal that will be updated when the store is. The store references container is needed to
	 * track reassignments to stores and to track the correct component context.
	 * @template V
	 * @param {Store<V> | null | undefined} store
	 * @param {string} store_name
	 * @param {StoreReferencesContainer} stores
	 * @returns {V}
	 */
	function store_get(store, store_name, stores) {
		const entry = (stores[store_name] ??= {
			store: null,
			source: mutable_source(undefined),
			unsubscribe: noop
		});

		if (entry.store !== store) {
			entry.unsubscribe();
			entry.store = store ?? null;

			if (store == null) {
				entry.source.v = undefined; // see synchronous callback comment below
				entry.unsubscribe = noop;
			} else {
				var is_synchronous_callback = true;

				entry.unsubscribe = subscribe_to_store(store, (v) => {
					if (is_synchronous_callback) {
						// If the first updates to the store value (possibly multiple of them) are synchronously
						// inside a derived, we will hit the `state_unsafe_mutation` error if we `set` the value
						entry.source.v = v;
					} else {
						set(entry.source, v);
					}
				});

				is_synchronous_callback = false;
			}
		}

		return get$2(entry.source);
	}

	/**
	 * Unsubscribes from all auto-subscribed stores on destroy
	 * @returns {StoreReferencesContainer}
	 */
	function setup_stores() {
		/** @type {StoreReferencesContainer} */
		const stores = {};

		teardown(() => {
			for (var store_name in stores) {
				const ref = stores[store_name];
				ref.unsubscribe();
			}
		});

		return stores;
	}

	/**
	 * Updates a store with a new value.
	 * @param {Store<V>} store  the store to update
	 * @param {any} expression  the expression that mutates the store
	 * @param {V} new_value  the new store value
	 * @template V
	 */
	function store_mutate(store, expression, new_value) {
		store.set(new_value);
		return expression;
	}

	/**
	 * Returns a tuple that indicates whether `fn()` reads a prop that is a store binding.
	 * Used to prevent `binding_property_non_reactive` validation false positives and
	 * ensure that these props are treated as mutable even in runes mode
	 * @template T
	 * @param {() => T} fn
	 * @returns {[T, boolean]}
	 */
	function capture_store_binding(fn) {
		var previous_is_store_binding = is_store_binding;

		try {
			is_store_binding = false;
			return [fn(), is_store_binding];
		} finally {
			is_store_binding = previous_is_store_binding;
		}
	}

	/** @import { Source } from './types.js' */

	/**
	 * The proxy handler for rest props (i.e. `const { x, ...rest } = $props()`).
	 * Is passed the full `$$props` object and excludes the named props.
	 * @type {ProxyHandler<{ props: Record<string | symbol, unknown>, exclude: Array<string | symbol>, name?: string }>}}
	 */
	const rest_props_handler = {
		get(target, key) {
			if (target.exclude.includes(key)) return;
			return target.props[key];
		},
		set(target, key) {
			{
				// TODO should this happen in prod too?
				props_rest_readonly(`${target.name}.${String(key)}`);
			}

			return false;
		},
		getOwnPropertyDescriptor(target, key) {
			if (target.exclude.includes(key)) return;
			if (key in target.props) {
				return {
					enumerable: true,
					configurable: true,
					value: target.props[key]
				};
			}
		},
		has(target, key) {
			if (target.exclude.includes(key)) return false;
			return key in target.props;
		},
		ownKeys(target) {
			return Reflect.ownKeys(target.props).filter((key) => !target.exclude.includes(key));
		}
	};

	/**
	 * @param {Record<string, unknown>} props
	 * @param {string[]} exclude
	 * @param {string} [name]
	 * @returns {Record<string, unknown>}
	 */
	/*#__NO_SIDE_EFFECTS__*/
	function rest_props(props, exclude, name) {
		return new Proxy(
			{ props, exclude, name, other: {}, to_proxy: [] } ,
			rest_props_handler
		);
	}

	/**
	 * The proxy handler for legacy $$restProps and $$props
	 * @type {ProxyHandler<{ props: Record<string | symbol, unknown>, exclude: Array<string | symbol>, special: Record<string | symbol, (v?: unknown) => unknown>, version: Source<number> }>}}
	 */
	const legacy_rest_props_handler = {
		get(target, key) {
			if (target.exclude.includes(key)) return;
			get$2(target.version);
			return key in target.special ? target.special[key]() : target.props[key];
		},
		set(target, key, value) {
			if (!(key in target.special)) {
				// Handle props that can temporarily get out of sync with the parent
				/** @type {Record<string, (v?: unknown) => unknown>} */
				target.special[key] = prop(
					{
						get [key]() {
							return target.props[key];
						}
					},
					/** @type {string} */ (key),
					PROPS_IS_UPDATED
				);
			}

			target.special[key](value);
			update(target.version); // $$props is coarse-grained: when $$props.x is updated, usages of $$props.y etc are also rerun
			return true;
		},
		getOwnPropertyDescriptor(target, key) {
			if (target.exclude.includes(key)) return;
			if (key in target.props) {
				return {
					enumerable: true,
					configurable: true,
					value: target.props[key]
				};
			}
		},
		deleteProperty(target, key) {
			// Svelte 4 allowed for deletions on $$restProps
			if (target.exclude.includes(key)) return true;
			target.exclude.push(key);
			update(target.version);
			return true;
		},
		has(target, key) {
			if (target.exclude.includes(key)) return false;
			return key in target.props;
		},
		ownKeys(target) {
			return Reflect.ownKeys(target.props).filter((key) => !target.exclude.includes(key));
		}
	};

	/**
	 * @param {Record<string, unknown>} props
	 * @param {string[]} exclude
	 * @returns {Record<string, unknown>}
	 */
	function legacy_rest_props(props, exclude) {
		return new Proxy({ props, exclude, special: {}, version: source(0) }, legacy_rest_props_handler);
	}

	/**
	 * The proxy handler for spread props. Handles the incoming array of props
	 * that looks like `() => { dynamic: props }, { static: prop }, ..` and wraps
	 * them so that the whole thing is passed to the component as the `$$props` argument.
	 * @template {Record<string | symbol, unknown>} T
	 * @type {ProxyHandler<{ props: Array<T | (() => T)> }>}}
	 */
	const spread_props_handler = {
		get(target, key) {
			let i = target.props.length;
			while (i--) {
				let p = target.props[i];
				if (is_function(p)) p = p();
				if (typeof p === 'object' && p !== null && key in p) return p[key];
			}
		},
		set(target, key, value) {
			let i = target.props.length;
			while (i--) {
				let p = target.props[i];
				if (is_function(p)) p = p();
				const desc = get_descriptor(p, key);
				if (desc && desc.set) {
					desc.set(value);
					return true;
				}
			}
			return false;
		},
		getOwnPropertyDescriptor(target, key) {
			let i = target.props.length;
			while (i--) {
				let p = target.props[i];
				if (is_function(p)) p = p();
				if (typeof p === 'object' && p !== null && key in p) {
					const descriptor = get_descriptor(p, key);
					if (descriptor && !descriptor.configurable) {
						// Prevent a "Non-configurability Report Error": The target is an array, it does
						// not actually contain this property. If it is now described as non-configurable,
						// the proxy throws a validation error. Setting it to true avoids that.
						descriptor.configurable = true;
					}
					return descriptor;
				}
			}
		},
		has(target, key) {
			// To prevent a false positive `is_entry_props` in the `prop` function
			if (key === STATE_SYMBOL || key === LEGACY_PROPS) return false;

			for (let p of target.props) {
				if (is_function(p)) p = p();
				if (p != null && key in p) return true;
			}

			return false;
		},
		ownKeys(target) {
			/** @type {Array<string | symbol>} */
			const keys = [];

			for (let p of target.props) {
				if (is_function(p)) p = p();
				for (const key in p) {
					if (!keys.includes(key)) keys.push(key);
				}
			}

			return keys;
		}
	};

	/**
	 * @param {Array<Record<string, unknown> | (() => Record<string, unknown>)>} props
	 * @returns {any}
	 */
	function spread_props(...props) {
		return new Proxy({ props }, spread_props_handler);
	}

	/**
	 * @template T
	 * @param {() => T} fn
	 * @returns {T}
	 */
	function with_parent_branch(fn) {
		var effect = active_effect;
		var previous_effect = active_effect;

		while (effect !== null && (effect.f & (BRANCH_EFFECT | ROOT_EFFECT)) === 0) {
			effect = effect.parent;
		}
		try {
			set_active_effect(effect);
			return fn();
		} finally {
			set_active_effect(previous_effect);
		}
	}

	/**
	 * This function is responsible for synchronizing a possibly bound prop with the inner component state.
	 * It is used whenever the compiler sees that the component writes to the prop, or when it has a default prop_value.
	 * @template V
	 * @param {Record<string, unknown>} props
	 * @param {string} key
	 * @param {number} flags
	 * @param {V | (() => V)} [fallback]
	 * @returns {(() => V | ((arg: V) => V) | ((arg: V, mutation: boolean) => V))}
	 */
	function prop(props, key, flags, fallback) {
		var immutable = (flags & PROPS_IS_IMMUTABLE) !== 0;
		var runes = !legacy_mode_flag || (flags & PROPS_IS_RUNES) !== 0;
		var bindable = (flags & PROPS_IS_BINDABLE) !== 0;
		var lazy = (flags & PROPS_IS_LAZY_INITIAL) !== 0;
		var is_store_sub = false;
		var prop_value;

		if (bindable) {
			[prop_value, is_store_sub] = capture_store_binding(() => /** @type {V} */ (props[key]));
		} else {
			prop_value = /** @type {V} */ (props[key]);
		}

		// Can be the case when someone does `mount(Component, props)` with `let props = $state({...})`
		// or `createClassComponent(Component, props)`
		var is_entry_props = STATE_SYMBOL in props || LEGACY_PROPS in props;

		var setter =
			get_descriptor(props, key)?.set ??
			(is_entry_props && bindable && key in props ? (v) => (props[key] = v) : undefined);

		var fallback_value = /** @type {V} */ (fallback);
		var fallback_dirty = true;
		var fallback_used = false;

		var get_fallback = () => {
			fallback_used = true;
			if (fallback_dirty) {
				fallback_dirty = false;
				if (lazy) {
					fallback_value = untrack(/** @type {() => V} */ (fallback));
				} else {
					fallback_value = /** @type {V} */ (fallback);
				}
			}

			return fallback_value;
		};

		if (prop_value === undefined && fallback !== undefined) {
			if (setter && runes) {
				props_invalid_value(key);
			}

			prop_value = get_fallback();
			if (setter) setter(prop_value);
		}

		/** @type {() => V} */
		var getter;
		if (runes) {
			getter = () => {
				var value = /** @type {V} */ (props[key]);
				if (value === undefined) return get_fallback();
				fallback_dirty = true;
				fallback_used = false;
				return value;
			};
		} else {
			// Svelte 4 did not trigger updates when a primitive value was updated to the same value.
			// Replicate that behavior through using a derived
			var derived_getter = with_parent_branch(() =>
				(immutable ? derived : derived_safe_equal)(() => /** @type {V} */ (props[key]))
			);
			derived_getter.f |= LEGACY_DERIVED_PROP;
			getter = () => {
				var value = get$2(derived_getter);
				if (value !== undefined) fallback_value = /** @type {V} */ (undefined);
				return value === undefined ? fallback_value : value;
			};
		}

		// easy mode — prop is never written to
		if ((flags & PROPS_IS_UPDATED) === 0) {
			return getter;
		}

		// intermediate mode — prop is written to, but the parent component had
		// `bind:foo` which means we can just call `$$props.foo = value` directly
		if (setter) {
			var legacy_parent = props.$$legacy;
			return function (/** @type {any} */ value, /** @type {boolean} */ mutation) {
				if (arguments.length > 0) {
					// We don't want to notify if the value was mutated and the parent is in runes mode.
					// In that case the state proxy (if it exists) should take care of the notification.
					// If the parent is not in runes mode, we need to notify on mutation, too, that the prop
					// has changed because the parent will not be able to detect the change otherwise.
					if (!runes || !mutation || legacy_parent || is_store_sub) {
						/** @type {Function} */ (setter)(mutation ? getter() : value);
					}
					return value;
				} else {
					return getter();
				}
			};
		}

		// hard mode. this is where it gets ugly — the value in the child should
		// synchronize with the parent, but it should also be possible to temporarily
		// set the value to something else locally.
		var from_child = false;
		var was_from_child = false;

		// The derived returns the current value. The underlying mutable
		// source is written to from various places to persist this value.
		var inner_current_value = mutable_source(prop_value);
		var current_value = with_parent_branch(() =>
			derived(() => {
				var parent_value = getter();
				var child_value = get$2(inner_current_value);

				if (from_child) {
					from_child = false;
					was_from_child = true;
					return child_value;
				}

				was_from_child = false;
				return (inner_current_value.v = parent_value);
			})
		);

		if (!immutable) current_value.equals = safe_equals;

		return function (/** @type {any} */ value, /** @type {boolean} */ mutation) {

			if (arguments.length > 0) {
				const new_value = mutation ? get$2(current_value) : runes && bindable ? proxy(value) : value;

				if (!current_value.equals(new_value)) {
					from_child = true;
					set(inner_current_value, new_value);
					// To ensure the fallback value is consistent when used with proxies, we
					// update the local fallback_value, but only if the fallback is actively used
					if (fallback_used && fallback_value !== undefined) {
						fallback_value = new_value;
					}
					untrack(() => get$2(current_value)); // force a synchronisation immediately
				}

				return value;
			}
			return get$2(current_value);
		};
	}

	/** @import { ComponentContext, ComponentContextLegacy } from '#client' */
	/** @import { EventDispatcher } from './index.js' */
	/** @import { NotFunction } from './internal/types.js' */

	/**
	 * The `onMount` function schedules a callback to run as soon as the component has been mounted to the DOM.
	 * It must be called during the component's initialisation (but doesn't need to live *inside* the component;
	 * it can be called from an external module).
	 *
	 * If a function is returned _synchronously_ from `onMount`, it will be called when the component is unmounted.
	 *
	 * `onMount` does not run inside [server-side components](https://svelte.dev/docs/svelte/svelte-server#render).
	 *
	 * @template T
	 * @param {() => NotFunction<T> | Promise<NotFunction<T>> | (() => any)} fn
	 * @returns {void}
	 */
	function onMount(fn) {
		if (component_context === null) {
			lifecycle_outside_component('onMount');
		}

		if (legacy_mode_flag && component_context.l !== null) {
			init_update_callbacks(component_context).m.push(fn);
		} else {
			user_effect(() => {
				const cleanup = untrack(fn);
				if (typeof cleanup === 'function') return /** @type {() => void} */ (cleanup);
			});
		}
	}

	/**
	 * Schedules a callback to run immediately before the component is unmounted.
	 *
	 * Out of `onMount`, `beforeUpdate`, `afterUpdate` and `onDestroy`, this is the
	 * only one that runs inside a server-side component.
	 *
	 * @param {() => any} fn
	 * @returns {void}
	 */
	function onDestroy(fn) {
		if (component_context === null) {
			lifecycle_outside_component('onDestroy');
		}

		onMount(() => () => untrack(fn));
	}

	/**
	 * @template [T=any]
	 * @param {string} type
	 * @param {T} [detail]
	 * @param {any}params_0
	 * @returns {CustomEvent<T>}
	 */
	function create_custom_event(type, detail, { bubbles = false, cancelable = false } = {}) {
		return new CustomEvent(type, { detail, bubbles, cancelable });
	}

	/**
	 * Creates an event dispatcher that can be used to dispatch [component events](https://svelte.dev/docs/svelte/legacy-on#Component-events).
	 * Event dispatchers are functions that can take two arguments: `name` and `detail`.
	 *
	 * Component events created with `createEventDispatcher` create a
	 * [CustomEvent](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent).
	 * These events do not [bubble](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#Event_bubbling_and_capture).
	 * The `detail` argument corresponds to the [CustomEvent.detail](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/detail)
	 * property and can contain any type of data.
	 *
	 * The event dispatcher can be typed to narrow the allowed event names and the type of the `detail` argument:
	 * ```ts
	 * const dispatch = createEventDispatcher<{
	 *  loaded: never; // does not take a detail argument
	 *  change: string; // takes a detail argument of type string, which is required
	 *  optional: number | null; // takes an optional detail argument of type number
	 * }>();
	 * ```
	 *
	 * @deprecated Use callback props and/or the `$host()` rune instead — see [migration guide](https://svelte.dev/docs/svelte/v5-migration-guide#Event-changes-Component-events)
	 * @template {Record<string, any>} [EventMap = any]
	 * @returns {EventDispatcher<EventMap>}
	 */
	function createEventDispatcher() {
		const active_component_context = component_context;
		if (active_component_context === null) {
			lifecycle_outside_component('createEventDispatcher');
		}

		return (type, detail, options) => {
			const events = /** @type {Record<string, Function | Function[]>} */ (
				active_component_context.s.$$events
			)?.[/** @type {any} */ (type)];

			if (events) {
				const callbacks = is_array(events) ? events.slice() : [events];
				// TODO are there situations where events could be dispatched
				// in a server (non-DOM) environment?
				const event = create_custom_event(/** @type {string} */ (type), detail, options);
				for (const fn of callbacks) {
					fn.call(active_component_context.x, event);
				}
				return !event.defaultPrevented;
			}

			return true;
		};
	}

	// TODO mark beforeUpdate and afterUpdate as deprecated in Svelte 6

	/**
	 * Schedules a callback to run immediately before the component is updated after any state change.
	 *
	 * The first time the callback runs will be before the initial `onMount`.
	 *
	 * In runes mode use `$effect.pre` instead.
	 *
	 * @deprecated Use [`$effect.pre`](https://svelte.dev/docs/svelte/$effect#$effect.pre) instead
	 * @param {() => void} fn
	 * @returns {void}
	 */
	function beforeUpdate(fn) {
		if (component_context === null) {
			lifecycle_outside_component('beforeUpdate');
		}

		if (component_context.l === null) {
			lifecycle_legacy_only('beforeUpdate');
		}

		init_update_callbacks(component_context).b.push(fn);
	}

	/**
	 * Schedules a callback to run immediately after the component has been updated.
	 *
	 * The first time the callback runs will be after the initial `onMount`.
	 *
	 * In runes mode use `$effect` instead.
	 *
	 * @deprecated Use [`$effect`](https://svelte.dev/docs/svelte/$effect) instead
	 * @param {() => void} fn
	 * @returns {void}
	 */
	function afterUpdate(fn) {
		if (component_context === null) {
			lifecycle_outside_component('afterUpdate');
		}

		if (component_context.l === null) {
			lifecycle_legacy_only('afterUpdate');
		}

		init_update_callbacks(component_context).a.push(fn);
	}

	/**
	 * Legacy-mode: Init callbacks object for onMount/beforeUpdate/afterUpdate
	 * @param {ComponentContext} context
	 */
	function init_update_callbacks(context) {
		var l = /** @type {ComponentContextLegacy} */ (context).l;
		return (l.u ??= { a: [], b: [], m: [] });
	}

	/**
	 * Synchronously flushes any pending state changes and those that result from it.
	 * @param {() => void} [fn]
	 * @returns {void}
	 */
	function flushSync(fn) {
		flush_sync(fn);
	}

	var indexClient = /*#__PURE__*/Object.freeze({
		__proto__: null,
		afterUpdate: afterUpdate,
		beforeUpdate: beforeUpdate,
		createEventDispatcher: createEventDispatcher,
		createRawSnippet: createRawSnippet,
		flushSync: flushSync,
		getAllContexts: getAllContexts,
		getContext: getContext,
		hasContext: hasContext,
		hydrate: hydrate,
		mount: mount,
		onDestroy: onDestroy,
		onMount: onMount,
		setContext: setContext,
		tick: tick,
		unmount: unmount,
		untrack: untrack
	});

	// generated during release, do not modify

	const PUBLIC_VERSION = '5';

	if (typeof window !== 'undefined')
		// @ts-ignore
		(window.__svelte ||= { v: new Set() }).v.add(PUBLIC_VERSION);

	function _assertClassBrand(e, t, n) {
	  if ("function" == typeof e ? e === t : e.has(t)) return arguments.length < 3 ? t : n;
	  throw new TypeError("Private element is not present on this object");
	}
	function _assertThisInitialized(e) {
	  if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  return e;
	}
	function _callSuper(t, o, e) {
	  return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e));
	}
	function _checkPrivateRedeclaration(e, t) {
	  if (t.has(e)) throw new TypeError("Cannot initialize the same private elements twice on an object");
	}
	function _classCallCheck(a, n) {
	  if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function");
	}
	function _classPrivateFieldGet2(s, a) {
	  return s.get(_assertClassBrand(s, a));
	}
	function _classPrivateFieldInitSpec(e, t, a) {
	  _checkPrivateRedeclaration(e, t), t.set(e, a);
	}
	function _classPrivateFieldSet2(s, a, r) {
	  return s.set(_assertClassBrand(s, a), r), r;
	}
	function _classPrivateMethodInitSpec(e, a) {
	  _checkPrivateRedeclaration(e, a), a.add(e);
	}
	function _defineProperties(e, r) {
	  for (var t = 0; t < r.length; t++) {
	    var o = r[t];
	    o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o);
	  }
	}
	function _createClass(e, r, t) {
	  return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", {
	    writable: !1
	  }), e;
	}
	function _defineProperty(e, r, t) {
	  return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {
	    value: t,
	    enumerable: !0,
	    configurable: !0,
	    writable: !0
	  }) : e[r] = t, e;
	}
	function _getPrototypeOf(t) {
	  return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) {
	    return t.__proto__ || Object.getPrototypeOf(t);
	  }, _getPrototypeOf(t);
	}
	function _inherits(t, e) {
	  if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
	  t.prototype = Object.create(e && e.prototype, {
	    constructor: {
	      value: t,
	      writable: !0,
	      configurable: !0
	    }
	  }), Object.defineProperty(t, "prototype", {
	    writable: !1
	  }), e && _setPrototypeOf(t, e);
	}
	function _isNativeReflectConstruct() {
	  try {
	    var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
	  } catch (t) {}
	  return (_isNativeReflectConstruct = function () {
	    return !!t;
	  })();
	}
	function _possibleConstructorReturn(t, e) {
	  if (e && ("object" == typeof e || "function" == typeof e)) return e;
	  if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");
	  return _assertThisInitialized(t);
	}
	function _setPrototypeOf(t, e) {
	  return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) {
	    return t.__proto__ = e, t;
	  }, _setPrototypeOf(t, e);
	}
	function _toPrimitive(t, r) {
	  if ("object" != typeof t || !t) return t;
	  var e = t[Symbol.toPrimitive];
	  if (void 0 !== e) {
	    var i = e.call(t, r || "default");
	    if ("object" != typeof i) return i;
	    throw new TypeError("@@toPrimitive must return a primitive value.");
	  }
	  return ("string" === r ? String : Number)(t);
	}
	function _toPropertyKey(t) {
	  var i = _toPrimitive(t, "string");
	  return "symbol" == typeof i ? i : i + "";
	}

	const inputValuesExtractors = Object.freeze({
	  checkbox: function (inpEl, defaultValue = undefined) {
	    if (typeof defaultValue == "object" && Object.hasOwn(defaultValue, "checked") && Object.hasOwn(defaultValue, "unchecked")) {
	      return inpEl.checked ? defaultValue.checked : defaultValue.unchecked;
	    } else if (Object.hasOwn(inpEl, "value") && typeof inpEl.value !== "undefined") {
	      return inpEl.checked ? inpEl.value : false;
	    } else {
	      return inpEl.checked;
	    }
	  }
	});

	/**
	 * Collection of common to UI functions and properties
	 *
	 * @class UICommon
	 */
	let UICommon$1 = /*#__PURE__*/function () {
	  function UICommon() {
	    _classCallCheck(this, UICommon);
	  }
	  return _createClass(UICommon, null, [{
	    key: "inputValuesExtractors",
	    get: function () {
	      return inputValuesExtractors;
	    }
	  }, {
	    key: "extractValueFromInput",
	    value: function extractValueFromInput(inpEl, defaultValue = undefined) {
	      if (Object.hasOwn(UICommon.inputValuesExtractors, inpEl.type)) {
	        return UICommon.inputValuesExtractors[inpEl.type](inpEl, defaultValue);
	      }
	      return inpEl.value;
	    }

	    /**
	     *
	     *
	     * @static
	     * @param {string}      field    field name
	     * @param {import('./events.types').UIEventInputChangeCallback}    onchange
	     * @param {any}         [defaultValue=undefined]
	     * @return {import('./events.types').UIEventCallback}
	     * @memberof UICommon
	     */
	  }, {
	    key: "onInput",
	    value: function onInput(field, onchange, defaultValue = undefined) {
	      return function (event) {
	        const value = UICommon.extractValueFromInput(event.currentTarget, defaultValue);
	        return onchange({
	          field,
	          value
	        }, event);
	      };
	    }

	    /**
	     *
	     *
	     * @static
	     * @param {KeyboardEvent} e
	     * @memberof UICommon
	     */
	  }, {
	    key: "isEnterEvent",
	    value: function isEnterEvent(e) {
	      return e.key === "Enter" && !e.altKey && !e.ctrlKey && !e.shiftKey;
	    }
	  }, {
	    key: "onlyOnEnter",
	    value: function onlyOnEnter(callback) {
	      return function (e) {
	        if (UICommon.isEnterEvent(e)) {
	          return callback(e);
	        } else {
	          return true;
	        }
	      };
	    }
	  }, {
	    key: "isMobile",
	    value: function isMobile() {
	      const testMobile = window.matchMedia || window.msMatchMedia;
	      if (testMobile) {
	        let testQuery = "(pointer:coarse)";
	        if (arguments.length) {
	          const max_width = typeof arguments[0] === "boolean" ? this.MOBILE_WIDTH_BREAK_POINT : arguments[0];
	          testQuery = `only screen and (max-width: ${max_width}px)`;
	        }
	        return testMobile(testQuery).matches;
	      }
	      return false;
	    }
	  }, {
	    key: "removeBodyScroll",
	    value: function removeBodyScroll() {
	      document.body.classList.add(this.SCROLL_DISABLER_CLASS);
	    }
	  }, {
	    key: "restoreBodyScroll",
	    value: function restoreBodyScroll() {
	      document.body.classList.remove(this.SCROLL_DISABLER_CLASS);
	    }

	    /**
	     *  Reformats input from any string to strict phone format
	     *  @param {string}    val    free style phone number
	     *  @param {string}    [filler=UICommon.FILLER]    free style phone number
	     *  @returns {string}          phone number
	     **/
	  }, {
	    key: "formatPhone",
	    value: function formatPhone(val, filler = this.FILLER) {
	      //starting from 11 digits in phone number
	      const slots = [1, 2, 2, 2, 3, 3, 3, 4, 4, 5, 5];
	      let digits = val.replace(/\D/g, "");
	      //if there are more, move them to country code slot
	      if (digits.length > 11) {
	        let d = digits.length - 11;
	        while (d > 0) {
	          d--;
	          slots.unshift(1);
	        }
	      }
	      let stack = ["", "", "", "", ""];
	      Array.from(digits).forEach(function (digit, index) {
	        let slot = slots[index];
	        stack[slot - 1] = stack[slot - 1] + digit;
	      });
	      //creating map of parts lengths
	      const lens = slots.reduce(function (acc, curr) {
	        if (typeof acc[curr] === "undefined") {
	          acc[curr] = 1;
	        } else {
	          acc[curr] += 1;
	        }
	        return acc;
	      }, {});
	      //fill empty positions with filler (_)
	      for (let t in stack) {
	        let dif = lens[parseInt(t) + 1] - stack[t].length;
	        while (dif > 0) {
	          stack[t] = stack[t] + filler;
	          dif--;
	        }
	      }
	      return `+${stack[0]} (${stack[1]}) ${stack[2]}-${stack[3]}-${stack[4]}`;
	    }
	  }, {
	    key: "setMoneySign",
	    value: function setMoneySign(val) {
	      this.MONEY_SIGN = val;
	    }

	    /**
	     *
	     *
	     * @static
	     * @param {number} price
	     * @return {string}
	     * @memberof UICommon
	     */
	  }, {
	    key: "formatPrice",
	    value: function formatPrice(price) {
	      let major = Math.floor(price / 100),
	        minor = price % 100;
	      return `${this.MONEY_SIGN}${major.toString()}.${minor.toString()}`;
	    }
	  }, {
	    key: "formatLocaleDatetime",
	    value: function formatLocaleDatetime(dt, opts = {
	      date: true,
	      time: true
	    }) {
	      const date = dt.toLocaleDateString(window.navigator.language);
	      const time = dt.toLocaleTimeString(window.navigator.language);
	      if (opts.date && opts.time) {
	        return `${date} ${time}`;
	      } else if (opts.date && !opts.time) {
	        return date;
	      } else {
	        return time;
	      }
	    }
	  }, {
	    key: "tryFormatLocaleDateTime",
	    value: function tryFormatLocaleDateTime(value, opts = {
	      date: true,
	      time: true
	    }) {
	      if (typeof value == "string" || typeof value == "number") {
	        const dt = new Date(value);
	        return UICommon.formatLocaleDatetime(dt, opts);
	      } else if (typeof value == "object") {
	        return UICommon.formatLocaleDatetime(value, opts);
	      } else {
	        return "";
	      }
	    }
	  }, {
	    key: "formatTimestamp",
	    value: function formatTimestamp(timestamp, offset = 0) {
	      let offsetLocal = new Date().getTimezoneOffset();
	      let deltaOffset = (offsetLocal - offset) * 60 * 1000;
	      let localDateTime = new Date(parseInt(timestamp) - deltaOffset);
	      return localDateTime.toLocaleString(window.navigator.language);
	    }
	  }, {
	    key: "declOfNum",
	    value: function declOfNum(n, text_forms) {
	      n = Math.abs(n) % 100;
	      let n1 = n % 10;
	      if (n > 10 && n < 20) {
	        return text_forms[2];
	      }
	      if (n1 > 1 && n1 < 5) {
	        return text_forms[1];
	      }
	      if (n1 == 1) {
	        return text_forms[0];
	      }
	      return text_forms[2];
	    }
	  }, {
	    key: "humanizedTimeDiff",
	    value: function humanizedTimeDiff(date /* unix time */) {
	      let currentTime = new Date().getTime();
	      let sec = Math.round((currentTime - date) / 1000);
	      let unit;
	      if (sec < 60) {
	        unit = this.declOfNum(sec, this.TIME.SECONDS);
	        return `${sec} ${unit} назад`;
	      } else if (sec < 3600) {
	        let min = Math.floor(sec / 60);
	        unit = this.declOfNum(min, this.TIME.MINUTES);
	        return `${min} ${unit} назад`;
	      } else {
	        let hours = Math.floor(sec / (60 * 60));
	        unit = this.declOfNum(hours, this.TIME.HOURS);
	        return `${hours} ${unit} назад`;
	      }
	    }
	  }]);
	}();
	_defineProperty(UICommon$1, "CLEAR_MACRO", "__CLEAR__");
	_defineProperty(UICommon$1, "ERROR_DEFAULT", "Что пошло не так.");
	_defineProperty(UICommon$1, "DEFAULT_REDIRECT_TIMEOUT", 3000);
	_defineProperty(UICommon$1, "CLASS_OK", "is-success");
	_defineProperty(UICommon$1, "CLASS_ERR", "is-danger");
	_defineProperty(UICommon$1, "SCROLL_DISABLER_CLASS", "remove-scroll");
	_defineProperty(UICommon$1, "FILLER", "_");
	_defineProperty(UICommon$1, "SCROLL_OPTIONS", {
	  top: 0,
	  behavior: "smooth"
	});
	_defineProperty(UICommon$1, "MOBILE_WIDTH_BREAK_POINT", 760);
	_defineProperty(UICommon$1, "MONEY_SIGN", "&#8381;");
	_defineProperty(UICommon$1, "TIME", {
	  SECONDS: ["секунду", "секунды", "секунд"],
	  MINUTES: ["минуту", "минуты", "минут"],
	  HOURS: ["час", "часа", "часов"]
	});

	var root$P = template(`<div><!></div>`);

	function Ui_block($$anchor, $$props) {
		push($$props, true);

		/**
		 * @typedef {Object} Props
		 * @property {string}   [id]
		 * @property {string}   [class]
		 * @property {string}   [role="button"]
		 * @property {number}   [tabIndex=0]
		 * @property {function} [onclick = () => true]
		 * @property {function} [onkeyup]
		 * @property {import('svelte').Snippet} [children]
		 */
		/** @type {Props} */
		let id = prop($$props, "id", 3, ""),
			classes = prop($$props, "class", 3, ""),
			role = prop($$props, "role", 3, "button"),
			tabIndex = prop($$props, "tabIndex", 3, 0),
			onclick = prop($$props, "onclick", 3, () => true);

		const onKeyUp = $$props.onkeyup ?? (onclick() ? UICommon$1.onlyOnEnter(onclick()) : undefined);
		var div = root$P();

		div.__click = function (...$$args) {
			onclick()?.apply(this, $$args);
		};

		div.__keyup = onKeyUp;

		var node = child(div);

		snippet(node, () => $$props.children ?? noop);
		reset(div);

		template_effect(() => {
			set_attribute(div, "id", id());
			set_class(div, `block ${classes() ?? ""}`);
			set_attribute(div, "role", role());
			set_attribute(div, "tabindex", tabIndex());
		});

		append($$anchor, div);
		pop();
	}

	delegate(["click", "keyup"]);

	function Ui_block_inner_vertical($$anchor, $$props) {
		push($$props, true);

		/**
		 * @typedef {Object} Props
		 * @property {string} [id]
		 * @property {string} [class]
		 * @property {string}   [role="button"]
		 * @property {number}   [tabIndex=0]
		 * @property {function} [onclick = () => true]
		 * @property {function} [onkeyup]
		 * @property {import('svelte').Snippet} [children]
		 */
		/** @type {Props} */
		let id = prop($$props, "id", 3, ""),
			classes = prop($$props, "class", 3, ""),
			role = prop($$props, "role", 3, "button"),
			tabIndex = prop($$props, "tabIndex", 3, 0),
			onclick = prop($$props, "onclick", 3, () => true);

		const DEFAULT_CLASSES_INNER = "block-inner-vertical";
		let classesInner = state(DEFAULT_CLASSES_INNER);

		user_effect(() => {
			set(classesInner, `block-inner-vertical ${classes()}`);
		});

		const onKeyUp = $$props.onkeyup ?? (onclick() ? UICommon$1.onlyOnEnter(onclick()) : undefined);

		Ui_block($$anchor, {
			get id() {
				return id();
			},
			get class() {
				return get$2(classesInner);
			},
			get onclick() {
				return onclick();
			},
			onkeyup: onKeyUp,
			get role() {
				return role();
			},
			get tabIndex() {
				return tabIndex();
			},
			children: ($$anchor, $$slotProps) => {
				var fragment_1 = comment();
				var node = first_child(fragment_1);

				snippet(node, () => $$props.children ?? noop);
				append($$anchor, fragment_1);
			},
			$$slots: { default: true }
		});

		pop();
	}

	var root$O = template(`<div><!></div>`);

	function Ui_box($$anchor, $$props) {
		push($$props, true);

		/**
		 * @typedef {Object} Props
		 * @property {string}   [id]
		 * @property {string}   [class]
		 * @property {string}   [role="button"]
		 * @property {number}   [tabIndex=0]
		 * @property {function} [onclick = () => true]
		 * @property {function} [onkeyup]
		 * @property {import('svelte').Snippet} [children]
		 */
		/** @type {Props} */
		let id = prop($$props, "id", 3, ""),
			classes = prop($$props, "class", 3, ""),
			role = prop($$props, "role", 3, "button"),
			tabIndex = prop($$props, "tabIndex", 3, 0),
			onclick = prop($$props, "onclick", 3, () => true);

		const onKeyUp = $$props.onkeyup ?? (onclick() ? UICommon$1.onlyOnEnter(onclick()) : undefined);
		var div = root$O();

		div.__click = function (...$$args) {
			onclick()?.apply(this, $$args);
		};

		div.__keyup = onKeyUp;

		var node = child(div);

		snippet(node, () => $$props.children ?? noop);
		reset(div);

		template_effect(() => {
			set_attribute(div, "id", id());
			set_class(div, `box ${classes() ?? ""} `);
			set_attribute(div, "role", role());
			set_attribute(div, "tabindex", tabIndex());
		});

		append($$anchor, div);
		pop();
	}

	delegate(["click", "keyup"]);

	var root$N = template(`<div><!></div>`);

	function Ui_content($$anchor, $$props) {
		push($$props, true);

		/**
		 * @typedef {Object} Props
		 * @property {string}   [id]
		 * @property {string}   [class]
		 * @property {string}   [role="button"]
		 * @property {number}   [tabIndex=0]
		 * @property {function} [onclick = () => true]
		 * @property {function} [onkeyup]
		 * @property {import('svelte').Snippet} [children]
		 */
		/** @type {Props} */
		let id = prop($$props, "id", 3, ""),
			classes = prop($$props, "class", 3, ""),
			role = prop($$props, "role", 3, "button"),
			tabIndex = prop($$props, "tabIndex", 3, 0),
			onclick = prop($$props, "onclick", 3, () => true);

		const onKeyUp = $$props.onkeyup ?? (onclick() ? UICommon$1.onlyOnEnter(onclick()) : undefined);
		var div = root$N();

		div.__click = function (...$$args) {
			onclick()?.apply(this, $$args);
		};

		div.__keyup = onKeyUp;

		var node = child(div);

		snippet(node, () => $$props.children ?? noop);
		reset(div);

		template_effect(() => {
			set_attribute(div, "id", id());
			set_class(div, `content ${classes() ?? ""}`);
			set_attribute(div, "role", role());
			set_attribute(div, "tabindex", tabIndex());
		});

		append($$anchor, div);
		pop();
	}

	delegate(["click", "keyup"]);

	var index$c = /*#__PURE__*/Object.freeze({
		__proto__: null,
		UIBlock: Ui_block,
		UIBlockInnerVertical: Ui_block_inner_vertical,
		UIBox: Ui_box,
		UIContent: Ui_content
	});

	/** @import { Readable, StartStopNotifier, Subscriber, Unsubscriber, Updater, Writable } from '../public.js' */
	/** @import { Stores, StoresValues, SubscribeInvalidateTuple } from '../private.js' */

	/**
	 * @type {Array<SubscribeInvalidateTuple<any> | any>}
	 */
	const subscriber_queue = [];

	/**
	 * Create a `Writable` store that allows both updating and reading by subscription.
	 *
	 * @template T
	 * @param {T} [value] initial value
	 * @param {StartStopNotifier<T>} [start]
	 * @returns {Writable<T>}
	 */
	function writable(value, start = noop) {
		/** @type {Unsubscriber | null} */
		let stop = null;

		/** @type {Set<SubscribeInvalidateTuple<T>>} */
		const subscribers = new Set();

		/**
		 * @param {T} new_value
		 * @returns {void}
		 */
		function set(new_value) {
			if (safe_not_equal(value, new_value)) {
				value = new_value;
				if (stop) {
					// store is ready
					const run_queue = !subscriber_queue.length;
					for (const subscriber of subscribers) {
						subscriber[1]();
						subscriber_queue.push(subscriber, value);
					}
					if (run_queue) {
						for (let i = 0; i < subscriber_queue.length; i += 2) {
							subscriber_queue[i][0](subscriber_queue[i + 1]);
						}
						subscriber_queue.length = 0;
					}
				}
			}
		}

		/**
		 * @param {Updater<T>} fn
		 * @returns {void}
		 */
		function update(fn) {
			set(fn(/** @type {T} */ (value)));
		}

		/**
		 * @param {Subscriber<T>} run
		 * @param {() => void} [invalidate]
		 * @returns {Unsubscriber}
		 */
		function subscribe(run, invalidate = noop) {
			/** @type {SubscribeInvalidateTuple<T>} */
			const subscriber = [run, invalidate];
			subscribers.add(subscriber);
			if (subscribers.size === 1) {
				stop = start(set, update) || noop;
			}
			run(/** @type {T} */ (value));
			return () => {
				subscribers.delete(subscriber);
				if (subscribers.size === 0 && stop) {
					stop();
					stop = null;
				}
			};
		}
		return { set, update, subscribe };
	}

	function initDict(target = {}) {
	  const handler = {
	    get: function (target, prop) {
	      if (!Object.hasOwn(target, prop)) {
	        return prop;
	      }
	      return Reflect.get(...arguments);
	    }
	  };
	  return new Proxy(target, handler);
	}
	function createLocale() {
	  const {
	    subscribe,
	    set,
	    update
	  } = writable(initDict());
	  return {
	    subscribe,
	    update,
	    set: function (val) {
	      set(initDict(val));
	    },
	    reset: function () {
	      return set(initDict());
	    }
	  };
	}
	const LOCALE = createLocale();

	function getDefaultExportFromCjs (x) {
		return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
	}

	var EventEmitter$2 = {exports: {}};

	/*!
	 * EventEmitter v5.2.9 - git.io/ee
	 * Unlicense - http://unlicense.org/
	 * Oliver Caldwell - https://oli.me.uk/
	 * @preserve
	 */
	var EventEmitter$1 = EventEmitter$2.exports;

	var hasRequiredEventEmitter;

	function requireEventEmitter () {
		if (hasRequiredEventEmitter) return EventEmitter$2.exports;
		hasRequiredEventEmitter = 1;
		(function (module) {
	(function (exports) {

			    /**
			     * Class for managing events.
			     * Can be extended to provide event functionality in other classes.
			     *
			     * @class EventEmitter Manages event registering and emitting.
			     */
			    function EventEmitter() {}

			    // Shortcuts to improve speed and size
			    var proto = EventEmitter.prototype;
			    var originalGlobalValue = exports.EventEmitter;

			    /**
			     * Finds the index of the listener for the event in its storage array.
			     *
			     * @param {Function[]} listeners Array of listeners to search through.
			     * @param {Function} listener Method to look for.
			     * @return {Number} Index of the specified listener, -1 if not found
			     * @api private
			     */
			    function indexOfListener(listeners, listener) {
			        var i = listeners.length;
			        while (i--) {
			            if (listeners[i].listener === listener) {
			                return i;
			            }
			        }

			        return -1;
			    }

			    /**
			     * Alias a method while keeping the context correct, to allow for overwriting of target method.
			     *
			     * @param {String} name The name of the target method.
			     * @return {Function} The aliased method
			     * @api private
			     */
			    function alias(name) {
			        return function aliasClosure() {
			            return this[name].apply(this, arguments);
			        };
			    }

			    /**
			     * Returns the listener array for the specified event.
			     * Will initialise the event object and listener arrays if required.
			     * Will return an object if you use a regex search. The object contains keys for each matched event. So /ba[rz]/ might return an object containing bar and baz. But only if you have either defined them with defineEvent or added some listeners to them.
			     * Each property in the object response is an array of listener functions.
			     *
			     * @param {String|RegExp} evt Name of the event to return the listeners from.
			     * @return {Function[]|Object} All listener functions for the event.
			     */
			    proto.getListeners = function getListeners(evt) {
			        var events = this._getEvents();
			        var response;
			        var key;

			        // Return a concatenated array of all matching events if
			        // the selector is a regular expression.
			        if (evt instanceof RegExp) {
			            response = {};
			            for (key in events) {
			                if (events.hasOwnProperty(key) && evt.test(key)) {
			                    response[key] = events[key];
			                }
			            }
			        }
			        else {
			            response = events[evt] || (events[evt] = []);
			        }

			        return response;
			    };

			    /**
			     * Takes a list of listener objects and flattens it into a list of listener functions.
			     *
			     * @param {Object[]} listeners Raw listener objects.
			     * @return {Function[]} Just the listener functions.
			     */
			    proto.flattenListeners = function flattenListeners(listeners) {
			        var flatListeners = [];
			        var i;

			        for (i = 0; i < listeners.length; i += 1) {
			            flatListeners.push(listeners[i].listener);
			        }

			        return flatListeners;
			    };

			    /**
			     * Fetches the requested listeners via getListeners but will always return the results inside an object. This is mainly for internal use but others may find it useful.
			     *
			     * @param {String|RegExp} evt Name of the event to return the listeners from.
			     * @return {Object} All listener functions for an event in an object.
			     */
			    proto.getListenersAsObject = function getListenersAsObject(evt) {
			        var listeners = this.getListeners(evt);
			        var response;

			        if (listeners instanceof Array) {
			            response = {};
			            response[evt] = listeners;
			        }

			        return response || listeners;
			    };

			    function isValidListener (listener) {
			        if (typeof listener === 'function' || listener instanceof RegExp) {
			            return true
			        } else if (listener && typeof listener === 'object') {
			            return isValidListener(listener.listener)
			        } else {
			            return false
			        }
			    }

			    /**
			     * Adds a listener function to the specified event.
			     * The listener will not be added if it is a duplicate.
			     * If the listener returns true then it will be removed after it is called.
			     * If you pass a regular expression as the event name then the listener will be added to all events that match it.
			     *
			     * @param {String|RegExp} evt Name of the event to attach the listener to.
			     * @param {Function} listener Method to be called when the event is emitted. If the function returns true then it will be removed after calling.
			     * @return {Object} Current instance of EventEmitter for chaining.
			     */
			    proto.addListener = function addListener(evt, listener) {
			        if (!isValidListener(listener)) {
			            throw new TypeError('listener must be a function');
			        }

			        var listeners = this.getListenersAsObject(evt);
			        var listenerIsWrapped = typeof listener === 'object';
			        var key;

			        for (key in listeners) {
			            if (listeners.hasOwnProperty(key) && indexOfListener(listeners[key], listener) === -1) {
			                listeners[key].push(listenerIsWrapped ? listener : {
			                    listener: listener,
			                    once: false
			                });
			            }
			        }

			        return this;
			    };

			    /**
			     * Alias of addListener
			     */
			    proto.on = alias('addListener');

			    /**
			     * Semi-alias of addListener. It will add a listener that will be
			     * automatically removed after its first execution.
			     *
			     * @param {String|RegExp} evt Name of the event to attach the listener to.
			     * @param {Function} listener Method to be called when the event is emitted. If the function returns true then it will be removed after calling.
			     * @return {Object} Current instance of EventEmitter for chaining.
			     */
			    proto.addOnceListener = function addOnceListener(evt, listener) {
			        return this.addListener(evt, {
			            listener: listener,
			            once: true
			        });
			    };

			    /**
			     * Alias of addOnceListener.
			     */
			    proto.once = alias('addOnceListener');

			    /**
			     * Defines an event name. This is required if you want to use a regex to add a listener to multiple events at once. If you don't do this then how do you expect it to know what event to add to? Should it just add to every possible match for a regex? No. That is scary and bad.
			     * You need to tell it what event names should be matched by a regex.
			     *
			     * @param {String} evt Name of the event to create.
			     * @return {Object} Current instance of EventEmitter for chaining.
			     */
			    proto.defineEvent = function defineEvent(evt) {
			        this.getListeners(evt);
			        return this;
			    };

			    /**
			     * Uses defineEvent to define multiple events.
			     *
			     * @param {String[]} evts An array of event names to define.
			     * @return {Object} Current instance of EventEmitter for chaining.
			     */
			    proto.defineEvents = function defineEvents(evts) {
			        for (var i = 0; i < evts.length; i += 1) {
			            this.defineEvent(evts[i]);
			        }
			        return this;
			    };

			    /**
			     * Removes a listener function from the specified event.
			     * When passed a regular expression as the event name, it will remove the listener from all events that match it.
			     *
			     * @param {String|RegExp} evt Name of the event to remove the listener from.
			     * @param {Function} listener Method to remove from the event.
			     * @return {Object} Current instance of EventEmitter for chaining.
			     */
			    proto.removeListener = function removeListener(evt, listener) {
			        var listeners = this.getListenersAsObject(evt);
			        var index;
			        var key;

			        for (key in listeners) {
			            if (listeners.hasOwnProperty(key)) {
			                index = indexOfListener(listeners[key], listener);

			                if (index !== -1) {
			                    listeners[key].splice(index, 1);
			                }
			            }
			        }

			        return this;
			    };

			    /**
			     * Alias of removeListener
			     */
			    proto.off = alias('removeListener');

			    /**
			     * Adds listeners in bulk using the manipulateListeners method.
			     * If you pass an object as the first argument you can add to multiple events at once. The object should contain key value pairs of events and listeners or listener arrays. You can also pass it an event name and an array of listeners to be added.
			     * You can also pass it a regular expression to add the array of listeners to all events that match it.
			     * Yeah, this function does quite a bit. That's probably a bad thing.
			     *
			     * @param {String|Object|RegExp} evt An event name if you will pass an array of listeners next. An object if you wish to add to multiple events at once.
			     * @param {Function[]} [listeners] An optional array of listener functions to add.
			     * @return {Object} Current instance of EventEmitter for chaining.
			     */
			    proto.addListeners = function addListeners(evt, listeners) {
			        // Pass through to manipulateListeners
			        return this.manipulateListeners(false, evt, listeners);
			    };

			    /**
			     * Removes listeners in bulk using the manipulateListeners method.
			     * If you pass an object as the first argument you can remove from multiple events at once. The object should contain key value pairs of events and listeners or listener arrays.
			     * You can also pass it an event name and an array of listeners to be removed.
			     * You can also pass it a regular expression to remove the listeners from all events that match it.
			     *
			     * @param {String|Object|RegExp} evt An event name if you will pass an array of listeners next. An object if you wish to remove from multiple events at once.
			     * @param {Function[]} [listeners] An optional array of listener functions to remove.
			     * @return {Object} Current instance of EventEmitter for chaining.
			     */
			    proto.removeListeners = function removeListeners(evt, listeners) {
			        // Pass through to manipulateListeners
			        return this.manipulateListeners(true, evt, listeners);
			    };

			    /**
			     * Edits listeners in bulk. The addListeners and removeListeners methods both use this to do their job. You should really use those instead, this is a little lower level.
			     * The first argument will determine if the listeners are removed (true) or added (false).
			     * If you pass an object as the second argument you can add/remove from multiple events at once. The object should contain key value pairs of events and listeners or listener arrays.
			     * You can also pass it an event name and an array of listeners to be added/removed.
			     * You can also pass it a regular expression to manipulate the listeners of all events that match it.
			     *
			     * @param {Boolean} remove True if you want to remove listeners, false if you want to add.
			     * @param {String|Object|RegExp} evt An event name if you will pass an array of listeners next. An object if you wish to add/remove from multiple events at once.
			     * @param {Function[]} [listeners] An optional array of listener functions to add/remove.
			     * @return {Object} Current instance of EventEmitter for chaining.
			     */
			    proto.manipulateListeners = function manipulateListeners(remove, evt, listeners) {
			        var i;
			        var value;
			        var single = remove ? this.removeListener : this.addListener;
			        var multiple = remove ? this.removeListeners : this.addListeners;

			        // If evt is an object then pass each of its properties to this method
			        if (typeof evt === 'object' && !(evt instanceof RegExp)) {
			            for (i in evt) {
			                if (evt.hasOwnProperty(i) && (value = evt[i])) {
			                    // Pass the single listener straight through to the singular method
			                    if (typeof value === 'function') {
			                        single.call(this, i, value);
			                    }
			                    else {
			                        // Otherwise pass back to the multiple function
			                        multiple.call(this, i, value);
			                    }
			                }
			            }
			        }
			        else {
			            // So evt must be a string
			            // And listeners must be an array of listeners
			            // Loop over it and pass each one to the multiple method
			            i = listeners.length;
			            while (i--) {
			                single.call(this, evt, listeners[i]);
			            }
			        }

			        return this;
			    };

			    /**
			     * Removes all listeners from a specified event.
			     * If you do not specify an event then all listeners will be removed.
			     * That means every event will be emptied.
			     * You can also pass a regex to remove all events that match it.
			     *
			     * @param {String|RegExp} [evt] Optional name of the event to remove all listeners for. Will remove from every event if not passed.
			     * @return {Object} Current instance of EventEmitter for chaining.
			     */
			    proto.removeEvent = function removeEvent(evt) {
			        var type = typeof evt;
			        var events = this._getEvents();
			        var key;

			        // Remove different things depending on the state of evt
			        if (type === 'string') {
			            // Remove all listeners for the specified event
			            delete events[evt];
			        }
			        else if (evt instanceof RegExp) {
			            // Remove all events matching the regex.
			            for (key in events) {
			                if (events.hasOwnProperty(key) && evt.test(key)) {
			                    delete events[key];
			                }
			            }
			        }
			        else {
			            // Remove all listeners in all events
			            delete this._events;
			        }

			        return this;
			    };

			    /**
			     * Alias of removeEvent.
			     *
			     * Added to mirror the node API.
			     */
			    proto.removeAllListeners = alias('removeEvent');

			    /**
			     * Emits an event of your choice.
			     * When emitted, every listener attached to that event will be executed.
			     * If you pass the optional argument array then those arguments will be passed to every listener upon execution.
			     * Because it uses `apply`, your array of arguments will be passed as if you wrote them out separately.
			     * So they will not arrive within the array on the other side, they will be separate.
			     * You can also pass a regular expression to emit to all events that match it.
			     *
			     * @param {String|RegExp} evt Name of the event to emit and execute listeners for.
			     * @param {Array} [args] Optional array of arguments to be passed to each listener.
			     * @return {Object} Current instance of EventEmitter for chaining.
			     */
			    proto.emitEvent = function emitEvent(evt, args) {
			        var listenersMap = this.getListenersAsObject(evt);
			        var listeners;
			        var listener;
			        var i;
			        var key;
			        var response;

			        for (key in listenersMap) {
			            if (listenersMap.hasOwnProperty(key)) {
			                listeners = listenersMap[key].slice(0);

			                for (i = 0; i < listeners.length; i++) {
			                    // If the listener returns true then it shall be removed from the event
			                    // The function is executed either with a basic call or an apply if there is an args array
			                    listener = listeners[i];

			                    if (listener.once === true) {
			                        this.removeListener(evt, listener.listener);
			                    }

			                    response = listener.listener.apply(this, args || []);

			                    if (response === this._getOnceReturnValue()) {
			                        this.removeListener(evt, listener.listener);
			                    }
			                }
			            }
			        }

			        return this;
			    };

			    /**
			     * Alias of emitEvent
			     */
			    proto.trigger = alias('emitEvent');

			    /**
			     * Subtly different from emitEvent in that it will pass its arguments on to the listeners, as opposed to taking a single array of arguments to pass on.
			     * As with emitEvent, you can pass a regex in place of the event name to emit to all events that match it.
			     *
			     * @param {String|RegExp} evt Name of the event to emit and execute listeners for.
			     * @param {...*} Optional additional arguments to be passed to each listener.
			     * @return {Object} Current instance of EventEmitter for chaining.
			     */
			    proto.emit = function emit(evt) {
			        var args = Array.prototype.slice.call(arguments, 1);
			        return this.emitEvent(evt, args);
			    };

			    /**
			     * Sets the current value to check against when executing listeners. If a
			     * listeners return value matches the one set here then it will be removed
			     * after execution. This value defaults to true.
			     *
			     * @param {*} value The new value to check for when executing listeners.
			     * @return {Object} Current instance of EventEmitter for chaining.
			     */
			    proto.setOnceReturnValue = function setOnceReturnValue(value) {
			        this._onceReturnValue = value;
			        return this;
			    };

			    /**
			     * Fetches the current value to check against when executing listeners. If
			     * the listeners return value matches this one then it should be removed
			     * automatically. It will return true by default.
			     *
			     * @return {*|Boolean} The current value to check for or the default, true.
			     * @api private
			     */
			    proto._getOnceReturnValue = function _getOnceReturnValue() {
			        if (this.hasOwnProperty('_onceReturnValue')) {
			            return this._onceReturnValue;
			        }
			        else {
			            return true;
			        }
			    };

			    /**
			     * Fetches the events object and creates one if required.
			     *
			     * @return {Object} The events storage object.
			     * @api private
			     */
			    proto._getEvents = function _getEvents() {
			        return this._events || (this._events = {});
			    };

			    /**
			     * Reverts the global {@link EventEmitter} to its previous value and returns a reference to this version.
			     *
			     * @return {Function} Non conflicting EventEmitter class.
			     */
			    EventEmitter.noConflict = function noConflict() {
			        exports.EventEmitter = originalGlobalValue;
			        return EventEmitter;
			    };

			    // Expose the class either via AMD, CommonJS or the global object
			    if (module.exports){
			        module.exports = EventEmitter;
			    }
			    else {
			        exports.EventEmitter = EventEmitter;
			    }
			}(typeof window !== 'undefined' ? window : EventEmitter$1 || {})); 
		} (EventEmitter$2));
		return EventEmitter$2.exports;
	}

	var EventEmitterExports = requireEventEmitter();
	var EventEmitter = /*@__PURE__*/getDefaultExportFromCjs(EventEmitterExports);

	/*
		:property.sub1.func().funcProp
		 = return funcProp of function result of sub1 property of property of object
		:{::helperVal}.sub
		 = return sub property of object property with name retrieved from helperVal property of helpers object
		:{::helperFunc()}.sub
		= return sub property of object property with name retrieved from helperVal function result of helpers object.
		if helpersFunx return 'car' then source path becomes :car.sub

	*/

	var src$1;
	var hasRequiredSrc$1;

	function requireSrc$1 () {
		if (hasRequiredSrc$1) return src$1;
		hasRequiredSrc$1 = 1;
		const SUB_PATH_START = "{",
		    SUB_PATH_END = "}",
		    PATH_SPLIT = ".",
		    PATH_START_OBJECT = ":",
		    PATH_START_HELPERS = "::",
		    FUNCTION_MARKER = "()",
		    MAX_DEEP = 10;

		/**
		 * Set of tools to use notPath property access notation
		 * : is for item
		 * :: is for helpers
		 * {} subpath
		 * . path splitter
		 * () function and should be executed with params (item, helper | undefined)
		 * sub-paths will be parsed and replaced by results in source path
		 */
		class notPath {
		    static get SUB_PATH_START() {
		        return SUB_PATH_START;
		    }
		    static get SUB_PATH_END() {
		        return SUB_PATH_END;
		    }
		    static get PATH_SPLIT() {
		        return PATH_SPLIT;
		    }
		    static get PATH_START_OBJECT() {
		        return PATH_START_OBJECT;
		    }
		    static get PATH_START_HELPERS() {
		        return PATH_START_HELPERS;
		    }
		    static get FUNCTION_MARKER() {
		        return FUNCTION_MARKER;
		    }
		    static get MAX_DEEP() {
		        return MAX_DEEP;
		    }

		    /*
				input ':{::helperVal}.sub'
				return ::helperVal
			*/

		    /**
		     * Returns first subpath in path
		     * if subpath not closed will return it anyway
		     * @param {string} path path in string notation
		     * @return {string|null} subpath or null if no sub path were found
		     */
		    static findNextSubPath(path) {
		        let subPath = "",
		            find = false;
		        for (let i = 0; i < path.length; i++) {
		            if (path[i] === SUB_PATH_START) {
		                find = true;
		                subPath = "";
		            } else {
		                if (path[i] === SUB_PATH_END && find) {
		                    return subPath;
		                } else {
		                    subPath += path[i];
		                }
		            }
		        }
		        return find ? subPath : null;
		    }

		    /**
		     * Replace sub-path in parent path by parsed version
		     * @param {string} path path to process
		     * @param {string} sub sub path to replace
		     * @param {string} parsed parsed sub path
		     * @return {string} parsed path
		     */

		    static replaceSubPath(path, sub, parsed) {
		        let subf = SUB_PATH_START + sub + SUB_PATH_END,
		            i = 0;
		        while (path.indexOf(subf) > -1 && i < MAX_DEEP) {
		            path = path.replace(subf, parsed);
		            i++;
		        }
		        return path;
		    }

		    /**
		     * Parses path while there any sub-paths
		     * @param {string} path raw unparsed path
		     * @param {object} item data
		     * @param {object} helpers helpers
		     * @return {string} parsed path
		     */
		    static parseSubs(path, item, helpers) {
		        let subPath = this.findNextSubPath(path),
		            subPathParsed,
		            i = 0;
		        while (subPath) {
		            subPathParsed = this.getValueByPath(
		                subPath.indexOf(PATH_START_HELPERS) > -1 ? helpers : item,
		                subPath,
		                item,
		                helpers
		            );
		            path = this.replaceSubPath(path, subPath, subPathParsed);
		            i++;
		            if (i > MAX_DEEP) {
		                break;
		            }
		            subPath = this.findNextSubPath(path);
		        }
		        return path;
		    }

		    /**
		     * Get property value
		     * @param {string} path path to property
		     * @param {object} item item object
		     * @param {object} [helpers] helpers object
		     */

		    static get(path, item, helpers = undefined) {
		        switch (path) {
		            case PATH_START_OBJECT:
		                return item;
		            case PATH_START_HELPERS:
		                return helpers;
		        }
		        path = this.parseSubs(path, item, helpers);
		        return this.getValueByPath(
		            path.indexOf(PATH_START_HELPERS) > -1 ? helpers : item,
		            path,
		            item,
		            helpers
		        );
		    }

		    /**
		     * Set property value
		     * @param {string}  path path to property
		     * @param {object}  item item object
		     * @param {object}  helpers         helpers object if 4 arguments or attrValue if only 3 provided
		     * @param {any}     [attrValue]     value we want to assign
		     */

		    static set(path, item, helpers, attrValue = undefined) {
		        if (arguments.length === 3) {
		            attrValue = helpers;
		            helpers = undefined;
		        }
		        let subPath = this.findNextSubPath(path),
		            subPathParsed,
		            i = 0;
		        while (subPath) {
		            subPathParsed = this.getValueByPath(
		                subPath.indexOf(PATH_START_HELPERS) > -1 ? helpers : item,
		                subPath,
		                item,
		                helpers
		            );
		            path = this.replaceSubPath(path, subPath, subPathParsed);
		            if (i > MAX_DEEP) {
		                break;
		            }
		            subPath = this.findNextSubPath(path);
		            i++;
		        }
		        this.setValueByPath(item, path, attrValue);
		        if (
		            item.isRecord &&
		            this.normilizePath(path).length > 1 &&
		            item.__isActive
		        ) {
		            item.trigger("change", item, path, attrValue);
		        }
		    }

		    /**
		     * Set target property to null
		     * @param {string} path path to property
		     * @param {object} item item object
		     * @param {object} helpers helpers object
		     */

		    static unset(path, item, helpers) {
		        this.set(path, item, helpers, null);
		    }

		    /**
		     * Parses step key, transforms it to end-form
		     * @param {string} step not parsed step key
		     * @param {object} item item object
		     * @param {object} helper helpers object
		     * @return {string|number} parsed step key
		     */

		    static parsePathStep(step, item, helper) {
		        let rStep = null;
		        if (step.indexOf(PATH_START_HELPERS) === 0 && helper) {
		            rStep = step.replace(PATH_START_HELPERS, "");
		            if (rStep.indexOf(FUNCTION_MARKER) === rStep.length - 2) {
		                rStep = rStep.replace(FUNCTION_MARKER, "");
		                if (Object.prototype.hasOwnProperty.call(helper, rStep)) {
		                    return helper[rStep](item, undefined);
		                }
		            } else {
		                return helper[rStep];
		            }
		        } else {
		            if (step.indexOf(PATH_START_OBJECT) === 0 && item) {
		                rStep = step.replace(PATH_START_OBJECT, "");
		                if (rStep.indexOf(FUNCTION_MARKER) === rStep.length - 2) {
		                    rStep = rStep.replace(FUNCTION_MARKER, "");
		                    if (Object.prototype.hasOwnProperty.call(item, rStep)) {
		                        return item[rStep](item, undefined);
		                    }
		                } else {
		                    return item[rStep];
		                }
		            }
		        }
		        return step;
		    }

		    //::fieldName.result
		    //{}
		    //{fieldName: 'targetRecordField'}
		    ////['targetRecordField', 'result']
		    /**
		     * Transforms path with sub paths to path without
		     * @param {string|array} path path to target property
		     * @param {object} item item object
		     * @param {object} helper helper object
		     * @return {array} parsed path
		     **/
		    static parsePath(path, item, helper) {
		        if (!Array.isArray(path)) {
		            path = path.split(PATH_SPLIT);
		        }
		        for (var i = 0; i < path.length; i++) {
		            path[i] = this.parsePathStep(path[i], item, helper);
		        }
		        return path;
		    }

		    /**
		     * Transforms path from string notation to array of keys
		     * @param {string|array} path  input path, if array does nothing
		     * @return {array} path in array notation
		     */

		    static normilizePath(path) {
		        if (Array.isArray(path)) {
		            return path;
		        } else {
		            while (path.indexOf(PATH_START_OBJECT) > -1) {
		                path = path.replace(PATH_START_OBJECT, "");
		            }
		            return path.split(PATH_SPLIT);
		        }
		    }

		    /*
				small = ["todo"],
				big = ["todo", "length"]
				return true;

			*/

		    /**
		     * Identifies if first path includes second, compared from start,
		     * no floating start position inside ['join', 'me'], ['me']
		     * will result in false
		     * @param {array} big where we will search
		     * @param {array} small what we will search
		     * @return {boolean} if we succeed
		     */

		    static ifFullSubPath(big, small) {
		        if (big.length < small.length) {
		            return false;
		        }
		        for (let t = 0; t < small.length; t++) {
		            if (small[t] !== big[t]) {
		                return false;
		            }
		        }
		        return true;
		    }

		    /**
		     * Getter through third object
		     * Path is parsed, no event triggering for notRecord
		     * @param {object} object object to be used as getter
		     * @param {string|array} attrPath path to property
		     * @param {object} item supporting data
		     * @param {helpers} object  supporting helpers
		     */

		    static getValueByPath(object, attrPath, item, helpers) {
		        attrPath = this.normilizePath(attrPath);
		        let attrName = attrPath.shift(),
		            isFunction = attrName.indexOf(FUNCTION_MARKER) > -1;
		        if (isFunction) {
		            attrName = attrName.replace(FUNCTION_MARKER, "");
		        }
		        if (
		            (typeof object === "object" || typeof object === "function") &&
		            typeof object !== "undefined" &&
		            object !== null &&
		            typeof object[attrName] !== "undefined" &&
		            object[attrName] !== null
		        ) {
		            let newObj = isFunction
		                ? object[attrName]({
		                      item,
		                      helpers,
		                  })
		                : object[attrName];
		            if (attrPath.length > 0) {
		                return this.getValueByPath(newObj, attrPath, item, helpers);
		            } else {
		                return newObj;
		            }
		        } else {
		            return undefined;
		        }
		    }

		    /**
		     * Setter through third object
		     * Path is parsed, no event triggering for notRecord
		     * @param {object} object object to be modified
		     * @param {string|array} attrPath path to property
		     * @param {any} attrValue  value to assign
		     */

		    static setValueByPath(object, attrPath, attrValue) {
		        attrPath = this.normilizePath(attrPath);
		        let attrName = attrPath.shift();
		        if (attrPath.length > 0) {
		            if (!Object.prototype.hasOwnProperty.call(object, attrName)) {
		                object[attrName] = {};
		            }
		            this.setValueByPath(object[attrName], attrPath, attrValue);
		        } else {
		            object[attrName] = attrValue;
		        }
		    }

		    /**
		     * Joins passed in strings with PATH_SPLIT
		     * @param {string} arguments path to be glued
		     * @return {string} composite path
		     */

		    static join() {
		        let args = Array.prototype.slice.call(arguments);
		        return args.join(PATH_SPLIT);
		    }
		}

		src$1 = notPath;
		return src$1;
	}

	var notPath$1;
	var hasRequiredNotPath;

	function requireNotPath () {
		if (hasRequiredNotPath) return notPath$1;
		hasRequiredNotPath = 1;
		notPath$1 = requireSrc$1();
		return notPath$1;
	}

	var notPathExports = requireNotPath();
	var notPath = /*@__PURE__*/getDefaultExportFromCjs(notPathExports);

	var _notCommon;

	/*
	https://github.com/TehShrike/is-mergeable-object

	Included for convinience only. All rights belongs to their authors and etc.
	start of my code marked.

	*/

	let isMergeableObject = function isMergeableObject(value) {
	  return isNonNullObject(value) && !isSpecial(value);
	};
	function isNonNullObject(value) {
	  return !!value && typeof value === "object";
	}
	function isSpecial(value) {
	  var stringValue = Object.prototype.toString.call(value);
	  return stringValue === "[object RegExp]" || stringValue === "[object Date]" || isReactElement(value);
	}

	// see https://github.com/facebook/react/blob/b5ac963fb791d1298e7f396236383bc955f916c1/src/isomorphic/classic/element/ReactElement.js#L21-L25
	var canUseSymbol = typeof Symbol === "function" && Symbol.for;
	var REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for("react.element") : 0xeac7;
	function isReactElement(value) {
	  return value.$$typeof === REACT_ELEMENT_TYPE;
	}

	/*
	https://github.com/KyleAMathews/deepmerge

	The MIT License (MIT)

	Copyright (c) 2012 Nicholas Fisher

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	function emptyTarget(val) {
	  return Array.isArray(val) ? [] : {};
	}
	function cloneUnlessOtherwiseSpecified(value, optionsArgument) {
	  const clone = !optionsArgument || optionsArgument.clone !== false;
	  return clone && isMergeableObject(value) ? deepmerge(emptyTarget(value), value, optionsArgument) : value;
	}
	function defaultArrayMerge(target, source, optionsArgument) {
	  return target.concat(source).map(function (element) {
	    return cloneUnlessOtherwiseSpecified(element, optionsArgument);
	  });
	}
	function mergeObject(target, source, optionsArgument) {
	  const destination = {};
	  if (isMergeableObject(target)) {
	    Object.keys(target).forEach(function (key) {
	      destination[key] = cloneUnlessOtherwiseSpecified(target[key], optionsArgument);
	    });
	  }
	  Object.keys(source).forEach(function (key) {
	    if (!isMergeableObject(source[key]) || !target[key]) {
	      destination[key] = cloneUnlessOtherwiseSpecified(source[key], optionsArgument);
	    } else {
	      destination[key] = deepmerge(target[key], source[key], optionsArgument);
	    }
	  });
	  return destination;
	}
	function deepmerge(target, source, optionsArgument) {
	  const sourceIsArray = Array.isArray(source);
	  const targetIsArray = Array.isArray(target);
	  const options = optionsArgument || {
	    arrayMerge: defaultArrayMerge
	  };
	  const sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;
	  if (!sourceAndTargetTypesMatch) {
	    return cloneUnlessOtherwiseSpecified(source, optionsArgument);
	  } else if (sourceIsArray) {
	    const arrayMerge = options.arrayMerge || defaultArrayMerge;
	    return arrayMerge(target, source, optionsArgument);
	  } else {
	    return mergeObject(target, source, optionsArgument);
	  }
	}
	deepmerge.all = function deepmergeAll(array, optionsArgument) {
	  if (!Array.isArray(array)) {
	    throw new Error("first argument should be an array");
	  }
	  return array.reduce(function (prev, next) {
	    return deepmerge(prev, next, optionsArgument);
	  }, {});
	};

	/**
	 *  Collection of common functions
	 *  @class
	 */
	let notCommon$1 = /*#__PURE__*/function () {
	  function notCommon() {
	    _classCallCheck(this, notCommon);
	  }
	  return _createClass(notCommon, null, [{
	    key: "isError",
	    value:
	    /**
	     *  @static {function} isError  function to perform object test, if it's an error object or not
	     * @param   {object}    e   object to test
	     */
	    function isError(e) {
	      return e instanceof Error ||
	      // @ts-ignore
	      Object.hasOwn(e, "status") && e.status === "error";
	    }
	  }, {
	    key: "mute",
	    value: function mute() {
	      notCommon.ENV_TYPE = "production";
	    }
	  }, {
	    key: "pad",
	    value: function pad(n) {
	      return n < 10 ? "0" + n : n;
	    }
	    /**
	     *  Returns today Date object without hours, minutes, seconds
	     *  @return {number}  current date with 00:00:00 in ms of unix time
	     */
	  }, {
	    key: "getTodayDate",
	    value: function getTodayDate() {
	      let t = new Date();
	      return new Date(t.getFullYear(), t.getMonth(), t.getDate()).getTime();
	    }

	    /**
	     *  Returns true if object has field of name
	     *   @param   {object}    obj    some object
	     *  @param  {string}    name  field name
	     *  @return {boolean}          if object contains field with name
	     **/
	  }, {
	    key: "objHas",
	    value: function objHas(obj, name) {
	      // @ts-ignore
	      return Object.hasOwn(obj, name);
	    }

	    /**
	     * Copies object to secure it from changes
	     * @param {object}   obj     original object
	     * @return {object}          copy of object
	     **/
	  }, {
	    key: "copyObj",
	    value: function copyObj(obj) {
	      return JSON.parse(JSON.stringify(obj));
	    }

	    /**
	     * Copies object to secure it from changes
	     * @param {object}   obj     original object
	     * @return {object}          copy of object
	     **/
	  }, {
	    key: "partCopyObj",
	    value: function partCopyObj(obj, list) {
	      let partObj = Object.keys(obj).reduce(function (prev, curr) {
	        if (list.includes(curr)) {
	          prev[curr] = obj[curr];
	        }
	        return prev;
	      }, {});
	      return JSON.parse(JSON.stringify(partObj));
	    }
	  }, {
	    key: "compareTwoArrays",
	    value: function compareTwoArrays(a, b) {
	      return a.length === b.length && a.every(function (element, index) {
	        return element === b[index];
	      });
	    }

	    /**
	     * Test argument type to be 'function'
	     * @param {any}  func    possible function
	     * @return {boolean}     if this is a function
	     **/
	  }, {
	    key: "isFunc",
	    value: function isFunc(func) {
	      return typeof func === "function";
	    }

	    /**
	     * Returns true if argument is Async function
	     * @param {function} func  to test
	     * @return {boolean}       if this function is constructed as AsyncFunction
	     **/
	  }, {
	    key: "isAsync",
	    value: function isAsync(func) {
	      return func.constructor.name === "AsyncFunction";
	    }

	    /**
	     *  Executes method of object in appropriate way inside Promise
	     * @param {object}   obj     original object
	     * @param {string}   name    method name to execute
	     * @param {Array}     params  array of params
	     * @return {Promise}          results of method execution
	     **/
	  }, {
	    key: "executeObjectFunction",
	    value: async function executeObjectFunction(obj, name, params) {
	      if (obj) {
	        // @ts-ignore
	        const proc = notPath.get(":" + name, obj);
	        if (notCommon.isFunc(proc)) {
	          if (notCommon.isAsync(proc)) {
	            return await proc(...params);
	          } else {
	            return proc(...params);
	          }
	        }
	      }
	    }

	    /**
	     *  Executes method of object in apropriate way inside Promise
	     * @param {Object}   from     original object
	     * @param {Object}   to    method name to execute
	     * @param {Array}     list  array of params
	     * @return {undefined}          results of method execution
	     **/
	  }, {
	    key: "mapBind",
	    value: function mapBind(from, to, list) {
	      list.forEach(function (item) {
	        if (typeof from[item] === "function") {
	          to[item] = from[item].bind(from);
	        }
	      });
	    }
	  }, {
	    key: "isClass",
	    value: function isClass(fn) {
	      return /^\s*class/.test(fn.toString());
	    }
	  }, {
	    key: "detectType",
	    value: function detectType(testie) {
	      if (typeof testie !== "function") {
	        return typeof testie;
	      } else {
	        if (notCommon.isClass(testie)) {
	          return "class";
	        } else {
	          return "function";
	        }
	      }
	    }

	    //Проверка является ли переменная массивом
	  }, {
	    key: "isArray",
	    value: function isArray(data) {
	      return typeof data == "object" && data instanceof Array;
	    }
	  }, {
	    key: "localIsoDate",
	    value: function localIsoDate(date) {
	      date = date || new Date();
	      let localIsoString = date.getFullYear() + "-" + notCommon.pad(date.getMonth() + 1) + "-" + notCommon.pad(date.getDate()) + "T" + notCommon.pad(date.getHours()) + ":" + notCommon.pad(date.getMinutes()) + ":" + notCommon.pad(date.getSeconds());
	      return localIsoString;
	    }
	  }, {
	    key: "getToday",
	    value: function getToday() {
	      let today = new Date();
	      let date = today.getFullYear() + "-" + notCommon.pad(today.getMonth() + 1) + "-" + notCommon.pad(today.getDate());
	      return date;
	    }
	  }, {
	    key: "backlogAdd",
	    value: function backlogAdd(msg, type = "log") {
	      if (notCommon.get("backlog") === true) {
	        notCommon.backlog.push({
	          msg,
	          type
	        });
	      }
	    }
	  }, {
	    key: "dumpBacklog",
	    value: function dumpBacklog() {
	      while (notCommon.backlog.length) {
	        let row = notCommon.backlog.shift();
	        window[notCommon.LOG][row.type](...row.msg);
	      }
	    }
	  }, {
	    key: "logMsg",
	    value: function logMsg() {
	      let now = notCommon.localIsoDate();
	      window[notCommon.LOG].log(`[${now}]: `, ...arguments);
	      notCommon.backlogAdd([`[${now}]: `, ...arguments], "log");
	    }
	  }, {
	    key: "log",
	    value: function log() {
	      notCommon.logMsg(...arguments);
	    }
	  }, {
	    key: "createLogger",
	    value: function createLogger(prefix) {
	      return {
	        log: notCommon.genLogMsg(prefix),
	        error: notCommon.genLogError(prefix),
	        debug: notCommon.genLogDebug(prefix),
	        report: notCommon.report
	      };
	    }

	    //Генерация метода вывода сообщений в консоль с указанием префикса.
	  }, {
	    key: "genLogMsg",
	    value: function genLogMsg(prefix) {
	      return function () {
	        //not arrow bc of arguments special var is not available in arrow functions
	        let now = notCommon.localIsoDate();
	        window[notCommon.LOG].log(`[${now}]: ${prefix}::`, ...arguments);
	        notCommon.backlogAdd([`[${now}]: ${prefix}::`, ...arguments], "log");
	      };
	    }

	    /**
	     * Определяет является ли окружение окружением разработки
	     * @returns  {boolean} true если это запущено в окружении разработки
	     **/
	  }, {
	    key: "isDev",
	    value: function isDev() {
	      return notCommon.ENV_TYPE === notCommon.DEV_ENV;
	    }
	  }, {
	    key: "debug",
	    value: function debug() {
	      if (notCommon.isDev()) {
	        return notCommon.logMsg(...arguments);
	      } else {
	        return notCommon.NOOP;
	      }
	    }
	  }, {
	    key: "genLogDebug",
	    value: function genLogDebug(prefix) {
	      if (notCommon.isDev()) {
	        return notCommon.genLogMsg(prefix);
	      } else {
	        return notCommon.NOOP;
	      }
	    }
	  }, {
	    key: "error",
	    value: function error() {
	      notCommon.logError(...arguments);
	    }

	    //Функция вывода сообщения об ошибке
	  }, {
	    key: "logError",
	    value: function logError() {
	      let now = notCommon.localIsoDate();
	      window[notCommon.LOG].error(`[${now}]: `, ...arguments);
	      notCommon.backlogAdd([`[${now}]: `, ...arguments], "error");
	    }
	  }, {
	    key: "genLogError",
	    value: function genLogError(prefix) {
	      return function () {
	        //do not change to arrow function, bc of arguments
	        let now = notCommon.localIsoDate();
	        window[notCommon.LOG].error(`[${now}]: ${prefix}::`, ...arguments);
	        notCommon.backlogAdd([`[${now}]: ${prefix}::`, ...arguments], "error");
	      };
	    }
	  }, {
	    key: "report",
	    value: function report(e) {
	      if (notCommon.getApp()) {
	        let reporter = notCommon.getApp().getService("nsErrorReporter");
	        if (reporter) {
	          reporter.report(e).catch(notCommon.error);
	        }
	      } else {
	        if (!notCommon.get("production")) {
	          notCommon.error(...arguments);
	        }
	      }
	    }
	  }, {
	    key: "trace",
	    value: function trace() {
	      if (!notCommon.get("production")) {
	        notCommon.trace(...arguments);
	      }
	    }
	  }, {
	    key: "trimBackslash",
	    value: function trimBackslash(str) {
	      if (str.indexOf("/") === 0) {
	        str = str.substring(1);
	      }
	      if (str[str.length - 1] === "/") {
	        str = str.substring(0, str.length - 1);
	      }
	      return str;
	    }

	    /**
	     *  Builds URL with structure like prefix/module/model/id/action
	     * If some part absent or set to false it will be excluded from result
	     *  @param {object} urlParts
	     *  @param {string} [urlParts.prefix='']
	     *  @param {string} [urlParts.module='']
	     *  @param {string} [urlParts.model='']
	     *  @param {string} [urlParts.id='']
	     *  @param {string} [urlParts.action='']
	     *  @return {string}  url path
	     */
	  }, {
	    key: "buildURL",
	    value: function buildURL({
	      prefix,
	      module,
	      model,
	      id,
	      action
	    } = {
	      prefix: "",
	      module: "",
	      model: "",
	      id: "",
	      action: ""
	    }) {
	      let url = ["/"];
	      if (prefix) {
	        url.push(encodeURIComponent(notCommon.trimBackslash(prefix)));
	      }
	      if (module) {
	        url.push(encodeURIComponent(notCommon.trimBackslash(module)));
	      }
	      if (model) {
	        url.push(encodeURIComponent(notCommon.trimBackslash(model)));
	      }
	      if (id) {
	        url.push(encodeURIComponent(notCommon.trimBackslash(id)));
	      }
	      if (action) {
	        url.push(encodeURIComponent(notCommon.trimBackslash(action)));
	      }
	      url = url.filter(function (el) {
	        return el !== "";
	      });
	      return url.join("/").replace(/\/\//g, "/");
	    }
	  }, {
	    key: "capitalizeFirstLetter",
	    value: function capitalizeFirstLetter(name) {
	      return name.charAt(0).toUpperCase() + name.slice(1);
	    }
	  }, {
	    key: "lowerFirstLetter",
	    value: function lowerFirstLetter(string) {
	      return string.charAt(0).toLowerCase() + string.slice(1);
	    }
	  }, {
	    key: "strLengthCap",
	    value: function strLengthCap(str, MAX_TITLE_LENGTH = 50, POST_FIX = "...") {
	      if (typeof str === "string" && str.length > MAX_TITLE_LENGTH) {
	        return str.substr(0, MAX_TITLE_LENGTH) + POST_FIX;
	      } else {
	        return str;
	      }
	    }
	  }, {
	    key: "escapeHtml",
	    value: function escapeHtml(unsafe) {
	      return unsafe.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#039;");
	    }
	  }, {
	    key: "startApp",
	    value: function startApp(starter) {
	      document.addEventListener("DOMContentLoaded", starter);
	    }
	  }, {
	    key: "getApp",
	    value: function getApp() {
	      return notCommon.get("app");
	    }
	  }, {
	    key: "extendAppConfig",
	    value: function extendAppConfig(conf, conf2) {
	      return notCommon.deepMerge(conf, conf2);
	    }
	  }, {
	    key: "absorbModule",
	    value: function absorbModule() {
	      let defaultConf,
	        //app options
	        mod,
	        //module options
	        targets = {}; //various collections
	      if (arguments.length == 1) {
	        targets = {
	          ...arguments[0]
	        };
	        if (Object.hasOwnProperty.call(arguments[0], "defaultConf")) {
	          defaultConf = arguments[0].defaultConf;
	          delete targets.defaultConf;
	        }
	        if (Object.hasOwnProperty.call(arguments[0], "mod")) {
	          mod = arguments[0].mod;
	          delete targets.mod;
	        }
	      } else {
	        notCommon.log("WARNING: absorbModule format obsoleted, use object {defaultConf, mod, services, uis, wsc, etc}");
	        defaultConf = arguments[0];
	        mod = arguments[1];
	        if (arguments.length > 2) {
	          targets.services = arguments[2];
	        }
	        if (arguments.length > 3) {
	          targets.uis = arguments[3];
	        }
	        if (arguments.length > 4) {
	          targets.wcs = arguments[4];
	        }
	      }
	      for (let prop in mod) {
	        //add manifest to other
	        if (prop === "manifest") {
	          defaultConf = notCommon.extendAppConfig(defaultConf, mod.manifest);
	          continue;
	        }
	        if (typeof notCommon.get(`absorb.${prop}`) === "function") {
	          // @ts-ignore
	          if (!Object.hasOwn(targets, prop)) {
	            targets[prop] = {};
	            notCommon.log(`WARNING: no accamulator object provided for '${prop}' collection`);
	          }
	          notCommon.get(`absorb.${prop}`)(targets[prop], mod[prop]);
	        } else if (prop.indexOf("nc") === 0) {
	          // @ts-ignore
	          if (!Object.hasOwn(defaultConf, "controllers")) {
	            defaultConf.controllers = {};
	          }
	          defaultConf.controllers[prop] = mod[prop];
	        } else {
	          //in case of some other stuff presented, isolating it in special var
	          // @ts-ignore
	          if (!Object.hasOwn(window, "notEnv")) {
	            // @ts-ignore
	            window.notEnv = {};
	          }
	          // @ts-ignore
	          window.notEnv[prop] = mod[prop];
	        }
	      }
	      return defaultConf;
	    }
	  }, {
	    key: "defineIfNotExists",
	    value: function defineIfNotExists(obj, key, defaultValue) {
	      // @ts-ignore
	      if (!Object.hasOwn(obj, key)) {
	        obj[key] = defaultValue;
	      }
	    }
	  }, {
	    key: "register",
	    value: function register(key, val) {
	      notCommon.registry[key] = val;
	    }
	  }, {
	    key: "get",
	    value: function get(key) {
	      // @ts-ignore
	      return Object.hasOwn(notCommon.registry, key) ? notCommon.registry[key] : null;
	    }

	    /**
	     * Moves item inside array from old_index to new_index
	     * @static
	     * @param {Array<any>} array
	     * @param {number} old_index
	     * @param {number} new_index
	     * @memberof notCommon
	     */
	  }, {
	    key: "moveItem",
	    value: function moveItem(array, old_index, new_index) {
	      const inRange = function (num) {
	        return num < array.length && num > -1;
	      };
	      if (inRange(new_index) && inRange(old_index)) {
	        array.splice(new_index, 0, array.splice(old_index, 1)[0]);
	      }
	    }
	  }, {
	    key: "stripProxy",
	    value: function stripProxy(obj) {
	      if (typeof obj !== "undefined" && obj !== null) {
	        if (obj.isProxy) {
	          if (Array.isArray(obj)) {
	            obj = Array.from(obj);
	          } else {
	            obj = Object.assign({}, obj);
	          }
	          for (let t in obj) {
	            // @ts-ignore
	            if (Object.hasOwn(obj, t)) {
	              obj[t] = notCommon.stripProxy(obj[t]);
	            }
	          }
	        }
	      }
	      return obj;
	    }
	  }, {
	    key: "pipe",
	    value: function pipe(data /* feed data */, funcs /* functions array */) {
	      let result;
	      for (let func of funcs) {
	        result = func(result || data);
	      }
	      return result;
	    }

	    /**
	     *
	     *
	     * @static
	     * @param {string} type
	     * @return {object}
	     * @memberof notCommon
	     */
	  }, {
	    key: "getAPI",
	    value: function getAPI(type) {
	      return notCommon.getManager()?.getAPI(type) ?? null;
	    }
	  }, {
	    key: "setManager",
	    value: function setManager(v) {
	      notCommon.MANAGER = v;
	    }

	    /**
	     *
	     *
	     * @static
	     * @return {object}
	     * @memberof notCommon
	     */
	  }, {
	    key: "getManager",
	    value: function getManager() {
	      return notCommon.MANAGER;
	    }
	  }, {
	    key: "getJSON",
	    value: function getJSON(url) {
	      return fetch(url).then(function (response) {
	        return response.json();
	      });
	    }
	  }, {
	    key: "wait",
	    value: function wait(sec) {
	      return new Promise(function (res) {
	        setTimeout(res, sec * 1000);
	      });
	    }
	  }, {
	    key: "registerWidgetEvents",
	    value: function registerWidgetEvents(events) {
	      if (notCommon.getApp()) {
	        Object.keys(events).forEach(function (eventName) {
	          notCommon.getApp().on(eventName, events[eventName]);
	        });
	      }
	    }
	  }, {
	    key: "navigate",
	    value: function navigate(url) {
	      notCommon.getApp() && notCommon.getApp().getWorking("router").navigate(url);
	    }
	  }, {
	    key: "select",
	    value: function select(variantsSet, value, def) {
	      if (variantsSet && typeof variantsSet == "object" && notCommon.objHas(variantsSet, value) && typeof variantsSet[value] !== "undefined" && variantsSet[value] !== null) {
	        return variantsSet[value];
	      } else {
	        return def;
	      }
	    }
	  }]);
	}();
	_notCommon = notCommon$1;
	/**
	 *  @static {Object} [MANAGER=null]  application manager, in some cases used to control initialization routine
	 */
	_defineProperty(notCommon$1, "MANAGER", null);
	/**
	 *  @static {string} [LOG="console"]  logger, window[LOG]
	 */
	_defineProperty(notCommon$1, "LOG", "console");
	/**
	 *  @static {function} deepMerge  function to perform deep merges of objects
	 */
	_defineProperty(notCommon$1, "deepMerge", deepmerge);
	_defineProperty(notCommon$1, "TZ_OFFSET", new Date().getTimezoneOffset() / 60 * -1);
	_defineProperty(notCommon$1, "DEV_ENV", "production");
	// @ts-ignore
	_defineProperty(notCommon$1, "ENV_TYPE", window.NOT_ENV_TYPE ?? _notCommon.DEV_ENV);
	_defineProperty(notCommon$1, "NOOP", function () {});
	_defineProperty(notCommon$1, "backlog", []);
	_defineProperty(notCommon$1, "registry", {});
	function absorbServices(target, src) {
	  if (target) {
	    for (let serv in src) {
	      // @ts-ignore
	      if (Object.hasOwn(target, serv)) {
	        notCommon$1.logError(`services property duplication ${serv}`);
	      }
	      target[serv] = src[serv];
	    }
	  }
	}
	function extendWSClient(wcs, wscName, wscOptions) {
	  // @ts-ignore
	  if (!Object.hasOwn(wcs, wscName)) {
	    wcs[wscName] = {
	      connection: {},
	      router: {
	        routes: {}
	      },
	      messenger: {}
	    };
	  }
	  let target = wcs[wscName];
	  // @ts-ignore
	  if (Object.hasOwn(wscOptions, "router")) {
	    // @ts-ignore
	    if (Object.hasOwn(wscOptions.router, "routes")) {
	      for (let routeType in wscOptions.router.routes) {
	        // @ts-ignore
	        if (!Object.hasOwn(target.router.routes, routeType)) {
	          target.router.routes[routeType] = {};
	        }
	        Object.assign(target.router.routes[routeType], {
	          ...wscOptions.router.routes[routeType]
	        });
	      }
	    }
	  }
	  // @ts-ignore
	  if (Object.hasOwn(wscOptions, "messenger")) {
	    Object.assign(target.messenger, {
	      ...wscOptions.messenger
	    });
	  }
	  // @ts-ignore
	  if (Object.hasOwn(wscOptions, "connection")) {
	    Object.assign(target.connection, {
	      ...wscOptions.connection
	    });
	  }
	  for (let t of ["name", "getToken", "logger", "identity", "credentials"]) {
	    // @ts-ignore
	    if (Object.hasOwn(wscOptions, t)) {
	      target[t] = wscOptions[t];
	    }
	  }
	}
	function absorbWSC(target, src) {
	  if (target) {
	    for (let wsClientName in src) {
	      extendWSClient(target, wsClientName, src[wsClientName]);
	    }
	  }
	}
	function absorbUIs(target, src) {
	  if (target) {
	    for (let ui in src) {
	      // @ts-ignore
	      if (Object.hasOwn(target, ui)) {
	        notCommon$1.logError(`uis property duplication ${ui}`);
	      }
	      target[ui] = src[ui];
	    }
	  }
	}
	function absorbFields(target, src) {
	  if (target) {
	    for (let ui in src) {
	      // @ts-ignore
	      if (Object.hasOwn(target, ui)) {
	        notCommon$1.logError(`fields property duplication ${ui}`);
	      }
	      target[ui] = src[ui];
	    }
	  }
	}
	notCommon$1.register("absorb.wsc", absorbWSC);
	notCommon$1.register("absorb.services", absorbServices);
	notCommon$1.register("absorb.uis", absorbUIs);
	notCommon$1.register("absorb.uis", absorbFields);

	/**
	 * strings localization and formating model
	 * @class
	 */
	let notLocale = /*#__PURE__*/function (_EventEmitter) {
	  function notLocale() {
	    var _this;
	    _classCallCheck(this, notLocale);
	    _this = _callSuper(this, notLocale);
	    _this.dict = {}; //dictionary of phrases
	    _this.helpers = {}; //additional helper functions and constants
	    let dict = _this.restoreFromStorage();
	    if (dict) {
	      _this.set(dict);
	    }
	    return _this;
	  }

	  /**
	   * String format should comply notPath standart.
	   * {path_to_access} - is
	   * : - is used to access to params
	   * :: - is used to access to helpers
	   * Welcome, {:where}! - will replace {:where} with content of params.where
	   * Welcome, {::where}! - will replace {:where} with content of this.helpers.where
	   * () - after path is to invoke function of target object
	   * Welcome, {::where()}! - will try to exec this.helpers.where(params, undefined)
	   * @param    {string}  str         localized string template with mark to include data
	   * @param    {object}  params      params to use in string
	   * @returns  {string}              localized version of string with
	   */
	  _inherits(notLocale, _EventEmitter);
	  return _createClass(notLocale, [{
	    key: "format",
	    value: function format(str, params) {
	      return notPath.parseSubs(str, params, this.helpers);
	    }

	    /**
	     * Return localized version of string with injected data from provided object
	     * may also use Locale.helpers as source of data
	     * @param {string}   phrase    name of string to localize
	     * @param {object}   params    object with data to inject in phrase template
	     * @return {string}            localized string with injected data
	     */
	  }, {
	    key: "say",
	    value: function say(phrase, params = false) {
	      try {
	        if (notCommon$1.objHas(this.dict, phrase)) {
	          let tmpl = this.dict[phrase],
	            result = "";
	          if (params) {
	            result = this.format(tmpl, params);
	          } else {
	            result = tmpl;
	          }
	          return result;
	        } else {
	          throw new Error(`Unknown locale phrase: ${phrase}`);
	        }
	      } catch (e) {
	        notCommon$1.debug(e);
	        return phrase;
	      }
	    }

	    /**
	     * Setting new dictionary. triggers event 'change'
	     * @param {object}     dict      vocabulary of phrases and templates
	     **/
	  }, {
	    key: "set",
	    value: function set(dict) {
	      LOCALE.set(dict);
	      this.saveToStorage(dict);
	      this.dict = Object.assign({}, {
	        ...dict
	      });
	      this.emit("change");
	    }
	  }, {
	    key: "saveToStorage",
	    value: function saveToStorage(dict) {
	      if (window.localStorage) {
	        try {
	          return window.localStorage.setItem("dictionary", JSON.stringify(dict));
	        } catch (e) {
	          notCommon$1.debug(e);
	          return false;
	        }
	      }
	      return false;
	    }
	  }, {
	    key: "restoreFromStorage",
	    value: function restoreFromStorage() {
	      if (window.localStorage) {
	        try {
	          let str = window.localStorage.getItem("dictionary");
	          if (str) {
	            let dict = JSON.parse(str);
	            return dict;
	          } else {
	            return false;
	          }
	        } catch (e) {
	          notCommon$1.debug(e);
	          return false;
	        }
	      }
	      return false;
	    }

	    /**
	     * Returns writable store of phrases
	     * @return {object}  writable store
	     */
	  }, {
	    key: "vocabulary",
	    value: function vocabulary() {
	      return LOCALE;
	    }
	  }]);
	}(EventEmitter);
	var notLocale$1 = new notLocale();

	const say = notLocale$1.say.bind(notLocale$1);

	var root_1$v = template(`<span role="button" tabindex="0"> </span>`);

	function Ui_tag($$anchor, $$props) {
		push($$props, true);

		const $$stores = setup_stores();
		const $LOCALE = () => store_get(LOCALE, "$LOCALE", $$stores);
		let sided = state(false);

		/**
		 * @typedef {Object} Props
		 * @property {string} [id] - if we want to address this tag
		 * @property {string} [title]
		 * @property {string} [color]
		 * @property {string} [size]
		 * @property {string} [padding]
		 * @property {boolean} [bold]
		 * @property {boolean} [right]
		 * @property {boolean} [left]
		 * @property {boolean} [top]
		 * @property {boolean} [bottom]
		 * @property {string} [class]
		 * @property {any} [events]
		 * @property {any} [register] - register event handlers
		 * @property {any} [onUpdate]
		 * @property {any} [action]
		 * @property {object} [vars]
		 */
		/** @type {Props} */
		let id = prop($$props, "id", 3, "tagId"),
			title = prop($$props, "title", 15, "tag"),
			color = prop($$props, "color", 3, "info"),
			size = prop($$props, "size", 3, "normal"),
			padding = prop($$props, "padding", 3, "normal"),
			bold = prop($$props, "bold", 3, false),
			right = prop($$props, "right", 3, false),
			left = prop($$props, "left", 3, false),
			top = prop($$props, "top", 3, false),
			bottom = prop($$props, "bottom", 3, false),
			classes = prop($$props, "class", 3, ""),
			events = prop($$props, "events", 31, () => proxy({})),
			register = prop($$props, "register", 19, () => notCommon$1.registerWidgetEvents.bind(notCommon$1)),
			onUpdate = prop($$props, "onUpdate", 3, (data) => {
				if (Object.hasOwn(data, "title")) {
					title(data.title);
				}
			}),
			action = prop($$props, "action", 3, () => {
				return true;
			}),
			vars = prop($$props, "vars", 19, () => ({}));

		function getStandartUpdateEventName() {
			return `tag-${id()}:update`;
		}

		let style = state("");

		onMount(() => {
			if (!Object.hasOwn(events(), getStandartUpdateEventName())) {
				events(events()[getStandartUpdateEventName()] = onUpdate(), true);
			}

			register()(events());
			set(sided, proxy(right() || left() || top() || bottom()));
		});

		user_effect(() => {
			set(style, proxy(Object.keys(snapshot(vars())).map((varName) => {
				return `${varName}: ${vars()[varName]};`;
			}).join("")));
		});

		var fragment = comment();
		var node = first_child(fragment);

		{
			var consequent = ($$anchor) => {
				var span = root_1$v();

				span.__keydown = function (...$$args) {
					(action() ? action() : undefined)?.apply(this, $$args);
				};

				span.__click = function (...$$args) {
					(action() ? action() : undefined)?.apply(this, $$args);
				};

				var text = child(span, true);

				reset(span);

				template_effect(() => {
					set_attribute(span, "id", `tag-${id() ?? ""}`);

					set_class(span, `
  tag
  ${(bold() ? 'has-text-weight-bold' : '') ?? ""}
  ${(padding() !== 'normal' ? `is-padded-${padding()}` : '') ?? ""}
  is-${size() ?? ""}
  is-${color() ?? ""}
  ${(get$2(sided) ? 'is-sided' : '') ?? ""}
  ${(right() ? 'is-sided-right' : '') ?? ""}
  ${(left() ? 'is-sided-left' : '') ?? ""}
  ${(top() ? 'is-sided-top' : '') ?? ""}
  ${(bottom() ? 'is-sided-bottom' : '') ?? ""}
  ${classes() ?? ""}`);

					set_attribute(span, "style", get$2(style));
					set_text(text, $LOCALE()[title()]);
				});

				append($$anchor, span);
			};

			if_block(node, ($$render) => {
				if (title()) $$render(consequent);
			});
		}

		append($$anchor, fragment);
		pop();
	}

	delegate(["keydown", "click"]);

	function Ui_boolean($$anchor, $$props) {
		/**
		 * @typedef {Object} Props
		 * @property {string} [LC_TRUE = "not-node:booleans_true"]
		 * @property {string} [LC_FALSE = "not-node:booleans_false"]
		 * @property {any} value
		 * @property {boolean} [inverted = false]
		 */
		/** @type {Props} */
		let LC_TRUE = prop($$props, "LC_TRUE", 3, "not-node:booleans_true"),
			LC_FALSE = prop($$props, "LC_FALSE", 3, "not-node:booleans_false"),
			inverted = prop($$props, "inverted", 3, false);

		const FALSE_VALUE = {
			title: LC_FALSE(),
			color: inverted() ? "success" : "danger"
		};

		const TRUE_VALUE = {
			title: LC_TRUE(),
			color: inverted() ? "danger" : "success"
		};

		//if inverted === true, inverts value
		let tagValue = derived(() => $$props.value ? TRUE_VALUE : FALSE_VALUE);

		Ui_tag($$anchor, spread_props(() => get$2(tagValue)));
	}

	var root$M = template(`<span class="label"> <!></span>`);

	function Ui_boolean_labeled($$anchor, $$props) {
		push($$props, true);

		const $$stores = setup_stores();
		const $LOCALE = () => store_get(LOCALE, "$LOCALE", $$stores);
		/**
		 * @typedef {Object} Props
		 * @property {any} value
		 * @property {any} label
		 * @property {boolean} [inverted]
		 */
		/** @type {Props} */
		let inverted = prop($$props, "inverted", 3, false);
		var span = root$M();
		var text = child(span);
		var node = sibling(text);

		Ui_boolean(node, {
			get value() {
				return $$props.value;
			},
			get inverted() {
				return inverted();
			}
		});

		reset(span);
		template_effect(() => set_text(text, `${$LOCALE()[$$props.label] ?? ""}: `));
		append($$anchor, span);
		pop();
	}

	function Ui_booleans($$anchor, $$props) {
		push($$props, true);

		/**
		 * @typedef {Object} Props
		 * @property {any} [values]
		 * @property {boolean} [inverted]
		 * @property {any} [componentConstructor]
		 */
		/** @type {Props} */
		let values = prop($$props, "values", 19, () => []),
			inverted = prop($$props, "inverted", 3, false),
			componentConstructor = prop($$props, "componentConstructor", 3, Ui_boolean);

		let _values = state(proxy([]));

		onMount(() => {
			if (typeof values() === "boolean") {
				set(_values, proxy([{ value: values() }]));
			} else if (Array.isArray(values())) {
				if (values().every((itm) => typeof itm === "boolean")) {
					set(_values, proxy(values().map((itm) => {
						return { value: itm };
					})));
				} else {
					set(_values, proxy([...values()]));
				}
			}
		});

		var fragment = comment();
		var node = first_child(fragment);

		{
			var consequent = ($$anchor) => {
				var fragment_1 = comment();
				var node_1 = first_child(fragment_1);

				each(node_1, 17, () => get$2(_values), index$d, ($$anchor, item) => {
					var fragment_2 = comment();
					const SvelteComponent = derived(componentConstructor);
					var node_2 = first_child(fragment_2);
					var inverted_1 = derived(() => inverted() || get$2(item).inverted);

					component(node_2, () => get$2(SvelteComponent), ($$anchor, $$component) => {
						$$component($$anchor, spread_props(() => get$2(item), {
							get inverted() {
								return get$2(inverted_1);
							}
						}));
					});

					append($$anchor, fragment_2);
				});

				append($$anchor, fragment_1);
			};

			if_block(node, ($$render) => {
				if (get$2(_values).length) $$render(consequent);
			});
		}

		append($$anchor, fragment);
		pop();
	}

	function toggleView(_, hidden) {
		hidden(!hidden());
	}

	async function copyContent(
		__1,
		value,
		tooltip,
		contentCopied,
		tooltipTarget,
		tooltipText,
		tooltipTTL
	) {
		try {
			await navigator.clipboard.writeText(value());

			if (tooltip()) {
				set(contentCopied, true);
				get$2(tooltipTarget).dataset.tooltip = tooltipText();

				setTimeout(
					() => {
						set(contentCopied, false);
						get$2(tooltipTarget).removeAttribute("data-tooltip");
					},
					tooltipTTL()
				);
			}
		} catch(err) {
			console.error("Failed to copy: ", err);
		}
	}

	var root_1$u = template(`<span role="button" tabindex="0"><i></i></span>`);
	var root_2$l = template(`<span class="icon is-small is-right is-clickable is-vertical-middle" role="button" tabindex="0"><i></i></span>`);
	var root$L = template(`<span> </span> <!> <!>`, 1);

	function Ui_censored($$anchor, $$props) {
		/**
		 * @typedef {Object} Props
		 * @property {boolean} [hidden]
		 * @property {boolean} [showable]
		 * @property {boolean} [copiable]
		 * @property {string} [copyIcon]
		 * @property {string} [showIcon]
		 * @property {string} [hideIcon]
		 * @property {number} [maxLength]
		 * @property {string} [shadowClass]
		 * @property {boolean} [tooltip]
		 * @property {number} [tooltipTTL]
		 * @property {string} [tooltipText]
		 * @property {string} [tooltipClass]
		 * @property {string} [value]
		 */
		/** @type {Props} */
		let hidden = prop($$props, "hidden", 15, true),
			showable = prop($$props, "showable", 3, true),
			copiable = prop($$props, "copiable", 3, true),
			copyIcon = prop($$props, "copyIcon", 3, "copy"),
			showIcon = prop($$props, "showIcon", 3, "eye"),
			hideIcon = prop($$props, "hideIcon", 3, "eye-slash"),
			maxLength = prop($$props, "maxLength", 3, 20),
			shadowClass = prop($$props, "shadowClass", 3, "has-background-primary-90"),
			tooltip = prop($$props, "tooltip", 3, true),
			tooltipTTL = prop($$props, "tooltipTTL", 3, 2000),
			tooltipText = prop($$props, "tooltipText", 3, "Скопировано в буфер"),
			tooltipClass = prop($$props, "tooltipClass", 3, "has-tooltip-info"),
			value = prop($$props, "value", 3, "");

		let contentCopied = state(false),
			tooltipActive = derived(() => tooltip() && get$2(contentCopied)),
			tooltipTarget = state(undefined);

		var fragment = root$L();
		var span = first_child(fragment);
		var text = child(span, true);

		reset(span);

		var node = sibling(span, 2);

		{
			var consequent = ($$anchor) => {
				var span_1 = root_1$u();

				span_1.__click = [
					copyContent,
					value,
					tooltip,
					contentCopied,
					tooltipTarget,
					tooltipText,
					tooltipTTL
				];

				span_1.__keydown = [
					copyContent,
					value,
					tooltip,
					contentCopied,
					tooltipTarget,
					tooltipText,
					tooltipTTL
				];

				var i = child(span_1);

				reset(span_1);
				bind_this(span_1, ($$value) => set(tooltipTarget, $$value), () => get$2(tooltipTarget));

				template_effect(() => {
					set_class(span_1, "icon is-small is-right is-clickable " + (get$2(tooltipActive) ? ` ${tooltipClass()} ` : "") + " is-vertical-middle");
					set_class(i, `fas fa-${copyIcon() ?? ""}`);
				});

				append($$anchor, span_1);
			};

			if_block(node, ($$render) => {
				if (copiable()) $$render(consequent);
			});
		}

		var node_1 = sibling(node, 2);

		{
			var consequent_1 = ($$anchor) => {
				var span_2 = root_2$l();

				span_2.__click = [toggleView, hidden];
				span_2.__keydown = [toggleView, hidden];

				var i_1 = child(span_2);

				reset(span_2);
				template_effect(() => set_class(i_1, `fas fa-${(hidden() ? showIcon() : hideIcon()) ?? ""}`));
				append($$anchor, span_2);
			};

			if_block(node_1, ($$render) => {
				if (showable()) $$render(consequent_1);
			});
		}

		template_effect(() => {
			set_class(span, (hidden() ? "is-censored " + shadowClass() : "") + " is-vertical-middle ");
			set_attribute(span, "style", `display:inline-block; width: ${maxLength()}rem; height: var(--bulma-size-medium); overflow-x:hidden;`);
			set_text(text, hidden() ? "" : value());
		});

		append($$anchor, fragment);
	}

	delegate(["click", "keydown"]);

	var root$K = template(`<span> </span>`);

	function Ui_indicator($$anchor, $$props) {
		push($$props, true);

		let sided = state(false);

		/**
		 * @typedef {Object} Props
		 * @property {string} [id] - if we want to address this indicator
		 * @property {string} [state]
		 * @property {string} [size]
		 * @property {any} [labels]
		 * @property {string} [class]
		 * @property {string} [padding]
		 * @property {boolean} [bold]
		 * @property {boolean} [right]
		 * @property {boolean} [left]
		 * @property {boolean} [top]
		 * @property {boolean} [bottom]
		 * @property {any} [events]
		 * @property {any} [register] - register event handlers
		 * @property {any} [onUpdate]
		 */
		/** @type {Props} */
		let id = prop($$props, "id", 3, "tagId"),
			currentState = prop($$props, "state", 15, "light"),
			size = prop($$props, "size", 3, "normal"),
			labels = prop($$props, "labels", 19, () => ({
				black: "black",
				dark: "dark",
				light: "light",
				white: "white",
				primary: "primary",
				link: "link",
				info: "info",
				success: "success",
				warning: "warning",
				danger: "danger"
			})),
			classes = prop($$props, "class", 3, "mx-1"),
			padding = prop($$props, "padding", 3, "normal"),
			bold = prop($$props, "bold", 3, false),
			right = prop($$props, "right", 3, false),
			left = prop($$props, "left", 3, false),
			top = prop($$props, "top", 3, false),
			bottom = prop($$props, "bottom", 3, false),
			events = prop($$props, "events", 31, () => proxy({})),
			register = prop($$props, "register", 19, () => notCommon$1.registerWidgetEvents.bind(notCommon$1)),
			onUpdate = prop($$props, "onUpdate", 3, (data) => {
				if (Object.hasOwn(data, "state")) {
					currentState(data.state);
				}
			});

		function getStandartUpdateEventName() {
			return `indicator-${id()}:update`;
		}

		onMount(() => {
			if (!Object.hasOwn(events(), getStandartUpdateEventName())) {
				events(events()[getStandartUpdateEventName()] = onUpdate(), true);
			}

			register()(events());
		});

		user_effect(() => {
			set(sided, proxy(right() || left() || top() || bottom()));
		});

		var span = root$K();
		var text = child(span, true);

		reset(span);

		template_effect(() => {
			set_class(span, `tag
is-${size() ?? ""}
${(bold() ? 'has-text-weight-bold' : '') ?? ""}
${(padding() !== 'normal' ? `is-padded-${padding()}` : '') ?? ""}
${(get$2(sided) ? 'is-sided' : '') ?? ""}
${(right() ? 'is-sided-right' : '') ?? ""}
${(left() ? 'is-sided-left' : '') ?? ""}
${(top() ? 'is-sided-top' : '') ?? ""}
${(bottom() ? 'is-sided-bottom' : '') ?? ""}
  is-${currentState() ?? ""} ${classes() ?? ""}
  `);

			set_text(text, labels()[currentState()]);
		});

		append($$anchor, span);
		pop();
	}

	var root_1$t = template(`<div><span class="title"> </span></div>`);

	function Ui_loader($$anchor, $$props) {
		push($$props, true);

		const $$stores = setup_stores();
		const $LOCALE = () => store_get(LOCALE, "$LOCALE", $$stores);

		//hidden - no loader
		//container - parent container of form
		/**
		 * @typedef {Object} Props
		 * @property {boolean} [loading] - state if form loading
		 * @property {string} [size] - page - whole page
		 * @property {string} [title]
		 */
		/** @type {Props} */
		let loading = prop($$props, "loading", 3, false),
			size = prop($$props, "size", 3, "container"),
			title = prop($$props, "title", 3, "Waiting...");

		var fragment = comment();
		var node = first_child(fragment);

		{
			var consequent = ($$anchor) => {
				var div = root_1$t();
				var span = child(div);
				var text = child(span, true);

				reset(span);
				reset(div);

				template_effect(() => {
					set_class(div, `${(size() === 'page' ? 'pageloader' : 'containerloader') ?? ""} ${(loading() ? 'is-active' : '') ?? ""}`);
					set_text(text, $LOCALE()[title()]);
				});

				append($$anchor, div);
			};

			if_block(node, ($$render) => {
				if (size() !== "hidden") $$render(consequent);
			});
		}

		append($$anchor, fragment);
		pop();
	}

	var root$J = template(`<option> </option>`);

	function Ui_select_option($$anchor, $$props) {
		push($$props, true);

		const $$stores = setup_stores();
		const $LOCALE = () => store_get(LOCALE, "$LOCALE", $$stores);
		var option = root$J();
		var option_value = {};
		var text = child(option, true);

		reset(option);

		template_effect(() => {
			if (option_value !== (option_value = $$props.value)) {
				option.value = null == (option.__value = $$props.value) ? "" : $$props.value;
			}

			set_selected(option, $$props.selected);
			set_text(text, $LOCALE()[$$props.title]);
		});

		append($$anchor, option);
		pop();
	}

	var root_3$g = template(`<span class="mr-2"> </span>`);
	var root_4$d = template(`<span class="mr-2"> </span>`);
	var root_5$9 = template(`<div><select><!><!></select></div>`);

	function Ui_select($$anchor, $$props) {
		push($$props, true);

		const $$stores = setup_stores();
		const $LOCALE = () => store_get(LOCALE, "$LOCALE", $$stores);

		/**
		 * @typedef {Object} Props
		 * @property {string} [value]
		 * @property {any}      [variants]
		 * @property {string} [placeholder]
		 * @property {string} [emptyValueTitle]
		 * @property {string} [fieldname]
		 * @property {boolean} [required]
		 * @property {boolean} [readonly]
		 * @property {boolean} [multiple]
		 * @property {number} [size]
		 * @property {boolean} [valid]
		 */
		/** @type {Props} */
		let value = prop($$props, "value", 15, ""),
			variants = prop($$props, "variants", 19, () => []),
			placeholder = prop($$props, "placeholder", 3, ""),
			emptyValueTitle = prop($$props, "emptyValueTitle", 3, ""),
			fieldname = prop($$props, "fieldname", 3, "select"),
			required = prop($$props, "required", 3, true),
			readonly = prop($$props, "readonly", 3, false),
			multiple = prop($$props, "multiple", 3, false),
			size = prop($$props, "size", 3, 8),
			valid = prop($$props, "valid", 3, true),
			classes = prop($$props, "class", 3, ""),
			onchange = prop($$props, "onchange", 3, () => true),
			others = rest_props($$props, [
				"$$slots",
				"$$events",
				"$$legacy",
				"value",
				"variants",
				"placeholder",
				"emptyValueTitle",
				"fieldname",
				"required",
				"readonly",
				"multiple",
				"size",
				"valid",
				"class",
				"onchange"
			]);

		let selectedVariants = state(proxy([]));

		function filterSelectedVariants(variant) {
			if (Array.isArray(value()) && multiple()) {
				return value().indexOf(variant.id) > -1;
			} else if (value()) {
				return value() == variant.id;
			} else {
				return false;
			}
		}

		let lastChange;

		function onBlur(ev) {
			let data = {
				field: fieldname(),
				value: ev.currentTarget.value
			};

			if (lastChange === data.value) {
				return true;
			} else {
				if (Array.isArray(data.value) && notCommon$1.compareTwoArrays(lastChange, data.value)) {
					return true;
				}
			}

			if (multiple()) {
				value(Array.from(ev.target.selectedOptions).map((el) => el.value));

				if (value().indexOf(UICommon$1.CLEAR_MACRO) > -1) {
					value([]);
				}

				data.value = value();
			} else {
				if (data.value === UICommon$1.CLEAR_MACRO) {
					value("");
				} else {
					value(data.value);
				}
			}

			onchange()(data);
			return true;
		}

		function onInput(ev) {
			let data = {
				field: fieldname(),
				value: ev.currentTarget.value
			};

			if (multiple()) {
				value(Array.from(ev.target.selectedOptions).map((el) => el.value));

				if (value().indexOf(UICommon$1.CLEAR_MACRO) > -1) {
					value([]);
				}

				data.value = value();
			} else {
				if (data.value === UICommon$1.CLEAR_MACRO) {
					value("");
				} else {
					value(data.value);
				}
			}

			lastChange = data.value;
			onchange()(data);
			return true;
		}

		let multipleClass = derived(() => multiple() ? " is-multiple " : "");

		user_effect(() => {
			value();
			set(selectedVariants, proxy(Array.isArray(variants()) ? variants().filter(filterSelectedVariants) : []));
		});

		let invalid = derived(() => !valid());
		var fragment = comment();
		var node = first_child(fragment);

		{
			var consequent_1 = ($$anchor) => {
				var fragment_1 = comment();
				var node_1 = first_child(fragment_1);

				{
					var consequent = ($$anchor) => {
						var fragment_2 = comment();
						var node_2 = first_child(fragment_2);

						each(node_2, 17, () => get$2(selectedVariants), index$d, ($$anchor, selectedVariant) => {
							var span = root_3$g();
							var text = child(span, true);

							reset(span);
							template_effect(() => set_text(text, $LOCALE()[get$2(selectedVariant).title]));
							append($$anchor, span);
						});

						append($$anchor, fragment_2);
					};

					var alternate = ($$anchor) => {
						var span_1 = root_4$d();
						var text_1 = child(span_1, true);

						reset(span_1);
						template_effect(() => set_text(text_1, $LOCALE()[emptyValueTitle()]));
						append($$anchor, span_1);
					};

					if_block(node_1, ($$render) => {
						if (value()) $$render(consequent); else $$render(alternate, false);
					});
				}

				append($$anchor, fragment_1);
			};

			var alternate_3 = ($$anchor) => {
				var div = root_5$9();
				var select = child(div);
				let attributes;

				init_select(select, () => attributes.value);

				var node_3 = child(select);

				{
					var consequent_3 = ($$anchor) => {
						var fragment_3 = comment();
						var node_4 = first_child(fragment_3);

						{
							var consequent_2 = ($$anchor) => {
								Ui_select_option($$anchor, {
									get value() {
										return UICommon$1.CLEAR_MACRO;
									},
									get title() {
										return placeholder();
									}
								});
							};

							var alternate_1 = ($$anchor) => {
								Ui_select_option($$anchor, {
									get value() {
										return UICommon$1.CLEAR_MACRO;
									},
									selected: "selected",
									get title() {
										return placeholder();
									}
								});
							};

							if_block(node_4, ($$render) => {
								if (value()) $$render(consequent_2); else $$render(alternate_1, false);
							});
						}

						append($$anchor, fragment_3);
					};

					if_block(node_3, ($$render) => {
						if (placeholder().length > 0) $$render(consequent_3);
					});
				}

				var node_5 = sibling(node_3);

				each(node_5, 17, variants, index$d, ($$anchor, variant) => {
					var fragment_6 = comment();
					var node_6 = first_child(fragment_6);

					{
						var consequent_4 = ($$anchor) => {
							var selected = derived(() => value() && value().indexOf(get$2(variant).id) > -1);

							Ui_select_option($$anchor, {
								get value() {
									return get$2(variant).id;
								},
								get selected() {
									return get$2(selected);
								},
								get title() {
									return get$2(variant).title;
								}
							});
						};

						var alternate_2 = ($$anchor) => {
							var selected_1 = derived(() => value() == get$2(variant).id);

							Ui_select_option($$anchor, {
								get value() {
									return get$2(variant).id;
								},
								get selected() {
									return get$2(selected_1);
								},
								get title() {
									return get$2(variant).title;
								}
							});
						};

						if_block(node_6, ($$render) => {
							if (multiple()) $$render(consequent_4); else $$render(alternate_2, false);
						});
					}

					append($$anchor, fragment_6);
				});

				reset(select);
				reset(div);

				template_effect(() => {
					set_class(div, `select ${classes() ?? ""} ${get$2(multipleClass) ?? ""}`);

					attributes = set_attributes(select, attributes, {
						id: `form-field-select-${fieldname() ?? ""}`,
						name: fieldname(),
						onblur: onBlur,
						oninput: onInput,
						readonly: readonly(),
						required: required(),
						multiple: multiple(),
						invalid: get$2(invalid),
						size: multiple() ? size() : false,
						...others
					});

					if ("value" in attributes) {
						select_option(select, attributes.value);
					}
				});

				append($$anchor, div);
			};

			if_block(node, ($$render) => {
				if (readonly()) $$render(consequent_1); else $$render(alternate_3, false);
			});
		}

		append($$anchor, fragment);
		pop();
	}

	function onClick$6(event, onclick, $$props, action) {
		event.stopPropagation();
		onclick() && onclick()({ event, value: $$props.value });
		return action() && action()(event, $$props.value);
	}

	var root_4$c = template(`<span class="icon"><i></i></span>`);
	var root_5$8 = template(`<span> </span>`);
	var root_6$a = template(`<span class="icon"><i></i></span>`);
	var root_3$f = template(`<!> <!> <!>`, 1);
	var root$I = template(`<button><!></button>`);

	function Ui_button($$anchor, $$props) {
		push($$props, true);

		const $$stores = setup_stores();
		const $LOCALE = () => store_get(LOCALE, "$LOCALE", $$stores);

		/**
		 * @typedef {Object} Props
		 * @property {string} [title]
		 * @property {boolean} [light]
		 * @property {boolean} [loading]
		 * @property {boolean} [raised]
		 * @property {boolean} [outlined]
		 * @property {boolean} [inverted]
		 * @property {boolean} [rounded]
		 * @property {boolean} [disabled]
		 * @property {string} [state]
		 * @property {string} [type]
		 * @property {string} [color]
		 * @property {string} [size]
		 * @property {string} [class]
		 * @property {boolean} [icon]
		 * @property {string} [iconSide]
		 * @property {function} [action]
		 * @property {function} [onclick]
		 * @property {any} value
		 * @property {import('svelte').Snippet} [children]
		 */
		/** @type {Props} */
		let title = prop($$props, "title", 3, ""),
			light = prop($$props, "light", 3, false),
			loading = prop($$props, "loading", 3, false),
			raised = prop($$props, "raised", 3, false),
			outlined = prop($$props, "outlined", 3, false),
			inverted = prop($$props, "inverted", 3, false),
			rounded = prop($$props, "rounded", 3, false),
			disabled = prop($$props, "disabled", 3, false),
			state = prop($$props, "state", 3, ""),
			type = prop($$props, "type", 3, ""),
			color = prop($$props, "color", 3, ""),
			size = prop($$props, "size", 3, ""),
			classes = prop($$props, "class", 3, ""),
			icon = prop($$props, "icon", 3, false),
			iconSide = prop($$props, "iconSide", 3, "right"),
			onclick = prop($$props, "onclick", 3, () => {
				return true;
			}),
			action = prop($$props, "action", 3, () => {
				return true;
			});

		var button = root$I();

		button.__click = [onClick$6, onclick, $$props, action];

		var node = child(button);

		{
			var consequent = ($$anchor) => {
				var fragment = comment();
				var node_1 = first_child(fragment);

				snippet(node_1, () => $$props.children);
				append($$anchor, fragment);
			};

			var alternate_1 = ($$anchor) => {
				var fragment_1 = comment();
				var node_2 = first_child(fragment_1);

				{
					var consequent_4 = ($$anchor) => {
						var fragment_2 = root_3$f();
						var node_3 = first_child(fragment_2);

						{
							var consequent_1 = ($$anchor) => {
								var span = root_4$c();
								var i = child(span);

								reset(span);
								template_effect(() => set_class(i, `fas fa-${icon() ?? ""} ${(size() ? `is-${size()}` : '') ?? ""}`));
								append($$anchor, span);
							};

							if_block(node_3, ($$render) => {
								if (iconSide() === "left") $$render(consequent_1);
							});
						}

						var node_4 = sibling(node_3, 2);

						{
							var consequent_2 = ($$anchor) => {
								var span_1 = root_5$8();
								var text = child(span_1, true);

								reset(span_1);
								template_effect(() => set_text(text, $LOCALE()[title()]));
								append($$anchor, span_1);
							};

							if_block(node_4, ($$render) => {
								if (title()) $$render(consequent_2);
							});
						}

						var node_5 = sibling(node_4, 2);

						{
							var consequent_3 = ($$anchor) => {
								var span_2 = root_6$a();
								var i_1 = child(span_2);

								reset(span_2);
								template_effect(() => set_class(i_1, `fas fa-${icon() ?? ""} ${(size() ? `is-${size()}` : '') ?? ""}`));
								append($$anchor, span_2);
							};

							if_block(node_5, ($$render) => {
								if (iconSide() === "right") $$render(consequent_3);
							});
						}

						append($$anchor, fragment_2);
					};

					var alternate = ($$anchor) => {
						var text_1 = text();

						template_effect(() => set_text(text_1, $LOCALE()[title()]));
						append($$anchor, text_1);
					};

					if_block(
						node_2,
						($$render) => {
							if (icon()) $$render(consequent_4); else $$render(alternate, false);
						},
						true
					);
				}

				append($$anchor, fragment_1);
			};

			if_block(node, ($$render) => {
				if ($$props.children) $$render(consequent); else $$render(alternate_1, false);
			});
		}

		reset(button);

		template_effect(() => {
			button.disabled = disabled();
			set_attribute(button, "type", type() ? type() : "");

			set_class(button, `
  button
  ${classes() ?? ""}
  ${(state() ? `is-${state()}` : '') ?? ""}
  ${(inverted() ? `is-inverted` : '') ?? ""}
  ${(outlined() ? `is-outlined` : '') ?? ""}
  ${(raised() ? `is-raised` : '') ?? ""}
  ${(rounded() ? `is-rounded` : '') ?? ""}
  ${(light() ? `is-light` : '') ?? ""}
  ${(loading() ? `is-loading` : '') ?? ""}
  ${(color() ? `is-${color()}` : '') ?? ""}
  ${(size() ? `is-${size()}` : '') ?? ""}
  `);
		});

		append($$anchor, button);
		pop();
	}

	delegate(["click"]);

	var root$H = template(`<div></div>`);

	function Ui_buttons($$anchor, $$props) {
		push($$props, true);

		/**
		 * @typedef {Object} Props
		 * @property {Array<object>} [values = []]
		 * @property {boolean} [centered = false]
		 * @property {boolean} [right = false]
		 * @property {string} [class = '']
		 * @property {import('svelte').Component} [buttonComponent = UIButton]
		 * @property {import('../events.types').UIEventInputChangeCallback} [action = ()=>true]
		 * @property {import('../events.types').UIEventCallback} [onclick = ()=>true]
		 */
		/** @type {Props} */
		let values = prop($$props, "values", 19, () => []),
			centered = prop($$props, "centered", 3, false),
			right = prop($$props, "right", 3, false),
			classes = prop($$props, "class", 3, ""),
			SvelteComponent = prop($$props, "buttonComponent", 3, Ui_button),
			action = prop($$props, "action", 3, () => {
				return true;
			}),
			onclick = prop($$props, "onclick", 3, () => {
				return true;
			});

		let _values = state(proxy([]));

		user_effect(() => {
			set(_values, proxy(values().map((itm) => {
				if (isNaN(itm.id)) {
					itm.id = Math.round(Math.random() * 100);
				}

				return itm;
			})));
		});

		var div = root$H();

		each(div, 21, () => get$2(_values), (item) => item.id, ($$anchor, item, $$index) => {
			var fragment = comment();
			var node = first_child(fragment);

			component(node, SvelteComponent, ($$anchor, $$component) => {
				$$component($$anchor, spread_props(
					{
						get action() {
							return action();
						},
						get onclick() {
							return onclick();
						}
					},
					() => get$2(item),
					{
						get value() {
							return get$2(item).value;
						},
						set value($$value) {
							(get$2(item).value = $$value);
						}
					}
				));
			});

			append($$anchor, fragment);
		});

		reset(div);
		template_effect(() => set_class(div, `buttons has-addons ${(centered() ? 'is-centered' : '') ?? ""} ${(right() ? 'is-right' : '') ?? ""} ${classes() ?? ""}`));
		append($$anchor, div);
		pop();
	}

	var root$G = template(`<div><div class="column"><!></div> <div class="column"><!></div> <div class="column"><!></div></div>`);

	function Ui_buttons_row($$anchor, $$props) {
		/**
		 * @typedef {Object} Props
		 * @property {string} [class]
		 * @property {any} [left]
		 * @property {any} [center]
		 * @property {any} [right]
		 */
		/** @type {Props} */
		let classes = prop($$props, "class", 3, ""),
			left = prop($$props, "left", 19, () => []),
			center = prop($$props, "center", 19, () => []),
			right = prop($$props, "right", 19, () => []);

		var div = root$G();
		var div_1 = child(div);
		var node = child(div_1);

		Ui_buttons(node, {
			get values() {
				return left();
			}
		});

		reset(div_1);

		var div_2 = sibling(div_1, 2);
		var node_1 = child(div_2);

		Ui_buttons(node_1, {
			get values() {
				return center();
			},
			centered: true
		});

		reset(div_2);

		var div_3 = sibling(div_2, 2);
		var node_2 = child(div_3);

		Ui_buttons(node_2, {
			get values() {
				return right();
			},
			right: true
		});

		reset(div_3);
		reset(div);
		template_effect(() => set_class(div, `columns ${classes() ?? ""}`));
		append($$anchor, div);
	}

	function Ui_button_switch($$anchor, $$props) {
		push($$props, true);

		/**
		 * @typedef {Object} Props
		 * @property {string} [title]
		 * @property {boolean} [light]
		 * @property {boolean} [loading]
		 * @property {boolean} [raised]
		 * @property {boolean} [outlined]
		 * @property {boolean} [inverted]
		 * @property {boolean} [rounded]
		 * @property {boolean} [disabled]
		 * @property {string} [state]
		 * @property {string} [type]
		 * @property {string} [color]
		 * @property {string} [size]
		 * @property {string} [class]
		 * @property {boolean} [icon]
		 * @property {string} [iconSide]
		 * @property {function} [uiOff]
		 * @property {function} [uiOn]
		 * @property {function} [action]
		 * @property {any} value
		 * @property {boolean} [selected]
		 */
		/** @type {Props} */
		let title = prop($$props, "title", 3, ""),
			light = prop($$props, "light", 3, false),
			loading = prop($$props, "loading", 3, false),
			raised = prop($$props, "raised", 3, false),
			outlined = prop($$props, "outlined", 3, false),
			inverted = prop($$props, "inverted", 3, false),
			rounded = prop($$props, "rounded", 3, false),
			disabled = prop($$props, "disabled", 3, false),
			activeState = prop($$props, "state", 3, ""),
			type = prop($$props, "type", 3, ""),
			color = prop($$props, "color", 3, ""),
			size = prop($$props, "size", 3, ""),
			classes = prop($$props, "class", 3, ""),
			icon = prop($$props, "icon", 3, false),
			iconSide = prop($$props, "iconSide", 3, "right"),
			uiOff = prop($$props, "uiOff", 3, () => {
				return { color: "" };
			}),
			uiOn = prop($$props, "uiOn", 3, () => {
				return { color: "success" };
			}),
			action = prop($$props, "action", 3, () => {
				return !selected();
			}),
			onclick = prop($$props, "onclick", 3, () => {}),
			onchange = prop($$props, "onchange", 3, () => {}),
			selected = prop($$props, "selected", 15, false);

		let childProps = state(proxy({
			title: title(),
			light: light(),
			loading: loading(),
			raised: raised(),
			outlined: outlined(),
			inverted: inverted(),
			rounded: rounded(),
			disabled: disabled(),
			type: type(),
			color: color(),
			size: size(),
			class: classes(),
			icon: icon(),
			iconSide: iconSide(),
			value: $$props.value
		}));

		let uiElement = state(undefined);

		onMount(() => {
			updateUI();
		});

		function onClick(event) {
			selected(action()(event, $$props.value, selected()));
			updateUI();

			onclick()({
				value: $$props.value,
				selected: selected()
			});

			onchange()({
				value: $$props.value,
				selected: selected()
			});
		}

		function updateUI() {
			if (get$2(uiElement)) {
				const propsChanges = selected() ? uiOn()($$props.value, selected()) : uiOff()($$props.value, selected());

				Object.keys(propsChanges).forEach((key) => {
					get$2(childProps)[key] = propsChanges[key];
				});

				set(childProps, proxy(get$2(childProps)));
			}
		}

		user_effect(() => {
			if (typeof selected() !== "undefined") updateUI();
		});

		bind_this(
			Ui_button($$anchor, spread_props(() => get$2(childProps), {
				get state() {
					return activeState();
				},
				onclick: onClick
			})),
			($$value) => set(uiElement, proxy($$value)),
			() => get$2(uiElement)
		);

		return pop({ updateUI });
	}

	var root$F = template(`<div></div>`);

	function Ui_buttons_switchers($$anchor, $$props) {
		push($$props, true);

		const uis = {};

		function updateItemUI(item) {
			uis[item.id].updateUI();
		}

		const defaultAction = (ev, value, selected) => {
			const countOfSelected = countSelected();

			if (countOfSelected === min() && selected) {
				return selected;
			}

			if (countOfSelected === max() && selected !== true) {
				return selected;
			}

			const indexOfCurrent = _values.findIndex((itm) => itm.value === value);
			let newSelected = selected;

			if (indexOfCurrent > -1) {
				newSelected = !newSelected;

				const cnt = countSelected() + (newSelected ? 1 : -1);

				if (min()) {
					if (cnt < min()) {
						selectUpToMin(cnt, indexOfCurrent);
					}
				}

				if (max()) {
					if (max() < cnt) {
						deselectDownToMin(cnt, indexOfCurrent);
					}
				}

				return newSelected;
			}

			return newSelected;
		};

		/**
		 * @typedef {Object} Props
		 * @property {array<object>} [values]
		 * @property {boolean} [centered]
		 * @property {boolean} [right]
		 * @property {string} [class]
		 * @property {import('svelte').Component}      [buttonComponent = UIButtonSwitch]
		 * @property {object}   [buttonProps = {}]
		 * @property {function} [action = (event, value, selected) => boolean]  fires on button switch click, returns new state of selected
		 * @property {function} [onclick]
		 * @property {function} [onchange]
		 * @property {number} [min = 0]
		 * @property {number} [max = 100]
		 */
		/** @type {Props} */
		let values = prop($$props, "values", 23, () => []),
			centered = prop($$props, "centered", 3, false),
			right = prop($$props, "right", 3, false),
			classes = prop($$props, "class", 3, ""),
			buttonComponent = prop($$props, "buttonComponent", 3, Ui_button_switch),
			action = prop($$props, "action", 3, defaultAction),
			onclick = prop($$props, "onclick", 3, () => true),
			onchange = prop($$props, "onchange", 3, () => true),
			min = prop($$props, "min", 3, 0),
			max = prop($$props, "max", 3, 100);
		let _values = proxy(values());

		function onChange() {
			values(snapshot(_values));

			const selected = values().filter((itm) => itm.selected);
			const selectedIds = selected.map((itm) => itm.id);
			const selectedCount = selectedIds.length;

			onchange() && onchange()({
				values: values(),
				selected,
				selectedIds,
				selectedCount
			});
		}

		function selectAll() {
			_values.forEach((itm, index) => {
				_values[index].selected = true;
				updateItemUI(itm);
			});

			onChange();
		}

		function deselectAll() {
			_values.forEach((itm, index) => {
				_values[index].selected = false;
				updateItemUI(itm);
			});

			onChange();
		}

		onMount(() => {
			const selectedCount = countSelected();

			if (min() && selectedCount < min()) {
				selectUpToMin(selectedCount, -1);
			}
		});

		function addToHistory(id) {
		}

		function countSelected() {
			const countOfSelected = _values.filter((btn) => {
				return btn.selected;
			}).length;

			return countOfSelected;
		}

		function toggleFirstSuited(toValue) {
			const index = _values.findIndex((itm) => !toValue == itm.selected);

			if (index > -1) {
				_values[index].selected = toValue;
				updateItemUI(_values[index]);
			}
		}

		function selectUpToMin(cnt, indexOfCurrent) {
			let delta = min() - cnt;

			if (!delta) {
				return;
			}

			for (let t in _values) {
				if (t === indexOfCurrent) {
					continue;
				}

				if (!_values[t].selected) {
					_values[t].selected = true;
					updateItemUI(_values[t]);
					delta--;

					if (!delta) {
						break;
					}
				}
			}

			onChange();
		}

		function deselectDownToMin(cnt, indexOfCurrent) {
			let delta = cnt - max();

			if (!delta) {
				return;
			}

			for (let t in _values) {
				if (t === indexOfCurrent) {
					continue;
				}

				if (_values[t].selected) {
					_values[t].selected = false;
					updateItemUI(_values[t]);
					delta--;

					if (!delta) {
						break;
					}
				}
			}

			onChange();
		}

		function updateUI() {
			Object.keys(uis).forEach((itemId) => {
				if (uis[itemId]) {
					uis[itemId].updateUI && uis[itemId].updateUI();
				}
			});
		}

		var div = root$F();

		each(div, 23, () => _values, (item) => item.id, ($$anchor, item, index) => {
			var fragment = comment();
			const SvelteComponent = derived(buttonComponent);
			var node = first_child(fragment);

			component(node, () => get$2(SvelteComponent), ($$anchor, $$component) => {
				bind_this(
					$$component($$anchor, spread_props(
						{
							get action() {
								return action();
							}
						},
						() => get$2(item),
						buttonProps,
						{
							get onclick() {
								return onclick();
							},
							onchange: onChange,
							get selected() {
								return _values[get$2(index)].selected;
							},
							set selected($$value) {
								_values[get$2(index)].selected = $$value;
							}
						}
					)),
					($$value, item) => uis[item.id] = $$value,
					(item) => uis?.[item.id],
					() => [get$2(item)]
				);
			});

			append($$anchor, fragment);
		});

		reset(div);
		template_effect(() => set_class(div, `buttons has-addons ${(centered() ? 'is-centered' : '') ?? ""} ${(right() ? 'is-right' : '') ?? ""} ${classes() ?? ""}`));
		append($$anchor, div);

		return pop({
			selectAll,
			deselectAll,
			addToHistory,
			countSelected,
			toggleFirstSuited,
			selectUpToMin,
			deselectDownToMin,
			updateUI
		});
	}

	var index$b = /*#__PURE__*/Object.freeze({
		__proto__: null,
		UIButton: Ui_button,
		UIButtonSwitch: Ui_button_switch,
		UIButtons: Ui_buttons,
		UIButtonsRow: Ui_buttons_row,
		UIButtonsSwitchers: Ui_buttons_switchers
	});

	const DEFAULT_STATUS_SUCCESS = "ok";
	const NAVIGATION_DELAY_SHORT = 500;
	const NAVIGATION_DELAY_NORMAL = 1500;
	const NAVIGATION_DELAY_LONG = 5000;
	const NAVIGATION_DELAYS = {
	  SHORT: NAVIGATION_DELAY_SHORT,
	  NORMAL: NAVIGATION_DELAY_NORMAL,
	  LONG: NAVIGATION_DELAY_LONG
	};
	const NAVIGATION_DELAY_DEFAULT = NAVIGATION_DELAY_NORMAL;

	var root_3$e = template(`<div class="field has-addons"><!></div> <div class="control"><!></div>`, 1);

	function Ui_select_from_model_on_demand_inline($$anchor, $$props) {
		push($$props, true);

		/**
		 * @typedef {Object} Props
		 * @property {boolean} [inputStarted]
		 * @property {any} value
		 * @property {any} [variants]
		 * @property {string} [placeholder]
		 * @property {string} [fieldname]
		 * @property {string} [modelName]
		 * @property {string} [actionName]
		 * @property {any} [actionFilter]
		 * @property {any} [actionSorter]
		 * @property {any} [actionPager]
		 * @property {any} [actionSearch]
		 * @property {string} [optionId]
		 * @property {string} [optionTitle]
		 * @property {boolean} [icon]
		 * @property {boolean} [required]
		 * @property {boolean} [readonly]
		 * @property {boolean} [multiple]
		 * @property {number} [size]
		 * @property {boolean} [valid]
		 * @property {boolean} [validated]
		 * @property {boolean} [errors]
		 * @property {boolean} [formErrors]
		 * @property {boolean} [formLevelError]
		 */
		/** @type {Props} */
		let variants = prop($$props, "variants", 31, () => proxy([])),
			placeholder = prop($$props, "placeholder", 3, "empty select item"),
			fieldname = prop($$props, "fieldname", 3, "selectFromModel"),
			modelName = prop($$props, "modelName", 3, ""),
			actionName = prop($$props, "actionName", 3, ""),
			actionFilter = prop($$props, "actionFilter", 19, () => ({})),
			actionSorter = prop($$props, "actionSorter", 19, () => ({})),
			actionPager = prop($$props, "actionPager", 19, () => ({})),
			actionSearch = prop($$props, "actionSearch", 3, undefined),
			optionId = prop($$props, "optionId", 3, ":_id"),
			optionTitle = prop($$props, "optionTitle", 3, ":title"),
			required = prop($$props, "required", 3, true),
			readonly = prop($$props, "readonly", 3, false),
			multiple = prop($$props, "multiple", 3, false),
			size = prop($$props, "size", 3, 8),
			valid = prop($$props, "valid", 3, true),
			onreject = prop($$props, "onreject", 3, () => false),
			onresolve = prop($$props, "onresolve", 3, () => true),
			onerror = prop($$props, "onerror", 3, () => true);

		function argumentsSetProvided() {
			return modelName() && actionName() && actionFilter();
		}

		let loaded = false;
		let disabled = derived(() => !loaded);
		let state$1 = state("hidden");
		let resultsList = [];

		onMount(async () => {
			if (argumentsSetProvided()) {
				const notApp = notCommon$1.getApp();
				const Model = notApp.getModel(modelName()).setFilter(actionFilter()).setSorter(actionSorter()).setPager(actionPager()).setSearch(actionSearch());
				const response = await Model[`$` + actionName()]();

				if (response.status === DEFAULT_STATUS_SUCCESS) {
					resultsList = response.result;

					variants(resultsList.map((item) => {
						return {
							id: notPath.get(optionId(), item),
							title: notPath.get(optionTitle(), item)
						};
					}));
				} else {
					onerror()(response.errors || [response.message]);
				}
			}
		});

		let resolvedValue;

		function onModelChanged({ value: selectedValue }) {
			resolvedValue = resultsList.find((item) => notPath.get(optionId(), item) === selectedValue);
		}

		const ACTIONS = {
			add: {
				color: "primary",
				icon: "plus",
				action() {
					set(state$1, "show");
				}
			},
			resolve: {
				icon: "check",
				color: "primary",
				action() {
					set(state$1, "hidden");
					onresolve()(resolvedValue);
				}
			},
			reject: {
				icon: "close",
				color: "danger",
				action() {
					set(state$1, "hidden");
					onreject()();
				}
			}
		};

		var fragment = comment();
		var node = first_child(fragment);

		{
			var consequent = ($$anchor) => {
				Ui_button($$anchor, spread_props(() => ACTIONS.add));
			};

			var alternate = ($$anchor) => {
				var fragment_2 = comment();
				var node_1 = first_child(fragment_2);

				{
					var consequent_1 = ($$anchor) => {
						var fragment_3 = root_3$e();
						var div = first_child(fragment_3);
						var node_2 = child(div);

						Ui_select(node_2, {
							get value() {
								return $$props.value;
							},
							get variants() {
								return variants();
							},
							get placeholder() {
								return placeholder();
							},
							get fieldname() {
								return fieldname();
							},
							get required() {
								return required();
							},
							get readonly() {
								return readonly();
							},
							get disabled() {
								return get$2(disabled);
							},
							get multiple() {
								return multiple();
							},
							get size() {
								return size();
							},
							get valid() {
								return valid();
							},
							onchange: onModelChanged
						});

						reset(div);

						var div_1 = sibling(div, 2);
						var node_3 = child(div_1);
						var values = derived(() => [ACTIONS.resolve, ACTIONS.reject]);

						Ui_buttons(node_3, {
							get values() {
								return get$2(values);
							}
						});

						reset(div_1);
						append($$anchor, fragment_3);
					};

					if_block(
						node_1,
						($$render) => {
							if (get$2(state$1) == "show") $$render(consequent_1);
						},
						true
					);
				}

				append($$anchor, fragment_2);
			};

			if_block(node, ($$render) => {
				if (get$2(state$1) === "hidden") $$render(consequent); else $$render(alternate, false);
			});
		}

		append($$anchor, fragment);
		pop();
	}

	var root$E = template(`<div class="control"><!></div>`);

	function Ui_select_from_model_with_search_modal($$anchor, $$props) {
		push($$props, true);

		/**
		 * @typedef {Object} Props
		 * @property {any} value
		 * @property {boolean} [inputStarted]
		 * @property {boolean} [icon]
		 * @property {string} [fieldname]
		 * @property {boolean} [readonly]
		 * @property {string} [serviceName] - Set this, as ns[ModelName], should be registered in notApp
		 * @property {string} [serviceOpenSelectorMethod] - Set this
		 * @property {string} [serviceLoadDataMethod] - Set this
		 * @property {any} [modelData]
		 * @property {boolean} [loading]
		 * @property {any} [selectedModelTitleFormatter]
		 * @property {string} [loadingLabel]
		 * @property {string} [isEmptyLabel]
		 */
		/** @type {Props} */
		let value = prop($$props, "value", 15),
			icon = prop($$props, "icon", 3, false),
			fieldname = prop($$props, "fieldname", 3, ""),
			readonly = prop($$props, "readonly", 3, false),
			serviceName = prop($$props, "serviceName", 3, ""),
			serviceOpenSelectorMethod = prop($$props, "serviceOpenSelectorMethod", 3, "openSelector"),
			serviceLoadDataMethod = prop($$props, "serviceLoadDataMethod", 3, "loadData"),
			modelData = prop($$props, "modelData", 15, null),
			loading = prop($$props, "loading", 15, false),
			selectedModelTitleFormatter = prop($$props, "selectedModelTitleFormatter", 3, (data) => `${data._id}`),
			loadingLabel = prop($$props, "loadingLabel", 3, "not-node:loading_label"),
			isEmptyLabel = prop($$props, "isEmptyLabel", 3, "not-node:field_value_is_empty_placeholder"),
			onchange = prop($$props, "onchange", 3, () => true);

		function getService() {
			if (!serviceName()) throw new Error("serviceName is not set");
			return notCommon$1.getApp().getService(serviceName());
		}

		function openModelSearchAndSelect() {
			if (!serviceOpenSelectorMethod()) {
				throw new Error("serviceOpenSelectorMethod is not set");
			}

			const service = getService();

			service[serviceOpenSelectorMethod()]().then((results) => {
				value(results._id);
				modelData(results);
				return value();
			}).then((value) => {
				onchange()({ field: fieldname(), value });
			}).catch((e) => {
				notCommon$1.report(e);
			});
		}

		function resetSelectedModel() {
			value(undefined);
			modelData(null);
			onchange()({ field: fieldname(), value: value() });
		}

		async function loadModelData() {
			try {
				if (value()) {
					loading(true);
					modelData(await getService()[serviceLoadDataMethod()](value()));
				}
			} catch(e) {
				notCommon$1.report(e);
			} finally {
				loading(false);
			}
		}

		onMount(() => {
			loadModelData();
		});

		const AVAILABLE_BUTTONS = [
			{
				id: 1,
				action: openModelSearchAndSelect,
				icon: icon(),
				color: "warning"
			},
			{
				id: 2,
				action: resetSelectedModel,
				icon: "times",
				color: "danger"
			}
		];

		function getModelButton() {
			if (loading()) {
				return {
					disabled: true,
					loading: loading(),
					title: loadingLabel()
				};
			} else {
				if (modelData()) {
					return {
						disabled: readonly(),
						action: openModelSearchAndSelect,
						title: selectedModelTitleFormatter()(modelData())
					};
				} else {
					return { disabled: true, title: isEmptyLabel() };
				}
			}
		}

		let VISIBLE_BUTTONS = state(proxy([]));

		run(() => {
			if (value()) {
				set(VISIBLE_BUTTONS, proxy([
					getModelButton(),
					...readonly() ? [] : AVAILABLE_BUTTONS
				]));
			} else {
				set(VISIBLE_BUTTONS, proxy([
					getModelButton(),
					...readonly() ? [] : [AVAILABLE_BUTTONS[0]]
				]));
			}
		});

		var div = root$E();
		var node = child(div);

		Ui_buttons(node, {
			get values() {
				return get$2(VISIBLE_BUTTONS);
			},
			classes: "is-no-flex-wrap"
		});

		reset(div);
		append($$anchor, div);
		pop();
	}

	var root$D = template(`<progress> </progress>`);

	function Ui_progress($$anchor, $$props) {
		/**
		 * @typedef {Object} Props
		 * @property {any} value
		 * @property {number} [max]
		 * @property {string} [color]
		 * @property {string} [size]
		 * @property {string} [class]
		 */
		/** @type {Props} */
		let max = prop($$props, "max", 3, 100),
			color = prop($$props, "color", 3, ""),
			size = prop($$props, "size", 3, ""),
			classes = prop($$props, "class", 3, "");

		var progress = root$D();
		var text = child(progress);

		reset(progress);

		template_effect(() => {
			set_class(progress, `
  progress
  ${classes() ?? ""}
  ${(color() ? `is-${color()}` : '') ?? ""}
  ${(size() ? `is-${size()}` : '') ?? ""}`);

			set_value(progress, $$props.value);
			set_attribute(progress, "max", max());
			set_text(text, `${$$props.value ?? ""}%`);
		});

		append($$anchor, progress);
	}

	function Ui_show_one_from_list($$anchor, $$props) {
		push($$props, true);

		const defaultFilter = (value) => value[idFieldName()] === $$props.id;

		/**
		 * @typedef {Object} Props
		 * @property {any} [values]
		 * @property {any} id
		 * @property {any} UIComponent
		 * @property {any} UIPlaceholder
		 * @property {any} active
		 * @property {string} [idFieldName]
		 * @property {any} [filter]
		 */
		/** @type {Props} */
		let values = prop($$props, "values", 19, () => []),
			active = prop($$props, "active", 15),
			idFieldName = prop($$props, "idFieldName", 3, "_id"),
			filter = prop($$props, "filter", 3, defaultFilter);

		user_effect(() => {
			active(Array.isArray(values()) && values().length && typeof $$props.id !== "undefined" ? values().find(filter() || defaultFilter) : undefined);
		});

		var fragment = comment();
		var node = first_child(fragment);

		{
			var consequent = ($$anchor) => {
				var fragment_1 = comment();
				var node_1 = first_child(fragment_1);

				component(node_1, () => $$props.UIComponent, ($$anchor, $$component) => {
					$$component($$anchor, spread_props(active));
				});

				append($$anchor, fragment_1);
			};

			var alternate = ($$anchor) => {
				var fragment_2 = comment();
				var node_2 = first_child(fragment_2);

				{
					var consequent_1 = ($$anchor) => {
						var fragment_3 = comment();
						var node_3 = first_child(fragment_3);

						component(node_3, () => $$props.UIPlaceholder, ($$anchor, $$component) => {
							$$component($$anchor, {});
						});

						append($$anchor, fragment_3);
					};

					if_block(
						node_2,
						($$render) => {
							if ($$props.UIPlaceholder) $$render(consequent_1);
						},
						true
					);
				}

				append($$anchor, fragment_2);
			};

			if_block(node, ($$render) => {
				if (active()) $$render(consequent); else $$render(alternate, false);
			});
		}

		append($$anchor, fragment);
		pop();
	}

	var root$C = template(`<div><!> <!> <!></div>`);

	function Ui_tag_value($$anchor, $$props) {
		push($$props, true);

		/**
		 * @typedef {Object} Props
		 * @property {string} [id] - if we want to address this tag
		 * @property {any} title
		 * @property {any} value
		 * @property {any} [actions]
		 * @property {string} [class]
		 * @property {any} [actionsGroupContructor]
		 * @property {any} [actionsGroupProps]
		 * @property {boolean} [readonly]
		 */
		/** @type {Props} */
		let id = prop($$props, "id", 3, "taggedValueId"),
			actions = prop($$props, "actions", 19, () => []),
			classes = prop($$props, "class", 3, ""),
			actionsGroupContructor = prop($$props, "actionsGroupContructor", 3, Ui_buttons),
			actionsGroupProps = prop($$props, "actionsGroupProps", 19, () => ({})),
			readonly = prop($$props, "readonly", 3, false);

		var div = root$C();
		var node = child(div);

		{
			var consequent = ($$anchor) => {
				Ui_tag($$anchor, spread_props(() => $$props.title));
			};

			if_block(node, ($$render) => {
				if ($$props.title) $$render(consequent);
			});
		}

		var node_1 = sibling(node, 2);

		{
			var consequent_1 = ($$anchor) => {
				Ui_tag($$anchor, spread_props(() => $$props.value));
			};

			if_block(node_1, ($$render) => {
				if ($$props.value) $$render(consequent_1);
			});
		}

		var node_2 = sibling(node_1, 2);

		{
			var consequent_2 = ($$anchor) => {
				var fragment_2 = comment();
				const SvelteComponent = derived(actionsGroupContructor);
				var node_3 = first_child(fragment_2);

				component(node_3, () => get$2(SvelteComponent), ($$anchor, $$component) => {
					$$component($$anchor, spread_props(
						{
							get values() {
								return actions();
							}
						},
						actionsGroupProps
					));
				});

				append($$anchor, fragment_2);
			};

			if_block(node_2, ($$render) => {
				if (!readonly() && actions() && actions().length) $$render(consequent_2);
			});
		}

		reset(div);

		template_effect(() => {
			set_class(div, `tags has-addons ${classes() ?? ""}`);
			set_attribute(div, "id", id());
		});

		append($$anchor, div);
		pop();
	}

	var root$B = template(`<!> <!>`, 1);

	function Ui_title($$anchor, $$props) {
		push($$props, true);

		const $$stores = setup_stores();
		const $LOCALE = () => store_get(LOCALE, "$LOCALE", $$stores);

		/**
		 * @typedef {Object} Props
		 * @property {any} [id]
		 * @property {string} [title]
		 * @property {any} subtitle
		 * @property {number} [size]
		 * @property {any} subsize
		 * @property {boolean} [spaced]
		 * @property {string} [align]
		 */
		/** @type {Props} */
		let id = prop($$props, "id", 19, () => `title-${Math.random()}`),
			title = prop($$props, "title", 3, ""),
			size = prop($$props, "size", 3, 1),
			spaced = prop($$props, "spaced", 3, false),
			align = prop($$props, "align", 3, "left");

		const scrollToTop = (options = UICommon$1.SCROLL_OPTIONS) => {
			setTimeout(
				() => {
					document.getElementById(id()).scrollIntoView(options);
				},
				100
			);
		};

		let size2 = derived(() => $$props.subsize ? $$props.subsize : parseInt(size()) < 6 ? parseInt(size()) + 1 : size());
		let spacedStyle = derived(() => spaced() ? "is-spaced" : "");
		let resultTitle = derived(() => `<h${size()} id="${id()}" style="text-align: ${align()};" class="title ${get$2(spacedStyle)} is-${size()}">${$LOCALE()[title()]}</h${size()}>`);
		let resultSubtitle = derived(() => `<h${get$2(size2)} id="${id()}" style="text-align: ${align()};" class="subtitle is-${get$2(size2)}">${$LOCALE()[$$props.subtitle]}</h${get$2(size2)}>`);
		var fragment = root$B();
		var node = first_child(fragment);

		{
			var consequent = ($$anchor) => {
				var fragment_1 = comment();
				var node_1 = first_child(fragment_1);

				html(node_1, () => get$2(resultTitle));
				append($$anchor, fragment_1);
			};

			if_block(node, ($$render) => {
				if (title()) $$render(consequent);
			});
		}

		var node_2 = sibling(node, 2);

		{
			var consequent_1 = ($$anchor) => {
				var fragment_2 = comment();
				var node_3 = first_child(fragment_2);

				html(node_3, () => get$2(resultSubtitle));
				append($$anchor, fragment_2);
			};

			if_block(node_2, ($$render) => {
				if ($$props.subtitle) $$render(consequent_1);
			});
		}

		append($$anchor, fragment);
		return pop({ scrollToTop });
	}

	var root_3$d = template(`<span> </span>`);
	var root_1$s = template(`<p><!></p>`);

	function Ui_errors_list($$anchor, $$props) {
		push($$props, true);

		const $$stores = setup_stores();
		const $LOCALE = () => store_get(LOCALE, "$LOCALE", $$stores);

		/**
		 * @typedef {Object} Props
		 * @property {array<string>}  [errors = []]
		 * @property {boolean} [show = false]
		 * @property {string} [class = '']
		 * @property {string} [id = 'errors-list']
		 */
		/** @type {Props} */
		let errors = prop($$props, "errors", 19, () => []),
			show = prop($$props, "show", 3, false),
			classes = prop($$props, "class", 3, ""),
			id = prop($$props, "id", 3, "errors-list");

		var fragment = comment();
		var node = first_child(fragment);

		{
			var consequent_1 = ($$anchor) => {
				var p = root_1$s();
				var node_1 = child(p);

				{
					var consequent = ($$anchor) => {
						var fragment_1 = comment();
						var node_2 = first_child(fragment_1);

						each(node_2, 17, errors, index$d, ($$anchor, error) => {
							var span = root_3$d();
							var text = child(span, true);

							reset(span);
							template_effect(() => set_text(text, $LOCALE()[get$2(error)]));
							append($$anchor, span);
						});

						append($$anchor, fragment_1);
					};

					var alternate = ($$anchor) => {
						var text_1 = text(" ");

						append($$anchor, text_1);
					};

					if_block(node_1, ($$render) => {
						if (show()) $$render(consequent); else $$render(alternate, false);
					});
				}

				reset(p);

				template_effect(() => {
					set_class(p, `help ${classes() ?? ""}`);
					set_attribute(p, "id", id());
				});

				append($$anchor, p);
			};

			if_block(node, ($$render) => {
				if (Array.isArray(errors()) && errors().length) $$render(consequent_1);
			});
		}

		append($$anchor, fragment);
		pop();
	}

	var root$A = template(`<article class="media"><figure class="media-left"><p class="image is-32x32"><img></p></figure> <div class="media-content"><div class="content"><p><strong> </strong> <small>@</small> <strong> </strong></p></div></div></article>`);

	function Ui_user_card($$anchor, $$props) {
		push($$props, true);

		/**
		 * @typedef {Object} Props
		 * @property {string} [id]
		 * @property {string} [image]
		 * @property {string} [username]
		 * @property {string} [role]
		 * @property {any} [events]
		 * @property {any} [register] - register event handlers
		 * @property {any} [onUpdate]
		 */
		/** @type {Props} */
		let id = prop($$props, "id", 3, "userCard"),
			image = prop($$props, "image", 3, "https://bulma.io/images/placeholders/32x32.png"),
			username = prop($$props, "username", 15, "John Doe"),
			role = prop($$props, "role", 15, "admin"),
			events = prop($$props, "events", 31, () => proxy({})),
			register = prop($$props, "register", 19, () => notCommon$1.registerWidgetEvents),
			onUpdate = prop($$props, "onUpdate", 3, (data) => {
				if (Object.hasOwn(data, "username")) {
					username(data.username);
				}

				if (Object.hasOwn(data, "role")) {
					role(data.role);
				}
			});

		function getCompId() {
			return `usercard-${id()}`;
		}

		function getStandartUpdateEventName() {
			let compId = getCompId();

			return `${compId}:update`;
		}

		onMount(() => {
			if (!Object.hasOwn(events(), getStandartUpdateEventName())) {
				events(events()[getStandartUpdateEventName()] = onUpdate(), true);
			}

			register()(events());
		});

		var article = root$A();

		template_effect(() => set_attribute(article, "id", getCompId()));

		var figure = child(article);
		var p = child(figure);
		var img = child(p);

		reset(p);
		reset(figure);

		var div = sibling(figure, 2);
		var div_1 = child(div);
		var p_1 = child(div_1);
		var strong = child(p_1);
		var text = child(strong, true);

		reset(strong);

		var strong_1 = sibling(strong, 4);
		var text_1 = child(strong_1, true);

		reset(strong_1);
		reset(p_1);
		reset(div_1);
		reset(div);
		reset(article);

		template_effect(() => {
			set_attribute(img, "src", image());
			set_attribute(img, "alt", username());
			set_text(text, username());
			set_text(text_1, role());
		});

		append($$anchor, article);
		pop();
	}

	var root_1$r = template(`<p> </p>`);
	var root_2$k = template(`<input>`);

	function Ui_textfield($$anchor, $$props) {
		push($$props, true);

		const $$stores = setup_stores();
		const $LOCALE = () => store_get(LOCALE, "$LOCALE", $$stores);

		/** @type {import('./type').UIInputProps} */
		let value = prop($$props, "value", 15, ""),
			placeholder = prop($$props, "placeholder", 3, ""),
			fieldname = prop($$props, "fieldname", 3, "textfield"),
			required = prop($$props, "required", 3, true),
			disabled = prop($$props, "disabled", 3, false),
			readonly = prop($$props, "readonly", 3, false),
			valid = prop($$props, "valid", 3, true),
			classes = prop($$props, "class", 3, ""),
			onchange = prop($$props, "onchange", 3, () => true),
			others = rest_props($$props, [
				"$$slots",
				"$$events",
				"$$legacy",
				"value",
				"placeholder",
				"fieldname",
				"required",
				"disabled",
				"readonly",
				"valid",
				"class",
				"onchange"
			]);

		let invalid = derived(() => !valid());
		const oninput = UICommon$1.onInput(fieldname(), onchange());
		var fragment = comment();
		var node = first_child(fragment);

		{
			var consequent = ($$anchor) => {
				var p = root_1$r();
				var text = child(p, true);

				reset(p);
				template_effect(() => set_text(text, value()));
				append($$anchor, p);
			};

			var alternate = ($$anchor) => {
				var input = root_2$k();

				remove_input_defaults(input);

				let attributes;

				template_effect(() => attributes = set_attributes(input, attributes, {
					id: `form-field-textfield-${fieldname() ?? ""}`,
					class: `input ${classes() ?? ""}`,
					type: "text",
					name: fieldname(),
					invalid: get$2(invalid),
					disabled: disabled(),
					required: required(),
					readonly: readonly(),
					placeholder: $LOCALE()[placeholder()],
					autocomplete: fieldname(),
					onchange: oninput,
					oninput,
					"aria-controls": `input-field-helper-${fieldname() ?? ""}`,
					"aria-describedby": `input-field-helper-${fieldname() ?? ""}`,
					...others
				}));

				bind_value(input, value);
				append($$anchor, input);
			};

			if_block(node, ($$render) => {
				if (readonly()) $$render(consequent); else $$render(alternate, false);
			});
		}

		append($$anchor, fragment);
		pop();
	}

	var root$z = template(`<div class="columns"><div class="column"><div class="field"><!></div></div></div>`);

	function Ui_simple_search_input($$anchor, $$props) {
		push($$props, true);

		const $$stores = setup_stores();
		const $LOCALE = () => store_get(LOCALE, "$LOCALE", $$stores);
		const dispatch = createEventDispatcher();

		/**
		 * @typedef {Object} Props
		 * @property {any} [placeholder]
		 * @property {string} [term]
		 */
		/** @type {Props} */
		let placeholder = prop($$props, "placeholder", 19, () => $LOCALE()["not-node:field_search_placeholder"]),
			term = prop($$props, "term", 15, "");

		function onChange({ detail }) {
			dispatch("termChange", detail);
		}

		var div = root$z();
		var div_1 = child(div);
		var div_2 = child(div_1);
		var node = child(div_2);

		Ui_textfield(node, {
			get placeholder() {
				return placeholder();
			},
			fieldname: "searchTermInput",
			icon: "magnifying-glass",
			get value() {
				return term();
			},
			set value($$value) {
				term($$value);
			},
			$$events: { change: onChange }
		});

		reset(div_2);
		reset(div_1);
		reset(div);
		append($$anchor, div);
		pop();
	}

	var index$a = /*#__PURE__*/Object.freeze({
		__proto__: null,
		UIBoolean: Ui_boolean,
		UIBooleanLabeled: Ui_boolean_labeled,
		UIBooleans: Ui_booleans,
		UICensored: Ui_censored,
		UIErrorsList: Ui_errors_list,
		UIIndicator: Ui_indicator,
		UILoader: Ui_loader,
		UIProgress: Ui_progress,
		UISelectFromModelOnDemandInline: Ui_select_from_model_on_demand_inline,
		UISelectFromModelWithSearchModal: Ui_select_from_model_with_search_modal,
		UIShowOneFromList: Ui_show_one_from_list,
		UISimpleSearchInput: Ui_simple_search_input,
		UITag: Ui_tag,
		UITagValue: Ui_tag_value,
		UITitle: Ui_title,
		UIUserCard: Ui_user_card
	});

	function Ui_form_input_errors($$anchor, $$props) {
		push($$props, true);

		let id = prop($$props, "id", 3, "generic-field"),
			classes = prop($$props, "class", 3, "");

		let allErrors = state(proxy([]));
		let showErrors = state(true);

		user_pre_effect(() => {
			set(allErrors, proxy([
				...Array.isArray($$props.errors) ? $$props.errors : [],
				...Array.isArray($$props.formErrors) ? $$props.formErrors : []
			]));

			set(showErrors, proxy($$props.inputStarted && $$props.validated && !$$props.valid));
		});

		Ui_errors_list($$anchor, {
			get show() {
				return get$2(showErrors);
			},
			get errors() {
				return get$2(allErrors);
			},
			get class() {
				return classes();
			},
			get id() {
				return id();
			}
		});

		pop();
	}

	var root$y = template(`<label><!></label>`);

	function Ui_label($$anchor, $$props) {
		push($$props, true);

		const $$stores = setup_stores();
		const $LOCALE = () => store_get(LOCALE, "$LOCALE", $$stores);

		/**
		 * @typedef {Object} Props
		 * @property {string} for
		 * @property {string} [label='label']
		 * @property {string} [class = 'label']
		 */
		/** @type {Props} */
		let label = prop($$props, "label", 3, "label"),
			labelClass = prop($$props, "class", 3, "label");

		var label_1 = root$y();
		var node = child(label_1);

		{
			var consequent = ($$anchor) => {
				var fragment = comment();
				var node_1 = first_child(fragment);

				snippet(node_1, () => $$props.children);
				append($$anchor, fragment);
			};

			var alternate = ($$anchor) => {
				var text$1 = text();

				template_effect(() => set_text(text$1, label() ? $LOCALE()[label()] : ""));
				append($$anchor, text$1);
			};

			if_block(node, ($$render) => {
				if ($$props.children) $$render(consequent); else $$render(alternate, false);
			});
		}

		reset(label_1);

		template_effect(() => {
			set_class(label_1, labelClass());
			set_attribute(label_1, "for", $$props.for);
		});

		append($$anchor, label_1);
		pop();
	}

	var root$x = template(`<span class="is-relative" style="display: inline-block; width: fit-content; height: fit-content; "><!> <!></span>`);

	function Ui_icon_button_with_tag($$anchor, $$props) {
		push($$props, true);

		let button = prop($$props, "button", 19, () => ({})),
			tag = prop($$props, "tag", 19, () => ({}));

		let siding = state("");
		let vars = state(proxy({}));

		function addVerticalCenteringIfNeeded() {
			if (!$$props.bottom && !$$props.top) {
				set(siding, get$2(siding) + ` is-vertical-centered`);
			}
		}

		function addHorizontalCenteringIfNeeded() {
			if (!$$props.right && !$$props.left) {
				set(siding, get$2(siding) + ` is-horizontal-centered`);
			}
		}

		onMount(() => {
			if ($$props.left) {
				set(siding, get$2(siding) + ` is-sided-left`);
				get$2(vars)[`--siding-left-size`] = $$props.left;
				addVerticalCenteringIfNeeded();
			}

			if ($$props.right) {
				set(siding, get$2(siding) + ` is-sided-right`);
				get$2(vars)["--siding-right-size"] = $$props.right;
				addVerticalCenteringIfNeeded();
			}

			if ($$props.top) {
				set(siding, get$2(siding) + ` is-sided-top`);
				get$2(vars)["--siding-top-size"] = $$props.top;
				addHorizontalCenteringIfNeeded();
			}

			if ($$props.bottom) {
				set(siding, get$2(siding) + ` is-sided-bottom`);
				get$2(vars)["--siding-bottom-size"] = $$props.bottom;
				addHorizontalCenteringIfNeeded();
			}

			set(vars, proxy(get$2(vars)));
		});

		var span = root$x();
		var node = child(span);

		Ui_button(node, spread_props(button));

		var node_1 = sibling(node, 2);

		Ui_tag(node_1, spread_props(tag, {
			get class() {
				return `is-padded-small is-sided ${get$2(siding) ?? ""}`;
			},
			get vars() {
				return get$2(vars);
			}
		}));

		reset(span);
		append($$anchor, span);
		pop();
	}

	var root$w = template(`<div><!></div>`);

	function Ui_icon_floating($$anchor, $$props) {
		push($$props, true);

		/**
		 * @typedef {Object} Props
		 * @property {any} [trigger] - export let direction = 'left';  //left/right/top/bottom/around
		 */
		/** @type {Props} */
		let trigger = prop($$props, "trigger", 19, () => ({
				title: "Click me!",
				icon: "plus",
				color: "primary",
				size: "medium",
				onclick: () => true
			})),
			top = prop($$props, "top", 3, "2em"),
			left = prop($$props, "left", 3, "2em"),
			classes = prop($$props, "class", 3, "");

		let positionStyle = state("");

		onMount(() => {
			set(positionStyle, "");

			if (top()) {
				set(positionStyle, get$2(positionStyle) + `top: ${top()};`);
			}

			if (left()) {
				set(positionStyle, get$2(positionStyle) + `left: ${left()};`);
			}

			if ($$props.right) {
				set(positionStyle, get$2(positionStyle) + `right: ${$$props.right};`);
			}

			if ($$props.bottom) {
				set(positionStyle, get$2(positionStyle) + `bottom: ${$$props.bottom};`);
			}
		});

		var div = root$w();
		var node = child(div);

		Ui_button(node, spread_props(trigger));
		reset(div);

		template_effect(() => {
			set_class(div, `is-absolute ${classes() ?? ""}`);
			set_attribute(div, "style", get$2(positionStyle));
		});

		append($$anchor, div);
		pop();
	}

	var root_1$q = template(`<span><span><i></i> <span> </span></span></span>`);
	var root_2$j = template(`<span><i></i></span>`);

	function Ui_icon_font($$anchor, $$props) {
		push($$props, true);

		const $$stores = setup_stores();
		const $LOCALE = () => store_get(LOCALE, "$LOCALE", $$stores);

		/**
		 * @typedef {Object} Props
		 * @property {string} [title = ""]
		 * @property {string} [font = ""]
		 * @property {string} [size = ""]
		 * @property {string} [side = ""]
		 * @property {string} [class = ""]
		 * @property {boolean} [pointable = false]
		 */
		/** @type {Props} */
		let title = prop($$props, "title", 3, ""),
			font = prop($$props, "font", 3, ""),
			side = prop($$props, "side", 3, ""),
			size = prop($$props, "size", 3, ""),
			pointable = prop($$props, "pointable", 3, false);

		var fragment = comment();
		var node = first_child(fragment);

		{
			var consequent = ($$anchor) => {
				var span = root_1$q();
				var span_1 = child(span);
				var i = child(span_1);
				var span_2 = sibling(i, 2);
				var text = child(span_2, true);

				reset(span_2);
				reset(span_1);
				reset(span);

				template_effect(() => {
					set_class(span, `icon-text ${(pointable() ? 'is-clickable' : '') ?? ""}`);
					set_class(span_1, `icon ${(size() ? `is-${size()}` : '') ?? ""}`);

					set_class(i, `is-title-icon fas
      fa-${font() ?? ""}
      ${(size() == 'medium' ? 'fa-lg' : '') ?? ""}
      ${(size() == 'large' ? 'fa-2x' : '') ?? ""}
      `);

					set_text(text, $LOCALE()[title()]);
				});

				append($$anchor, span);
			};

			var alternate = ($$anchor) => {
				var span_3 = root_2$j();
				var i_1 = child(span_3);

				reset(span_3);

				template_effect(() => {
					set_class(span_3, `
        ${(pointable() ? 'is-clickable' : '') ?? ""}
        ${(side() ? `is-${side()}` : '') ?? ""}
        icon ${(size() ? `is-${size()}` : '') ?? ""} ${(size() == 'medium' ? 'fa-lg' : '') ?? ""}
${(size() == 'large' ? 'fa-2x' : '') ?? ""}`);

					set_class(i_1, `fas fa-${font() ?? ""}`);
				});

				append($$anchor, span_3);
			};

			if_block(node, ($$render) => {
				if (title()) $$render(consequent); else $$render(alternate, false);
			});
		}

		append($$anchor, fragment);
		pop();
	}

	var root_3$c = template(`<span class="icon"><!></span>`);
	var root_5$7 = template(`<figure><img></figure>`);

	function Ui_icon($$anchor, $$props) {
		/**
		 * @typedef {Object} Props
		 * @property {string} [title = ""] - font icon title
		 * @property {string} [size = ""]  - font icon size
		 * @property {string} [font = ""] - font icon name
		 * @property {string} [svg = ""] - svg icon
		 * @property {string} [src = ""] - image icon
		 * @property {number|string} width
		 * @property {number|string} height
		 */
		/** @type {Props} */
		let title = prop($$props, "title", 3, ""),
			size = prop($$props, "size", 3, ""),
			font = prop($$props, "font", 3, ""),
			svg = prop($$props, "svg", 3, ""),
			src = prop($$props, "src", 3, "");

		var fragment = comment();
		var node = first_child(fragment);

		{
			var consequent = ($$anchor) => {
				Ui_icon_font($$anchor, {
					get font() {
						return font();
					},
					get size() {
						return size();
					},
					get title() {
						return title();
					}
				});
			};

			var alternate_1 = ($$anchor) => {
				var fragment_2 = comment();
				var node_1 = first_child(fragment_2);

				{
					var consequent_1 = ($$anchor) => {
						var span = root_3$c();
						var node_2 = child(span);

						html(node_2, svg);
						reset(span);
						append($$anchor, span);
					};

					var alternate = ($$anchor) => {
						var fragment_3 = comment();
						var node_3 = first_child(fragment_3);

						{
							var consequent_2 = ($$anchor) => {
								var figure = root_5$7();
								var img = child(figure);

								reset(figure);

								template_effect(() => {
									set_class(figure, `image ${($$props.width && $$props.height ? `is-${$$props.width}x${$$props.height}` : '') ?? ""} `);
									set_attribute(img, "src", src());
									set_attribute(img, "title", title());
									set_attribute(img, "alt", title());
									set_attribute(img, "width", $$props.width);
									set_attribute(img, "height", $$props.height);
								});

								append($$anchor, figure);
							};

							if_block(
								node_3,
								($$render) => {
									if (src()) $$render(consequent_2);
								},
								true
							);
						}

						append($$anchor, fragment_3);
					};

					if_block(
						node_1,
						($$render) => {
							if (svg()) $$render(consequent_1); else $$render(alternate, false);
						},
						true
					);
				}

				append($$anchor, fragment_2);
			};

			if_block(node, ($$render) => {
				if (font()) $$render(consequent); else $$render(alternate_1, false);
			});
		}

		append($$anchor, fragment);
	}

	var index$9 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		UIIcon: Ui_icon,
		UIIconButtonWithTag: Ui_icon_button_with_tag,
		UIIconFloating: Ui_icon_floating,
		UIIconFont: Ui_icon_font
	});

	function Ui_validated_icon($$anchor, $$props) {
		let side = prop($$props, "side", 3, "right"),
			size = prop($$props, "size", 3, "small");

		var fragment = comment();
		var node = first_child(fragment);

		{
			var consequent = ($$anchor) => {
				var font = derived(() => $$props.valid ? "check" : "exclamation-triangle");

				Ui_icon_font($$anchor, {
					get font() {
						return get$2(font);
					},
					get side() {
						return side();
					},
					get size() {
						return size();
					}
				});
			};

			if_block(node, ($$render) => {
				if ($$props.validated === true) $$render(consequent);
			});
		}

		append($$anchor, fragment);
	}

	var root_1$p = template(`<!> <!> <!>`, 1);

	function Ui_form_input($$anchor, $$props) {
		const input = ($$anchor) => {
			var fragment = root_1$p();
			var node = first_child(fragment);

			component(node, () => $$props.UIInput, ($$anchor, $$component) => {
				$$component($$anchor, spread_props(
					{
						get fieldtype() {
							return $$props.fieldtype;
						},
						get fieldname() {
							return $$props.fieldname;
						},
						get valid() {
							return valid();
						},
						get disabled() {
							return $$props.disabled;
						},
						get readonly() {
							return $$props.readonly;
						}
					},
					() => others,
					{
						get value() {
							return value();
						},
						set value($$value) {
							value($$value);
						}
					}
				));
			});

			var node_1 = sibling(node, 2);

			{
				var consequent = ($$anchor) => {
					Ui_icon_font($$anchor, {
						get font() {
							return icon();
						},
						side: "left",
						size: "small"
					});
				};

				if_block(node_1, ($$render) => {
					if (icon()) $$render(consequent);
				});
			}

			var node_2 = sibling(node_1, 2);

			{
				var consequent_1 = ($$anchor) => {
					Ui_validated_icon($$anchor, {
						get validated() {
							return validated();
						},
						get valid() {
							return valid();
						}
					});
				};

				if_block(node_2, ($$render) => {
					if (!$$props.readonly) $$render(consequent_1);
				});
			}

			append($$anchor, fragment);
		};

		/**
		 * @typedef {Object} Props
		 * @property {any} [value]
		 * @property {object}
		 * @property {string} [label]
		 * @property {string} [placeholder]
		 * @property {string} fieldname
		 * @property {string} fieldtype
		 * @property {boolean} [icon]
		 * @property {boolean} [required]
		 * @property {boolean} [readonly]
		 * @property {boolean} [disabled]
		 * @property {import('../events.types').UIEventInputChangeCallback} [onchange]
		 * @property {boolean} [valid]
		 */
		/** @type {Props} */
		let value = prop($$props, "value", 15, ""),
			fieldnamePrefix = prop($$props, "fieldnamePrefix", 3, "form-field-"),
			icon = prop($$props, "icon", 3, false),
			valid = prop($$props, "valid", 3, true),
			validated = prop($$props, "validated", 3, false),
			others = rest_props($$props, [
				"$$slots",
				"$$events",
				"$$legacy",
				"value",
				"disabled",
				"readonly",
				"UIInput",
				"label",
				"fieldtype",
				"fieldname",
				"fieldnamePrefix",
				"icon",
				"valid",
				"validated"
			]);

		var fragment_3 = comment();
		var node_3 = first_child(fragment_3);

		{
			var consequent_2 = ($$anchor) => {
				Ui_label($$anchor, {
					get class() {
						return $$props.fieldtype;
					},
					get disabled() {
						return $$props.disabled;
					},
					get for() {
						return `${fieldnamePrefix() ?? ""}${$$props.fieldtype ?? ""}-${$$props.fieldname ?? ""}`;
					},
					children: ($$anchor, $$slotProps) => {
						input($$anchor);
					},
					$$slots: { default: true }
				});
			};

			var alternate = ($$anchor) => {
				input($$anchor);
			};

			if_block(node_3, ($$render) => {
				if ($$props.label) $$render(consequent_2); else $$render(alternate, false);
			});
		}

		append($$anchor, fragment_3);
	}

	var root$v = template(`<div><!></div>`);

	function Ui_control($$anchor, $$props) {
		push($$props, true);

		/**
		 * @typedef {Object} Props
		 * @property {string} [classes]
		 * @property {import('svelte').Snippet} [children]
		 */
		/** @type {Props} */
		let classes = prop($$props, "class", 3, "");
		var div = root$v();
		var node = child(div);

		snippet(node, () => $$props.children ?? noop);
		reset(div);
		template_effect(() => set_class(div, `control ${classes() ?? ""}`));
		append($$anchor, div);
		pop();
	}

	var root$u = template(`<!> <!>`, 1);

	function Ui_form_control($$anchor, $$props) {
		/**
		 * @typedef {Object} Props
		 * @property {boolean} [inputStarted]
		 * @property {boolean} [value]
		 * @property {string} [label]
		 * @property {string} [placeholder]
		 * @property {string} fieldname
		 * @property {string} fieldtype
		 * @property {boolean} [icon]
		 * @property {boolean} [required]
		 * @property {boolean} [readonly]
		 * @property {boolean} [disabled]
		 * @property {import('../events.types').UIEventInputChangeCallback} [onchange]
		 * @property {boolean} [valid]
		 * @property {boolean} [validated]
		 * @property {boolean} [errors]
		 * @property {boolean} [formErrors]
		 * @property {boolean} [formLevelError]
		 */
		/** @type {Props} */
		let value = prop($$props, "value", 15, ""),
			inputStarted = prop($$props, "inputStarted", 3, false),
			placeholder = prop($$props, "placeholder", 3, ""),
			fieldnamePrefix = prop($$props, "fieldnamePrefix", 3, "form-field-"),
			icon = prop($$props, "icon", 3, false),
			required = prop($$props, "required", 3, true),
			readonly = prop($$props, "readonly", 3, false),
			disabled = prop($$props, "disabled", 3, false),
			valid = prop($$props, "valid", 3, true),
			validated = prop($$props, "validated", 3, false),
			errors = prop($$props, "errors", 3, false),
			onchange = prop($$props, "onchange", 3, () => true),
			onerror = prop($$props, "onerror", 3, () => true),
			formErrors = prop($$props, "formErrors", 3, false),
			others = rest_props($$props, [
				"$$slots",
				"$$events",
				"$$legacy",
				"value",
				"UIInput",
				"inputStarted",
				"label",
				"placeholder",
				"fieldtype",
				"fieldname",
				"fieldnamePrefix",
				"icon",
				"required",
				"readonly",
				"disabled",
				"valid",
				"validated",
				"errors",
				"onchange",
				"onerror",
				"formErrors"
			]);

		let iconClasses = derived(() => (icon() ? " has-icons-left " : "") + " has-icons-right ");
		var fragment = root$u();
		var node = first_child(fragment);

		Ui_control(node, {
			get class() {
				return get$2(iconClasses);
			},
			children: ($$anchor, $$slotProps) => {
				Ui_form_input($$anchor, spread_props(
					{
						get UIInput() {
							return $$props.UIInput;
						},
						get label() {
							return $$props.label;
						},
						get placeholder() {
							return placeholder();
						},
						get fieldtype() {
							return $$props.fieldtype;
						},
						get fieldname() {
							return $$props.fieldname;
						},
						get fieldnamePrefix() {
							return fieldnamePrefix();
						},
						get icon() {
							return icon();
						},
						get required() {
							return required();
						},
						get readonly() {
							return readonly();
						},
						get disabled() {
							return disabled();
						},
						get valid() {
							return valid();
						},
						get onchange() {
							return onchange();
						},
						get onerror() {
							return onerror();
						}
					},
					() => others,
					{
						get value() {
							return value();
						},
						set value($$value) {
							value($$value);
						}
					}
				));
			},
			$$slots: { default: true }
		});

		var node_1 = sibling(node, 2);

		Ui_form_input_errors(node_1, {
			get inputStarted() {
				return inputStarted();
			},
			get validated() {
				return validated();
			},
			get valid() {
				return valid();
			},
			get errors() {
				return errors();
			},
			get formErrors() {
				return formErrors();
			},
			get id() {
				return `input-field-helper-${$$props.fieldname ?? ""}`;
			}
		});

		append($$anchor, fragment);
	}

	var index$8 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		UIFormControl: Ui_form_control,
		UIFormInput: Ui_form_input,
		UIFormInputErrors: Ui_form_input_errors,
		UIValidatedIcon: Ui_validated_icon
	});

	var root_1$o = template(`<figure><img></figure>`);
	var root_2$i = template(`<a><!></a>`);

	function Ui_image($$anchor, $$props) {
		const imageFigure = ($$anchor) => {
			var figure = root_1$o();
			const class_derived = derived(() => `image ${classes() ?? ""} ${(!$$props.width && !$$props.height ? isNaN(size()) ? `is-${size()}` : `is-${size()}x${size()}` : '') ?? ""}`);
			var img = child(figure);

			img.__click = function (...$$args) {
				onclick()?.apply(this, $$args);
			};

			img.__keyup = function (...$$args) {
				onkeyup()?.apply(this, $$args);
			};

			reset(figure);

			template_effect(() => {
				set_class(figure, get$2(class_derived));
				set_attribute(figure, "style", ($$props.width ? `width: ${$$props.width};` : "") + ($$props.height ? `height: ${$$props.height};` : ""));
				toggle_class(figure, "is-contained", contained());
				toggle_class(figure, "is-covered", covered());
				toggle_class(figure, "is-clickable", onclick() && $$props.pointable !== false || $$props.pointable);
				set_attribute(img, "alt", $$props.alt || $$props.title);
				set_attribute(img, "title", $$props.title);
				set_attribute(img, "src", $$props.url);
				set_attribute(img, "crossorigin", cors());
			});

			append($$anchor, figure);
		};

		/**
		 * @typedef {Object} Props
		 * @property {string} [urlFull]
		 * @property {string} url
		 * @property {string} [title]
		 * @property {string} [alt]
		 * @property {string} [cors='anonymous']
		 * @property {number} [size = 64]
		 * @property {number} [height]
		 * @property {number} [width]
		 * @property {boolean} [contained=false]
		 * @property {boolean} [covered=false]
		 * @property {boolean} [pointable]
		 * @property {string} [class = '']
		 * @property {function} [onclick]
		 * @property {function} [onkeyup]
		 */
		/** @type {Props} */
		let cors = prop($$props, "cors", 3, "anonymous"),
			size = prop($$props, "size", 3, 64),
			contained = prop($$props, "contained", 3, false),
			covered = prop($$props, "covered", 3, false),
			classes = prop($$props, "class", 3, ""),
			onclick = prop($$props, "onclick", 3, undefined),
			onkeyup = prop($$props, "onkeyup", 3, undefined);

		var fragment = comment();
		var node = first_child(fragment);

		{
			var consequent = ($$anchor) => {
				var a = root_2$i();

				a.__click = function (...$$args) {
					onclick()?.apply(this, $$args);
				};

				var node_1 = child(a);

				imageFigure(node_1);
				reset(a);

				template_effect(() => {
					set_attribute(a, "href", $$props.urlFull);
					set_attribute(a, "title", $$props.title || $$props.alt);
				});

				append($$anchor, a);
			};

			var alternate = ($$anchor) => {
				imageFigure($$anchor);
			};

			if_block(node, ($$render) => {
				if ($$props.urlFull) $$render(consequent); else $$render(alternate, false);
			});
		}

		append($$anchor, fragment);
	}

	delegate(["click", "keyup"]);

	function Ui_images($$anchor, $$props) {
		let values = prop($$props, "values", 19, () => []),
			override = rest_props($$props, ["$$slots", "$$events", "$$legacy", "values"]);

		var fragment = comment();
		var node = first_child(fragment);

		each(node, 17, values, (item) => item.url, ($$anchor, item) => {
			Ui_image($$anchor, spread_props(() => get$2(item), () => override));
		});

		append($$anchor, fragment);
	}

	var index$7 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		UIImage: Ui_image,
		UIImages: Ui_images
	});

	enable_legacy_mode_flag();

	/*
	Adapted from https://github.com/mattdesl
	Distributed under MIT License https://github.com/mattdesl/eases/blob/master/LICENSE.md
	*/


	/**
	 * @param {number} t
	 * @returns {number}
	 */
	function cubicOut(t) {
		const f = t - 1.0;
		return f * f * f + 1.0;
	}

	/** @import { FlipParams, AnimationConfig } from './public.js' */

	/**
	 * The flip function calculates the start and end position of an element and animates between them, translating the x and y values.
	 * `flip` stands for [First, Last, Invert, Play](https://aerotwist.com/blog/flip-your-animations/).
	 *
	 * @param {Element} node
	 * @param {{ from: DOMRect; to: DOMRect }} fromTo
	 * @param {FlipParams} params
	 * @returns {AnimationConfig}
	 */
	function flip(node, { from, to }, params = {}) {
		var style = getComputedStyle(node);
		var zoom = get_zoom(node); // https://drafts.csswg.org/css-viewport/#effective-zoom

		var transform = style.transform === 'none' ? '' : style.transform;
		var [ox, oy] = style.transformOrigin.split(' ').map(parseFloat);
		var dsx = from.width / to.width;
		var dsy = from.height / to.height;

		var dx = (from.left + dsx * ox - (to.left + ox)) / zoom;
		var dy = (from.top + dsy * oy - (to.top + oy)) / zoom;
		var { delay = 0, duration = (d) => Math.sqrt(d) * 120, easing = cubicOut } = params;

		return {
			delay,
			duration: typeof duration === 'function' ? duration(Math.sqrt(dx * dx + dy * dy)) : duration,
			easing,
			css: (t, u) => {
				var x = u * dx;
				var y = u * dy;
				var sx = t + u * dsx;
				var sy = t + u * dsy;
				return `transform: ${transform} scale(${sx}, ${sy}) translate(${x}px, ${y}px);`;
			}
		};
	}

	/**
	 * @param {Element} element
	 */
	function get_zoom(element) {
		if ('currentCSSZoom' in element) {
			return /** @type {number} */ (element.currentCSSZoom);
		}

		/** @type {Element | null} */
		var current = element;
		var zoom = 1;

		while (current !== null) {
			zoom *= +getComputedStyle(current).zoom;
			current = /** @type {Element | null} */ (current.parentElement);
		}

		return zoom;
	}

	/** @import { BlurParams, CrossfadeParams, DrawParams, FadeParams, FlyParams, ScaleParams, SlideParams, TransitionConfig } from './public' */
	/** @param {number} x */
	const linear = (x) => x;

	/**
	 * Animates the opacity of an element from 0 to the current opacity for `in` transitions and from the current opacity to 0 for `out` transitions.
	 *
	 * @param {Element} node
	 * @param {FadeParams} [params]
	 * @returns {TransitionConfig}
	 */
	function fade(node, { delay = 0, duration = 400, easing = linear } = {}) {
		const o = +getComputedStyle(node).opacity;
		return {
			delay,
			duration,
			easing,
			css: (t) => `opacity: ${t * o}`
		};
	}

	var root_1$n = template(`<option selected class="svelte-75ckfb"> </option>`);
	var root_4$b = template(`<option selected class="svelte-75ckfb"> </option>`);
	var root_7$3 = template(`<div class="tags has-addons svelte-75ckfb"><span class="tag svelte-75ckfb"> </span> <span class="tag is-delete svelte-75ckfb"></span></div>`);
	var root_6$9 = template(`<div class="svelte-75ckfb"><!></div>`);
	var root_8$2 = template(`<span class="autocomplete-clear-button svelte-75ckfb"><!></span>`);
	var root_11$3 = template(`<div class="autocomplete-list-item svelte-75ckfb"><!></div>`);
	var root_17 = template(`<div class="autocomplete-list-item-no-results svelte-75ckfb"> </div>`);
	var root_9$1 = template(`<!> <!> <!>`, 1);
	var root_19$1 = template(`<div class="autocomplete-list-item-loading svelte-75ckfb"><!></div>`);
	var root_22$1 = template(`<div class="autocomplete-list-item-create svelte-75ckfb"><!></div>`);
	var root_25 = template(`<div class="autocomplete-list-item-no-results svelte-75ckfb"><!></div>`);
	var root$t = template(`<div><select class="svelte-75ckfb"><!></select> <div class="input-container svelte-75ckfb"><!> <input> <!></div> <div><!></div></div>`);

	function SimpleAutocomplete($$anchor, $$props) {
		const $$sanitized_props = legacy_rest_props($$props, [
			"children",
			"$$slots",
			"$$events",
			"$$legacy"
		]);

		const $$restProps = legacy_rest_props($$sanitized_props, [
			"highlightFilter",
			"items",
			"searchFunction",
			"labelFieldName",
			"keywordsFieldName",
			"valueFieldName",
			"labelFunction",
			"keywordsFunction",
			"valueFunction",
			"keywordsCleanFunction",
			"textCleanFunction",
			"beforeChange",
			"onChange",
			"onFocus",
			"onBlur",
			"onCreate",
			"selectFirstIfEmpty",
			"minCharactersToSearch",
			"maxItemsToShowInList",
			"multiple",
			"create",
			"ignoreAccents",
			"matchAllKeywords",
			"sortByMatchedKeywords",
			"itemFilterFunction",
			"itemSortFunction",
			"lock",
			"delay",
			"localFiltering",
			"localSorting",
			"cleanUserText",
			"lowercaseKeywords",
			"closeOnBlur",
			"orderableSelection",
			"hideArrow",
			"showClear",
			"clearText",
			"showLoadingIndicator",
			"noResultsText",
			"loadingText",
			"moreItemsText",
			"createText",
			"placeholder",
			"className",
			"inputClassName",
			"inputId",
			"name",
			"selectName",
			"selectId",
			"title",
			"html5autocomplete",
			"autocompleteOffValue",
			"readonly",
			"dropdownClassName",
			"disabled",
			"noInputStyles",
			"required",
			"debug",
			"tabindex",
			"selectedItem",
			"value",
			"highlightedItem",
			"text"
		]);

		push($$props, false);

		const showList = mutable_state();
		const hasSelection = mutable_state();
		const clearable = mutable_state();
		const locked = mutable_state();
		let items = prop($$props, "items", 28, () => []);
		let searchFunction = prop($$props, "searchFunction", 8, false);
		let labelFieldName = prop($$props, "labelFieldName", 8, undefined);
		let keywordsFieldName = prop($$props, "keywordsFieldName", 24, labelFieldName);
		let valueFieldName = prop($$props, "valueFieldName", 8, undefined);

		let labelFunction = prop($$props, "labelFunction", 8, function (item) {
			if (item === undefined || item === null) {
				return "";
			}

			return labelFieldName() ? item[labelFieldName()] : item;
		});

		let keywordsFunction = prop($$props, "keywordsFunction", 8, function (item) {
			if (item === undefined || item === null) {
				return "";
			}

			return keywordsFieldName() ? item[keywordsFieldName()] : labelFunction()(item);
		});

		let valueFunction = prop($$props, "valueFunction", 8, function (item, forceSingle = false) {
			if (item === undefined || item === null) {
				return item;
			}

			if (!multiple() || forceSingle) {
				return valueFieldName() ? item[valueFieldName()] : item;
			} else {
				return item.map((i) => valueFieldName() ? i[valueFieldName()] : i);
			}
		});

		let keywordsCleanFunction = prop($$props, "keywordsCleanFunction", 8, function (keywords) {
			return keywords;
		});

		let textCleanFunction = prop($$props, "textCleanFunction", 8, function (userEnteredText) {
			return userEnteredText;
		});

		let beforeChange = prop($$props, "beforeChange", 8, function (oldSelectedItem, newSelectedItem) {
			return true;
		});

		let onChange = prop($$props, "onChange", 8, function (newSelectedItem) {});
		let onFocus = prop($$props, "onFocus", 8, function () {});
		let onBlur = prop($$props, "onBlur", 8, function () {});

		let onCreate = prop($$props, "onCreate", 8, function (text) {
			if (debug()) {
				console.log("onCreate: " + text);
			}
		});

		let selectFirstIfEmpty = prop($$props, "selectFirstIfEmpty", 8, false);
		let minCharactersToSearch = prop($$props, "minCharactersToSearch", 8, 1);
		let maxItemsToShowInList = prop($$props, "maxItemsToShowInList", 8, 0);
		let multiple = prop($$props, "multiple", 8, false);
		let create = prop($$props, "create", 8, false);
		let ignoreAccents = prop($$props, "ignoreAccents", 8, true);
		let matchAllKeywords = prop($$props, "matchAllKeywords", 8, true);
		let sortByMatchedKeywords = prop($$props, "sortByMatchedKeywords", 8, false);
		let itemFilterFunction = prop($$props, "itemFilterFunction", 8, undefined);
		let itemSortFunction = prop($$props, "itemSortFunction", 8, undefined);
		let lock = prop($$props, "lock", 8, false);
		let delay = prop($$props, "delay", 8, 0);
		let localFiltering = prop($$props, "localFiltering", 8, true);
		let localSorting = prop($$props, "localSorting", 8, true);
		let cleanUserText = prop($$props, "cleanUserText", 8, true);
		let lowercaseKeywords = prop($$props, "lowercaseKeywords", 8, true);
		let closeOnBlur = prop($$props, "closeOnBlur", 8, false);
		let orderableSelection = prop($$props, "orderableSelection", 8, false);
		let hideArrow = prop($$props, "hideArrow", 8, false);
		let showClear = prop($$props, "showClear", 8, false);
		let clearText = prop($$props, "clearText", 8, "&#10006;");
		let showLoadingIndicator = prop($$props, "showLoadingIndicator", 8, false);
		let noResultsText = prop($$props, "noResultsText", 8, "No results found");
		let loadingText = prop($$props, "loadingText", 8, "Loading results...");
		let moreItemsText = prop($$props, "moreItemsText", 8, "items not shown");
		let createText = prop($$props, "createText", 8, "Not found, add anyway?");
		let placeholder = prop($$props, "placeholder", 8, undefined);
		let className = prop($$props, "className", 8, undefined);
		let inputClassName = prop($$props, "inputClassName", 8, undefined);
		let inputId = prop($$props, "inputId", 8, undefined);
		let name = prop($$props, "name", 8, undefined);
		let selectName = prop($$props, "selectName", 8, undefined);
		let selectId = prop($$props, "selectId", 8, undefined);
		let title = prop($$props, "title", 8, undefined);
		let html5autocomplete = prop($$props, "html5autocomplete", 8, undefined);
		let autocompleteOffValue = prop($$props, "autocompleteOffValue", 8, "off");
		let readonly = prop($$props, "readonly", 8, undefined);
		let dropdownClassName = prop($$props, "dropdownClassName", 8, undefined);
		let disabled = prop($$props, "disabled", 8, false);
		let noInputStyles = prop($$props, "noInputStyles", 8, false);
		let required = prop($$props, "required", 8, null);
		let debug = prop($$props, "debug", 8, false);
		let tabindex = prop($$props, "tabindex", 8, 0);
		let selectedItem = prop($$props, "selectedItem", 28, () => multiple() ? [] : undefined);
		let value = prop($$props, "value", 12, undefined);
		let highlightedItem = prop($$props, "highlightedItem", 12, undefined);
		// --- Internal State ----
		const uniqueId = "sautocomplete-" + Math.floor(Math.random() * 1000);
		// HTML elements
		let input = mutable_state();
		let list = mutable_state();
		let inputContainer = mutable_state();
		// UI state
		let opened = mutable_state(false);
		let loading = mutable_state(false);
		let highlightIndex = mutable_state(-1);
		let text$1 = prop($$props, "text", 12, undefined);
		let filteredTextLength = mutable_state(0);
		// view model
		let filteredListItems = mutable_state();
		let listItems = [];
		// requests/responses counters
		let lastRequestId = 0;
		let lastResponseId = 0;
		// other state
		let inputDelayTimeout;
		let setPositionOnNextUpdate = mutable_state(false);

		// --- Lifecycle events ---
		afterUpdate(() => {
			if (get$2(setPositionOnNextUpdate)) {
				setScrollAwareListPosition();
			}

			set(setPositionOnNextUpdate, false);
		});

		// --- Functions ---
		function safeFunction(theFunction, argument) {
			if (typeof theFunction !== "function") {
				console.error("Not a function: " + theFunction + ", argument: " + argument);
				return undefined;
			}

			let result;

			try {
				result = theFunction(argument);
			} catch(error) {
				console.warn("Error executing Autocomplete function on value: " + argument + " function: " + theFunction);
			}

			return result;
		}

		function safeStringFunction(theFunction, argument) {
			let result = safeFunction(theFunction, argument);

			if (result === undefined || result === null) {
				result = "";
			}

			if (typeof result !== "string") {
				result = result.toString();
			}

			return result;
		}

		function safeLabelFunction(item) {
			// console.log("labelFunction: " + labelFunction);
			// console.log("safeLabelFunction, item: " + item);
			return safeStringFunction(labelFunction(), item);
		}

		function safeKeywordsFunction(item) {
			// console.log("safeKeywordsFunction");
			const keywords = safeStringFunction(keywordsFunction(), item);
			let result = safeStringFunction(keywordsCleanFunction(), keywords);

			result = lowercaseKeywords() ? result.toLowerCase().trim() : result;

			if (ignoreAccents()) {
				result = removeAccents(result);
			}

			if (debug()) {
				console.log("Extracted keywords: '" + result + "' from item: " + JSON.stringify(item));
			}

			return result;
		}

		function prepareListItems() {
			let timerId;

			if (debug()) {
				timerId = `Autocomplete prepare list ${inputId() ? `(id: ${inputId()})` : ""}`;
				console.time(timerId);
				console.log("Prepare items to search");
				console.log("items: " + JSON.stringify(items()));
			}

			if (!Array.isArray(items())) {
				console.warn("Autocomplete items / search function did not return array but", items());
				items([]);
			}

			const length = items() ? items().length : 0;

			listItems = new Array(length);

			if (length > 0) {
				items().forEach((item, i) => {
					const listItem = getListItem(item);

					if (listItem === undefined) {
						console.log("Undefined item for: ", item);
					}

					listItems[i] = listItem;
				});
			}

			set(filteredListItems, listItems);

			if (debug()) {
				console.log(listItems.length + " items to search");
				console.timeEnd(timerId);
			}
		}

		function getListItem(item) {
			return {
				// keywords representation of the item
				keywords: localFiltering() ? safeKeywordsFunction(item) : [],
				// item label
				label: safeLabelFunction(item),
				// store reference to the origial item
				item
			};
		}

		function onSelectedItemChanged() {
			value(valueFunction()(selectedItem()));

			if (selectedItem() && !multiple()) {
				text$1(safeLabelFunction(selectedItem()));
			}

			set(filteredListItems, listItems);
			onChange()(selectedItem());
		}

		function prepareUserEnteredText(userEnteredText) {
			if (userEnteredText === undefined || userEnteredText === null) {
				return "";
			}

			if (!cleanUserText()) {
				return userEnteredText;
			}

			const textFiltered = userEnteredText.replace(/[&/\\#,+()$~%.'":*?<>{}]/g, " ").trim();
			const cleanUserEnteredText = safeStringFunction(textCleanFunction(), textFiltered);
			const textTrimmed = lowercaseKeywords() ? cleanUserEnteredText.toLowerCase().trim() : cleanUserEnteredText.trim();

			return textTrimmed;
		}

		function numberOfMatches(listItem, searchWords) {
			if (!listItem) {
				return 0;
			}

			const itemKeywords = listItem.keywords;
			let matches = 0;

			searchWords.forEach((searchWord) => {
				if (itemKeywords.includes(searchWord)) {
					matches++;
				}
			});

			return matches;
		}

		async function search() {
			let timerId;

			if (debug()) {
				timerId = `Autocomplete search ${inputId() ? `(id: ${inputId()})` : ""}`;
				console.time(timerId);
				console.log("Searching user entered text: '" + text$1() + "'");
			}

			let textFiltered = prepareUserEnteredText(text$1());

			if (minCharactersToSearch() > 1 && textFiltered.length < minCharactersToSearch()) {
				textFiltered = "";
			}

			set(filteredTextLength, textFiltered.length);

			if (debug()) {
				console.log("Changed user entered text '" + text$1() + "' into '" + textFiltered + "'");
			}

			// if no search text load all items
			if (textFiltered === "") {
				if (searchFunction()) {
					// we will need to rerun the search
					items([]);

					if (debug()) {
						console.log("User entered text is empty clear list of items");
					}
				} else {
					set(filteredListItems, listItems);

					if (debug()) {
						console.log("User entered text is empty set the list of items to all items");
					}
				}

				if (closeIfMinCharsToSearchReached()) {
					if (debug()) {
						console.timeEnd(timerId);
					}

					return;
				}
			}

			if (!searchFunction()) {
				// internal search
				processListItems(textFiltered);
			} else {
				// external search which provides items
				lastRequestId = lastRequestId + 1;

				const currentRequestId = lastRequestId;

				set(loading, true);

				// searchFunction is a generator
				if (searchFunction().constructor.name === "AsyncGeneratorFunction") {
					for await (const chunk of searchFunction()(textFiltered, maxItemsToShowInList())) {
						// a chunk of an old response: throw it away
						if (currentRequestId < lastResponseId) {
							return false;
						}

						// a chunk for a new response: reset the item list
						if (currentRequestId > lastResponseId) {
							items([]);
						}

						lastResponseId = currentRequestId;
						items([...items(), ...chunk]);
						processListItems(textFiltered);
					}

					// there was nothing in the chunk
					if (lastResponseId < currentRequestId) {
						lastResponseId = currentRequestId;
						items([]);
						processListItems(textFiltered);
					}
				} else // searchFunction is a regular function
				{
					let result = await searchFunction()(textFiltered, maxItemsToShowInList());

					// If a response to a newer request has been received
					// while responses to this request were being loaded,
					// then we can just throw away this outdated results.
					if (currentRequestId < lastResponseId) {
						return false;
					}

					lastResponseId = currentRequestId;
					items(result);
					processListItems(textFiltered);
				}

				set(loading, false);
			}

			if (debug()) {
				console.timeEnd(timerId);
				console.log("Search found " + get$2(filteredListItems).length + " items");
			}
		}

		function defaultItemFilterFunction(listItem, searchWords) {
			const matches = numberOfMatches(listItem, searchWords);

			if (matchAllKeywords()) {
				return matches >= searchWords.length;
			} else {
				return matches > 0;
			}
		}

		function defaultItemSortFunction(obj1, obj2, searchWords) {
			return numberOfMatches(obj2, searchWords) - numberOfMatches(obj1, searchWords);
		}

		function processListItems(textFiltered) {
			// cleans, filters, orders, and highlights the list items
			prepareListItems();

			const textFilteredWithoutAccents = ignoreAccents() ? removeAccents(textFiltered) : textFiltered;
			const searchWords = textFilteredWithoutAccents.split(/\s+/g).filter((word) => word !== "");
			// local search
			let tempfilteredListItems;

			if (localFiltering()) {
				if (itemFilterFunction()) {
					tempfilteredListItems = listItems.filter((item) => itemFilterFunction()(item.item, searchWords));
				} else {
					tempfilteredListItems = listItems.filter((item) => defaultItemFilterFunction(item, searchWords));
				}

				if (localSorting()) {
					if (itemSortFunction()) {
						tempfilteredListItems = tempfilteredListItems.sort((item1, item2) => itemSortFunction()(item1.item, item2.item, searchWords));
					} else {
						if (sortByMatchedKeywords()) {
							tempfilteredListItems = tempfilteredListItems.sort((item1, item2) => defaultItemSortFunction(item1, item2, searchWords));
						}
					}
				}
			} else {
				tempfilteredListItems = listItems;
			}

			const hlfilter = highlightFilter(searchWords, "label");

			set(filteredListItems, tempfilteredListItems.map(hlfilter));
			closeIfMinCharsToSearchReached();
			return true;
		}

		// $: text, search();
		function afterCreate(createdItem) {
			let listItem;

			if (debug()) {
				console.log("createdItem", createdItem);
			}

			if ("undefined" !== typeof createdItem) {
				prepareListItems();
				set(filteredListItems, listItems);

				let index = findItemIndex(createdItem, get$2(filteredListItems));

				// if the items array was not updated, add the created item manually
				if (index <= 0) {
					items([createdItem]);
					prepareListItems();
					set(filteredListItems, listItems);
					index = 0;
				}

				if (index >= 0) {
					set(highlightIndex, index);
					listItem = get$2(filteredListItems)[get$2(highlightIndex)];
				}
			}

			return listItem;
		}

		function selectListItem(listItem) {
			if (debug()) {
				console.log("selectListItem", listItem);
			}

			if ("undefined" === typeof listItem && create()) {
				// allow undefined items if create is enabled
				const createdItem = onCreate()(text$1());

				if ("undefined" !== typeof createdItem) {
					if (typeof createdItem.then === "function") {
						createdItem.then((newItem) => {
							if ("undefined" !== typeof newItem) {
								const newListItem = afterCreate(newItem);

								if ("undefined" !== typeof newListItem) {
									selectListItem(newListItem);
								}
							}
						});

						return true;
					} else {
						listItem = afterCreate(createdItem);
					}
				}
			}

			if ("undefined" === typeof listItem) {
				if (debug()) {
					console.log(`listItem is undefined. Can not select.`);
				}

				return false;
			}

			if (get$2(locked)) {
				return true;
			}

			const newSelectedItem = listItem.item;

			if (beforeChange()(selectedItem(), newSelectedItem)) {
				// simple selection
				if (!multiple()) {
					selectedItem(undefined); // triggers change even if the the same item is selected
					selectedItem(newSelectedItem);
				} else // first selection of multiple ones
				if (!selectedItem()) {
					selectedItem([newSelectedItem]);
				} else // selecting something already selected => unselect it
				if (selectedItem().includes(newSelectedItem)) {
					selectedItem(selectedItem().filter((i) => i !== newSelectedItem));
				} else // adds the element to the selection
				{
					selectedItem([...selectedItem(), newSelectedItem]);
				}
			}

			return true;
		}

		function selectItem() {
			if (debug()) {
				console.log("selectItem", get$2(highlightIndex));
			}

			const listItem = get$2(filteredListItems)[get$2(highlightIndex)];

			if (selectListItem(listItem)) {
				if (debug()) {
					console.log("selectListItem true, closing");
				}

				close();

				if (multiple()) {
					text$1("");
					get$2(input).focus();
				}
			} else {
				if (debug()) {
					console.log("selectListItem false, not closing");
				}
			}
		}

		function up() {
			if (debug()) {
				console.log("up");
			}

			open();

			if (get$2(highlightIndex) > 0) {
				update(highlightIndex, -1);
			}

			highlight();
		}

		function down() {
			if (debug()) {
				console.log("down");
			}

			open();

			if (get$2(highlightIndex) < get$2(filteredListItems).length - 1) {
				update(highlightIndex);
			}

			highlight();
		}

		function highlight() {
			if (debug()) {
				console.log("highlight");
			}

			const query = ".selected";

			if (debug()) {
				console.log("Seaching DOM element: " + query + " in " + get$2(list));
			}

			/**
			 * @param {Element} el
			 */
			const el = get$2(list) && get$2(list).querySelector(query);

			if (el) {
				if (typeof el.scrollIntoViewIfNeeded === "function") {
					if (debug()) {
						console.log("Scrolling selected item into view");
					}

					el.scrollIntoViewIfNeeded();
				} else if (el.scrollIntoView === "function") {
					if (debug()) {
						console.log("Scrolling selected item into view");
					}

					el.scrollIntoView();
				} else {
					if (debug()) {
						console.warn("Could not scroll selected item into view, scrollIntoViewIfNeeded not supported");
					}
				}
			} else {
				if (debug()) {
					console.warn("Selected item not found to scroll into view");
				}
			}
		}

		function onListItemClick(listItem) {
			if (debug()) {
				console.log("onListItemClick");
			}

			if (selectListItem(listItem)) {
				close();

				if (multiple()) {
					text$1("");
					get$2(input).focus();
				}
			}
		}

		function onDocumentClick(e) {
			if (debug()) {
				console.log("onDocumentClick");
			}

			if (e.composedPath().some((path) => path.classList && path.classList.contains(uniqueId))) {
				if (debug()) {
					console.log("onDocumentClick inside");
				}

				// resetListToAllItemsAndOpen();
				highlight();
			} else {
				if (debug()) {
					console.log("onDocumentClick outside");
				}

				close();
			}
		}

		function onKeyDown(e) {
			if (debug()) {
				console.log("onKeyDown");
			}

			let key = e.key;

			if (key === "Tab" && e.shiftKey) key = "ShiftTab";

			const fnmap = {
				Tab: get$2(opened) ? close : null,
				ShiftTab: get$2(opened) ? close : null,
				ArrowDown: down.bind(this),
				ArrowUp: up.bind(this),
				Escape: onEsc.bind(this),
				Backspace: multiple() && get$2(hasSelection) && !text$1() ? onBackspace.bind(this) : null
			};

			const fn = fnmap[key];

			if (typeof fn === "function") {
				fn(e);
			}
		}

		function onKeyPress(e) {
			if (debug()) {
				console.log("onKeyPress");
			}

			if (e.key === "Enter") {
				onEnter(e);
			}
		}

		function onEnter(e) {
			if (get$2(opened)) {
				e.preventDefault();
				selectItem();
			}
		}

		function onInput(e) {
			if (debug()) {
				console.log("onInput");
			}

			text$1(e.target.value);

			if (inputDelayTimeout) {
				clearTimeout(inputDelayTimeout);
			}

			if (delay()) {
				inputDelayTimeout = setTimeout(processInput, delay());
			} else {
				processInput();
			}
		}

		function unselectItem(tag) {
			if (debug()) {
				console.log("unselectItem", tag);
			}

			selectedItem(selectedItem().filter((i) => i !== tag));
			get$2(input).focus();
		}

		function processInput() {
			if (search()) {
				set(highlightIndex, 0);
				open();
			}
		}

		function onInputClick() {
			if (debug()) {
				console.log("onInputClick");
			}

			resetListToAllItemsAndOpen();
		}

		function onEsc(e) {
			if (debug()) {
				console.log("onEsc");
			}

			//if (text) return clear();
			e.stopPropagation();

			if (get$2(opened)) {
				get$2(input).focus();
				close();
			}
		}

		function onBackspace(e) {
			if (debug()) {
				console.log("onBackspace");
			}

			unselectItem(selectedItem()[selectedItem().length - 1]);
		}

		function onFocusInternal() {
			if (debug()) {
				console.log("onFocus");
			}

			onFocus()();
			resetListToAllItemsAndOpen();
		}

		function onBlurInternal() {
			if (debug()) {
				console.log("onBlur");
			}

			if (closeOnBlur()) {
				close();
			}

			onBlur()();
		}

		function resetListToAllItemsAndOpen() {
			if (debug()) {
				console.log("resetListToAllItemsAndOpen");
			}

			if (searchFunction() && !listItems.length) {
				search();
			} else if (!text$1()) {
				set(filteredListItems, listItems);
			}

			open();

			// find selected item
			if (selectedItem()) {
				if (debug()) {
					console.log("Searching currently selected item: " + JSON.stringify(selectedItem()));
				}

				const index = findItemIndex(selectedItem(), get$2(filteredListItems));

				if (index >= 0) {
					set(highlightIndex, index);
					highlight();
				}
			}
		}

		function findItemIndex(item, items) {
			if (debug()) {
				console.log("Finding index for item", item);
			}

			let index = -1;

			for (let i = 0; i < items.length; i++) {
				const listItem = items[i];

				if ("undefined" === typeof listItem) {
					if (debug()) {
						console.log(`listItem ${i} is undefined. Skipping.`);
					}

					continue;
				}

				if (debug()) {
					console.log("Item " + i + ": " + JSON.stringify(listItem));
				}

				if (item === listItem.item) {
					index = i;
					break;
				}
			}

			if (debug()) {
				if (index >= 0) {
					console.log("Found index for item: " + index);
				} else {
					console.warn("Not found index for item: " + item);
				}
			}

			return index;
		}

		function open() {
			if (debug()) {
				console.log("open");
			}

			// check if the search text has more than the min chars required
			if (get$2(locked) || notEnoughSearchText()) {
				return;
			}

			set(setPositionOnNextUpdate, true);
			set(opened, true);
		}

		function close() {
			if (debug()) {
				console.log("close");
			}

			set(opened, false);
			set(loading, false);

			if (!text$1() && selectFirstIfEmpty()) {
				set(highlightIndex, 0);
				selectItem();
			}
		}

		function notEnoughSearchText() {
			return minCharactersToSearch() > 0 && get$2(filteredTextLength) < minCharactersToSearch() && (// When no searchFunction is defined, the menu should always open when the input is focused
			searchFunction() || get$2(filteredTextLength) > 0);
		}

		function closeIfMinCharsToSearchReached() {
			if (notEnoughSearchText()) {
				close();
				return true;
			}

			return false;
		}

		function clear() {
			if (debug()) {
				console.log("clear");
			}

			text$1("");
			selectedItem(multiple() ? [] : undefined);

			setTimeout(() => {
				get$2(input).focus();
			});
		}

		function highlightFilter(keywords, field) {
			return (item) => {
				let label = item[field];
				const newItem = Object.assign({ highlighted: undefined }, item);

				newItem.highlighted = label;

				const labelLowercase = label.toLowerCase();
				const labelLowercaseNoAc = ignoreAccents() ? removeAccents(labelLowercase) : labelLowercase;

				if (keywords && keywords.length) {
					const positions = [];

					for (let i = 0; i < keywords.length; i++) {
						let keyword = keywords[i];

						if (ignoreAccents()) {
							keyword = removeAccents(keyword);
						}

						const keywordLen = keyword.length;
						let pos1 = 0;

						do {
							pos1 = labelLowercaseNoAc.indexOf(keyword, pos1);

							if (pos1 >= 0) {
								let pos2 = pos1 + keywordLen;

								positions.push([pos1, pos2]);
								pos1 = pos2;
							}
						} while (pos1 !== -1);
					}

					if (positions.length > 0) {
						const keywordPatterns = new Set();

						for (let i = 0; i < positions.length; i++) {
							const pair = positions[i];
							const pos1 = pair[0];
							const pos2 = pair[1];
							const keywordPattern = labelLowercase.substring(pos1, pos2);

							keywordPatterns.add(keywordPattern);
						}

						for (let keywordPattern of keywordPatterns) {
							// FIXME pst: workarond for wrong replacement <b> tags
							if (keywordPattern === "b") {
								continue;
							}

							const reg = new RegExp("(" + keywordPattern + ")", "ig");
							const newHighlighted = newItem.highlighted.replace(reg, "<b>$1</b>");

							newItem.highlighted = newHighlighted;
						}
					}
				}

				return newItem;
			};
		}

		function removeAccents(str) {
			return str.normalize("NFD").replace(/[\u0300-\u036f]/g, "");
		}

		function isConfirmed(listItem) {
			if (!selectedItem()) {
				return false;
			}

			if (multiple()) {
				return selectedItem().includes(listItem);
			} else {
				return listItem === selectedItem();
			}
		}

		let draggingOver = mutable_state(false);

		function dragstart(event, index) {
			if (orderableSelection()) {
				event.dataTransfer.setData("source", index);
			}
		}

		function dragover(event, index) {
			if (orderableSelection()) {
				event.preventDefault();
				set(draggingOver, index);
			}
		}

		function dragleave(event, index) {
			if (orderableSelection()) {
				set(draggingOver, false);
			}
		}

		function drop(event, index) {
			if (orderableSelection()) {
				event.preventDefault();
				set(draggingOver, false);

				let from = parseInt(event.dataTransfer.getData("source"));
				let to = index;

				if (from != to) {
					moveSelectedItem(from, to);
				}
			}
		}

		function moveSelectedItem(from, to) {
			let newSelection = [...selectedItem()];

			if (from < to) {
				newSelection.splice(to + 1, 0, newSelection[from]);
				newSelection.splice(from, 1);
			} else {
				newSelection.splice(to, 0, newSelection[from]);
				newSelection.splice(from + 1, 1);
			}

			selectedItem(newSelection);
		}

		function setScrollAwareListPosition() {
			const { height: viewPortHeight } = window.visualViewport;
			const { bottom: inputButtom, height: inputHeight } = get$2(inputContainer).getBoundingClientRect();
			const { height: listHeight } = get$2(list).getBoundingClientRect();

			if (inputButtom + listHeight > viewPortHeight) {
				mutate(list, get$2(list).style.top = `-${inputHeight + listHeight}px`);
			} else {
				mutate(list, get$2(list).style.top = "0px");
			}
		}

		legacy_pre_effect(
			() => (
				deep_read_state(items()),
				deep_read_state(searchFunction())
			),
			() => {
				(
					items(),
					searchFunction() || prepareListItems()
				);
			}
		);

		legacy_pre_effect(() => (deep_read_state(selectedItem())), () => {
			(
				selectedItem(),
				onSelectedItemChanged()
			);
		});

		legacy_pre_effect(
			() => (
				get$2(filteredListItems),
				get$2(highlightIndex)
			),
			() => {
				highlightedItem(get$2(filteredListItems) && get$2(highlightIndex) && get$2(highlightIndex) >= 0 && get$2(highlightIndex) < get$2(filteredListItems).length ? get$2(filteredListItems)[get$2(highlightIndex)].item : null);
			}
		);

		legacy_pre_effect(
			() => (
				get$2(opened),
				deep_read_state(items()),
				get$2(filteredTextLength)
			),
			() => {
				set(showList, get$2(opened) && (items() && items().length > 0 || get$2(filteredTextLength) > 0));
			}
		);

		legacy_pre_effect(
			() => (
				deep_read_state(multiple()),
				deep_read_state(selectedItem())
			),
			() => {
				set(hasSelection, multiple() && selectedItem() && selectedItem().length > 0 || !multiple() && selectedItem());
			}
		);

		legacy_pre_effect(
			() => (
				deep_read_state(showClear()),
				deep_read_state(lock()),
				deep_read_state(multiple()),
				get$2(hasSelection)
			),
			() => {
				set(clearable, showClear() || (lock() || multiple()) && get$2(hasSelection));
			}
		);

		legacy_pre_effect(
			() => (
				deep_read_state(lock()),
				get$2(hasSelection)
			),
			() => {
				set(locked, lock() && get$2(hasSelection));
			}
		);

		legacy_pre_effect_reset();
		init();

		var div = root$t();

		event("click", $window, onDocumentClick);
		event("scroll", $window, () => set(setPositionOnNextUpdate, true));

		var select = child(div);
		var node = child(select);

		{
			var consequent = ($$anchor) => {
				var option = root_1$n();
				var option_value = {};
				var text_1 = child(option, true);

				template_effect(() => set_text(text_1, safeLabelFunction(selectedItem())));
				reset(option);

				template_effect(() => {
					if (option_value !== (option_value = valueFunction()(selectedItem(), true))) {
						option.value = null == (option.__value = valueFunction()(selectedItem(), true)) ? "" : valueFunction()(selectedItem(), true);
					}
				});

				append($$anchor, option);
			};

			var alternate = ($$anchor) => {
				var fragment = comment();
				var node_1 = first_child(fragment);

				{
					var consequent_1 = ($$anchor) => {
						var fragment_1 = comment();
						var node_2 = first_child(fragment_1);

						each(node_2, 1, selectedItem, index$d, ($$anchor, i) => {
							var option_1 = root_4$b();
							var option_1_value = {};
							var text_2 = child(option_1, true);

							template_effect(() => set_text(text_2, safeLabelFunction(get$2(i))));
							reset(option_1);

							template_effect(() => {
								if (option_1_value !== (option_1_value = valueFunction()(get$2(i), true))) {
									option_1.value = null == (option_1.__value = valueFunction()(get$2(i), true)) ? "" : valueFunction()(get$2(i), true);
								}
							});

							append($$anchor, option_1);
						});

						append($$anchor, fragment_1);
					};

					if_block(
						node_1,
						($$render) => {
							if (multiple() && get$2(hasSelection)) $$render(consequent_1);
						},
						true
					);
				}

				append($$anchor, fragment);
			};

			if_block(node, ($$render) => {
				if (!multiple() && get$2(hasSelection)) $$render(consequent); else $$render(alternate, false);
			});
		}

		reset(select);

		var div_1 = sibling(select, 2);
		var node_3 = child(div_1);

		{
			var consequent_2 = ($$anchor) => {
				var fragment_2 = comment();
				var node_4 = first_child(fragment_2);

				each(node_4, 11, selectedItem, (tagItem) => valueFunction()(tagItem, true), ($$anchor, tagItem, i) => {
					var div_2 = root_6$9();

					set_attribute(div_2, "draggable", true);

					var node_5 = child(div_2);

					slot(
						node_5,
						$$props,
						"tag",
						{
							get label() {
								return safeLabelFunction(get$2(tagItem));
							},
							get item() {
								return get$2(tagItem);
							},
							unselectItem
						},
						($$anchor) => {
							var div_3 = root_7$3();
							var span = child(div_3);
							var text_3 = child(span, true);

							template_effect(() => set_text(text_3, safeLabelFunction(get$2(tagItem))));
							reset(span);

							var span_1 = sibling(span, 2);
							var event_handler = derived(() => unselectItem(get$2(tagItem)));

							reset(div_3);

							event("click", span_1, preventDefault(function (...$$args) {
								get$2(event_handler)?.apply(this, $$args);
							}));

							event("keypress", span_1, preventDefault((e) => {
								e.key == "Enter" && unselectItem(get$2(tagItem));
							}));

							append($$anchor, div_3);
						}
					);

					reset(div_2);
					template_effect(() => toggle_class(div_2, "is-active", get$2(draggingOver) === get$2(i)));
					animation(div_2, () => flip, () => ({ duration: 200 }));
					transition(3, div_2, () => fade, () => ({ duration: 200 }));
					event("dragstart", div_2, (event) => dragstart(event, get$2(i)));
					event("dragover", div_2, (event) => dragover(event, get$2(i)));
					event("dragleave", div_2, (event) => dragleave(event, get$2(i)));
					event("drop", div_2, (event) => drop(event, get$2(i)));
					append($$anchor, div_2);
				});

				append($$anchor, fragment_2);
			};

			if_block(node_3, ($$render) => {
				if (multiple() && get$2(hasSelection)) $$render(consequent_2);
			});
		}

		var input_1 = sibling(node_3, 2);

		remove_input_defaults(input_1);

		let attributes;

		bind_this(input_1, ($$value) => set(input, $$value), () => get$2(input));

		var node_6 = sibling(input_1, 2);

		{
			var consequent_3 = ($$anchor) => {
				var span_2 = root_8$2();
				var node_7 = child(span_2);

				html(node_7, clearText);
				reset(span_2);
				event("click", span_2, clear);

				event("keypress", span_2, (e) => {
					e.key == "Enter" && clear();
				});

				append($$anchor, span_2);
			};

			if_block(node_6, ($$render) => {
				if (get$2(clearable)) $$render(consequent_3);
			});
		}

		reset(div_1);
		bind_this(div_1, ($$value) => set(inputContainer, $$value), () => get$2(inputContainer));

		var div_4 = sibling(div_1, 2);
		var node_8 = child(div_4);

		{
			var consequent_8 = ($$anchor) => {
				var fragment_3 = root_9$1();
				var node_9 = first_child(fragment_3);

				slot(
					node_9,
					$$props,
					"dropdown-header",
					{
						get nbItems() {
							return get$2(filteredListItems).length;
						},
						get maxItemsToShowInList() {
							return maxItemsToShowInList();
						}
					},
					null
				);

				var node_10 = sibling(node_9, 2);

				each(node_10, 1, () => get$2(filteredListItems), index$d, ($$anchor, listItem, i) => {
					var fragment_4 = comment();
					var node_11 = first_child(fragment_4);

					{
						var consequent_5 = ($$anchor) => {
							var div_5 = root_11$3();
							const class_directive = derived_safe_equal(() => isConfirmed(get$2(listItem).item));

							template_effect(() => toggle_class(div_5, "confirmed", get$2(class_directive)));

							var node_12 = child(div_5);

							slot(
								node_12,
								$$props,
								"item",
								{
									get item() {
										return get$2(listItem).item;
									},
									get label() {
										return get$2(listItem).highlighted ? get$2(listItem).highlighted : get$2(listItem).label;
									}
								},
								($$anchor) => {
									var fragment_5 = comment();
									var node_13 = first_child(fragment_5);

									{
										var consequent_4 = ($$anchor) => {
											var fragment_6 = comment();
											var node_14 = first_child(fragment_6);

											html(node_14, () => get$2(listItem).highlighted);
											append($$anchor, fragment_6);
										};

										var alternate_1 = ($$anchor) => {
											var fragment_7 = comment();
											var node_15 = first_child(fragment_7);

											html(node_15, () => get$2(listItem).label);
											append($$anchor, fragment_7);
										};

										if_block(node_13, ($$render) => {
											if (get$2(listItem).highlighted) $$render(consequent_4); else $$render(alternate_1, false);
										});
									}

									append($$anchor, fragment_5);
								}
							);

							reset(div_5);
							template_effect(() => toggle_class(div_5, "selected", i === get$2(highlightIndex)));
							event("click", div_5, () => onListItemClick(get$2(listItem)));

							event("keypress", div_5, (e) => {
								e.key == "Enter" && onListItemClick(get$2(listItem));
							});

							event("pointerenter", div_5, () => {
								set(highlightIndex, i);
							});

							append($$anchor, div_5);
						};

						if_block(node_11, ($$render) => {
							if (get$2(listItem) && (maxItemsToShowInList() <= 0 || i < maxItemsToShowInList())) $$render(consequent_5);
						});
					}

					append($$anchor, fragment_4);
				});

				var node_16 = sibling(node_10, 2);

				slot(
					node_16,
					$$props,
					"dropdown-footer",
					{
						get nbItems() {
							return get$2(filteredListItems).length;
						},
						get maxItemsToShowInList() {
							return maxItemsToShowInList();
						}
					},
					($$anchor) => {
						var fragment_8 = comment();
						var node_17 = first_child(fragment_8);

						{
							var consequent_7 = ($$anchor) => {
								var fragment_9 = comment();
								var node_18 = first_child(fragment_9);

								{
									var consequent_6 = ($$anchor) => {
										var div_6 = root_17();
										var text_4 = child(div_6);

										reset(div_6);

										template_effect(() => set_text(text_4, `...${get$2(filteredListItems).length - maxItemsToShowInList() ?? ""}
              ${moreItemsText() ?? ""}`));

										append($$anchor, div_6);
									};

									if_block(node_18, ($$render) => {
										if (moreItemsText()) $$render(consequent_6);
									});
								}

								append($$anchor, fragment_9);
							};

							if_block(node_17, ($$render) => {
								if (maxItemsToShowInList() > 0 && get$2(filteredListItems).length > maxItemsToShowInList()) $$render(consequent_7);
							});
						}

						append($$anchor, fragment_8);
					}
				);

				append($$anchor, fragment_3);
			};

			var alternate_4 = ($$anchor) => {
				var fragment_10 = comment();
				var node_19 = first_child(fragment_10);

				{
					var consequent_9 = ($$anchor) => {
						var div_7 = root_19$1();
						var node_20 = child(div_7);

						slot(
							node_20,
							$$props,
							"loading",
							{
								get loadingText() {
									return loadingText();
								}
							},
							($$anchor) => {
								var text_5 = text();

								template_effect(() => set_text(text_5, loadingText()));
								append($$anchor, text_5);
							}
						);

						reset(div_7);
						append($$anchor, div_7);
					};

					var alternate_3 = ($$anchor) => {
						var fragment_12 = comment();
						var node_21 = first_child(fragment_12);

						{
							var consequent_10 = ($$anchor) => {
								var div_8 = root_22$1();
								var node_22 = child(div_8);

								slot(
									node_22,
									$$props,
									"create",
									{
										get createText() {
											return createText();
										}
									},
									($$anchor) => {
										var text_6 = text();

										template_effect(() => set_text(text_6, createText()));
										append($$anchor, text_6);
									}
								);

								reset(div_8);
								event("click", div_8, selectItem);

								event("keypress", div_8, (e) => {
									e.key == "Enter" && selectItem();
								});

								append($$anchor, div_8);
							};

							var alternate_2 = ($$anchor) => {
								var fragment_14 = comment();
								var node_23 = first_child(fragment_14);

								{
									var consequent_11 = ($$anchor) => {
										var div_9 = root_25();
										var node_24 = child(div_9);

										slot(
											node_24,
											$$props,
											"no-results",
											{
												get noResultsText() {
													return noResultsText();
												}
											},
											($$anchor) => {
												var text_7 = text();

												template_effect(() => set_text(text_7, noResultsText()));
												append($$anchor, text_7);
											}
										);

										reset(div_9);
										append($$anchor, div_9);
									};

									if_block(
										node_23,
										($$render) => {
											if (noResultsText()) $$render(consequent_11);
										},
										true
									);
								}

								append($$anchor, fragment_14);
							};

							if_block(
								node_21,
								($$render) => {
									if (create()) $$render(consequent_10); else $$render(alternate_2, false);
								},
								true
							);
						}

						append($$anchor, fragment_12);
					};

					if_block(
						node_19,
						($$render) => {
							if (get$2(loading) && loadingText()) $$render(consequent_9); else $$render(alternate_3, false);
						},
						true
					);
				}

				append($$anchor, fragment_10);
			};

			if_block(node_8, ($$render) => {
				if (get$2(filteredListItems) && get$2(filteredListItems).length > 0) $$render(consequent_8); else $$render(alternate_4, false);
			});
		}

		reset(div_4);
		bind_this(div_4, ($$value) => set(list, $$value), () => get$2(list));
		reset(div);

		template_effect(() => {
			set_class(div, `${(className() ? className() : '') ?? ""} autocomplete select is-fullwidth ${uniqueId ?? ""} svelte-75ckfb`);
			toggle_class(div, "hide-arrow", hideArrow() || !items().length);
			toggle_class(div, "is-multiple", multiple());
			toggle_class(div, "show-clear", get$2(clearable));
			toggle_class(div, "is-loading", showLoadingIndicator() && get$2(loading));
			set_attribute(select, "name", selectName());
			set_attribute(select, "id", selectId());
			select.multiple = multiple();

			attributes = set_attributes(
				input_1,
				attributes,
				{
					type: "text",
					class: `${(inputClassName() ? inputClassName() : '') ?? ""} ${(noInputStyles() ? '' : 'input autocomplete-input') ?? ""}`,
					id: inputId() ? inputId() : "",
					autocomplete: html5autocomplete() ? "on" : autocompleteOffValue(),
					placeholder: placeholder(),
					name: name(),
					disabled: disabled(),
					required: required(),
					title: title(),
					readonly: readonly() || get$2(locked),
					tabindex: tabindex(),
					...$$restProps
				},
				"svelte-75ckfb"
			);

			set_class(div_4, `${(dropdownClassName() ? dropdownClassName() : '') ?? ""} autocomplete-list ${(get$2(showList) ? '' : 'hidden') ?? ""}
    is-fullwidth svelte-75ckfb`);
		});

		bind_value(input_1, text$1);
		event("input", input_1, onInput);
		event("focus", input_1, onFocusInternal);
		event("blur", input_1, onBlurInternal);
		event("keydown", input_1, onKeyDown);
		event("click", input_1, onInputClick);
		event("keypress", input_1, onKeyPress);
		event("dragover", input_1, (event) => dragover(event, selectedItem().length - 1));
		event("drop", input_1, (event) => drop(event, selectedItem().length - 1));
		append($$anchor, div);
		bind_prop($$props, "highlightFilter", highlightFilter);
		return pop({ highlightFilter });
	}

	var root_3$b = template(`<p> </p>`);

	function Ui_autocomplete($$anchor, $$props) {
		push($$props, true);

		const $$stores = setup_stores();
		const $LOCALE = () => store_get(LOCALE, "$LOCALE", $$stores);

		/**
		 * @typedef {Object} Props
		 * @property {string} [idField]
		 * @property {string} [labelField]
		 * @property {number} [minCharactersToSearch]
		 * @property {boolean} [selectFirstIfEmpty]
		 * @property {number} [maxItemsToShowInList]
		 * @property {string} [noResultsText]
		 * @property {boolean} [showClear]
		 * @property {any} value
		 * @property {string} [placeholder]
		 * @property {string} [fieldname]
		 * @property {boolean} [disabled]
		 * @property {boolean} [readonly]
		 * @property {boolean} [icon]
		 * @property {boolean} [inputStarted]
		 * @property {boolean} [valid]
		 * @property {boolean} [validated]
		 * @property {boolean} [errors]
		 * @property {boolean} [formErrors]
		 * @property {any} [searchFunction]
		 */
		/** @type {Props} */
		let value = prop($$props, "value", 15),
			placeholder = prop($$props, "placeholder", 3, ""),
			fieldname = prop($$props, "fieldname", 3, "checkbox-list"),
			disabled = prop($$props, "disabled", 3, false),
			readonly = prop($$props, "readonly", 3, false),
			required = prop($$props, "required", 3, false),
			valid = prop($$props, "valid", 3, true),
			onchange = prop($$props, "onchange", 3, () => true),
			others = rest_props($$props, [
				"$$slots",
				"$$events",
				"$$legacy",
				"value",
				"placeholder",
				"fieldname",
				"disabled",
				"readonly",
				"required",
				"valid",
				"onchange"
			]);

		let invalid = derived(() => !valid());
		const oninput = UICommon$1.onInput(fieldname(), onchange());
		var fragment = comment();
		var node = first_child(fragment);

		{
			var consequent = ($$anchor) => {
				var value_1 = derived(() => value() ? value().title : "");

				Ui_textfield($$anchor, spread_props(
					{
						get value() {
							return get$2(value_1);
						},
						get fieldname() {
							return fieldname();
						},
						get placeholder() {
							return placeholder();
						}
					},
					() => others
				));
			};

			var alternate_1 = ($$anchor) => {
				var fragment_2 = comment();
				var node_1 = first_child(fragment_2);

				{
					var consequent_1 = ($$anchor) => {
						var p = root_3$b();
						var text = child(p, true);

						reset(p);
						template_effect(() => set_text(text, value() ? value().title : ""));
						append($$anchor, p);
					};

					var alternate = ($$anchor) => {
						SimpleAutocomplete($$anchor, spread_props(
							{
								onChange: oninput,
								get valid() {
									return valid();
								},
								get invalid() {
									return get$2(invalid);
								},
								get required() {
									return required();
								},
								get placeholder() {
									return $LOCALE()[placeholder()];
								}
							},
							() => others,
							{
								get selectedItem() {
									return value();
								},
								set selectedItem($$value) {
									value($$value);
								}
							}
						));
					};

					if_block(
						node_1,
						($$render) => {
							if (readonly()) $$render(consequent_1); else $$render(alternate, false);
						},
						true
					);
				}

				append($$anchor, fragment_2);
			};

			if_block(node, ($$render) => {
				if (disabled()) $$render(consequent); else $$render(alternate_1, false);
			});
		}

		append($$anchor, fragment);
		pop();
	}

	var root_1$m = template(`<p><time> </time></p>`);
	var root_2$h = template(`<input>`);

	function Ui_date($$anchor, $$props) {
		push($$props, true);

		const $$stores = setup_stores();
		const $LOCALE = () => store_get(LOCALE, "$LOCALE", $$stores);

		/** @type {import('./type').UIInputProps} */
		let value = prop($$props, "value", 31, () => proxy(new Date())),
			placeholder = prop($$props, "placeholder", 3, ""),
			fieldname = prop($$props, "fieldname", 3, "datetime"),
			pattern = prop($$props, "pattern", 3, "d{4}-d{2}-d{2}"),
			required = prop($$props, "required", 3, true),
			disabled = prop($$props, "disabled", 3, false),
			readonly = prop($$props, "readonly", 3, false),
			valid = prop($$props, "valid", 3, true),
			classes = prop($$props, "class", 3, ""),
			onchange = prop($$props, "onchange", 3, () => true),
			others = rest_props($$props, [
				"$$slots",
				"$$events",
				"$$legacy",
				"value",
				"placeholder",
				"fieldname",
				"pattern",
				"required",
				"disabled",
				"readonly",
				"valid",
				"class",
				"onchange"
			]);

		onMount(() => {
			if (value() instanceof Date) {
				value(value().toISOString().split("T")[0]);
			} else if (value().indexOf("T") > 0) {
				value(value().split("T")[0]);
			}
		});

		let invalid = derived(() => !valid());
		const oninput = UICommon$1.onInput(fieldname(), onchange());
		var fragment = comment();
		var node = first_child(fragment);

		{
			var consequent = ($$anchor) => {
				var p = root_1$m();
				var time = child(p);
				var text = child(time, true);

				template_effect(() => set_text(text, UICommon$1.tryFormatLocaleDateTime(value())));
				reset(time);
				reset(p);
				template_effect(() => set_attribute(time, "datetime", value()));
				append($$anchor, p);
			};

			var alternate = ($$anchor) => {
				var input = root_2$h();

				remove_input_defaults(input);

				let attributes;

				template_effect(() => attributes = set_attributes(input, attributes, {
					id: `form-field-date-${fieldname() ?? ""}`,
					class: `input ${classes() ?? ""}`,
					type: "date",
					name: fieldname(),
					invalid: get$2(invalid),
					required: required(),
					readonly: readonly(),
					disabled: disabled(),
					placeholder: $LOCALE()[placeholder()],
					pattern: pattern(),
					autocomplete: fieldname(),
					onchange: oninput,
					oninput,
					"aria-controls": `input-field-helper-${fieldname() ?? ""}`,
					"aria-describedby": `input-field-helper-${fieldname() ?? ""}`,
					...others
				}));

				bind_value(input, value);
				append($$anchor, input);
			};

			if_block(node, ($$render) => {
				if (readonly()) $$render(consequent); else $$render(alternate, false);
			});
		}

		append($$anchor, fragment);
		pop();
	}

	var root_2$g = template(`<p> </p>`);
	var root_3$a = template(`<input>`);

	function Ui_datetime_in_tz($$anchor, $$props) {
		push($$props, true);

		function removeMsFromDate(isoDate, markAsZULU = false) {
			return isoDate.split(".")[0] + (markAsZULU ? "" : "Z");
		}

		function shiftDatetime(isoDate, shift) {
			try {
				const dateUtc = new Date(markAsZULU(isoDate)).getTime();
				const offset = shift * -60000;

				if (dateIsValid(dateUtc + offset)) {
					const newDate = new Date(dateUtc + offset);
					const newIsoDate = newDate.toISOString();

					return removeMsFromDate(newIsoDate, true);
				}
			} catch {
				return;
			}
		}

		function markAsZULU(dateString) {
			return dateString && dateString.at(-1) !== "Z" ? dateString + "Z" : dateString;
		}

		/** @type {import('./type').UIInputProps} */
		let fieldname = prop($$props, "fieldname", 3, "datetime"),
			value = prop($$props, "value", 31, () => proxy(removeMsFromDate(new Date().toISOString()))),
			timezoneOffset = prop($$props, "timezoneOffset", 3, 0),
			required = prop($$props, "required", 3, false),
			disabled = prop($$props, "disabled", 3, false),
			readonly = prop($$props, "readonly", 3, false),
			valid = prop($$props, "valid", 3, true),
			classes = prop($$props, "class", 3, ""),
			onchange = prop($$props, "onchange", 3, () => true),
			others = rest_props($$props, [
				"$$slots",
				"$$events",
				"$$legacy",
				"fieldname",
				"value",
				"timezoneOffset",
				"required",
				"disabled",
				"readonly",
				"valid",
				"class",
				"onchange"
			]);

		let shiftedValue = state(undefined),
			prevShiftedValue;

		const setShifted = (val) => {
			if (dateIsValid(val)) {
				prevShiftedValue = get$2(shiftedValue);
				set(shiftedValue, proxy(val));
			}
		};

		const resetShiftedValue = () => {
			set(shiftedValue, proxy(prevShiftedValue));
		};

		onMount(() => {
			setShifted(shiftDatetime(value(), timezoneOffset()));
		});

		const dateIsValid = (date) => {
			try {
				new Date(date);
				return true;
			} catch {
				return false;
			}
		};

		const changed = () => value() !== shiftDatetime(get$2(shiftedValue), -timezoneOffset());

		const dispatchChange = () => {
			setShifted(get$2(shiftedValue));
			value(markAsZULU(shiftDatetime(get$2(shiftedValue), -timezoneOffset())));
			onchange()({ field: fieldname(), value: value() });
		};

		function onChange(ev) {
			if (ev.currentTarget.value && get$2(shiftedValue) && dateIsValid(get$2(shiftedValue))) {
				if (changed()) {
					dispatchChange();
				}

				return true;
			} else {
				resetShiftedValue();
			}

			return false;
		}

		let invalid = derived(() => !valid());
		var fragment = comment();
		var node = first_child(fragment);

		{
			var consequent_1 = ($$anchor) => {
				var fragment_1 = comment();
				var node_1 = first_child(fragment_1);

				{
					var consequent = ($$anchor) => {
						var p = root_2$g();
						var text = child(p, true);

						reset(p);
						template_effect(() => set_text(text, get$2(shiftedValue)));
						append($$anchor, p);
					};

					var alternate = ($$anchor) => {
						var input = root_3$a();

						remove_input_defaults(input);

						let attributes;

						template_effect(() => attributes = set_attributes(input, attributes, {
							id: `form-field-datetime-in-timezone-${fieldname() ?? ""}`,
							class: `input ${classes() ?? ""}`,
							type: "datetime-local",
							name: fieldname(),
							invalid: get$2(invalid),
							disabled: disabled(),
							required: required(),
							readonly: readonly(),
							autocomplete: fieldname(),
							onchange: onChange,
							onblur: onChange,
							oninput: onChange,
							"aria-controls": `input-field-helper-${fieldname() ?? ""}`,
							"aria-describedby": `input-field-helper-${fieldname() ?? ""}`,
							...others
						}));

						bind_value(input, () => get$2(shiftedValue), ($$value) => set(shiftedValue, $$value));
						append($$anchor, input);
					};

					if_block(node_1, ($$render) => {
						if (readonly()) $$render(consequent); else $$render(alternate, false);
					});
				}

				append($$anchor, fragment_1);
			};

			if_block(node, ($$render) => {
				if (get$2(shiftedValue)) $$render(consequent_1);
			});
		}

		append($$anchor, fragment);
		pop();
	}

	var root_1$l = template(`<p> </p>`);
	var root_2$f = template(`<input>`);

	function Ui_email($$anchor, $$props) {
		push($$props, true);

		const $$stores = setup_stores();
		const $LOCALE = () => store_get(LOCALE, "$LOCALE", $$stores);

		/** @type {import('./type').UIInputProps} */
		let value = prop($$props, "value", 15, ""),
			placeholder = prop($$props, "placeholder", 3, ""),
			fieldname = prop($$props, "fieldname", 3, "email"),
			required = prop($$props, "required", 3, true),
			readonly = prop($$props, "readonly", 3, false),
			disabled = prop($$props, "disabled", 3, false),
			valid = prop($$props, "valid", 3, true),
			classes = prop($$props, "class", 3, ""),
			onchange = prop($$props, "onchange", 3, () => true),
			others = rest_props($$props, [
				"$$slots",
				"$$events",
				"$$legacy",
				"value",
				"placeholder",
				"fieldname",
				"required",
				"readonly",
				"disabled",
				"valid",
				"class",
				"onchange"
			]);

		let invalid = derived(() => !valid());
		const oninput = UICommon$1.onInput(fieldname(), onchange());
		var fragment = comment();
		var node = first_child(fragment);

		{
			var consequent = ($$anchor) => {
				var p = root_1$l();
				var text = child(p, true);

				reset(p);
				template_effect(() => set_text(text, value()));
				append($$anchor, p);
			};

			var alternate = ($$anchor) => {
				var input = root_2$f();

				remove_input_defaults(input);

				let attributes;

				template_effect(() => attributes = set_attributes(input, attributes, {
					id: `form-field-email-${fieldname() ?? ""}`,
					class: `input ${classes() ?? ""}`,
					type: "email",
					name: fieldname(),
					invalid: get$2(invalid),
					required: required(),
					readonly: readonly(),
					disabled: disabled(),
					placeholder: $LOCALE()[placeholder()],
					autocomplete: fieldname(),
					onchange: oninput,
					oninput,
					"aria-controls": `input-field-helper-${fieldname() ?? ""}`,
					"aria-describedby": `input-field-helper-${fieldname() ?? ""}`,
					...others
				}));

				bind_value(input, value);
				append($$anchor, input);
			};

			if_block(node, ($$render) => {
				if (readonly()) $$render(consequent); else $$render(alternate, false);
			});
		}

		append($$anchor, fragment);
		pop();
	}

	var root$s = template(`<input type="hidden">`);

	function Ui_hidden($$anchor, $$props) {
		/** @type {import('./type').UIInputProps} */
		let value = prop($$props, "value", 15, ""),
			fieldname = prop($$props, "fieldname", 3, "hidden"),
			required = prop($$props, "required", 3, true),
			readonly = prop($$props, "readonly", 3, false),
			others = rest_props($$props, [
				"$$slots",
				"$$events",
				"$$legacy",
				"value",
				"fieldname",
				"required",
				"readonly"
			]);

		var input = root$s();

		remove_input_defaults(input);

		template_effect(() => {
			set_attribute(input, "id", `form-field-hidden-${fieldname() ?? ""}`);
			input.required = required();
			input.readOnly = readonly();
			set_attribute(input, "name", fieldname());
			set_attribute(input, "others", others);
		});

		bind_value(input, value);
		append($$anchor, input);
	}

	var root_1$k = template(`<p> </p>`);
	var root_2$e = template(`<textarea></textarea>`);

	function Ui_textarea($$anchor, $$props) {
		push($$props, true);

		const $$stores = setup_stores();
		const $LOCALE = () => store_get(LOCALE, "$LOCALE", $$stores);

		/** @type {import('./type').UIInputProps} */
		let value = prop($$props, "value", 15, ""),
			placeholder = prop($$props, "placeholder", 3, ""),
			fieldname = prop($$props, "fieldname", 3, "textarea"),
			rows = prop($$props, "rows", 3, 10),
			required = prop($$props, "required", 3, true),
			readonly = prop($$props, "readonly", 3, false),
			disabled = prop($$props, "disabled", 3, false),
			valid = prop($$props, "valid", 3, true),
			classes = prop($$props, "class", 3, ""),
			onchange = prop($$props, "onchange", 3, () => true),
			others = rest_props($$props, [
				"$$slots",
				"$$events",
				"$$legacy",
				"value",
				"placeholder",
				"fieldname",
				"rows",
				"required",
				"readonly",
				"disabled",
				"valid",
				"class",
				"onchange"
			]);

		let invalid = derived(() => !valid());
		const oninput = UICommon$1.onInput(fieldname(), onchange());
		var fragment = comment();
		var node = first_child(fragment);

		{
			var consequent = ($$anchor) => {
				var p = root_1$k();
				var text = child(p, true);

				reset(p);
				template_effect(() => set_text(text, value()));
				append($$anchor, p);
			};

			var alternate = ($$anchor) => {
				var textarea = root_2$e();

				remove_textarea_child(textarea);

				let attributes;

				template_effect(() => attributes = set_attributes(textarea, attributes, {
					id: `form-field-textarea-${fieldname() ?? ""}`,
					class: `textarea ${classes() ?? ""}`,
					name: fieldname(),
					invalid: get$2(invalid),
					disabled: disabled(),
					required: required(),
					readonly: readonly(),
					onblur: oninput,
					placeholder: $LOCALE()[placeholder()],
					rows: rows(),
					"aria-controls": `input-field-helper-${fieldname() ?? ""}`,
					"aria-describedby": `input-field-helper-${fieldname() ?? ""}`,
					...others
				}));

				bind_value(textarea, value);
				append($$anchor, textarea);
			};

			if_block(node, ($$render) => {
				if (readonly()) $$render(consequent); else $$render(alternate, false);
			});
		}

		append($$anchor, fragment);
		pop();
	}

	function Ui_json_area($$anchor, $$props) {
		push($$props, true);

		/** @type {import('./type').UIInputProps} */
		let value = prop($$props, "value", 31, () => proxy({})),
			fieldname = prop($$props, "fieldname", 3, "jsonarea"),
			valid = prop($$props, "valid", 15, true),
			onchange = prop($$props, "onchange", 3, () => true),
			onerror = prop($$props, "onerror", 3, () => {}),
			others = rest_props($$props, [
				"$$slots",
				"$$events",
				"$$legacy",
				"value",
				"fieldname",
				"valid",
				"onchange",
				"onerror"
			]);

		let _value = state("{}");

		onMount(() => {
			try {
				set(_value, proxy(JSON.stringify(value(), null, 4)));
			} catch {
				set(_value, "{}");
			}
		});

		function onChange({ value: val }) {
			try {
				value(JSON.parse(val));
				valid(true);
				onchange()({ field: fieldname(), value: value() });
			} catch(error) {
				onerror()(error.message);
			}

			return true;
		}

		Ui_textarea($$anchor, spread_props(
			{
				onchange: onChange,
				get valid() {
					return valid();
				}
			},
			() => others,
			{
				get value() {
					return get$2(_value);
				},
				set value($$value) {
					set(_value, proxy($$value));
				}
			}
		));

		pop();
	}

	var _lib = /*#__PURE__*/new WeakMap();
	let Lib = /*#__PURE__*/function () {
	  function Lib(seedLib) {
	    _classCallCheck(this, Lib);
	    _classPrivateFieldInitSpec(this, _lib, {});
	    if (seedLib instanceof Lib) {
	      this.import(seedLib.getContent());
	    }
	  }

	  /**
	   *
	   * @params {string}  mode what to do if element exists [replace|add|skip]
	   */
	  return _createClass(Lib, [{
	    key: "add",
	    value: function add(name, comp, mode = "replace") {
	      if (this.contains(name)) {
	        if (mode === "replace") {
	          _classPrivateFieldGet2(_lib, this)[name] = comp;
	        } else if (mode === "add") {
	          _classPrivateFieldGet2(_lib, this)[name] = Object.assign(_classPrivateFieldGet2(_lib, this)[name], comp);
	        }
	      } else {
	        _classPrivateFieldGet2(_lib, this)[name] = comp;
	      }
	    }
	  }, {
	    key: "get",
	    value: function get(name) {
	      return _classPrivateFieldGet2(_lib, this)[name];
	    }
	  }, {
	    key: "contains",
	    value: function contains(name) {
	      return Object.hasOwn(_classPrivateFieldGet2(_lib, this), name);
	    }
	  }, {
	    key: "import",
	    value: function _import(bulk, mode = "replace") {
	      for (let f in bulk) {
	        this.add(f, bulk[f], mode);
	      }
	    }
	  }, {
	    key: "isEmpty",
	    value: function isEmpty() {
	      return Object.keys(_classPrivateFieldGet2(_lib, this)).length === 0;
	    }
	  }, {
	    key: "getContent",
	    value: function getContent() {
	      return {
	        ..._classPrivateFieldGet2(_lib, this)
	      };
	    }
	  }]);
	}();

	/*
	 * Библиотека UI конструкторов
	 */

	const COMPONENTS$1 = new Lib();
	const FIELDS$1 = new Lib();
	const VARIANTS$1 = new Lib();

	function Ui_list_empty_placeholder($$anchor) {
		Ui_title($$anchor, {
			title: "not-node:empty_list_placeholder",
			size: 4,
			align: "center"
		});
	}

	var root_1$j = template(`<span class="icon"><i></i></span>`);
	var root_4$a = template(`<span> </span>`);
	var root_2$d = template(`<!> <!> <!> <!>`, 1);
	var root_6$8 = template(` <!>`, 1);
	var root$r = template(`<a><!></a>`);

	function Ui_link($$anchor, $$props) {
		push($$props, true);

		const $$stores = setup_stores();
		const $LOCALE = () => store_get(LOCALE, "$LOCALE", $$stores);

		const sideIcon = ($$anchor) => {
			var span = root_1$j();
			var i = child(span);

			reset(span);
			template_effect(() => set_class(i, `fas fa-${$$props.icon ?? ""} ${(size() ? `is-${size()}` : '') ?? ""}`));
			append($$anchor, span);
		};

		/**
		 * @typedef {Object} Props
		 * @property {string} [title] - attributes
		 * @property {string} [url]
		 * @property {any} download
		 * @property {string} [target]
		 * @property {any} rel
		 * @property {boolean} [light] - visual
		 * @property {boolean} [loading]
		 * @property {boolean} [raised]
		 * @property {boolean} [outlined]
		 * @property {boolean} [inverted]
		 * @property {boolean} [rounded]
		 * @property {boolean} [button]
		 * @property {string} [state]
		 * @property {string} [type]
		 * @property {string} [color]
		 * @property {string} [size]
		 * @property {string} [class]
		 * @property {boolean} [icon] - icons
		 * @property {string} [iconSide]
		 * @property {any} [action]
		 * @property {import('svelte').Snippet} [children]
		 */
		/** @type {Props} */
		let title = prop($$props, "title", 3, ""),
			url = prop($$props, "url", 3, ""),
			target = prop($$props, "target", 3, "_blank"),
			light = prop($$props, "light", 3, false),
			loading = prop($$props, "loading", 3, false),
			raised = prop($$props, "raised", 3, false),
			outlined = prop($$props, "outlined", 3, false),
			inverted = prop($$props, "inverted", 3, false),
			rounded = prop($$props, "rounded", 3, false),
			button = prop($$props, "button", 3, true),
			activeState = prop($$props, "state", 3, ""),
			type = prop($$props, "type", 3, ""),
			color = prop($$props, "color", 3, ""),
			size = prop($$props, "size", 3, ""),
			classes = prop($$props, "class", 3, ""),
			iconSide = prop($$props, "iconSide", 3, "right");

		var a = root$r();

		a.__click = function (...$$args) {
			($$props.action || $$props.onclick)?.apply(this, $$args);
		};

		var node = child(a);

		{
			var consequent_3 = ($$anchor) => {
				var fragment = root_2$d();
				var node_1 = first_child(fragment);

				{
					var consequent = ($$anchor) => {
						sideIcon($$anchor);
					};

					if_block(node_1, ($$render) => {
						if (iconSide() === "left") $$render(consequent);
					});
				}

				var node_2 = sibling(node_1, 2);

				{
					var consequent_1 = ($$anchor) => {
						var span_1 = root_4$a();
						var text = child(span_1, true);

						reset(span_1);
						template_effect(() => set_text(text, $LOCALE()[title()]));
						append($$anchor, span_1);
					};

					if_block(node_2, ($$render) => {
						if (title()) $$render(consequent_1);
					});
				}

				var node_3 = sibling(node_2, 2);

				snippet(node_3, () => $$props.children ?? noop);

				var node_4 = sibling(node_3, 2);

				{
					var consequent_2 = ($$anchor) => {
						sideIcon($$anchor);
					};

					if_block(node_4, ($$render) => {
						if (iconSide() === "right") $$render(consequent_2);
					});
				}

				append($$anchor, fragment);
			};

			var alternate = ($$anchor) => {
				var fragment_3 = root_6$8();
				var text_1 = first_child(fragment_3, true);
				var node_5 = sibling(text_1);

				snippet(node_5, () => $$props.children ?? noop);
				template_effect(() => set_text(text_1, $LOCALE()[title()]));
				append($$anchor, fragment_3);
			};

			if_block(node, ($$render) => {
				if ($$props.icon) $$render(consequent_3); else $$render(alternate, false);
			});
		}

		reset(a);

		template_effect(() => {
			set_attribute(a, "href", url());
			set_attribute(a, "target", target());
			set_attribute(a, "download", $$props.download);
			set_attribute(a, "rel", $$props.rel);
			set_class(a, `${classes() ?? ""} ${(activeState() ? `is-${activeState()}` : '') ?? ""} ${(color() ? `is-${color()}` : '') ?? ""} ${(type() ? `is-${type()}` : '') ?? ""} ${(size() ? `is-${size()}` : '') ?? ""}`);
			toggle_class(a, "button", button());
			toggle_class(a, "is-light", light());
			toggle_class(a, "is-inverted", inverted());
			toggle_class(a, "is-outlined", outlined());
			toggle_class(a, "is-raised", raised());
			toggle_class(a, "is-rounded", rounded());
			toggle_class(a, "is-loading", loading());
		});

		append($$anchor, a);
		pop();
	}

	delegate(["click"]);

	var root_3$9 = template(`<div><p class="control"><!></p></div>`);
	var root_4$9 = template(`<div><!></div>`);

	function Ui_links($$anchor, $$props) {
		const listLinks = ($$anchor) => {
			var fragment = comment();
			var node = first_child(fragment);

			each(node, 17, values, (item) => item.id, ($$anchor, item) => {
				Ui_link($$anchor, spread_props(() => get$2(item), itemsProps));
			});

			append($$anchor, fragment);
		};

		/**
		 * @typedef {Object} Props
		 * @property {array}  [values=[]]
		 * @property {string} [classes='']
		 * @property {boolean} [centered=false]
		 * @property {boolean} [right=false]
		 * @property {boolean} [joined = false]
		 * @property {object}   [itemsProps = {}]
		 */
		/** @type {Props} */
		let values = prop($$props, "values", 19, () => []),
			classes = prop($$props, "class", 3, ""),
			centered = prop($$props, "centered", 3, false),
			right = prop($$props, "right", 3, false),
			joined = prop($$props, "joined", 3, true),
			itemsProps = prop($$props, "itemsProps", 19, () => ({}));

		var fragment_2 = comment();
		var node_1 = first_child(fragment_2);

		{
			var consequent = ($$anchor) => {
				var div = root_3$9();
				var p = child(div);
				var node_2 = child(p);

				listLinks(node_2);
				reset(p);
				reset(div);

				template_effect(() => {
					set_class(div, `field has-addons ${classes() ?? ""}`);
					toggle_class(div, "is-centered", centered());
					toggle_class(div, "is-right", right());
				});

				append($$anchor, div);
			};

			var alternate = ($$anchor) => {
				var div_1 = root_4$9();
				var node_3 = child(div_1);

				listLinks(node_3);
				reset(div_1);

				template_effect(() => {
					set_class(div_1, `buttons ${classes() ?? ""}`);
					toggle_class(div_1, "is-centered", centered());
					toggle_class(div_1, "is-right", right());
				});

				append($$anchor, div_1);
			};

			if_block(node_1, ($$render) => {
				if (joined()) $$render(consequent); else $$render(alternate, false);
			});
		}

		append($$anchor, fragment_2);
	}

	var on_keyup = (e, onClick) => {
		if (e && e.key == "Enter") {
			onClick();
		}
	};

	var on_keyup_1 = (e, onClick, onclickImage, $$props) => {
		e.preventDefault();

		if (e && e.key == "Enter") {
			onClick();
			onclickImage()($$props.value);
		}
	};

	var on_click = (e, onClick, onclickImage, $$props) => {
		e.preventDefault();
		onClick();
		onclickImage()($$props.value);
	};

	var root_5$6 = template(`<figure class="image is-64x64"><img class="is-rounded"></figure>`);
	var root_1$i = template(`<div role="button" tabindex="0" class="list-item-image"><!></div>`);

	var on_click_1 = (e, onClick, onclickContent, $$props) => {
		e.preventDefault();
		onClick();
		onclickContent()($$props.value);
	};

	var on_keyup_2 = (e, onClick, onclickContent, $$props) => {
		e.preventDefault();

		if (e && e.key == "Enter") {
			onClick();
			onclickContent()($$props.value);
		}
	};

	var on_keyup_3 = (e, onClick, onclickTitle, $$props) => {
		e.preventDefault();

		if (e && e.key == "Enter") {
			onClick();
			onclickTitle()($$props.value);
		}
	};

	var on_click_2 = (e, onClick, onclickTitle, $$props) => {
		e.preventDefault();
		onClick();
		onclickTitle()($$props.value);
	};

	var root_6$7 = template(`<div class="list-item-title" role="button" tabindex="0"><!></div>`);

	var on_keyup_4 = (e, onClick, onclickDescription, $$props) => {
		e.preventDefault();

		if (e && e.key == "Enter") {
			onClick();
			onclickDescription()($$props.value);
		}
	};

	var on_click_3 = (e, onClick, onclickDescription, $$props) => {
		e.preventDefault();
		onClick();
		onclickDescription()($$props.value);
	};

	var root_11$2 = template(`<div role="button" tabindex="0" class="list-item-description"><!></div>`);
	var root_16 = template(`<div class="list-item-controls"><!> <!></div>`);
	var root$q = template(`<div role="button" tabindex="0"><!> <div role="button" tabindex="0" class="list-item-content"><!> <!></div> <!></div>`);

	function Ui_list_item($$anchor, $$props) {
		push($$props, true);

		/**
		 * @typedef {Object} Props
		 * @property {any} title
		 * @property {any} description
		 * @property {any} [actions]
		 * @property {any} [links]
		 * @property {any} [listActions]
		 * @property {any} [listLinks]
		 * @property {string} [classes]
		 * @property {string} [commonClasses]
		 * @property {string} [image]
		 * @property {any} value - value of item, will be passed to event handlers
		 * @property {any} [index] - index in array 0-length
		 * @property {boolean} [first] - if first
		 * @property {boolean} [last] - if last
		 * @property {any} [titleComponent] - customization
		 * @property {any} [titleComponentProps]
		 * @property {any} descriptionComponent
		 * @property {any} [descriptionComponentProps]
		 * @property {any} imageComponent
		 * @property {any} [imageComponentProps]
		 */
		/** @type {Props} */
		let actions = prop($$props, "actions", 19, () => []),
			links = prop($$props, "links", 19, () => []),
			listActions = prop($$props, "listActions", 19, () => []),
			listLinks = prop($$props, "listLinks", 19, () => []),
			classes = prop($$props, "classes", 3, ""),
			commonClasses = prop($$props, "commonClasses", 3, ""),
			image = prop($$props, "image", 3, ""),
			index = prop($$props, "index", 19, () => -1),
			first = prop($$props, "first", 3, false),
			last = prop($$props, "last", 3, false),
			titleComponent = prop($$props, "titleComponent", 3, Ui_title),
			titleComponentProps = prop($$props, "titleComponentProps", 19, () => ({ size: 6 })),
			descriptionComponentProps = prop($$props, "descriptionComponentProps", 19, () => ({})),
			imageComponentProps = prop($$props, "imageComponentProps", 19, () => ({})),
			onclickImage = prop($$props, "onclickImage", 3, () => false),
			onclickContent = prop($$props, "onclickContent", 3, () => false),
			onclickTitle = prop($$props, "onclickTitle", 3, () => false),
			onclickDescription = prop($$props, "onclickDescription", 3, () => false);

		function onClick() {
			onclick($$props.value);
		}

		let allActions = state(proxy([]));
		let allLinks = state(proxy([]));

		onMount(() => {
			set(allActions, proxy([...actions(), ...listActions()].map((btn) => {
				return {
					...btn,
					action: () => btn.action($$props.value)
				};
			})));

			set(allLinks, proxy([...links(), ...listLinks()]));
		});

		var div = root$q();

		div.__click = onClick;
		div.__keyup = [on_keyup, onClick];

		var node = child(div);

		{
			var consequent_2 = ($$anchor) => {
				var div_1 = root_1$i();

				div_1.__keyup = [on_keyup_1, onClick, onclickImage, $$props];
				div_1.__click = [on_click, onClick, onclickImage, $$props];

				var node_1 = child(div_1);

				{
					var consequent_1 = ($$anchor) => {
						var fragment = comment();
						var node_2 = first_child(fragment);

						{
							var consequent = ($$anchor) => {
								var fragment_1 = comment();
								const SvelteComponent = derived(() => $$props.imageComponent);
								var node_3 = first_child(fragment_1);

								component(node_3, () => get$2(SvelteComponent), ($$anchor, $$component) => {
									$$component($$anchor, spread_props(
										{
											get value() {
												return image();
											}
										},
										imageComponentProps
									));
								});

								append($$anchor, fragment_1);
							};

							var alternate = ($$anchor) => {
								var fragment_2 = comment();
								const SvelteComponent_1 = derived(() => $$props.imageComponent);
								var node_4 = first_child(fragment_2);

								component(node_4, () => get$2(SvelteComponent_1), ($$anchor, $$component) => {
									$$component($$anchor, spread_props(image, imageComponentProps));
								});

								append($$anchor, fragment_2);
							};

							if_block(node_2, ($$render) => {
								if (typeof image() === "string") $$render(consequent); else $$render(alternate, false);
							});
						}

						append($$anchor, fragment);
					};

					var alternate_1 = ($$anchor) => {
						var figure = root_5$6();
						var img = child(figure);

						reset(figure);

						template_effect(() => {
							set_attribute(img, "src", image());
							set_attribute(img, "alt", $$props.title);
						});

						append($$anchor, figure);
					};

					if_block(node_1, ($$render) => {
						if ($$props.imageComponent) $$render(consequent_1); else $$render(alternate_1, false);
					});
				}

				reset(div_1);
				append($$anchor, div_1);
			};

			if_block(node, ($$render) => {
				if (image()) $$render(consequent_2);
			});
		}

		var div_2 = sibling(node, 2);

		div_2.__click = [
			on_click_1,
			onClick,
			onclickContent,
			$$props
		];

		div_2.__keyup = [
			on_keyup_2,
			onClick,
			onclickContent,
			$$props
		];

		var node_5 = child(div_2);

		{
			var consequent_5 = ($$anchor) => {
				var div_3 = root_6$7();

				div_3.__keyup = [on_keyup_3, onClick, onclickTitle, $$props];
				div_3.__click = [on_click_2, onClick, onclickTitle, $$props];

				var node_6 = child(div_3);

				{
					var consequent_4 = ($$anchor) => {
						var fragment_3 = comment();
						var node_7 = first_child(fragment_3);

						{
							var consequent_3 = ($$anchor) => {
								var fragment_4 = comment();
								const SvelteComponent_2 = derived(titleComponent);
								var node_8 = first_child(fragment_4);

								component(node_8, () => get$2(SvelteComponent_2), ($$anchor, $$component) => {
									$$component($$anchor, spread_props(
										{
											get title() {
												return $$props.title;
											}
										},
										titleComponentProps,
										{ onchange }
									));
								});

								append($$anchor, fragment_4);
							};

							var alternate_2 = ($$anchor) => {
								var fragment_5 = comment();
								const SvelteComponent_3 = derived(titleComponent);
								var node_9 = first_child(fragment_5);

								component(node_9, () => get$2(SvelteComponent_3), ($$anchor, $$component) => {
									$$component($$anchor, spread_props(() => $$props.title, titleComponentProps, { onchange }));
								});

								append($$anchor, fragment_5);
							};

							if_block(node_7, ($$render) => {
								if (typeof $$props.title === "string") $$render(consequent_3); else $$render(alternate_2, false);
							});
						}

						append($$anchor, fragment_3);
					};

					var alternate_3 = ($$anchor) => {
						var text$1 = text();

						template_effect(() => set_text(text$1, $$props.title));
						append($$anchor, text$1);
					};

					if_block(node_6, ($$render) => {
						if (titleComponent()) $$render(consequent_4); else $$render(alternate_3, false);
					});
				}

				reset(div_3);
				append($$anchor, div_3);
			};

			if_block(node_5, ($$render) => {
				if ($$props.title) $$render(consequent_5);
			});
		}

		var node_10 = sibling(node_5, 2);

		{
			var consequent_8 = ($$anchor) => {
				var div_4 = root_11$2();

				div_4.__keyup = [
					on_keyup_4,
					onClick,
					onclickDescription,
					$$props
				];

				div_4.__click = [
					on_click_3,
					onClick,
					onclickDescription,
					$$props
				];

				var node_11 = child(div_4);

				{
					var consequent_7 = ($$anchor) => {
						var fragment_7 = comment();
						var node_12 = first_child(fragment_7);

						{
							var consequent_6 = ($$anchor) => {
								var fragment_8 = comment();
								const SvelteComponent_4 = derived(() => $$props.descriptionComponent);
								var node_13 = first_child(fragment_8);

								component(node_13, () => get$2(SvelteComponent_4), ($$anchor, $$component) => {
									$$component($$anchor, spread_props(
										{
											get value() {
												return $$props.description;
											}
										},
										descriptionComponentProps,
										{ onchange, onclick }
									));
								});

								append($$anchor, fragment_8);
							};

							var alternate_4 = ($$anchor) => {
								var fragment_9 = comment();
								const SvelteComponent_5 = derived(() => $$props.descriptionComponent);
								var node_14 = first_child(fragment_9);

								component(node_14, () => get$2(SvelteComponent_5), ($$anchor, $$component) => {
									$$component($$anchor, spread_props(() => $$props.description, descriptionComponentProps, { onchange, onclick }));
								});

								append($$anchor, fragment_9);
							};

							if_block(node_12, ($$render) => {
								if (typeof $$props.description === "string") $$render(consequent_6); else $$render(alternate_4, false);
							});
						}

						append($$anchor, fragment_7);
					};

					var alternate_5 = ($$anchor) => {
						var text_1 = text();

						template_effect(() => set_text(text_1, $$props.description));
						append($$anchor, text_1);
					};

					if_block(node_11, ($$render) => {
						if ($$props.descriptionComponent) $$render(consequent_7); else $$render(alternate_5, false);
					});
				}

				reset(div_4);
				append($$anchor, div_4);
			};

			if_block(node_10, ($$render) => {
				if ($$props.description) $$render(consequent_8);
			});
		}

		reset(div_2);

		var node_15 = sibling(div_2, 2);

		{
			var consequent_11 = ($$anchor) => {
				var div_5 = root_16();
				var node_16 = child(div_5);

				{
					var consequent_9 = ($$anchor) => {
						Ui_buttons($$anchor, {
							get values() {
								return get$2(allActions);
							},
							right: true
						});
					};

					if_block(node_16, ($$render) => {
						if (get$2(allActions) && get$2(allActions).length) $$render(consequent_9);
					});
				}

				var node_17 = sibling(node_16, 2);

				{
					var consequent_10 = ($$anchor) => {
						Ui_links($$anchor, {
							get values() {
								return get$2(allLinks);
							},
							right: true
						});
					};

					if_block(node_17, ($$render) => {
						if (get$2(allLinks) && get$2(allLinks).length) $$render(consequent_10);
					});
				}

				reset(div_5);
				append($$anchor, div_5);
			};

			if_block(node_15, ($$render) => {
				if (get$2(allActions) && get$2(allActions).length || get$2(allLinks) && get$2(allLinks).length) $$render(consequent_11);
			});
		}

		reset(div);
		template_effect(() => set_class(div, `list-item ${classes() ?? ""} ${commonClasses() ?? ""} ${(last() ? 'list-item-last' : '') ?? ""} ${(first() ? 'list-item-first' : '') ?? ""}  ${`list-item-at-${index()}` ?? ""} ${`list-item-` + (index() % 2 ? 'odd' : 'even') ?? ""}`));
		append($$anchor, div);
		pop();
	}

	delegate(["click", "keyup"]);

	function Ui_list_block($$anchor, $$props) {
		push($$props, true);

		/**
		 * @typedef {Object} Props
		 * @property {string} [idFieldName]
		 * @property {any} [items]
		 * @property {any} [actions]
		 * @property {any} [links]
		 * @property {string} [itemClasses]
		 * @property {any} [listItemComponent]
		 * @property {any} [listItemComponentProps]
		 * @property {any} [titleComponent]
		 * @property {any} [titleComponentProps]
		 * @property {any} descriptionComponent
		 * @property {any} [descriptionComponentProps]
		 * @property {any} imageComponent
		 * @property {any} [imageComponentProps]
		 */
		/** @type {Props} */
		let idFieldName = prop($$props, "idFieldName", 3, "id"),
			items = prop($$props, "items", 23, () => []),
			actions = prop($$props, "actions", 19, () => []),
			links = prop($$props, "links", 19, () => []),
			itemClasses = prop($$props, "itemClasses", 3, ""),
			listItemComponent = prop($$props, "listItemComponent", 3, Ui_list_item),
			listItemComponentProps = prop($$props, "listItemComponentProps", 19, () => ({})),
			titleComponent = prop($$props, "titleComponent", 3, Ui_title),
			titleComponentProps = prop($$props, "titleComponentProps", 19, () => ({ size: 6 })),
			descriptionComponentProps = prop($$props, "descriptionComponentProps", 19, () => ({})),
			imageComponentProps = prop($$props, "imageComponentProps", 19, () => ({}));

		var fragment = comment();
		var node = first_child(fragment);

		{
			var consequent = ($$anchor) => {
				var fragment_1 = comment();
				const SvelteComponent = derived(listItemComponent);
				var node_1 = first_child(fragment_1);

				each(node_1, 19, items, (item) => item[idFieldName()], ($$anchor, item, index) => {
					var fragment_2 = comment();
					var node_2 = first_child(fragment_2);
					var first = derived(() => get$2(index) === 0);
					var last = derived(() => get$2(index) === items().length - 1);

					component(node_2, () => get$2(SvelteComponent), ($$anchor, $$component) => {
						$$component($$anchor, spread_props(
							listItemComponentProps,
							{
								get titleComponent() {
									return titleComponent();
								},
								get titleComponentProps() {
									return titleComponentProps();
								},
								get descriptionComponent() {
									return $$props.descriptionComponent;
								},
								get descriptionComponentProps() {
									return descriptionComponentProps();
								},
								get imageComponent() {
									return $$props.imageComponent;
								},
								get imageComponentProps() {
									return imageComponentProps();
								}
							},
							() => get$2(item),
							{
								get listActions() {
									return actions();
								},
								get listLinks() {
									return links();
								},
								get commonClasses() {
									return itemClasses();
								},
								get index() {
									return get$2(index);
								},
								get first() {
									return get$2(first);
								},
								get last() {
									return get$2(last);
								},
								get value() {
									return items()[get$2(index)];
								},
								set value($$value) {
									items()[get$2(index)] = $$value;
								},
								$$events: {
									click($$arg) {
										bubble_event.call(this, $$props, $$arg);
									},
									clickContent($$arg) {
										bubble_event.call(this, $$props, $$arg);
									},
									clickDescription($$arg) {
										bubble_event.call(this, $$props, $$arg);
									},
									clickImage($$arg) {
										bubble_event.call(this, $$props, $$arg);
									},
									clickTitle($$arg) {
										bubble_event.call(this, $$props, $$arg);
									}
								}
							}
						));
					});

					append($$anchor, fragment_2);
				});

				append($$anchor, fragment_1);
			};

			if_block(node, ($$render) => {
				if (items()) $$render(consequent);
			});
		}

		append($$anchor, fragment);
		pop();
	}

	var root_1$h = template(`<div><!></div>`);

	function Ui_list($$anchor, $$props) {
		push($$props, true);

		//customization
		/**
		 * @typedef {Object} Props
		 * @property {string} [classes]
		 * @property {any} [items]
		 * @property {any} [actions]
		 * @property {any} [links]
		 * @property {boolean} [actionsVisible]
		 * @property {boolean} [itemsHoverable]
		 * @property {boolean} [overflowEllipsis]
		 * @property {boolean} [hiddenImages]
		 * @property {string} [itemClasses]
		 * @property {any} itemLength
		 * @property {string} [idFieldName]
		 * @property {any} [emptyListPlaceholderComponent] - empty
		 * @property {any} [emptyListPlaceholderComponentProps]
		 * @property {any} [listItemComponent] - item
		 * @property {any} [listItemComponentProps]
		 * @property {any} [titleComponent] - item parts
		 * @property {any} [titleComponentProps]
		 * @property {any} descriptionComponent
		 * @property {any} [descriptionComponentProps]
		 * @property {any} imageComponent
		 * @property {any} [imageComponentProps]
		 */
		/** @type {Props} */
		let classes = prop($$props, "classes", 3, ""),
			items = prop($$props, "items", 31, () => proxy([])),
			actions = prop($$props, "actions", 19, () => []),
			links = prop($$props, "links", 19, () => []),
			actionsVisible = prop($$props, "actionsVisible", 3, false),
			itemsHoverable = prop($$props, "itemsHoverable", 3, false),
			overflowEllipsis = prop($$props, "overflowEllipsis", 3, false),
			hiddenImages = prop($$props, "hiddenImages", 3, false),
			itemClasses = prop($$props, "itemClasses", 3, ""),
			idFieldName = prop($$props, "idFieldName", 3, "id"),
			emptyListPlaceholderComponent = prop($$props, "emptyListPlaceholderComponent", 3, Ui_list_empty_placeholder),
			emptyListPlaceholderComponentProps = prop($$props, "emptyListPlaceholderComponentProps", 19, () => ({})),
			listItemComponent = prop($$props, "listItemComponent", 3, Ui_list_item),
			listItemComponentProps = prop($$props, "listItemComponentProps", 19, () => ({})),
			titleComponent = prop($$props, "titleComponent", 3, Ui_title),
			titleComponentProps = prop($$props, "titleComponentProps", 19, () => ({ size: 6 })),
			descriptionComponentProps = prop($$props, "descriptionComponentProps", 19, () => ({})),
			imageComponentProps = prop($$props, "imageComponentProps", 19, () => ({}));

		var fragment = comment();
		var node = first_child(fragment);

		{
			var consequent = ($$anchor) => {
				var div = root_1$h();
				var node_1 = child(div);

				Ui_list_block(node_1, {
					get itemClasses() {
						return itemClasses();
					},
					get listItemComponent() {
						return listItemComponent();
					},
					get listItemComponentProps() {
						return listItemComponentProps();
					},
					get idFieldName() {
						return idFieldName();
					},
					get titleComponent() {
						return titleComponent();
					},
					get titleComponentProps() {
						return titleComponentProps();
					},
					get descriptionComponent() {
						return $$props.descriptionComponent;
					},
					get descriptionComponentProps() {
						return descriptionComponentProps();
					},
					get imageComponent() {
						return $$props.imageComponent;
					},
					get imageComponentProps() {
						return imageComponentProps();
					},
					get actions() {
						return actions();
					},
					get links() {
						return links();
					},
					get items() {
						return items();
					},
					set items($$value) {
						items($$value);
					},
					$$events: {
						change($$arg) {
							bubble_event.call(this, $$props, $$arg);
						},
						click($$arg) {
							bubble_event.call(this, $$props, $$arg);
						},
						clickContent($$arg) {
							bubble_event.call(this, $$props, $$arg);
						},
						clickDescription($$arg) {
							bubble_event.call(this, $$props, $$arg);
						},
						clickImage($$arg) {
							bubble_event.call(this, $$props, $$arg);
						},
						clickTitle($$arg) {
							bubble_event.call(this, $$props, $$arg);
						}
					}
				});

				reset(div);

				template_effect(() => {
					set_attribute(div, "style", $$props.itemLength ? `--length: ${$$props.itemLength};` : "");
					set_class(div, `list ${classes() ?? ""} ${(actionsVisible() ? 'has-visible-pointer-controls' : '') ?? ""} ${(itemsHoverable() ? 'has-hoverable-list-items' : '') ?? ""} ${(overflowEllipsis() ? 'has-overflow-ellipsis' : '') ?? ""} ${(hiddenImages() ? 'has-hidden-images' : '') ?? ""}`);
				});

				append($$anchor, div);
			};

			var alternate = ($$anchor) => {
				var fragment_1 = comment();
				const SvelteComponent = derived(emptyListPlaceholderComponent);
				var node_2 = first_child(fragment_1);

				component(node_2, () => get$2(SvelteComponent), ($$anchor, $$component) => {
					$$component($$anchor, spread_props(emptyListPlaceholderComponentProps));
				});

				append($$anchor, fragment_1);
			};

			if_block(node, ($$render) => {
				if (items().length) $$render(consequent); else $$render(alternate, false);
			});
		}

		append($$anchor, fragment);
		pop();
	}

	var root$p = template(`<!> <!>`, 1);

	function Ui_list_of_models($$anchor, $$props) {
		push($$props, true);

		//field props
		/**
		 * @typedef {Object} Props
		 * @property {boolean} [inputStarted] - svelte-ignore unused-export-let
		 * @property {any} [value]
		 * @property {string} [placeholder]
		 * @property {string} [fieldname]
		 * @property {boolean} [required]
		 * @property {boolean} [readonly]
		 * @property {boolean} [multiple]
		 * @property {number} [size]
		 * @property {boolean} [valid] - validation
		 * @property {boolean} [validated]
		 * @property {boolean} [errors]
		 * @property {boolean} [formErrors]
		 * @property {boolean} [formLevelError]
		 * @property {string} [modelName] - model bindings
		 * @property {string} [actionName]
		 * @property {any} [actionFilter]
		 * @property {any} [actionSorter]
		 * @property {any} [actionPager]
		 * @property {any} [actionSearch]
		 * @property {string} [optionId] - presentation
		 * @property {string} [optionTitle]
		 * @property {string} [selectorUI] - selector UI to add new item to list
		 * @property {any} [selectorUIProps]
		 * @property {string} [itemUI] - list item UI to present in readonly or editable variants
		 * @property {any} [itemUIProps]
		 * @property {any} [transformValueItemToListItem]
		 */
		/** @type {Props} */
		let value = prop($$props, "value", 31, () => proxy([])),
			placeholder = prop($$props, "placeholder", 15, ""),
			fieldname = prop($$props, "fieldname", 15, "selectFromModel"),
			required = prop($$props, "required", 15, true),
			readonly = prop($$props, "readonly", 3, false),
			multiple = prop($$props, "multiple", 15, false),
			size = prop($$props, "size", 15, 8),
			valid = prop($$props, "valid", 15, true),
			modelName = prop($$props, "modelName", 3, ""),
			actionName = prop($$props, "actionName", 3, ""),
			actionFilter = prop($$props, "actionFilter", 19, () => ({})),
			actionSorter = prop($$props, "actionSorter", 19, () => ({})),
			actionPager = prop($$props, "actionPager", 19, () => ({})),
			actionSearch = prop($$props, "actionSearch", 3, undefined),
			optionId = prop($$props, "optionId", 3, ":_id"),
			optionTitle = prop($$props, "optionTitle", 3, ":title"),
			selectorUI = prop($$props, "selectorUI", 3, "UISelectFromModelOnDemandInline"),
			selectorUIProps = prop($$props, "selectorUIProps", 19, () => ({})),
			itemUI = prop($$props, "itemUI", 3, "UIListItem"),
			itemUIProps = prop($$props, "itemUIProps", 19, () => ({})),
			transformValueItemToListItem = prop($$props, "transformValueItemToListItem", 3, (item) => {
				return item
					? {
						id: item._id,
						title: item.title,
						description: item.description,
						value: item
					}
					: undefined;
			});

		function addItem(item) {
			if (!Array.isArray(value())) {
				value([]);
			}

			value().push(item);
			value(value());
		}

		let items = derived(() => value().map ? value().map(transformValueItemToListItem()) : []);

		const ACTIONS = [
			{
				action(listItem) {
					const val = listItem.value;
					const itemIndex = value().findIndex((valueItem) => valueItem === val);

					if (itemIndex > -1) {
						const valCopy = [...value()];

						notCommon$1.moveItem(valCopy, itemIndex, itemIndex - 1);
						value(valCopy);
					}
				},
				title: "",
				icon: "arrow-up",
				color: "normal"
			},
			{
				action: (listItem) => {
					const val = listItem.value;
					const itemIndex = value().findIndex((valueItem) => valueItem === val);

					if (itemIndex > -1) {
						const valCopy = [...value()];

						notCommon$1.moveItem(valCopy, itemIndex, itemIndex + 1);
						value(valCopy);
					}
				},
				title: "",
				icon: "arrow-down",
				color: "normal"
			},
			{
				action: (listItem) => {
					const val = listItem.value;
					const itemIndex = value().findIndex((valueItem) => valueItem === val);

					if (itemIndex > -1) {
						value().splice(itemIndex, 1);
						value(value());
					}
				},
				title: "",
				icon: "trash",
				color: "danger"
			}
		];

		var fragment = root$p();
		var node = first_child(fragment);
		var listItemComponent = derived(() => COMPONENTS$1.get(itemUI()));

		Ui_list(node, spread_props(
			{
				get listItemComponent() {
					return get$2(listItemComponent);
				}
			},
			itemUIProps,
			{
				get items() {
					return get$2(items);
				},
				actions: ACTIONS
			}
		));

		var node_1 = sibling(node, 2);

		{
			var consequent = ($$anchor) => {
				var fragment_1 = comment();
				const SvelteComponent = derived(() => COMPONENTS$1.get(selectorUI()));
				var node_2 = first_child(fragment_1);

				component(node_2, () => get$2(SvelteComponent), ($$anchor, $$component) => {
					$$component($$anchor, spread_props(selectorUIProps, {
						get modelName() {
							return modelName();
						},
						get actionName() {
							return actionName();
						},
						get actionFilter() {
							return actionFilter();
						},
						get actionSorter() {
							return actionSorter();
						},
						get actionPager() {
							return actionPager();
						},
						get actionSearch() {
							return actionSearch();
						},
						get optionId() {
							return optionId();
						},
						get optionTitle() {
							return optionTitle();
						},
						get placeholder() {
							return placeholder();
						},
						set placeholder($$value) {
							placeholder($$value);
						},
						get fieldname() {
							return fieldname();
						},
						set fieldname($$value) {
							fieldname($$value);
						},
						get required() {
							return required();
						},
						set required($$value) {
							required($$value);
						},
						get multiple() {
							return multiple();
						},
						set multiple($$value) {
							multiple($$value);
						},
						get size() {
							return size();
						},
						set size($$value) {
							size($$value);
						},
						get valid() {
							return valid();
						},
						set valid($$value) {
							valid($$value);
						},
						$$events: { resolve: (e) => addItem(e.detail) }
					}));
				});

				append($$anchor, fragment_1);
			};

			if_block(node_1, ($$render) => {
				if (!readonly()) $$render(consequent);
			});
		}

		append($$anchor, fragment);
		pop();
	}

	var root$o = template(`<div><!></div>`);

	function Ui_column($$anchor, $$props) {
		push($$props, true);

		/**
		 * @typedef {Object} Props
		 * @property {string} [id]
		 * @property {string} [class]
		 * @property {string} [title]
		 * @property {boolean} [narrow=false]
		 * @property {any} size
		 * @property {string}   [role="button"]
		 * @property {number}   [tabIndex=0]
		 * @property {function} [onclick]
		 * @property {function} [onkeyup]
		 * @property {import('svelte').Snippet} [children]
		 */
		/** @type {Props} */
		let id = prop($$props, "id", 3, ""),
			classes = prop($$props, "class", 3, ""),
			title = prop($$props, "title", 3, ""),
			narrow = prop($$props, "narrow", 3, false),
			role = prop($$props, "role", 3, "button"),
			tabIndex = prop($$props, "tabIndex", 3, "0");

		var div = root$o();

		div.__click = function (...$$args) {
			$$props.onclick?.apply(this, $$args);
		};

		div.__keyup = function (...$$args) {
			$$props.onkeyup?.apply(this, $$args);
		};

		var node = child(div);

		snippet(node, () => $$props.children ?? noop);
		reset(div);

		template_effect(() => {
			set_attribute(div, "id", id());
			set_attribute(div, "title", title());
			set_class(div, `column ${classes() ?? ""} ${($$props.size ? `is-${$$props.size}` : '') ?? ""}`);
			set_attribute(div, "role", role());
			set_attribute(div, "tabindex", tabIndex());
			toggle_class(div, "is-narrow", narrow());
		});

		append($$anchor, div);
		pop();
	}

	delegate(["click", "keyup"]);

	var root$n = template(`<div><!></div>`);

	function Ui_columns($$anchor, $$props) {
		push($$props, true);

		/**
		 * @typedef {Object} Props
		 * @property {string} [id]
		 * @property {string} [class]
		 * @property {string} [title]
		 * @property {string}   [role="button"]
		 * @property {number}   [tabIndex=0]
		 * @property {function} [onclick]
		 * @property {function} [onkeyup]
		 * @property {import('svelte').Snippet} [children]
		 */
		/** @type {Props} */
		let id = prop($$props, "id", 3, ""),
			title = prop($$props, "title", 3, ""),
			classes = prop($$props, "class", 3, ""),
			role = prop($$props, "role", 3, "button"),
			tabIndex = prop($$props, "tabIndex", 3, "0");

		var div = root$n();

		div.__click = function (...$$args) {
			$$props.onclick?.apply(this, $$args);
		};

		div.__keyup = function (...$$args) {
			$$props.onkeyup?.apply(this, $$args);
		};

		var node = child(div);

		snippet(node, () => $$props.children ?? noop);
		reset(div);

		template_effect(() => {
			set_attribute(div, "id", id());
			set_attribute(div, "title", title());
			set_class(div, `columns ${classes() ?? ""}`);
			set_attribute(div, "role", role());
			set_attribute(div, "tabindex", tabIndex());
		});

		append($$anchor, div);
		pop();
	}

	delegate(["click", "keyup"]);

	var root$m = template(`<div><!></div>`);

	function Ui_container($$anchor, $$props) {
		push($$props, true);

		/**
		 * @typedef {Object} Props
		 * @property {string} [id = '']
		 * @property {string} [class = '']
		 * @property {string} [title = '']
		 * @property {string}   [role="button"]
		 * @property {number}   [tabIndex=0]
		 * @property {boolean} [widescreen=false]
		 * @property {boolean} [fullhd=false]
		 * @property {boolean} [maxDesktop=false]
		 * @property {boolean} [maxWidescreen=false]
		 * @property {boolean} [fluid = false]
		 * @property {import('svelte').Snippet} [children]
		 * @property {function} [onclick]
		 * @property {function} [onkeyup]
		 */
		/** @type {Props} */
		let id = prop($$props, "id", 3, ""),
			title = prop($$props, "title", 3, ""),
			classes = prop($$props, "class", 3, ""),
			role = prop($$props, "role", 3, "button"),
			tabIndex = prop($$props, "tabIndex", 3, "0"),
			widescreen = prop($$props, "widescreen", 3, false),
			fullhd = prop($$props, "fullhd", 3, false),
			maxDesktop = prop($$props, "maxDesktop", 3, false),
			maxWidescreen = prop($$props, "maxWidescreen", 3, false),
			fluid = prop($$props, "fluid", 3, false);

		var div = root$m();

		div.__click = function (...$$args) {
			$$props.onclick?.apply(this, $$args);
		};

		div.__keyup = function (...$$args) {
			$$props.onkeyup?.apply(this, $$args);
		};

		var node = child(div);

		snippet(node, () => $$props.children ?? noop);
		reset(div);

		template_effect(() => {
			set_attribute(div, "id", id());
			set_attribute(div, "title", title());
			set_class(div, `container ${classes() ?? ""}`);
			set_attribute(div, "role", role());
			set_attribute(div, "tabindex", tabIndex());
			toggle_class(div, "is-widescreen", widescreen());
			toggle_class(div, "is-fullhd", fullhd());
			toggle_class(div, "is-max-desktop", maxDesktop());
			toggle_class(div, "is-max-widescreen", maxWidescreen());
			toggle_class(div, "is-fluid", fluid());
		});

		append($$anchor, div);
		pop();
	}

	delegate(["click", "keyup"]);

	var root$l = template(`<footer><!></footer>`);

	function Ui_footer($$anchor, $$props) {
		push($$props, true);

		/**
		 * @typedef {Object} Props
		 * @property {string} [id]
		 * @property {string} [class]
		 * @property {import('svelte').Snippet} [children]
		 */
		/** @type {Props} */
		let id = prop($$props, "id", 3, ""),
			classes = prop($$props, "class", 3, "");

		var footer = root$l();
		var node = child(footer);

		snippet(node, () => $$props.children ?? noop);
		reset(footer);

		template_effect(() => {
			set_attribute(footer, "id", id());
			set_class(footer, `footer ${classes() ?? ""} `);
		});

		append($$anchor, footer);
		pop();
	}

	var root$k = template(`<section><!></section>`);

	function Ui_section$2($$anchor, $$props) {
		push($$props, true);

		/**
		 * @typedef {Object} Props
		 * @property {string} [id = '']
		 * @property {string} [class]
		 * @property {string} [role="button"]
		 * @property {number} [tabIndex = 0]
		 * @property {import('svelte').Snippet} [children]
		 */
		/** @type {Props} */
		let id = prop($$props, "id", 3, ""),
			classes = prop($$props, "class", 3, ""),
			role = prop($$props, "role", 3, "button"),
			tabIndex = prop($$props, "tabIndex", 3, "0");

		var section = root$k();

		section.__click = function (...$$args) {
			$$props.onclick?.apply(this, $$args);
		};

		section.__keyup = function (...$$args) {
			$$props.onkeyup?.apply(this, $$args);
		};

		var node = child(section);

		snippet(node, () => $$props.children ?? noop);
		reset(section);

		template_effect(() => {
			set_attribute(section, "id", id());
			set_class(section, `section ${classes() ?? ""}`);
			set_attribute(section, "role", role());
			set_attribute(section, "tabindex", tabIndex());
		});

		append($$anchor, section);
		pop();
	}

	delegate(["click", "keyup"]);

	function Ui_level_item($$anchor, $$props) {
		push($$props, true);

		/**
		 * @typedef {Object} Props
		 * @property {string} [tag]
		 * @property {import('svelte').Snippet} [children]
		 */
		/** @type {Props} */
		let tag = prop($$props, "tag", 3, "div");
		var fragment = comment();
		var node = first_child(fragment);

		element(node, tag, false, ($$element, $$anchor) => {
			var fragment_1 = comment();
			var node_1 = first_child(fragment_1);

			{
				var consequent = ($$anchor) => {
					var fragment_2 = comment();
					var node_2 = first_child(fragment_2);

					snippet(node_2, () => $$props.children ?? noop);
					append($$anchor, fragment_2);
				};

				var alternate = ($$anchor) => {};

				if_block(node_1, ($$render) => {
					if ($$props.children) $$render(consequent); else $$render(alternate, false);
				});
			}

			append($$anchor, fragment_1);
		});

		append($$anchor, fragment);
		pop();
	}

	var root$j = template(`<nav class="level"><div class="level-left"><!></div> <div class="level-right"><!></div></nav>`);

	function Ui_level($$anchor, $$props) {
		push($$props, true);

		var nav = root$j();
		var div = child(nav);
		var node = child(div);

		snippet(node, () => $$props.left ?? noop);
		reset(div);

		var div_1 = sibling(div, 2);
		var node_1 = child(div_1);

		snippet(node_1, () => $$props.right ?? noop);
		reset(div_1);
		reset(nav);
		append($$anchor, nav);
		pop();
	}

	var index$6 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		UIColumn: Ui_column,
		UIColumns: Ui_columns,
		UIContainer: Ui_container,
		UIFooter: Ui_footer,
		UILevel: Ui_level,
		UILevelItem: Ui_level_item,
		UISection: Ui_section$2
	});

	var root_1$g = template(`<p> </p>`);
	var root_2$c = template(`<input>`);

	function Ui_number($$anchor, $$props) {
		push($$props, true);

		const $$stores = setup_stores();
		const $LOCALE = () => store_get(LOCALE, "$LOCALE", $$stores);

		/** @type {import('./type').UIInputProps} */
		let value = prop($$props, "value", 15, 0),
			placeholder = prop($$props, "placeholder", 3, "0.0"),
			min = prop($$props, "min", 3, 0),
			max = prop($$props, "max", 3, 100),
			step = prop($$props, "step", 3, 1),
			fieldname = prop($$props, "fieldname", 3, "number"),
			required = prop($$props, "required", 3, true),
			disabled = prop($$props, "disabled", 3, false),
			readonly = prop($$props, "readonly", 3, false),
			valid = prop($$props, "valid", 3, true),
			classes = prop($$props, "class", 3, ""),
			onchange = prop($$props, "onchange", 3, () => true),
			others = rest_props($$props, [
				"$$slots",
				"$$events",
				"$$legacy",
				"value",
				"placeholder",
				"min",
				"max",
				"step",
				"fieldname",
				"required",
				"disabled",
				"readonly",
				"valid",
				"class",
				"onchange"
			]);

		let invalid = derived(() => !valid());
		const oninput = UICommon$1.onInput(fieldname(), onchange());
		var fragment = comment();
		var node = first_child(fragment);

		{
			var consequent = ($$anchor) => {
				var p = root_1$g();
				var text = child(p, true);

				reset(p);
				template_effect(() => set_text(text, value()));
				append($$anchor, p);
			};

			var alternate = ($$anchor) => {
				var input = root_2$c();

				remove_input_defaults(input);

				let attributes;

				template_effect(() => attributes = set_attributes(input, attributes, {
					id: `form-field-number-${fieldname() ?? ""}`,
					class: `input ${classes() ?? ""}`,
					type: "number",
					name: fieldname(),
					invalid: get$2(invalid),
					disabled: disabled(),
					required: required(),
					readonly: readonly(),
					min: min(),
					max: max(),
					step: step(),
					placeholder: $LOCALE()[placeholder()],
					autocomplete: fieldname(),
					onchange: oninput,
					oninput,
					"aria-controls": `input-field-helper-${fieldname() ?? ""}`,
					"aria-describedby": `input-field-helper-${fieldname() ?? ""}`,
					...others
				}));

				bind_value(input, value);
				append($$anchor, input);
			};

			if_block(node, ($$render) => {
				if (readonly()) $$render(consequent); else $$render(alternate, false);
			});
		}

		append($$anchor, fragment);
		pop();
	}

	var root_2$b = template(`<!> <!> <!>`, 1);
	var root_8$1 = template(`<!> <!> <!>`, 1);
	var root$i = template(`<!> <!> <!>`, 1);

	function Ui_named_numbers_list($$anchor, $$props) {
		push($$props, true);

		/** @type {import('./type').UIInputProps} */
		let fieldname = prop($$props, "fieldname", 3, "numbers_list"),
			value = prop($$props, "value", 31, () => proxy({})),
			label = prop($$props, "label", 3, "named numbers list"),
			placeholder = prop($$props, "placeholder", 15, "new item"),
			readonly = prop($$props, "readonly", 3, false),
			onchange = prop($$props, "onchange", 3, () => true);

		let list = derived(() => Object.keys(value()).map((name) => {
			return {
				id: name,
				title: name,
				number: value()[name]
			};
		}));

		function remove(id) {
			if (notCommon$1.objHas(value(), id)) {
				delete value()[id];
				value(value());
				onchange()({ value: value(), field: fieldname() });
			}
		}

		function add() {
			const id = newVal.id.trim();
			const number = parseInt(newVal.number);

			if (id && id !== "" && !isNaN(number) && !notCommon$1.objHas(value(), id)) {
				value(value()[id] = number, true);
			}

			onchange()({ value: value(), field: fieldname() });
		}

		const createNewVal = () => {
			return { id: "", number: 0 };
		};

		let newVal = proxy(createNewVal());
		var fragment = root$i();
		var node = first_child(fragment);

		Ui_title(node, {
			get title() {
				return label();
			},
			size: 5
		});

		var node_1 = sibling(node, 2);

		each(node_1, 17, () => get$2(list), (item) => item.id, ($$anchor, item) => {
			Ui_columns($$anchor, {
				children: ($$anchor, $$slotProps) => {
					var fragment_2 = root_2$b();
					var node_2 = first_child(fragment_2);

					Ui_column(node_2, {
						classes: "is-6",
						children: ($$anchor, $$slotProps) => {
							next();

							var text$1 = text();

							template_effect(() => set_text(text$1, get$2(item).title));
							append($$anchor, text$1);
						},
						$$slots: { default: true }
					});

					var node_3 = sibling(node_2, 2);

					Ui_column(node_3, {
						classes: "is-4",
						children: ($$anchor, $$slotProps) => {
							next();

							var text_1 = text();

							template_effect(() => set_text(text_1, get$2(item).number));
							append($$anchor, text_1);
						},
						$$slots: { default: true }
					});

					var node_4 = sibling(node_3, 2);

					{
						var consequent = ($$anchor) => {
							Ui_column($$anchor, {
								classes: "is-2",
								children: ($$anchor, $$slotProps) => {
									Ui_button($$anchor, {
										icon: "minus",
										action: () => remove(get$2(item).id)
									});
								},
								$$slots: { default: true }
							});
						};

						if_block(node_4, ($$render) => {
							if (!readonly()) $$render(consequent);
						});
					}

					append($$anchor, fragment_2);
				},
				$$slots: { default: true }
			});
		});

		var node_5 = sibling(node_1, 2);

		{
			var consequent_1 = ($$anchor) => {
				Ui_columns($$anchor, {
					children: ($$anchor, $$slotProps) => {
						var fragment_8 = root_8$1();
						var node_6 = first_child(fragment_8);

						Ui_column(node_6, {
							classes: "is-6",
							children: ($$anchor, $$slotProps) => {
								Ui_textfield($$anchor, {
									get value() {
										return newVal.id;
									},
									set value($$value) {
										newVal.id = $$value;
									},
									get placeholder() {
										return placeholder();
									},
									set placeholder($$value) {
										placeholder($$value);
									}
								});
							},
							$$slots: { default: true }
						});

						var node_7 = sibling(node_6, 2);

						Ui_column(node_7, {
							classes: "is-4",
							children: ($$anchor, $$slotProps) => {
								Ui_number($$anchor, {
									get value() {
										return newVal.number;
									},
									set value($$value) {
										newVal.number = $$value;
									}
								});
							},
							$$slots: { default: true }
						});

						var node_8 = sibling(node_7, 2);

						Ui_column(node_8, {
							classes: "is-2",
							children: ($$anchor, $$slotProps) => {
								Ui_button($$anchor, { icon: "plus", action: () => add() });
							},
							$$slots: { default: true }
						});

						append($$anchor, fragment_8);
					},
					$$slots: { default: true }
				});
			};

			if_block(node_5, ($$render) => {
				if (!readonly()) $$render(consequent_1);
			});
		}

		append($$anchor, fragment);
		pop();
	}

	var root$h = template(`<input>`);

	function Ui_password($$anchor, $$props) {
		push($$props, true);

		const $$stores = setup_stores();
		const $LOCALE = () => store_get(LOCALE, "$LOCALE", $$stores);

		/** @type {import('./type').UIInputProps} */
		prop($$props, "inputStarted", 11, false);
			let value = prop($$props, "value", 15, ""),
			placeholder = prop($$props, "placeholder", 3, ""),
			fieldname = prop($$props, "fieldname", 3, "password"),
			required = prop($$props, "required", 3, true),
			readonly = prop($$props, "readonly", 3, false),
			disabled = prop($$props, "disabled", 3, false),
			valid = prop($$props, "valid", 3, true),
			classes = prop($$props, "class", 3, ""),
			onchange = prop($$props, "onchange", 3, () => true),
			others = rest_props($$props, [
				"$$slots",
				"$$events",
				"$$legacy",
				"inputStarted",
				"value",
				"placeholder",
				"fieldname",
				"required",
				"readonly",
				"disabled",
				"valid",
				"class",
				"onchange"
			]);

		let invalid = derived(() => !valid());
		const oninput = UICommon$1.onInput(fieldname(), onchange());
		var input = root$h();

		remove_input_defaults(input);

		let attributes;

		template_effect(() => attributes = set_attributes(input, attributes, {
			id: `form-field-password-${fieldname() ?? ""}`,
			class: `input ${classes() ?? ""}`,
			type: "password",
			name: fieldname(),
			invalid: get$2(invalid),
			required: required(),
			readonly: readonly(),
			disabled: disabled(),
			placeholder: $LOCALE()[placeholder()],
			autocomplete: fieldname(),
			onchange: oninput,
			oninput,
			"aria-controls": `input-field-helper-${fieldname() ?? ""}`,
			"aria-describedby": `input-field-helper-${fieldname() ?? ""}`,
			...others
		}));

		bind_value(input, value);
		append($$anchor, input);
		pop();
	}

	function Ui_radio_buttons($$anchor, $$props) {
		push($$props, true);

		//
		/**
		 * @typedef {Object} Props
		 * @property {string} [fieldname]
		 * @property {any} [variants] - [
		array of groups
		{
		id:number,
		title:string|object,
		image:string|object,
		variants = [
		array of values variants in group
		{
		id:number,
		title:string|object,
		description:string|object,
		image:string|object,
		value:object
		}]
		}
		]
		 * @property {any} value - multiple && multiple in group
		{
		array of arrays of selected values in group
		if no selection group should be empty array
		[groupId]: [...variantsId]
		}
		multiple && one in group
		{
		[groupId]: variantId
		}
		only one (not multiple && one in group)
		{
		group: groupId
		value: variantId
		}
		 * @property {any} title
		 * @property {any} image
		 * @property {any} [buttonProps]
		 * @property {any} [titleComponent]
		 * @property {any} [titleComponentProps]
		 * @property {any} [imageComponent]
		 * @property {any} [imageComponentProps]
		 * @property {any} [descriptionComponent]
		 * @property {any} [descriptionComponentProps]
		 * @property {any} [listComponent]
		 * @property {any} [listComponentProps]
		 * @property {any} [getUIItem]
		 * @property {any} [getDefaultItemSublime]
		 * @property {any} [uiOn]
		 * @property {any} [uiOff]
		 */
		/** @type {Props} */
		let fieldname = prop($$props, "fieldname", 3, "radio-buttons"),
			variants = prop($$props, "variants", 19, () => []),
			value = prop($$props, "value", 15),
			buttonProps = prop($$props, "buttonProps", 19, () => ({})),
			titleComponent = prop($$props, "titleComponent", 3, Ui_title),
			titleComponentProps = prop($$props, "titleComponentProps", 19, () => ({ size: 5 })),
			imageComponent = prop($$props, "imageComponent", 3, Ui_image),
			imageComponentProps = prop($$props, "imageComponentProps", 19, () => ({ covered: true })),
			descriptionComponent = prop($$props, "descriptionComponent", 3, Ui_buttons),
			descriptionComponentProps = prop($$props, "descriptionComponentProps", 19, () => ({})),
			listComponent = prop($$props, "listComponent", 3, Ui_list),
			listComponentProps = prop($$props, "listComponentProps", 19, () => ({})),
			getUIItem = prop($$props, "getUIItem", 3, (valueId) => {
				return variantsButtons.find((btnVal) => btnVal.value === valueId);
			}),
			getDefaultItemSublime = prop($$props, "getDefaultItemSublime", 3, () => {
				return variants()[0].value;
			}),
			uiOn = prop($$props, "uiOn", 3, (item) => {
				item.color = "success";
				item.outlined = false;
			}),
			uiOff = prop($$props, "uiOff", 3, (item) => {
				item.color = false;
				item.outlined = true;
			}),
			onchange = prop($$props, "onchange", 3, () => true);

		onMount(() => {
			initVariantsButton();
			selectDefault();
		});

		let variantsButtons = [],
			listItems = state(proxy([]));

		function initVariantsButton() {
			variantsButtons = variants().map((variant) => {
				return { ...buttonProps(), ...variant };
			});

			set(listItems, proxy([
				{
					id: 0,
					title: $$props.title,
					image: $$props.image,
					description: { values: variantsButtons }
				}
			]));
		}

		//
		function toggle(selectedValue) {
			let ui = { on: undefined, off: undefined };

			//
			if (value()) {
				ui.off = value();
				ui.on = selectedValue;
			}

			value(selectedValue);
			updateUI(ui);
			//
			onchange()({ field: fieldname(), value: value() });
		}

		//
		function updateUI(changes) {
			if (changes.off) {
				uiOff()(getUIItem()(changes.off));
			}

			if (changes.on) {
				uiOn()(getUIItem()(changes.on));
			}

			variantsButtons = variantsButtons;
			set(listItems, proxy(get$2(listItems)));
		}

		//
		function selectDefault() {
			if (variants().length > 0) {
				if (typeof value() !== "undefined") {
					updateUI({ on: value() });
				} else {
					const defValue = getDefaultItemSublime()();

					toggle(defValue);
				}
			}
		}

		const SvelteComponent = derived(listComponent);
		var fragment = comment();
		var node = first_child(fragment);

		var descriptionComponentProps_1 = derived(() => ({
			...descriptionComponentProps(),
			action(event, value) {
				toggle(value);
			}
		}));

		component(node, () => get$2(SvelteComponent), ($$anchor, $$component) => {
			$$component($$anchor, spread_props(listComponentProps, {
				get titleComponent() {
					return titleComponent();
				},
				get titleComponentProps() {
					return titleComponentProps();
				},
				get descriptionComponent() {
					return descriptionComponent();
				},
				get descriptionComponentProps() {
					return get$2(descriptionComponentProps_1);
				},
				get imageComponent() {
					return imageComponent();
				},
				get imageComponentProps() {
					return imageComponentProps();
				},
				get items() {
					return get$2(listItems);
				},
				set items($$value) {
					set(listItems, proxy($$value));
				}
			}));
		});

		append($$anchor, fragment);
		pop();
	}

	var root_1$f = template(`<p> </p>`);
	var root_4$8 = template(`<option></option>`);
	var root_3$8 = template(`<datalist></datalist>`);
	var root_2$a = template(`<input> <output> </output> <!>`, 1);

	function Ui_range($$anchor, $$props) {
		push($$props, true);

		const $$stores = setup_stores();
		const $LOCALE = () => store_get(LOCALE, "$LOCALE", $$stores);

		/** @type {import('./type').UIInputProps} */
		let value = prop($$props, "value", 15, 10),
			min = prop($$props, "min", 3, 0),
			max = prop($$props, "max", 3, 100),
			step = prop($$props, "step", 3, 1),
			tickmarks = prop($$props, "tickmarks", 3, false),
			placeholder = prop($$props, "placeholder", 3, ""),
			fieldname = prop($$props, "fieldname", 3, "range"),
			required = prop($$props, "required", 3, true),
			disabled = prop($$props, "disabled", 3, false),
			readonly = prop($$props, "readonly", 3, false),
			valid = prop($$props, "valid", 3, true),
			classes = prop($$props, "class", 3, ""),
			onchange = prop($$props, "onchange", 3, () => true),
			others = rest_props($$props, [
				"$$slots",
				"$$events",
				"$$legacy",
				"value",
				"min",
				"max",
				"step",
				"tickmarks",
				"placeholder",
				"fieldname",
				"required",
				"disabled",
				"readonly",
				"valid",
				"class",
				"onchange"
			]);

		let invalid = derived(() => !valid());
		const oninput = UICommon$1.onInput(fieldname(), onchange());
		var fragment = comment();
		var node = first_child(fragment);

		{
			var consequent = ($$anchor) => {
				var p = root_1$f();
				var text = child(p, true);

				reset(p);
				template_effect(() => set_text(text, value()));
				append($$anchor, p);
			};

			var alternate = ($$anchor) => {
				var fragment_1 = root_2$a();
				var input = first_child(fragment_1);

				remove_input_defaults(input);

				let attributes;
				var output = sibling(input, 2);
				var text_1 = child(output, true);

				reset(output);

				var node_1 = sibling(output, 2);

				{
					var consequent_1 = ($$anchor) => {
						var datalist = root_3$8();

						each(datalist, 21, tickmarks, index$d, ($$anchor, tickmark) => {
							var option = root_4$8();
							var option_value = {};

							template_effect(() => {
								if (option_value !== (option_value = get$2(tickmark).value)) {
									option.value = null == (option.__value = get$2(tickmark).value) ? "" : get$2(tickmark).value;
								}

								set_attribute(option, "label", get$2(tickmark).label);
							});

							append($$anchor, option);
						});

						reset(datalist);
						template_effect(() => set_attribute(datalist, "id", `form-field-range-${fieldname() ?? ""}-tickmarks`));
						append($$anchor, datalist);
					};

					if_block(node_1, ($$render) => {
						if (Array.isArray(tickmarks()) && tickmarks().length) $$render(consequent_1);
					});
				}

				template_effect(() => {
					attributes = set_attributes(input, attributes, {
						id: `form-field-range-${fieldname() ?? ""}`,
						class: `input big-number slider has-output is-fullwidth is-success ${classes() ?? ""}`,
						type: "range",
						name: fieldname(),
						min: min(),
						max: max(),
						step: step(),
						list: `form-field-range-${fieldname() ?? ""}-tickmarks`,
						invalid: get$2(invalid),
						disabled: disabled(),
						required: required(),
						readonly: readonly(),
						placeholder: $LOCALE()[placeholder()],
						autocomplete: fieldname(),
						"aria-controls": `input-field-helper-${fieldname() ?? ""}`,
						"aria-describedby": `input-field-helper-${fieldname() ?? ""}`,
						onchange: oninput,
						oninput,
						...others
					});

					set_attribute(output, "for", `form-field-range-${fieldname() ?? ""}`);
					set_text(text_1, value());
				});

				bind_value(input, value);
				append($$anchor, fragment_1);
			};

			if_block(node, ($$render) => {
				if (readonly()) $$render(consequent); else $$render(alternate, false);
			});
		}

		append($$anchor, fragment);
		pop();
	}

	function Ui_select_from_model($$anchor, $$props) {
		push($$props, true);

		/**
		 * @typedef {Object} Props
		 * @property {boolean} [inputStarted]
		 * @property {any} value
		 * @property {string} [placeholder]
		 * @property {string} [emptyValueTitle]
		 * @property {string} [fieldname]
		 * @property {string} [modelName]
		 * @property {string} [actionName]
		 * @property {any} [actionFilter]
		 * @property {any} [actionSorter]
		 * @property {any} [actionPager]
		 * @property {any} [actionSearch]
		 * @property {string} [optionId]
		 * @property {string} [optionTitle]
		 * @property {boolean} [icon]
		 * @property {boolean} [required]
		 * @property {boolean} [readonly]
		 * @property {boolean} [multiple]
		 * @property {number} [size]
		 * @property {boolean} [valid]
		 * @property {boolean} [validated]
		 * @property {boolean} [errors]
		 * @property {boolean} [formErrors]
		 * @property {boolean} [formLevelError]
		 * @property {boolean} [returnVariant]
		 */
		/** @type {Props} */
		let placeholder = prop($$props, "placeholder", 3, ""),
			emptyValueTitle = prop($$props, "emptyValueTitle", 3, ""),
			fieldname = prop($$props, "fieldname", 3, "selectFromModel"),
			modelName = prop($$props, "modelName", 3, ""),
			actionName = prop($$props, "actionName", 3, ""),
			actionFilter = prop($$props, "actionFilter", 19, () => ({})),
			actionSorter = prop($$props, "actionSorter", 19, () => ({})),
			actionPager = prop($$props, "actionPager", 19, () => ({})),
			actionSearch = prop($$props, "actionSearch", 3, undefined),
			optionId = prop($$props, "optionId", 3, ":_id"),
			optionTitle = prop($$props, "optionTitle", 3, ":title"),
			required = prop($$props, "required", 3, true),
			readonly = prop($$props, "readonly", 3, false),
			multiple = prop($$props, "multiple", 3, false),
			size = prop($$props, "size", 3, 8),
			valid = prop($$props, "valid", 3, true),
			returnVariant = prop($$props, "returnVariant", 3, false),
			classes = prop($$props, "class", 3, ""),
			onchange = prop($$props, "onchange", 3, () => true),
			onerror = prop($$props, "onerror", 3, () => {}),
			others = rest_props($$props, [
				"$$slots",
				"$$events",
				"$$legacy",
				"value",
				"placeholder",
				"emptyValueTitle",
				"fieldname",
				"modelName",
				"actionName",
				"actionFilter",
				"actionSorter",
				"actionPager",
				"actionSearch",
				"optionId",
				"optionTitle",
				"required",
				"readonly",
				"multiple",
				"size",
				"valid",
				"returnVariant",
				"class",
				"onchange",
				"onerror"
			]);

		function argumentsSetProvided() {
			return modelName() && actionName() && actionFilter();
		}

		let loaded = false;
		let variants = state(proxy([]));
		let disabled = derived(() => !loaded);

		onMount(async () => {
			if (argumentsSetProvided()) {
				const notApp = notCommon$1.getApp();
				const Model = notApp.getModel(modelName()).setFilter(actionFilter()).setSorter(actionSorter()).setPager(actionPager()).setSearch(actionSearch());
				const response = await Model[`$` + actionName()]();

				if (response.status === DEFAULT_STATUS_SUCCESS) {
					const result = response.result;

					set(variants, proxy(result.map((item) => {
						return {
							id: notPath.get(optionId(), item),
							title: notPath.get(optionTitle(), item)
						};
					})));
				} else {
					onerror()(response.errors || response.message);
				}
			}
		});

		function onChange(data) {
			if (returnVariant()) {
				onchange()({
					...data,
					value: get$2(variants).find((itm) => itm.id === data.value)
				});
			} else {
				onchange()(data);
			}
		}

		Ui_select($$anchor, spread_props(
			{
				get value() {
					return $$props.value;
				},
				get class() {
					return classes();
				},
				get placeholder() {
					return placeholder();
				},
				get emptyValueTitle() {
					return emptyValueTitle();
				},
				get fieldname() {
					return fieldname();
				},
				get required() {
					return required();
				},
				get readonly() {
					return readonly();
				},
				get disabled() {
					return get$2(disabled);
				},
				get multiple() {
					return multiple();
				},
				get size() {
					return size();
				},
				get valid() {
					return valid();
				},
				onchange: onChange
			},
			() => others,
			{
				get variants() {
					return get$2(variants);
				},
				set variants($$value) {
					set(variants, proxy($$value));
				}
			}
		));

		pop();
	}

	var root_2$9 = template(`<!> <input> <label class="label"><!></label>`, 1);

	function Ui_switch$1($$anchor, $$props) {
		push($$props, true);

		const $$stores = setup_stores();
		const $LOCALE = () => store_get(LOCALE, "$LOCALE", $$stores);

		/** @type {import('./type').UIInputProps} */
		let value = prop($$props, "value", 15, false),
			label = prop($$props, "label", 3, ""),
			hideLabel = prop($$props, "hideLabel", 3, false),
			placeholder = prop($$props, "placeholder", 3, ""),
			fieldname = prop($$props, "fieldname", 3, "textfield"),
			required = prop($$props, "required", 3, true),
			readonly = prop($$props, "readonly", 3, false),
			disabled = prop($$props, "disabled", 3, false),
			valid = prop($$props, "valid", 3, true),
			classes = prop($$props, "class", 3, ""),
			onchange = prop($$props, "onchange", 3, () => true),
			others = rest_props($$props, [
				"$$slots",
				"$$events",
				"$$legacy",
				"value",
				"label",
				"hideLabel",
				"placeholder",
				"fieldname",
				"required",
				"readonly",
				"disabled",
				"valid",
				"class",
				"onchange"
			]);

		let invalid = derived(() => !valid());
		const oninput = UICommon$1.onInput(fieldname(), onchange());
		var fragment = comment();
		var node = first_child(fragment);

		{
			var consequent = ($$anchor) => {
				Ui_boolean($$anchor, {
					get LC_TRUE() {
						return label();
					},
					get LC_FALSE() {
						return label();
					},
					get value() {
						return value();
					}
				});
			};

			var alternate_1 = ($$anchor) => {
				var fragment_2 = root_2$9();
				var node_1 = first_child(fragment_2);

				{
					var consequent_1 = ($$anchor) => {
						Ui_boolean($$anchor, { value: false });
					};

					if_block(node_1, ($$render) => {
						if (!label() && !hideLabel()) $$render(consequent_1);
					});
				}

				var input = sibling(node_1, 2);

				remove_input_defaults(input);

				let attributes;
				var label_1 = sibling(input, 2);
				var node_2 = child(label_1);

				{
					var consequent_3 = ($$anchor) => {
						var fragment_4 = comment();
						var node_3 = first_child(fragment_4);

						{
							var consequent_2 = ($$anchor) => {
								var text$1 = text();

								template_effect(() => set_text(text$1, $LOCALE()[label()]));
								append($$anchor, text$1);
							};

							var alternate = ($$anchor) => {
								Ui_boolean($$anchor, { value: false });
							};

							if_block(node_3, ($$render) => {
								if (label()) $$render(consequent_2); else $$render(alternate, false);
							});
						}

						append($$anchor, fragment_4);
					};

					if_block(node_2, ($$render) => {
						if (!hideLabel()) $$render(consequent_3);
					});
				}

				reset(label_1);

				template_effect(() => {
					attributes = set_attributes(input, attributes, {
						id: `form-field-switch-${fieldname() ?? ""}`,
						class: `switch ${classes() ?? ""}`,
						type: "checkbox",
						name: fieldname(),
						placeholder: $LOCALE()[placeholder()],
						disabled: disabled(),
						required: required(),
						readonly: readonly(),
						invalid: get$2(invalid),
						onblur: oninput,
						oninput,
						"aria-controls": `input-field-helper-${fieldname() ?? ""}`,
						"aria-describedby": `input-field-helper-${fieldname() ?? ""}`,
						...others
					});

					set_attribute(label_1, "for", `form-field-switch-${fieldname() ?? ""}`);
				});

				bind_checked(input, value);
				append($$anchor, fragment_2);
			};

			if_block(node, ($$render) => {
				if (readonly()) $$render(consequent); else $$render(alternate_1, false);
			});
		}

		append($$anchor, fragment);
		pop();
	}

	var root_4$7 = template(`<div class="switch-list-item"><input> <!></div>`);

	function Ui_switch_list($$anchor, $$props) {
		push($$props, true);

		/** @type {import('./type').UIInputProps} */
		let value = prop($$props, "value", 31, () => proxy([])),
			variants = prop($$props, "variants", 19, () => []),
			fieldname = prop($$props, "fieldname", 3, "textfield"),
			required = prop($$props, "required", 3, true),
			readonly = prop($$props, "readonly", 3, false),
			disabled = prop($$props, "disabled", 3, false),
			valid = prop($$props, "valid", 3, true),
			classes = prop($$props, "class", 3, " is-rounded is-success "),
			onchange = prop($$props, "onchange", 3, () => true),
			others = rest_props($$props, [
				"$$slots",
				"$$events",
				"$$legacy",
				"value",
				"variants",
				"fieldname",
				"required",
				"readonly",
				"disabled",
				"valid",
				"class",
				"onchange"
			]);

		function addId(varId) {
			if (!value().includes(varId)) {
				value().push(varId);
				value(value());
			}
		}

		function remId(varId) {
			if (value().includes(varId)) {
				value().splice(value().indexOf(varId), 1);
				value(value());
			}
		}

		function onChange(ev) {
			const varId = ev.target.id.split("-variant-").at(-1);

			ev.target.checked ? addId(varId) : remId(varId);

			let data = { field: fieldname(), value: value() };

			onchange()(data);
			return true;
		}

		let invalid = derived(() => !valid());
		var fragment = comment();
		var node = first_child(fragment);

		{
			var consequent_1 = ($$anchor) => {
				var fragment_1 = comment();
				var node_1 = first_child(fragment_1);

				{
					var consequent = ($$anchor) => {
						var text$1 = text();

						template_effect(() => set_text(text$1, variants().filter((variant) => value().includes(variant.id)).map((variant) => variant.title).join(", ")));
						append($$anchor, text$1);
					};

					if_block(node_1, ($$render) => {
						if (value()) $$render(consequent);
					});
				}

				append($$anchor, fragment_1);
			};

			var alternate = ($$anchor) => {
				var fragment_3 = comment();
				var node_2 = first_child(fragment_3);

				each(node_2, 17, variants, (variant) => variant.id, ($$anchor, variant) => {
					var div = root_4$7();
					var input = child(div);

					remove_input_defaults(input);

					let attributes;
					var node_3 = sibling(input, 2);

					Ui_label(node_3, {
						class: "label",
						get for() {
							return `form-field-switch-${fieldname() ?? ""}-variant-${get$2(variant).id ?? ""}`;
						},
						get label() {
							return get$2(variant).title;
						}
					});

					reset(div);

					template_effect(() => attributes = set_attributes(input, attributes, {
						type: "checkbox",
						class: `switch ${classes() ?? ""}`,
						id: `form-field-switch-${fieldname() ?? ""}-variant-${get$2(variant).id ?? ""}`,
						checked: value().includes(get$2(variant).id),
						name: fieldname(),
						disabled: disabled(),
						required: required(),
						readonly: readonly(),
						invalid: get$2(invalid),
						onblur: onChange,
						oninput: onChange,
						"aria-controls": `input-field-helper-${fieldname() ?? ""}-variant-${get$2(variant).id ?? ""}`,
						"aria-describedby": `input-field-helper-${fieldname() ?? ""}-variant-${get$2(variant).id ?? ""}`,
						...others
					}));

					append($$anchor, div);
				});

				append($$anchor, fragment_3);
			};

			if_block(node, ($$render) => {
				if (readonly()) $$render(consequent_1); else $$render(alternate, false);
			});
		}

		append($$anchor, fragment);
		pop();
	}

	function remove(e, value, changeEvent) {
		e && e.preventDefault();

		let id = e.currentTarget.dataset.id;

		if (value().includes(id)) {
			value().splice(value().indexOf(id), 1);
			value(value());
			changeEvent();
		}

		return false;
	}

	var root_4$6 = template(`<button aria-label="delete button" class="delete is-small"></button>`);
	var root_3$7 = template(`<span> <!></span>`);
	var root_6$6 = template(`<div class="select is-small"><select><!><!></select></div> <!>`, 1);
	var root_1$e = template(`<!> <!>`, 1);

	function Ui_tag_select($$anchor, $$props) {
		push($$props, true);

		const $$stores = setup_stores();
		const $LOCALE = () => store_get(LOCALE, "$LOCALE", $$stores);

		onMount(() => {
			clearValueFromDeadVariants();
		});

		/**
		 * @typedef {Object} Props
		 * @property {any} [value] - list of item ids
		 * @property {any} [variants]
		 * @property {string} [fieldname]
		 * @property {boolean} [readonly] - export let required = true;
		 * @property {boolean} [valid]
		 * @property {any} [beforeAdd]
		 * @property {any} [getItemId]
		 * @property {any} [getItemTitle]
		 * @property {any} [getItemType]
		 * @property {any} [buildItem]
		 */
		/** @type {Props} */
		let value = prop($$props, "value", 31, () => proxy([])),
			LC_ADD = prop($$props, "LC_ADD", 3, "not-node:add_label"),
			LC_SELECT_FROM_LIST = prop($$props, "LC_SELECT_FROM_LIST", 3, "not-node:select_from_list_label"),
			variants = prop($$props, "variants", 19, () => []),
			fieldname = prop($$props, "fieldname", 3, "tag"),
			readonly = prop($$props, "readonly", 3, false),
			beforeAdd = prop($$props, "beforeAdd", 3, () => /*variant, variants*/ {
				return true;
			}),
			getItemId = prop($$props, "getItemId", 3, (variant) => {
				return variant.id;
			}),
			getItemTitle = prop($$props, "getItemTitle", 3, (variant) => {
				return variant.title;
			}),
			getItemType = prop($$props, "getItemType", 3, (variant) => {
				return "info";
			}),
			buildItem = prop($$props, "buildItem", 3, (variant) => {
				return {
					id: getItemId()(variant),
					title: getItemTitle()(variant),
					type: getItemType()(variant)
				};
			}),
			classes = prop($$props, "class", 3, ""),
			onchange = prop($$props, "onchange", 3, () => true);

		function variantIdToVariant(id) {
			return variants().find((variant) => getItemId()(variant) === id);
		}

		function changeEvent() {
			onchange()({ field: fieldname(), value: value() });
		}

		function add(e) {
			e && e.preventDefault();

			let id = e.currentTarget.parentNode.querySelector("select").value;
			const variant = variantIdToVariant(id);

			if (!variant) {
				return false;
			}

			if (!beforeAdd()(variant, variants())) {
				return false;
			}

			if (id && value().indexOf(id) === -1) {
				value().push(id);
				value(value());
				changeEvent();
			}

			return false;
		}

		function clearValueFromDeadVariants() {
			value(value().filter((id) => {
				return variantIdToVariant(id);
			}));

			return value();
		}

		/*
		item = {
		  id,        //unique
		  title,     //some text
		  type       //for coloring items, usual html template names danger, success, etc
		}
		*/
		let items = derived(() => value().map(variantIdToVariant).filter((variant) => variant).map(buildItem()));

		Ui_columns($$anchor, {
			get class() {
				return classes();
			},
			children: ($$anchor, $$slotProps) => {
				var fragment_1 = root_1$e();
				var node = first_child(fragment_1);

				Ui_column(node, {
					children: ($$anchor, $$slotProps) => {
						var fragment_2 = comment();
						var node_1 = first_child(fragment_2);

						each(node_1, 17, () => get$2(items), (item) => item.id, ($$anchor, item) => {
							var span = root_3$7();
							var text = child(span);
							var node_2 = sibling(text);

							{
								var consequent = ($$anchor) => {
									var button = root_4$6();

									button.__click = [remove, value, changeEvent];
									template_effect(() => set_attribute(button, "data-id", get$2(item).id));
									append($$anchor, button);
								};

								if_block(node_2, ($$render) => {
									if (!readonly()) $$render(consequent);
								});
							}

							reset(span);

							template_effect(() => {
								set_class(span, `mx-1 tag is-${get$2(item).type ?? ""}`);
								set_text(text, `${$LOCALE()[get$2(item).title] ?? ""} `);
							});

							append($$anchor, span);
						});

						append($$anchor, fragment_2);
					},
					$$slots: { default: true }
				});

				var node_3 = sibling(node, 2);

				{
					var consequent_1 = ($$anchor) => {
						Ui_column($$anchor, {
							children: ($$anchor, $$slotProps) => {
								var fragment_4 = root_6$6();
								var div = first_child(fragment_4);
								var select = child(div);
								var node_4 = child(select);

								Ui_select_option(node_4, {
									value: -1,
									selected: true,
									get title() {
										return LC_SELECT_FROM_LIST();
									}
								});

								var node_5 = sibling(node_4);

								each(node_5, 17, variants, index$d, ($$anchor, variant) => {
									Ui_select_option($$anchor, {
										get value() {
											return get$2(variant).id;
										},
										get title() {
											return get$2(variant).title;
										}
									});
								});

								reset(select);
								reset(div);

								var node_6 = sibling(div, 2);

								Ui_button(node_6, {
									color: "primary",
									size: "small",
									action: add,
									get title() {
										return LC_ADD();
									}
								});

								append($$anchor, fragment_4);
							},
							$$slots: { default: true }
						});
					};

					if_block(node_3, ($$render) => {
						if (!readonly()) $$render(consequent_1);
					});
				}

				append($$anchor, fragment_1);
			},
			$$slots: { default: true }
		});

		pop();
	}

	delegate(["click"]);

	var root_1$d = template(`<p> </p>`);
	var root_2$8 = template(`<input>`);

	function Ui_telephone($$anchor, $$props) {
		push($$props, true);

		const $$stores = setup_stores();
		const $LOCALE = () => store_get(LOCALE, "$LOCALE", $$stores);

		/** @type {import('./type').UIInputProps} */
		let value = prop($$props, "value", 15, ""),
			placeholder = prop($$props, "placeholder", 3, "+7 (987) 654-32-10"),
			fieldname = prop($$props, "fieldname", 3, "telephone"),
			required = prop($$props, "required", 3, true),
			disabled = prop($$props, "disabled", 3, false),
			readonly = prop($$props, "readonly", 3, false),
			valid = prop($$props, "valid", 3, true),
			classes = prop($$props, "class", 3, ""),
			onchange = prop($$props, "onchange", 3, () => true),
			others = rest_props($$props, [
				"$$slots",
				"$$events",
				"$$legacy",
				"value",
				"placeholder",
				"fieldname",
				"required",
				"disabled",
				"readonly",
				"valid",
				"class",
				"onchange"
			]);

		let invalid = derived(() => !valid());
		const oninput = UICommon$1.onInput(fieldname(), onchange());
		var fragment = comment();
		var node = first_child(fragment);

		{
			var consequent = ($$anchor) => {
				var p = root_1$d();
				var text = child(p, true);

				reset(p);
				template_effect(() => set_text(text, value()));
				append($$anchor, p);
			};

			var alternate = ($$anchor) => {
				var input = root_2$8();

				remove_input_defaults(input);

				let attributes;

				template_effect(() => attributes = set_attributes(input, attributes, {
					id: `form-field-telephone-${fieldname() ?? ""}`,
					class: `input ${classes() ?? ""}`,
					type: "tel",
					name: fieldname(),
					invalid: get$2(invalid),
					required: required(),
					readonly: readonly(),
					disabled: disabled(),
					placeholder: $LOCALE()[placeholder()],
					autocomplete: fieldname(),
					onchange: oninput,
					oninput,
					"aria-controls": `input-field-helper-${fieldname() ?? ""}`,
					"aria-describedby": `input-field-helper-${fieldname() ?? ""}`,
					...others
				}));

				bind_value(input, value);
				append($$anchor, input);
			};

			if_block(node, ($$render) => {
				if (readonly()) $$render(consequent); else $$render(alternate, false);
			});
		}

		append($$anchor, fragment);
		pop();
	}

	var index$5 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		UIAutocomplete: Ui_autocomplete,
		UIControl: Ui_control,
		UIDate: Ui_date,
		UIDatetimeInTZ: Ui_datetime_in_tz,
		UIEmail: Ui_email,
		UIHidden: Ui_hidden,
		UIJSONArea: Ui_json_area,
		UILabel: Ui_label,
		UIListOfModels: Ui_list_of_models,
		UINamedNumbersList: Ui_named_numbers_list,
		UINumber: Ui_number,
		UIPassword: Ui_password,
		UIRadioButtons: Ui_radio_buttons,
		UIRange: Ui_range,
		UISelect: Ui_select,
		UISelectFromModel: Ui_select_from_model,
		UISelectOption: Ui_select_option,
		UISwitch: Ui_switch$1,
		UISwitchList: Ui_switch_list,
		UITagSelect: Ui_tag_select,
		UITelephone: Ui_telephone,
		UITextarea: Ui_textarea,
		UITextfield: Ui_textfield
	});

	var index$4 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		UILink: Ui_link,
		UILinks: Ui_links
	});

	var root_4$5 = template(`<div class="column box"> </div>`);
	var root_1$c = template(`<div class="columns"><div class="column"><!></div> <!> <div class="column"><!></div></div>`);

	function Ui_endless_list_navigation($$anchor, $$props) {
		push($$props, true);

		const $$stores = setup_stores();
		const $LOCALE = () => store_get(LOCALE, "$LOCALE", $$stores);
		const dispatch = createEventDispatcher();

		// export let skip = 0;
		/**
		 * @typedef {Object} Props
		 * @property {number} [page] - export let count = 0;
		 * @property {number} [pages]
		 * @property {any} [buttonComponent]
		 * @property {any} [buttonComponentProps]
		 */
		/** @type {Props} */
		let page = prop($$props, "page", 3, 0),
			pages = prop($$props, "pages", 3, 0),
			buttonComponent = prop($$props, "buttonComponent", 3, Ui_button),
			buttonComponentProps = prop($$props, "buttonComponentProps", 19, () => ({}));

		var fragment = comment();
		var node = first_child(fragment);

		{
			var consequent_3 = ($$anchor) => {
				var div = root_1$c();
				var div_1 = child(div);
				var node_1 = child(div_1);

				{
					var consequent = ($$anchor) => {
						var fragment_1 = comment();
						const SvelteComponent = derived(buttonComponent);
						var node_2 = first_child(fragment_1);

						component(node_2, () => get$2(SvelteComponent), ($$anchor, $$component) => {
							$$component($$anchor, spread_props(buttonComponentProps, {
								action: () => dispatch('prev'),
								children: ($$anchor, $$slotProps) => {
									next();

									var text$1 = text();

									template_effect(() => set_text(text$1, $LOCALE()['not-node:list_navigation_prev_button_label']));
									append($$anchor, text$1);
								},
								$$slots: { default: true }
							}));
						});

						append($$anchor, fragment_1);
					};

					if_block(node_1, ($$render) => {
						if (page() > 1) $$render(consequent);
					});
				}

				reset(div_1);

				var node_3 = sibling(div_1, 2);

				{
					var consequent_1 = ($$anchor) => {
						var div_2 = root_4$5();
						var text_1 = child(div_2);

						reset(div_2);
						template_effect(() => set_text(text_1, `${page() ?? ""} / ${pages() ?? ""}`));
						append($$anchor, div_2);
					};

					if_block(node_3, ($$render) => {
						if (pages() > 1) $$render(consequent_1);
					});
				}

				var div_3 = sibling(node_3, 2);
				var node_4 = child(div_3);

				{
					var consequent_2 = ($$anchor) => {
						var fragment_3 = comment();
						const SvelteComponent_1 = derived(buttonComponent);
						var node_5 = first_child(fragment_3);

						component(node_5, () => get$2(SvelteComponent_1), ($$anchor, $$component) => {
							$$component($$anchor, spread_props(buttonComponentProps, {
								action: () => dispatch('next'),
								children: ($$anchor, $$slotProps) => {
									next();

									var text_2 = text();

									template_effect(() => set_text(text_2, $LOCALE()['not-node:list_navigation_next_button_label']));
									append($$anchor, text_2);
								},
								$$slots: { default: true }
							}));
						});

						append($$anchor, fragment_3);
					};

					if_block(node_4, ($$render) => {
						if (page() < pages()) $$render(consequent_2);
					});
				}

				reset(div_3);
				reset(div);
				append($$anchor, div);
			};

			if_block(node, ($$render) => {
				if (pages() > 0) $$render(consequent_3);
			});
		}

		append($$anchor, fragment);
		pop();
	}

	var root$g = template(`<div class="box list-item-selectable svelte-ialyiy" role="button" tabindex="0"><span> </span></div>`);

	function Ui_endless_list_simple_item($$anchor, $$props) {
		push($$props, true);

		const dispatch = createEventDispatcher();

		function click() {
			dispatch("click", {
				_id: $$props._id,
				id: $$props.id,
				title: $$props.title
			});
		}

		var div = root$g();
		var event_handler = derived(() => preventDefault(click));

		div.__click = function (...$$args) {
			get$2(event_handler)?.apply(this, $$args);
		};

		div.__keyup = click;

		var span = child(div);
		var text = child(span, true);

		reset(span);
		reset(div);
		template_effect(() => set_text(text, $$props.title));
		append($$anchor, div);
		pop();
	}

	delegate(["click", "keyup"]);

	var root$f = template(`<div><!></div> <!>`, 1);

	function Ui_endless_list($$anchor, $$props) {
		push($$props, true);

		/**
		 * @typedef {Object} Props
		 * @property {any} [data]
		 * @property {any} [itemComponent] - list element
		 * @property {any} [itemComponentProps]
		 * @property {any} [emptyListPlaceholderComponent] - if list is empty
		 * @property {any} [emptyListPlaceholderComponentProps]
		 * @property {any} [listNavigationComponent] - prev and next block
		 * @property {any} [listNavigationComponentProps]
		 */
		/** @type {Props} */
		let data = prop($$props, "data", 31, () => proxy({
				list: [],
				skip: 0,
				count: 0,
				page: 0,
				pages: 0
			})),
			itemComponent = prop($$props, "itemComponent", 3, Ui_endless_list_simple_item),
			itemComponentProps = prop($$props, "itemComponentProps", 19, () => ({})),
			emptyListPlaceholderComponent = prop($$props, "emptyListPlaceholderComponent", 3, Ui_list_empty_placeholder),
			emptyListPlaceholderComponentProps = prop($$props, "emptyListPlaceholderComponentProps", 19, () => ({})),
			listNavigationComponent = prop($$props, "listNavigationComponent", 3, Ui_endless_list_navigation),
			listNavigationComponentProps = prop($$props, "listNavigationComponentProps", 19, () => ({}));

		const SvelteComponent_2 = derived(listNavigationComponent);
		var fragment = root$f();
		var div = first_child(fragment);
		var node = child(div);

		{
			var consequent = ($$anchor) => {
				var fragment_1 = comment();
				var node_1 = first_child(fragment_1);

				each(node_1, 17, () => data().list, (item) => item.id, ($$anchor, item) => {
					var fragment_2 = comment();
					const SvelteComponent = derived(itemComponent);
					var node_2 = first_child(fragment_2);

					component(node_2, () => get$2(SvelteComponent), ($$anchor, $$component) => {
						$$component($$anchor, spread_props(
							{
								get onclick() {
									return $$props.onselect;
								}
							},
							itemComponentProps,
							() => get$2(item)
						));
					});

					append($$anchor, fragment_2);
				});

				append($$anchor, fragment_1);
			};

			var alternate = ($$anchor) => {
				var fragment_3 = comment();
				const SvelteComponent_1 = derived(emptyListPlaceholderComponent);
				var node_3 = first_child(fragment_3);

				component(node_3, () => get$2(SvelteComponent_1), ($$anchor, $$component) => {
					$$component($$anchor, spread_props(emptyListPlaceholderComponentProps));
				});

				append($$anchor, fragment_3);
			};

			if_block(node, ($$render) => {
				if (data().list.length) $$render(consequent); else $$render(alternate, false);
			});
		}

		reset(div);

		var node_4 = sibling(div, 2);

		component(node_4, () => get$2(SvelteComponent_2), ($$anchor, $$component) => {
			$$component($$anchor, spread_props(listNavigationComponentProps, {
				get onprev() {
					return $$props.onprev;
				},
				get onnext() {
					return $$props.onnext;
				},
				get page() {
					return data().page;
				},
				set page($$value) {
					data(data().page = $$value, true);
				},
				get pages() {
					return data().pages;
				},
				set pages($$value) {
					data(data().pages = $$value, true);
				},
				get skip() {
					return data().skip;
				},
				set skip($$value) {
					data(data().skip = $$value, true);
				},
				get count() {
					return data().count;
				},
				set count($$value) {
					data(data().count = $$value, true);
				}
			}));
		});

		append($$anchor, fragment);
		pop();
	}

	function Ui_list_select($$anchor, $$props) {
		push($$props, true);

		const dispatch = createEventDispatcher();

		/**
		 * @typedef {Object} Props
		 * @property {string} [fieldname]
		 * @property {boolean} [multiple]
		 * @property {boolean} [atLeastOne]
		 * @property {any} [variants] - array of values variants in group
		[
		{
		id:number,
		title:string|object,
		description:string|object,
		image:string|object,
		value:object
		}
		]
		 * @property {any} value - [...selectedItemsValues]
		 * @property {any} [selectedVariantsIds] - [...selectedItemsIds]
		 * @property {any} [titleComponent]
		 * @property {any} [titleComponentProps]
		 * @property {any} [imageComponent]
		 * @property {any} [imageComponentProps]
		 * @property {any} [descriptionComponent]
		 * @property {any} [descriptionComponentProps]
		 * @property {any} [listComponent]
		 * @property {any} [listComponentProps]
		 * @property {any} [sublimeValue]
		 * @property {any} [getItem]
		 * @property {any} [getItemValue]
		 * @property {any} [getDefaultItemSublime]
		 * @property {any} [uiOn]
		 * @property {any} [uiOff]
		 */
		/** @type {Props} */
		let fieldname = prop($$props, "fieldname", 3, "list-select"),
			multiple = prop($$props, "multiple", 3, false),
			atLeastOne = prop($$props, "atLeastOne", 3, true),
			variants = prop($$props, "variants", 31, () => proxy([])),
			value = prop($$props, "value", 15),
			selectedVariantsIds = prop($$props, "selectedVariantsIds", 31, () => proxy([])),
			titleComponent = prop($$props, "titleComponent", 3, Ui_title),
			titleComponentProps = prop($$props, "titleComponentProps", 19, () => ({ size: 5 })),
			imageComponent = prop($$props, "imageComponent", 3, Ui_image),
			imageComponentProps = prop($$props, "imageComponentProps", 19, () => ({ covered: true })),
			descriptionComponent = prop($$props, "descriptionComponent", 3, Ui_buttons),
			descriptionComponentProps = prop($$props, "descriptionComponentProps", 19, () => ({})),
			listComponent = prop($$props, "listComponent", 3, Ui_list),
			listComponentProps = prop($$props, "listComponentProps", 19, () => ({})),
			sublimeValue = prop($$props, "sublimeValue", 3, (value) => value.id),
			getItem = prop($$props, "getItem", 3, ({ valueId }) => {
				return variants().find((btnVal) => btnVal.value.id === valueId);
			}),
			getItemValue = prop($$props, "getItemValue", 3, ({ valueId }) => {
				return getItem()({ valueId }).value;
			}),
			getDefaultItemSublime = prop($$props, "getDefaultItemSublime", 3, () => {
				return variants()[0].id;
			}),
			uiOn = prop($$props, "uiOn", 3, (item) => {
				item.color = "success";
				item.outlined = false;
			}),
			uiOff = prop($$props, "uiOff", 3, (item) => {
				item.color = false;
				item.outlined = true;
			});

		onMount(() => {
			if (value() && Array.isArray(value())) {
				if (atLeastOne() && value().length) {
					value().forEach((itemValue) => {
						let ui = updateSelected(itemValue);

						updateUI(ui);
					});
				}

				return;
			}

			selectDefault();
		});

		//
		function countOfSelected() {
			return Array.isArray(value()) ? selectedVariantsIds().length : 0;
		}

		const notLastOne = () => !(atLeastOne() && countOfSelected() === 1);

		//
		function updateSelected(detail) {
			const valueId = sublimeValue()(detail);
			let ui = { on: undefined, off: undefined };

			//
			if (!Array.isArray(selectedVariantsIds())) {
				selectedVariantsIds([]);
			}

			if (multiple()) {
				if (selectedVariantsIds().includes(valueId)) {
					if (notLastOne()) {
						selectedVariantsIds().splice(selectedVariantsIds().indexOf(valueId), 1);
						ui.off = { valueId };
					}
				} else {
					selectedVariantsIds().push(valueId);
					ui.on = { valueId };
				}
			} else {
				if (atLeastOne()) {
					if (!selectedVariantsIds().includes(valueId)) {
						if (countOfSelected() > 0) {
							ui.off = { valueId: selectedVariantsIds().pop() };
						}

						ui.on = { valueId };
						selectedVariantsIds([valueId]);
					}
				} else {
					if (selectedVariantsIds().includes(valueId)) {
						ui.off = { valueId };
						selectedVariantsIds().splice(selectedVariantsIds().indexOf(valueId), 1);
					} else {
						ui.on = { valueId };
						selectedVariantsIds().push(valueId);
					}
				}
			}

			selectedVariantsIds(selectedVariantsIds());
			return ui;
		}

		//
		function toggle(detail) {
			let ui = updateSelected(detail);

			updateUI(ui);
			//
			updateValue();
			//
			dispatch("change", { field: fieldname(), value: value() });
		}

		//
		function updateUI(changes) {
			if (changes.off) {
				uiOff()(getItem()(changes.off));
			}

			if (changes.on) {
				uiOn()(getItem()(changes.on));
			}

			variants(variants());
		}

		//
		function updateValue() {
			let newVal = [];

			if (typeof selectedVariantsIds() !== "undefined" && Array.isArray(selectedVariantsIds())) {
				newVal = selectedVariantsIds().filter((val) => typeof val !== "undefined").map((valueId) => getItemValue()({ valueId }));
			}

			value(newVal);
		}

		//
		function selectDefault() {
			if (atLeastOne() && variants().length > 0) {
				const defValueId = getDefaultItemSublime()();

				toggle({ id: defValueId });
			}
		}

		const SvelteComponent = derived(listComponent);
		var fragment = comment();
		var node = first_child(fragment);

		var descriptionComponentProps_1 = derived(() => ({
			...descriptionComponentProps(),
			action(event, value) {
				toggle(value);
			}
		}));

		component(node, () => get$2(SvelteComponent), ($$anchor, $$component) => {
			$$component($$anchor, spread_props(listComponentProps, {
				get titleComponent() {
					return titleComponent();
				},
				get titleComponentProps() {
					return titleComponentProps();
				},
				get descriptionComponent() {
					return descriptionComponent();
				},
				get descriptionComponentProps() {
					return get$2(descriptionComponentProps_1);
				},
				get imageComponent() {
					return imageComponent();
				},
				get imageComponentProps() {
					return imageComponentProps();
				},
				get items() {
					return variants();
				},
				set items($$value) {
					variants($$value);
				}
			}));
		});

		append($$anchor, fragment);
		pop();
	}

	function Ui_list_select_with_groups($$anchor, $$props) {
		push($$props, true);

		/**
		 * @typedef {Object} Props
		 * @property {string} [fieldname]
		 * @property {boolean} [multiple]
		 * @property {boolean} [onlyOneInGroup]
		 * @property {boolean} [atLeastOne]
		 * @property {any} [variants] - [
		array of groups
		{
		id:number,
		title:string|object,
		image:string|object,
		variants = [
		array of values variants in group
		{
		id:number,
		title:string|object,
		description:string|object,
		image:string|object,
		value:object
		}]
		}
		]
		 * @property {any} [variantsSelected] - multiple && multiple in group
		{
		array of arrays of selected values in group
		if no selection group should be empty array
		[groupId]: [...variantsId]
		}
		multiple && one in group
		{
		[groupId]: variantId
		}
		only one (not multiple && one in group)
		{
		group: groupId
		value: variantId
		}
		 * @property {any} value - {[groupId]: [...valuesOfSelectedItems]}
		 * @property {any} [titleComponent]
		 * @property {any} [titleComponentProps]
		 * @property {any} [imageComponent]
		 * @property {any} [imageComponentProps]
		 * @property {any} [descriptionComponent]
		 * @property {any} [descriptionComponentProps]
		 * @property {any} [listComponent]
		 * @property {any} [listComponentProps]
		 * @property {any} [sublimeValue]
		 * @property {any} [getItem]
		 * @property {any} [getItemValue]
		 * @property {any} [getDefaultItemSublime]
		 * @property {any} [uiOn]
		 * @property {any} [uiOff]
		 */
		/** @type {Props} */
		let onchange = prop($$props, "onchange", 3, () => true),
			fieldname = prop($$props, "fieldname", 3, "list-select-tags"),
			multiple = prop($$props, "multiple", 3, false),
			onlyOneInGroup = prop($$props, "onlyOneInGroup", 3, true),
			atLeastOne = prop($$props, "atLeastOne", 3, true),
			variants = prop($$props, "variants", 31, () => proxy([])),
			variantsSelected = prop($$props, "variantsSelected", 31, () => proxy({})),
			value = prop($$props, "value", 15),
			titleComponent = prop($$props, "titleComponent", 3, Ui_title),
			titleComponentProps = prop($$props, "titleComponentProps", 19, () => ({ size: 5 })),
			imageComponent = prop($$props, "imageComponent", 3, Ui_image),
			imageComponentProps = prop($$props, "imageComponentProps", 19, () => ({ covered: true })),
			descriptionComponent = prop($$props, "descriptionComponent", 3, Ui_buttons),
			descriptionComponentProps = prop($$props, "descriptionComponentProps", 19, () => ({})),
			listComponent = prop($$props, "listComponent", 3, Ui_list),
			listComponentProps = prop($$props, "listComponentProps", 19, () => ({})),
			sublimeValue = prop($$props, "sublimeValue", 3, (value) => {
				return { groupId: value.group, valueId: value.id };
			}),
			getItem = prop($$props, "getItem", 3, ({ groupId, valueId }) => {
				return variants().find((group) => group.id === groupId).description.values.find((btnVal) => btnVal.value.id === valueId);
			}),
			getItemValue = prop($$props, "getItemValue", 3, ({ groupId, valueId }) => {
				return getItem()({ groupId, valueId }).value;
			}),
			getDefaultItemSublime = prop($$props, "getDefaultItemSublime", 3, () => {
				return {
					groupId: variants()[0].id,
					valueId: variants()[0].description.values[0].value.id
				};
			}),
			uiOn = prop($$props, "uiOn", 3, (item) => {
				item.color = "success";
				item.outlined = false;
			}),
			uiOff = prop($$props, "uiOff", 3, (item) => {
				item.color = false;
				item.outlined = false;
			});

		onMount(() => {
			if (value()) {
				if (multiple()) {
					if (onlyOneInGroup()) {
						for (let t of Object.keys(value())) {
							const itemValue = value()[t];
							let ui = updateSelected(itemValue);

							updateUI(ui);
						}
					} else {
						for (let t of Object.keys(value())) {
							value()[t].forEach((itemValue) => {
								let ui = updateSelected(itemValue);

								updateUI(ui);
							});
						}
					}
				} else {
					let ui = updateSelected(value());

					updateUI(ui);
				}
			} else {
				selectDefault();
			}
		});

		//
		function countOfSelected() {
			let c = 0;

			if (multiple()) {
				for (let groupValue of Object.values(variantsSelected())) {
					if (onlyOneInGroup()) {
						if (typeof groupValue !== "undefined") {
							c++;
						}
					} else {
						if (typeof groupValue !== "undefined" && Array.isArray(groupValue)) {
							c += groupValue.length;
						}
					}
				}
			} else {
				if (typeof variantsSelected() !== "undefined" && typeof variantsSelected().value !== "undefined" && typeof variantsSelected().group !== "undefined") {
					c++;
				}
			}

			return c;
		}

		//
		function updateSelected(detail) {
			const { valueId, groupId } = sublimeValue()(detail);
			let ui = { on: undefined, off: undefined };

			//
			if (multiple()) {
				if (onlyOneInGroup()) {
					if (typeof variantsSelected()[groupId] !== "undefined") {
						ui.off = {
							groupId,
							valueId: variantsSelected()[groupId]
						};
					}

					variantsSelected(variantsSelected()[groupId] = valueId, true);
					ui.on = { groupId, valueId };
				} else {
					if (!Array.isArray(variantsSelected()[groupId])) {
						variantsSelected(variantsSelected()[groupId] = [], true);
					}

					if (variantsSelected()[groupId].includes(valueId)) {
						if (countOfSelected() > 1) {
							variantsSelected()[groupId].splice(variantsSelected()[groupId].indexOf(valueId), 1);
							ui.off = { groupId, valueId };
						}
					} else {
						variantsSelected()[groupId].push(valueId);
						ui.on = { groupId, valueId };
					}

					variantsSelected(variantsSelected()[groupId] = variantsSelected()[groupId], true);
				}

				variantsSelected(variantsSelected());
			} else {
				if (variantsSelected() && variantsSelected().groupId === groupId && variantsSelected().valueId === valueId) {
					if (!atLeastOne()) {
						variantsSelected(undefined);
						ui.off = { groupId, valueId };
					}
				} else {
					if (variantsSelected()) {
						if (typeof variantsSelected().groupId !== "undefined") {
							ui.off = {
								groupId: variantsSelected().groupId,
								valueId: variantsSelected().valueId
							};
						}
					}

					ui.on = { groupId, valueId };
					variantsSelected({ groupId, valueId });
				}
			}

			return ui;
		}

		//
		function toggle(detail) {
			let ui = updateSelected(detail);

			updateUI(ui);
			//
			updateValue();
			//
			onchange()({ field: fieldname(), value: value() });
		}

		//
		function updateUI(changes) {
			if (changes.off) {
				uiOff()(getItem()(changes.off));
			}

			if (changes.on) {
				uiOn()(getItem()(changes.on));
			}

			variants(variants());
		}

		//
		function updateValue() {
			if (multiple()) {
				let newVal = {};

				if (onlyOneInGroup()) {
					for (let groupId in variantsSelected()) {
						if (typeof variantsSelected()[groupId] !== "undefined") {
							newVal[groupId] = getItemValue()({
								groupId,
								valueId: variantsSelected()[groupId]
							});
						}
					}
				} else {
					for (let groupId in variantsSelected()) {
						if (typeof variantsSelected()[groupId] !== "undefined" && Array.isArray(variantsSelected()[groupId])) {
							newVal[groupId] = variantsSelected()[groupId].filter((val) => typeof val !== "undefined").map((itemValueId) => {
								return getItemValue()({ groupId, valueId: itemValueId });
							});
						}
					}
				}

				if (Object.keys(newVal).length == 0) {
					value(undefined);
				} else {
					value(newVal);
				}
			} else {
				if (variantsSelected()) {
					value(getItemValue()(variantsSelected()));
				} else {
					value(undefined);
				}
			}
		}

		//
		function selectDefault() {
			if (atLeastOne() && variants().length > 0) {
				const defValue = getDefaultItemSublime()();

				toggle({ id: defValue.valueId, group: defValue.groupId });
			}
		}

		const SvelteComponent = derived(listComponent);
		var fragment = comment();
		var node = first_child(fragment);

		var descriptionComponentProps_1 = derived(() => ({
			...descriptionComponentProps(),
			action(event, value) {
				toggle(value);
			}
		}));

		component(node, () => get$2(SvelteComponent), ($$anchor, $$component) => {
			$$component($$anchor, spread_props(listComponentProps, {
				get titleComponent() {
					return titleComponent();
				},
				get titleComponentProps() {
					return titleComponentProps();
				},
				get descriptionComponent() {
					return descriptionComponent();
				},
				get descriptionComponentProps() {
					return get$2(descriptionComponentProps_1);
				},
				get imageComponent() {
					return imageComponent();
				},
				get imageComponentProps() {
					return imageComponentProps();
				},
				get items() {
					return variants();
				},
				set items($$value) {
					variants($$value);
				}
			}));
		});

		append($$anchor, fragment);
		pop();
	}

	var root$e = template(`<!> <!>`, 1);

	function Ui_list_select_buttons_with_groups($$anchor, $$props) {
		push($$props, true);

		/**
		 * @typedef {Object} Props
		 * @property {string} [fieldname]
		 * @property {any} [variants] - [
		array of groups
		{
		id:number,
		title:string|object,
		image:string|object,
		variants = [
		array of values variants in group
		{
		id:number,
		title:string|object,
		description:string|object,
		image:string|object,
		value:object
		}]
		}
		]
		 * @property {any} [variantsSelected] - multiple && multiple in group
		{
		array of arrays of selected values in group
		if no selection group should be empty array
		[groupId]: [...variantsId]
		}
		multiple && one in group
		{
		[groupId]: variantId
		}
		only one (not multiple && one in group)
		{
		group: groupId
		value: variantId
		}
		 * @property {any} value - {[groupId]: [...valuesOfSelectedItems]}
		 * @property {any} [titleComponent]
		 * @property {any} [titleComponentProps]
		 * @property {any} [imageComponent]
		 * @property {any} [imageComponentProps]
		 * @property {any} [descriptionComponent]
		 * @property {any} [descriptionComponentProps]
		 * @property {any} [listComponent]
		 * @property {any} [listComponentProps]
		 * @property {any} [actionsList]
		 * @property {any} [sublimeValue]
		 */
		/** @type {Props} */
		let onchange = prop($$props, "onchange", 3, () => true),
			fieldname = prop($$props, "fieldname", 3, "list-select-tags"),
			variants = prop($$props, "variants", 31, () => proxy([])),
			value = prop($$props, "value", 15),
			titleComponent = prop($$props, "titleComponent", 3, Ui_title),
			titleComponentProps = prop($$props, "titleComponentProps", 19, () => ({ size: 5 })),
			imageComponent = prop($$props, "imageComponent", 3, Ui_image),
			imageComponentProps = prop($$props, "imageComponentProps", 19, () => ({ covered: true })),
			descriptionComponent = prop($$props, "descriptionComponent", 3, Ui_buttons_switchers),
			descriptionComponentProps = prop($$props, "descriptionComponentProps", 19, () => ({})),
			listComponent = prop($$props, "listComponent", 3, Ui_list),
			listComponentProps = prop($$props, "listComponentProps", 19, () => ({})),
			actionsList = prop($$props, "actionsList", 19, () => ["selectAll", "deselectAll"]),
			sublimeValue = prop($$props, "sublimeValue", 3, (value) => {
				return { groupId: value.group, valueId: value.id };
			});

		//
		const AVAILABLE_ACTIONS = {
			selectAll: {
				title: "Выбрать все",
				color: "success",
				action() {
					selectAll();
				}
			},
			deselectAll: {
				title: "Снять выделение со всех",
				color: "",
				action() {
					deselectAll();
				}
			}
		};

		let ACTIONS = state(proxy([]));

		onMount(() => {
			actionsList().forEach((name) => {
				Object.hasOwn(AVAILABLE_ACTIONS, name) ? get$2(ACTIONS).push(AVAILABLE_ACTIONS[name]) : false;
			});

			set(ACTIONS, proxy(get$2(ACTIONS)));
		});

		const selectAll = () => {
			setSelectionOfAll(true);
		};

		const deselectAll = () => {
			setSelectionOfAll(false);
		};

		const selectGroup = (groupId) => {
			setSelectionOfGroup(groupId, true);
		};

		const deselectGroup = (groupId) => {
			setSelectionOfGroup(groupId, false);
		};

		const setSelectionOfGroup = (groupId, selection) => {
			variants().forEach((group) => {
				if (groupId === group.id) {
					group.description.values.forEach((itm) => {
						itm.selected = selection;
					});
				}
			});

			variants(variants());
			triggerChange();
		};

		const setSelectionOfAll = (selection) => {
			variants().forEach((group) => {
				group.description.values.forEach((itm) => {
					itm.selected = selection;
				});
			});

			variants(variants());
			triggerChange();
		};

		function getSelectedItems() {
			let result = {};

			variants().forEach((group) => {
				if (!Object.hasOwn(result, group.id)) {
					result[group.id] = [];
				}

				group.description.values.forEach((itm) => {
					if (itm.selected) {
						result[group.id].push(sublimeValue()(itm.value));
					}
				});
			});

			return result;
		}

		function triggerChange() {
			value(getSelectedItems());

			onchange()({
				fieldname: fieldname(),
				value: value()
			});
		}

		const SvelteComponent = derived(listComponent);
		var fragment = root$e();
		var node = first_child(fragment);

		Ui_buttons(node, {
			get values() {
				return get$2(ACTIONS);
			},
			centered: true
		});

		var node_1 = sibling(node, 2);

		var descriptionComponentProps_1 = derived(() => ({
			action(event, value, selected) {
				setTimeout(triggerChange, 0);
				return !selected;
			},
			...descriptionComponentProps()
		}));

		component(node_1, () => get$2(SvelteComponent), ($$anchor, $$component) => {
			$$component($$anchor, spread_props(listComponentProps, {
				get titleComponent() {
					return titleComponent();
				},
				get titleComponentProps() {
					return titleComponentProps();
				},
				get descriptionComponent() {
					return descriptionComponent();
				},
				get descriptionComponentProps() {
					return get$2(descriptionComponentProps_1);
				},
				get imageComponent() {
					return imageComponent();
				},
				get imageComponentProps() {
					return imageComponentProps();
				},
				get items() {
					return variants();
				},
				set items($$value) {
					variants($$value);
				}
			}));
		});

		append($$anchor, fragment);

		return pop({
			selectAll,
			deselectAll,
			selectGroup,
			deselectGroup,
			setSelectionOfGroup,
			setSelectionOfAll,
			getSelectedItems
		});
	}

	var index$3 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		UIEndlessList: Ui_endless_list,
		UIEndlessListNavigation: Ui_endless_list_navigation,
		UIEndlessListSimpleItem: Ui_endless_list_simple_item,
		UIList: Ui_list,
		UIListEmptyPlaceholder: Ui_list_empty_placeholder,
		UIListItem: Ui_list_item,
		UIListSelect: Ui_list_select,
		UIListSelectButtonsWithGroups: Ui_list_select_buttons_with_groups,
		UIListSelectWithGroups: Ui_list_select_with_groups
	});

	function overlayClick(e, closeOnClick, closeOverlay) {
		if (closeOnClick()) {
			closeOverlay(e);
		}
	}

	function closeButtonClick(_, rejectOverlay) {
		rejectOverlay();
	}

	var root_2$7 = template(`<button aria-label="delete button"></button>`);
	var root_1$b = template(`<div role="button" tabindex="0"><!> <!></div>`);

	function Ui_overlay($$anchor, $$props) {
		push($$props, true);

		let overflowSave = state("");

		/**
		 * @typedef {Object} Props
		 * @property {boolean} [closeButton]
		 * @property {boolean} [show]
		 * @property {boolean} [closeOnClick]
		 * @property {string} [closeSize]
		 * @property {number} [layer]
		 * @property {string} [class]
		 * @property {number}   [zIndexStep=1000]
		 * @property {import('svelte').Snippet} [children]
		 */
		/** @type {Props} */
		let closeButton = prop($$props, "closeButton", 3, false),
			show = prop($$props, "show", 3, true),
			closeOnClick = prop($$props, "closeOnClick", 3, true),
			closeSize = prop($$props, "closeSize", 3, "normal"),
			layer = prop($$props, "layer", 3, 1),
			classes = prop($$props, "class", 3, ""),
			onreject = prop($$props, "onreject", 3, () => false),
			zIndexStep = prop($$props, "zIndexStep", 3, 1000);

		function closeOverlay(e) {
			try {
				if (e && e.originalTarget) {
					const target = e.originalTarget;

					if (target.classList && target.classList.contains("is-overlay")) {
						rejectOverlay();
					}
				} //eslint-disable-next-line no-empty
			} catch {}
		}

		function rejectOverlay(data = {}) {
			onreject()(data);
		}

		onMount(() => {
			set(overflowSave, proxy(document.body.style.overflow));

			if (show()) {
				document.body.style.overflow = "hidden";
			} else {
				document.body.style.overflow = get$2(overflowSave);
			}
		});

		onDestroy(() => {
			document.body.style.overflow = get$2(overflowSave);
		});

		var fragment = comment();
		var node = first_child(fragment);

		{
			var consequent_1 = ($$anchor) => {
				var div = root_1$b();

				div.__click = [overlayClick, closeOnClick, closeOverlay];
				div.__keyup = [overlayClick, closeOnClick, closeOverlay];

				var node_1 = child(div);

				{
					var consequent = ($$anchor) => {
						var button = root_2$7();

						button.__click = [closeButtonClick, rejectOverlay];
						template_effect(() => set_class(button, `delete is-${closeSize() ?? ""}`));
						append($$anchor, button);
					};

					if_block(node_1, ($$render) => {
						if (closeButton()) $$render(consequent);
					});
				}

				var node_2 = sibling(node_1, 2);

				snippet(node_2, () => $$props.children ?? noop);
				reset(div);

				template_effect(() => {
					set_class(div, `is-overlay not-overlay ${classes() ?? ""}`);
					set_attribute(div, "style", `z-index: ${zIndexStep() * layer() ?? ""};`);
				});

				transition(3, div, () => fade);
				append($$anchor, div);
			};

			if_block(node, ($$render) => {
				if (show()) $$render(consequent_1);
			});
		}

		append($$anchor, fragment);
		pop();
	}

	delegate(["click", "keyup"]);

	var root_3$6 = template(`<div><span class="title"> </span></div> <!> <!> <!>`, 1);
	var root_2$6 = template(`<!> <!>`, 1);

	function Ui_modal($$anchor, $$props) {
		push($$props, true);

		const $$stores = setup_stores();
		const $LOCALE = () => store_get(LOCALE, "$LOCALE", $$stores);

		/**
		 * @typedef {Object} Props
		 * @property {string} [buttonsPosition]
		 * @property {boolean} [closeButton]
		 * @property {boolean} [applyButton]
		 * @property {number} [titleSize]
		 * @property {boolean} [show]
		 * @property {boolean} [loading]
		 * @property {string} [title]
		 * @property {string} [subtitle]
		 * @property {string} [classes]
		 * @property {string} [overlayClasses]
		 * @property {string} [buttonsClasses]
		 * @property {string} [WAITING_TEXT]
		 * @property {import('svelte').Snippet} [children]
		 */
		/** @type {Props} */
		let buttonsPosition = prop($$props, "buttonsPosition", 3, "bottom"),
			closeButton = prop($$props, "closeButton", 3, false),
			applyButton = prop($$props, "applyButton", 3, false),
			titleSize = prop($$props, "titleSize", 3, 2),
			show = prop($$props, "show", 3, false),
			loading = prop($$props, "loading", 3, false),
			title = prop($$props, "title", 3, "Modal window"),
			subtitle = prop($$props, "subtitle", 3, ""),
			classes = prop($$props, "classes", 3, ""),
			overlayClasses = prop($$props, "overlayClasses", 3, ""),
			buttonsClasses = prop($$props, "buttonsClasses", 3, ""),
			WAITING_TEXT = prop($$props, "WAITING_TEXT", 3, "Обработка");

		Ui_overlay($$anchor, {
			get show() {
				return show();
			},
			closeOnClick: false,
			closeButton: false,
			get classes() {
				return overlayClasses();
			},
			children: ($$anchor, $$slotProps) => {
				Ui_box($$anchor, {
					get classes() {
						return classes();
					},
					children: ($$anchor, $$slotProps) => {
						var fragment_2 = root_2$6();
						var node = first_child(fragment_2);

						Ui_title(node, {
							get size() {
								return titleSize();
							},
							get title() {
								return $LOCALE()[title()];
							},
							get subtitle() {
								return $LOCALE()[subtitle()];
							}
						});

						var node_1 = sibling(node, 2);

						Ui_content(node_1, {
							children: ($$anchor, $$slotProps) => {
								var fragment_3 = root_3$6();
								var div = first_child(fragment_3);
								var span = child(div);
								var text = child(span, true);

								reset(span);
								reset(div);

								var node_2 = sibling(div, 2);

								{
									var consequent = ($$anchor) => {
										var left = derived(() => closeButton() ? [closeButton()] : []);
										var right = derived(() => applyButton() ? [applyButton()] : []);

										Ui_buttons_row($$anchor, {
											get classes() {
												return buttonsClasses();
											},
											get left() {
												return get$2(left);
											},
											get right() {
												return get$2(right);
											}
										});
									};

									if_block(node_2, ($$render) => {
										if (buttonsPosition() === "top") $$render(consequent);
									});
								}

								var node_3 = sibling(node_2, 2);

								snippet(node_3, () => $$props.children ?? noop);

								var node_4 = sibling(node_3, 2);

								{
									var consequent_1 = ($$anchor) => {
										var classes_1 = derived(() => buttonsClasses() || "is-footer is-mobile");
										var left_1 = derived(() => closeButton() ? [closeButton()] : []);
										var right_1 = derived(() => applyButton() ? [applyButton()] : []);

										Ui_buttons_row($$anchor, {
											get classes() {
												return get$2(classes_1);
											},
											get left() {
												return get$2(left_1);
											},
											get right() {
												return get$2(right_1);
											}
										});
									};

									if_block(node_4, ($$render) => {
										if (buttonsPosition() === "bottom") $$render(consequent_1);
									});
								}

								template_effect(() => {
									set_class(div, `pageloader ${(loading() ? 'is-active' : '') ?? ""}`);
									set_text(text, $LOCALE()[WAITING_TEXT()]);
								});

								append($$anchor, fragment_3);
							},
							$$slots: { default: true }
						});

						append($$anchor, fragment_2);
					},
					$$slots: { default: true }
				});
			},
			$$slots: { default: true }
		});

		pop();
	}

	var root_1$a = template(`<div><!> <!> <!></div>`);

	function Ui_generic_selector($$anchor, $$props) {
		push($$props, true);

		const $$stores = setup_stores();
		const $LOCALE = () => store_get(LOCALE, "$LOCALE", $$stores);

		/**
		 * @typedef {Object} Props
		 * @property {boolean} [show]
		 * @property {string} [term]
		 * @property {string} [size]
		 * @property {any} [inputComponent]
		 * @property {any} [inputComponentProps]
		 * @property {any} [outputComponent]
		 * @property {any} [outputComponentProps]
		 * @property {any} [results]
		 */
		/** @type {Props} */
		let show = prop($$props, "show", 3, true),
			term = prop($$props, "term", 15, ""),
			size = prop($$props, "size", 3, "narrow"),
			inputComponent = prop($$props, "inputComponent", 3, Ui_simple_search_input),
			inputComponentProps = prop($$props, "inputComponentProps", 19, () => ({})),
			outputComponent = prop($$props, "outputComponent", 3, Ui_endless_list),
			outputComponentProps = prop($$props, "outputComponentProps", 19, () => ({})),
			results = prop($$props, "results", 31, () => proxy({
				list: [],
				page: 0,
				pages: 0,
				skip: 0,
				count: 0
			}));

		const buttons = [
			{
				title: $LOCALE()["not-node:button_cancel_label"],
				action: () => onreject()
			}
		];

		Ui_overlay($$anchor, {
			onreject: overlayClosed,
			get show() {
				return show();
			},
			closeOnClick: true,
			closeButton: false,
			children: ($$anchor, $$slotProps) => {
				var div = root_1$a();
				const SvelteComponent = derived(inputComponent);
				const SvelteComponent_1 = derived(outputComponent);
				var node = child(div);

				component(node, () => get$2(SvelteComponent), ($$anchor, $$component) => {
					$$component($$anchor, spread_props(
						{
							get ontermChange() {
								return $$props.ontermChange;
							}
						},
						inputComponentProps,
						{
							get term() {
								return term();
							},
							set term($$value) {
								term($$value);
							}
						}
					));
				});

				var node_1 = sibling(node, 2);

				component(node_1, () => get$2(SvelteComponent_1), ($$anchor, $$component) => {
					$$component($$anchor, spread_props(
						{
							get onprev() {
								return $$props.onprev;
							},
							get onnext() {
								return $$props.onnext;
							},
							get onresolve() {
								return $$props.onresolve;
							}
						},
						outputComponentProps,
						{
							get data() {
								return results();
							},
							set data($$value) {
								results($$value);
							}
						}
					));
				});

				var node_2 = sibling(node_1, 2);

				Ui_buttons(node_2, {
					values: buttons,
					centered: true,
					classes: "mt-5"
				});

				reset(div);
				template_effect(() => set_class(div, `paper box block ${size() ?? ""} svelte-7m3ic0`));
				append($$anchor, div);
			},
			$$slots: { default: true }
		});

		pop();
	}

	var index$2 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		UIGenericSelector: Ui_generic_selector,
		UIModal: Ui_modal,
		UIOverlay: Ui_overlay
	});

	var root$d = template(`<article class="message is-danger"><div class="message-header"><p> </p></div> <div class="message-body"> </div></article>`);

	function Ui_error($$anchor, $$props) {
		push($$props, true);

		const $$stores = setup_stores();
		const $LOCALE = () => store_get(LOCALE, "$LOCALE", $$stores);
		var article = root$d();
		var div = child(article);
		var p = child(div);
		var text = child(p, true);

		reset(p);
		reset(div);

		var div_1 = sibling(div, 2);
		var text_1 = child(div_1, true);

		reset(div_1);
		reset(article);

		template_effect(() => {
			set_text(text, $LOCALE()[$$props.title]);
			set_text(text_1, $LOCALE()[$$props.message]);
		});

		append($$anchor, article);
		pop();
	}

	var root$c = template(`<article class="message is-success"><div class="message-header"><p> </p></div> <div class="message-body"> </div></article>`);

	function Ui_success($$anchor, $$props) {
		push($$props, true);

		const $$stores = setup_stores();
		const $LOCALE = () => store_get(LOCALE, "$LOCALE", $$stores);
		var article = root$c();
		var div = child(article);
		var p = child(div);
		var text = child(p, true);

		reset(p);
		reset(div);

		var div_1 = sibling(div, 2);
		var text_1 = child(div_1, true);

		reset(div_1);
		reset(article);

		template_effect(() => {
			set_text(text, $LOCALE()[$$props.title]);
			set_text(text_1, $LOCALE()[$$props.message]);
		});

		append($$anchor, article);
		pop();
	}

	var root_1$9 = template(`<div id="cookie_notification"><p> </p> <!></div>`);

	function Ui_cookie_notification($$anchor, $$props) {
		push($$props, true);

		const $$stores = setup_stores();
		const $LOCALE = () => store_get(LOCALE, "$LOCALE", $$stores);

		/**
		 * @typedef {Object} Props
		 * @property {boolean} [show]
		 * @property {string} [message]
		 * @property {string} [agree]
		 */
		/** @type {Props} */
		let show = prop($$props, "show", 15, false),
			message = prop($$props, "message", 3, "Для улучшения работы сайта и его взаимодействия с пользователями мы используем файлы cookie. Продолжая работу с сайтом, Вы разрешаете использование cookie-файлов. Вы всегда можете отключить файлы cookie в настройках Вашего браузера."),
			agree = prop($$props, "agree", 3, "Хорошо"),
			cooldown = prop($$props, "cooldown", 3, 31536000000);

		onMount(() => {
			let cookieDate = localStorage.getItem("cookie_date");

			if (!cookieDate || +cookieDate + cooldown() < Date.now()) {
				show(true);
			}
		});

		function accept() {
			localStorage.setItem("cookie_date", Date.now());
			show(false);
		}

		var fragment = comment();
		var node = first_child(fragment);

		{
			var consequent = ($$anchor) => {
				var div = root_1$9();
				var p = child(div);
				var text$1 = child(p, true);

				reset(p);

				var node_1 = sibling(p, 2);

				Ui_button(node_1, {
					onclick: accept,
					color: "success",
					class: "cookie_accept",
					children: ($$anchor, $$slotProps) => {
						next();

						var text_1 = text();

						template_effect(() => set_text(text_1, $LOCALE()[agree()]));
						append($$anchor, text_1);
					},
					$$slots: { default: true }
				});

				reset(div);
				template_effect(() => set_text(text$1, $LOCALE()[message()]));
				append($$anchor, div);
			};

			if_block(node, ($$render) => {
				if (show()) $$render(consequent);
			});
		}

		append($$anchor, fragment);
		pop();
	}

	var index$1 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		UICookieNotification: Ui_cookie_notification,
		UIError: Ui_error,
		UISuccess: Ui_success
	});

	//block elements

	var Elements = /*#__PURE__*/Object.freeze({
		__proto__: null,
		Blocks: index$c,
		Buttons: index$b,
		Forms: index$8,
		Icons: index$9,
		Images: index$7,
		Inputs: index$5,
		Layouts: index$6,
		Links: index$4,
		Lists: index$3,
		Modals: index$2,
		Notifications: index$1,
		UICommon: UICommon$1,
		Various: index$a
	});

	const META_METHOD_INIT = Symbol("init"),
	  META_DATA = Symbol("data"),
	  META_WORKING = Symbol("working"),
	  META_OPTIONS = Symbol("options");
	let notBase = /*#__PURE__*/function (_EventEmitter) {
	  function notBase(input) {
	    var _this;
	    _classCallCheck(this, notBase);
	    _this = _callSuper(this, notBase);
	    _this[META_DATA] = {};
	    _this[META_WORKING] = {};
	    _this[META_OPTIONS] = {};
	    _this[META_METHOD_INIT](input);
	    return _possibleConstructorReturn(_this, _this);
	  }
	  _inherits(notBase, _EventEmitter);
	  return _createClass(notBase, [{
	    key: META_METHOD_INIT,
	    value: function (input) {
	      if (!input) {
	        input = {};
	      }

	      // @ts-ignore
	      if (Object.hasOwn(input, "data")) {
	        this.setData(input.data);
	      }

	      // @ts-ignore
	      if (Object.hasOwn(input, "working")) {
	        this.setWorking(input.working);
	      }

	      // @ts-ignore
	      if (Object.hasOwn(input, "options")) {
	        this.setOptions(input.options);
	      }
	      this.log = notCommon$1.genLogMsg(this.getWorking("name"));
	      this.info = this.log;
	      this.debug = notCommon$1.genLogDebug(this.getWorking("name"));
	      this.error = notCommon$1.genLogError(this.getWorking("name"));
	    }
	  }, {
	    key: "setCommon",
	    value: function setCommon(what, args) {
	      switch (args.length) {
	        case 1:
	          {
	            /* set collection */
	            what = args[0];
	            break;
	          }
	        case 2:
	          {
	            /* set collection element */
	            notPath.set(args[0] /* path */, what /* collection */, undefined /* helpers */, args[1] /* value */);
	            break;
	          }
	      }
	      return this;
	    }
	  }, {
	    key: "getCommon",
	    value: function getCommon(what, args) {
	      switch (args.length) {
	        /* if we want get data by path */
	        case 1:
	          {
	            return notPath.get(args[0], what);
	          }
	        /* if we want get data by path with default value */
	        case 2:
	          {
	            let res = notPath.get(args[0], what);
	            if (res === undefined) {
	              /* no data, return default value */
	              return args[1];
	            } else {
	              /* data, return it */
	              return res;
	            }
	          }
	        /* return full collection */
	        default:
	          {
	            return what;
	          }
	      }
	    }

	    /*
	    CORE OBJECT
	      DATA - information
	      OPTIONS - how to work
	      WORKING - temporarily generated in proccess
	    */
	  }, {
	    key: "setData",
	    value: function setData() {
	      if (arguments.length === 1) {
	        this[META_DATA] = arguments[0];
	      } else {
	        this.setCommon(this.getData(), arguments);
	      }
	      this.emit("change");
	      return this;
	    }
	  }, {
	    key: "getData",
	    value: function getData() {
	      return this.getCommon(this[META_DATA], arguments);
	    }
	  }, {
	    key: "setOptions",
	    value: function setOptions() {
	      if (arguments.length === 1) {
	        this[META_OPTIONS] = arguments[0];
	      } else {
	        this.setCommon(this.getOptions(), arguments);
	      }
	      return this;
	    }
	  }, {
	    key: "getOptions",
	    value: function getOptions() {
	      return this.getCommon(this[META_OPTIONS], arguments);
	    }
	  }, {
	    key: "setWorking",
	    value: function setWorking() {
	      if (arguments.length === 1) {
	        this[META_WORKING] = arguments[0];
	      } else {
	        this.setCommon(this.getWorking(), arguments);
	      }
	      return this;
	    }
	  }, {
	    key: "getWorking",
	    value: function getWorking() {
	      return this.getCommon(this[META_WORKING], arguments);
	    }
	  }, {
	    key: "report",
	    value: function report(e) {
	      if (notCommon$1.report) {
	        notCommon$1.report(e);
	      }
	    }
	  }, {
	    key: "getApp",
	    value: function getApp() {
	      return notCommon$1.getApp();
	    }
	  }, {
	    key: "destroy",
	    value: function destroy() {
	      this.removeEvent();
	      this.setOptions(null);
	      this.setWorking(null);
	      this.setData(null);
	      this.emit("destroy");
	    }
	  }]);
	}(EventEmitter);

	const OPT_MODE_HISTORY = Symbol("history"),
	  OPT_MODE_HASH = Symbol("hash"),
	  OPT_DEFAULT_CHECK_INTERVAL = 50;
	let notRouter = /*#__PURE__*/function (_notBase) {
	  function notRouter() {
	    var _this;
	    _classCallCheck(this, notRouter);
	    _this = _callSuper(this, notRouter, [{
	      working: {
	        routes: [],
	        mode: OPT_MODE_HISTORY,
	        root: "/",
	        //always in slashes /user/, /, /input/. and no /user or input/level
	        initialized: false,
	        delays: NAVIGATION_DELAYS,
	        delay_default: NAVIGATION_DELAY_DEFAULT
	      }
	    }]);
	    _defineProperty(_this, "host", "");
	    return _possibleConstructorReturn(_this, _this);
	  }

	  /**
	   * Set object with named delays
	   * @param {Object.<string, number>} delays
	   * @returns {notRouter}
	   */
	  _inherits(notRouter, _notBase);
	  return _createClass(notRouter, [{
	    key: "setDelays",
	    value: function setDelays(delays) {
	      this.setWorking("delays", delays);
	      return this;
	    }

	    /**
	     * Set default navigation delay, provided as name of one of `delays` or in number form
	     * @param {string|number} delay
	     * @returns {notRouter}
	     */
	  }, {
	    key: "setDefaultNavigationDelay",
	    value: function setDefaultNavigationDelay(delay) {
	      this.setWorking("delay_default", this.delayAsMs(delay));
	      return this;
	    }

	    /**
	     * Returns number of ms, if not set returns NAVIGATION_DELAY_DEFAULT
	     * @returns {number}
	     */
	  }, {
	    key: "getDefaultNavigationDelay",
	    value: function getDefaultNavigationDelay() {
	      return this.getWorking(`delay_default`, NAVIGATION_DELAY_DEFAULT);
	    }

	    /**
	     *  Ensures that delay is in ms, if its provided as name of alias, searches for it and returns, if not found - returns working default_delay
	     * @param {string|number} delay    name of delay alias or number of ms
	     * @returns {number}               delay in ms
	     */
	  }, {
	    key: "delayAsMs",
	    value: function delayAsMs(delay) {
	      if (typeof delay === "number") {
	        return delay;
	      } else {
	        if (typeof delay === "string" && delay.length > 0) {
	          return this.getWorking(`delays.${delay}`, this.getDefaultNavigationDelay());
	        } else {
	          return this.getDefaultNavigationDelay();
	        }
	      }
	    }

	    /**
	     *
	     *  @param {string}              url     we go to url
	     *  @param {string|number}       delay   name of delay alias or number of ms
	     *  @returns {NodeJS.Timeout}            timeout identificator
	     */
	  }, {
	    key: "navigateWithDelay",
	    value: function navigateWithDelay(url, delay, doBefore) {
	      var _this2 = this;
	      return setTimeout(function () {
	        typeof doBefore === "function" && doBefore();
	        _this2.navigate(url);
	      }, this.delayAsMs(delay));
	    }

	    /**
	     * Use browser History API
	     */
	  }, {
	    key: "history",
	    value: function history() {
	      this.setWorking("mode", OPT_MODE_HISTORY);
	    }

	    /**
	     * Use hash part as container for location information
	     */
	  }, {
	    key: "hash",
	    value: function hash() {
	      this.setWorking("mode", OPT_MODE_HASH);
	    }

	    /**
	     * root should start and end with
	     * @param {string} root
	     * @returns {notRouter}
	     */
	  }, {
	    key: "setRoot",
	    value: function setRoot(root) {
	      this.setWorking("root", root && root !== "/" ? "/" + this.clearSlashes(root) + "/" : "/");
	      return this;
	    }

	    /**
	     * clear first and last slashes from string
	     * @param {string} path
	     * @returns {string}
	     */
	  }, {
	    key: "clearSlashes",
	    value: function clearSlashes(path) {
	      return path.toString().replace(/\/$/, "").replace(/^\//, "");
	    }
	  }, {
	    key: "add",
	    value: function add(re, handler) {
	      if (typeof re == "function") {
	        handler = re;
	        re = "";
	      }
	      let rule = {
	        re: re,
	        handler: handler
	      };
	      this.getWorking("routes").push(rule);
	      return this;
	    }
	  }, {
	    key: "addList",
	    value: function addList(list) {
	      for (let t in list) {
	        this.add(t, list[t]);
	      }
	      return this;
	    }
	  }, {
	    key: "remove",
	    value: function remove(param) {
	      for (var i = 0, r; i < this.getWorking("routes").length, r = this.getWorking("routes")[i]; i++) {
	        if (r.handler === param || r.re === param) {
	          this.getWorking("routes").splice(i, 1);
	          return this;
	        }
	      }
	      return this;
	    }
	  }, {
	    key: "flush",
	    value: function flush() {
	      this.setWorking({
	        routes: [],
	        mode: OPT_MODE_HISTORY,
	        root: "/"
	      });
	      return this;
	    }
	  }, {
	    key: "isInitialized",
	    value: function isInitialized() {
	      return this.getWorking("initialized");
	    }
	  }, {
	    key: "setInitialized",
	    value: function setInitialized(val = true) {
	      return this.setWorking("initialized", val);
	    }
	  }, {
	    key: "getFragment",
	    value: function getFragment() {
	      var fragment = "";
	      if (this.getWorking("mode") === OPT_MODE_HISTORY) {
	        if (!location) return "";
	        fragment = this.clearSlashes(decodeURI(location.pathname + location.search));
	        fragment = fragment.replace(/\?(.*)$/, "");
	        fragment = this.getWorking("root") != "/" ? fragment.replace(this.getWorking("root"), "") : fragment;
	      } else {
	        if (!window) return "";
	        var match = window.location.href.match(/#(.*)$/);
	        fragment = match ? match[1] : "";
	      }
	      return this.clearSlashes(fragment);
	    }
	  }, {
	    key: "checkLocation",
	    value: function checkLocation() {
	      let current = this.getWorking("current"),
	        fragment = this.getFragment(),
	        init = this.isInitialized();
	      if (current !== fragment || !init) {
	        this.setWorking("current", fragment);
	        this.check(fragment);
	        this.setInitialized(true);
	      }
	    }
	  }, {
	    key: "hrefClick",
	    value: function hrefClick() {
	      //console.log(...arguments);
	    }
	  }, {
	    key: "getRoot",
	    value: function getRoot() {
	      return this.getWorking("root");
	    }
	  }, {
	    key: "listen",
	    value: function listen(loopInterval = OPT_DEFAULT_CHECK_INTERVAL) {
	      this.setWorking("current", "notInitialized");
	      clearInterval(this.getWorking("interval"));
	      this.setWorking("interval", setInterval(this.checkLocation.bind(this), loopInterval));
	      window.addEventListener("popstate", this.hrefClick.bind(this));
	      return this;
	    }
	  }, {
	    key: "check",
	    value: function check(f) {
	      let fragment = f || this.getFragment(),
	        failBack = null;
	      for (let i = 0; i < this.getWorking("routes").length; i++) {
	        let path = this.getWorking("root") + this.getWorking("routes")[i].re,
	          fullRE = this.clearSlashes(decodeURI(path)),
	          match = fragment.match(fullRE);
	        if (match && match.length) {
	          if (fullRE === "") {
	            match.shift();
	            failBack = {
	              route: this.getWorking("routes")[i],
	              match
	            };
	          } else {
	            match.shift();
	            this.getWorking("routes")[i].handler.apply(this.host || {}, match);
	            this.emit("afterRoute", this.getWorking("routes")[i]);
	            return this;
	          }
	        }
	      }
	      if (failBack) {
	        failBack.route.handler.apply(this.host || {}, failBack.match);
	        this.emit("afterRoute", failBack.route);
	      }
	      return this;
	    }

	    /**
	     *  Refreshes page
	     * @param {number} timeout time to wait in ms
	     */
	  }, {
	    key: "refresh",
	    value: function refresh(timeout = 0) {
	      var _this3 = this;
	      if (timeout > 0) {
	        setTimeout(function () {
	          return _this3.refresh();
	        }, timeout);
	      } else {
	        this.check(this.getWorking("current"));
	      }
	    }

	    /**
	     * Changes locations
	     * @param {string} path
	     * @returns
	     */
	  }, {
	    key: "navigate",
	    value: function navigate(path) {
	      path = path ? path : "";
	      switch (this.getWorking("mode")) {
	        case OPT_MODE_HISTORY:
	          {
	            const newRoute = this.getFullRoute(path);
	            if (newRoute === this.lastRoute) {
	              this.refresh();
	            } else {
	              this.lastRoute = newRoute;
	              history.pushState(null, "", this.lastRoute);
	            }
	            break;
	          }
	        case OPT_MODE_HASH:
	          {
	            window.location.href.match(/#(.*)$/);
	            window.location.href = window.location.href.replace(/#(.*)$/, "") + "#" + path;
	            break;
	          }
	      }
	      return this;
	    }

	    /**
	     *  returns app root + path
	     * @param {string} path
	     * @returns {string}
	     */
	  }, {
	    key: "getFullRoute",
	    value: function getFullRoute(path = "") {
	      path = this.clearSlashes(path);
	      const root = this.getWorking("root");
	      if (root !== "/") {
	        if (path.indexOf(root.substring(1)) === 0) {
	          return "/" + path;
	        }
	      }
	      return this.getWorking("root") + this.clearSlashes(path);
	    }

	    /**
	     * Returns all links with n-href attribute
	     * @returns {Array<HTMLAnchorElement>}
	     */
	  }, {
	    key: "getAllLinks",
	    value: function getAllLinks() {
	      const allElements = document.body.querySelectorAll("a");
	      let list = [];
	      for (let j = 0; j < allElements.length; j++) {
	        for (let i = 0, atts = allElements[j].attributes, n = atts.length; i < n; i++) {
	          if (atts[i].nodeName.indexOf("n-href") === 0) {
	            list.push(allElements[j]);
	            break;
	          }
	        }
	      }
	      return list;
	    }

	    /**
	     * Reroute all links(anchor tags) with n-href attribute.
	     * Disable navigation to href.
	     * @returns {notRouter}
	     */
	  }, {
	    key: "reRouteExisted",
	    value: function reRouteExisted() {
	      const list = this.getAllLinks();
	      for (let t = 0; t < list.length; t++) {
	        this.initRerouting(list[t], list[t].getAttribute("n-href"));
	      }
	      return this;
	    }

	    /**
	     * If `el` is not initialized, adds onclick listener to navigate to `link` location.
	     * Disables default navigation to href.
	     * @param {HTMLAnchorElement}   el
	     * @param {string}              link
	     * @returns
	     */
	  }, {
	    key: "initRerouting",
	    value: function initRerouting(el, link) {
	      var _this4 = this;
	      // @ts-ignore
	      if (!el.notRouterInitialized) {
	        let fullLink = this.getFullRoute(link);
	        el.setAttribute("href", fullLink);
	        el.addEventListener("click", function (e) {
	          e.preventDefault();
	          _this4.navigate(link);
	          return false;
	        });
	        // @ts-ignore
	        el.notRouterInitialized = true;
	      }
	      return this;
	    }
	  }]);
	}(notBase);
	var notRouter$1 = new notRouter();

	const LOG_PREFIX$1 = "APIQuee";
	let notAPIQueue = /*#__PURE__*/function (_notBase) {
	  function notAPIQueue(options = {}) {
	    var _this;
	    _classCallCheck(this, notAPIQueue);
	    _this = _callSuper(this, notAPIQueue, [{
	      working: {
	        name: options.name ? options.name : LOG_PREFIX$1
	      },
	      options
	    }]);
	    _this.busy = false;
	    _this.queue = [];
	    _this.busySince = -1;
	    _this.afterEmpty = undefined;
	    _this.start();
	    return _possibleConstructorReturn(_this, _this);
	  }
	  _inherits(notAPIQueue, _notBase);
	  return _createClass(notAPIQueue, [{
	    key: "stop",
	    value: function stop() {
	      if (this.interval) {
	        clearInterval(this.interval);
	        this.interval = undefined;
	        this.busy = false;
	        this.busySince = -1;
	      }
	    }
	  }, {
	    key: "start",
	    value: function start() {
	      this.stop();
	      this.interval = setInterval(this.checkQueue.bind(this), this.QUEUE_CHECK_INTERVAL);
	    }
	  }, {
	    key: "checkQueue",
	    value: function checkQueue() {
	      var _this2 = this;
	      if (!this.isEmpty() && !this.isBusy()) {
	        this.setBusy().runNext().then(this.setFree.bind(this)).catch(function (e) {
	          _this2.error && _this2.error(e);
	          _this2.setFree();
	        });
	      } else {
	        if (!this.isBusy()) {
	          if (this.afterEmpty) {
	            let t = this.afterEmpty;
	            this.afterEmpty = undefined;
	            t();
	          }
	        }
	      }
	    }
	  }, {
	    key: "addToQueue",
	    value: function addToQueue(task) {
	      this.queue.push(task);
	    }
	  }, {
	    key: "runNext",
	    value: function runNext() {
	      let list = this.queue.map(function (action) {
	        return action.title;
	      }).join(", ");
	      this.debug && this.debug(`tasks [${list}]`);
	      let task = this.queue.shift();
	      if (!notCommon$1.isFunc(task.action)) {
	        this.error && this.error("В задании нет исполнимой части, action не функция", task.title);
	        return Promise.resolve();
	      }
	      if (!notCommon$1.isFunc(task.resolve)) {
	        this.error && this.error("В задании нет возвратной части, resolve не функция", task.title);
	        return task.action();
	      }
	      return task.action().then(task.resolve);
	    }
	  }, {
	    key: "isBusy",
	    value: function isBusy() {
	      let busy = !!this.busy,
	        now = Date.now() / 1000;
	      if (busy && this.busySince > -1) {
	        if (now - this.busySince > notAPIQueue.MAX_BUSY_TIME) {
	          this.setFree();
	          return false;
	        } else {
	          return true;
	        }
	      } else {
	        return false;
	      }
	    }
	  }, {
	    key: "setBusy",
	    value: function setBusy() {
	      this.busy = true;
	      this.busySince = Date.now() / 1000;
	      return this;
	    }
	  }, {
	    key: "setFree",
	    value: function setFree() {
	      this.busy = false;
	      this.busySince = -1;
	      return this;
	    }
	  }, {
	    key: "isEmpty",
	    value: function isEmpty() {
	      return this.queue.length === 0;
	    }

	    /**
	     * Исполнитель запросов
	     * @param      {function}   action      должна возвращать Promise
	     * @param      {function}   [afterEmpty = undefined]  будет выполнена когда очурудь опустеет и будет свободна. полезна при пачке однотипных заданий
	     * @param       {string}    [title = '']    optional title of request
	     * @returns    {Promise}    результат функции
	     **/
	  }, {
	    key: "run",
	    value: function run(action, afterEmpty = undefined, title = "") {
	      var _this3 = this;
	      if (afterEmpty && typeof this.afterEmpty === "undefined") {
	        this.afterEmpty = afterEmpty;
	      }
	      return new Promise(function (resolve, reject) {
	        try {
	          _this3.addToQueue({
	            action,
	            resolve,
	            title
	          });
	        } catch (e) {
	          _this3.error && _this3.error(e);
	          reject(e);
	        }
	      });
	    }
	  }, {
	    key: "actionIsQueued",
	    value: function actionIsQueued(title) {
	      return this.queue.some(function (queued) {
	        return queued.title == title;
	      });
	    }

	    /**
	     *
	     *
	     * @param      {function}   action      должна возвращать Promise
	     * @param      {function}   [afterEmpty = undefined]  будет выполнена когда очурудь опустеет и будет свободна. полезна при пачке однотипных заданий
	     * @param       {string}    [title = '']    optional title of request
	     * @return    {Promise}
	     * @memberof notAPIQueue
	     */
	  }, {
	    key: "runIfNotQueued",
	    value: function runIfNotQueued(action, afterEmpty = undefined, title = "") {
	      if (this.actionIsQueued(title)) {
	        return Promise.resolve();
	      } else {
	        return this.run(action, afterEmpty, title);
	      }
	    }
	  }]);
	}(notBase);
	_defineProperty(notAPIQueue, "QUEUE_CHECK_INTERVAL", 100);
	_defineProperty(notAPIQueue, "MAX_BUSY_TIME", 300);

	let notAPIOptions = {
	  rps: 50,
	  protocol: 'http',
	  host: 'localhost',
	  port: 9000
	};

	const LOG_PREFIX = 'APIConnection';
	let notAPIConnection = /*#__PURE__*/function (_notBase) {
	  function notAPIConnection(options) {
	    var _this;
	    _classCallCheck(this, notAPIConnection);
	    _this = _callSuper(this, notAPIConnection, [{
	      options,
	      working: {
	        name: options.name ? options.name : LOG_PREFIX
	      }
	    }]);
	    _this.online = null;
	    _this.run();
	    return _possibleConstructorReturn(_this, _this);
	  }
	  _inherits(notAPIConnection, _notBase);
	  return _createClass(notAPIConnection, [{
	    key: "run",
	    value: function run() {
	      this.int = window.setInterval(this.check.bind(this), 1000);
	    }
	  }, {
	    key: "pause",
	    value: function pause() {
	      window.clearInterval(this.int);
	    }
	  }, {
	    key: "resume",
	    value: function resume() {
	      this.run();
	    }
	  }, {
	    key: "isOnline",
	    value: function isOnline() {
	      return window.navigator.onLine;
	    }
	  }, {
	    key: "check",
	    value: function check() {
	      let t = this.isOnline();
	      if (this.online !== null) {
	        if (this.online !== t) {
	          this.changeState(t);
	        }
	      }
	      this.online = t;
	    }
	  }, {
	    key: "changeState",
	    value: function changeState(online = false) {
	      if (online) {
	        this.emit('online');
	      } else {
	        this.emit('offline');
	      }
	    }
	  }]);
	}(notBase);
	_defineProperty(notAPIConnection, "int", void 0);
	_defineProperty(notAPIConnection, "online", void 0);

	var index = /*#__PURE__*/Object.freeze({
		__proto__: null,
		notAPIConnection: notAPIConnection,
		notAPIOptions: notAPIOptions,
		notAPIQueue: notAPIQueue
	});

	const ALL$1 = {};
	function exist$1(key) {
	  return notCommon$1.objHas(ALL$1, key);
	}
	function get$1(key) {
	  if (exist$1(key)) {
	    return ALL$1[key];
	  } else {
	    return false;
	  }
	}
	function create$1(key, props = {
	  raw: [],
	  filtered: [],
	  selected: {}
	}) {
	  if (!exist$1(key)) {
	    if (Object.keys(props).length > 0) {
	      ALL$1[key] = {};
	      Object.keys(props).forEach(function (name) {
	        ALL$1[key][name] = writable(props[name]);
	      });
	    } else {
	      throw new Error("store's props wasn't specified");
	    }
	  }
	  return ALL$1[key];
	}

	/**
	 * Creates object that is fake Store
	 * Some time this is useful when you need to initialize local var,
	 * before you could get actual Stores from central storage by its ID
	 *	@params {mixed} val 	data of type that is actual storage will contain
	 * @returns {Object}
	 */

	function fake(val) {
	  return {
	    subscribe(f) {
	      f(val);
	      return function () {};
	    },
	    set() {}
	  };
	}

	var stores = /*#__PURE__*/Object.freeze({
		__proto__: null,
		create: create$1,
		fake: fake,
		get: get$1
	});

	const //record
	  META_INTERFACE = Symbol('interface'),
	  META_MAP_TO_INTERFACE = ['getActionsCount', 'getActions', 'setFindBy', 'resetFilter', 'setFilter', 'getFilter', 'setSorter', 'getSorter', 'resetSorter', 'setPageNumber', 'setPageSize', 'setPager', 'setReturn', 'setSearch', 'getSearch', 'resetSearch', 'resetPager', 'getPager', 'addFormFieldType', 'addFormField', 'getFieldTypes', 'getActionFormFields'],
	  DEFAULT_ACTION_PREFIX$1 = '$';

	const OPT_DEFAULT_INDEX_FIELD_NAME_PRIORITY = ["_id", "id", "ID"],
	  DEFAULT_FILTER = {},
	  DEFAULT_SEARCH = "",
	  DEFAULT_RETURN = {},
	  DEFAULT_PAGE_NUMBER = 0,
	  DEFAULT_PAGE_SIZE = 10,
	  DEFAULT_ACTION_PREFIX = "$",
	  DEFAULT_WS_ROUTE_ACTION_SPLITTER = "//";
	let notInterface = /*#__PURE__*/function (_notBase) {
	  function notInterface(manifest, options) {
	    var _this;
	    _classCallCheck(this, notInterface);
	    _this = _callSuper(this, notInterface, [{
	      working: {
	        name: "network interface for: " + (manifest.model ? manifest.model : "unknown"),
	        filter: DEFAULT_FILTER,
	        search: DEFAULT_SEARCH,
	        return: DEFAULT_RETURN,
	        pager: {
	          size: DEFAULT_PAGE_SIZE,
	          page: DEFAULT_PAGE_NUMBER
	        }
	      },
	      options
	    }]);
	    _this.manifest = manifest;
	    _this.initActions();
	    return _possibleConstructorReturn(_this, _this);
	  }
	  _inherits(notInterface, _notBase);
	  return _createClass(notInterface, [{
	    key: "initActions",
	    value: function initActions() {
	      if (this.getActionsCount() > 0) {
	        let actions = this.getActions();
	        for (let actionName in actions) {
	          this.initAction(actionName);
	        }
	      }
	    }
	  }, {
	    key: "initAction",
	    value: function initAction(actionName) {
	      var _this2 = this;
	      if (!notCommon$1.objHas(this, DEFAULT_ACTION_PREFIX + actionName)) {
	        this[DEFAULT_ACTION_PREFIX + actionName] = function (opts, headers, fileUpload = false, files) {
	          return _this2.request(_this2, actionName, opts, headers, fileUpload, files);
	        };
	      }
	    }
	  }, {
	    key: "requestHTTP",
	    value: function requestHTTP(record, actionName, params, headers = {}, fileUpload = false, files) {
	      try {
	        let compositeData = Object.assign({}, record.getData && typeof record.getData === "function" ? record.getData() : record, params);
	        let actionData = this.getActionData(actionName),
	          requestParams = this.collectRequestData(actionData),
	          requestParamsEncoded = this.encodeRequest(requestParams),
	          //id = this.getID(compositeData, actionData, actionName),
	          apiServerURL = this.getServerURL(),
	          url = this.getURL(compositeData, actionData, actionName),
	          opts = {};
	        if (fileUpload) {
	          url = this.getURL(params, actionData, actionName);
	          const fd = new FormData();
	          fd.append("file", files);
	          opts.body = fd;
	        } else {
	          if (["OPTIONS", "GET"].indexOf(actionData.method.toUpperCase()) === -1) {
	            opts = {
	              method: actionData.method,
	              body: JSON.stringify(record.getData && typeof record.getData === "function" ? record.getData() : record),
	              headers: {
	                Accept: "application/json",
	                "Content-Type": "application/json"
	              }
	            };
	          }
	        }
	        opts.method = actionData.method.toUpperCase();
	        if (headers && Object.keys(headers).length) {
	          opts.headers = headers;
	        }
	        return fetch(apiServerURL + url + requestParamsEncoded, opts).then(function (response) {
	          return response.json();
	        });
	      } catch (e) {
	        notCommon$1.error(e);
	        notCommon$1.report(e);
	      }
	    }
	  }, {
	    key: "requestWS",
	    value: function requestWS(record, actionName) {
	      try {
	        let actionData = this.getActionData(actionName),
	          requestParams = this.collectRequestData(actionData);
	        const WS = notCommon$1.getApp().getWSClient();
	        const messageName = this.getWSRequestName(actionName);
	        const payload = Object.assign({}, requestParams, record.getData());
	        if (notCommon$1.objHas(actionData, "type") && typeof actionData.type === "string" && actionData.type.length && actionData.type !== "request") {
	          return WS.message(actionData.type, messageName, payload).then(function (response) {
	            return response.payload;
	          });
	        } else {
	          return WS.request(messageName, payload).then(function (response) {
	            return response.payload;
	          });
	        }
	      } catch (e) {
	        notCommon$1.error(e);
	        notCommon$1.report(e);
	      }
	    }
	  }, {
	    key: "request",
	    value: function request() {
	      let actionData = this.getActionData(arguments[1]);
	      switch (this.selectTransport(actionData)) {
	        case "ws":
	          return this.requestWS(...arguments);
	        case "http":
	          return this.requestHTTP(...arguments);
	        default:
	          throw new Error("Offline");
	      }
	    }
	  }, {
	    key: "wsIsUp",
	    value: function wsIsUp(actionData) {
	      if (actionData.ws === true) {
	        let client;
	        if (notCommon$1.objHas(actionData, "wsClient") && actionData.wsClient) {
	          client = notCommon$1.getApp().getWSClient(actionData.wsClient);
	        } else {
	          client = notCommon$1.getApp().getWSClient();
	        }
	        if (client) {
	          return true;
	        }
	      }
	      return false;
	    }
	  }, {
	    key: "selectTransport",
	    value: function selectTransport(actionData) {
	      if (this.wsIsUp(actionData)) {
	        return "ws"; //for ws/wss
	      }
	      if (notCommon$1.objHas(actionData, "method")) {
	        return "http"; //for http/https
	      }
	      return false; //for offline
	    }
	  }, {
	    key: "getModelName",
	    value: function getModelName() {
	      return this && this.manifest ? this.manifest.model : null;
	    }
	  }, {
	    key: "getActionData",
	    value: function getActionData(actionName) {
	      return this.getActions() && this.getActions()[actionName] ? this.getActions()[actionName] : null;
	    }
	  }, {
	    key: "getActionsCount",
	    value: function getActionsCount() {
	      return this.getActions() ? Object.keys(this.getActions()).length : 0;
	    }
	  }, {
	    key: "getActions",
	    value: function getActions() {
	      return this.manifest && this.manifest.actions ? this.manifest.actions : {};
	    }
	  }, {
	    key: "parseParams",
	    value: function parseParams(start, end, line, record) {
	      let fieldName = "";
	      let len = start.length;
	      while (line.indexOf(start) > -1) {
	        let ind = line.indexOf(start);
	        let startSlice = ind + len;
	        let endSlice = line.indexOf(end);
	        if (ind > endSlice) {
	          break;
	        }
	        fieldName = line.slice(startSlice, endSlice);
	        if (fieldName == "") break;
	        this.log && this.log(start + fieldName + end, notPath.get(fieldName, record));
	        line = line.replace(start + fieldName + end, notPath.get(fieldName, record));
	      }
	      return line;
	    }
	  }, {
	    key: "parseLine",
	    value: function parseLine(line, record, actionName) {
	      line = line.replace(":modelName", this.manifest.model);
	      line = line.replace(":actionName", actionName);
	      line = this.parseParams(":record[", "]", line, record);
	      line = this.parseParams(":", "?", line, record);
	      return line;
	    }
	  }, {
	    key: "getURL",
	    value: function getURL(record, actionData, actionName) {
	      var line = this.parseLine(this.manifest.url, record, actionName) + (notCommon$1.objHas(actionData, "postFix") ? this.parseLine(actionData.postFix, record, actionName) : "");
	      return line;
	    }
	  }, {
	    key: "getServerURL",
	    value: function getServerURL() {
	      return notCommon$1.getApp() ? notCommon$1.getApp().getOptions("api.server.url", "") : "";
	    }
	  }, {
	    key: "getWSRequestName",
	    value: function getWSRequestName(actionName) {
	      const modelName = this.manifest.model;
	      return `${modelName}${DEFAULT_WS_ROUTE_ACTION_SPLITTER}${actionName}`;
	    }
	  }, {
	    key: "encodeRequest",
	    value: function encodeRequest(data) {
	      let p = "?";
	      for (let t in data) {
	        if (typeof data[t] !== "undefined" && data[t] !== null) {
	          p += encodeURIComponent(t) + "=" + encodeURIComponent(data[t].constructor === Object ? JSON.stringify(data[t]) : data[t]) + "&";
	        }
	      }
	      //for test purpose only, special test server needed
	      if (this.getOptions("test")) {
	        p += "&test=1";
	        if (this.getOptions("test.session")) {
	          p += "&session=" + this.getOptions("test.session");
	        }
	        if (this.getOptions("test.session")) {
	          p += "&role=" + this.getOptions("test.role");
	        }
	      }
	      return p;
	    }
	  }, {
	    key: "collectRequestData",
	    value: function collectRequestData(actionData) {
	      let requestData = {};
	      if (notCommon$1.objHas(actionData, "data") && Array.isArray(actionData.data)) {
	        for (let i = 0; i < actionData.data.length; i++) {
	          let dataProviderName = "get" + notCommon$1.capitalizeFirstLetter(actionData.data[i]);
	          if (this[dataProviderName] && typeof this[dataProviderName] === "function") {
	            let data = this[dataProviderName](),
	              res = {};
	            if (["pager", "sorter", "filter", "search", "return"].indexOf(actionData.data[i]) > -1) {
	              res[actionData.data[i]] = data;
	            } else {
	              res = data;
	            }
	            requestData = Object.assign(requestData, res);
	          }
	        }
	      }
	      return requestData;
	    }
	  }, {
	    key: "getID",
	    value: function getID(record, actionData) {
	      let resultId,
	        list = OPT_DEFAULT_INDEX_FIELD_NAME_PRIORITY,
	        prefixes = ["", this.manifest.model];
	      if (notCommon$1.objHas(actionData, "index") && actionData.index) {
	        list = [actionData.index].concat(OPT_DEFAULT_INDEX_FIELD_NAME_PRIORITY);
	      }
	      for (let pre of prefixes) {
	        for (let t of list) {
	          if (notCommon$1.objHas(record, pre + t)) {
	            resultId = record[pre + t];
	            break;
	          }
	        }
	      }
	      return resultId;
	    }
	  }, {
	    key: "setFindBy",
	    value: function setFindBy(key, value) {
	      var obj = {};
	      obj[key] = value;
	      return this.setFilter(obj);
	    }
	  }, {
	    key: "setFilter",
	    value: function setFilter(filterData = DEFAULT_FILTER) {
	      this.setWorking("filter", filterData);
	      return this;
	    }
	  }, {
	    key: "resetFilter",
	    value: function resetFilter() {
	      return this.setFilter();
	    }
	  }, {
	    key: "getFilter",
	    value: function getFilter() {
	      return this.getWorking("filter");
	    }
	  }, {
	    key: "setSearch",
	    value: function setSearch(searchData = DEFAULT_SEARCH) {
	      this.setWorking("search", searchData);
	      return this;
	    }
	  }, {
	    key: "resetSearch",
	    value: function resetSearch() {
	      return this.setSearch();
	    }
	  }, {
	    key: "getSearch",
	    value: function getSearch() {
	      return this.getWorking("search");
	    }
	  }, {
	    key: "setSorter",
	    value: function setSorter(sorterData) {
	      this.setWorking("sorter", sorterData);
	      return this;
	    }
	  }, {
	    key: "resetSorter",
	    value: function resetSorter() {
	      return this.setSorter({});
	    }
	  }, {
	    key: "getSorter",
	    value: function getSorter() {
	      return this.getWorking("sorter");
	    }
	  }, {
	    key: "setReturn",
	    value: function setReturn(returnData = DEFAULT_RETURN) {
	      this.setWorking("return", returnData);
	      return this;
	    }
	  }, {
	    key: "resetReturn",
	    value: function resetReturn() {
	      return this.setReturn({});
	    }
	  }, {
	    key: "getReturn",
	    value: function getReturn() {
	      return this.getWorking("return");
	    }
	  }, {
	    key: "setPageNumber",
	    value: function setPageNumber(pageNumber) {
	      this.setWorking("pager.page", pageNumber);
	      return this;
	    }
	  }, {
	    key: "setPageSize",
	    value: function setPageSize(pageSize) {
	      this.setWorking("pager.size", pageSize);
	      return this;
	    }

	    //pageSize = DEFAULT_PAGE_SIZE, pageNumber = DEFAULT_PAGE_NUMBER
	  }, {
	    key: "setPager",
	    value: function setPager() {
	      if ((arguments.length < 2 || isNaN(arguments[0]) || isNaN(arguments[1])) && arguments[0].constructor === Object && notCommon$1.objHas(arguments[0], "page") && notCommon$1.objHas(arguments[0], "size")) {
	        const pager = arguments[0];
	        this.setWorking("pager", {
	          size: pager.size || DEFAULT_PAGE_SIZE,
	          page: pager.page || DEFAULT_PAGE_NUMBER
	        });
	      } else if (arguments.length === 2 && !isNaN(arguments[0]) && !isNaN(arguments[1])) {
	        this.setWorking("pager", {
	          size: arguments[0] || DEFAULT_PAGE_SIZE,
	          page: arguments[1] || DEFAULT_PAGE_NUMBER
	        });
	      }
	      return this;
	    }
	  }, {
	    key: "resetPager",
	    value: function resetPager() {
	      return this.setPager();
	    }
	  }, {
	    key: "getPager",
	    value: function getPager() {
	      return this.getWorking("pager");
	    }
	  }, {
	    key: "getRecord",
	    value: function getRecord() {
	      this.getData();
	    }
	  }, {
	    key: "getDefaultAsPlainObject",
	    value: function getDefaultAsPlainObject() {
	      if (!this.manifest || !this.manifest.fields) {
	        return {};
	      }
	      const result = {};
	      for (const fieldName of Object.keys(this.manifest.fields)) {
	        if (Object.hasOwn(this.manifest.fields[fieldName], "default")) {
	          const defaultValue = this.manifest.fields[fieldName].default;
	          if (Array.isArray(defaultValue)) {
	            result[fieldName] = [...defaultValue];
	          } else if (typeof defaultValue === "object") {
	            result[fieldName] = {
	              ...defaultValue
	            };
	          } else {
	            result[fieldName] = defaultValue;
	          }
	        }
	      }
	      return result;
	    }
	  }]);
	}(notBase);

	let notRecord = /*#__PURE__*/function (_notBase) {
	  function notRecord(manifest, item) {
	    var _this;
	    _classCallCheck(this, notRecord);
	    _this = _callSuper(this, notRecord);
	    if (typeof item === "undefined" || item === null || typeof item !== "object") {
	      return _possibleConstructorReturn(_this, item);
	    }
	    if (item && item.isProxy) {
	      notCommon$1.error("this is Proxy item");
	      return _possibleConstructorReturn(_this, item);
	    }
	    if (item && (item.isRecord || item.isProperty)) {
	      return _possibleConstructorReturn(_this, item);
	    } else {
	      if (Array.isArray(item)) {
	        return _possibleConstructorReturn(_this, _this.createCollection(manifest, item));
	      }
	    }
	    _this.setOptions({});
	    _this[META_INTERFACE] = new notInterface(manifest, {});
	    _this.setData(item);
	    _this.interfaceUp();
	    _this.mapToInterface();
	    _this.mapToMethods();
	    return _possibleConstructorReturn(_this, _this);
	  }
	  _inherits(notRecord, _notBase);
	  return _createClass(notRecord, [{
	    key: "toDefault",
	    value: function toDefault() {
	      return this.setData(this[META_INTERFACE].getDefaultAsPlainObject());
	    }
	  }, {
	    key: "mapToInterface",
	    value: function mapToInterface() {
	      let rec = this;
	      for (let t of META_MAP_TO_INTERFACE) {
	        if (this[META_INTERFACE][t] && typeof this[META_INTERFACE][t] === "function") {
	          this[t] = function () {
	            let res = rec[META_INTERFACE][t](...arguments);
	            return res == rec[META_INTERFACE] ? rec : res;
	          };
	        }
	      }
	    }
	  }, {
	    key: "mapToMethods",
	    value: function mapToMethods() {
	      let manifest = this[META_INTERFACE].manifest,
	        app = notCommon$1.getApp(),
	        methods = {};
	      if (manifest.methods) {
	        methods = manifest.methods;
	      } else if (app) {
	        methods = app.getOptions(["models", this[META_INTERFACE].manifest.model].join("."), {});
	      }
	      if (methods) {
	        for (let t in methods) {
	          if (Object.hasOwn(methods, t)) {
	            this[t] = methods[t];
	          }
	        }
	      }
	    }
	  }, {
	    key: "createCollection",
	    value: function createCollection(manifest, items) {
	      var collection = [];
	      for (var i = 0; i < items.length; i++) {
	        collection.push(new notRecord(manifest, items[i]));
	      }
	      return collection;
	    }
	  }, {
	    key: "interfaceUp",
	    value: function interfaceUp() {
	      if (this[META_INTERFACE].getActionsCount() > 0) {
	        let actions = this[META_INTERFACE].getActions();
	        for (let i in actions) {
	          this.actionUp(i, actions[i]);
	        }
	      }
	    }
	  }, {
	    key: "actionUp",
	    value: function actionUp(index) {
	      var _this2 = this;
	      if (!Object.hasOwn(this, [DEFAULT_ACTION_PREFIX$1 + index])) {
	        this[DEFAULT_ACTION_PREFIX$1 + index] = function (...params) {
	          return _this2[META_INTERFACE].request(_this2, index, ...params);
	        };
	      }
	    }
	    /*
	    -> 'path.to.key', valueOfKey
	    <- ok, with one onChange event triggered
	    */
	  }, {
	    key: "setAttr",
	    value: function setAttr(key, value) {
	      return this.setData(key, value);
	    }

	    /*
	    ->
	    {
	    'keyPath': value,
	    'key.subPath': value2,
	    'keyPath.0.title': value3
	    }
	    <- ok, with bunch of onChange events triggered
	    */
	  }, {
	    key: "setAttrs",
	    value: function setAttrs(objectPart) {
	      //notCommon.log('setAttrs', objectPart, Object.keys(objectPart));
	      if (objectPart && typeof objectPart === "object" && Object.keys(objectPart).length > 0) {
	        for (let path in objectPart) {
	          //notCommon.log('setAttrs one to go', path);
	          this.setAttr(path, objectPart[path]);
	        }
	      }
	    }

	    /*
	    -> 'pathToKey'
	    <- value1
	    */
	  }, {
	    key: "getAttr",
	    value: function getAttr(what, plain = false) {
	      let prx = this.getData(what, {});
	      if (plain) {
	        return notCommon$1.stripProxy(prx);
	      } else {
	        return prx;
	      }
	    }

	    /*
	    -> ['pathToKey', 'path.to.key', 'simpleKey',...]
	    <- [value1, value2, value3,...]
	    */
	  }, {
	    key: "getAttrs",
	    value: function getAttrs(what) {
	      let result = [];
	      if (what && what.length > 0) {
	        for (let path of what) {
	          result.push(this.getAttr(path));
	        }
	      }
	      return result;
	    }
	  }, {
	    key: "getManifest",
	    value: function getManifest() {
	      if (this[META_INTERFACE]) {
	        return this[META_INTERFACE].manifest;
	      } else {
	        return {};
	      }
	    }
	  }, {
	    key: "setItem",
	    value: function setItem(item) {
	      this.setData(item);
	      return this;
	    }
	  }]);
	}(notBase);

	/**
	 * @const {string} [OPT_CONTROLLER_PREFIX = "nc"] controller names prefix nc aka NotController
	 */
	const OPT_CONTROLLER_PREFIX = "nc";
	/**
	 * @const {string} [OPT_RECORD_PREFIX = "nr"] record names prefix nr aka NotRecord
	 */
	const OPT_RECORD_PREFIX = "nr";
	/**
	 * @const {string} [DEFAULT_WS_CLIENT_NAME = "main"] default name of WS client
	 */
	const DEFAULT_WS_CLIENT_NAME = "main";

	/**
	 * Class of application
	 * @class
	 */
	let notApp = /*#__PURE__*/function (_notBase) {
	  /**
	   * @class
	   * @param {object} options              application options
	   * @param {string} options.name         name
	   * @param {object} options.controllers  controllers
	   * @param {string}  options.manifestURL URL of network manifest with all available models/actions/fields requests options
	   */
	  function notApp(options) {
	    var _this;
	    _classCallCheck(this, notApp);
	    _this = _callSuper(this, notApp, [{
	      working: {
	        name: options.name,
	        interfaces: {},
	        controllers: notCommon$1.objHas(options, "controllers") ? options.controllers : {},
	        initController: null,
	        currentController: null,
	        uis: {},
	        wsc: {},
	        wss: {},
	        services: {}
	      },
	      options
	    }]);
	    _this?.log && _this.log("start app");
	    notCommon$1.register("app", _this);
	    _this.initManifest();
	    return _possibleConstructorReturn(_this, _this);
	  }

	  /**
	   * Initializes application according to network manifest, which is retrieved from server
	   */
	  _inherits(notApp, _notBase);
	  return _createClass(notApp, [{
	    key: "initManifest",
	    value: function initManifest() {
	      var _this2 = this;
	      notCommon$1.getJSON(this.getOptions("manifestURL")).then(function (manifest) {
	        return _this2.setInterfaceManifest(manifest);
	      }).catch(function (e) {
	        return notCommon$1.report(e);
	      });
	    }

	    /**
	     * One page routing initialization
	     */
	  }, {
	    key: "initRouter",
	    value: function initRouter() {
	      this.setWorking("router", notRouter$1);
	      this.getWorking("router").setRoot(this.getOptions("router.root"));
	      notRouter$1.reRouteExisted();
	    }

	    /**
	     * Creates all the routes handlers and pushes them into router
	     */
	  }, {
	    key: "execRouter",
	    value: function execRouter() {
	      var routieInput = {};
	      for (let t = 0; t < this.getOptions("router.manifest").length; t++) {
	        let routeBlock = this.getOptions("router.manifest")[t],
	          paths = routeBlock.paths,
	          schemes = routeBlock.schemes,
	          controller = routeBlock.controller;
	        for (let i = 0; i < paths.length; i++) {
	          let pathScheme = schemes && Array.isArray(schemes) && schemes.length > i ? schemes[i] : false;
	          routieInput[paths[i]] = this.bindController(controller, pathScheme);
	        }
	      }
	      this.getWorking("router").addList(routieInput).listen(); //.navigate(this.getOptions('router.index'));
	    }

	    /**
	     * Sets interface manifest option
	     * @param {object}  manifest    interface manifest
	     */
	  }, {
	    key: "setInterfaceManifest",
	    value: function setInterfaceManifest(manifest) {
	      Object.freeze(manifest);
	      this.setOptions("interfaceManifest", manifest);
	      this.initRouter();
	      this.update();
	    }

	    /**
	     * returns constructor of interface model
	     * @param {string}  modelName   model name
	     * @returns {object}    interface model constructor
	     */
	  }, {
	    key: "getInterfaceManifest",
	    value: function getInterfaceManifest(modelName) {
	      if (modelName) {
	        return this.getOptions("interfaceManifest")[modelName];
	      } else {
	        return this.getOptions("interfaceManifest");
	      }
	    }

	    /**
	     * Updating Application, reloads interfaces, init controller launched, start again
	     */
	  }, {
	    key: "update",
	    value: function update() {
	      //нужно инициализировать
	      //модели полученными интерфейсами
	      this.updateInterfaces();
	      //иницилицировать и запустить контроллер инициализации
	      this.initController();
	      this.startApp();
	    }

	    /**
	     * Initialization of services, startup of routing
	     */
	  }, {
	    key: "startApp",
	    value: function startApp() {
	      this.initServices();
	      //создать контроллеры
	      //роутер и привязать к нему контроллеры
	      this.execRouter();
	      this.emit("afterStarted", this);
	    }

	    /**
	     *
	     * @param {object} controllerName controller constructor
	     * @param {string[]} controllerPathScheme
	     * @returns {function} function creates new controller instance and pass in notApp instance, arguments from router parser and pathScheme
	     */
	  }, {
	    key: "bindController",
	    value: function bindController(controllerName, controllerPathScheme) {
	      let app = this;
	      return function () {
	        new controllerName(app, arguments, controllerPathScheme);
	      };
	    }

	    /**
	     * Initializes 'initialization' controller which is runs once,
	     * to perform custom initializations routines by application code
	     */
	  }, {
	    key: "initController",
	    value: function initController() {
	      if (typeof this.getOptions("initController") !== "undefined") {
	        let initController = this.getOptions("initController");
	        this.setWorking("initController", new initController(this));
	      }
	    }

	    /**
	     * Returns working controller
	     * @returns {object} working controller
	     */
	  }, {
	    key: "getCurrentController",
	    value: function getCurrentController() {
	      return this.getWorking("currentController");
	    }

	    /**
	     * Destroyes working controller then sets provided as working
	     * @param {object} ctrl controller instance
	     * @returns {object} notApp instance
	     */
	  }, {
	    key: "setCurrentController",
	    value: function setCurrentController(ctrl) {
	      let oldCtrl = this.getCurrentController();
	      if (oldCtrl && oldCtrl.destroy) {
	        oldCtrl.destroy();
	      }
	      this.setWorking("currentController", ctrl);
	      return this;
	    }

	    /**
	     * Creates arrow function: (modelInitData = {}) => notRecord
	     * Factory that creates notRecord instances with binded
	     * recordManifest and provided data to initialize record
	     * @param {Object} recordManifest
	     * @return {function}
	     * @memberof notApp
	     */
	  }, {
	    key: "createInterfaceModelFactory",
	    value: function createInterfaceModelFactory(recordManifest) {
	      return function (recordData) {
	        return new notRecord(recordManifest, recordData);
	      };
	    }

	    /**
	     * Clears interfaces, recreates all according to Options.interafaceManifest
	     */
	  }, {
	    key: "updateInterfaces",
	    value: function updateInterfaces() {
	      this.clearInterfaces();
	      let manifests = this.getOptions("interfaceManifest");
	      if (manifests) {
	        for (let name in manifests) {
	          let recordManifest = manifests[name],
	            recordMethods = this.getOptions(["models", name].join("."), {});
	          recordManifest.methods = recordMethods;
	          const nameInt = this.createInterfaceModelFactory(recordManifest);
	          this.setInterface(name, nameInt);
	        }
	      }
	    }

	    /**
	     * Converts interface name (modelName) to standartizied prefixModelName
	     * @param {string} name interface model name
	     * @returns {string}    not record name
	     */
	  }, {
	    key: "getRecordName",
	    value: function getRecordName(name) {
	      return OPT_RECORD_PREFIX + notCommon$1.capitalizeFirstLetter(name);
	    }

	    /**
	     * Converts controller name (controllerName) to standartizied prefixControllerName
	     * @param {string} name controller name
	     * @returns {string}    not controller name
	     */
	  }, {
	    key: "getControllerName",
	    value: function getControllerName(name) {
	      return OPT_CONTROLLER_PREFIX + notCommon$1.capitalizeFirstLetter(name);
	    }

	    /**
	     * Sets named interface factory function
	     *
	     * @param {string} name
	     * @param {function} modelFactory
	     * @return {notApp}
	     * @memberof notApp
	     */
	  }, {
	    key: "setInterface",
	    value: function setInterface(name, modelFactory) {
	      return this.setWorking(`interfaces.${name}`, modelFactory);
	    }

	    /**
	     * Returns all network interfaces
	     * @returns {object} all network insterfaces
	     */
	  }, {
	    key: "getInterfaces",
	    value: function getInterfaces() {
	      return this.getWorking("interfaces");
	    }

	    /**
	     * Sets interfaces list clear
	     * @returns {object} notApp instance
	     */
	  }, {
	    key: "clearInterfaces",
	    value: function clearInterfaces() {
	      this.setWorking("interfaces", {});
	      return this;
	    }

	    /**
	     * Sets WebSockets client
	     * @param {string} [name=DEFAULT_WS_CLIENT_NAME] name of client
	     * @param {object} wsc  notWSClient instance
	     * @returns {object} notApp instance
	     */
	    // @ts-ignore
	  }, {
	    key: "setWSClient",
	    value: function setWSClient(name = DEFAULT_WS_CLIENT_NAME, wsc) {
	      return this.setWorking(`wsc.${name}`, wsc);
	    }

	    /**
	     * Returns web sockets client instance by name
	     * @param {string} [name=DEFAULT_WS_CLIENT_NAME]
	     * @returns {object} instance of notWSClient
	     */
	  }, {
	    key: "getWSClient",
	    value: function getWSClient(name = DEFAULT_WS_CLIENT_NAME) {
	      return this.getWorking(`wsc.${name}`);
	    }

	    /**
	     * returns network interface class initializator
	     * @param {string} name name of network interface
	     * @returns {function} interface class initializator
	     */
	  }, {
	    key: "getInterface",
	    value: function getInterface(name) {
	      return this.getInterfaces()[name];
	    }

	    /**
	     * Returns network interface (model) initialized with provided data
	     * @param {string} name interface(modelName)
	     * @param {object} [data={}]    model data
	     * @returns network interface initializes with provided data
	     */
	  }, {
	    key: "getModel",
	    value: function getModel(name, data = {}) {
	      return this.getInterface(name)(data);
	    }

	    /**
	     * Sets service
	     * @param {string} name name of the service
	     * @param {object|function} val service
	     */
	  }, {
	    key: "setService",
	    value: function setService(name, val) {
	      return this.setWorking(`services.${name}`, val);
	    }

	    /**
	     * Returns service
	     * @param {string} name name of the service
	     * @returns {object|function} service
	     */
	  }, {
	    key: "getService",
	    value: function getService(name) {
	      return this.getWorking(`services.${name}`);
	    }

	    /**
	     * Initializes all provided services
	     */
	  }, {
	    key: "initServices",
	    value: function initServices() {
	      if (this.getOptions("services")) {
	        for (let servName in this.getOptions("services")) {
	          try {
	            let serv = this.getOptions(`services.${servName}`);
	            const servType = notCommon$1.detectType(serv);
	            switch (servType) {
	              case "function":
	              case "class":
	                this.setService(servName, new serv(this));
	                break;
	              default:
	                this.setService(servName, serv);
	            }
	          } catch (e) {
	            this?.error && this.error(`Service (${servName}) init error`, e);
	          }
	        }
	      }
	    }

	    /**
	     * Returns module dedicated options reader
	     * @param {string} moduleName   module name
	     * @returns {object} reader object {get(pathToValue, defaultValue)}
	     */
	  }, {
	    key: "getConfigReaderForModule",
	    value: function getConfigReaderForModule(moduleName = "") {
	      var _this3 = this;
	      const modConfPath = ["modules", moduleName].join(".");
	      return {
	        get: function (subPath, fallback) {
	          if (subPath && typeof subPath == "string" && subPath.length) {
	            return _this3.getOptions([modConfPath, subPath].join("."), fallback);
	          } else {
	            return _this3.getOptions(modConfPath, fallback);
	          }
	        }
	      };
	    }

	    /**
	     * Returns module dedicated options reader
	     * @param {string} [moduleName='']   module name
	     * @returns {object} reader object {get(pathToValue, defaultValue)}
	     */
	  }, {
	    key: "moduleConfig",
	    value: function moduleConfig(moduleName = "") {
	      return this.getConfigReaderForModule(moduleName);
	    }
	  }]);
	}(notBase);
	/**
	 *  @static {function} DEFAULT_WS_CLIENT_NAME  function to perform deep merges of objects
	 */
	_defineProperty(notApp, "DEFAULT_WS_CLIENT_NAME", DEFAULT_WS_CLIENT_NAME);

	/**
	 * @const {string}  [OPT_DEFAULT_ACTION_NAME = "default"]      default action name
	 */
	const OPT_DEFAULT_ACTION_NAME = "default";

	/**
	 * @const {string}  [OPT_DEFAULT_CONTAINER_SELECTOR = "main.content"]  selector of container HTML
	 *                          element
	 */
	const OPT_DEFAULT_CONTAINER_SELECTOR = "main.content";

	/**
	 * @const {string}  [OPT_DEFAULT_PLURAL_NAME = "Models"]  default plural name of entities
	 */
	const OPT_DEFAULT_PLURAL_NAME = "Models";

	/**
	 * @const {string}  [OPT_DEFAULT_SINGLE_NAME = "Model"]  default single name of entities
	 */
	const OPT_DEFAULT_SINGLE_NAME = "Model";

	/**
	 * @const {string}  [OPT_DEFAULT_MODULE_NAME="main"]  default module name
	 */
	const OPT_DEFAULT_MODULE_NAME = "main";

	/**
	 * @const {boolean}  [OPT_DEFAULT_AUTO_NAME = true]  if shoould be used auto name generator
	 */
	const OPT_DEFAULT_AUTO_NAME = true;

	/**
	 *  Basic class for user controller
	 *  @extends notBase
	 */
	let notController = /*#__PURE__*/function (_notBase) {
	  /**
	   *  @class
	   *  @param {import('./app.js').default} app
	   *  @param  {string}    name
	   */
	  function notController(app, name) {
	    var _this;
	    _classCallCheck(this, notController);
	    _this = _callSuper(this, notController, [{}]);
	    /**
	     *
	     * @type    {object|null}
	     * @memberof notController
	     */
	    _defineProperty(_this, "els", void 0);
	    /**
	     *
	     * @type    {object|null}
	     * @memberof notController
	     */
	    _defineProperty(_this, "make", void 0);
	    /**
	     *
	     * @type    {null|import('./app.js').default}
	     * @memberof notController
	     */
	    _defineProperty(_this, "app", void 0);
	    _this.app = app;
	    _this.app.setCurrentController(_this);
	    _this.setWorking({
	      name,
	      ready: false,
	      views: {},
	      libs: {},
	      helpers: {}
	    });
	    _this.ui = {};
	    _this.els = {};
	    _this.setData({});
	    _this.setOptions({
	      moduleName: OPT_DEFAULT_MODULE_NAME,
	      containerSelector: OPT_DEFAULT_CONTAINER_SELECTOR,
	      prefix: app.getOptions("paths.module"),
	      names: {
	        plural: OPT_DEFAULT_PLURAL_NAME,
	        single: OPT_DEFAULT_SINGLE_NAME
	      }
	    });
	    _this.setURLPrefix(app.getOptions("router.root"));
	    /*
	    сразу делаем доступными модели notRecord из nc`ControllerName` будут доступны как this.nr`ModelName`
	    */
	    let interfaces = app.getInterfaces();
	    _this.make = {};
	    for (let t in interfaces) {
	      // @ts-ignore
	      if (Object.hasOwn(interfaces, t)) {
	        _this.make[t] = interfaces[t];
	      }
	    }
	    _this.on("destroy", function () {
	      _this.app = null;
	      for (let uiName in _this.ui) {
	        _this.ui[uiName].destroy && _this.ui[uiName].destroy();
	        _this.ui[uiName].$destroy && _this.ui[uiName].$destroy();
	        _this.ui[uiName] = null;
	      }
	      _this.els = null;
	      _this.make = null;
	    });
	    return _possibleConstructorReturn(_this, _this);
	  }

	  /**
	   *  Returns current notApp
	   *  @return {import('./app.js').default}
	   */
	  _inherits(notController, _notBase);
	  return _createClass(notController, [{
	    key: "getApp",
	    value: function getApp() {
	      return notCommon$1.getApp();
	    }

	    /**
	     *  Sets default controller model
	     *  @param {import('./record.js')}  model  notRecord interface object
	     *  @return {notController}
	     */
	  }, {
	    key: "setModel",
	    value: function setModel(model) {
	      this.setWorking("model", model);
	      return this;
	    }

	    /**
	     *  If zero or one argument provided this modelName instance will be returned
	     *  If two provided and first is a string than instance of name will be returned initialized with second object param or empty object
	     *  @param {string|object}      [name]    modelName of instance to return or initial data for instance
	     *  @param {object}             [data]    model data
	     *  @return {import('./record.js').default}
	     */
	  }, {
	    key: "getModel",
	    value: function getModel(name, data) {
	      if (typeof name === "string") {
	        const int = this.getInterface(name);
	        return int && int(data || {});
	      } else {
	        const int = this.getInterface();
	        return int && int(name || {});
	      }
	    }

	    /**
	     * Returns controller interface if name is not specified or interface of specified
	     *
	     * @param {string} [name=""]
	     * @return {*}
	     * @memberof notController
	     */
	  }, {
	    key: "getInterface",
	    value: function getInterface(name = "") {
	      return this.app?.getInterface(name || this.getModelName());
	    }

	    /**
	     *  Returns current model name
	     *  @return {string}
	     */
	  }, {
	    key: "getModelName",
	    value: function getModelName() {
	      return this.getWorking("modelName");
	    }
	    /**
	     *  Sets default controller model name
	     *  @param {string}  modelName  notRecord interface object
	     *  @return {notController}
	     */
	  }, {
	    key: "setModelName",
	    value: function setModelName(modelName) {
	      this.setWorking("modelName", notCommon$1.lowerFirstLetter(modelName));
	      return this;
	    }

	    /**
	     *  Returns current model primary ID field name
	     *  @return {import('./record.js')}
	     */
	  }, {
	    key: "getModelIDFieldName",
	    value: function getModelIDFieldName() {
	      return this.getWorking("modelIDFieldName", "_id");
	    }

	    /**
	     *  Sets current model primary ID field name
	     *  @return {notController}
	     */
	  }, {
	    key: "setModelIDFieldName",
	    value: function setModelIDFieldName(val = "_id") {
	      return this.setWorking("modelIDFieldName", val);
	    }

	    /**
	     *  Marks this controller as ready
	     *  emits "ready"/"busy" events
	     *  @param {Boolean}  val  true/false
	     */
	  }, {
	    key: "setReady",
	    value: function setReady(val = true) {
	      this.setWorking("ready", val);
	      val ? this.emit("ready") : this.emit("busy");
	    }

	    /**
	     *  Sets module URL prefix
	     *  @param {string} val URL prefix
	     *  @return {notController} this
	     */
	  }, {
	    key: "setURLPrefix",
	    value: function setURLPrefix(val) {
	      this.setOptions("urlPrefix", val);
	      this.updateAutoName();
	      return this;
	    }

	    /**
	     *  Returns module url prefix
	     *  @return  {string} prefix
	     */
	  }, {
	    key: "getURLPrefix",
	    value: function getURLPrefix() {
	      return this.getOptions("urlPrefix");
	    }

	    /**
	     *  Sets module name
	     *  @param {string} val name of the module
	     *  @return {notController} this
	     */
	  }, {
	    key: "setModuleName",
	    value: function setModuleName(val) {
	      this.setOptions("moduleName", notCommon$1.lowerFirstLetter(val));
	      this.updateAutoName();
	      return this;
	    }
	    /**
	     *  Returns module name
	     *  @return  {string} module name
	     */
	  }, {
	    key: "getModuleName",
	    value: function getModuleName() {
	      return this.getOptions("moduleName");
	    }

	    /**
	     *  Returns this module path prefix
	     *  @return {string}  path to module dir
	     */
	  }, {
	    key: "getModulePrefix",
	    value: function getModulePrefix() {
	      return [notCommon$1.getApp().getOptions("paths.modules"), this.getModuleName()].join("/");
	    }

	    /**
	     *  Returns this model URL with URL prefix
	     *  @return {string}  url path
	     */
	  }, {
	    key: "getModelURL",
	    value: function getModelURL() {
	      return notCommon$1.buildURL({
	        prefix: this.getURLPrefix(),
	        module: this.getModuleName(),
	        model: this.getModelName()
	      });
	    }

	    /**
	     *  Returns this model action URL with URL prefix
	     * @param  {string}   id       some identificator of model
	     * @param  {string}   action   action name
	     *  @return {string}  url path
	     */
	  }, {
	    key: "getModelActionURL",
	    value: function getModelActionURL(id, action = "") {
	      return notCommon$1.buildURL({
	        prefix: this.getURLPrefix(),
	        module: this.getModuleName(),
	        model: this.getModelName(),
	        id,
	        action
	      });
	    }

	    /**
	     * Creates url from value content
	     * @param {object}  val
	     **/
	  }, {
	    key: "buildURL",
	    value: function buildURL(val) {
	      return notCommon$1.buildURL(val);
	    }

	    /**
	     *  Updates working name
	     *  @return {notController} this
	     */
	  }, {
	    key: "updateAutoName",
	    value: function updateAutoName() {
	      if (this.getOptions("autoName", OPT_DEFAULT_AUTO_NAME)) ;
	      return this;
	    }

	    /**
	     *  Sets object name
	     *  @param {string} val name of the object
	     *  @return {notController} this
	     */
	  }, {
	    key: "setName",
	    value: function setName(val) {
	      this.setWorking("name", val);
	      this.setOptions("autoName", false);
	      return this;
	    }

	    /**
	     *  Gets object name
	     *  @return {string}
	     */
	  }, {
	    key: "getName",
	    value: function getName() {
	      return this.getWorking("name");
	    }

	    /**
	     *  Preload records from server, using listAll method,
	     *  returns Promise
	     *  @param {object}  list  map of preloaded records
	     *  @return {Promise}
	     */
	  }, {
	    key: "preloadLib",
	    value: function preloadLib(list = {}) {
	      var _this2 = this;
	      return new Promise(function (resolve, reject) {
	        if (typeof list !== "object") {
	          resolve(undefined);
	        } else {
	          _this2.setWorking("loading", []);
	          for (let t in list) {
	            _this2.getWorking("loading").push(list[t]);
	            _this2.make[list[t]]({}).$listAll().then(function (data) {
	              if (!_this2.getOptions("libs")) {
	                _this2.setOptions("libs", {});
	              }
	              _this2.getOptions("libs")[t] = data;
	              if (_this2.getWorking("loading").indexOf(list[t]) > -1) {
	                _this2.getWorking("loading").splice(_this2.getWorking("loading").indexOf(list[t]), 1);
	              }
	              if (_this2.getWorking("loading").length === 0) {
	                resolve(undefined);
	              }
	            }).catch(function (err) {
	              _this2.report(err);
	              reject();
	            });
	          }
	          if (_this2.getWorking("loading").length === 0) {
	            resolve(undefined);
	          }
	        }
	      });
	    }

	    /**
	     * emits afterRender event
	     */
	  }, {
	    key: "onAfterRender",
	    value: function onAfterRender() {
	      this.emit("afterRender");
	    }

	    /**
	     *  Transform route name in action name
	     *  @param {String}   name tranform action name
	     *  @return {String}
	     */
	  }, {
	    key: "getActionName",
	    value: function getActionName(name = OPT_DEFAULT_ACTION_NAME) {
	      return "run" + notCommon$1.capitalizeFirstLetter(name);
	    }

	    /**
	     *  Get default controller action name
	     *  @return {String} default action from options
	     */
	  }, {
	    key: "getDefaultActionName",
	    value: function getDefaultActionName() {
	      return this.getActionName(this.getOptions("defaultAction", OPT_DEFAULT_ACTION_NAME));
	    }

	    /**
	     *  Route params into specific run[Route_name] function
	     *  @param {array}   params   controller input params
	     *  @return {undefined}
	     */
	  }, {
	    key: "route",
	    value: function route(params) {
	      let [routerName, ...subParams] = params,
	        actionName = this.getActionName(routerName ? routerName : OPT_DEFAULT_ACTION_NAME);
	      if (typeof this[actionName] === "function") {
	        this.setCurrentAction(actionName);
	        this[actionName](subParams);
	      } else if (this[this.getDefaultActionName()]) {
	        this.setCurrentAction(this.getDefaultActionName());
	        this[this.getDefaultActionName()](subParams);
	      } else {
	        this.setCurrentAction(undefined);
	        this.error && this.error("No action in router", params);
	      }
	    }

	    /**
	     * Sets working action
	     * @params {string} actionName current action name
	     */
	  }, {
	    key: "setCurrentAction",
	    value: function setCurrentAction(actionName) {
	      this.setWorking("action", actionName);
	    }

	    /**
	     * Gets working action
	     * @returns {string} current action name
	     */
	  }, {
	    key: "getCurrentAction",
	    value: function getCurrentAction() {
	      return this.getWorking("action");
	    }

	    /**
	     *  Return application options
	     *  @return {object}
	     */
	  }, {
	    key: "getAppOptions",
	    value: function getAppOptions() {
	      try {
	        return this.getApp().getOptions();
	      } catch (e) {
	        this.error && this.error(e);
	      }
	    }

	    /**
	     *  Returns module options
	     *  @param  {string}   [moduleName]    name of the module which options requested
	     *  @return {object}
	     */
	  }, {
	    key: "getModuleOptions",
	    value: function getModuleOptions(moduleName) {
	      try {
	        return this.getApp().getOptions(["modules", moduleName || this.getModuleName()].join("."));
	      } catch (e) {
	        this.error && this.error(e);
	      }
	    }

	    /**
	     *  Returns module services
	     *  @param  {string}   moduleName    name of the module which services requested
	     *  @return {object}
	     */
	  }, {
	    key: "getServices",
	    value: function getServices(moduleName) {
	      try {
	        return this.getApp().getOptions(["services", moduleName || this.getModuleName()].join("."));
	      } catch (e) {
	        this.error && this.error(e);
	      }
	    }

	    /**
	     *  Returns module components
	     *  @param  {string}   moduleName    name of the module which components requested
	     *  @return {object}
	     */
	  }, {
	    key: "getComponents",
	    value: function getComponents(moduleName) {
	      try {
	        return this.getApp().getOptions(["components", moduleName || this.getModuleName()].join("."));
	      } catch (e) {
	        this.error && this.error(e);
	      }
	    }

	    /**
	     *  Refreshes current URL, re-run all action
	     *  @param {number} timeout time to wait in ms
	     */
	  }, {
	    key: "refresh",
	    value: function refresh(timeout = 0) {
	      this.app?.getWorking("router").refresh(timeout);
	    }

	    /**
	     * Returns path pattern for router
	     * @params {number} [0] paramsCount   number of params
	     * @return {string}  pattern for controller supported url
	     */
	  }, {
	    key: "getRouter",
	    value:
	    /**
	     * Returns Application router
	     * @returns {import('./router.js').default}
	     */
	    function getRouter() {
	      return this.app?.getWorking("router");
	    }

	    /**
	     * Changes location to `url` after `delay` ms
	     * @param {string} url
	     * @param {number|string}   delay   number in ms or name of delay
	     */
	  }, {
	    key: "navigateWithDelay",
	    value: function navigateWithDelay(url, delay = NAVIGATION_DELAY_DEFAULT, doBefore = function () {}) {
	      return this.getRouter().navigateWithDelay(url, delay, doBefore);
	    }

	    /**
	     * Changes location to `url`
	     * @param {string} url
	     */
	  }, {
	    key: "navigate",
	    value: function navigate(url) {
	      return this.getRouter().navigate(url);
	    }

	    /**
	     *  Navigating to this controller main model `action` with provided `id`,
	     *  empty `id` will be dropped from resulting url
	     *
	     * @param {string} id
	     * @param {string} [action=""]
	     * @param {number} [delay=0]            delay in ms before navigate
	     * @param   {function}  [doBefore]      will executed only if delayed after delay but before navigate
	     * @return {*}
	     * @memberof notController
	     */
	  }, {
	    key: "navigateAction",
	    value: function navigateAction(id, action = "", delay = 0, doBefore = function () {}) {
	      return this.navigateModuleAction(this.getModuleName(), this.getModelName(), id, action, delay, doBefore);
	    }

	    /**
	     *  Navigating to this controller module model of `modelName` `action` with provided `id`,
	     *  empty `id` will be dropped from resulting url
	     *
	     * @param {string} modelName
	     * @param {string} id
	     * @param {string} [action=""]
	     * @param {number} [delay=0]            delay in ms before navigate
	     * @param   {function}  [doBefore]      will executed only if delayed after delay but before navigate
	     * @return {*}
	     * @memberof notController
	     */
	  }, {
	    key: "navigateModelAction",
	    value: function navigateModelAction(modelName, id, action = "", delay = 0, doBefore = function () {}) {
	      return this.navigateModuleAction(this.getModuleName(), modelName, id, action, delay, doBefore);
	    }

	    /**
	     *  Navigating to `moduleName` `modelName` `action` with provided `id`,
	     *  empty `id` will be dropped from resulting url
	     *
	     * @param {string} moduleName
	     * @param {string} modelName
	     * @param {string} id
	     * @param {string} [action=""]
	     * @param {number} [delay=0]            delay in ms before navigate
	     * @param   {function}  [doBefore]      will executed only if delayed after delay but before navigate
	     * @return {*}
	     * @memberof notController
	     */
	  }, {
	    key: "navigateModuleAction",
	    value: function navigateModuleAction(moduleName, modelName, id, action = "", delay = 0, doBefore = function () {}) {
	      if (delay) {
	        return this.getRouter().navigateWithDelay(notCommon$1.buildURL({
	          prefix: this.getURLPrefix(),
	          module: moduleName,
	          model: modelName,
	          id,
	          action
	        }), delay, doBefore);
	      } else {
	        return this.getRouter().navigate(notCommon$1.buildURL({
	          prefix: this.getURLPrefix(),
	          module: moduleName,
	          model: modelName,
	          id,
	          action
	        }));
	      }
	    }

	    /**
	     * Creates menu item from child class constructor
	     *
	     * @static
	     * @param {notController} childConstructor
	     * @return {Array<import('./types.js').NavigationItem>}
	     * @memberof notController
	     */
	  }], [{
	    key: "MODULE_NAME",
	    get:
	    /**
	     *  @static {string} MODULE_NAME  name of module
	     */
	    function () {
	      return OPT_DEFAULT_MODULE_NAME;
	    }
	    /**
	     *  @static {string} MODEL_NAME  name of model
	     */
	  }, {
	    key: "MODEL_NAME",
	    get: function () {
	      return "ModelName";
	    }
	  }, {
	    key: "LABELS",
	    get: function () {
	      return {
	        plural: `${OPT_DEFAULT_MODULE_NAME}:model_label_plural`,
	        single: `${OPT_DEFAULT_MODULE_NAME}:model_label_single`
	      };
	    }
	  }, {
	    key: "getControllerRoute",
	    value: function getControllerRoute(paramsCount = 0) {
	      let path = [];
	      if (this.MODULE_NAME && this.MODULE_NAME.length > 0) {
	        path.push(notCommon$1.lowerFirstLetter(this.MODULE_NAME));
	      }
	      if (this.MODEL_NAME && this.MODEL_NAME.length > 0) {
	        path.push(notCommon$1.lowerFirstLetter(this.MODEL_NAME));
	      }
	      path = [path.join("/")];
	      for (let i = 0; i < paramsCount; i++) {
	        path.push("/([^/]+)");
	      }
	      return path.join("");
	    }

	    /**
	     * Returns path patterns for router
	     * @params {number} [0] paramsDeep   how many paths with params in the end
	     * @return {string[]}  patterns for controller supported url in order of simplification
	     */
	  }, {
	    key: "getControllerRoutes",
	    value: function getControllerRoutes(paramsDeep = 0) {
	      let routes = [this.getControllerRoute(0)];
	      for (let i = 0; i < paramsDeep; i++) {
	        routes.unshift(this.getControllerRoute(i + 1));
	      }
	      return routes;
	    }

	    /**
	     * Returns router rule.
	     * @returns {Object} router rule {paths:String[], controller:notController}
	     */
	  }, {
	    key: "getRoutes",
	    value: function getRoutes() {
	      return {
	        paths: this.getControllerRoutes(this.PARAMS_LENGTH),
	        controller: this
	      };
	    }
	  }, {
	    key: "getCommonMenu",
	    value: function getCommonMenu(childConstructor) {
	      return [{
	        // @ts-ignore
	        section: childConstructor.MODULE_NAME,
	        // @ts-ignore
	        title: childConstructor.LABELS.plural,
	        url: `/${notCommon$1.lowerFirstLetter(
        // @ts-ignore
        childConstructor.MODULE_NAME
        // @ts-ignore
        )}/${notCommon$1.lowerFirstLetter(childConstructor.MODEL_NAME)}`
	      }];
	    }
	  }, {
	    key: "getMenu",
	    value: function getMenu() {}
	  }]);
	}(notBase);
	/**
	 *  @static {number} PARAMS_LENGTH  number of params in URL path
	 */
	_defineProperty(notController, "PARAMS_LENGTH", 2);

	const ALL = {};
	function exist(key) {
	  return Object.hasOwn(ALL, key);
	}
	function get(key) {
	  if (exist(key)) {
	    return ALL[key];
	  } else {
	    return false;
	  }
	}
	function create(key, props = {
	  raw: [],
	  filtered: [],
	  selected: {}
	}) {
	  if (!exist(key)) {
	    if (Object.keys(props).length > 0) {
	      ALL[key] = {};
	      Object.keys(props).forEach(function (name) {
	        ALL[key][name] = writable(props[name]);
	      });
	    } else {
	      throw new Error("store's props wasn't specified");
	    }
	  }
	  return ALL[key];
	}

	function onInput(ev, id, fieldname, dispatch) {
		let data = {
			id: id(),
			field: fieldname(),
			value: ev.target.type === 'checkbox' ? ev.target.checked : ev.target.value
		};

		dispatch('change', data);
		return true;
	}

	var root$b = template(`<input type="checkbox"> <label class="label"></label>`, 1);

	function Ui_switch($$anchor, $$props) {
		push($$props, true);

		let dispatch = createEventDispatcher();

		/**
		 * @typedef {Object} Props
		 * @property {string} [id]
		 * @property {boolean} [value]
		 * @property {string} [fieldname]
		 * @property {boolean} [disabled]
		 * @property {boolean} [readonly]
		 * @property {string} [styling]
		 */
		/** @type {Props} */
		let id = prop($$props, "id", 3, ''),
			value = prop($$props, "value", 15, false),
			fieldname = prop($$props, "fieldname", 3, 'switch'),
			disabled = prop($$props, "disabled", 3, false),
			readonly = prop($$props, "readonly", 3, false),
			styling = prop($$props, "styling", 3, " is-rounded is-success ");

		var fragment = root$b();
		var input = first_child(fragment);

		remove_input_defaults(input);
		input.__input = [onInput, id, fieldname, dispatch];

		var label = sibling(input, 2);

		template_effect(() => {
			set_class(input, `switch ${styling() ?? ""}`);
			set_attribute(input, "id", `edit-table-row-cell-inline-switch-${fieldname() ?? ""}-${id() ?? ""}`);
			set_attribute(input, "name", fieldname());
			input.readOnly = readonly();
			input.disabled = disabled();
			set_attribute(label, "for", `edit-table-row-cell-inline-switch-${fieldname() ?? ""}-${id() ?? ""}`);
		});

		bind_checked(input, value);
		append($$anchor, fragment);
		pop();
	}

	delegate(["input"]);

	var root_3$5 = template(`<a> </a>`);
	var root_2$5 = template(`<div class="mx-1 tags has-addons svelte-38rpfk"><span class="tag"> </span> <span><!></span></div>`);
	var root_6$5 = template(`<a> </a>`);
	var root_5$5 = template(`<span><!></span>`);

	function Ui_tags($$anchor, $$props) {
		/*
		  import { createEventDispatcher } from 'svelte';
		  let dispatch = createEventDispatcher();
		*/
		/**
		 * @typedef {Object} Props
		 * @property {any} [values] - item = {
		id,        //unique
		title,     //some text
		value,      //for double tags
		color       //coloring
		}
		 */
		/** @type {Props} */
		let values = prop($$props, "values", 19, () => []);
		var fragment = comment();
		var node = first_child(fragment);

		each(node, 17, values, (item) => item.id, ($$anchor, item) => {
			var fragment_1 = comment();
			var node_1 = first_child(fragment_1);

			{
				var consequent_1 = ($$anchor) => {
					var div = root_2$5();
					var span = child(div);
					var text$1 = child(span, true);

					reset(span);

					var span_1 = sibling(span, 2);
					var node_2 = child(span_1);

					{
						var consequent = ($$anchor) => {
							var a = root_3$5();
							var text_1 = child(a, true);

							reset(a);

							template_effect(() => {
								set_attribute(a, "href", get$2(item).url);
								set_class(a, `${get$2(item).urlCustomClasses ?? ""} svelte-38rpfk`);
								set_text(text_1, get$2(item).value);
							});

							append($$anchor, a);
						};

						var alternate = ($$anchor) => {
							var text_2 = text();

							template_effect(() => set_text(text_2, get$2(item).value));
							append($$anchor, text_2);
						};

						if_block(node_2, ($$render) => {
							if (get$2(item).url) $$render(consequent); else $$render(alternate, false);
						});
					}

					reset(span_1);
					reset(div);

					template_effect(() => {
						set_text(text$1, get$2(item).title);
						set_class(span_1, `tag is-${get$2(item).color ?? ""} ${get$2(item).customClasses ?? ""} svelte-38rpfk`);
					});

					append($$anchor, div);
				};

				var alternate_2 = ($$anchor) => {
					var span_2 = root_5$5();
					var node_3 = child(span_2);

					{
						var consequent_2 = ($$anchor) => {
							var a_1 = root_6$5();
							var text_3 = child(a_1, true);

							reset(a_1);

							template_effect(() => {
								set_attribute(a_1, "href", get$2(item).url);
								set_class(a_1, `${get$2(item).urlCustomClasses ?? ""} svelte-38rpfk`);
								set_text(text_3, get$2(item).title);
							});

							append($$anchor, a_1);
						};

						var alternate_1 = ($$anchor) => {
							var text_4 = text();

							template_effect(() => set_text(text_4, get$2(item).title));
							append($$anchor, text_4);
						};

						if_block(node_3, ($$render) => {
							if (get$2(item).url) $$render(consequent_2); else $$render(alternate_1, false);
						});
					}

					reset(span_2);
					template_effect(() => set_class(span_2, `mx-1 tag is-${get$2(item).color ?? ""} ${get$2(item).customClasses ?? ""} svelte-38rpfk`));
					append($$anchor, span_2);
				};

				if_block(node_1, ($$render) => {
					if (Object.hasOwn(get$2(item), "value")) $$render(consequent_1); else $$render(alternate_2, false);
				});
			}

			append($$anchor, fragment_1);
		});

		append($$anchor, fragment);
	}

	var root$a = template(`<td><!></td>`);

	function NotTableCell($$anchor, $$props) {
		push($$props, true);

		const $$stores = setup_stores();
		const $LOCALE = () => store_get(LOCALE, "$LOCALE", $$stores);
		let title = state("");

		onMount(() => {
			if (typeof field().type === "undefined") {
				if (Object.hasOwn(field(), "titlePath")) {
					set(title, proxy(notPath.get(field().titlePath, item(), helpers())));
				} else if (Object.hasOwn(field(), "titleComposer") && typeof field().titleComposer === "function") {
					set(title, proxy(field().titleComposer(item(), helpers())));
				} else {
					set(title, proxy(notPath.get(field().path, item(), helpers())));
				}
			}
		});

		let getItemId = prop($$props, "getItemId", 3, (item) => item._id),
			field = prop($$props, "field", 19, () => ({})),
			item = prop($$props, "item", 19, () => ({})),
			helpers = prop($$props, "helpers", 19, () => ({}));

		var td = root$a();
		var node = child(td);

		{
			var consequent = ($$anchor) => {
				var values = derived(() => notPath.get(field().path, item(), helpers()));

				Ui_links($$anchor, {
					get values() {
						return get$2(values);
					}
				});
			};

			var alternate_7 = ($$anchor) => {
				var fragment_1 = comment();
				var node_1 = first_child(fragment_1);

				{
					var consequent_1 = ($$anchor) => {
						var values_1 = derived(() => notPath.get(field().path, item(), helpers()));

						Ui_buttons($$anchor, {
							get values() {
								return get$2(values_1);
							}
						});
					};

					var alternate_6 = ($$anchor) => {
						var fragment_3 = comment();
						var node_2 = first_child(fragment_3);

						{
							var consequent_2 = ($$anchor) => {
								var values_2 = derived(() => notPath.get(field().path, item(), helpers()));

								Ui_images($$anchor, {
									get values() {
										return get$2(values_2);
									}
								});
							};

							var alternate_5 = ($$anchor) => {
								var fragment_5 = comment();
								var node_3 = first_child(fragment_5);

								{
									var consequent_3 = ($$anchor) => {
										var values_3 = derived(() => notPath.get(field().path, item(), helpers()));

										Ui_booleans($$anchor, {
											get values() {
												return get$2(values_3);
											}
										});
									};

									var alternate_4 = ($$anchor) => {
										var fragment_7 = comment();
										var node_4 = first_child(fragment_7);

										{
											var consequent_4 = ($$anchor) => {
												var values_4 = derived(() => notPath.get(field().path, item(), helpers()));

												Ui_tags($$anchor, {
													get values() {
														return get$2(values_4);
													}
												});
											};

											var alternate_3 = ($$anchor) => {
												var fragment_9 = comment();
												var node_5 = first_child(fragment_9);

												{
													var consequent_5 = ($$anchor) => {
														var id = derived(() => getItemId()(item()));
														var value = derived(() => notPath.get(field().path, item(), helpers()));

														Ui_switch($$anchor, {
															get id() {
																return get$2(id);
															},
															get fieldname() {
																return field().path;
															},
															get value() {
																return get$2(value);
															},
															get disabled() {
																return field().disabled;
															},
															get readonly() {
																return field().readonly;
															},
															$$events: {
																change(...$$args) {
																	field().onChange?.apply(this, $$args);
																}
															}
														});
													};

													var alternate_2 = ($$anchor) => {
														var fragment_11 = comment();
														var node_6 = first_child(fragment_11);

														{
															var consequent_6 = ($$anchor) => {
																var fragment_12 = comment();
																var node_7 = first_child(fragment_12);
																var id_1 = derived(() => getItemId()(item()));
																var value_1 = derived(() => notPath.get(field().path, item(), helpers()));

																component(node_7, () => field().component, ($$anchor, $$component) => {
																	$$component($$anchor, spread_props(
																		{
																			get id() {
																				return get$2(id_1);
																			},
																			get fieldname() {
																				return field().path;
																			},
																			get disabled() {
																				return field().disabled;
																			},
																			get readonly() {
																				return field().readonly;
																			},
																			get value() {
																				return get$2(value_1);
																			}
																		},
																		() => field().options,
																		{
																			$$events: {
																				change(...$$args) {
																					field().onChange?.apply(this, $$args);
																				}
																			}
																		}
																	));
																});

																append($$anchor, fragment_12);
															};

															var alternate_1 = ($$anchor) => {
																var fragment_13 = comment();
																var node_8 = first_child(fragment_13);

																{
																	var consequent_7 = ($$anchor) => {
																		var text$1 = text();

																		template_effect(() => set_text(text$1, notCommon$1.strLengthCap(notPath.get(field().path, item(), helpers()), field().maxLength)));
																		append($$anchor, text$1);
																	};

																	var alternate = ($$anchor) => {
																		var text_1 = text();

																		template_effect(() => set_text(text_1, $LOCALE()[notPath.get(field().path, item(), helpers())]));
																		append($$anchor, text_1);
																	};

																	if_block(
																		node_8,
																		($$render) => {
																			if (field() && typeof field() !== "undefined" && !isNaN(field().maxLength) && field().maxLength) $$render(consequent_7); else $$render(alternate, false);
																		},
																		true
																	);
																}

																append($$anchor, fragment_13);
															};

															if_block(
																node_6,
																($$render) => {
																	if (field().component) $$render(consequent_6); else $$render(alternate_1, false);
																},
																true
															);
														}

														append($$anchor, fragment_11);
													};

													if_block(
														node_5,
														($$render) => {
															if (field().type === "switch") $$render(consequent_5); else $$render(alternate_2, false);
														},
														true
													);
												}

												append($$anchor, fragment_9);
											};

											if_block(
												node_4,
												($$render) => {
													if (field().type === "tag") $$render(consequent_4); else $$render(alternate_3, false);
												},
												true
											);
										}

										append($$anchor, fragment_7);
									};

									if_block(
										node_3,
										($$render) => {
											if (field().type === "boolean") $$render(consequent_3); else $$render(alternate_4, false);
										},
										true
									);
								}

								append($$anchor, fragment_5);
							};

							if_block(
								node_2,
								($$render) => {
									if (field().type === "image") $$render(consequent_2); else $$render(alternate_5, false);
								},
								true
							);
						}

						append($$anchor, fragment_3);
					};

					if_block(
						node_1,
						($$render) => {
							if (field().type === "button") $$render(consequent_1); else $$render(alternate_6, false);
						},
						true
					);
				}

				append($$anchor, fragment_1);
			};

			if_block(node, ($$render) => {
				if (field().type === "link") $$render(consequent); else $$render(alternate_7, false);
			});
		}

		reset(td);

		template_effect(() => {
			set_class(td, (field().hideOnMobile ? " is-hidden-touch " : "") + (field().classes ? ` ${field().classes} ` : ""));
			set_attribute(td, "title", get$2(title));
		});

		append($$anchor, td);
		pop();
	}

	function onRowSelect(
		e,
		dispatch,
		itemId,
		$selectedList,
		selectedList
	) {
		e.preventDefault();

		dispatch('rowSelectChange', {
			id: get$2(itemId),
			selected: $selectedList()[get$2(itemId)]
		});

		return false;
	}

	var root_1$8 = template(`<td><input type="checkbox" placeholder=""></td>`);
	var root$9 = template(`<tr><!><!></tr>`);

	function NotTableRow($$anchor, $$props) {
		push($$props, true);

		const $$stores = setup_stores();
		const $selectedList = () => store_get(selectedList, "$selectedList", $$stores);
		let dispatch = createEventDispatcher();

		let itemId = state(undefined),
			selectedList;

		onMount(() => {
			set(itemId, proxy(getItemId()(item())));
			selectedList = get($$props.id).selected;
		});

		/**
		 * @typedef {Object} Props
		 * @property {any} id
		 * @property {any} [item]
		 * @property {any} [helpers]
		 * @property {any} [fields]
		 * @property {boolean} [showSelect]
		 * @property {any} [getItemId]
		 */
		/** @type {Props} */
		let item = prop($$props, "item", 19, () => ({})),
			helpers = prop($$props, "helpers", 19, () => ({})),
			fields = prop($$props, "fields", 19, () => []),
			showSelect = prop($$props, "showSelect", 3, false),
			getItemId = prop($$props, "getItemId", 3, () => {});

		var tr = root$9();
		var node = child(tr);

		{
			var consequent = ($$anchor) => {
				var td = root_1$8();
				var input = child(td);

				remove_input_defaults(input);
				template_effect(() => set_attribute(input, "id", `table-row-select-${getItemId()(item()) ?? ""}`));
				template_effect(() => set_attribute(input, "data-id", getItemId()(item())));
				template_effect(() => set_attribute(input, "name", `row_selected_${getItemId()(item()) ?? ""}`));

				input.__change = [
					onRowSelect,
					dispatch,
					itemId,
					$selectedList,
					selectedList
				];

				reset(td);
				bind_checked(input, () => $selectedList()[get$2(itemId)], ($$value) => store_mutate(selectedList, untrack($selectedList)[get$2(itemId)] = $$value, untrack($selectedList)));
				append($$anchor, td);
			};

			if_block(node, ($$render) => {
				if (showSelect() && $selectedList()) $$render(consequent);
			});
		}

		var node_1 = sibling(node);

		each(node_1, 17, fields, index$d, ($$anchor, field) => {
			NotTableCell($$anchor, {
				get field() {
					return get$2(field);
				},
				get helpers() {
					return helpers();
				},
				get item() {
					return item();
				},
				get getItemId() {
					return getItemId();
				}
			});
		});

		reset(tr);
		append($$anchor, tr);
		pop();
	}

	delegate(["change"]);

	function onSearchInput(ev, dispatch) {
		try {
			let data = ev.currentTarget.value.trim();

			dispatch("searchChange", data);
		} catch {
			return;
		}
	}

	function goPrev(_, dispatch) {
		dispatch("goToPrevPage");
	}

	function goNext(__1, dispatch) {
		dispatch("goToNextPage");
	}

	function goTo(e, dispatch) {
		e.preventDefault();

		let el = e.target;

		dispatch("goToPage", parseInt(el.dataset.page));
		return false;
	}

	function onSelectAll(__2, $$props, items, getItemId, selectAll) {
		get($$props.id).selected.update((value) => {
			items().forEach((item) => {
				value[getItemId()(item)] = selectAll();
			});

			return value;
		});
	}

	var root_1$7 = template(`<div class="field is-grouped"><!></div>`);
	var root_2$4 = template(`<div class="field is-grouped"><!></div>`);
	var root_5$4 = template(`<div class="field"><div class="control"><input class="input" type="text" placeholder="Поиск"></div></div>`);
	var root_6$4 = template(`<th><input type="checkbox" id="table-row-select-page" placeholder="" name="row_selected_all"></th>`);
	var root_7$2 = template(`<th><!></th>`);
	var root_14$1 = template(`<a href="" class="pagination-link is-current" aria-current="page"> </a>`);
	var root_15$1 = template(`<a href="" class="pagination-link"> </a>`);
	var root_13 = template(`<li><!></li>`);
	var root_11$1 = template(`<nav class="pagination is-centered" aria-label="pagination"><a href="" class="pagination-previous">Назад</a> <a href="" class="pagination-next">Вперед</a> <ul class="pagination-list"><!></ul></nav>`);
	var root$8 = template(`<!> <!> <!> <table class="table"><thead><tr><!><!></tr></thead><tbody></tbody></table> <!>`, 1);

	function NotTable($$anchor, $$props) {
		push($$props, true);

		const $$stores = setup_stores();
		const $LOCALE = () => store_get(LOCALE, "$LOCALE", $$stores);
		let dispatch = createEventDispatcher();

		/**
		 * @typedef {Object} Props
		 * @property {any} id
		 * @property {any} filterUI
		 * @property {any} [helpers]
		 * @property {any} [state]
		 * @property {any} [filter]
		 * @property {any} [sorter]
		 * @property {any} [fields]
		 * @property {any} [selected]
		 * @property {any} [items]
		 * @property {any} [actions]
		 * @property {any} [links]
		 * @property {string} [search]
		 * @property {boolean} [showSearch]
		 * @property {boolean} [showSelect]
		 * @property {boolean} [selectAll]
		 * @property {any} [getItemId]
		 */
		/** @type {Props} */
		let helpers = prop($$props, "helpers", 19, () => ({})),
			state = prop($$props, "state", 31, () => proxy({})),
			filter = prop($$props, "filter", 31, () => proxy({})),
			sorter = prop($$props, "sorter", 31, () => proxy({})),
			fields = prop($$props, "fields", 19, () => []),
			selected = prop($$props, "selected", 31, () => proxy({})),
			items = prop($$props, "items", 31, () => proxy([])),
			actions = prop($$props, "actions", 19, () => []),
			links = prop($$props, "links", 19, () => []),
			search = prop($$props, "search", 15, ""),
			showSearch = prop($$props, "showSearch", 3, true),
			showSelect = prop($$props, "showSelect", 3, true),
			selectAll = prop($$props, "selectAll", 15, false),
			getItemId = prop($$props, "getItemId", 3, (item) => item._id);

		onMount(() => {
			if (showSelect()) {
				get($$props.id).selected.subscribe((value) => {
					selected(value);
				});
			}

			get($$props.id).refined.subscribe((value) => {
				items(value);

				if (showSelect()) {
					for (let itemId in selected()) {
						if (!items().some((item) => getItemId()(item) === itemId)) {
							delete selected()[itemId];
						} else {
							if (!Object.hasOwn(selected(), itemId)) {
								selected(selected()[itemId] = false, true);
							}
						}
					}

					selected(selected());
				}
			});

			get($$props.id).state.subscribe((value) => {
				state(value);
			});
		});

		function onSearchChange({ detail }) {
			try {
				dispatch("searchChange", detail);
			} catch {
				return;
			}
		}

		function onFilterChange({ detail }) {
			try {
				dispatch("filterChange", detail);
			} catch {
				return;
			}
		}

		function onFieldHeadClick(field) {
			const propPath = field.path.substring(1);

			if (Object.hasOwn(sorter(), propPath)) {
				sorter(sorter()[propPath] = parseInt(sorter()[propPath]) * -1, true);
			} else {
				sorter({ [propPath]: 1 });
			}

			dispatch("sorterChange", sorter());
		}

		var fragment = root$8();
		var node = first_child(fragment);

		{
			var consequent = ($$anchor) => {
				var div = root_1$7();
				var node_1 = child(div);

				Ui_links(node_1, {
					get values() {
						return links();
					}
				});

				reset(div);
				append($$anchor, div);
			};

			if_block(node, ($$render) => {
				if (links().length) $$render(consequent);
			});
		}

		var node_2 = sibling(node, 2);

		{
			var consequent_1 = ($$anchor) => {
				var div_1 = root_2$4();
				var node_3 = child(div_1);

				Ui_buttons(node_3, {
					get values() {
						return actions();
					}
				});

				reset(div_1);
				append($$anchor, div_1);
			};

			if_block(node_2, ($$render) => {
				if (actions().length) $$render(consequent_1);
			});
		}

		var node_4 = sibling(node_2, 2);

		{
			var consequent_3 = ($$anchor) => {
				var fragment_1 = comment();
				var node_5 = first_child(fragment_1);

				{
					var consequent_2 = ($$anchor) => {
						var fragment_2 = comment();
						const SvelteComponent = derived(() => $$props.filterUI);
						var node_6 = first_child(fragment_2);

						component(node_6, () => get$2(SvelteComponent), ($$anchor, $$component) => {
							$$component($$anchor, {
								get filter() {
									return filter();
								},
								set filter($$value) {
									filter($$value);
								},
								$$events: {
									change: onFilterChange,
									searchChange: onSearchChange
								}
							});
						});

						append($$anchor, fragment_2);
					};

					var alternate = ($$anchor) => {
						var div_2 = root_5$4();
						var div_3 = child(div_2);
						var input = child(div_3);

						remove_input_defaults(input);
						input.__input = [onSearchInput, dispatch];
						reset(div_3);
						reset(div_2);
						bind_value(input, search);
						append($$anchor, div_2);
					};

					if_block(node_5, ($$render) => {
						if ($$props.filterUI) $$render(consequent_2); else $$render(alternate, false);
					});
				}

				append($$anchor, fragment_1);
			};

			if_block(node_4, ($$render) => {
				if (showSearch()) $$render(consequent_3);
			});
		}

		var table = sibling(node_4, 2);
		var thead = child(table);
		var tr = child(thead);
		var node_7 = child(tr);

		{
			var consequent_4 = ($$anchor) => {
				var th = root_6$4();
				var input_1 = child(th);

				remove_input_defaults(input_1);

				input_1.__change = [
					onSelectAll,
					$$props,
					items,
					getItemId,
					selectAll
				];

				reset(th);
				bind_checked(input_1, selectAll);
				append($$anchor, th);
			};

			if_block(node_7, ($$render) => {
				if (showSelect()) $$render(consequent_4);
			});
		}

		var node_8 = sibling(node_7);

		each(node_8, 17, fields, index$d, ($$anchor, field) => {
			var th_1 = root_7$2();
			const propPath = derived(() => get$2(field).path.substring(1));
			var event_handler = derived(() => onFieldHeadClick(get$2(field)));

			th_1.__click = function (...$$args) {
				get$2(event_handler)?.apply(this, $$args);
			};

			var node_9 = child(th_1);

			{
				var consequent_5 = ($$anchor) => {
					var font = derived(() => sorter()[get$2(propPath)] > 0 ? "sort-up" : "sort-down");

					Ui_icon_font($$anchor, {
						get font() {
							return get$2(font);
						},
						get title() {
							return get$2(field).title;
						},
						pointable: true
					});
				};

				var alternate_1 = ($$anchor) => {
					var text$1 = text();

					template_effect(() => set_text(text$1, $LOCALE()[get$2(field).title]));
					append($$anchor, text$1);
				};

				if_block(node_9, ($$render) => {
					if (get$2(field).sortable && Object.hasOwn(sorter(), get$2(propPath))) $$render(consequent_5); else $$render(alternate_1, false);
				});
			}

			reset(th_1);
			template_effect(() => set_class(th_1, (get$2(field).hideOnMobile ? " is-hidden-touch" : "") + (get$2(field).sortable ? " is-clickable" : "")));
			append($$anchor, th_1);
		});

		reset(tr);
		reset(thead);

		var tbody = sibling(thead);

		each(tbody, 21, items, (item) => item._id, ($$anchor, item) => {
			NotTableRow($$anchor, {
				get id() {
					return $$props.id;
				},
				get item() {
					return get$2(item);
				},
				get fields() {
					return fields();
				},
				get helpers() {
					return helpers();
				},
				get showSelect() {
					return showSelect();
				},
				get getItemId() {
					return getItemId();
				},
				$$events: {
					rowSelectChange($$arg) {
						bubble_event.call(this, $$props, $$arg);
					}
				}
			});
		});

		reset(tbody);
		reset(table);

		var node_10 = sibling(table, 2);

		{
			var consequent_8 = ($$anchor) => {
				var nav = root_11$1();
				var a = child(nav);

				a.__click = [goPrev, dispatch];

				var a_1 = sibling(a, 2);

				a_1.__click = [goNext, dispatch];

				var ul = sibling(a_1, 2);
				var node_11 = child(ul);

				{
					var consequent_7 = ($$anchor) => {
						var fragment_6 = comment();
						var node_12 = first_child(fragment_6);

						each(node_12, 17, () => state().pagination.pages.list, index$d, ($$anchor, page) => {
							var li = root_13();
							var node_13 = child(li);

							{
								var consequent_6 = ($$anchor) => {
									var a_2 = root_14$1();
									var text_1 = child(a_2, true);

									reset(a_2);

									template_effect(() => {
										set_attribute(a_2, "aria-label", `Страница ${get$2(page).index ?? ""}`);
										set_text(text_1, get$2(page).index + 1);
									});

									append($$anchor, a_2);
								};

								var alternate_2 = ($$anchor) => {
									var a_3 = root_15$1();

									a_3.__click = [goTo, dispatch];

									var text_2 = child(a_3, true);

									reset(a_3);

									template_effect(() => {
										set_attribute(a_3, "aria-label", `Страница ${get$2(page).index ?? ""}`);
										set_attribute(a_3, "data-page", get$2(page).index);
										set_text(text_2, get$2(page).index + 1);
									});

									append($$anchor, a_3);
								};

								if_block(node_13, ($$render) => {
									if (get$2(page).active) $$render(consequent_6); else $$render(alternate_2, false);
								});
							}

							reset(li);
							append($$anchor, li);
						});

						append($$anchor, fragment_6);
					};

					if_block(node_11, ($$render) => {
						if (state().pagination && state().pagination.pages && state().pagination.pages.list) $$render(consequent_7);
					});
				}

				reset(ul);
				reset(nav);
				append($$anchor, nav);
			};

			if_block(node_10, ($$render) => {
				if (state()?.pagination?.pages?.list.length > 1) $$render(consequent_8);
			});
		}

		append($$anchor, fragment);
		pop();
	}

	delegate(["input", "change", "click"]);

	const CONST_ID_DUBLICATE_POSTFIX = "__dublicate__";
	const OPT_DEFAULT_PAGE_SIZE = 20,
	  OPT_DEFAULT_PAGE_NUMBER = 0,
	  OPT_DEFAULT_PAGE_RANGE = 6,
	  OPT_DEFAULT_SORT_DIRECTION = 1,
	  OPT_DEFAULT_SEARCH = "",
	  OPT_DEFAULT_RETURN = {},
	  OPT_DEFAULT_COMBINED = false,
	  OPT_DEFAULT_COMBINED_ACTION = "listAndCount",
	  OPT_DEFAULT_COUNT_ACTION = "count",
	  OPT_DEFAULT_LIST_ACTION = "list",
	  OPT_DEFAULT_SORT_FIELD = "_id",
	  OPT_FIELD_NAME_PRE_PROC = "preprocessor";
	const DEFAULT_OPTIONS = {
	  ui: NotTable,
	  links: [],
	  actions: [],
	  endless: false,
	  idField: "_id",
	  getItemId: function (item) {
	    return item._id;
	  }
	};
	let notTable = /*#__PURE__*/function (_EventEmitter) {
	  function notTable(input = {}) {
	    var _this;
	    _classCallCheck(this, notTable);
	    _this = _callSuper(this, notTable);
	    _this.id = "table-" + Math.random();
	    _this.options = {
	      ...DEFAULT_OPTIONS,
	      ...(input.options ? input.options : {})
	    };
	    _this.ui = {};
	    _this.data = {
	      raw: [],
	      filtered: [],
	      refined: [],
	      selected: {}
	    };
	    _this.state = {
	      pagination: {
	        items: {
	          count: 0,
	          from: 0,
	          to: 0
	        },
	        pages: {
	          count: 0,
	          from: 0,
	          to: 0,
	          current: 0,
	          list: []
	        }
	      }
	    };
	    _this.working = {};
	    _this.stores = create(_this.id, {
	      raw: [],
	      filtered: [],
	      refined: [],
	      selected: {},
	      state: _this.state,
	      working: _this.working
	    });
	    _this.stores.working.subscribe(_this.onWorkingUpdate.bind(_this));
	    //полученные из сети
	    _this.stores.raw.subscribe(_this.onRawUpdate.bind(_this));
	    //применены фильтры, сортировки и т.д.
	    _this.stores.filtered.subscribe(_this.onFilteredUpdate.bind(_this));
	    //урезаны до минимального набора, точно соотвествующего табличному формату
	    _this.stores.refined.subscribe(_this.onRefinedUpdate.bind(_this));
	    //словарь с идентификаторами выбранных строк
	    _this.stores.selected.subscribe(_this.onSelectedUpdate.bind(_this));
	    //pagination, items information
	    _this.stores.state.subscribe(_this.onStateUpdate.bind(_this));
	    if (notCommon$1.objHas(input, "data") && Array.isArray(input.data)) {
	      _this.stores.raw.update(function (val) {
	        val = input.data;
	        return val;
	      });
	    }
	    _this.setCombinedActionName(_this.getOptions("interface.combinedAction", OPT_DEFAULT_COMBINED_ACTION));
	    if (notCommon$1.objHas(_this.options, "filter")) {
	      _this.setFilter(_this.options.filter, true);
	    } else {
	      _this.resetFilter();
	    }
	    if (notCommon$1.objHas(_this.options, "pager")) {
	      _this.setPager(_this.options.pager, true);
	    } else {
	      _this.resetPager();
	    }
	    if (notCommon$1.objHas(_this.options, "sorter")) {
	      _this.setSorter(_this.options.sorter, true);
	    } else {
	      _this.resetSorter(true);
	    }
	    if (notCommon$1.objHas(_this.options, "return")) {
	      _this.setReturn(_this.options.return);
	    } else {
	      _this.setReturn();
	    }
	    if (notCommon$1.objHas(_this.options, "search")) {
	      _this.setSearch(_this.options.search, true);
	    } else {
	      _this.setSearch();
	    }
	    _this.render();
	    _this.updateData();
	    return _possibleConstructorReturn(_this, _this);
	  }
	  _inherits(notTable, _EventEmitter);
	  return _createClass(notTable, [{
	    key: "onWorkingUpdate",
	    value: function onWorkingUpdate(val) {
	      this.working = val;
	      return val;
	    }
	  }, {
	    key: "onRawUpdate",
	    value: function onRawUpdate(val) {
	      this.data.raw = val;
	      return val;
	    }
	  }, {
	    key: "onFilteredUpdate",
	    value: function onFilteredUpdate(val) {
	      this.data.filtered = val;
	      this.refineFiltered();
	      return val;
	    }
	  }, {
	    key: "onRefinedUpdate",
	    value: function onRefinedUpdate(val) {
	      this.data.refined = val;
	      this.clearSelected();
	      return val;
	    }
	  }, {
	    key: "onStateUpdate",
	    value: function onStateUpdate(val) {
	      this.state = val;
	      return val;
	    }
	  }, {
	    key: "onSearchChange",
	    value: function onSearchChange(line) {
	      if (line.length > 3) {
	        this.setSearch(line);
	      } else {
	        this.setSearch();
	      }
	    }
	  }, {
	    key: "onSorterChange",
	    value: function onSorterChange(sorter) {
	      if (sorter) {
	        this.setSorter(sorter);
	      } else {
	        this.resetSorter();
	      }
	    }
	  }, {
	    key: "onFilterChange",
	    value: function onFilterChange({
	      filter,
	      actionName
	    }) {
	      if (actionName.indexOf(OPT_DEFAULT_COMBINED_ACTION) === 0) {
	        this.setCombinedActionName(actionName);
	      }
	      if (filter) {
	        this.setFilter(filter);
	      } else {
	        this.resetFilter();
	      }
	    }
	  }, {
	    key: "onSelectedUpdate",
	    value: function onSelectedUpdate(val) {
	      this.data.selected = val;
	    }
	  }, {
	    key: "clearSelected",
	    value: function clearSelected() {
	      this.data.selected = {};
	    }
	  }, {
	    key: "getSelected",
	    value: function getSelected(object = false, store = "refined") {
	      let res = [];
	      for (let id in this.data.selected) {
	        if (this.data.selected[id]) {
	          if (object) {
	            let indx = this.data[store].findIndex(function (item) {
	              return item._id === id;
	            });
	            if (indx > -1) {
	              res.push(this.data[store][indx]);
	            }
	          } else {
	            res.push(id);
	          }
	        }
	      }
	      return res;
	    }
	  }, {
	    key: "getItemId",
	    value: function getItemId(item) {
	      return this.getOptions("getItemId", DEFAULT_OPTIONS.getItemId)(item);
	    }
	  }, {
	    key: "selectAll",
	    value: function selectAll() {
	      var _this2 = this;
	      this.stores.selected.update(function () {
	        let value = {};
	        _this2.data.filtered.forEach(function (item) {
	          value[_this2.getItemId(item)] = true;
	        });
	        return value;
	      });
	    }
	  }, {
	    key: "selectNone",
	    value: function selectNone() {
	      var _this3 = this;
	      this.stores.selected.update(function () {
	        let value = {};
	        _this3.data.filtered.forEach(function (item) {
	          value[_this3.getItemId(item)] = false;
	        });
	        return value;
	      });
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      var _this4 = this;
	      if (!this.ui.table) {
	        this.ui.table = new this.options.ui({
	          target: this.options.targetEl,
	          props: {
	            filterUI: this.getOptions("filterUI", undefined),
	            id: this.id,
	            helpers: Object.assign({}, this.getHelpers()),
	            fields: this.getOptions("fields"),
	            actions: this.getActions(),
	            links: this.getLinks(),
	            search: "",
	            showSelect: this.getOptions("showSelect"),
	            showSearch: this.getOptions("showSearch"),
	            showSort: this.getOptions("showSort"),
	            idField: this.getOptions("idField"),
	            getItemId: this.getOptions("getItemId"),
	            filter: this.getFilter()
	          }
	        });
	      }
	      this.ui.table.$on("searchChange", function (e) {
	        return _this4.onSearchChange(e.detail);
	      });
	      this.ui.table.$on("sorterChange", function (e) {
	        return _this4.onSorterChange(e.detail);
	      });
	      this.ui.table.$on("filterChange", function (e) {
	        return _this4.onFilterChange(e.detail);
	      });
	      this.ui.table.$on("goToPage", function (e) {
	        return _this4.goToPage(e.detail);
	      });
	      this.ui.table.$on("goToNextPage", function () {
	        return _this4.goToNext();
	      });
	      this.ui.table.$on("goToPrevPage", function () {
	        return _this4.goToPrev();
	      });
	    }
	  }, {
	    key: "getActions",
	    value: function getActions() {
	      return this.getOptions("actions", []);
	    }
	  }, {
	    key: "getLinks",
	    value: function getLinks() {
	      return this.getOptions("links", []);
	    }
	  }, {
	    key: "getHelpers",
	    value: function getHelpers() {
	      return this.options.helpers || {};
	    }
	  }, {
	    key: "setWorking",
	    value: function setWorking(key, value) {
	      var _this5 = this;
	      this.stores.working.update(function (val) {
	        notPath.set(key, val, _this5.getHelpers(), value);
	        return val;
	      });
	      return this;
	    }
	  }, {
	    key: "getWorking",
	    value: function getWorking(key, def) {
	      let res = notPath.get(key, this.working, this.getHelpers());
	      if (res === undefined) {
	        return def;
	      } else {
	        return res;
	      }
	    }
	  }, {
	    key: "setState",
	    value: function setState(key, value) {
	      var _this6 = this;
	      this.stores.state.update(function (val) {
	        notPath.set(key, val, _this6.getHelpers(), value);
	        return val;
	      });
	      return this;
	    }
	  }, {
	    key: "getState",
	    value: function getState(key, def) {
	      let res = notPath.get(key, this.state, this.getHelpers());
	      if (res === undefined) {
	        return def;
	      } else {
	        return res;
	      }
	    }
	  }, {
	    key: "setOptions",
	    value: function setOptions(key, value) {
	      notPath.set(key, this.options, this.getHelpers(), value);
	      return this;
	    }
	  }, {
	    key: "getOptions",
	    value: function getOptions(key, def) {
	      let res = notPath.get(key, this.options, this.getHelpers());
	      if (res === undefined) {
	        return def;
	      } else {
	        return res;
	      }
	    }
	  }, {
	    key: "setFilter",
	    value: function setFilter(hash, withoutInvalidation = false) {
	      this.setState("filter", hash);
	      if (withoutInvalidation) {
	        return this;
	      }
	      this.invalidateData();
	      this.updateData();
	      return this;
	    }
	  }, {
	    key: "resetFilter",
	    value: function resetFilter() {
	      this.setState("filter", {});
	      return this;
	    }
	  }, {
	    key: "getFilter",
	    value: function getFilter() {
	      return this.getState("filter");
	    }
	  }, {
	    key: "setPager",
	    value: function setPager(hash, withoutInvalidation = false) {
	      this.setState("pager", hash);
	      if (withoutInvalidation) {
	        return this;
	      }
	      this.updateData();
	      return this;
	    }
	  }, {
	    key: "getDefaultPageNumber",
	    value: function getDefaultPageNumber() {
	      return isNaN(this.getOptions("pager.page")) ? OPT_DEFAULT_PAGE_NUMBER : this.getOptions("pager.page");
	    }
	  }, {
	    key: "getDefaultPageSize",
	    value: function getDefaultPageSize() {
	      return isNaN(this.getOptions("pager.size")) ? OPT_DEFAULT_PAGE_SIZE : this.getOptions("pager.size");
	    }
	  }, {
	    key: "resetPager",
	    value: function resetPager() {
	      this.setState("pager", {
	        size: this.getDefaultPageSize(),
	        page: this.getDefaultPageNumber()
	      });
	    }
	  }, {
	    key: "getPager",
	    value: function getPager() {
	      return this.getState("pager");
	    }
	  }, {
	    key: "setSorter",
	    value: function setSorter(hash, withoutInvalidation = false) {
	      this.setWorking("sorter", hash);
	      if (withoutInvalidation) {
	        return this;
	      }
	      this.invalidateData();
	      this.updateData();
	      return this;
	    }
	  }, {
	    key: "resetSorter",
	    value: function resetSorter(withoutInvalidation = false) {
	      let t = {};
	      t[OPT_DEFAULT_SORT_FIELD] = OPT_DEFAULT_SORT_DIRECTION;
	      return this.setSorter(t, withoutInvalidation);
	    }
	  }, {
	    key: "getSorter",
	    value: function getSorter() {
	      return this.getWorking("sorter");
	    }
	  }, {
	    key: "getSorterDirection",
	    value: function getSorterDirection() {
	      try {
	        let names = Object.keys(this.getSorter());
	        return this.getSorter()[names[0]];
	      } catch {
	        return OPT_DEFAULT_SORT_DIRECTION;
	      }
	    }
	  }, {
	    key: "getSearch",
	    value: function getSearch() {
	      let search = typeof this.getWorking("search") !== "undefined" && this.getWorking("search") !== null;
	      return search ? this.getWorking("search") : "";
	    }
	  }, {
	    key: "setSearch",
	    value: function setSearch(line = OPT_DEFAULT_SEARCH, withoutInvalidation = false) {
	      this.setWorking("search", line);
	      if (withoutInvalidation) {
	        return this;
	      }
	      this.invalidateData();
	      this.updateData();
	      return this;
	    }
	  }, {
	    key: "getReturn",
	    value: function getReturn() {
	      return this.getWorking("return");
	    }
	  }, {
	    key: "setReturn",
	    value: function setReturn(ret = OPT_DEFAULT_RETURN) {
	      this.setWorking("return", ret);
	      return this;
	    }
	  }, {
	    key: "clearFilteredData",
	    value: function clearFilteredData() {
	      this.stores.filtered.update(function (val) {
	        val.splice(0, val.length);
	        return val;
	      });
	    }
	  }, {
	    key: "clearRawData",
	    value: function clearRawData() {
	      this.stores.raw.update(function (val) {
	        val.splice(0, val.length);
	        return val;
	      });
	    }
	  }, {
	    key: "clearRefinedData",
	    value: function clearRefinedData() {
	      this.stores.refined.update(function (val) {
	        val.splice(0, val.length);
	        return val;
	      });
	    }
	  }, {
	    key: "invalidateData",
	    value: function invalidateData() {
	      //clearing filtered and sorted
	      this.clearFilteredData();
	      //in case live loading from server
	      if (this.isLive()) {
	        //clearing loaded data
	        this.clearRawData();
	      }
	      //resset pager anyway
	      this.resetPager();
	    }
	  }, {
	    key: "isLive",
	    value: function isLive() {
	      return this.getOptions("interface") && this.getOptions("interface.factory");
	    }
	  }, {
	    key: "setUpdating",
	    value: function setUpdating() {
	      this.setState("updating", true);
	    }
	  }, {
	    key: "setUpdated",
	    value: function setUpdated() {
	      this.setState("updating", false);
	    }
	  }, {
	    key: "ifUpdating",
	    value: function ifUpdating() {
	      return this.getState("updating");
	    }
	  }, {
	    key: "getDataInterface",
	    value: function getDataInterface() {
	      let factory = this.getOptions("interface.factory");
	      if (typeof factory === "function") {
	        return factory({});
	      } else {
	        return factory;
	      }
	    }
	  }, {
	    key: "getLoadDataActionName",
	    value: function getLoadDataActionName() {
	      return this.getOptions("interface.listAction") ? this.getOptions("interface.listAction") : OPT_DEFAULT_LIST_ACTION;
	    }
	  }, {
	    key: "setCombinedActionName",
	    value: function setCombinedActionName(actionName = OPT_DEFAULT_COUNT_ACTION) {
	      this.setWorking("interface.combinedAction", actionName);
	    }
	  }, {
	    key: "getCombinedActionName",
	    value: function getCombinedActionName() {
	      return this.getWorking("interface.combinedAction") ? this.getWorking("interface.combinedAction") : OPT_DEFAULT_COMBINED_ACTION;
	    }
	  }, {
	    key: "getCountActionName",
	    value: function getCountActionName() {
	      return this.getOptions("interface.countAction") ? this.getOptions("interface.countAction") : OPT_DEFAULT_COUNT_ACTION;
	    }
	  }, {
	    key: "loadData",
	    value: function loadData() {
	      //load from server
	      let query = this.getDataInterface().setFilter(this.getFilter()).setSorter(this.getSorter()).setReturn(this.getReturn()).setSearch(this.getSearch()).setPager(this.getPager()),
	        actionName;
	      if (this.getOptions("interface.combined", OPT_DEFAULT_COMBINED)) {
	        actionName = this.getCombinedActionName();
	      } else {
	        actionName = this.getLoadDataActionName();
	      }
	      return query["$" + actionName]();
	    }
	  }, {
	    key: "goToNext",
	    value: function goToNext() {
	      let next = isNaN(this.getState("pager.page")) ? this.getDefaultPageNumber() : this.getState("pager.page") + 1;
	      this.setState("pager.page", Math.min(next, this.getState("pagination.pages.to")));
	      this.updateData();
	    }
	  }, {
	    key: "goToPrev",
	    value: function goToPrev() {
	      let prev = isNaN(this.getState("pager.page")) ? this.getDefaultPageNumber() : this.getState("pager.page") - 1;
	      this.setState("pager.page", Math.max(prev, this.getState("pagination.pages.from")));
	      this.updateData();
	    }
	  }, {
	    key: "goToFirst",
	    value: function goToFirst() {
	      this.setState("pager.page", this.getState("pagination.pages.from"));
	      this.updateData();
	    }
	  }, {
	    key: "goToLast",
	    value: function goToLast() {
	      this.setState("pager.page", this.getState("pagination.pages.to"));
	      this.updateData();
	    }
	  }, {
	    key: "goToPage",
	    value: function goToPage(pageNumber) {
	      this.setState("pager.page", pageNumber);
	      this.updateData();
	    }
	  }, {
	    key: "testDataItem",
	    value: function testDataItem(item) {
	      var strValue = this.getSearch().toLowerCase();
	      for (var k in item) {
	        var toComp = item[k].toString().toLowerCase();
	        if (toComp.indexOf(strValue) > -1) {
	          return true;
	        }
	      }
	      return false;
	    }
	  }, {
	    key: "getRowsCount",
	    value: function getRowsCount() {
	      var _this7 = this;
	      let query = this.getDataInterface().setFilter(this.getFilter());
	      return query["$" + this.getCountActionName()]().then(function (data) {
	        _this7.updatePagination(data.count);
	      }).catch(function (e) {
	        _this7.error(e);
	      });
	    }
	  }, {
	    key: "updatePagination",
	    value: function updatePagination(itemsCount) {
	      var _this8 = this;
	      this.log("update pagination", itemsCount);
	      this.state.pagination.pages.list.splice(0, this.state.pagination.pages.list.length);
	      let itemsFrom = (this.getPager().page - OPT_DEFAULT_PAGE_NUMBER) * this.getPager().size + 1,
	        pagesCount = itemsCount % this.getPager().size ? Math.floor(itemsCount / this.getPager().size) + 1 : Math.round(itemsCount / this.getPager().size),
	        pagesFrom = Math.max(OPT_DEFAULT_PAGE_NUMBER, this.getPager().page - OPT_DEFAULT_PAGE_RANGE),
	        pagesTo = Math.min(pagesCount - (1 - OPT_DEFAULT_PAGE_NUMBER), this.getPager().page + OPT_DEFAULT_PAGE_RANGE),
	        list = [],
	        itemsTo = Math.min(itemsFrom + this.getPager().size - 1, itemsCount);
	      for (let t = pagesFrom; t <= pagesTo; t++) {
	        list.push({
	          index: t,
	          active: t === this.getPager().page
	        });
	      }
	      this.stores.state.update(function (val) {
	        _this8.log("update pagination", val);
	        val.pagination.items.count = itemsCount;
	        val.pagination.items.from = itemsFrom;
	        val.pagination.items.to = itemsTo;
	        val.pagination.pages.count = pagesCount;
	        val.pagination.pages.from = pagesFrom;
	        val.pagination.pages.to = pagesTo;
	        val.pagination.pages.current = _this8.getPager().page;
	        val.pagination.pages.list.splice(0, val.pagination.pages.list.length, ...list);
	        return val;
	      });
	    }
	  }, {
	    key: "updateData",
	    value: function updateData() {
	      var _this9 = this;
	      if (this.isLive()) {
	        if (this.ifUpdating()) {
	          return;
	        }
	        if (!this.getOptions("endless", false)) {
	          this.clearRawData();
	        }
	        this.setUpdating();
	        if (this.getOptions("interface.combined", OPT_DEFAULT_COMBINED)) {
	          this.loadData().then(function (data) {
	            let full = notCommon$1.objHas(data, "status") && notCommon$1.objHas(data, "result");
	            _this9.stores.filtered.update(function (val) {
	              if (!_this9.getOptions("endless", false)) {
	                _this9.clearFilteredData();
	              }
	              if (full) {
	                val.push(...data.result.list);
	              } else {
	                if (notCommon$1.objHas(data, "list") && Array.isArray(data.list)) {
	                  val.push(...data.list);
	                } else if (Array.isArray(data)) {
	                  val.push(...data);
	                }
	              }
	              return val;
	            });
	            _this9.setWorking("lastCount", full ? data.result.count : data.count);
	          }).then(function () {
	            _this9.updatePagination(_this9.getWorking("lastCount"));
	          }).catch(this.error.bind(this)).then(this.setUpdated.bind(this));
	        } else {
	          this.loadData().then(function (data) {
	            _this9.stores.filtered.update(function (val) {
	              val.push(...data);
	              return val;
	            });
	          }).then(this.getRowsCount.bind(this)).catch(this.error.bind(this)).then(this.setUpdated.bind(this));
	        }
	      } else {
	        //local magic
	        this.setUpdating();
	        this.processData();
	        this.setUpdated();
	      }
	    }
	  }, {
	    key: "getData",
	    value: function getData() {
	      return this.data;
	    }
	  }, {
	    key: "processData",
	    value: function processData() {
	      var _this10 = this;
	      let thatFilter = this.getFilter();
	      //this.getData('rows').__setPassive;
	      this.log(this.getData());
	      if (typeof thatFilter !== "undefined" && thatFilter !== null && typeof thatFilter.filterSearch !== "undefined" && thatFilter.filterSearch !== null && thatFilter.filterSearch.length > 0) {
	        this.stores.filtered.update(function (val) {
	          val.splice(0, val.length, ..._this10.data.raw.filter(_this10.testDataItem.bind(_this10)));
	          return val;
	        });
	      } else {
	        this.stores.filtered.update(function (val) {
	          val.splice(0, val.length, ..._this10.data.raw);
	          return val;
	        });
	      }
	      ////sorter
	      let thatSorter = this.getSorter();
	      if (typeof thatSorter !== "undefined" && thatSorter !== null) {
	        this.stores.filtered.update(function (val) {
	          val.sort(function (item1, item2) {
	            let t1 = notPath.get(thatSorter.sortByField, item1, {}),
	              t2 = notPath.get(thatSorter.sortByField, item2, {});
	            if (isNaN(t1)) {
	              if (typeof t1 !== "undefined" && typeof t2 !== "undefined" && t1.localeCompare) {
	                return t1.localeCompare() * -thatSorter.sortDirection;
	              } else {
	                return 0;
	              }
	            } else {
	              return (t1 < t2 ? 1 : -1) * thatSorter.sortDirection;
	            }
	          });
	          return val;
	        });
	      }
	    }
	  }, {
	    key: "error",
	    value: function error() {
	      if (this.options.logger) {
	        this.options.logger.error(...arguments);
	      }
	    }
	  }, {
	    key: "log",
	    value: function log() {
	      if (this.options.logger) {
	        this.options.logger.log(...arguments);
	      }
	    }
	  }, {
	    key: "checkFieldsNames",
	    value: function checkFieldsNames() {
	      const fieldId = this.getOptions("idField");
	      const pathId = ":" + fieldId;
	      let fields = this.getOptions("fields", []);
	      fields.forEach(function (field) {
	        if (pathId === field.path) {
	          field.path = field.path + CONST_ID_DUBLICATE_POSTFIX;
	        }
	      });
	    }
	  }, {
	    key: "readFieldValue",
	    value: function readFieldValue(path, item, helpers) {
	      if (path.indexOf(CONST_ID_DUBLICATE_POSTFIX) > -1) {
	        const fieldId = this.getOptions("idField");
	        const pathId = ":" + fieldId;
	        return notPath.get(pathId, item, helpers);
	      } else {
	        return notPath.get(path, item, helpers);
	      }
	    }
	  }, {
	    key: "refineFiltered",
	    value: function refineFiltered() {
	      var _this11 = this;
	      let result = [];
	      this.checkFieldsNames();
	      this.data.filtered.forEach(function (item, index) {
	        let refined = {};
	        if (_this11.getOptions("idField")) {
	          refined[_this11.getOptions("idField")] = item[_this11.getOptions("idField")];
	        }
	        _this11.getOptions("fields", []).forEach(function (field) {
	          let preprocessed = null,
	            val = _this11.readFieldValue(field.path, item, _this11.getOptions("helpers"));
	          if (notCommon$1.objHas(field, OPT_FIELD_NAME_PRE_PROC)) {
	            try {
	              preprocessed = field[OPT_FIELD_NAME_PRE_PROC](val, item, index);
	            } catch (e) {
	              _this11.error("Error while preprocessing cell value", val, item, index);
	              _this11.error(e);
	            }
	            notPath.set(field.path, refined, preprocessed);
	          } else {
	            notPath.set(field.path, refined, val);
	          }
	        });
	        result.push(refined);
	      });
	      this.stores.refined.update(function (val) {
	        val.splice(0, val.length, ...result);
	        return val;
	      });
	    }
	  }, {
	    key: "$destroy",
	    value: function $destroy() {
	      for (let name in this.ui) {
	        this.ui[name].$destroy && this.ui[name].$destroy();
	        delete this.ui[name];
	      }
	    }
	  }]);
	}(EventEmitter);

	var root_1$6 = template(`<!> <!>`, 1);
	var root$7 = template(`<!> <!>`, 1);

	function Ui_action_container($$anchor, $$props) {
		push($$props, true);

		//hidden - no loader
		//container - parent container of form
		let success = state(false);
		let error = state(false);

		/**
		 * @typedef {Object} Props
		 * @property {any} [container]
		 * @property {string} [loaderTitle]
		 * @property {boolean} [loaderActive] - state if form loading
		 * @property {string} [loaderSize] - page - whole page
		 * @property {string} [successTitle]
		 * @property {string} [successMessage]
		 * @property {string} [errorTitle]
		 * @property {string} [errorMessage]
		 */
		/** @type {Props} */
		let container = prop($$props, "container", 19, () => ({})),
			loaderTitle = prop($$props, "loaderTitle", 15, "Отправка данных на сервер"),
			loaderActive = prop($$props, "loaderActive", 15, false),
			loaderSize = prop($$props, "loaderSize", 15, "container"),
			successTitle = prop($$props, "successTitle", 15, "OK"),
			successMessage = prop($$props, "successMessage", 15, ""),
			errorTitle = prop($$props, "errorTitle", 15, "Error"),
			errorMessage = prop($$props, "errorMessage", 15, "");

		function showSuccess(title, message) {
			set(error, false);
			set(success, true);

			if (message != undefined) {
				successMessage(message);
			}

			if (title != undefined) {
				successTitle(title);
			}
		}

		function showError(title, message) {
			set(success, false);
			set(error, true);

			if (message != undefined) {
				errorMessage(message);
			}

			if (title != undefined) {
				errorTitle(title);
			}
		}

		function setLoading() {
			loaderActive(true);
			set(success, false);
			set(error, false);
		}

		function resetLoading() {
			loaderActive(false);
		}

		function hideAll() {
			loaderActive(false);
			set(success, false);
			set(error, false);
		}

		var fragment = root$7();
		var node = first_child(fragment);

		Ui_loader(node, {
			get loading() {
				return loaderActive();
			},
			set loading($$value) {
				loaderActive($$value);
			},
			get title() {
				return loaderTitle();
			},
			set title($$value) {
				loaderTitle($$value);
			},
			get size() {
				return loaderSize();
			},
			set size($$value) {
				loaderSize($$value);
			}
		});

		var node_1 = sibling(node, 2);

		Ui_container(node_1, spread_props(container, {
			children: ($$anchor, $$slotProps) => {
				var fragment_1 = root_1$6();
				var node_2 = first_child(fragment_1);

				{
					var consequent = ($$anchor) => {
						Ui_error($$anchor, {
							get title() {
								return errorTitle();
							},
							set title($$value) {
								errorTitle($$value);
							},
							get message() {
								return errorMessage();
							},
							set message($$value) {
								errorMessage($$value);
							}
						});
					};

					if_block(node_2, ($$render) => {
						if (get$2(error)) $$render(consequent);
					});
				}

				var node_3 = sibling(node_2, 2);

				{
					var consequent_1 = ($$anchor) => {
						Ui_success($$anchor, {
							get title() {
								return successTitle();
							},
							set title($$value) {
								successTitle($$value);
							},
							get message() {
								return successMessage();
							},
							set message($$value) {
								successMessage($$value);
							}
						});
					};

					if_block(node_3, ($$render) => {
						if (get$2(success)) $$render(consequent_1);
					});
				}

				append($$anchor, fragment_1);
			},
			$$slots: { default: true }
		}));

		append($$anchor, fragment);

		return pop({
			showSuccess,
			showError,
			setLoading,
			resetLoading,
			hideAll
		});
	}

	const DEFAULT_CONTAINER_SELECTOR$2 = ".container";
	var _uiComponent$1 = /*#__PURE__*/new WeakMap();
	var _ui = /*#__PURE__*/new WeakMap();
	let notActionUI = /*#__PURE__*/function (_notBase) {
	  function notActionUI({
	    target = null,
	    name = "Default",
	    options = {},
	    working = {},
	    data = {},
	    ui = Ui_action_container //default UI
	  }) {
	    var _this;
	    _classCallCheck(this, notActionUI);
	    _this = _callSuper(this, notActionUI, [{
	      working: {
	        name: `${name}ActionUI`,
	        ...working
	      },
	      options,
	      data
	    }]);
	    //UI renderer component class constructor
	    _classPrivateFieldInitSpec(_this, _uiComponent$1, null);
	    _classPrivateFieldInitSpec(_this, _ui, null);
	    if (target) {
	      _this.setOptions("target", target);
	    }
	    _classPrivateFieldSet2(_uiComponent$1, _this, ui);
	    _this.initUI();
	    return _this;
	  }
	  _inherits(notActionUI, _notBase);
	  return _createClass(notActionUI, [{
	    key: "initUI",
	    value: function initUI() {
	      try {
	        const target = this.getTargetEl();
	        while (target.children.length) target.removeChild(target.firstChild);
	        _classPrivateFieldSet2(_ui, this, new (_classPrivateFieldGet2(_uiComponent$1, this))({
	          target,
	          props: this.getOptions()
	        }));
	      } catch (e) {
	        this.error(e);
	      }
	    }
	  }, {
	    key: "setLoading",
	    value: function setLoading() {
	      this.emit("loading");
	      _classPrivateFieldGet2(_ui, this).setLoading();
	    }
	  }, {
	    key: "resetLoading",
	    value: function resetLoading() {
	      this.emit("loaded");
	      _classPrivateFieldGet2(_ui, this).resetLoading();
	    }
	  }, {
	    key: "destroy",
	    value: function destroy() {
	      this.emit("destroy");
	      if (_classPrivateFieldGet2(_ui, this)) {
	        _classPrivateFieldGet2(_ui, this).$destroy && _classPrivateFieldGet2(_ui, this).$destroy();
	        _classPrivateFieldGet2(_ui, this).destroy && _classPrivateFieldGet2(_ui, this).destroy();
	        _classPrivateFieldSet2(_ui, this, null);
	      }
	      this.setOptions(null);
	      this.setWorking(null);
	      this.setData(null);
	    }
	  }, {
	    key: "processResult",
	    value: function processResult(result) {
	      if (result.status === DEFAULT_STATUS_SUCCESS) {
	        this.setFormSuccess();
	        return true;
	      } else {
	        this.setFormErrors(result);
	        return false;
	      }
	    }

	    /**
	     *   Form validation result
	     **/
	  }, {
	    key: "setFormSuccess",
	    value: function setFormSuccess() {
	      _classPrivateFieldGet2(_ui, this).showSuccess();
	      this.emit("success");
	    }
	  }, {
	    key: "setFormErrors",
	    value: function setFormErrors(result) {
	      const status = {
	        form: [],
	        fields: {}
	      };
	      if (result.message) {
	        status.form.push(result.message);
	      }
	      if (result.errors && Object.keys(result.errors).length > 0) {
	        status.fields = {
	          ...result.errors
	        };
	      }
	      _classPrivateFieldGet2(_ui, this).showError(status);
	      this.emit("error", status);
	    }

	    /***
	     * Redefinable getters
	     **/
	  }, {
	    key: "getTargetEl",
	    value: function getTargetEl() {
	      const targetEl = this.getOptions("target", DEFAULT_CONTAINER_SELECTOR$2);
	      if (targetEl instanceof HTMLElement) {
	        return targetEl;
	      } else if (typeof targetEl === "string") {
	        return document.querySelector(targetEl);
	      } else {
	        throw new Error("ActionUI parent element is not defined");
	      }
	    }
	  }]);
	}(notBase);

	let notFormUtils$1 = /*#__PURE__*/function () {
	  function notFormUtils() {
	    _classCallCheck(this, notFormUtils);
	  }
	  return _createClass(notFormUtils, null, [{
	    key: "addComponent",
	    value: function addComponent(name, value) {
	      COMPONENTS$1.add(name, value);
	    }
	  }, {
	    key: "addVariants",
	    value: function addVariants(name, value) {
	      VARIANTS$1.add(name, value);
	    }
	  }, {
	    key: "addField",
	    value: function addField(name, field) {
	      FIELDS$1.add(name, field);
	    }
	  }, {
	    key: "actionFieldsInit",
	    value: function actionFieldsInit(fieldName, options, data) {
	      var _this = this;
	      if (Array.isArray(fieldName)) {
	        fieldName.forEach(function (subFieldName) {
	          _this.actionFieldsInit(subFieldName, options, data);
	        });
	      } else {
	        if (!notCommon$1.objHas(options, "fields")) {
	          options.fields = {};
	        }
	        if (!notCommon$1.objHas(options.fields, fieldName)) {
	          options.fields[fieldName] = {};
	        }
	        //copying initial data
	        if (typeof data !== "undefined" && data !== null && typeof data[fieldName] !== "undefined" && data[fieldName] !== null) {
	          options.fields[fieldName].value = data[fieldName];
	        }
	      }
	    }
	  }]);
	}();
	_defineProperty(notFormUtils$1, "validator", null);

	const DEFAULT_FIELD = {
	  label: "",
	  placeholder: "",
	  enabled: true,
	  visible: true,
	  required: true,
	  validated: false,
	  valid: false,
	  errors: false
	};

	/**
	 * Creates field manifest
	 * @param {string} type      name/type of the field
	 * @param {Object} mutation  mutation to manifest from library
	 * @param {Object} VARIANTS  store which contains named lists of field value variants
	 * @param {Object} FIELDS    store which contains named lists of field manifests
	 * @return {Object}          field manifest
	 **/
	function fieldInit(type, mutation = {}, VARIANTS, FIELDS) {
	  let field = {
	    ...DEFAULT_FIELD
	  };
	  //getting field core manifest
	  if (FIELDS.contains(type)) {
	    field = {
	      ...field,
	      ...FIELDS.get(type)
	    };
	  }
	  //adding mutations
	  if (mutation) {
	    field = {
	      ...field,
	      ...mutation
	    };
	  }
	  //adding variants list to field from VARIANTS store
	  if (notCommon$1.objHas(field, "variantsSource") && VARIANTS.contains(field.variantsSource)) {
	    field.variants = VARIANTS.get(field.variantsSource);
	  } else {
	    if (!field.variants || field.variants.length === 0) {
	      field.variants = [];
	    }
	  }
	  return field;
	}

	/**
	 * Initialization of form structure object
	 * @param {object}               form          form structure object
	 * @param {string|Array<string>} fieldName     name of the field type if string, array of strings = subform
	 * @param {Object}               VARIANTS      store which contains named lists of field value variants
	 * @param {Object}               FIELDS        store which contains named lists of field manifests
	 * @param {Object}               formFieldsOptions   form wide options
	 * @returns {Object}                           form structure object
	 **/
	function initFormByField(form = {}, fieldName = [], VARIANTS, FIELDS, formFieldsOptions, data) {
	  if (Array.isArray(fieldName)) {
	    fieldName.forEach(function (subFormFieldName) {
	      return initFormByField(form, subFormFieldName, VARIANTS, FIELDS, formFieldsOptions, data);
	    });
	  } else {
	    let opts = {};
	    if (formFieldsOptions && notCommon$1.objHas(formFieldsOptions, "mutations") && notCommon$1.objHas(formFieldsOptions.mutations, fieldName)) {
	      opts = formFieldsOptions.mutations[fieldName]; //option mutation for field
	    }
	    if (data && notCommon$1.objHas(data, fieldName)) {
	      opts.value = data[fieldName];
	    }
	    form[fieldName] = fieldInit(fieldName, opts, VARIANTS, FIELDS);
	    //if form readonly, marking every field as readonly
	    if (formFieldsOptions && formFieldsOptions.readonly) {
	      form[fieldName].readonly = true;
	    }
	  }
	  return form;
	}

	/**
	 *  Marking field as invalid by own validator
	 * @param {Object}           form          form structure object
	 * @param {string}           fieldName     name of the field
	 * @param {any}              value         value of field
	 * @param  {Array<string>}   errors        list of errors
	 * @return {Object}                        form structure object
	 **/
	function setFieldInvalid(form, fieldName, value, errors) {
	  form[fieldName].errors = [...errors];
	  form[fieldName].validated = true;
	  form[fieldName].valid = false;
	  form[fieldName].value = value;
	  return form;
	}

	/**
	 *  Marking field as valid by own validator
	 * @param {Object}           form          form structure object
	 * @param {string}           fieldName     name of the field
	 * @param {any}              value         value of field
	 * @return {Object}                        form structure object
	 **/
	function setFieldValid(form, fieldName, value) {
	  form[fieldName].errors = false;
	  form[fieldName].validated = true;
	  form[fieldName].valid = true;
	  form[fieldName].value = value;
	  for (let fname in form) {
	    if (fname !== fieldName) {
	      if (Array.isArray(form[fname].errors) && form[fname].errors.length === 0) {
	        form[fname].errors = false;
	      }
	      if (form[fname].errors !== false) {
	        break;
	      }
	    }
	  }
	  return form;
	}

	/**
	 * Checks if field has errors
	 * @param {Object}           form          form structure object
	 * @param {string}           fieldName     name of the field
	 * @returns {boolean}                      true - valid, false -invalid
	 **/
	function isFieldValid(form, fieldName) {
	  return !Array.isArray(form[fieldName].errors);
	}

	/**
	 * Form level validator error in this field
	 * @param {Object}           form          form structure object
	 * @param {string}           fieldName     name of the field
	 * @param  {Array<string>}   errors        list of errors
	 * @return {Object}                        form structure object
	 **/
	function setFormFieldInvalid(form, fieldName, errors) {
	  form[fieldName].formErrors = [...errors];
	  form[fieldName].validated = true;
	  form[fieldName].inputStarted = true;
	  form[fieldName].valid = false;
	  form[fieldName].formLevelError = true;
	  return form;
	}
	/**
	 * Form level validator success in this field
	 * @param {Object}           form          form structure object
	 * @param {string}           fieldName     name of the field
	 * @return {Object}                        form structure object
	 **/
	function setFormFieldValid(form, fieldName) {
	  form[fieldName].formErrors = false;
	  form[fieldName].validated = true;
	  form[fieldName].valid = true;
	  form[fieldName].formLevelError = false;
	  return form;
	}

	/**
	 * Updates fields and form error labels
	 * @param {Object}           form                  form structure object
	 * @param {Object}           validationStatus      results of validation
	 **/
	function updateFormValidationStatus({
	  form,
	  formErrors,
	  validationStatus
	} /* FormValidationSession.getCompleteResult() */) {
	  if (Array.isArray(validationStatus.form) && validationStatus.form.length) {
	    formErrors.splice(0, formErrors.length, ...validationStatus.form);
	  } else {
	    formErrors.splice(0, formErrors.length);
	  }
	  if (validationStatus.fields) {
	    for (let fieldName in validationStatus.fields) {
	      if (Array.isArray(validationStatus.fields[fieldName]) && validationStatus.fields[fieldName].length) {
	        setFormFieldInvalid(form, fieldName, validationStatus.fields[fieldName]);
	      } else {
	        setFormFieldValid(form, fieldName);
	      }
	    }
	  }
	}
	function setFieldsVisibility(form, fieldsList, val) {
	  if (Array.isArray(fieldsList)) {
	    Object.keys(form).forEach(function (fieldName) {
	      form[fieldName].visible = fieldsList.includes(fieldName) ? val : !val;
	    });
	    return true;
	  }
	  return false;
	}
	function setFieldValue(form, fieldName, value) {
	  if (notCommon$1.objHas(form, fieldName)) {
	    form[fieldName].value = value;
	    return true;
	  }
	  return false;
	}
	function fieldIsVisibleAndFilled(form, fieldName) {
	  return notCommon$1.objHas(form, fieldName) && form[fieldName].enabled && form[fieldName].visible && typeof form[fieldName].value !== "undefined";
	}
	function collectData(fields, form) {
	  let result = {};
	  fields.flat().forEach(function (fieldName) {
	    if (fieldIsVisibleAndFilled(form, fieldName)) {
	      result[fieldName] = form[fieldName].value;
	    }
	  });
	  return result;
	}
	var FormHelpers = {
	  fieldInit,
	  initFormByField,
	  setFieldInvalid,
	  setFieldValid,
	  isFieldValid,
	  setFormFieldInvalid,
	  setFormFieldValid,
	  updateFormValidationStatus,
	  fieldIsVisibleAndFilled,
	  setFieldsVisibility,
	  setFieldValue,
	  collectData
	};

	var result;
	var hasRequiredResult;

	function requireResult () {
		if (hasRequiredResult) return result;
		hasRequiredResult = 1;
		const emptyFieldsResults = (data) => {
		    return Object.keys(data).reduce((acc, curr) => {
		        acc[curr] = [];
		        return acc;
		    }, {});
		};

		const FIELDS = ["fields", "form"];

		result = class ValidationResult {
		    #clean = true;
		    #result;

		    constructor(result) {
		        this.#result = JSON.parse(JSON.stringify(result));
		        Object.keys(this.#result).forEach((fieldName) => {
		            if (!FIELDS.includes(fieldName)) {
		                delete this.#result[fieldName];
		            }
		        });
		        this.#clean = this.#result.form.errors.length === 0;
		        const list = this.#getFieldsList();
		        for (let fieldName of list) {
		            if (this.isFieldDirty(fieldName)) {
		                this.#clean = false;
		            }
		        }
		    }

		    destroy() {
		        this.#result = undefined;
		    }

		    get clean() {
		        return this.#clean;
		    }

		    static getDefaultResult(data) {
		        return {
		            fields: emptyFieldsResults(data),
		            form: {
		                fields: emptyFieldsResults(data),
		                errors: [],
		                exceptions: [],
		            },
		        };
		    }

		    getReport() {
		        return JSON.parse(JSON.stringify(this.#getCompleteResult()));
		    }

		    getDetailedReport() {
		        if (typeof this.#result === "object") {
		            return JSON.parse(JSON.stringify(this.#result));
		        } else {
		            return undefined;
		        }
		    }

		    isFieldDirty(fieldName) {
		        if (
		            Array.isArray(this.#result.fields[fieldName]) &&
		            this.#result.fields[fieldName].length
		        ) {
		            return true;
		        }
		        if (
		            Array.isArray(this.#result.form.fields[fieldName]) &&
		            this.#result.form.fields[fieldName].length
		        ) {
		            return true;
		        }
		        return false;
		    }

		    getCompleteResultForField(fieldName) {
		        const fieldResult = [];
		        if (Array.isArray(this.#result.fields[fieldName])) {
		            fieldResult.push(...this.#result.fields[fieldName]);
		        }
		        if (Array.isArray(this.#result.form.fields[fieldName])) {
		            fieldResult.push(...this.#result.form.fields[fieldName]);
		        }
		        return fieldResult;
		    }

		    #getCompleteResult() {
		        const resultComplete = {
		            clean: this.#clean,
		            fields: {},
		            form: [],
		        };
		        const list = this.#getFieldsList();
		        for (let fieldName of list) {
		            const errors = this.getCompleteResultForField(fieldName);
		            if (errors.length) {
		                resultComplete.fields[fieldName] = errors;
		            }
		        }
		        resultComplete.form = [...this.#result.form.errors];
		        if (resultComplete.form.length === 0) {
		            delete resultComplete.form;
		        }
		        return resultComplete;
		    }

		    #getFieldsList() {
		        const fields = Object.keys(this.#result.fields);
		        const fieldsInForm = Object.keys(this.#result.form.fields);
		        return [...new Set([...fieldsInForm, ...fields])];
		    }
		};
		return result;
	}

	/**
	*	Template of error.js
	*	For building for specific environment.
	*	Node.js or Browser
	*	@param {string}	env	node|browser in wich env it will be running
	*	@param {string}	url	URL of report collector
	*	@param {string}	key	key to indetificate reporter
	*/

	var error_node;
	var hasRequiredError_node;

	function requireError_node () {
		if (hasRequiredError_node) return error_node;
		hasRequiredError_node = 1;
		/**
		* Error reporting with features, saving browser info, uri and so on.
		* @module not-error/error
		*/
		class notError extends Error {
			constructor(message, options = {}, error = null){
				super(message);
				this.options = options;
				this.adopt(error);
				this.fill();
				this.getTime();
				return this;
			}

			/**
			*	Adopting native error object
			*	@param {Error}	error 	Error object
			*	@return {notError}		chainable
			*/
			adopt(error){
				if(error instanceof Error){
					this.parent = error;
				}
				return this;
			}

			getStack(){
				if(this.parent){
					return this.parent.stack;
				}else {
					return this.stack;
				}
			}

			getDetails(){
				let src = this;
				if(this.parent){
					src = this.parent;
				}
				return {
					columnNumber:    	src.columnNumber,
					fileName:        	src.fileName,
					lineNumber:      	src.lineNumber,
					name:            	src.name,
					message:        	src.message,
					stack:          	src.stack
				};
			}

			/**
			*	Updating this.env.date property
			*	@return  {object}	{timestamp, offset}
			*/
			getTime(){
				let date = new Date();
				this.env.date = {
					timestamp : date.getTime(),
					offset: date.getTimezoneOffset()
				};
				return this.env.date;
			}


			/**
			******************************************************************************************************
			******************************************************************************************************
			***	Node.js Section
			******************************************************************************************************
			******************************************************************************************************
			**/

			/**
			*	Filtering out key by `white` list
			*	@param {object} object hash to be copied according filter `white` list
			*	@param {array} filter array of sting, which represents keys we want to be
			*						copied in resulting object from source
			*	@return {object}		white listed hash
			*/
			filterEnv(object, filter){
				let result = {};
				for(let t of filter){
					if(Object.prototype.hasOwnProperty.call(object, t)){
						result[t] = object[t];
					}
				}
				return result;
			}

			/**
			*	Collecting information specific for Node.js V8
			*	@return {notError}		chainable
			*/
			fill(){
				/**
				*	You want some fields from env but not all, cause there are passwords
				*	from db, api keys and etc
				*/
				this.env = {
					browser: 	false,
					node: 		true,
					versions: Object.assign({}, process.versions),
					vars: 		this.filterEnv(process.env, this.options.whitelist || ['NODE_ENV'])
				};
				return this;
			}


		}


		error_node = notError;
		return error_node;
	}

	var validation_error_node;
	var hasRequiredValidation_error_node;

	function requireValidation_error_node () {
		if (hasRequiredValidation_error_node) return validation_error_node;
		hasRequiredValidation_error_node = 1;
		const notError = requireError_node();


		//reportable
		class notValidationError extends notError{
		  constructor(message, fields = {}, err = null, params = {}){
		    super(message, {fields, params}, err);
		    return this;
		  }

		  /**
		  * Sets hash of fields errors messages for usage in forms
		  *	@return {Object}	hash of field->errors [key:string]: Array<string>
		  **/
		  setFieldsErrors(messages){
		    this.options.fields = messages;
		  }

		  /**
		  * Returns hash of errors
		  *	@return {Object}	hash of field->errors [key:string]: Array<string>
		  **/
		  getFieldsErrors(){
		    return this.options.fields;
		  }

		}


		validation_error_node = notValidationError;
		return validation_error_node;
	}

	/**
	 * Test argument type to be 'function'
	 * @param {any}  func    possible function
	 * @return {boolean}     if this is a function
	 **/

	var common;
	var hasRequiredCommon;

	function requireCommon () {
		if (hasRequiredCommon) return common;
		hasRequiredCommon = 1;
		const isFunc = (func) => {
		    return typeof func === "function";
		};

		/**
		 * Returns true if argument is Async function
		 * @param {function} func  to test
		 * @return {boolean}       if this function is constructed as AsyncFunction
		 **/
		const isAsync = (func) => {
		    return func.constructor.name === "AsyncFunction";
		};

		common = async (proc, params) => {
		    if (isFunc(proc)) {
		        if (isAsync(proc)) {
		            return await proc(...params);
		        } else {
		            return proc(...params);
		        }
		    }
		};
		return common;
	}

	var session;
	var hasRequiredSession;

	function requireSession () {
		if (hasRequiredSession) return session;
		hasRequiredSession = 1;
		const ValidationResult = requireResult();
		const notVaildationError = requireValidation_error_node();
		const executeObjectFunction = requireCommon();

		const ValidationSession = async (validators, data) => {
		    const result = ValidationResult.getDefaultResult(data);
		    await validateFields({ validators, data, result });
		    await validateForm({ validators, data, result });
		    return new ValidationResult(result);
		};

		session = ValidationSession;

		const validateFields = async ({ validators, data, result }) => {
		    for (let t in data) {
		        await validateField(t, data[t], validators, result);
		    }
		};

		const validateField = async (fieldName, value, validators, result) => {
		    const fieldValidators = getFieldValidators(fieldName, validators);
		    return await runFieldValidators(fieldName, value, fieldValidators, result);
		};

		const getFieldValidators = (name, validators) => {
		    return validators && validators.fields && validators.fields[name]
		        ? validators.fields[name]
		        : [];
		};

		const runFieldValidators = async (fieldName, value, validators, result) => {
		    for (let validatorRule of validators) {
		        try {
		            const valid = await executeObjectFunction(
		                validatorRule["validator"],
		                [value]
		            );
		            if (!valid) {
		                setFieldError(fieldName, validatorRule.message, result);
		            }
		        } catch (e) {
		            if (e instanceof notVaildationError || !validatorRule.message) {
		                setFieldError(fieldName, e.message, result);
		            } else {
		                setFieldError(fieldName, validatorRule.message, result);
		            }
		        }
		    }
		};

		const setFieldError = (fieldName, errorMessage, result) => {
		    if (!result.fields[fieldName].includes(errorMessage)) {
		        result.fields[fieldName].push(errorMessage);
		    }
		};

		const validateForm = async ({ validators, data, result }) => {
		    const formValidators = getFormValidators(validators);
		    await runFormValidators(data, formValidators, result);
		};

		const getFormValidators = (validators) => {
		    return validators && validators.form ? validators.form : [];
		};

		const runFormValidators = async (data, formValidators, result) => {
		    for (let validator of formValidators) {
		        try {
		            await validator(data);
		        } catch (e) {
		            if (e && typeof e.getFieldsErrors === "function") {
		                const formErrors = e.getFieldsErrors();
		                Array.isArray(formErrors.form) &&
		                    addFormErrors(formErrors.form, result);
		                formErrors.fields &&
		                    addFormFieldsErrors(formErrors.fields, result);
		            } else {
		                throw e;
		            }
		        }
		    }
		};

		const addFormErrors = (errors, result) => {
		    errors.forEach((error) => {
		        addFormError(error, result);
		    });
		};

		const addFormError = (errorMessage, result) => {
		    if (!result.form.errors.includes(errorMessage)) {
		        result.form.errors.push(errorMessage);
		    }
		};

		const addFormFieldsErrors = (fieldsErrors, result) => {
		    for (let fieldName in fieldsErrors) {
		        addFormFieldErrors(fieldName, fieldsErrors[fieldName], result);
		    }
		};

		const addFormFieldErrors = (fieldName, errorMessages, result) => {
		    errorMessages.forEach((error) => {
		        addFormFieldError(fieldName, error, result);
		    });
		};

		const addFormFieldError = (fieldName, errorMessage, result) => {
		    if (!Array.isArray(result.form.fields[fieldName])) {
		        result.form.fields[fieldName] = [];
		    }
		    if (!result.form.fields[fieldName].includes(errorMessage)) {
		        result.form.fields[fieldName].push(errorMessage);
		    }
		};
		return session;
	}

	var runner_utils;
	var hasRequiredRunner_utils;

	function requireRunner_utils () {
		if (hasRequiredRunner_utils) return runner_utils;
		hasRequiredRunner_utils = 1;
		const composeFieldsValidators = (data, validatorsLib) => {
		    if (validatorsLib && validatorsLib.fields) {
		        const list = Object.keys(data);
		        const result = {};
		        list.forEach((fieldName) => {
		            if (Array.isArray(validatorsLib.fields[fieldName])) {
		                result[fieldName] = validatorsLib.fields[fieldName];
		            }
		        });
		        return result;
		    } else {
		        return {};
		    }
		};

		const composeFormValidators = (name, validatorsLib) => {
		    if (!validatorsLib) return [];
		    if (validatorsLib.forms && Array.isArray(validatorsLib.forms[name])) {
		        return validatorsLib.forms[name];
		    }
		    if (Array.isArray(validatorsLib.form)) {
		        return validatorsLib.form;
		    }
		    return [];
		};

		runner_utils = {
		    composeFieldsValidators,
		    composeFormValidators,
		};
		return runner_utils;
	}

	var runner;
	var hasRequiredRunner;

	function requireRunner () {
		if (hasRequiredRunner) return runner;
		hasRequiredRunner = 1;
		const {
		    composeFieldsValidators,
		    composeFormValidators,
		} = requireRunner_utils();

		const ValidationSession = requireSession();

		/**
		 * Creates validation runner function from provided validation rules lib
		 * @param {object}     validationLib object containing fields validation rules and form specific rules
		 * @returns {function} (data: object, formName: string)=>Promise<ValidationResult>
		 **/
		const ValidationRunner = (validatorsLib) => {
		    /**
		     * Validation session runner
		     * @param {object} data      object to validate
		     * @param {string} formName
		     * @returns {Promise}
		     **/
		    return (data, formName) => {
		        const validators = {
		            //fields specific validators
		            fields: composeFieldsValidators(data, validatorsLib),
		            //form specific validators
		            form: composeFormValidators(formName, validatorsLib),
		        };
		        return ValidationSession(validators, data);
		    };
		};

		runner = ValidationRunner;
		return runner;
	}

	var builder_utils;
	var hasRequiredBuilder_utils;

	function requireBuilder_utils () {
		if (hasRequiredBuilder_utils) return builder_utils;
		hasRequiredBuilder_utils = 1;
		const augmentFieldsValidators = (fieldValidators, getValidatorEnv) => {
		    return fieldValidators.map((fieldRule) =>
		        augmentFieldValidator(fieldRule, getValidatorEnv)
		    );
		};

		const augmentFieldValidator = (rule, getValidatorEnv) => {
		    if (rule.validator && typeof rule.validator === "function") {
		        const ruleValidator = rule.validator;
		        const result = {
		            ...rule,
		        };
		        delete result.validator;
		        result.validator = (val) => ruleValidator(val, getValidatorEnv());
		        return result;
		    }
		    return rule;
		};

		const augmentFormValidators = (rules, getValidatorEnv) => {
		    return rules.map((rule) => augmentFormValidator(rule, getValidatorEnv));
		};

		const augmentFormValidator = (rule, getValidatorEnv) => {
		    return (val) => rule(val, getValidatorEnv());
		};

		builder_utils = {
		    augmentFieldsValidators,
		    augmentFieldValidator,
		    augmentFormValidators,
		    augmentFormValidator,
		};
		return builder_utils;
	}

	var builder;
	var hasRequiredBuilder;

	function requireBuilder () {
		if (hasRequiredBuilder) return builder;
		hasRequiredBuilder = 1;
		const objHas = (obj, name) => {
		    return Object.prototype.hasOwnProperty.call(obj, name);
		};
		const {
		    augmentFieldsValidators,
		    augmentFormValidators,
		} = requireBuilder_utils();

		/**
		 * @typedef   {object}    notValidationSchema
		 * @property  {object}    [fields]
		 * @property  {array}     [form]
		 * @property  {object}    [forms]
		 */

		/**
		 * returns valid empty validation scheme
		 *
		 * @return {notValidationSchema}
		 */
		const emptyScheme = () => {
		    return {
		        fields: {},
		        forms: {},
		    };
		};
		/**
		 *
		 *
		 * @param {object} validators
		 * @param {function} getValidatorEnv
		 * @return {notValidationSchema}
		 */
		const validationBuilder = (validators, getValidatorEnv) => {
		    if (typeof validators === "undefined" || validators === null) {
		        return emptyScheme();
		    }
		    const augmented = {};
		    if (objHas(validators, "fields")) {
		        augmented.fields = transformFieldsValidators(
		            validators.fields,
		            getValidatorEnv
		        );
		    }
		    if (objHas(validators, "forms")) {
		        augmented.forms = transformFormsValidators(
		            validators.forms,
		            getValidatorEnv
		        );
		    } else {
		        if (objHas(validators, "form")) {
		            augmented.form = augmentFormValidators(
		                validators.form,
		                getValidatorEnv
		            );
		        }
		    }
		    return augmented;
		};

		builder = validationBuilder;

		const transformFieldsValidators = (fields, getValidatorEnv) => {
		    const augmented = {};
		    for (let fieldName in fields) {
		        if (Array.isArray(fields[fieldName])) {
		            augmented[fieldName] = augmentFieldsValidators(
		                fields[fieldName],
		                getValidatorEnv
		            );
		        }
		    }
		    return augmented;
		};

		const transformFormsValidators = (formsValidators, getValidatorEnv) => {
		    const augmented = {};
		    for (let formName in formsValidators) {
		        if (Array.isArray(formsValidators[formName])) {
		            augmented[formName] = augmentFormValidators(
		                formsValidators[formName],
		                getValidatorEnv
		            );
		        }
		    }
		    return augmented;
		};
		return builder;
	}

	var src;
	var hasRequiredSrc;

	function requireSrc () {
		if (hasRequiredSrc) return src;
		hasRequiredSrc = 1;
		const Session = requireSession();
		const Runner = requireRunner();
		const Builder = requireBuilder();
		const Result = requireResult();

		src = {
		    name: "not-validation",
		    Session,
		    Runner,
		    Builder,
		    Result,
		};
		return src;
	}

	var srcExports = requireSrc();

	var root_4$4 = template(`<div><div class="field-label is-normal"><!></div> <div class="field-body"></div></div>`);
	var root_7$1 = template(`<!> <!>`, 1);
	var root_6$3 = template(`<div></div>`);

	function Field($$anchor, $$props) {
		push($$props, true);

		/**
		 * @typedef {Object} Props
		 * @property {string} [label]
		 * @property {string} [name]
		 * @property {boolean} [readonly]
		 * @property {boolean} [horizontal]
		 * @property {any} [controls]
		 * @property {import('../../../elements/events.types').UIEventInputChangeCallback} onchange
		 * @property {string} [classes] - field style modification
		 * @property {boolean} [addons] - //addons
		 * @property {boolean} [addonsCentered]
		 * @property {boolean} [addonsRight]
		 * @property {boolean} [grouped] - //group flag
		 * @property {boolean} [groupedMultiline]
		 * @property {boolean} [groupedRight]
		 * @property {boolean} [groupedCentered]
		 */
		/** @type {Props} */
		let label = prop($$props, "label", 3, ""),
			name = prop($$props, "name", 3, "generic field"),
			readonly = prop($$props, "readonly", 3, false),
			horizontal = prop($$props, "horizontal", 3, false),
			controls = prop($$props, "controls", 19, () => []),
			classes = prop($$props, "classes", 3, ""),
			addons = prop($$props, "addons", 3, false),
			addonsCentered = prop($$props, "addonsCentered", 3, false),
			addonsRight = prop($$props, "addonsRight", 3, false),
			grouped = prop($$props, "grouped", 3, false),
			groupedMultiline = prop($$props, "groupedMultiline", 3, false),
			groupedRight = prop($$props, "groupedRight", 3, false),
			groupedCentered = prop($$props, "groupedCentered", 3, false),
			onchange = prop($$props, "onchange", 3, () => true),
			formFieldPrefix = prop($$props, "formFieldPrefix", 3, "form-field-");

		let fieldClasses = state("");
		let hidden = state(false);
		let fieldId = state(undefined);

		onMount(() => {
			set(fieldClasses, get$2(fieldClasses) + (" " + classes()));
			set(fieldClasses, get$2(fieldClasses) + (addons() ? " has-addons " : ""));
			set(fieldClasses, get$2(fieldClasses) + (addonsCentered() ? " has-addons-centered " : ""));
			set(fieldClasses, get$2(fieldClasses) + (addonsRight() ? " has-addons-right " : ""));
			set(fieldClasses, get$2(fieldClasses) + (grouped() ? " is-grouped " : ""));
			set(fieldClasses, get$2(fieldClasses) + (groupedMultiline() ? " is-grouped-multiline " : ""));
			set(fieldClasses, get$2(fieldClasses) + (groupedRight() ? " is-grouped-right " : ""));
			set(fieldClasses, get$2(fieldClasses) + (groupedCentered() ? " is-grouped-centered " : ""));

			if (readonly()) {
				controls().forEach((control) => {
					control.readonly = true;
				});
			}

			let notHidden = controls().filter((control) => control.component !== "UIHidden");

			set(hidden, notHidden.length === 0);

			let tmp = controls().map((itm) => itm.component).join("_");

			set(fieldId, `${formFieldPrefix()}${tmp}-${name()}`);
		});

		var fragment = comment();
		var node = first_child(fragment);

		{
			var consequent = ($$anchor) => {
				var fragment_1 = comment();
				var node_1 = first_child(fragment_1);

				each(node_1, 17, controls, index$d, ($$anchor, control) => {
					var fragment_2 = comment();
					const SvelteComponent = derived(() => COMPONENTS$1.get(get$2(control).component));
					var node_2 = first_child(fragment_2);

					component(node_2, () => get$2(SvelteComponent), ($$anchor, $$component) => {
						$$component($$anchor, spread_props(() => get$2(control), {
							get onchange() {
								return onchange();
							},
							get fieldname() {
								return name();
							}
						}));
					});

					append($$anchor, fragment_2);
				});

				append($$anchor, fragment_1);
			};

			var alternate_1 = ($$anchor) => {
				var fragment_3 = comment();
				var node_3 = first_child(fragment_3);

				{
					var consequent_1 = ($$anchor) => {
						var div = root_4$4();
						var div_1 = child(div);
						var node_4 = child(div_1);
						var label_1 = derived(() => label() || controls()[0].label);

						Ui_label(node_4, {
							get for() {
								return get$2(fieldId);
							},
							get label() {
								return get$2(label_1);
							}
						});

						reset(div_1);

						var div_2 = sibling(div_1, 2);

						each(div_2, 21, controls, index$d, ($$anchor, control) => {
							var fragment_4 = comment();
							const SvelteComponent_1 = derived(() => COMPONENTS$1.get(get$2(control).component));
							var node_5 = first_child(fragment_4);

							component(node_5, () => get$2(SvelteComponent_1), ($$anchor, $$component) => {
								$$component($$anchor, spread_props(() => get$2(control), {
									get onchange() {
										return onchange();
									},
									get fieldname() {
										return name();
									}
								}));
							});

							append($$anchor, fragment_4);
						});

						reset(div_2);
						reset(div);

						template_effect(() => {
							set_class(div, `field is-horizontal ${get$2(fieldClasses) ?? ""} ${get$2(fieldId) ?? ""}`);
							set_attribute(div_2, "id", get$2(fieldId));
						});

						append($$anchor, div);
					};

					var alternate = ($$anchor) => {
						var div_3 = root_6$3();

						each(div_3, 21, controls, index$d, ($$anchor, control) => {
							var fragment_5 = root_7$1();
							const SvelteComponent_2 = derived(() => COMPONENTS$1.get(get$2(control).component));
							var node_6 = first_child(fragment_5);

							Ui_label(node_6, {
								get for() {
									return `form-field-${get$2(control).component ?? ""}-${name() ?? ""}`;
								},
								get label() {
									return get$2(control).label;
								}
							});

							var node_7 = sibling(node_6, 2);

							component(node_7, () => get$2(SvelteComponent_2), ($$anchor, $$component) => {
								$$component($$anchor, spread_props(() => get$2(control), {
									get onchange() {
										return onchange();
									},
									get fieldname() {
										return name();
									}
								}));
							});

							append($$anchor, fragment_5);
						});

						reset(div_3);
						template_effect(() => set_class(div_3, `field ${get$2(fieldClasses) ?? ""} ${get$2(fieldId) ?? ""}`));
						append($$anchor, div_3);
					};

					if_block(
						node_3,
						($$render) => {
							if (horizontal()) $$render(consequent_1); else $$render(alternate, false);
						},
						true
					);
				}

				append($$anchor, fragment_3);
			};

			if_block(node, ($$render) => {
				if (get$2(hidden)) $$render(consequent); else $$render(alternate_1, false);
			});
		}

		append($$anchor, fragment);
		pop();
	}

	function submitForm(e, dispatch, collectData) {
		e && e.preventDefault();
		dispatch("submit", collectData());
		return false;
	}

	function rejectForm(_, dispatch) {
		dispatch("reject");
	}

	var root_1$5 = template(`<div><span class="title"> </span></div>`);
	var root_2$3 = template(`<div class="notification is-success"><h3 class="form-success-message"> </h3></div>`);
	var root_4$3 = template(`<h5 class="title is-5"> </h5>`);
	var root_5$3 = template(`<h6 class="subtitle is-6"> </h6>`);
	var root_7 = template(`<button> </button>`);
	var root_8 = template(`<button> </button>`);
	var root_9 = template(`<div class="edit-form-error notification is-danger"> </div>`);
	var root_6$2 = template(`<div class="buttons is-grouped is-centered"><!> <!></div> <!>`, 1);
	var root_14 = template(`<div><!></div>`);
	var root_15 = template(`<div class="column notification is-danger"> </div>`);
	var root_11 = template(`<div class="columns"></div>`);
	var root_19 = template(`<div class="notification is-danger"> </div>`);
	var root_22 = template(`<span> </span>`);
	var root_21 = template(`<div class="edit-form-error notification is-danger"></div>`);
	var root_23 = template(`<button> </button>`);
	var root_24 = template(`<button> </button>`);
	var root_20 = template(`<!> <div class="buttons is-grouped is-centered"><!> <!></div>`, 1);
	var root_3$4 = template(`<!> <!> <!> <!> <!>`, 1);
	var root$6 = template(`<div class="form-container"><!> <!></div>`);

	function Form($$anchor, $$props) {
		push($$props, true);

		const $$stores = setup_stores();
		const $LOCALE = () => store_get(LOCALE, "$LOCALE", $$stores);
		let dispatch = createEventDispatcher();
		//validation status
		let formErrors = state(proxy([]));
		let formHasErrors = state(false);
		let fieldsHasErrors = state(false);
		let success = state(false);

		//input data
		//form structure object
		//hidden - no loader
		//container - parent container of form
		//fields list structure
		/**
		 * @typedef {Object} Props
		 * @property {any} [form] - {
		[fieldName: string] => description: object
		}
		 * @property {boolean} [loading] - state if form loading
		 * @property {string} [loader] - page - whole page
		 * @property {any} [fields] - each item is a row
		if item is array, then there few fields in a row
		[
		[name, age],
		[email, telephone]
		bio,
		agreed
		]
		 * @property {string} [SUCCESS_TEXT] - form result labels
		 * @property {string} [WAITING_TEXT]
		 * @property {string} [title] - form labels
		 * @property {string} [description]
		 * @property {boolean} [buttonsFirst] - if you want button on top
		 * @property {boolean} [horizontal] - if form fields should have horizontal layout
		 * @property {any} [submit] - buttons labels and availability
		 * @property {any} [cancel]
		 */
		/** @type {Props} */
		let form = prop($$props, "form", 31, () => proxy({})),
			loading = prop($$props, "loading", 15, false),
			loader = prop($$props, "loader", 3, "container"),
			fields = prop($$props, "fields", 19, () => []),
			SUCCESS_TEXT = prop($$props, "SUCCESS_TEXT", 3, "Операция завершена"),
			WAITING_TEXT = prop($$props, "WAITING_TEXT", 3, "Отправка данных на сервер"),
			title = prop($$props, "title", 3, ""),
			description = prop($$props, "description", 3, ""),
			buttonsFirst = prop($$props, "buttonsFirst", 3, false),
			horizontal = prop($$props, "horizontal", 3, false),
			submit = prop($$props, "submit", 19, () => ({ caption: "Отправить", enabled: true })),
			cancel = prop($$props, "cancel", 19, () => ({ caption: "Назад", enabled: true }));

		let formInvalid = derived(() => get$2(formHasErrors) || get$2(fieldsHasErrors));

		function collectData() {
			return FormHelpers.collectData(fields(), form());
		}

		function setFieldInvalid(fieldName, value, errors) {
			form(FormHelpers.setFieldInvalid(form(), fieldName, value, errors));
			set(fieldsHasErrors, true);
		}

		function setFieldValid(fieldName, value) {
			form(FormHelpers.setFieldValid(form(), fieldName, value));
		}

		function isFieldValid(fieldName) {
			return FormHelpers.isFieldValid(form(), fieldName);
		}

		function setFormFieldInvalid(fieldName, errors) {
			form(FormHelpers.setFormFieldInvalid(form(), fieldName, errors));
			dispatch(`field.invalid`, { fieldName });
		}

		function setFormFieldValid(fieldName) {
			form(FormHelpers.setFormFieldValid(form(), fieldName));
			dispatch(`field.valid`, { fieldName });
		}

		function updateFormValidationStatus(
			validationStatus /* FormValidationSession.getCompleteResult() */
		) {
			set(formHasErrors, false);
			set(fieldsHasErrors, false);

			if (Array.isArray(validationStatus.form) && validationStatus.form.length) {
				get$2(formErrors).splice(0, get$2(formErrors).length, ...validationStatus.form);
				set(formHasErrors, true);
			} else {
				get$2(formErrors).splice(0, get$2(formErrors).length);
			}

			set(formErrors, proxy(get$2(formErrors)));

			if (validationStatus.fields) {
				for (let fieldName of Object.keys(form())) {
					if (Array.isArray(validationStatus.fields[fieldName]) && validationStatus.fields[fieldName].length) {
						FormHelpers.setFormFieldInvalid(form(), fieldName, validationStatus.fields[fieldName]);
						set(fieldsHasErrors, true);
					} else {
						FormHelpers.setFormFieldValid(form(), fieldName);
					}
				}
			}
		}

		function showSuccess() {
			set(success, true);
		}

		function setLoading() {
			loading(true);
		}

		function resetLoading() {
			loading(false);
		}

		function setFieldsVisibility(fieldsList, val) {
			if (FormHelpers.setFieldsVisibility(form(), fieldsList, val)) {
				form(form());
			}
		}

		function setVisibleFields(fieldsList) {
			setFieldsVisibility(fieldsList, true);
		}

		function setInvisibleFields(fieldsList) {
			setFieldsVisibility(fieldsList, false);
		}

		function setFieldValue(fieldName, value) {
			if (FormHelpers.setFieldValue(form(), fieldName, value)) {
				onFieldChange({ detail: { field: fieldName, value } });
			}
		}

		function updateField(fieldName, props) {
			form(form()[fieldName] = { ...form()[fieldName], ...props }, true);
			form(form());
		}

		function onFieldChange(ev) {
			let data = ev.detail;

			form(form()[data.field].value = data.value, true);
			form(form());
			dispatch("change", data);
		}

		var div = root$6();
		var node = child(div);

		{
			var consequent = ($$anchor) => {
				var div_1 = root_1$5();
				var span = child(div_1);
				var text = child(span, true);

				reset(span);
				reset(div_1);

				template_effect(() => {
					set_class(div_1, `${(loader() === 'page' ? 'pageloader' : 'containerloader') ?? ""} ${(loading() ? 'is-active' : '') ?? ""}`);
					set_text(text, $LOCALE()[WAITING_TEXT()]);
				});

				append($$anchor, div_1);
			};

			if_block(node, ($$render) => {
				if (loader() !== "hidden") $$render(consequent);
			});
		}

		var node_1 = sibling(node, 2);

		{
			var consequent_1 = ($$anchor) => {
				var div_2 = root_2$3();
				var h3 = child(div_2);
				var text_1 = child(h3, true);

				reset(h3);
				reset(div_2);
				template_effect(() => set_text(text_1, $LOCALE()[SUCCESS_TEXT()]));
				append($$anchor, div_2);
			};

			var alternate_3 = ($$anchor) => {
				var fragment = root_3$4();
				var node_2 = first_child(fragment);

				{
					var consequent_2 = ($$anchor) => {
						var h5 = root_4$3();
						var text_2 = child(h5, true);

						reset(h5);
						template_effect(() => set_text(text_2, $LOCALE()[title()]));
						append($$anchor, h5);
					};

					if_block(node_2, ($$render) => {
						if (title()) $$render(consequent_2);
					});
				}

				var node_3 = sibling(node_2, 2);

				{
					var consequent_3 = ($$anchor) => {
						var h6 = root_5$3();
						var text_3 = child(h6, true);

						reset(h6);
						template_effect(() => set_text(text_3, $LOCALE()[description()]));
						append($$anchor, h6);
					};

					if_block(node_3, ($$render) => {
						if (description()) $$render(consequent_3);
					});
				}

				var node_4 = sibling(node_3, 2);

				{
					var consequent_7 = ($$anchor) => {
						var fragment_1 = root_6$2();
						var div_3 = first_child(fragment_1);
						var node_5 = child(div_3);

						{
							var consequent_4 = ($$anchor) => {
								var button = root_7();

								button.__click = [rejectForm, dispatch];

								var text_4 = child(button, true);

								reset(button);

								template_effect(() => {
									set_class(button, `button is-outlined ${cancel().classes ?? ""}`);
									set_text(text_4, $LOCALE()[cancel().caption]);
								});

								append($$anchor, button);
							};

							if_block(node_5, ($$render) => {
								if (cancel().enabled) $$render(consequent_4);
							});
						}

						var node_6 = sibling(node_5, 2);

						{
							var consequent_5 = ($$anchor) => {
								var button_1 = root_8();

								button_1.__click = [submitForm, dispatch, collectData];

								var text_5 = child(button_1, true);

								reset(button_1);

								template_effect(() => {
									button_1.disabled = get$2(formInvalid);
									set_class(button_1, `button is-primary is-hovered ${submit().classes ?? ""}`);
									set_text(text_5, $LOCALE()[submit().caption]);
								});

								append($$anchor, button_1);
							};

							if_block(node_6, ($$render) => {
								if (submit().enabled) $$render(consequent_5);
							});
						}

						reset(div_3);

						var node_7 = sibling(div_3, 2);

						{
							var consequent_6 = ($$anchor) => {
								var div_4 = root_9();
								var text_6 = child(div_4, true);

								template_effect(() => set_text(text_6, get$2(formErrors).join(", ")));
								reset(div_4);
								append($$anchor, div_4);
							};

							if_block(node_7, ($$render) => {
								if (get$2(formErrors).length > 0) $$render(consequent_6);
							});
						}

						append($$anchor, fragment_1);
					};

					if_block(node_4, ($$render) => {
						if (buttonsFirst()) $$render(consequent_7);
					});
				}

				var node_8 = sibling(node_4, 2);

				each(node_8, 17, fields, index$d, ($$anchor, field) => {
					var fragment_2 = comment();
					var node_9 = first_child(fragment_2);

					{
						var consequent_10 = ($$anchor) => {
							var div_5 = root_11();

							each(div_5, 21, () => get$2(field), index$d, ($$anchor, subfield) => {
								var fragment_3 = comment();
								var node_10 = first_child(fragment_3);

								{
									var consequent_9 = ($$anchor) => {
										var fragment_4 = comment();
										var node_11 = first_child(fragment_4);

										{
											var consequent_8 = ($$anchor) => {
												var div_6 = root_14();
												var node_12 = child(div_6);
												var controls = derived(() => [form()[get$2(subfield)]]);

												Field(node_12, {
													get controls() {
														return get$2(controls);
													},
													get name() {
														return get$2(subfield);
													},
													get horizontal() {
														return horizontal();
													},
													get label() {
														return form()[get$2(subfield)].label;
													},
													$$events: { change: onFieldChange }
												});

												reset(div_6);
												template_effect(() => set_class(div_6, `column ${(form()[get$2(subfield)].fieldSize ? 'is-' + form()[get$2(subfield)].fieldSize : '') ?? ""} `));
												append($$anchor, div_6);
											};

											if_block(node_11, ($$render) => {
												if (form()[get$2(subfield)].visible) $$render(consequent_8);
											});
										}

										append($$anchor, fragment_4);
									};

									var alternate = ($$anchor) => {
										var div_7 = root_15();
										var text_7 = child(div_7);

										reset(div_7);
										template_effect(() => set_text(text_7, `Subfield '${get$2(subfield) ?? ""}' is not registered`));
										append($$anchor, div_7);
									};

									if_block(node_10, ($$render) => {
										if (form()[get$2(subfield)] && form()[get$2(subfield)].component) $$render(consequent_9); else $$render(alternate, false);
									});
								}

								append($$anchor, fragment_3);
							});

							reset(div_5);
							append($$anchor, div_5);
						};

						var alternate_2 = ($$anchor) => {
							var fragment_5 = comment();
							var node_13 = first_child(fragment_5);

							{
								var consequent_12 = ($$anchor) => {
									var fragment_6 = comment();
									var node_14 = first_child(fragment_6);

									{
										var consequent_11 = ($$anchor) => {
											var controls_1 = derived(() => [form()[get$2(field)]]);

											Field($$anchor, {
												get controls() {
													return get$2(controls_1);
												},
												get name() {
													return get$2(field);
												},
												get horizontal() {
													return horizontal();
												},
												get label() {
													return form()[get$2(field)].label;
												},
												$$events: { change: onFieldChange }
											});
										};

										if_block(node_14, ($$render) => {
											if (form()[get$2(field)].visible) $$render(consequent_11);
										});
									}

									append($$anchor, fragment_6);
								};

								var alternate_1 = ($$anchor) => {
									var div_8 = root_19();
									var text_8 = child(div_8);

									reset(div_8);
									template_effect(() => set_text(text_8, `Field '${get$2(field) ?? ""}' is not registered`));
									append($$anchor, div_8);
								};

								if_block(
									node_13,
									($$render) => {
										if (form()[get$2(field)] && form()[get$2(field)].component) $$render(consequent_12); else $$render(alternate_1, false);
									},
									true
								);
							}

							append($$anchor, fragment_5);
						};

						if_block(node_9, ($$render) => {
							if (Array.isArray(get$2(field))) $$render(consequent_10); else $$render(alternate_2, false);
						});
					}

					append($$anchor, fragment_2);
				});

				var node_15 = sibling(node_8, 2);

				{
					var consequent_16 = ($$anchor) => {
						var fragment_8 = root_20();
						var node_16 = first_child(fragment_8);

						{
							var consequent_13 = ($$anchor) => {
								var div_9 = root_21();

								each(div_9, 21, () => get$2(formErrors), index$d, ($$anchor, formError) => {
									var span_1 = root_22();
									var text_9 = child(span_1, true);

									reset(span_1);
									template_effect(() => set_text(text_9, $LOCALE()[get$2(formError)]));
									append($$anchor, span_1);
								});

								reset(div_9);
								append($$anchor, div_9);
							};

							if_block(node_16, ($$render) => {
								if (get$2(formErrors).length > 0) $$render(consequent_13);
							});
						}

						var div_10 = sibling(node_16, 2);
						var node_17 = child(div_10);

						{
							var consequent_14 = ($$anchor) => {
								var button_2 = root_23();

								button_2.__click = [rejectForm, dispatch];

								var text_10 = child(button_2, true);

								reset(button_2);

								template_effect(() => {
									set_class(button_2, `button ${(cancel().classes ? cancel().classes : '') ?? ""}`);
									set_text(text_10, $LOCALE()[cancel().caption]);
								});

								append($$anchor, button_2);
							};

							if_block(node_17, ($$render) => {
								if (cancel().enabled) $$render(consequent_14);
							});
						}

						var node_18 = sibling(node_17, 2);

						{
							var consequent_15 = ($$anchor) => {
								var button_3 = root_24();

								button_3.__click = [submitForm, dispatch, collectData];

								var text_11 = child(button_3, true);

								reset(button_3);

								template_effect(() => {
									button_3.disabled = get$2(formInvalid);
									set_class(button_3, `button is-primary is-hovered ${(submit().classes ? submit().classes : '') ?? ""}`);
									set_text(text_11, $LOCALE()[submit().caption]);
								});

								append($$anchor, button_3);
							};

							if_block(node_18, ($$render) => {
								if (submit().enabled) $$render(consequent_15);
							});
						}

						reset(div_10);
						append($$anchor, fragment_8);
					};

					if_block(node_15, ($$render) => {
						if (!buttonsFirst()) $$render(consequent_16);
					});
				}

				append($$anchor, fragment);
			};

			if_block(node_1, ($$render) => {
				if (get$2(success)) $$render(consequent_1); else $$render(alternate_3, false);
			});
		}

		reset(div);
		append($$anchor, div);

		return pop({
			collectData,
			setFieldInvalid,
			setFieldValid,
			isFieldValid,
			setFormFieldInvalid,
			setFormFieldValid,
			updateFormValidationStatus,
			showSuccess,
			setLoading,
			resetLoading,
			setFieldsVisibility,
			setVisibleFields,
			setInvisibleFields,
			setFieldValue,
			updateField
		});
	}

	delegate(["click"]);

	const DEFAULT_RULES = {
	  notReadonly(v) {
	    return {
	      readonly: !v
	    };
	  },
	  readonly(v) {
	    return {
	      readonly: v
	    };
	  },
	  enable(v) {
	    return {
	      disabled: !v
	    };
	  },
	  disable(v) {
	    return {
	      disabled: v
	    };
	  }
	};
	let notFormRules = /*#__PURE__*/function () {
	  function notFormRules() {
	    _classCallCheck(this, notFormRules);
	  }
	  return _createClass(notFormRules, null, [{
	    key: "add",
	    value: function add(name, func) {
	      if (!notCommon$1.objHas(_assertClassBrand(notFormRules, this, _RULES)._, name)) {
	        _assertClassBrand(notFormRules, this, _RULES)._[name] = func;
	      }
	    }
	  }, {
	    key: "remove",
	    value: function remove(name) {
	      if (notCommon$1.objHas(_assertClassBrand(notFormRules, this, _RULES)._, name) && !Object.keys(DEFAULT_RULES).includes(name)) {
	        delete _assertClassBrand(notFormRules, this, _RULES)._[name];
	      }
	    }
	  }, {
	    key: "exec",
	    value: function exec(rule, master, slaves, value, form) {
	      return _assertClassBrand(notFormRules, this, _RULES)._[rule](value, master, slaves, form);
	    }
	  }]);
	}();
	var _RULES = {
	  _: {
	    ...DEFAULT_RULES
	  }
	};

	const DEFAULT_CONTAINER_SELECTOR$1 = ".form";
	const DEFAULT_ACTION_NAME = "default";
	var _uiComponent = /*#__PURE__*/new WeakMap();
	var _validationRunner = /*#__PURE__*/new WeakMap();
	var _form$1 = /*#__PURE__*/new WeakMap();
	var _action = /*#__PURE__*/new WeakMap();
	var _fields = /*#__PURE__*/new WeakMap();
	var _variants = /*#__PURE__*/new WeakMap();
	var _notForm_brand = /*#__PURE__*/new WeakSet();
	let notForm = /*#__PURE__*/function (_notBase) {
	  //variants for UI

	  function notForm({
	    target = null,
	    name = "Default",
	    options = {},
	    working = {},
	    data: _data = {},
	    ui = Form //default UI
	  }) {
	    var _this;
	    _classCallCheck(this, notForm);
	    _this = _callSuper(this, notForm, [{
	      working: {
	        name: `${name}Form`,
	        ...working
	      },
	      options,
	      data: _data
	    }]);
	    _classPrivateMethodInitSpec(_this, _notForm_brand);
	    //UI renderer component class constructor
	    _classPrivateFieldInitSpec(_this, _uiComponent, null);
	    //form validation
	    _classPrivateFieldInitSpec(_this, _validationRunner, null);
	    //ui component
	    _classPrivateFieldInitSpec(_this, _form$1, null);
	    //model.action
	    _classPrivateFieldInitSpec(_this, _action, DEFAULT_ACTION_NAME);
	    //fields schemas
	    _classPrivateFieldInitSpec(_this, _fields, new Lib());
	    //fields of UI
	    //variants sets for select menus and so on
	    _classPrivateFieldInitSpec(_this, _variants, null);
	    _classPrivateFieldSet2(_variants, _this, new Lib(VARIANTS$1.getContent()));
	    if (target) {
	      _this.setOptions("target", target);
	    }
	    _classPrivateFieldSet2(_uiComponent, _this, ui);
	    if (notCommon$1.objHas(options, "action")) {
	      _classPrivateFieldSet2(_action, _this, options.action);
	    }
	    _this.initForm();
	    return _this;
	  }
	  _inherits(notForm, _notBase);
	  return _createClass(notForm, [{
	    key: "initForm",
	    value: function initForm() {
	      if (this.getOptions("autoInit", true)) {
	        this.initLibs();
	      }
	      if (this.getOptions("autoRender", true)) {
	        this.initUI();
	      }
	    }
	  }, {
	    key: "initLibs",
	    value: function initLibs() {
	      this.initFields();
	      this.initVariants();
	      this.initValidator();
	    }
	  }, {
	    key: "reInit",
	    value: function reInit() {
	      this.initLibs();
	      this.updateUI();
	      this.resetLoading();
	    }
	  }, {
	    key: "initFields",
	    value: function initFields() {
	      const manifest = this.getFormManifest();
	      if (notCommon$1.objHas(manifest, "fields") && _classPrivateFieldGet2(_fields, this).isEmpty()) {
	        _classPrivateFieldGet2(_fields, this).import(manifest.fields); //all fields available in model manifest
	      }
	    }
	  }, {
	    key: "initVariants",
	    value: function initVariants() {
	      if (this.getOptions("variants")) {
	        _classPrivateFieldGet2(_variants, this).import(this.getOptions("variants"));
	      }
	    }

	    //creating validators runner for this specific form
	  }, {
	    key: "initValidator",
	    value: function initValidator() {
	      _classPrivateFieldSet2(_validationRunner, this, srcExports.Runner(this.getFormValidators()));
	    }
	  }, {
	    key: "initUI",
	    value: function initUI() {
	      try {
	        const props = _assertClassBrand(_notForm_brand, this, _getFormProps).call(this, {
	          manifest: this.getFormManifest(),
	          formOptions: this.getFormOptions(),
	          data: this.getFormData(),
	          injectedProps: this.getFormInjectedProps()
	        });
	        const target = this.getFormTargetEl();
	        while (target.children.length) target.removeChild(target.firstChild);
	        _classPrivateFieldSet2(_form$1, this, new (_classPrivateFieldGet2(_uiComponent, this))({
	          target,
	          props
	        }));
	        _assertClassBrand(_notForm_brand, this, _bindUIEvents).call(this);
	        this.validateForm();
	      } catch (e) {
	        this.error(e);
	      }
	    }
	  }, {
	    key: "updateUI",
	    value: function updateUI() {
	      try {
	        const props = _assertClassBrand(_notForm_brand, this, _getFormProps).call(this, {
	          manifest: this.getFormManifest(),
	          formOptions: this.getFormOptions(),
	          data: this.getFormData(),
	          injectedProps: this.getFormInjectedProps()
	        });
	        _classPrivateFieldGet2(_form$1, this).$set(props);
	        this.validateForm();
	      } catch (e) {
	        this.error(e);
	      }
	    }
	  }, {
	    key: "validateForm",
	    value: async function validateForm() {
	      if (this.getOptions("readonly", false)) {
	        return;
	      }
	      try {
	        const validationResult = await _classPrivateFieldGet2(_validationRunner, this).call(this, _classPrivateFieldGet2(_form$1, this).collectData(), this.getFormAction());
	        _classPrivateFieldGet2(_form$1, this).updateFormValidationStatus(validationResult.getReport());
	        if (!validationResult.clean) {
	          this.emit("error", validationResult.getReport());
	        }
	      } catch (e) {
	        const report = {
	          form: [UICommon$1.ERROR_DEFAULT, e.message]
	        };
	        _classPrivateFieldGet2(_form$1, this) && _classPrivateFieldGet2(_form$1, this).updateFormValidationStatus(report);
	        this.emit("error", report);
	        notCommon$1.report(e);
	      }
	    }
	  }, {
	    key: "submit",
	    value: function submit(data) {
	      this.emit("submit", data);
	    }
	  }, {
	    key: "reject",
	    value: function reject() {
	      this.emit("reject");
	    }

	    //binding event to actual UI
	  }, {
	    key: "$on",
	    value: function $on() {
	      if (_classPrivateFieldGet2(_form$1, this)) {
	        _classPrivateFieldGet2(_form$1, this).$on(...arguments);
	      }
	    }
	  }, {
	    key: "setLoading",
	    value: function setLoading() {
	      this.emit("loading");
	      _classPrivateFieldGet2(_form$1, this).setLoading();
	    }
	  }, {
	    key: "resetLoading",
	    value: function resetLoading() {
	      this.emit("loaded");
	      _classPrivateFieldGet2(_form$1, this).resetLoading();
	    }
	  }, {
	    key: "destroy",
	    value: function destroy() {
	      this.emit("destroy");
	      if (_classPrivateFieldGet2(_form$1, this)) {
	        _classPrivateFieldGet2(_form$1, this).$destroy && _classPrivateFieldGet2(_form$1, this).$destroy();
	        _classPrivateFieldGet2(_form$1, this).destroy && _classPrivateFieldGet2(_form$1, this).destroy();
	        _classPrivateFieldSet2(_form$1, this, null);
	      }
	      _classPrivateFieldSet2(_validationRunner, this, null);
	      _classPrivateFieldSet2(_action, this, null);
	      _classPrivateFieldSet2(_fields, this, null);
	      _classPrivateFieldSet2(_variants, this, null);
	      this.setOptions(null);
	      this.setWorking(null);
	      this.setData(null);
	    }
	  }, {
	    key: "getName",
	    value: function getName() {
	      return this.getWorking("name");
	    }
	  }, {
	    key: "getFormAction",
	    value: function getFormAction() {
	      return _classPrivateFieldGet2(_action, this);
	    }
	  }, {
	    key: "setFormAction",
	    value: function setFormAction(val) {
	      if (val && val !== _classPrivateFieldGet2(_action, this)) {
	        _classPrivateFieldSet2(_action, this, val);
	        _classPrivateFieldGet2(_form$1, this) && _classPrivateFieldGet2(_form$1, this).$destroy();
	        this.initForm();
	      }
	    }
	  }, {
	    key: "processResult",
	    value: function processResult(result) {
	      if (result.status === DEFAULT_STATUS_SUCCESS) {
	        this.setFormSuccess();
	        return true;
	      } else {
	        this.setFormErrors(result);
	        return false;
	      }
	    }

	    /**
	     *   Form validation result
	     **/
	  }, {
	    key: "setFormSuccess",
	    value: function setFormSuccess() {
	      _classPrivateFieldGet2(_form$1, this).showSuccess();
	      this.emit("success");
	    }
	  }, {
	    key: "setFormErrors",
	    value: function setFormErrors(result) {
	      if (this.getOptions("readonly", false)) {
	        return;
	      }
	      const status = {
	        form: [],
	        fields: {}
	      };
	      if (result.message) {
	        status.form.push(result.message);
	      }
	      if (result.errors && Object.keys(result.errors).length > 0) {
	        status.fields = {
	          ...result.errors
	        };
	      }
	      _classPrivateFieldGet2(_form$1, this).updateFormValidationStatus(status);
	      this.emit("error", status);
	    }

	    /**
	     * Returns variant by collection name and item id
	     * @param {string}         name  name of the variants collection
	     * @param {string|number}  id    item identificator
	     * @returns {object}             item
	     **/
	  }, {
	    key: "getVariant",
	    value: function getVariant(name, id) {
	      let lib = _classPrivateFieldGet2(_variants, this).get(name);
	      let result = lib.find(function (item) {
	        return item.id === id;
	      });
	      if (result) {
	        return result;
	      }
	      return null;
	    }

	    /***
	     * Redefinable getters
	     **/
	  }, {
	    key: "getFormTargetEl",
	    value: function getFormTargetEl() {
	      const targetEl = this.getOptions("target", DEFAULT_CONTAINER_SELECTOR$1);
	      if (targetEl instanceof HTMLElement) {
	        return targetEl;
	      } else if (typeof targetEl === "string") {
	        return document.querySelector(targetEl);
	      } else {
	        throw new Error("Form parent element is not defined");
	      }
	    }
	  }, {
	    key: "getFormValidators",
	    value: function getFormValidators() {
	      if (this.getOptions("validators")) {
	        return this.getOptions("validators", {});
	      } else {
	        _assertClassBrand(_notForm_brand, this, _missingOverrideWarning).call(this, "validators");
	        return {};
	      }
	    }
	  }, {
	    key: "getFormManifest",
	    value: function getFormManifest() {
	      const modelName = this.getModelName();
	      if (modelName && notCommon$1.getApp()) {
	        return notCommon$1.getApp().getInterfaceManifest(modelName);
	      }
	      if (this.getOptions("manifest", undefined)) {
	        return this.getOptions("manifest", {});
	      } else {
	        _assertClassBrand(_notForm_brand, this, _missingOverrideWarning).call(this, "manifest");
	        return {};
	      }
	    }
	  }, {
	    key: "getFormData",
	    value: function getFormData() {
	      if (this.getData()) {
	        return this.getData();
	      } else {
	        _assertClassBrand(_notForm_brand, this, _missingOverrideWarning).call(this, "data");
	        return {};
	      }
	    }
	  }, {
	    key: "getFormOptions",
	    value: function getFormOptions() {
	      if (this.getOptions("ui", undefined) || this.getOptions("fields", undefined)) {
	        return {
	          ui: this.getOptions("ui", {}),
	          fields: this.getOptions("fields", {})
	        };
	      } else {
	        _assertClassBrand(_notForm_brand, this, _missingOverrideWarning).call(this, "options");
	        return {
	          ui: {},
	          fields: {}
	        };
	      }
	    }
	  }, {
	    key: "getFormInjectedProps",
	    value: function getFormInjectedProps() {
	      return this.getOptions("injected", {});
	    }

	    /**
	     * Override empty message
	     **/
	  }, {
	    key: "collectData",
	    value:
	    /**
	     * Form operations
	     **/
	    function collectData() {
	      if (this.getOptions("readonly", false)) {
	        return this.getData();
	      }
	      const data = _classPrivateFieldGet2(_form$1, this).collectData();
	      this.setData({
	        ...data
	      }); //update in inner store
	      return data;
	    }
	  }, {
	    key: "updateField",
	    value: function updateField(fieldName, props) {
	      _classPrivateFieldGet2(_form$1, this).updateField(fieldName, props);
	    }
	  }, {
	    key: "getModel",
	    value: function getModel(name, data) {
	      if (typeof name === "string") {
	        return this.getInterface(name)(data || {});
	      } else {
	        return this.getInterface()(name || {});
	      }
	    }
	  }, {
	    key: "getInterface",
	    value: function getInterface(name = false) {
	      return notCommon$1.getApp().getInterface(name || this.getModelName());
	    }

	    /**
	     *  Returns current model name
	     *  @return {string}
	     */
	  }, {
	    key: "getModelName",
	    value: function getModelName() {
	      return this.getOptions("model");
	    }
	  }]);
	}(notBase);
	function _bindUIEvents() {
	  var _this2 = this;
	  _classPrivateFieldGet2(_form$1, this).$on("change", function () {
	    return _this2.validateForm();
	  });
	  _classPrivateFieldGet2(_form$1, this).$on("change", function (ev) {
	    _this2.emit("change", ev.detail);
	    _this2.emit(`change.${ev.detail.field}`, ev.detail.value);
	  });
	  _classPrivateFieldGet2(_form$1, this).$on("submit", function (ev) {
	    return _this2.submit(ev.detail);
	  });
	  _classPrivateFieldGet2(_form$1, this).$on("reject", function () {
	    return _this2.reject();
	  });
	  _classPrivateFieldGet2(_form$1, this).$on("error", function ({
	    detail
	  }) {
	    return _this2.emit("error", detail);
	  });
	  _assertClassBrand(_notForm_brand, this, _bindMasterSlaveEvents).call(this);
	}
	function _bindMasterSlaveEvents() {
	  const masters = this.getOptions("masters", false);
	  if (!masters) {
	    return;
	  }
	  for (let master in masters) {
	    const rules = masters[master];
	    for (let ruleName in rules) {
	      const ruleSlaves = rules[ruleName];
	      _assertClassBrand(_notForm_brand, this, _addMasterSlaveEvents).call(this, ruleName, master, ruleSlaves);
	    }
	  }
	}
	function _addMasterSlaveEvents(rule, master, slaves = []) {
	  var _this3 = this;
	  this.on(`change.${master}`, function (value) {
	    _assertClassBrand(_notForm_brand, _this3, _execSlaveRule).call(_this3, rule, master, slaves, value);
	  });
	  this.emit(`change.${master}`, this.getFormData()[master]);
	}
	function _execSlaveRule(rule, master, slaves, value) {
	  var _this4 = this;
	  const cmd = notFormRules.exec(rule, master, slaves, value, this);
	  slaves.forEach(function (slaveField) {
	    _this4.updateField(slaveField, cmd);
	  });
	}
	function _getFormProps({
	  manifest,
	  //model manifest
	  formOptions = {
	    ui: {},
	    fields: {}
	  },
	  //some options
	  data = null,
	  //initial data for form
	  injectedProps = {}
	}) {
	  const action = _classPrivateFieldGet2(_action, this);
	  if (typeof formOptions === "undefined" || formOptions === null) {
	    formOptions = {
	      ui: {},
	      fields: {}
	    };
	  }
	  const form = FormHelpers.initFormByField(
	  //form seed object
	  {},
	  /*
	  Form structure
	  [
	  //each item is line of form
	  //field - field takes whole line of form
	  //[field1, field2] - few fields in one line
	  nameFirst, nameLast
	  [age, country, language],
	  [email, telephone]
	  ]
	  */
	  manifest.actions[action].fields,
	  //form fields structure
	  _classPrivateFieldGet2(_variants, this),
	  //variants library
	  _classPrivateFieldGet2(_fields, this),
	  //fields library
	  formOptions.fields,
	  //form wide fields options
	  data);
	  return {
	    //if no auto init of form structure, set to loading state
	    loading: !this.getOptions("autoInit", true),
	    title: manifest.actions[action].title,
	    description: manifest.actions[action].description,
	    fields: manifest.actions[action].fields,
	    form,
	    //injecting options to UI from top level input
	    ...formOptions.ui,
	    //form UI options
	    ...injectedProps
	  };
	}
	function _missingOverrideWarning(missing) {
	  this.error(`${missing} for ${this.getWorking("name")} form is not defined`);
	}

	var root$5 = template(`<div class="block-container"><div class="form-paper"></div> <!></div>`);

	function Form_set($$anchor, $$props) {
		push($$props, true);

		let dispatch = createEventDispatcher();

		/**
		 * @typedef {Object} Props
		 * @property {string} [name]
		 * @property {boolean} [showModes]
		 * @property {string} [mode]
		 * @property {any} [forms]
		 */
		/** @type {Props} */
		let name = prop($$props, "name", 3, 'default-form'),
			showModes = prop($$props, "showModes", 3, false),
			mode = prop($$props, "mode", 15, 'default'),
			forms = prop($$props, "forms", 19, () => []);

		function setMode(val) {
			mode(val);
			dispatch('mode', val);
			updateModesButtons();
		}

		let FORMS_BUTTONS = state(proxy([]));

		function updateModesButtons() {
			set(FORMS_BUTTONS, proxy(forms().filter((form) => {
				return mode() !== form.mode;
			}).map((form) => {
				return {
					title: form.title,
					outlined: true,
					type: 'link',
					action() {
						setMode(form.mode);
					}
				};
			})));
		}

		onMount(() => {
			updateModesButtons();
		});

		var div = root$5();
		var div_1 = child(div);
		var node = sibling(div_1, 2);

		{
			var consequent = ($$anchor) => {
				Ui_buttons($$anchor, {
					centered: true,
					classes: "mt-4",
					get values() {
						return get$2(FORMS_BUTTONS);
					},
					set values($$value) {
						set(FORMS_BUTTONS, proxy($$value));
					}
				});
			};

			if_block(node, ($$render) => {
				if (showModes()) $$render(consequent);
			});
		}

		reset(div);

		template_effect(() => {
			set_attribute(div, "id", `${name() ?? ""}-form-set`);
			set_attribute(div_1, "id", `${name() ?? ""}-form-set-container`);
		});

		append($$anchor, div);
		pop();
	}

	const DEFAULT_CONTAINER_SELECTOR = ".form-set";
	const DEFAULT_FORM_SET_NAME = "form-set";
	var _formSetComponent = /*#__PURE__*/new WeakMap();
	var _formComponent = /*#__PURE__*/new WeakMap();
	var _form = /*#__PURE__*/new WeakMap();
	var _frame = /*#__PURE__*/new WeakMap();
	var _notFormSet_brand = /*#__PURE__*/new WeakSet();
	let notFormSet = /*#__PURE__*/function (_notBase) {
	  /*
	  new notFormSet({
	  options:{
	    target: el,
	    forms: [{
	      mode: 'form1',
	      title: 'Form 1',
	      form: formConstructor1 //custom constructors
	    },{
	      mode: 'form2',
	      title: 'Form 2',
	      props: {}             //params to create notForm instance
	    },{
	      mode: 'form3',
	      title: 'Form 3',
	      form: formConstructor3 //custom constructors
	    }]
	  }
	  });
	  */

	  function notFormSet({
	    options = {},
	    formComponent = Form,
	    formSetComponent = Form_set
	  }) {
	    var _this;
	    _classCallCheck(this, notFormSet);
	    _this = _callSuper(this, notFormSet, [{
	      options: {
	        name: DEFAULT_FORM_SET_NAME,
	        mode: "default",
	        showModes: true,
	        ...options
	      }
	    }]);
	    _classPrivateMethodInitSpec(_this, _notFormSet_brand);
	    _classPrivateFieldInitSpec(_this, _formSetComponent, null);
	    _classPrivateFieldInitSpec(_this, _formComponent, null);
	    _classPrivateFieldInitSpec(_this, _form, null);
	    _classPrivateFieldInitSpec(_this, _frame, null);
	    _classPrivateFieldSet2(_formComponent, _this, formComponent);
	    _classPrivateFieldSet2(_formSetComponent, _this, formSetComponent);
	    _this.setFormMode(_this.getOptions("mode"));
	    _this.initUI();
	    return _this;
	  }

	  /**
	   * Initalizing form frame mode, with switchers between modes
	   **/
	  _inherits(notFormSet, _notBase);
	  return _createClass(notFormSet, [{
	    key: "initUI",
	    value: function initUI() {
	      var _this2 = this;
	      const target = this.getFrameTargetEl();
	      while (target.children.length) target.removeChild(target.firstChild);
	      _classPrivateFieldSet2(_frame, this, new (_classPrivateFieldGet2(_formSetComponent, this))({
	        target,
	        props: _assertClassBrand(_notFormSet_brand, this, _getFrameProps).call(this)
	      }));
	      _classPrivateFieldGet2(_frame, this).$on("mode", function (ev) {
	        _this2.setFormMode(ev.detail);
	        _this2.updateForm();
	      });
	      this.updateForm();
	    }
	  }, {
	    key: "setFormMode",
	    value: function setFormMode(name) {
	      if (this.isModeExists(name)) {
	        this.setWorking("mode", name);
	      } else {
	        this.setWorking("mode", this.getFirstMode());
	        this.updateFormModeInUI();
	      }
	    }
	  }, {
	    key: "updateFormModeInUI",
	    value: function updateFormModeInUI() {
	      if (_classPrivateFieldGet2(_frame, this) && this.getWorking("mode") !== null) {
	        _classPrivateFieldGet2(_frame, this).$set({
	          mode: this.getWorking("mode")
	        });
	      }
	    }
	  }, {
	    key: "getFormMode",
	    value: function getFormMode() {
	      return this.getWorking("mode");
	    }
	  }, {
	    key: "updateForm",
	    value: function updateForm() {
	      this.destroyForm();
	      if (this.getWorking("mode") !== null) {
	        this.renderForm();
	      }
	    }
	  }, {
	    key: "renderForm",
	    value: function renderForm() {
	      var _this3 = this;
	      const targetEl = this.getFormTargetEl();
	      const formConfig = this.getFormConfig();
	      if (!(targetEl instanceof HTMLElement && formConfig)) {
	        throw new Error("error while form rendering");
	      }
	      const changeMode = function (mode) {
	        _this3.setFormMode(mode);
	        _this3.updateForm();
	      };
	      if (formConfig.form) {
	        while (targetEl.children.length) targetEl.removeChild(targetEl.firstChild);
	        _classPrivateFieldSet2(_form, this, new formConfig.form({
	          options: {
	            target: targetEl,
	            changeMode
	          }
	        }));
	      } else if (formConfig.props) {
	        _classPrivateFieldSet2(_form, this, new (_classPrivateFieldGet2(_formComponent, this))({
	          target: targetEl,
	          ...formConfig.props,
	          changeMode
	        }));
	      }
	    }
	  }, {
	    key: "getFormConfig",
	    value: function getFormConfig() {
	      var _this4 = this;
	      return this.getOptions("forms").find(function (form) {
	        return form.mode === _this4.getFormMode();
	      });
	    }
	  }, {
	    key: "destroyForm",
	    value: function destroyForm() {
	      const containerEl = this.getFormTargetEl();
	      if (containerEl) {
	        while (containerEl.firstChild) {
	          containerEl.removeChild(containerEl.lastChild);
	        }
	      }
	      if (_classPrivateFieldGet2(_form, this) && _classPrivateFieldGet2(_form, this).$destroy) {
	        _classPrivateFieldGet2(_form, this).$destroy();
	      }
	      _classPrivateFieldSet2(_form, this, null);
	    }
	  }, {
	    key: "destroyFrame",
	    value: function destroyFrame() {
	      if (_classPrivateFieldGet2(_frame, this) && _classPrivateFieldGet2(_frame, this).$destroy) {
	        _classPrivateFieldGet2(_frame, this).$destroy();
	      }
	      _classPrivateFieldSet2(_frame, this, null);
	    }
	  }, {
	    key: "isModeExists",
	    value: function isModeExists(mode) {
	      const forms = this.getOptions("forms", []);
	      return forms.some(function (item) {
	        return item.mode === mode;
	      });
	    }
	  }, {
	    key: "getFirstMode",
	    value: function getFirstMode() {
	      const forms = this.getOptions("forms", []);
	      if (forms.length > 0) {
	        return forms[0].mode;
	      }
	      return null;
	    }
	  }, {
	    key: "destroy",
	    value: function destroy() {
	      _classPrivateFieldSet2(_formSetComponent, this, null);
	      _classPrivateFieldSet2(_formComponent, this, null);
	      this.destroyForm();
	      this.destroyFrame();
	      this.setData(null);
	      this.setOptions(null);
	      this.setWorking(null);
	    }
	  }, {
	    key: "getFrameTargetEl",
	    value: function getFrameTargetEl() {
	      const target = this.getOptions("target", DEFAULT_CONTAINER_SELECTOR);
	      if (target instanceof HTMLElement) {
	        return target;
	      } else if (typeof target === "string") {
	        return document.querySelector(target);
	      } else {
	        throw new Error("form set target is not HTMLElement or string");
	      }
	    }
	  }, {
	    key: "getFormTargetEl",
	    value: function getFormTargetEl() {
	      const name = this.getOptions("name", DEFAULT_FORM_SET_NAME);
	      return document.querySelector(`#${name}-form-set-container`);
	    }
	  }]);
	}(notBase);
	function _getFrameProps() {
	  return {
	    showModes: this.getOptions("showModes", true),
	    mode: this.getFormMode(),
	    forms: this.getOptions("forms", []),
	    name: this.getOptions("name", DEFAULT_FORM_SET_NAME)
	  };
	}

	function onClick$5(ev, go) {
		if (typeof go() === 'function') {
			ev.preventDefault();
			go()(ev.currentTarget.dataset.href);
			return false;
		} else {
			return true;
		}
	}

	var root_3$3 = template(`<li class="is-active"><a aria-current="page"> </a></li>`);
	var root_5$2 = template(`<li class="is-plain-crumb"> </li>`);
	var root_6$1 = template(`<li><a> </a></li>`);
	var root_1$4 = template(`<nav class="breadcrumb" aria-label="breadcrumbs"><ul></ul></nav>`);

	function Ui_breadcrumbs($$anchor, $$props) {
		push($$props, true);

		const $$stores = setup_stores();
		const $LOCALE = () => store_get(LOCALE, "$LOCALE", $$stores);

		/**
		 * @typedef {Object} Props
		 * @property {string} [root]
		 * @property {any} [items]
		 * @property {any} [go]
		 */
		/** @type {Props} */
		let root = prop($$props, "root", 3, ''),
			items = prop($$props, "items", 19, () => []),
			go = prop($$props, "go", 3, null);

		var nav = root_1$4();
		var ul = child(nav);

		each(ul, 21, items, index$d, ($$anchor, link, index) => {
			var fragment = comment();
			var node = first_child(fragment);

			{
				var consequent = ($$anchor) => {
					var li = root_3$3();
					var a = child(li);
					var text = child(a, true);

					reset(a);
					reset(li);

					template_effect(() => {
						set_attribute(a, "href", `${root() ?? ""}${get$2(link).url ?? ""}`);
						set_attribute(a, "data-href", get$2(link).url);
						set_text(text, $LOCALE()[get$2(link).title]);
					});

					append($$anchor, li);
				};

				var alternate_1 = ($$anchor) => {
					var fragment_1 = comment();
					var node_1 = first_child(fragment_1);

					{
						var consequent_1 = ($$anchor) => {
							var li_1 = root_5$2();
							var text_1 = child(li_1, true);

							reset(li_1);
							template_effect(() => set_text(text_1, $LOCALE()[get$2(link).title]));
							append($$anchor, li_1);
						};

						var alternate = ($$anchor) => {
							var li_2 = root_6$1();
							var a_1 = child(li_2);

							a_1.__click = [onClick$5, go];

							var text_2 = child(a_1, true);

							reset(a_1);
							reset(li_2);

							template_effect(() => {
								set_attribute(a_1, "href", `${root() ?? ""}${get$2(link).url ?? ""}`);
								set_attribute(a_1, "data-href", get$2(link).url);
								set_text(text_2, $LOCALE()[get$2(link).title]);
							});

							append($$anchor, li_2);
						};

						if_block(node_1, ($$render) => {
							if (get$2(link).url === false) $$render(consequent_1); else $$render(alternate, false);
						});
					}

					append($$anchor, fragment_1);
				};

				if_block(node, ($$render) => {
					if (items().length === index + 1) $$render(consequent); else $$render(alternate_1, false);
				});
			}

			append($$anchor, fragment);
		});

		reset(ul);
		reset(nav);
		append($$anchor, nav);
		pop();
	}

	delegate(["click"]);

	let notBreadcrumbs = /*#__PURE__*/function () {
	  function notBreadcrumbs() {
	    _classCallCheck(this, notBreadcrumbs);
	  }
	  return _createClass(notBreadcrumbs, null, [{
	    key: "render",
	    value: function render({
	      target,
	      root = '',
	      navigate
	    }) {
	      this.remove();
	      if (notBreadcrumbs.UIConstructor) {
	        this.ui = new notBreadcrumbs.UIConstructor({
	          target,
	          props: {
	            items: this.getBreadcrumbs(),
	            root: root,
	            go: navigate
	          }
	        });
	      }
	    }
	  }, {
	    key: "setHead",
	    value: function setHead(head) {
	      this.head.splice(0, this.head.length, ...head);
	      return this;
	    }
	  }, {
	    key: "setTail",
	    value: function setTail(tail) {
	      this.tail.splice(0, this.tail.length, ...tail);
	      return this;
	    }
	  }, {
	    key: "getBreadcrumbs",
	    value: function getBreadcrumbs() {
	      let crumbs = [];
	      crumbs.push(...this.head);
	      crumbs.push(...this.tail);
	      return crumbs;
	    }
	  }, {
	    key: "update",
	    value: function update() {
	      if (this.ui) {
	        this.ui.$set({
	          items: this.getBreadcrumbs()
	        });
	      }
	    }
	  }, {
	    key: "remove",
	    value: function remove() {
	      if (this.ui) {
	        this.ui.$destroy();
	        this.ui = null;
	      }
	      return this;
	    }
	  }]);
	}();
	_defineProperty(notBreadcrumbs, "UIConstructor", null);
	_defineProperty(notBreadcrumbs, "ui", null);
	_defineProperty(notBreadcrumbs, "head", []);
	_defineProperty(notBreadcrumbs, "tail", []);

	notBreadcrumbs.UIConstructor = Ui_breadcrumbs;

	var _Menu;
	let Menu = /*#__PURE__*/function () {
	  function Menu() {
	    _classCallCheck(this, Menu);
	  }
	  return _createClass(Menu, null, [{
	    key: "hide",
	    value: function hide() {}
	  }, {
	    key: "setApp",
	    value: function setApp(app) {
	      if (!this.app) {
	        this.app = app;
	      }
	      return this;
	    }
	  }, {
	    key: "setOptions",
	    value: function setOptions(options) {
	      this.options = {
	        ...this.options,
	        ...options
	      };
	      return this;
	    }
	  }, {
	    key: "getOptionsPathTo",
	    value: function getOptionsPathTo(what) {
	      return `menu.${this.options.type}.${what}`;
	    }
	  }, {
	    key: "isDirectNavigation",
	    value: function isDirectNavigation() {
	      return this.app ? this.app.getOptions(this.getOptionsPathTo("directNavigation"), this.options.directNavigation) : this.options.directNavigation;
	    }
	  }, {
	    key: "getOptions",
	    value: function getOptions() {
	      if (this.app) {
	        return {
	          brand: this.app.getOptions("brand", this.options.brand),
	          items: this.app.getOptions(this.getOptionsPathTo("items"), this.options.items),
	          sections: this.app.getOptions(this.getOptionsPathTo("sections"), this.options.sections),
	          targetSelector: this.app.getOptions(this.getOptionsPathTo("targetSelector"), this.options.targetSelector),
	          toggleSelector: this.app.getOptions(this.getOptionsPathTo("toggleSelector"), this.options.toggleSelector),
	          open: this.app.getOptions(this.getOptionsPathTo("open"), this.options.open),
	          directNavigation: this.app.getOptions(this.getOptionsPathTo("directNavigation"), this.options.directNavigation),
	          root: this.app.getOptions("router.root", this.options.root),
	          navigate: this.options.navigate.bind(this),
	          getComponent: this.getComponent.bind(this)
	        };
	      } else {
	        return this.options;
	      }
	    }
	  }, {
	    key: "getComponent",
	    value: function getComponent(name) {
	      if (COMPONENTS$1.contains(name)) {
	        return COMPONENTS$1.get(name);
	      } else {
	        return false;
	      }
	    }
	  }, {
	    key: "initField",
	    value: function initField(list, fields = []) {
	      var _this = this;
	      list.forEach(function (item) {
	        fields.forEach(function (field) {
	          if (!Object.hasOwn(item, field)) {
	            item[field] = _this.DEFAULT[field];
	          }
	        });
	        if (Object.hasOwn(item, "items")) {
	          _this.initField(item.items, fields);
	        }
	      });
	    }
	  }, {
	    key: "sortList",
	    value: function sortList(list) {
	      var _this2 = this;
	      list.sort(function (item1, item2) {
	        if (Object.hasOwn(item1, "items")) {
	          _this2.sortList(item1.items);
	        }
	        if (Object.hasOwn(item2, "items")) {
	          _this2.sortList(item2.items);
	        }
	        if (item1.priority === item2.priority) {
	          return item1.title > item2.title ? 1 : -1;
	        } else {
	          return item1.priority < item2.priority ? 1 : -1;
	        }
	      });
	    }
	  }, {
	    key: "removeDublicates",
	    value: function removeDublicates(sections) {
	      for (let i = 0; i < sections.length; i++) {
	        let priority = sections[i].priority;
	        sections.filter(function (section) {
	          return section.id === sections[i].id;
	        }).forEach(function (item, indx) {
	          if (indx === 0) {
	            return;
	          }
	          if (item.priority < priority) {
	            priority = item.priority;
	          }
	          sections.splice(sections.indexOf(item), 1);
	        });
	        sections[i].priority = priority;
	      }
	      return sections;
	    }
	  }, {
	    key: "prepareData",
	    value: function prepareData() {
	      let items = [];
	      items.push(...this.getOptions().items);
	      let sections = [];
	      sections.push(...this.getOptions().sections);
	      this.initField(sections, ["priority"]);
	      this.removeDublicates(sections);
	      this.initField(items, ["priority", "section", "type"]);
	      this.sortList(sections);
	      sections.push({
	        id: this.DEFAULT.section,
	        title: this.DEFAULT.sectionTitle
	      });
	      this.sortList(items);
	      this.sections = sections;
	      this.items = items;
	    }
	  }, {
	    key: "remove",
	    value: function remove() {
	      if (this.menu) {
	        this.menu.$destroy();
	        this.menu = null;
	        clearInterval(this.interval);
	      }
	    }
	  }, {
	    key: "updateIndicator",
	    value: function updateIndicator(sectionId, itemId, state) {
	      this.updateSection(sectionId, function (section) {
	        section.indicator.state = state;
	      });
	      this.updateItem(itemId, function (item) {
	        item.indicator.state = state;
	      });
	    }
	  }, {
	    key: "updateTag",
	    value: function updateTag(sectionId, itemId, tag) {
	      this.updateSection(sectionId, function (section) {
	        section.tag = tag;
	      });
	      this.updateItem(itemId, function (item) {
	        item.tag = tag;
	      });
	    }
	  }, {
	    key: "updateSectionTag",
	    value: function updateSectionTag(sectionId, tag) {
	      this.updateSection(sectionId, function (section) {
	        section.tag = {
	          ...section.tag,
	          ...tag
	        };
	      });
	    }
	  }, {
	    key: "updateItemTag",
	    value: function updateItemTag(itemId, tag) {
	      this.updateItem(itemId, function (item) {
	        item.tag = {
	          ...item.tag,
	          ...tag
	        };
	      });
	    }
	  }, {
	    key: "updateSection",
	    value: function updateSection(sectionId, proc) {
	      if (this.sections && sectionId) {
	        for (let section in this.sections) {
	          if (this.sections[section].id !== sectionId) continue;
	          proc(this.sections[section]);
	        }
	        if (this.menu) {
	          this.menu.$set({
	            sections: this.sections
	          });
	        }
	      }
	    }
	  }, {
	    key: "updateSectionItems",
	    value: function updateSectionItems(sectionId, proc) {
	      if (this.sections && sectionId) {
	        let oldList = this.items.filter(function (item) {
	          return item.section === sectionId;
	        });
	        for (let i of oldList) {
	          this.items.splice(this.items.indexOf(i), 1);
	        }
	        this.items.push(...proc(oldList));
	        if (this.menu) {
	          this.menu.$set({
	            items: this.items
	          });
	        }
	      }
	    }
	  }, {
	    key: "updateItem",
	    value: function updateItem(itemId, proc) {
	      if (itemId && this.items) {
	        this.items.forEach(function (item) {
	          if (item.id !== itemId) return;
	          proc(item);
	        });
	        if (this.menu) {
	          this.menu.$set({
	            items: this.items
	          });
	        }
	      }
	    }
	  }, {
	    key: "isTouch",
	    value: function isTouch() {
	      return UICommon$1.isMobile(true);
	    }
	  }, {
	    key: "getSectionComponent",
	    value: function getSectionComponent() {}
	  }]);
	}();
	_Menu = Menu;
	_defineProperty(Menu, "MAX_TOUCH_WIDTH", 1023);
	_defineProperty(Menu, "DEFAULT", {
	  section: "any",
	  sectionTitle: "Меню",
	  priority: 0,
	  //link, button, dropdown, component
	  type: "link",
	  open: false
	});
	/**
	 *
	 * @type {import('../../app.js').default | null}
	 * @static
	 * @memberof Menu
	 */
	_defineProperty(Menu, "app", null);
	_defineProperty(Menu, "directNavigation", false);
	_defineProperty(Menu, "menu", void 0);
	_defineProperty(Menu, "options", {
	  directNavigation: false,
	  navigate: function (urls) {
	    _Menu.hide();
	    if (!_Menu.isDirectNavigation() && _Menu.app) {
	      let func = _Menu.app.getWorking("router");
	      if (func) {
	        return func.navigate(urls.short);
	      }
	    }
	    document.location.assign(urls.full);
	  }
	});
	_defineProperty(Menu, "items", []);
	_defineProperty(Menu, "sections", []);
	_defineProperty(Menu, "location", void 0);
	_defineProperty(Menu, "interval", void 0);

	function onClick$4(ev, onnavigate) {
		ev.preventDefault();

		onnavigate()({
			full: ev.target.getAttribute("href"),
			short: ev.target.dataset.href
		});

		return false;
	}

	var root_2$2 = template(`<li><a> <!> <!></a></li>`);
	var root_5$1 = template(`<li> <!> <!></li>`);

	function Ui_item_without_children($$anchor, $$props) {
		push($$props, true);

		const $$stores = setup_stores();
		const $LOCALE = () => store_get(LOCALE, "$LOCALE", $$stores);

		/**
		 * @typedef {Object} Props
		 * @property {string} [root]
		 * @property {any} [item]
		 */
		/** @type {Props} */
		let root = prop($$props, "root", 3, ""),
			item = prop($$props, "item", 19, () => ({})),
			onnavigate = prop($$props, "onnavigate", 3, () => {});

		var fragment = comment();
		var node = first_child(fragment);

		{
			var consequent_2 = ($$anchor) => {
				var li = root_2$2();
				var a = child(li);

				a.__click = [onClick$4, onnavigate];

				var text = child(a);
				var node_1 = sibling(text);

				{
					var consequent = ($$anchor) => {
						Ui_indicator($$anchor, spread_props(
							{
								get id() {
									return item().id;
								}
							},
							() => item().tag
						));
					};

					if_block(node_1, ($$render) => {
						if (item().tag) $$render(consequent);
					});
				}

				var node_2 = sibling(node_1, 2);

				{
					var consequent_1 = ($$anchor) => {
						Ui_indicator($$anchor, spread_props(
							{
								get id() {
									return item().id;
								}
							},
							() => item().indicator
						));
					};

					if_block(node_2, ($$render) => {
						if (item().indicator) $$render(consequent_1);
					});
				}

				reset(a);
				reset(li);

				template_effect(() => {
					set_class(li, item().classes);
					set_attribute(a, "href", `${root() ?? ""}${item().url ?? ""}`);
					set_attribute(a, "data-href", item().url);
					set_text(text, `${$LOCALE()[item().title] ?? ""} `);
				});

				append($$anchor, li);
			};

			var alternate = ($$anchor) => {
				var li_1 = root_5$1();
				var text_1 = child(li_1);
				var node_3 = sibling(text_1);

				{
					var consequent_3 = ($$anchor) => {
						Ui_indicator($$anchor, spread_props(
							{
								get id() {
									return item().id;
								}
							},
							() => item().tag
						));
					};

					if_block(node_3, ($$render) => {
						if (item().tag) $$render(consequent_3);
					});
				}

				var node_4 = sibling(node_3, 2);

				{
					var consequent_4 = ($$anchor) => {
						Ui_indicator($$anchor, spread_props(
							{
								get id() {
									return item().id;
								}
							},
							() => item().indicator
						));
					};

					if_block(node_4, ($$render) => {
						if (item().indicator) $$render(consequent_4);
					});
				}

				reset(li_1);

				template_effect(() => {
					set_class(li_1, `is-no-follow-subtitle ${item().classes ?? ""}`);
					set_text(text_1, `${$LOCALE()[item().title] ?? ""} `);
				});

				append($$anchor, li_1);
			};

			if_block(node, ($$render) => {
				if (typeof item().url !== "undefined" && item().url !== false) $$render(consequent_2); else $$render(alternate, false);
			});
		}

		append($$anchor, fragment);
		pop();
	}

	delegate(["click"]);

	function onClick$3(e, closed, ontoggle) {
		e && e.preventDefault() && e.stopPropagation();
		closed(!closed());

		if (!ontoggle()(closed())) {
			closed(!closed());
		}

		return false;
	}

	var root$4 = template(`<span class="icon is-small is-toggle-submenu is-pulled-right" role="button" tabindex="0"><i aria-hidden="true"></i></span>`);

	function Ui_trigger($$anchor, $$props) {
		push($$props, true);

		const CLASS_ICON = {
			OPENED: "fa-angle-down",
			CLOSED: "fa-angle-up"
		};

		/**
		 * @typedef {Object} Props
		 * @property {any} [icon_opened]
		 * @property {any} [icon_closed]
		 * @property {boolean} [closed]    returns if we should apply toggle or if false - reject it and toggle backward
		 */
		/** @type {Props} */
		let icon_opened = prop($$props, "icon_opened", 19, () => CLASS_ICON.OPENED),
			icon_closed = prop($$props, "icon_closed", 19, () => CLASS_ICON.CLOSED),
			closed = prop($$props, "closed", 7),
			ontoggle = prop($$props, "ontoggle", 3, () => {
				return true;
			});

		var span = root$4();

		span.__click = [onClick$3, closed, ontoggle];
		span.__keyup = [onClick$3, closed, ontoggle];

		var i = child(span);

		reset(span);
		template_effect(() => set_class(i, `fas ${(closed() ? icon_closed() : icon_opened()) ?? ""}`));
		append($$anchor, span);
		pop();
	}

	delegate(["click", "keyup"]);

	var root_4$2 = template(`<span class="is-no-link"> </span>`);
	var root$3 = template(`<!> <!> <!> <!>`, 1);

	function Ui_item_label($$anchor, $$props) {
		push($$props, true);

		const $$stores = setup_stores();
		const $LOCALE = () => store_get(LOCALE, "$LOCALE", $$stores);
		let item = prop($$props, "item", 19, () => ({}));
		var fragment = root$3();
		var node = first_child(fragment);

		{
			var consequent = ($$anchor) => {
				Ui_icon_font($$anchor, spread_props(() => item().icon));
			};

			var alternate_1 = ($$anchor) => {
				var fragment_2 = comment();
				var node_1 = first_child(fragment_2);

				{
					var consequent_1 = ($$anchor) => {
						var fragment_3 = comment();
						const SvelteComponent = derived(() => COMPONENTS$1.get(item().component));
						var node_2 = first_child(fragment_3);

						component(node_2, () => get$2(SvelteComponent), ($$anchor, $$component) => {
							$$component($$anchor, spread_props(
								{
									get id() {
										return item().id;
									}
								},
								() => item().props
							));
						});

						append($$anchor, fragment_3);
					};

					var alternate = ($$anchor) => {
						var span = root_4$2();
						var text = child(span, true);

						reset(span);
						template_effect(() => set_text(text, $LOCALE()[item().title]));
						append($$anchor, span);
					};

					if_block(
						node_1,
						($$render) => {
							if (item().type === "component" && item().component && COMPONENTS$1.contains(item().component)) $$render(consequent_1); else $$render(alternate, false);
						},
						true
					);
				}

				append($$anchor, fragment_2);
			};

			if_block(node, ($$render) => {
				if (item().icon) $$render(consequent); else $$render(alternate_1, false);
			});
		}

		var node_3 = sibling(node, 2);

		{
			var consequent_2 = ($$anchor) => {
				Ui_tag($$anchor, spread_props(
					{
						get id() {
							return item().id;
						}
					},
					() => item().tag
				));
			};

			if_block(node_3, ($$render) => {
				if (item().tag) $$render(consequent_2);
			});
		}

		var node_4 = sibling(node_3, 2);

		{
			var consequent_3 = ($$anchor) => {
				Ui_indicator($$anchor, spread_props(
					{
						get id() {
							return item().id;
						}
					},
					() => item().indicator
				));
			};

			if_block(node_4, ($$render) => {
				if (item().indicator) $$render(consequent_3);
			});
		}

		var node_5 = sibling(node_4, 2);

		snippet(node_5, () => $$props.children ?? noop);
		append($$anchor, fragment);
		pop();
	}

	function onClick$2(ev, onnavigate) {
		ev.preventDefault();

		onnavigate()({
			full: ev.target.getAttribute("href"),
			short: ev.target.dataset.href
		});

		return false;
	}

	var root_4$1 = template(`<a class="has-subitems"><!></a>`);
	var root_3$2 = template(`<li><!> <!></li>`);
	var root_1$3 = template(`<ul></ul>`);

	function Ui_items_1($$anchor, $$props) {
		push($$props, true);

		/**
		 * @typedef {Object} Props
		 * @property {string} [root]
		 * @property {any} [items]
		 * @property {boolean} [closed]
		 * @property {function} [onnavigate]
		 */
		/** @type {Props} */
		let root = prop($$props, "root", 3, ""),
			items = prop($$props, "items", 19, () => []),
			onnavigate = prop($$props, "onnavigate", 3, () => {});

		const createClosedItemsLib = (lst) => {
			const lib = {};

			lst.forEach((itm, index) => lib[index] = itm.closed);
			return lib;
		};

		let closedChildren = proxy(createClosedItemsLib(items()));
		var ul = root_1$3();

		each(ul, 21, items, index$d, ($$anchor, item, index) => {
			var fragment = comment();
			var node = first_child(fragment);

			{
				var consequent_1 = ($$anchor) => {
					var li = root_3$2();
					var node_1 = child(li);

					{
						var consequent = ($$anchor) => {
							var a = root_4$1();

							a.__click = [onClick$2, onnavigate];

							var node_2 = child(a);

							Ui_item_label(node_2, {
								get item() {
									return get$2(item);
								},
								children: ($$anchor, $$slotProps) => {
									Ui_trigger($$anchor, {
										get closed() {
											return closedChildren[index];
										},
										set closed($$value) {
											closedChildren[index] = $$value;
										}
									});
								},
								$$slots: { default: true }
							});

							reset(a);

							template_effect(() => {
								set_attribute(a, "href", `${root() ?? ""}${get$2(item).url ?? ""}`);
								set_attribute(a, "data-href", get$2(item).url);
							});

							append($$anchor, a);
						};

						var alternate = ($$anchor) => {
							Ui_item_label($$anchor, {
								get item() {
									return get$2(item);
								},
								children: ($$anchor, $$slotProps) => {
									Ui_trigger($$anchor, {
										get closed() {
											return closedChildren[index];
										},
										set closed($$value) {
											closedChildren[index] = $$value;
										}
									});
								},
								$$slots: { default: true }
							});
						};

						if_block(node_1, ($$render) => {
							if (typeof get$2(item).url !== "undefined" && get$2(item).url !== false) $$render(consequent); else $$render(alternate, false);
						});
					}

					var node_3 = sibling(node_1, 2);

					Ui_items_1(node_3, {
						get root() {
							return root();
						},
						get items() {
							return get$2(item).items;
						},
						get onnavigate() {
							return onnavigate();
						},
						get closed() {
							return closedChildren[index];
						},
						set closed($$value) {
							closedChildren[index] = $$value;
						}
					});

					reset(li);
					template_effect(() => set_class(li, `is-no-follow-subtitle ${get$2(item).classes ?? ""}`));
					append($$anchor, li);
				};

				var alternate_1 = ($$anchor) => {
					Ui_item_without_children($$anchor, {
						get root() {
							return root();
						},
						get item() {
							return get$2(item);
						},
						get onnavigate() {
							return onnavigate();
						}
					});
				};

				if_block(node, ($$render) => {
					if (get$2(item).items && get$2(item).items.length) $$render(consequent_1); else $$render(alternate_1, false);
				});
			}

			append($$anchor, fragment);
		});

		reset(ul);
		template_effect(() => set_class(ul, `menu-list ${($$props.closed ? 'is-closed' : '') ?? ""}`));
		append($$anchor, ul);
		pop();
	}

	delegate(["click"]);

	var root_3$1 = template(`<p><!> <!> <!></p>`);
	var root_1$2 = template(`<!> <!>`, 1);

	function Ui_section$1($$anchor, $$props) {
		push($$props, true);

		const $$stores = setup_stores();
		const $LOCALE = () => store_get(LOCALE, "$LOCALE", $$stores);

		/**
		 * @typedef {Object} Props
		 * @property {any}      section
		 * @property {any}      [items]
		 * @property {string}   [root]
		 * @property {function} [onnavigate]
		 */
		/** @type {Props} */
		let items = prop($$props, "items", 19, () => []),
			root = prop($$props, "root", 3, ""),
			onnavigate = prop($$props, "onnavigate", 3, () => {});

		let sectionItems = derived(() => items().filter((item) => $$props.section.id === item.section));
		var fragment = root_1$2();
		var node = first_child(fragment);

		{
			var consequent_4 = ($$anchor) => {
				var fragment_1 = comment();
				var node_1 = first_child(fragment_1);

				{
					var consequent_3 = ($$anchor) => {
						var p = root_3$1();
						var node_2 = child(p);

						{
							var consequent = ($$anchor) => {
								var fragment_2 = comment();
								const SvelteComponent = derived(() => COMPONENTS$1.get($$props.section.component));
								var node_3 = first_child(fragment_2);

								component(node_3, () => get$2(SvelteComponent), ($$anchor, $$component) => {
									$$component($$anchor, spread_props(
										{
											get id() {
												return $$props.section.id;
											}
										},
										() => $$props.section.props
									));
								});

								append($$anchor, fragment_2);
							};

							var alternate = ($$anchor) => {
								var text$1 = text();

								template_effect(() => set_text(text$1, $LOCALE()[$$props.section.title]));
								append($$anchor, text$1);
							};

							if_block(node_2, ($$render) => {
								if ($$props.section.type === "component" && $$props.section.component && COMPONENTS$1.contains($$props.section.component)) $$render(consequent); else $$render(alternate, false);
							});
						}

						var node_4 = sibling(node_2, 2);

						{
							var consequent_1 = ($$anchor) => {
								Ui_indicator($$anchor, spread_props(
									{
										get id() {
											return $$props.section.id;
										}
									},
									() => $$props.section.tag
								));
							};

							if_block(node_4, ($$render) => {
								if ($$props.section.tag) $$render(consequent_1);
							});
						}

						var node_5 = sibling(node_4, 2);

						{
							var consequent_2 = ($$anchor) => {
								Ui_indicator($$anchor, spread_props(
									{
										get id() {
											return $$props.section.id;
										}
									},
									() => $$props.section.indicator
								));
							};

							if_block(node_5, ($$render) => {
								if ($$props.section.indicator) $$render(consequent_2);
							});
						}

						reset(p);
						template_effect(() => set_class(p, `menu-label ${$$props.section.classes ?? ""}`));
						append($$anchor, p);
					};

					if_block(node_1, ($$render) => {
						if (get$2(sectionItems).length || $$props.section.component || $$props.section.tag || $$props.section.indicator) $$render(consequent_3);
					});
				}

				append($$anchor, fragment_1);
			};

			if_block(node, ($$render) => {
				if ($$props.section) $$render(consequent_4);
			});
		}

		var node_6 = sibling(node, 2);

		{
			var consequent_5 = ($$anchor) => {
				Ui_items_1($$anchor, {
					get root() {
						return root();
					},
					get items() {
						return get$2(sectionItems);
					},
					get onnavigate() {
						return onnavigate();
					}
				});
			};

			if_block(node_6, ($$render) => {
				if (get$2(sectionItems).length) $$render(consequent_5);
			});
		}

		append($$anchor, fragment);
		pop();
	}

	function Ui_side_menu($$anchor, $$props) {
		push($$props, true);

		/**
		 * @typedef {Object} Props
		 * @property {string} [root]
		 * @property {any} [items]
		 * @property {any} [sections]
		 * @property {any} [navigate = ()=>undefined]
		 */
		/** @type {Props} */
		let root = prop($$props, "root", 3, ""),
			items = prop($$props, "items", 19, () => []),
			sections = prop($$props, "sections", 19, () => []),
			navigate = prop($$props, "navigate", 3, null);

		function onClick(ev) {
			if (typeof navigate() === "function") {
				navigate()(ev);
			}
		}

		var fragment = comment();
		var node = first_child(fragment);

		each(node, 17, sections, index$d, ($$anchor, section) => {
			Ui_section$1($$anchor, {
				get section() {
					return get$2(section);
				},
				get items() {
					return items();
				},
				get root() {
					return root();
				},
				onnavigate: onClick
			});
		});

		append($$anchor, fragment);
		pop();
	}

	const SideMenuState = writable({
	  open: true
	});

	var _notSideMenu;
	const TYPE$1 = "side";
	let notSideMenu = /*#__PURE__*/function (_Menu) {
	  function notSideMenu() {
	    _classCallCheck(this, notSideMenu);
	    return _callSuper(this, notSideMenu, arguments);
	  }
	  _inherits(notSideMenu, _Menu);
	  return _createClass(notSideMenu, null, [{
	    key: "render",
	    value: function render(app) {
	      if (app) {
	        this.setApp(app);
	      }
	      this.prepareData();
	      if (!this.menu) {
	        this.createUI();
	      }
	    }
	  }, {
	    key: "update",
	    value: function update() {
	      if (this.menu) {
	        this.menu.$destroy();
	        this.createUI();
	      }
	    }
	  }, {
	    key: "createUI",
	    value: function createUI() {
	      let target = document.querySelector(this.getOptions().targetSelector);
	      if (!target) {
	        return;
	      }
	      this.menu = mount(Ui_side_menu, {
	        target,
	        props: {
	          items: this.items,
	          sections: this.sections,
	          root: this.getOptions().root,
	          navigate: this.getOptions().navigate
	        }
	      });
	      this.initSizeResponse();
	      this.interval = setInterval(this.updateMenuActiveItem.bind(this), 200);
	      this.bindToggle();
	    }
	  }, {
	    key: "itemIsActive",
	    value: function itemIsActive(itemURL) {
	      return (this.location + "/").indexOf(itemURL + "/") > -1;
	    }
	  }, {
	    key: "updateMenu",
	    value: function updateMenu() {
	      var _this = this;
	      Array.from(document.querySelectorAll(this.getOptions().targetSelector + " a")).forEach(function (item) {
	        if (_this.itemIsActive(item.getAttribute("href"))) {
	          item.classList.add("is-active");
	        } else {
	          item.classList.remove("is-active");
	        }
	      });
	    }
	  }, {
	    key: "updateMenuActiveItem",
	    value: function updateMenuActiveItem() {
	      let url = window.location.toString(),
	        lastLocation = this.location;
	      if (lastLocation) {
	        if (url !== lastLocation) {
	          this.location = url;
	          this.updateMenu();
	        }
	      } else {
	        this.location = url;
	        this.updateMenu();
	      }
	    }
	  }, {
	    key: "initSizeResponse",
	    value: function initSizeResponse() {
	      this.nav = document.querySelector("nav.navbar");
	      this.aside = document.querySelector("aside");
	      this.main = document.querySelector("main");
	      this.resizeAsideAndMain(this.aside, this.main, this.nav);
	      this.resizeMain(this.main, this.aside);
	      window.addEventListener("resize", this.resizeMain.bind(this));
	      if (this.isTouch()) {
	        if (this.getOptions().open) {
	          this.show();
	        } else {
	          this.hide();
	        }
	      }
	    }
	  }, {
	    key: "resizeMain",
	    value: function resizeMain() {
	      if (this.isTouch()) {
	        if (this.aside.classList.contains("is-active")) {
	          this.main.style.display = "none";
	        } else {
	          this.main.style.display = "block";
	          this.main.style.marginLeft = "0px";
	        }
	      } else {
	        let rect = this.aside.getBoundingClientRect();
	        this.main.style.display = "block";
	        if (this.main.style.height === "0px") {
	          this.main.style.height = "auto";
	        }
	        this.main.style.marginLeft = rect.width + rect.left + "px";
	      }
	    }
	  }, {
	    key: "resizeAside",
	    value: function resizeAside() {
	      if (this.aside.style.display !== "none") {
	        let rect = this.nav.getBoundingClientRect();
	        this.aside.style.height = window.innerHeight - rect.height + "px";
	        this.aside.style.marginTop = rect.height + "px";
	      }
	    }
	  }, {
	    key: "resizeAsideAndMain",
	    value: function resizeAsideAndMain() {
	      let rect = this.nav.getBoundingClientRect();
	      this.aside.style.height = window.innerHeight - rect.height + "px";
	      //this.aside.style.paddingTop = (rect.height) + 'px';
	      //this.main.style.marginTop = (rect.height) + 'px';
	    }
	  }, {
	    key: "bindToggle",
	    value: function bindToggle() {
	      var _this2 = this;
	      let els = document.querySelectorAll(this.getOptions().toggleSelector);
	      Array.from(els).forEach(function (el) {
	        el.removeEventListener("click", _this2.toggle.bind(_this2));
	        el.addEventListener("click", _this2.toggle.bind(_this2));
	      });
	    }
	  }, {
	    key: "toggle",
	    value: function toggle(e) {
	      e && e.preventDefault();
	      if (this.aside) {
	        if (this.isTouch()) {
	          this.aside.classList.toggle("is-active");
	        } else {
	          this.aside.classList.toggle("is-closed");
	        }
	        this.resizeMain();
	      }
	      return false;
	    }
	  }, {
	    key: "hide",
	    value: function hide(e) {
	      e && e.preventDefault();
	      if (this.aside) {
	        if (this.isTouch()) {
	          this.aside.classList.remove("is-active");
	        } else {
	          this.aside.classList.add("is-closed");
	        }
	        this.resizeMain();
	      }
	      SideMenuState.update(function (val) {
	        val.open = false;
	        return val;
	      });
	      return false;
	    }
	  }, {
	    key: "show",
	    value: function show(e) {
	      e && e.preventDefault();
	      if (this.aside) {
	        if (this.isTouch()) {
	          this.aside.classList.add("is-active");
	        } else {
	          this.aside.classList.remove("is-closed");
	        }
	        this.resizeMain();
	      }
	      SideMenuState.update(function (val) {
	        val.open = true;
	        return val;
	      });
	      return false;
	    }
	  }, {
	    key: "isOpen",
	    value: function isOpen() {
	      if (this.aside) {
	        if (this.isTouch()) {
	          return this.aside.classList.contains("is-active");
	        } else {
	          return !this.aside.classList.contains("is-closed");
	        }
	      } else {
	        return true;
	      }
	    }
	  }]);
	}(Menu);
	_notSideMenu = notSideMenu;
	_defineProperty(notSideMenu, "nav", void 0);
	_defineProperty(notSideMenu, "main", void 0);
	_defineProperty(notSideMenu, "aside", void 0);
	_defineProperty(notSideMenu, "DEFAULT", {
	  section: "any",
	  sectionTitle: "Меню",
	  priority: 0,
	  open: true,
	  type: "link"
	});
	_defineProperty(notSideMenu, "options", {
	  directNavigation: false,
	  type: TYPE$1,
	  items: [],
	  sections: [],
	  targetSelector: `#${TYPE$1}-menu`,
	  toggleSelector: `.${TYPE$1}-menu-toggle`,
	  root: "/",
	  open: true,
	  navigate: function (urls) {
	    if (_notSideMenu.isTouch()) {
	      _notSideMenu.hide();
	      _notSideMenu.app && _notSideMenu.app.emit("top-navbar-burger:update", {
	        closed: true
	      });
	    }
	    if (!_notSideMenu.isDirectNavigation() && _notSideMenu.app) {
	      let func = _notSideMenu.app.getWorking("router");
	      if (func) {
	        return func.navigate(urls.short);
	      }
	    }
	    document.location.assign(urls.full);
	  }
	});

	var root$2 = template(`<a class="navbar-item"><!> <!></a>`);

	function Ui_brand($$anchor, $$props) {
		/**
		 * @typedef {Object} Props
		 * @property {string} [url]
		 * @property {string} [title]
		 * @property {any} [icon]
		 */
		/** @type {Props} */
		let url = prop($$props, "url", 3, "/"),
			title = prop($$props, "title", 3, ""),
			icon = prop($$props, "icon", 19, () => ({
				src: "https://via.placeholder.com/56x28",
				width: 28,
				height: 56
			}));

		var a = root$2();
		var node = child(a);

		Ui_icon(node, spread_props(icon));

		var node_1 = sibling(node, 2);

		{
			var consequent = ($$anchor) => {
				var fragment = comment();
				var node_2 = first_child(fragment);

				html(node_2, () => `<span class="navbar-item-brand-title">${title()}</span>`);
				append($$anchor, fragment);
			};

			if_block(node_1, ($$render) => {
				if (title()) $$render(consequent);
			});
		}

		reset(a);
		template_effect(() => set_attribute(a, "href", url()));
		append($$anchor, a);
	}

	var root$1 = template(`<!> <!> <!>`, 1);

	function Ui_item_content($$anchor, $$props) {
		push($$props, true);

		const $$stores = setup_stores();
		const $LOCALE = () => store_get(LOCALE, "$LOCALE", $$stores);
		var fragment = root$1();
		var node = first_child(fragment);

		{
			var consequent = ($$anchor) => {
				Ui_icon($$anchor, spread_props(() => $$props.item.icon));
			};

			var alternate_1 = ($$anchor) => {
				var fragment_2 = comment();
				var node_1 = first_child(fragment_2);

				{
					var consequent_1 = ($$anchor) => {
						var fragment_3 = comment();
						const SvelteComponent = derived(() => COMPONENTS$1.get($$props.item.component));
						var node_2 = first_child(fragment_3);

						component(node_2, () => get$2(SvelteComponent), ($$anchor, $$component) => {
							$$component($$anchor, spread_props(
								{
									get id() {
										return $$props.item.id;
									}
								},
								() => $$props.item.props
							));
						});

						append($$anchor, fragment_3);
					};

					var alternate = ($$anchor) => {
						var text$1 = text();

						template_effect(() => set_text(text$1, $LOCALE()[$$props.item.title]));
						append($$anchor, text$1);
					};

					if_block(
						node_1,
						($$render) => {
							if ($$props.item.type === 'component' && $$props.item.component && COMPONENTS$1.contains($$props.item.component)) $$render(consequent_1); else $$render(alternate, false);
						},
						true
					);
				}

				append($$anchor, fragment_2);
			};

			if_block(node, ($$render) => {
				if ($$props.item.icon) $$render(consequent); else $$render(alternate_1, false);
			});
		}

		var node_3 = sibling(node, 2);

		{
			var consequent_2 = ($$anchor) => {
				Ui_tag($$anchor, spread_props(
					{
						top: true,
						right: true,
						size: "small",
						get id() {
							return $$props.item.id;
						}
					},
					() => $$props.item.tag
				));
			};

			if_block(node_3, ($$render) => {
				if ($$props.item.tag) $$render(consequent_2);
			});
		}

		var node_4 = sibling(node_3, 2);

		{
			var consequent_3 = ($$anchor) => {
				Ui_indicator($$anchor, spread_props(
					{
						get id() {
							return $$props.item.id;
						}
					},
					() => $$props.item.indicator
				));
			};

			if_block(node_4, ($$render) => {
				if ($$props.item.indicator) $$render(consequent_3);
			});
		}

		append($$anchor, fragment);
		pop();
	}

	function onClick$1(event, dispatch, item) {
		dispatch("click", { event, element: item() });
	}

	var root_2$1 = template(`<hr>`);
	var root_3 = template(`<a><!></a>`);
	var root_4 = template(`<div role="button" tabindex="0"><!></div>`);
	var root_1$1 = template(`<!> <!>`, 1);

	function Ui_item($$anchor, $$props) {
		push($$props, true);

		const dispatch = createEventDispatcher();

		/**
		 * @typedef {Object} Props
		 * @property {string} [root]
		 * @property {any} [item]
		 * @property {string} [hidden]
		 * @property {string} [classes]
		 */
		/** @type {Props} */
		let root = prop($$props, "root", 3, ""),
			item = prop($$props, "item", 19, () => ({})),
			hidden = prop($$props, "hidden", 3, ""),
			classes = prop($$props, "classes", 3, "");

		var fragment = root_1$1();
		var node = first_child(fragment);

		{
			var consequent = ($$anchor) => {
				var hr = root_2$1();

				template_effect(() => set_class(hr, `navbar-divider ${(hidden() ? `is-hidden-${hidden()}` : '') ?? ""} `));
				append($$anchor, hr);
			};

			if_block(node, ($$render) => {
				if (item().break) $$render(consequent);
			});
		}

		var node_1 = sibling(node, 2);

		{
			var consequent_1 = ($$anchor) => {
				var a = root_3();

				a.__click = [onClick$1, dispatch, item];

				var node_2 = child(a);

				Ui_item_content(node_2, {
					get item() {
						return item();
					}
				});

				reset(a);

				template_effect(() => {
					set_class(a, `navbar-item ${(hidden() ? `is-hidden-${hidden()}` : '') ?? ""} ${item().classes ?? ""} ${classes() ?? ""} `);
					set_attribute(a, "href", `${root() ?? ""}${item().url ?? ""}`);
					set_attribute(a, "data-href", item().url);
				});

				append($$anchor, a);
			};

			var alternate = ($$anchor) => {
				var div = root_4();

				div.__click = [onClick$1, dispatch, item];
				div.__keyup = [onClick$1, dispatch, item];

				var node_3 = child(div);

				Ui_item_content(node_3, {
					get item() {
						return item();
					}
				});

				reset(div);
				template_effect(() => set_class(div, `navbar-item ${(hidden() ? `is-hidden-${hidden()}` : '') ?? ""} ${item().classes ?? ""} ${classes() ?? ""}`));
				append($$anchor, div);
			};

			if_block(node_1, ($$render) => {
				if (item().url) $$render(consequent_1); else $$render(alternate, false);
			});
		}

		append($$anchor, fragment);
		pop();
	}

	delegate(["click", "keyup"]);

	function onClick(event, dispatch, section) {
		dispatch("click", { event, element: section() });
	}

	var root_2 = template(`<div><a href=""><!></a> <div></div></div>`);
	var root_5 = template(`<a><!></a>`);
	var root_6 = template(`<div role="button" tabindex="0"><!></div>`);

	function Ui_section($$anchor, $$props) {
		push($$props, true);

		const dispatch = createEventDispatcher();

		/**
		 * @typedef {Object} Props
		 * @property {string} [root]
		 * @property {any} [section]
		 * @property {any} [items]
		 * @property {string} [hidden]
		 * @property {boolean} [hoverable]
		 * @property {boolean} [arrowless]
		 * @property {boolean} [right]
		 */
		/** @type {Props} */
		let root = prop($$props, "root", 3, ""),
			section = prop($$props, "section", 19, () => ({})),
			items = prop($$props, "items", 19, () => []),
			hidden = prop($$props, "hidden", 3, ""),
			hoverable = prop($$props, "hoverable", 3, true),
			arrowless = prop($$props, "arrowless", 3, false),
			right = prop($$props, "right", 3, false);

		var fragment = comment();
		var node = first_child(fragment);

		{
			var consequent = ($$anchor) => {
				var div = root_2();
				var a = child(div);

				a.__click = [onClick, dispatch, section];

				var node_1 = child(a);

				Ui_item_content(node_1, {
					get item() {
						return section();
					}
				});

				reset(a);

				var div_1 = sibling(a, 2);

				each(div_1, 21, items, (item) => item.id, ($$anchor, item) => {
					Ui_item($$anchor, {
						get root() {
							return root();
						},
						get item() {
							return get$2(item);
						},
						$$events: {
							click($$arg) {
								bubble_event.call(this, $$props, $$arg);
							}
						}
					});
				});

				reset(div_1);
				reset(div);

				template_effect(() => {
					set_class(div, `navbar-item has-dropdown ${(hoverable() ? 'is-hoverable' : '') ?? ""} ${(hidden() ? `is-hidden-${hidden()}` : '') ?? ""} `);
					set_class(a, `navbar-link ${(arrowless() ? 'is-arrowless' : '') ?? ""}`);
					set_class(div_1, `navbar-dropdown ${(right() ? 'is-right' : '') ?? ""}`);
				});

				append($$anchor, div);
			};

			var alternate_1 = ($$anchor) => {
				var fragment_2 = comment();
				var node_2 = first_child(fragment_2);

				{
					var consequent_1 = ($$anchor) => {
						var a_1 = root_5();

						a_1.__click = [onClick, dispatch, section];

						var node_3 = child(a_1);

						Ui_item_content(node_3, {
							get item() {
								return section();
							}
						});

						reset(a_1);

						template_effect(() => {
							set_class(a_1, `navbar-item ${(hidden() ? `is-hidden-${hidden()}` : '') ?? ""} `);
							set_attribute(a_1, "href", `${root() ?? ""}${section().url ?? ""}`);
							set_attribute(a_1, "data-href", section().url);
						});

						append($$anchor, a_1);
					};

					var alternate = ($$anchor) => {
						var div_2 = root_6();

						div_2.__click = [onClick, dispatch, section];
						div_2.__keyup = [onClick, dispatch, section];

						var node_4 = child(div_2);

						Ui_item_content(node_4, {
							get item() {
								return section();
							}
						});

						reset(div_2);
						template_effect(() => set_class(div_2, `navbar-item ${(hidden() ? `is-hidden-${hidden()}` : '') ?? ""} `));
						append($$anchor, div_2);
					};

					if_block(
						node_2,
						($$render) => {
							if (section().url) $$render(consequent_1); else $$render(alternate, false);
						},
						true
					);
				}

				append($$anchor, fragment_2);
			};

			if_block(node, ($$render) => {
				if (items().length) $$render(consequent); else $$render(alternate_1, false);
			});
		}

		append($$anchor, fragment);
		pop();
	}

	delegate(["click", "keyup"]);

	function toggle(e, closed, dispatch) {
		e.preventDefault();
		closed(!closed());
		dispatch("toggle", { closed: closed() });
		return false;
	}

	var root = template(`<a href="" role="button" aria-label="menu" aria-expanded="false" data-target="navbar"><span aria-hidden="true"></span> <span aria-hidden="true"></span> <span aria-hidden="true"></span></a>`);

	function Ui_burger($$anchor, $$props) {
		push($$props, true);

		const COMPONENT_NAME = "top-navbar-burger";
		const dispatch = createEventDispatcher();

		function getStandartUpdateEventName() {
			return COMPONENT_NAME + ":update";
		}

		/**
		 * @typedef {Object} Props
		 * @property {any} [events]
		 * @property {any} [register]
		 * @property {boolean} [closed]
		 * @property {any} [onUpdate]
		 */
		/** @type {Props} */
		let events = prop($$props, "events", 31, () => proxy({})),
			register = prop($$props, "register", 19, () => notCommon$1.registerWidgetEvents.bind(notCommon$1)),
			closed = prop($$props, "closed", 15, true),
			onUpdate = prop($$props, "onUpdate", 3, (data) => {
				closed(data.closed);
			});

		onMount(() => {
			if (!notCommon$1.objHas(events(), getStandartUpdateEventName())) {
				events(events()[getStandartUpdateEventName()] = onUpdate(), true);
			}

			register()(events());
		});

		SideMenuState.subscribe((val) => {
			closed(!val.open);
			return val;
		});

		var a = root();

		a.__click = [toggle, closed, dispatch];
		template_effect(() => set_class(a, `navbar-burger ${(closed() ? '' : 'is-active') ?? ""}`));
		append($$anchor, a);
		pop();
	}

	delegate(["click"]);

	var root_1 = template(`<div class="navbar-brand"><!> <!> <!> <!></div> <div id="navbar"><div class="navbar-start"></div> <div class="navbar-end"></div></div>`, 1);

	function Ui_top($$anchor, $$props) {
		push($$props, true);

		const dispatch = createEventDispatcher();

		/**
		 * @typedef {Object} Props
		 * @property {any} [sections] - import { beforeUpdate } from "svelte";
		 * @property {any} [items]
		 * @property {string} [root]
		 * @property {any} [navigate]
		 * @property {boolean} [brand]
		 * @property {boolean} [showBurger]
		 * @property {boolean} [burgerControlsSidemenu]
		 */
		/** @type {Props} */
		let sections = prop($$props, "sections", 19, () => []),
			items = prop($$props, "items", 19, () => []),
			root = prop($$props, "root", 3, ""),
			navigate = prop($$props, "navigate", 3, null),
			brand = prop($$props, "brand", 3, false),
			showBurger = prop($$props, "showBurger", 3, true),
			burgerControlsSidemenu = prop($$props, "burgerControlsSidemenu", 3, true);

		let menuClosed = state(true);

		function onClick({ detail }) {
			let { event, element } = detail;

			if (Object.hasOwn(element, "action")) {
				return element.action(event, element);
			}

			event.preventDefault();

			if (typeof navigate() === "function") {
				navigate()({
					full: event.currentTarget.getAttribute("href"),
					short: event.currentTarget.dataset.href
				});
			}

			return false;
		}

		let sectionsItemsCount = {};
		let sectionsItems = {};

		/*
		beforeUpdate(() => {
		    for (let section of sections) {
		        sectionsItems[section.id] = items.filter(
		            (t) => t.section === section.id
		        );
		        sectionsItemsCount[section.id] = items.filter(
		            (t) => t.section === section.id
		        ).length;
		    }
		});
		*/
		function toggleBurger({ detail }) {
			if (burgerControlsSidemenu()) {
				notSideMenu.toggle();
			} else {
				dispatch("toggleBurger", detail);
				set(menuClosed, proxy(detail.closed));
			}
		}

		var fragment = root_1();
		var div = first_child(fragment);
		var node = child(div);

		{
			var consequent = ($$anchor) => {
				Ui_brand($$anchor, spread_props(brand));
			};

			if_block(node, ($$render) => {
				if (brand()) $$render(consequent);
			});
		}

		var node_1 = sibling(node, 2);

		each(node_1, 17, sections, (section) => section.id, ($$anchor, section) => {
			var fragment_2 = comment();
			var node_2 = first_child(fragment_2);

			{
				var consequent_1 = ($$anchor) => {
					Ui_item($$anchor, {
						hidden: "desktop",
						get item() {
							return get$2(section);
						},
						get root() {
							return root();
						},
						$$events: { click: onClick }
					});
				};

				if_block(node_2, ($$render) => {
					if (get$2(section).showOnTouch) $$render(consequent_1);
				});
			}

			append($$anchor, fragment_2);
		});

		var node_3 = sibling(node_1, 2);

		each(node_3, 17, items, (item) => item.id, ($$anchor, item) => {
			var fragment_4 = comment();
			var node_4 = first_child(fragment_4);

			{
				var consequent_2 = ($$anchor) => {
					Ui_item($$anchor, {
						hidden: "desktop",
						get item() {
							return get$2(item);
						},
						get root() {
							return root();
						},
						$$events: { click: onClick }
					});
				};

				if_block(node_4, ($$render) => {
					if (get$2(item).showOnTouch) $$render(consequent_2);
				});
			}

			append($$anchor, fragment_4);
		});

		var node_5 = sibling(node_3, 2);

		{
			var consequent_3 = ($$anchor) => {
				Ui_burger($$anchor, { $$events: { toggle: toggleBurger } });
			};

			if_block(node_5, ($$render) => {
				if (showBurger()) $$render(consequent_3);
			});
		}

		reset(div);

		var div_1 = sibling(div, 2);
		var div_2 = child(div_1);

		each(div_2, 21, items, index$d, ($$anchor, item) => {
			var fragment_7 = comment();
			var node_6 = first_child(fragment_7);

			{
				var consequent_4 = ($$anchor) => {
					Ui_item($$anchor, {
						hidden: "touch",
						get item() {
							return get$2(item);
						},
						$$events: { click: onClick }
					});
				};

				if_block(node_6, ($$render) => {
					if (get$2(item).place === "start") $$render(consequent_4);
				});
			}

			append($$anchor, fragment_7);
		});

		reset(div_2);

		var div_3 = sibling(div_2, 2);

		each(div_3, 21, sections, (section) => section.id, ($$anchor, section) => {
			var fragment_9 = comment();
			var node_7 = first_child(fragment_9);

			{
				var consequent_5 = ($$anchor) => {
					Ui_section($$anchor, {
						right: true,
						get hidden() {
							return get$2(section).hidden;
						},
						get root() {
							return root();
						},
						get section() {
							return get$2(section);
						},
						get items() {
							return sectionsItems[get$2(section).id];
						},
						$$events: { click: onClick }
					});
				};

				if_block(node_7, ($$render) => {
					if ((sectionsItemsCount[get$2(section).id] || get$2(section).indicator || get$2(section).tag) && get$2(section).place == "end") $$render(consequent_5);
				});
			}

			append($$anchor, fragment_9);
		});

		reset(div_3);
		reset(div_1);
		template_effect(() => set_class(div_1, `navbar-menu ${(get$2(menuClosed) ? '' : 'is-active') ?? ""}`));
		append($$anchor, fragment);
		pop();
	}

	var _notTopMenu;
	const TYPE = "top";
	let notTopMenu = /*#__PURE__*/function (_Menu) {
	  function notTopMenu() {
	    _classCallCheck(this, notTopMenu);
	    return _callSuper(this, notTopMenu, arguments);
	  }
	  _inherits(notTopMenu, _Menu);
	  return _createClass(notTopMenu, null, [{
	    key: "render",
	    value: function render(app) {
	      if (app) {
	        this.setApp(app);
	      }
	      this.prepareData();
	      if (!this.menu) {
	        let target = document.querySelector(this.getOptions().targetSelector);
	        if (!target) {
	          return;
	        }
	        this.menu = mount(Ui_top, {
	          target,
	          props: {
	            brand: this.getOptions().brand,
	            items: this.items,
	            sections: this.sections,
	            root: this.getOptions().root,
	            navigate: this.getOptions().navigate
	          }
	        });
	        this.interval = setInterval(this.updateMenuActiveItem.bind(this), 200);
	      }
	    }
	  }, {
	    key: "updateMenu",
	    value: function updateMenu(url) {
	      Array.from(document.querySelectorAll(this.getOptions().targetSelector + " aside.menu a")).forEach(function (item) {
	        if (item.href == url || url.href && url.href.indexOf(item.href) == 0) {
	          item.classList.add("is-active");
	        } else {
	          item.classList.remove("is-active");
	        }
	      });
	    }
	  }, {
	    key: "updateMenuActiveItem",
	    value: function updateMenuActiveItem() {
	      let url = window.location.toString(),
	        lastLocation = this.location;
	      if (lastLocation) {
	        if (url !== lastLocation) {
	          this.location = url;
	          this.updateMenu(url);
	        }
	      } else {
	        this.location = url;
	        this.updateMenu(url);
	      }
	    }
	  }, {
	    key: "toggle",
	    value: function toggle() {
	      let el = document.querySelector(this.getOptions().targetSelector);
	      el.classList.toggle("is-active");
	    }
	  }, {
	    key: "hide",
	    value: function hide() {
	      let el = document.querySelector(this.getOptions().targetSelector);
	      el.classList.remove("is-active");
	    }
	  }, {
	    key: "setBurgerState",
	    value: function setBurgerState(menuClosed) {
	      this.menu.$set({
	        menuClosed
	      });
	    }
	  }]);
	}(Menu);
	_notTopMenu = notTopMenu;
	_defineProperty(notTopMenu, "DEFAULT", {
	  section: "any",
	  sectionTitle: "Меню",
	  priority: 0,
	  //link, button, dropdown, component
	  type: "link",
	  place: "main"
	});
	_defineProperty(notTopMenu, "options", {
	  brand: false,
	  type: TYPE,
	  items: [],
	  sections: [],
	  targetSelector: `#${TYPE}-menu`,
	  root: "/",
	  directNavigation: false,
	  navigate: function (urls) {
	    _notTopMenu.hide();
	    if (!_notTopMenu.isDirectNavigation() && _notTopMenu.app) {
	      let func = _notTopMenu.app.getWorking("router");
	      if (func) {
	        return func.navigate(urls.short);
	      }
	    }
	    document.location.assign(urls.full);
	  }
	});

	const DEFAULT_TRASFORMER = function (res) {
	  // @ts-ignore
	  return Object.hasOwn(res, "status") && Object.hasOwn(res, "result") ? res.result : res;
	};

	var create_crud_action_ui_view = (function ({
	  ACTION,
	  TITLE,
	  UIConstructor,
	  dataProvider,
	  goBack
	}) {
	  return /*#__PURE__*/function () {
	    function _class() {
	      _classCallCheck(this, _class);
	    }
	    return _createClass(_class, null, [{
	      key: "run",
	      value: async function run(controller, params) {
	        try {
	          controller.setBreadcrumbs([{
	            title: `Просмотр "${TITLE}"`
	          }]);
	          await controller.preloadVariants(ACTION);
	          if (controller.ui[ACTION]) {
	            return;
	          } else {
	            controller.$destroyUI();
	          }
	          let data = {};
	          if (dataProvider) {
	            if (notCommon$1.isFunc(dataProvider)) {
	              if (notCommon$1.isAsync(dataProvider)) {
	                data = await dataProvider(params);
	              } else {
	                data = dataProvider(params);
	              }
	            } else {
	              data = {
	                ...dataProvider
	              };
	            }
	          }
	          const resultTransformer = controller.getOptions(`${ACTION}.transformer`, DEFAULT_TRASFORMER);
	          controller.ui[ACTION] = new UIConstructor({
	            target: controller.getContainerInnerElement(),
	            props: {
	              params,
	              ...resultTransformer(data)
	            }
	          });
	          controller.emit(`after:render:${ACTION}`);
	          if (goBack && notCommon$1.isFunc(goBack)) {
	            controller.ui[ACTION].on("reject", function () {
	              return goBack();
	            });
	          }
	        } catch (e) {
	          controller.report(e);
	          controller.showErrorMessage(e);
	        }
	      }
	    }]);
	  }();
	});

	const PRELOADABLE = ["create", "update", "list", "delete", "details"];
	let CRUDVariantsPreloader = /*#__PURE__*/function () {
	  function CRUDVariantsPreloader() {
	    _classCallCheck(this, CRUDVariantsPreloader);
	  }
	  return _createClass(CRUDVariantsPreloader, null, [{
	    key: "preload",
	    value: async function preload(controller, type = "list") {
	      try {
	        if (!PRELOADABLE.includes(type)) {
	          return;
	        }
	        let preload = controller.getOptions(`${type}.preload`, {});
	        if (Object.keys(preload).length == 0) {
	          preload = controller.getOptions(`preload`, {});
	        }
	        if (Object.keys(preload).length > 0) {
	          let libProps = Object.keys(preload);
	          let proms = [];
	          libProps.forEach(function (prop) {
	            let modelName = notCommon$1.lowerFirstLetter(preload[prop]);
	            let Model = controller.make[modelName]({});
	            proms.push(Model.$listAll());
	          });
	          let results = await Promise.all(proms);
	          for (let i = 0; i < libProps.length; i++) {
	            const propName = libProps[i];
	            if (results[i].status === "ok" && Array.isArray(results[i].result)) {
	              const resultsList = results[i].result;
	              const variants = resultsList.map(function (item) {
	                return {
	                  id: item._id,
	                  title: item.title
	                };
	              });
	              controller.setOptions(`variants.${type}.${propName}`, variants);
	            }
	          }
	        }
	        controller.log("preload finished");
	      } catch (e) {
	        controller.report(e);
	        controller.showErrorMessage(e);
	      }
	    }
	  }]);
	}();

	const DEFAULT_ACTION = "list";
	let notCRUDRouter = /*#__PURE__*/function () {
	  function notCRUDRouter() {
	    _classCallCheck(this, notCRUDRouter);
	  }
	  return _createClass(notCRUDRouter, null, [{
	    key: "extractActionName",
	    value: function extractActionName(controller, params) {
	      let actionName = DEFAULT_ACTION;
	      if (params.length === 1) {
	        if (params[0] === "create") {
	          actionName = "create";
	        } else if (controller.actionHandlerExists(params[0])) {
	          actionName = params[0];
	        } else {
	          actionName = "details";
	        }
	      } else if (params.length > 1) {
	        if (params[1] === "delete") {
	          actionName = "delete";
	        } else if (params[1] === "update") {
	          actionName = "update";
	        } else {
	          actionName = params[1];
	        }
	      }
	      return actionName;
	    }
	  }, {
	    key: "route",
	    value: function route(controller, params) {
	      try {
	        const actionName = notCRUDRouter.extractActionName(controller, params);
	        controller.setCurrentAction(actionName);
	        return controller.runAction(actionName, params);
	      } catch (e) {
	        controller.report(e);
	        controller.showErrorMessage(e);
	      }
	    }
	  }]);
	}();

	let CRUDMessage = /*#__PURE__*/function () {
	  function CRUDMessage() {
	    _classCallCheck(this, CRUDMessage);
	  }
	  return _createClass(CRUDMessage, null, [{
	    key: "error",
	    value: function error(controller, title, message) {
	      controller.setUI("__message__", new Ui_error({
	        target: controller.getContainerInnerElement(),
	        props: {
	          title,
	          message
	        }
	      }));
	    }
	  }, {
	    key: "success",
	    value: function success(controller, title, message) {
	      controller.setUI("__message__", new Ui_success({
	        target: controller.getContainerInnerElement(),
	        props: {
	          title,
	          message
	        }
	      }));
	    }
	  }]);
	}();

	const DEFAULT_BREADCRUMB_TAIL$2 = "Просмотр";

	/**
	 * Generic CRUD action class
	 * @class
	 */
	let CRUDGenericAction = /*#__PURE__*/function () {
	  function CRUDGenericAction() {
	    _classCallCheck(this, CRUDGenericAction);
	  }
	  return _createClass(CRUDGenericAction, null, [{
	    key: "NAVIGATION_DELAY",
	    get: function () {
	      return NAVIGATION_DELAY_DEFAULT;
	    }
	    /**
	     * Default breadcrumbs tail template string
	     * @returns {string}
	     */
	  }, {
	    key: "deafultBreadcrumbsTail",
	    get: function () {
	      return DEFAULT_BREADCRUMB_TAIL$2;
	    }

	    /**
	     * Libarary of breadcrumbs tails strings templates
	     * @returns {Object}
	     */
	  }, {
	    key: "breadcrumbsTails",
	    get: function () {
	      return {
	        preset: DEFAULT_BREADCRUMB_TAIL$2,
	        set: 'Просмотр, "{:title}"'
	      };
	    }

	    /**
	     * Returns template of breadcrumbs tail
	     * @param   {string}    name
	     * @returns {string}    template string
	     */
	  }, {
	    key: "getBreadcrumbsTail",
	    value: function getBreadcrumbsTail(name) {
	      if (!this.breadcrumbsTails) {
	        return "";
	      }
	      return notCommon$1.select(this.breadcrumbsTails, name, this.deafultBreadcrumbsTail);
	    }
	    /**
	     * @static {string} ACTION this controller action name, used in URI
	     */
	  }, {
	    key: "ACTION",
	    get: function () {
	      return "details";
	    }
	    /**
	     * @static {string} MODEL_ACTION    network model interface action name, used in API
	     */
	  }, {
	    key: "MODEL_ACTION_GET",
	    get: function () {
	      return "get";
	    }

	    /**
	     * @static {string} MODEL_ACTION    network model interface action name, used in API
	     */
	  }, {
	    key: "MODEL_ACTION_PUT",
	    get: function () {
	      return "get";
	    }

	    /**
	     * @static {object} UIConstructor    constructor of UI component
	     */
	  }, {
	    key: "UIConstructor",
	    get: function () {
	      return notForm;
	    }
	    /**
	     * @static {function}   TRANSFORMER     response.result transformation function if want to change it's structure
	     */
	  }, {
	    key: "TRANSFORMER",
	    get: function () {
	      return DEFAULT_TRASFORMER;
	    }
	    /**
	     * Returns name of model identificaiton field
	     * @param {object} controller instance of controller
	     * @returns {string}    default id field name is '_id'
	     */
	  }, {
	    key: "getIdField",
	    value: function getIdField(controller) {
	      return controller.getOptions(`${this.ACTION}.idField`, "_id");
	    }
	  }, {
	    key: "loadDataQuery",
	    value: function loadDataQuery(controller, params) {
	      const idField = this.getIdField(controller);
	      return {
	        [idField]: params[0]
	      };
	    }

	    /**
	     * Return Promise of API reponse
	     * @param {object} controller instance of controller
	     * @param {string[]} params     array of strings parsed from URI by router and passed to controller
	     * @returns {Promise}   API response {status:string, result:any, message:string, errors: {[fieldname]:[...errorMessages]}}
	     */
	  }, {
	    key: "loadData",
	    value: async function loadData(controller, params) {
	      const query = this.loadDataQuery(controller, params);
	      const actionName = this.getModelActionName(controller);
	      return await controller.getModel(query)[`$${actionName}`]();
	    }

	    /**
	     * Returns model API action name
	     * @param {object} controller instance of controller
	     * @returns {string}    network interface model action name, for API; default: this.MODEL_ACTION_GET
	     */
	  }, {
	    key: "getModelActionName",
	    value: function getModelActionName(controller) {
	      return controller.getOptions(`${this.ACTION}.actionName`, this.MODEL_ACTION_GET);
	    }

	    /**
	     * Sets breadcrumbs tail, without result details
	     * @param {object} controller instance of controller
	     * @param {string[]} params     list of route params
	     */
	  }, {
	    key: "presetBreadcrumbs",
	    value: function presetBreadcrumbs(controller, params) {
	      controller.setBreadcrumbs([{
	        title: this.getBreadcrumbsTail("preset"),
	        url: controller.getModelActionURL(params[0], false)
	      }]);
	    }
	  }, {
	    key: "getTitle",
	    value: function getTitle(contoller, params, response) {
	      return contoller.getItemTitle(response.result);
	    }

	    /**
	     * Sets breadcrumbs tail with response details, aka title of loaded item
	     * @param {object} controller   instance of controller
	     * @param {string[]} params     list of route params
	     * @param {object} response     API response in wrapper
	     * @param {object} response.result  API response result
	     */
	  }, {
	    key: "setBreadcrumbs",
	    value: function setBreadcrumbs(controller, params, response) {
	      const title = this.getTitle(controller, params, response);
	      const breadcrumbsTailTemplate = this.getBreadcrumbsTail("set");
	      controller.setBreadcrumbs([{
	        title: breadcrumbsTailTemplate ? notLocale$1.format(breadcrumbsTailTemplate, {
	          title
	        }) : title,
	        url: controller.getModelActionURL(params[0], false)
	      }]);
	    }

	    /**
	     * Checks response on success
	     * @param {object} response
	     * @param {string} response.status
	     * @returns {boolean}   true if response is bad
	     */
	  }, {
	    key: "isResponseBad",
	    value: function isResponseBad(response) {
	      return !response || response.status !== "ok";
	    }
	  }, {
	    key: "getValidators",
	    value: function getValidators(controller) {
	      return controller.getValidators && controller.getValidators() || controller.getOptions("Validators");
	    }

	    /**
	     * Creates object with all options needed to initialize UI component
	     * @param {object} controller   instance of controller
	     * @param {object} response     API reponse object
	     * @returns {object}    ui options object
	     */
	  }, {
	    key: "prepareUIOptions",
	    value: function prepareUIOptions(controller, response) {
	      const detailsActionName = this.getModelActionName(controller);
	      return {
	        options: {
	          target: controller.getContainerInnerElement(),
	          model: controller.getModelName(),
	          action: detailsActionName,
	          name: `${controller.getName()}.${this.ACTION}Form`,
	          fields: {
	            readonly: true
	          },
	          validators: this.getValidators(controller),
	          variants: controller.getOptions(`variants.${this.ACTION}`, {}),
	          masters: controller.getOptions(`${this.ACTION}.masters`, {}),
	          injected: controller.getOptions(`${this.ACTION}.injected`, {})
	        },
	        data: this.TRANSFORMER(response.result)
	      };
	    }

	    /**
	     * Returns instance of this action UI component from controller
	     * @param {object} controller   instance of controller
	     * @returns {object}    instance of UI component
	     */
	  }, {
	    key: "getUI",
	    value: function getUI(controller) {
	      return controller.getUI(this.ACTION);
	    }

	    /**
	     * Sets UI of this action in controller
	     * @param {object} controller   instance of controller
	     * @param {object} ui           instance of UI component
	     */
	  }, {
	    key: "setUI",
	    value: function setUI(controller, ui) {
	      controller.setUI(this.ACTION, ui);
	    }

	    /**
	     *  Sets via `.$set` method `loading` to `true`
	     *
	     * @static
	     * @param {import('../../controller.crud')} controller
	     * @memberof CRUDGenericAction
	     */
	  }, {
	    key: "setUILoading",
	    value: function setUILoading(controller) {
	      this.getUI(controller).$set({
	        loading: true
	      });
	    }

	    /**
	     *  Sets via `.$set` method `loading` to `false`
	     *
	     * @static
	     * @param {import('../../controller.crud')} controller
	     * @memberof CRUDGenericAction
	     */
	  }, {
	    key: "setUILoaded",
	    value: function setUILoaded(controller) {
	      this.getUI(controller).$set({
	        loading: false
	      });
	    }

	    /**
	     *  Sets via `.$set` method `error` to `message`
	     *
	     * @static
	     * @param {import('../../controller.crud')} controller
	     * @param   {Error} message     error message
	     * @memberof CRUDGenericAction
	     */
	  }, {
	    key: "setUIError",
	    value: function setUIError(controller, message) {
	      this.getUI(controller).$set({
	        error: message
	      });
	    }

	    /**
	     * Binds events to action UI
	     * @param {object} controller   instance of controller
	     * @param {string[]} params     list of route params
	     * @param {object} response     API response
	     */
	    // eslint-disable-next-line no-unused-vars
	  }, {
	    key: "bindUIEvents",
	    value: function bindUIEvents(controller, params, response) {
	      if (notCommon$1.isFunc(controller.goBack)) {
	        this.bindUIEvent(controller, "reject", function () {
	          return controller.goBack();
	        });
	      }
	    }

	    /**
	     * Bind event handler named event to UI. Checks different binder notation $on/on
	     * @param {object} controller   instance of controller
	     * @param {string} event        event name
	     * @param {function} callback   callback function on event
	     * @returns
	     */
	  }, {
	    key: "bindUIEvent",
	    value: function bindUIEvent(controller, event, callback) {
	      const ui = this.getUI(controller);
	      if (ui.$on) {
	        return ui.$on(event, callback);
	      }
	      if (ui.on) {
	        return ui.on(event, callback);
	      }
	    }

	    /**
	     * true, if UI of this action already exists,
	     * false, if UI of this action wasn't existed and other UIs were destoryed
	     * @param {object} controller   instance of controller
	     * @returns {boolean}   true if UI of this action exists, false if UI of other was destroyed
	     */
	  }, {
	    key: "isUIRendered",
	    value: function isUIRendered(controller) {
	      if (this.getUI(controller)) {
	        return true;
	      } else {
	        controller.$destroyUI();
	      }
	      return false;
	    }
	  }, {
	    key: "tweakUIOptions",
	    value: function tweakUIOptions(options) {
	      return options;
	    }
	  }, {
	    key: "createUI",
	    value: function createUI(uiComponent, controller, response) {
	      if (notCommon$1.isFunc(uiComponent)) {
	        return mount(uiComponent, this.tweakUIOptions(this.prepareUIOptions(controller, response)));
	      } else {
	        return new uiComponent(this.tweakUIOptions(this.prepareUIOptions(controller, response)));
	      }
	    }

	    /**
	     * Performing action preparation and renders UI
	     * @param {object} controller   instance of controller
	     * @param {string[]} params     list of route params
	     * @returns {Promise<undefined>}
	     */
	  }, {
	    key: "run",
	    value: async function run(controller, params) {
	      try {
	        //inform that we are starting
	        controller.emit(`before:render:${this.ACTION}`, params);
	        //if UI for this action exists exiting
	        if (this.isUIRendered(controller)) {
	          return;
	        }
	        //indicating that we are working
	        controller.renderLoadingScreen && controller.renderLoadingScreen();
	        //preloading form variants
	        await controller.preloadVariants(this.ACTION);
	        //setting initial state of breadcrumbs tail
	        this.presetBreadcrumbs(controller, params);
	        //loading data
	        const response = await this.loadData(controller, params);
	        //showing error message if response is 'bad'
	        if (this.isResponseBad(response)) {
	          return controller.showErrorMessage(response);
	        }
	        //updating breadcrumbs tail with more details from response
	        this.setBreadcrumbs(controller, params, response);
	        //creating action UI component
	        //eslint-disable-next-line no-unused-vars
	        const uiComponent = this.UIConstructor;
	        //eslint-disable-next-line no-unused-vars
	        const ui = this.createUI();
	        this.setUI(controller);
	        //bind events to UI
	        this.bindUIEvents(controller, params, response);
	        //inform that we are ready
	        controller.emit(`after:render:${this.ACTION}`, params, response);
	      } catch (e) {
	        //informing about exception
	        controller.emit(`exception:render:${this.ACTION}`, params, e);
	        //reporting exception
	        controller.report(e);
	        //showing error message
	        controller.showErrorMessage(e);
	      } finally {
	        controller.removeLoadingScreen && controller.removeLoadingScreen();
	      }
	    }
	  }, {
	    key: "goBackAfterDelay",
	    value: function goBackAfterDelay(controller) {
	      controller.goBack(this.NAVIGATION_DELAY);
	    }
	  }, {
	    key: "goBack",
	    value: function goBack(controller) {
	      controller.goBack(0);
	    }
	  }]);
	}();

	const ACTION$2 = "create";
	const DEFAULT_BREADCRUMB_TAIL$1 = "Создание";
	let CRUDGenericActionCreate = /*#__PURE__*/function (_CRUDGenericAction) {
	  function CRUDGenericActionCreate() {
	    _classCallCheck(this, CRUDGenericActionCreate);
	    return _callSuper(this, CRUDGenericActionCreate, arguments);
	  }
	  _inherits(CRUDGenericActionCreate, _CRUDGenericAction);
	  return _createClass(CRUDGenericActionCreate, null, [{
	    key: "deafultBreadcrumbsTail",
	    get: function () {
	      return DEFAULT_BREADCRUMB_TAIL$1;
	    }
	  }, {
	    key: "breadcrumbsTails",
	    get: function () {
	      return undefined;
	    }
	  }, {
	    key: "ACTION",
	    get: function () {
	      return ACTION$2;
	    }
	    /**
	     * @static {string} MODEL_ACTION    network model interface action name, used in API
	     */
	  }, {
	    key: "MODEL_ACTION_GET",
	    get: function () {
	      return ACTION$2;
	    }

	    /**
	     * @static {string} MODEL_ACTION    network model interface action name, used in API
	     */
	  }, {
	    key: "MODEL_ACTION_PUT",
	    get: function () {
	      return ACTION$2;
	    }

	    /**
	     *
	     * @param {import('../../controller.crud')} controller
	     * @param {any}                         [params]
	     * @returns {import('not-node/src/types').notAppResponse}
	     */
	    //eslint-disable-next-line no-unused-vars
	  }, {
	    key: "loadData",
	    value: function loadData(controller, params = {}) {
	      let defData = controller.createDefault();
	      if (defData.getData) {
	        defData = defData.getData();
	      }
	      return {
	        status: "ok",
	        result: defData
	      };
	    }
	  }, {
	    key: "getTitle",
	    value: function getTitle(contoller, params, response) {
	      return contoller.getItemTitle(response);
	    }
	  }, {
	    key: "prepareUIOptions",
	    value: function prepareUIOptions(controller, response) {
	      const actionName = this.getModelActionName(controller);
	      return {
	        options: {
	          target: controller.getContainerInnerElement(),
	          model: controller.getModelName(),
	          action: actionName,
	          name: `${controller.getName()}.${this.ACTION}Form`,
	          validators: this.getValidators(controller),
	          variants: controller.getOptions(`variants.${this.ACTION}`, {}),
	          masters: controller.getOptions(`${this.ACTION}.masters`, {})
	        },
	        data: this.TRANSFORMER(response)
	      };
	    }

	    /**
	     * Binds events to action UI
	     * @param {object} controller   instance of controller
	     * @param {string[]} params     list of route params
	     * @param {object} [response]     API response
	     */
	    //eslint-disable-next-line no-unused-vars
	  }, {
	    key: "bindUIEvents",
	    value: function bindUIEvents(controller, params, response) {
	      var _this = this;
	      if (notCommon$1.isFunc(controller.goBack)) {
	        this.bindUIEvent(controller, "reject", function () {
	          return _this.goBack(controller);
	        });
	      }
	      if (notCommon$1.isFunc(controller.onActionSubmit)) {
	        this.bindUIEvent(controller, "submit", async function (ev) {
	          const success = await controller.onActionSubmit(_this.ACTION, {
	            ..._this.loadDataQuery(controller, params),
	            ...ev.detail
	          });
	          if (success) {
	            _this.goBackAfterDelay(controller);
	          }
	        });
	      }
	    }
	  }]);
	}(CRUDGenericAction);

	let CRUDActionCreate = /*#__PURE__*/function (_CRUDGenericActionCre) {
	  function CRUDActionCreate() {
	    _classCallCheck(this, CRUDActionCreate);
	    return _callSuper(this, CRUDActionCreate, arguments);
	  }
	  _inherits(CRUDActionCreate, _CRUDGenericActionCre);
	  return _createClass(CRUDActionCreate);
	}(CRUDGenericActionCreate);

	/**
	 * Generic CRUD Details action class
	 * @class
	 */
	let CRUDGenericActionRead = /*#__PURE__*/function (_CRUDGenericAction) {
	  function CRUDGenericActionRead() {
	    _classCallCheck(this, CRUDGenericActionRead);
	    return _callSuper(this, CRUDGenericActionRead, arguments);
	  }
	  _inherits(CRUDGenericActionRead, _CRUDGenericAction);
	  return _createClass(CRUDGenericActionRead, null, [{
	    key: "tweakUIOptions",
	    value: function tweakUIOptions(options) {
	      options.options.ui = {
	        submit: {
	          enabled: false
	        }
	      };
	      return options;
	    }

	    /**
	     * Performing action preparation and renders UI
	     * @param {object} controller   instance of controller
	     * @param {string[]} params     list of route params
	     * @returns {Promise<undefined>}
	     */
	  }, {
	    key: "run",
	    value: async function run(controller, params) {
	      try {
	        //inform that we are starting
	        controller.emit(`before:render:${this.ACTION}`, params);
	        //if UI for this action exists exiting
	        if (this.isUIRendered(controller)) {
	          return;
	        }
	        //indicating that we are working
	        controller.renderLoadingScreen && controller.renderLoadingScreen();
	        //preloading form variants
	        await controller.preloadVariants(this.ACTION);
	        //setting initial state of breadcrumbs tail
	        this.presetBreadcrumbs(controller, params);
	        //loading data
	        const response = await this.loadData(controller, params);
	        //showing error message if response is 'bad'
	        if (this.isResponseBad(response)) {
	          return controller.showErrorMessage(response);
	        }
	        //updating breadcrumbs tail with more details from response
	        this.setBreadcrumbs(controller, params, response);
	        //creating action UI component
	        const uiComponent = this.UIConstructor;
	        this.setUI(controller, new uiComponent(this.tweakUIOptions(this.prepareUIOptions(controller, response))));
	        //bind events to UI
	        this.bindUIEvents(controller, params, response);
	        //inform that we are ready
	        controller.emit(`after:render:${this.ACTION}`, params, response);
	      } catch (e) {
	        //informing about exception
	        controller.emit(`exception:render:${this.ACTION}`, params, e);
	        //reporting exception
	        controller.report(e);
	        //showing error message
	        controller.showErrorMessage(e);
	      } finally {
	        controller.removeLoadingScreen && controller.removeLoadingScreen();
	      }
	    }
	  }]);
	}(CRUDGenericAction);

	/**
	 * CRUD action details
	 */
	let CRUDActionDetails = /*#__PURE__*/function (_CRUDGenericActionRea) {
	  function CRUDActionDetails() {
	    _classCallCheck(this, CRUDActionDetails);
	    return _callSuper(this, CRUDActionDetails, arguments);
	  }
	  _inherits(CRUDActionDetails, _CRUDGenericActionRea);
	  return _createClass(CRUDActionDetails);
	}(CRUDGenericActionRead);

	const DEFAULT_BREADCRUMB_TAIL = "Редактирование";
	/**
	 * Generic CRUD Update action class
	 * @class
	 */
	let CRUDGenericActionUpdate = /*#__PURE__*/function (_CRUDGenericAction) {
	  function CRUDGenericActionUpdate() {
	    _classCallCheck(this, CRUDGenericActionUpdate);
	    return _callSuper(this, CRUDGenericActionUpdate, arguments);
	  }
	  _inherits(CRUDGenericActionUpdate, _CRUDGenericAction);
	  return _createClass(CRUDGenericActionUpdate, null, [{
	    key: "deafultBreadcrumbsTail",
	    get:
	    /**
	     * Default breadcrumbs tail template string
	     * @returns {string}
	     */
	    function () {
	      return DEFAULT_BREADCRUMB_TAIL;
	    }

	    /**
	     * Libarary of breadcrumbs tails strings templates
	     * @returns {Object}
	     */
	  }, {
	    key: "breadcrumbsTails",
	    get: function () {
	      return {
	        preset: DEFAULT_BREADCRUMB_TAIL,
	        set: `${DEFAULT_BREADCRUMB_TAIL}: "{:title}"`
	      };
	    }

	    /**
	     * @static {string} ACTION this controller action name, used in URI
	     */
	  }, {
	    key: "ACTION",
	    get: function () {
	      return "update";
	    }

	    /**
	     * @static {string} MODEL_ACTION_GET    network model interface action name, used in API
	     */
	  }, {
	    key: "MODEL_ACTION_GET",
	    get: function () {
	      return "getRaw";
	    }

	    /**
	     * @static {string} MODEL_ACTION_PUT    network model interface action name, used in API
	     */
	  }, {
	    key: "MODEL_ACTION_PUT",
	    get: function () {
	      return "update";
	    }

	    /**
	     * Creates object with all options needed to initialize UI component
	     * @param {object} controller   instance of controller
	     * @param {object} response     API reponse object
	     * @returns {object}    ui options object
	     */
	  }, {
	    key: "prepareUIOptions",
	    value: function prepareUIOptions(controller, response) {
	      return {
	        options: {
	          target: controller.getContainerInnerElement(),
	          model: controller.getModelName(),
	          action: this.MODEL_ACTION_PUT,
	          //will be used to get form fields information from manifest
	          name: `${controller.getName()}.${this.ACTION}Form`,
	          validators: this.getValidators(controller),
	          variants: controller.getOptions(`variants.${this.ACTION}`, {}),
	          ui: controller.getOptions(`${this.ACTION}.ui`, {}),
	          fields: controller.getOptions(`${this.ACTION}.fields`, {}),
	          masters: controller.getOptions(`${this.ACTION}.masters`, {})
	        },
	        data: this.TRANSFORMER(notCommon$1.stripProxy(response.result))
	      };
	    }

	    /**
	     * Binds events to action UI
	     * @param {object} controller   instance of controller
	     * @param {string[]} params     list of route params
	     * @param {object} [response]     API response
	     */
	    // eslint-disable-next-line no-unused-vars
	  }, {
	    key: "bindUIEvents",
	    value: function bindUIEvents(controller, params, response) {
	      var _this = this;
	      if (notCommon$1.isFunc(controller.goBack)) {
	        this.bindUIEvent(controller, "reject", function () {
	          return _this.goBack(controller);
	        });
	      }
	      if (notCommon$1.isFunc(controller.onActionSubmit)) {
	        this.bindUIEvent(controller, "submit", async function (ev) {
	          const success = await controller.onActionSubmit(_this.ACTION, {
	            ..._this.loadDataQuery(controller, params),
	            ...ev.detail
	          });
	          if (success) {
	            _this.goBackAfterDelay(controller);
	          }
	        });
	      }
	    }

	    /**
	     * true, if UI of this action already exists,
	     * false, if UI of this action wasn't existed and other UIs were destoryed
	     * @param {object} controller   instance of controller
	     * @returns {boolean}   true if UI of this action exists, false if UI of other was destroyed
	     */
	  }, {
	    key: "isUIRendered",
	    value: function isUIRendered(controller) {
	      if (this.getUI(controller)) {
	        return true;
	      } else {
	        controller.$destroyUI();
	      }
	      return false;
	    }

	    /**
	     * Performing action preparation and renders UI
	     * @param {object} controller   instance of controller
	     * @param {string[]} params     list of route params
	     * @returns {Promise<undefined>}
	     */
	  }, {
	    key: "run",
	    value: async function run(controller, params) {
	      try {
	        //inform that we are starting
	        controller.emit(`before:render:${this.ACTION}`, [params]);
	        //if UI for this action exists exiting
	        if (this.isUIRendered(controller)) {
	          return;
	        }
	        //indicating that we are working
	        controller.renderLoadingScreen && controller.renderLoadingScreen();
	        //preloading form variants
	        await controller.preloadVariants(this.ACTION);
	        //setting initial state of breadcrumbs tail
	        this.presetBreadcrumbs(controller, params);
	        //loading data
	        const response = await this.loadData(controller, params);
	        //showing error message if response is 'bad'
	        if (this.isResponseBad(response)) {
	          return controller.showErrorMessage(response);
	        }
	        //updating breadcrumbs tail with more details from response
	        this.setBreadcrumbs(controller, params, response);
	        //creating action UI component
	        const uiComponent = this.UIConstructor;
	        this.setUI(controller, new uiComponent(this.tweakUIOptions(this.prepareUIOptions(controller, response))));
	        //bind events to UI
	        this.bindUIEvents(controller, params, response);
	        //inform that we are ready
	        controller.emit(`after:render:${this.ACTION}`, params);
	      } catch (e) {
	        //informing about exception
	        controller.emit(`exception:render:${this.ACTION}`, params, e);
	        //reporting exception
	        controller.report(e);
	        //showing error message
	        controller.showErrorMessage(e);
	      } finally {
	        controller.removeLoadingScreen && controller.removeLoadingScreen();
	      }
	    }
	  }]);
	}(CRUDGenericAction);

	/**
	 * CRUD action update
	 */
	let CRUDActionUpdate = /*#__PURE__*/function (_CRUDGenericActionUpd) {
	  function CRUDActionUpdate() {
	    _classCallCheck(this, CRUDActionUpdate);
	    return _callSuper(this, CRUDActionUpdate, arguments);
	  }
	  _inherits(CRUDActionUpdate, _CRUDGenericActionUpd);
	  return _createClass(CRUDActionUpdate);
	}(CRUDGenericActionUpdate);

	const ACTION$1 = "delete";
	const MODEL_ACTION = "delete";
	let CRUDActionDelete = /*#__PURE__*/function () {
	  function CRUDActionDelete() {
	    _classCallCheck(this, CRUDActionDelete);
	  }
	  return _createClass(CRUDActionDelete, null, [{
	    key: "run",
	    value: async function run(controller, params) {
	      try {
	        if (controller.ui[ACTION$1]) {
	          return;
	        } else {
	          controller.$destroyUI();
	        }
	        controller.ui[ACTION$1] = new notActionUI({
	          name: "CRUDDelete",
	          target: controller.getContainerInnerElement(),
	          options: {
	            loaderActive: true,
	            loaderStyle: "container",
	            loaderTitle: "not-node:crud_delete_action_waiting",
	            container: {
	              id: `crud-delete-action-${params[0]}`
	            }
	          }
	        });
	        controller.setBreadcrumbs([{
	          title: "Удаление",
	          url: controller.getModelActionURL(params[0], ACTION$1)
	        }]);
	        if (confirm("Удалить запись?")) {
	          const deleteActionName = controller.getOptions(`${ACTION$1}.actionName`, MODEL_ACTION);
	          const success = await controller.onActionSubmit(deleteActionName, {
	            _id: params[0]
	          });
	          if (success) {
	            controller.goList();
	          }
	          return;
	        }
	        controller.goList();
	      } catch (e) {
	        controller.report(e);
	        controller.showErrorMessage(e);
	      }
	    }
	  }]);
	}();

	const ACTION = "list";
	let CRUDActionList = /*#__PURE__*/function () {
	  function CRUDActionList() {
	    _classCallCheck(this, CRUDActionList);
	  }
	  return _createClass(CRUDActionList, null, [{
	    key: "tweakActionsList",
	    value: function tweakActionsList(controller, ACTIONS_LIST) {
	      if (controller.getOptions(`${ACTION}.createAction`, true)) {
	        ACTIONS_LIST.push({
	          title: "Создать",
	          action: function () {
	            return controller.goCreate();
	          }
	        });
	      }
	      return ACTIONS_LIST;
	    }
	  }, {
	    key: "tweakUIOptions",
	    value: function tweakUIOptions(options) {
	      return options;
	    }

	    /**
	     *
	     *
	     * @static
	     * @param {import('../controller.crud').default} controller
	     * @param {string} value
	     * @param {number} [delay=0]
	     * @param {Array<string>} [actions=["details", "update", "delete"]]
	     * @param {Array<object>} [prepend=[]]
	     * @param {Array<object>} [append=[]]
	     * @param {boolean} [onlyIcons=true]
	     * @return {Array<object>}
	     * @memberof CRUDActionList
	     */
	  }, {
	    key: "createActionsButtons",
	    value: function createActionsButtons(controller, value, delay = 0, actions = ["details", "update", "delete"], prepend = [], append = [], onlyIcons = true) {
	      const ACTIONS = {
	        details: {
	          action: function () {
	            return controller.goDetails(value, delay);
	          },
	          ...(onlyIcons ? {
	            icon: "circle-info"
	          } : {
	            title: "Подробнее"
	          }),
	          size: "small"
	        },
	        update: {
	          action: function () {
	            return controller.goUpdate(value, delay);
	          },
	          ...(onlyIcons ? {
	            icon: "edit"
	          } : {
	            title: "Изменить"
	          }),
	          color: "warning",
	          size: "small"
	        },
	        delete: {
	          action: function () {
	            return controller.goDelete(value, delay);
	          },
	          color: "danger",
	          ...(onlyIcons ? {
	            icon: "trash"
	          } : {
	            title: "Удалить"
	          }),
	          size: "small",
	          style: "outlined"
	        }
	      };
	      const actionsButtons = [...prepend];
	      if (Array.isArray(actions)) {
	        actions.forEach(function (actionName) {
	          return actionsButtons.push(ACTIONS[actionName]);
	        });
	      }
	      actionsButtons.push(...append);
	      return actionsButtons;
	    }
	  }, {
	    key: "run",
	    value: async function run(controller, params) {
	      try {
	        //indicating that we are working
	        controller.renderLoadingScreen && controller.renderLoadingScreen();
	        await controller.preloadVariants(ACTION);
	        controller.setBreadcrumbs([{
	          title: "Список",
	          url: controller.getModelURL()
	        }]);
	        if (controller.ui[ACTION]) {
	          return;
	        } else {
	          controller.$destroyUI();
	        }
	        controller.ui[ACTION] = new notTable(this.tweakUIOptions(CRUDActionList.prepareOptions(controller)));
	        controller.emit(`after:render:${ACTION}`, params, controller.ui[ACTION]);
	      } catch (e) {
	        //informing about exception
	        controller.emit(`exception:render:${ACTION}`, params, e);
	        controller.report(e);
	        controller.showErrorMessage(e);
	      } finally {
	        controller.removeLoadingScreen && controller.removeLoadingScreen();
	      }
	    }
	  }, {
	    key: "prepareOptions",
	    value: function prepareOptions(controller) {
	      const DEFAULT_OPTIONS_TABLE = {
	        interface: controller.getOptions(`${ACTION}.interface`, {
	          combined: true,
	          factory: controller.getInterface()
	        }),
	        fields: undefined,
	        showSelect: undefined,
	        getItemId: undefined,
	        idField: undefined,
	        preload: {},
	        filterUI: controller.getOptions(`${ACTION}.filterUI`),
	        pager: {
	          size: 50,
	          page: 0
	        },
	        sorter: {
	          id: -1
	        },
	        filter: undefined,
	        ui: undefined
	      };
	      //forming actions buttons list
	      let ACTIONS_LIST = [...controller.getOptions(`${ACTION}.actions`, [])];
	      ACTIONS_LIST = this.tweakActionsList(controller, ACTIONS_LIST);
	      //
	      const TABLE_OPTIONS = {
	        options: {
	          targetEl: controller.getContainerInnerElement(),
	          endless: false,
	          actions: ACTIONS_LIST
	        }
	      };
	      Object.keys(DEFAULT_OPTIONS_TABLE).forEach(function (key) {
	        let optVal = controller.getOptions(`${ACTION}.${key}`, DEFAULT_OPTIONS_TABLE[key]);
	        if (typeof optVal !== "undefined") {
	          TABLE_OPTIONS.options[key] = optVal;
	        }
	      });
	      return TABLE_OPTIONS;
	    }
	  }]);
	}();

	var CRUDActions = {
	  create: CRUDActionCreate,
	  details: CRUDActionDetails,
	  update: CRUDActionUpdate,
	  delete: CRUDActionDelete,
	  list: CRUDActionList
	};

	const BREADCRUMBS = [];
	const TITLE_FIELDS_PRIORITY = ["title", "label", "id", "name"];
	const LOADING_SCREEN_UI_NAME = "loading_screen";
	var _actions = /*#__PURE__*/new WeakMap();
	var _router = /*#__PURE__*/new WeakMap();
	var _preloader = /*#__PURE__*/new WeakMap();
	let notCRUD = /*#__PURE__*/function (_notController) {
	  function notCRUD(app, name, {
	    actions,
	    router,
	    preloader
	  } = {
	    actions: undefined,
	    router: undefined,
	    preloader: undefined
	  }) {
	    var _this;
	    _classCallCheck(this, notCRUD);
	    _this = _callSuper(this, notCRUD, [app, `CRUD.${name}`]);
	    _classPrivateFieldInitSpec(_this, _actions, {
	      ...CRUDActions
	    });
	    _classPrivateFieldInitSpec(_this, _router, notCRUDRouter);
	    _classPrivateFieldInitSpec(_this, _preloader, CRUDVariantsPreloader);
	    _defineProperty(_this, "TITLE_FIELDS_PRIORITY", TITLE_FIELDS_PRIORITY);
	    _defineProperty(_this, "TOP_CLASS", ["box"]);
	    _defineProperty(_this, "MAIN_CLASS", ["box"]);
	    _defineProperty(_this, "BOTTOM_CLASS", ["box"]);
	    _defineProperty(_this, "WS_CHECK_INTERVAL", 200);
	    if (actions) {
	      // @ts-ignore
	      _classPrivateFieldSet2(_actions, _this, {
	        ..._classPrivateFieldGet2(_actions, _this),
	        ...actions
	      });
	    }
	    if (router) {
	      _classPrivateFieldSet2(_router, _this, router);
	    }
	    if (preloader) {
	      _classPrivateFieldSet2(_preloader, _this, preloader);
	    }
	    _this.ui = {};
	    _this.els = {};
	    _this.setOptions("names", {
	      module: "",
	      plural: "plural",
	      single: "single"
	    });
	    _this.setOptions("containerSelector", _this.app?.getOptions("crud.containerSelector"));
	    _this.buildFrame();
	    return _possibleConstructorReturn(_this, _this);
	  }
	  _inherits(notCRUD, _notController);
	  return _createClass(notCRUD, [{
	    key: "setValidators",
	    value: function setValidators(validators) {
	      //not-module-name -> [not,module,name]
	      const ModuleNameParts = this.getModuleName().split("-");
	      //[not,module,name] -> ModuleName
	      const ModuleName = (ModuleNameParts[0] === "not" ? ModuleNameParts.splice(1) : ModuleNameParts).map(notCommon$1.capitalizeFirstLetter).join("");
	      const serviceName = `ns${ModuleName}Common`;
	      const CommonModuleService = this.app?.getService(serviceName);
	      this.setWorking("validators", CommonModuleService.augmentValidators(validators));
	    }
	  }, {
	    key: "getValidators",
	    value: function getValidators() {
	      return this.getWorking("validators");
	    }
	  }, {
	    key: "start",
	    value: function start() {
	      var _this2 = this;
	      let newHead = [];
	      if (this.getModuleName() && this.getOptions("names.module")) {
	        newHead.push({
	          title: this.getOptions("names.module"),
	          url: false
	        });
	      }
	      newHead.push({
	        title: this.getOptions("names.plural"),
	        url: this.getModelURL()
	      });
	      BREADCRUMBS.splice(0, BREADCRUMBS.length, ...newHead);
	      notBreadcrumbs.setHead(BREADCRUMBS).render({
	        root: "",
	        target: this.els.top,
	        navigate: function (url) {
	          return _this2.app?.getWorking("router").navigate(url);
	        }
	      });
	      this.route(this.getOptions("params"));
	    }
	  }, {
	    key: "startWhenWSClientReady",
	    value: function startWhenWSClientReady() {
	      var _this3 = this;
	      if (this.app?.getWSClient()) {
	        if (this.app?.getWSClient().isConnected()) {
	          this.start();
	        } else {
	          this.app.getWSClient().once("connected", this.startWhenWSClientReady.bind(this));
	        }
	      } else {
	        setTimeout(function () {
	          return _this3.startWhenWSClientReady();
	        }, this.WS_CHECK_INTERVAL);
	      }
	    }
	  }, {
	    key: "setBreadcrumbs",
	    value: function setBreadcrumbs(tail) {
	      notBreadcrumbs.setTail(tail).update();
	    }
	  }, {
	    key: "backToList",
	    value: function backToList() {
	      this.navigate(this.linkBackToList());
	    }
	  }, {
	    key: "linkBackToList",
	    value: function linkBackToList() {
	      return this.getModelURL();
	    }
	  }, {
	    key: "afterAction",
	    value: function afterAction(action = "list") {
	      let navBack = this.app?.getOptions("crud.navigateBackAfter", []);
	      if (navBack && Array.isArray(navBack) && navBack.indexOf(action) > -1) {
	        window.history.back();
	      } else {
	        this.backToList();
	      }
	    }
	  }, {
	    key: "buildFrame",
	    value: function buildFrame() {
	      var _this4 = this;
	      let el = document.querySelector(this.app?.getOptions("crud.containerSelector", "body"));
	      while (el.firstChild) {
	        el.removeChild(el.firstChild);
	      }
	      this.els.top = document.createElement("div");
	      this.els.top.id = "crud-top";
	      this.getFrameClasses().TOP_CLASS.forEach(function (name) {
	        return _this4.els.top.classList.add(name);
	      });
	      el.appendChild(this.els.top);
	      this.els.main = document.createElement("div");
	      this.els.main.id = "crud-main";
	      this.getFrameClasses().MAIN_CLASS.forEach(function (name) {
	        return _this4.els.main.classList.add(name);
	      });
	      el.appendChild(this.els.main);
	      this.els.bottom = document.createElement("div");
	      this.els.bottom.id = "crud-bottom";
	      this.getFrameClasses().BOTTOM_CLASS.forEach(function (name) {
	        return _this4.els.bottom.classList.add(name);
	      });
	      el.appendChild(this.els.bottom);
	    }
	  }, {
	    key: "getFrameClasses",
	    value: function getFrameClasses() {
	      return {
	        TOP_CLASS: this.TOP_CLASS,
	        MAIN_CLASS: this.MAIN_CLASS,
	        BOTTOM_CLASS: this.BOTTOM_CLASS
	      };
	    }
	  }, {
	    key: "getContainerTopElement",
	    value: function getContainerTopElement() {
	      return this.els.top;
	    }
	  }, {
	    key: "getContainerInnerElement",
	    value: function getContainerInnerElement() {
	      return this.els.main;
	    }
	  }, {
	    key: "getContainerBottomElement",
	    value: function getContainerBottomElement() {
	      return this.els.bottom;
	    }
	  }, {
	    key: "preloadVariants",
	    value: async function preloadVariants(type = "list") {
	      await _classPrivateFieldGet2(_preloader, this).preload(this, type);
	    }
	  }, {
	    key: "getTitleFromLib",
	    value: function getTitleFromLib(propName, id) {
	      const actionName = this.getCurrentAction();
	      this.debug && this.debug("notCRUD.getTitleFromLib is obsolete, use notCRUD.getPreloadedVariantTitle(actionName, propName, id)");
	      return this.getPreloadedVariantTitle(actionName, propName, id);
	    }
	  }, {
	    key: "getPreloadedVariants",
	    value: function getPreloadedVariants(actionName, propName) {
	      return this.getOptions(`variants.${actionName}.${propName}`, []);
	    }
	  }, {
	    key: "getPreloadedVariantTitle",
	    value: function getPreloadedVariantTitle(actionName, propName, id) {
	      const variants = this.getPreloadedVariants(actionName, propName);
	      const item = variants.find(function (item) {
	        return item.id === id;
	      });
	      if (item) {
	        return item.title;
	      } else {
	        return id;
	      }
	    }
	  }, {
	    key: "getItemTitle",
	    value: function getItemTitle(item) {
	      const fieldName = this.TITLE_FIELDS_PRIORITY.find(function (key) {
	        return notCommon$1.objHas(item, key);
	      });
	      if (fieldName) {
	        return item[fieldName];
	      } else {
	        return "";
	      }
	    }
	  }, {
	    key: "createDefault",
	    value: function createDefault() {
	      return this.getModel({}).toDefault();
	    }
	  }, {
	    key: "route",
	    value: function route(params = []) {
	      try {
	        return _classPrivateFieldGet2(_router, this).route(this, params);
	      } catch (e) {
	        this.report(e);
	        this.showErrorMessage(e);
	      }
	    }
	  }, {
	    key: "actionHandlerExists",
	    value: function actionHandlerExists(actionName) {
	      if (Object.keys(_classPrivateFieldGet2(_actions, this)).includes(actionName)) {
	        return true;
	      }
	      if (typeof this["run" + notCommon$1.capitalizeFirstLetter(actionName)] === "function") {
	        return true;
	      }
	      return false;
	    }
	  }, {
	    key: "runAction",
	    value: function runAction(actionName, params) {
	      if (Object.keys(_classPrivateFieldGet2(_actions, this)).includes(actionName)) {
	        return _classPrivateFieldGet2(_actions, this)[actionName].run(this, params);
	      } else if (typeof this["run" + notCommon$1.capitalizeFirstLetter(actionName)] === "function") {
	        return this["run" + notCommon$1.capitalizeFirstLetter(actionName)](params);
	      } else {
	        throw new Error(`No such action: ${actionName} in contoller ${this.getWorking("name")}`);
	      }
	    }

	    /**
	     *  Changes location to create page, after delay
	     *  @param {number|string} [delay=0] number for ms, or string if we use `delays` alises aka SHORT, NORMAL, LONG
	     */
	  }, {
	    key: "goCreate",
	    value: function goCreate(delay = 0) {
	      this.goAfterDelay(this.getModelActionURL("", "create"), delay);
	    }

	    /**
	     *  Changes location to document details page, after delay
	     *  @param {string}         id          target document id
	     *  @param {number|string}  [delay=0]   number for ms, or string if we use `delays` alises aka SHORT, NORMAL, LONG
	     */
	  }, {
	    key: "goDetails",
	    value: function goDetails(id, delay = 0) {
	      this.goAfterDelay(this.getModelActionURL(id, ""), delay);
	    }

	    /**
	     * Changes location to document update page, after delay
	     * @param {string}          id          target document id
	     *  @param {number|string}  [delay=0]   number for ms, or string if we use `delays` alises aka SHORT, NORMAL, LONG
	     */
	  }, {
	    key: "goUpdate",
	    value: function goUpdate(id, delay = 0) {
	      this.goAfterDelay(this.getModelActionURL(id, "update"), delay);
	    }

	    /**
	     *  Changes location to document delete page, after delay
	     *  @param {string}         id          target document id
	     *  @param {number|string}  [delay=0]   number for ms, or string if we use `delays` alises aka SHORT, NORMAL, LONG
	     */
	  }, {
	    key: "goDelete",
	    value: function goDelete(id, delay = 0) {
	      this.goAfterDelay(this.getModelActionURL(id, "delete"), delay);
	    }

	    /**
	     *  Changes location to documents list page, after delay
	     *  @param {number|string}  [delay=0]   number for ms, or string if we use `delays` alises aka SHORT, NORMAL, LONG
	     */
	  }, {
	    key: "goList",
	    value: function goList(delay = 0) {
	      this.goAfterDelay(this.getModelURL(), delay);
	    }

	    /**
	     *
	     * @param {string} url
	     * @param {number|string} delay
	     */
	  }, {
	    key: "goAfterDelay",
	    value: function goAfterDelay(url, delay = 0) {
	      var _this5 = this;
	      this.navigateWithDelay(url, delay, function () {
	        return _this5.$destroyUI();
	      });
	    }

	    /**
	     *  Changes location to documents list page, after delay
	     *  @param {number|string}  [delay=0]   number for ms, or string if we use `delays` alises aka SHORT, NORMAL, LONG
	     */
	  }, {
	    key: "goBack",
	    value: function goBack(delay = 0) {
	      this.goList(delay);
	    }
	  }, {
	    key: "onActionSubmit",
	    value: async function onActionSubmit(action, item) {
	      let state = true;
	      const actionUI = this.ui[action];
	      if (actionUI) {
	        try {
	          actionUI.setLoading();
	          let result = await this.getModel(item)[`$${action}`]();
	          state = actionUI.processResult(result);
	        } catch (e) {
	          state = actionUI.processResult(e);
	        } finally {
	          actionUI.resetLoading();
	          // eslint-disable-next-line no-unsafe-finally
	          return state;
	        }
	      } else {
	        throw new Error("Action UI doesnt exist");
	      }
	    }
	  }, {
	    key: "$destroyUI",
	    value: function $destroyUI() {
	      for (let name in this.ui) {
	        this.destroyUIByName(name);
	      }
	    }
	  }, {
	    key: "destroyUIByName",
	    value: function destroyUIByName(name) {
	      // @ts-ignore
	      if (Object.hasOwn(this.ui, name)) {
	        this.ui[name].$destroy && this.ui[name].$destroy();
	        this.ui[name].destroy && this.ui[name].destroy();
	        delete this.ui[name];
	      }
	    }
	  }, {
	    key: "showErrorMessage",
	    value: function showErrorMessage(res) {
	      this.error && this.error(res);
	      this.app && this.app.emit("error", {
	        title: "Произошла ошибка",
	        message: res.message ? res.message : UICommon$1.ERROR_DEFAULT
	      });
	      CRUDMessage.error(this, "Произошла ошибка", res.message ? res.message : UICommon$1.ERROR_DEFAULT);
	    }
	  }, {
	    key: "showSuccessMessage",
	    value: function showSuccessMessage(title, message) {
	      this.app && this.app.emit("success", {
	        title,
	        message
	      });
	      CRUDMessage.success(this, title, message);
	    }
	  }, {
	    key: "setUI",
	    value: function setUI(name, val, singleUI = true) {
	      if (singleUI) {
	        this.$destroyUI();
	      }
	      this.ui[name] = val;
	    }
	  }, {
	    key: "getUI",
	    value: function getUI(name) {
	      return this.ui[name];
	    }
	  }, {
	    key: "getActionUI",
	    value: function getActionUI() {
	      return this.ui[this.getCurrentAction()];
	    }
	  }, {
	    key: "renderLoadingScreen",
	    value: function renderLoadingScreen() {
	      this.setUI(LOADING_SCREEN_UI_NAME, this.createLoaderUI());
	    }
	  }, {
	    key: "removeLoadingScreen",
	    value: function removeLoadingScreen() {
	      this.destroyUIByName(LOADING_SCREEN_UI_NAME);
	    }
	  }, {
	    key: "createLoaderUI",
	    value: function createLoaderUI() {
	      return mount(Ui_loader, {
	        target: this.getContainerInnerElement(),
	        props: {
	          loading: true,
	          title: ""
	        }
	      });
	    }
	  }], [{
	    key: "LABELS",
	    get: function () {
	      return Object.freeze({
	        plural: `${this.MODULE_NAME}:${this.MODEL_NAME}_label_plural`,
	        single: `${this.MODULE_NAME}:${this.MODEL_NAME}_label_single`
	      });
	    }
	  }, {
	    key: "getMenu",
	    value: function getMenu(itemCustomProps = {}) {
	      return [{
	        section: this.MODULE_NAME,
	        title: this.LABELS.plural,
	        url: `/${notCommon$1.lowerFirstLetter(this.MODULE_NAME)}/${notCommon$1.lowerFirstLetter(this.MODEL_NAME)}`,
	        ...itemCustomProps
	      }];
	    }
	  }]);
	}(notController);
	_defineProperty(notCRUD, "ERROR_DEFAULT", UICommon$1.ERROR_DEFAULT);

	const ROUTE_LIST = "list";
	/**
	 * Runs controller action by name that gets from URI params
	 * @class
	 */
	let notCRUDPlainRouter = /*#__PURE__*/function () {
	  function notCRUDPlainRouter() {
	    _classCallCheck(this, notCRUDPlainRouter);
	  }
	  return _createClass(notCRUDPlainRouter, null, [{
	    key: "extractActionName",
	    value:
	    /**
	     * Returns first item from params or throws Error
	     * @param {string[]} params array of strings parsed from URI by route rules
	     * @returns {string}
	     */
	    function extractActionName(params) {
	      if (params.length > 0) {
	        return params[0];
	      }
	      return this.DEFAULT_ROUTE;
	    }

	    /**
	     * Runs controller action or throws
	     * @param {object} controller   instance of notController descendant
	     * @param {string[]} params
	     */
	  }, {
	    key: "route",
	    value: function route(controller, params) {
	      try {
	        const actionName = this.extractActionName(params);
	        controller.setCurrentAction(actionName);
	        return controller.runAction(actionName, params);
	      } catch (e) {
	        controller.report(e);
	        controller.showErrorMessage(e);
	      }
	    }
	  }]);
	}();
	_defineProperty(notCRUDPlainRouter, "DEFAULT_ROUTE", ROUTE_LIST);

	/**
	 * Runs controller action by name that gets from URI params
	 * @class
	 */
	let notCRUDRouterSwitch = /*#__PURE__*/function () {
	  function notCRUDRouterSwitch() {
	    _classCallCheck(this, notCRUDRouterSwitch);
	  }
	  return _createClass(notCRUDRouterSwitch, null, [{
	    key: "routesVariants",
	    get:
	    /**
	     * Variants of this action
	     */
	    function () {
	      return {
	        /**
	        routeName: Action
	         */
	      };
	    }

	    /**
	     * Returns true if variant name is valid
	     * @param {string} name    name of route variant
	     * @returns {boolean}
	     */
	  }, {
	    key: "isRouteVariantValid",
	    value: function isRouteVariantValid(name) {
	      return name !== "" && notCommon$1.objHas(this.routesVariants, name);
	    }

	    /**
	     * This function returns which of routes variant should be executed
	     * @param {object} controller   instance of notController descendant
	     * @param {string[]}    params  params passed to router
	     * @returns {Promise<string>}    name of route variant
	     */
	    // eslint-disable-next-line no-unused-vars
	  }, {
	    key: "determineRoute",
	    value: async function determineRoute(controller, params = []) {
	      return "";
	    }

	    /**
	     * Runs controller action or throws
	     * @param {object} controller   instance of notController descendant
	     * @param {string[]} params
	     */
	  }, {
	    key: "route",
	    value: async function route(controller, params) {
	      try {
	        const actionName = await this.determineRoute(controller, params);
	        if (this.isRouteVariantValid(actionName)) {
	          controller.setCurrentAction(actionName);
	          const routerAction = this.routesVariants[actionName];
	          if (notCommon$1.isAsync(routerAction.run)) {
	            await routerAction.run(controller, params);
	          } else {
	            routerAction.run(controller, params);
	          }
	        } else {
	          throw new Error(`No such action: ${actionName} in contoller ${controller.getWorking("name")}`);
	        }
	      } catch (e) {
	        controller.report(e);
	        controller.showErrorMessage(e);
	      }
	    }
	  }]);
	}();

	const emptyResult = function () {
	  return {
	    list: [],
	    count: 0,
	    page: 0,
	    pages: 0,
	    skip: 0
	  };
	};
	let notServiceModelSearch = /*#__PURE__*/function () {
	  function notServiceModelSearch(app, modelName) {
	    _classCallCheck(this, notServiceModelSearch);
	    this.modelName = modelName;
	    this.app = app;
	  }
	  return _createClass(notServiceModelSearch, [{
	    key: "destroy",
	    value: function destroy() {
	      delete this.app;
	    }
	  }, {
	    key: "getSearchRouteName",
	    value: function getSearchRouteName() {
	      return "listAndCount";
	    }
	  }, {
	    key: "getDataLoadRouteName",
	    value: function getDataLoadRouteName() {
	      return "get";
	    }
	  }, {
	    key: "transformSearchResult",
	    value: function transformSearchResult(result) {
	      var _this = this;
	      result.list = result.list.map(function (item) {
	        return {
	          _id: item._id,
	          id: item[`${_this.modelName}ID`],
	          title: item.name || item.title || item.label || item.username
	        };
	      });
	      return result;
	    }
	  }, {
	    key: "transformSelectedResult",
	    value: function transformSelectedResult(result) {
	      return {
	        _id: result._id,
	        [`${this.modelName}ID`]: result.id,
	        title: result.title
	      };
	    }
	  }, {
	    key: "searchByTerm",
	    value: async function searchByTerm(term) {
	      try {
	        if (term.value.length > 2) {
	          const model = this.app.getModel(this.modelName);
	          model.setSearch(term.value);
	          const response = await model[`$${this.getSearchRouteName()}`]();
	          if (response.status === "ok") {
	            return this.transformSearchResult(response.result);
	          } else {
	            return emptyResult();
	          }
	        } else {
	          return emptyResult();
	        }
	      } catch {
	        return emptyResult();
	      }
	    }
	  }, {
	    key: "openSelector",
	    value: function openSelector() {
	      var _this2 = this;
	      return new Promise(function (resolve, reject) {
	        try {
	          const el = mount(Ui_generic_selector, {
	            target: document.body,
	            props: {}
	          });
	          el.$on("termChange", async function ({
	            detail
	          }) {
	            const results = await _this2.searchByTerm(detail);
	            el.$set({
	              results
	            });
	          });
	          el.$on("next", function () {
	            console.log("next selector results");
	          });
	          el.$on("prev", function () {
	            console.log("prev selector results");
	          });
	          el.$on("reject", function () {
	            unmount(el);
	            reject();
	          });
	          el.$on("resolve", function ({
	            detail
	          }) {
	            unmount(el);
	            resolve(_this2.transformSelectedResult(detail));
	          });
	        } catch (e) {
	          _this2.app.error(e);
	          reject(e);
	        }
	      });
	    }
	  }, {
	    key: "loadData",
	    value: async function loadData(_id) {
	      try {
	        if (_id && _id.length > 10) {
	          const model = this.app.getModel(this.modelName, {
	            _id
	          });
	          const response = await model[`$${this.getDataLoadRouteName()}`]();
	          if (response.status === "ok") {
	            return response.result;
	          } else {
	            return null;
	          }
	        } else {
	          return null;
	        }
	      } catch (e) {
	        this.app.error(e);
	        return null;
	      }
	    }
	  }]);
	}();

	//import 'babel-polyfill/dist/polyfill';

	const ncCRUD = notCRUD; //legacy alias

	var Frame = /*#__PURE__*/Object.freeze({
		__proto__: null,
		COMPONENTS: COMPONENTS$1,
		FIELDS: FIELDS$1,
		UIForm: Form,
		VARIANTS: VARIANTS$1,
		createCRUDActionUIView: create_crud_action_ui_view,
		ncCRUD: ncCRUD,
		notAPI: index,
		notApp: notApp,
		notBase: notBase,
		notBreadcrumbs: notBreadcrumbs,
		notCRUD: notCRUD,
		notCRUDRouter: notCRUDRouter,
		notCRUDRouterPlain: notCRUDPlainRouter,
		notCRUDRouterSwitch: notCRUDRouterSwitch,
		notCommon: notCommon$1,
		notController: notController,
		notForm: notForm,
		notFormHelpers: FormHelpers,
		notFormRules: notFormRules,
		notFormSet: notFormSet,
		notFormUtils: notFormUtils$1,
		notInterface: notInterface,
		notPath: notPath,
		notRecord: notRecord,
		notRouter: notRouter$1,
		notServiceModelSearch: notServiceModelSearch,
		notSideMenu: notSideMenu,
		notStores: stores,
		notTable: notTable,
		notTopMenu: notTopMenu
	});

	const Locale = {
	  LOCALE,
	  say,
	  notLocale: notLocale$1
	};
	const UICommon = UICommon$1;
	const {
	  notCommon,
	  COMPONENTS,
	  FIELDS,
	  VARIANTS,
	  notFormUtils
	} = Frame;
	Object.keys(Elements).forEach(function (componentsSetName) {
	  Object.keys(Elements[componentsSetName]).forEach(function (componentName) {
	    notFormUtils$1.addComponent(componentName, Elements[componentsSetName][componentName]);
	  });
	});

	exports.COMPONENTS = COMPONENTS;
	exports.Elements = Elements;
	exports.FIELDS = FIELDS;
	exports.Frame = Frame;
	exports.LOCALE = LOCALE;
	exports.Locale = Locale;
	exports.UICommon = UICommon;
	exports.VARIANTS = VARIANTS;
	exports.notCommon = notCommon;
	exports.notFormUtils = notFormUtils;
	exports.notLocale = notLocale$1;
	exports.say = say;
	exports.svelte = indexClient;

	return exports;

})({});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
