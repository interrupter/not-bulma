var notBulma = (function (exports) {
	'use strict';

	var DEV = true;

	// Store the references to globals in case someone tries to monkey patch these, causing the below
	// to de-opt (this occurs often when using popular extensions).
	var is_array = Array.isArray;
	var array_from = Array.from;
	var define_property = Object.defineProperty;
	var get_descriptor = Object.getOwnPropertyDescriptor;
	var get_descriptors = Object.getOwnPropertyDescriptors;
	var object_prototype = Object.prototype;
	var array_prototype = Array.prototype;
	var get_prototype_of = Object.getPrototypeOf;

	/**
	 * @param {any} thing
	 * @returns {thing is Function}
	 */
	function is_function(thing) {
		return typeof thing === 'function';
	}

	const noop = () => {};

	/** @param {Function} fn */
	function run$2(fn) {
		return fn();
	}

	/** @param {Array<() => void>} arr */
	function run_all(arr) {
		for (var i = 0; i < arr.length; i++) {
			arr[i]();
		}
	}

	const DERIVED = 1 << 1;
	const EFFECT = 1 << 2;
	const RENDER_EFFECT = 1 << 3;
	const BLOCK_EFFECT = 1 << 4;
	const BRANCH_EFFECT = 1 << 5;
	const ROOT_EFFECT = 1 << 6;
	const BOUNDARY_EFFECT = 1 << 7;
	const UNOWNED = 1 << 8;
	const DISCONNECTED = 1 << 9;
	const CLEAN = 1 << 10;
	const DIRTY = 1 << 11;
	const MAYBE_DIRTY = 1 << 12;
	const INERT = 1 << 13;
	const DESTROYED = 1 << 14;
	const EFFECT_RAN = 1 << 15;
	/** 'Transparent' effects do not create a transition boundary */
	const EFFECT_TRANSPARENT = 1 << 16;
	/** Svelte 4 legacy mode props need to be handled with deriveds and be recognized elsewhere, hence the dedicated flag */
	const LEGACY_DERIVED_PROP = 1 << 17;
	const INSPECT_EFFECT = 1 << 18;
	const HEAD_EFFECT = 1 << 19;
	const EFFECT_HAS_DERIVED = 1 << 20;

	const STATE_SYMBOL = Symbol('$state');
	const STATE_SYMBOL_METADATA = Symbol('$state metadata');
	const LEGACY_PROPS = Symbol('legacy props');
	const LOADING_ATTR_SYMBOL = Symbol('');

	/** @import { Equals } from '#client' */
	/** @type {Equals} */
	function equals(value) {
		return value === this.v;
	}

	/**
	 * @param {unknown} a
	 * @param {unknown} b
	 * @returns {boolean}
	 */
	function safe_not_equal(a, b) {
		return a != a
			? b == b
			: a !== b || (a !== null && typeof a === 'object') || typeof a === 'function';
	}

	/** @type {Equals} */
	function safe_equals(value) {
		return !safe_not_equal(value, this.v);
	}

	/* This file is generated by scripts/process-messages/index.js. Do not edit! */


	/**
	 * Using `bind:value` together with a checkbox input is not allowed. Use `bind:checked` instead
	 * @returns {never}
	 */
	function bind_invalid_checkbox_value() {
		{
			const error = new Error(`bind_invalid_checkbox_value\nUsing \`bind:value\` together with a checkbox input is not allowed. Use \`bind:checked\` instead\nhttps://svelte.dev/e/bind_invalid_checkbox_value`);

			error.name = 'Svelte error';
			throw error;
		}
	}

	/**
	 * A derived value cannot reference itself recursively
	 * @returns {never}
	 */
	function derived_references_self() {
		{
			const error = new Error(`derived_references_self\nA derived value cannot reference itself recursively\nhttps://svelte.dev/e/derived_references_self`);

			error.name = 'Svelte error';
			throw error;
		}
	}

	/**
	 * `%rune%` cannot be used inside an effect cleanup function
	 * @param {string} rune
	 * @returns {never}
	 */
	function effect_in_teardown(rune) {
		{
			const error = new Error(`effect_in_teardown\n\`${rune}\` cannot be used inside an effect cleanup function\nhttps://svelte.dev/e/effect_in_teardown`);

			error.name = 'Svelte error';
			throw error;
		}
	}

	/**
	 * Effect cannot be created inside a `$derived` value that was not itself created inside an effect
	 * @returns {never}
	 */
	function effect_in_unowned_derived() {
		{
			const error = new Error(`effect_in_unowned_derived\nEffect cannot be created inside a \`$derived\` value that was not itself created inside an effect\nhttps://svelte.dev/e/effect_in_unowned_derived`);

			error.name = 'Svelte error';
			throw error;
		}
	}

	/**
	 * `%rune%` can only be used inside an effect (e.g. during component initialisation)
	 * @param {string} rune
	 * @returns {never}
	 */
	function effect_orphan(rune) {
		{
			const error = new Error(`effect_orphan\n\`${rune}\` can only be used inside an effect (e.g. during component initialisation)\nhttps://svelte.dev/e/effect_orphan`);

			error.name = 'Svelte error';
			throw error;
		}
	}

	/**
	 * Maximum update depth exceeded. This can happen when a reactive block or effect repeatedly sets a new value. Svelte limits the number of nested updates to prevent infinite loops
	 * @returns {never}
	 */
	function effect_update_depth_exceeded() {
		{
			const error = new Error(`effect_update_depth_exceeded\nMaximum update depth exceeded. This can happen when a reactive block or effect repeatedly sets a new value. Svelte limits the number of nested updates to prevent infinite loops\nhttps://svelte.dev/e/effect_update_depth_exceeded`);

			error.name = 'Svelte error';
			throw error;
		}
	}

	/**
	 * Failed to hydrate the application
	 * @returns {never}
	 */
	function hydration_failed() {
		{
			const error = new Error(`hydration_failed\nFailed to hydrate the application\nhttps://svelte.dev/e/hydration_failed`);

			error.name = 'Svelte error';
			throw error;
		}
	}

	/**
	 * Could not `{@render}` snippet due to the expression being `null` or `undefined`. Consider using optional chaining `{@render snippet?.()}`
	 * @returns {never}
	 */
	function invalid_snippet() {
		{
			const error = new Error(`invalid_snippet\nCould not \`{@render}\` snippet due to the expression being \`null\` or \`undefined\`. Consider using optional chaining \`{@render snippet?.()}\`\nhttps://svelte.dev/e/invalid_snippet`);

			error.name = 'Svelte error';
			throw error;
		}
	}

	/**
	 * `%name%(...)` cannot be used in runes mode
	 * @param {string} name
	 * @returns {never}
	 */
	function lifecycle_legacy_only(name) {
		{
			const error = new Error(`lifecycle_legacy_only\n\`${name}(...)\` cannot be used in runes mode\nhttps://svelte.dev/e/lifecycle_legacy_only`);

			error.name = 'Svelte error';
			throw error;
		}
	}

	/**
	 * Cannot do `bind:%key%={undefined}` when `%key%` has a fallback value
	 * @param {string} key
	 * @returns {never}
	 */
	function props_invalid_value(key) {
		{
			const error = new Error(`props_invalid_value\nCannot do \`bind:${key}={undefined}\` when \`${key}\` has a fallback value\nhttps://svelte.dev/e/props_invalid_value`);

			error.name = 'Svelte error';
			throw error;
		}
	}

	/**
	 * Rest element properties of `$props()` such as `%property%` are readonly
	 * @param {string} property
	 * @returns {never}
	 */
	function props_rest_readonly(property) {
		{
			const error = new Error(`props_rest_readonly\nRest element properties of \`$props()\` such as \`${property}\` are readonly\nhttps://svelte.dev/e/props_rest_readonly`);

			error.name = 'Svelte error';
			throw error;
		}
	}

	/**
	 * The `%rune%` rune is only available inside `.svelte` and `.svelte.js/ts` files
	 * @param {string} rune
	 * @returns {never}
	 */
	function rune_outside_svelte(rune) {
		{
			const error = new Error(`rune_outside_svelte\nThe \`${rune}\` rune is only available inside \`.svelte\` and \`.svelte.js/ts\` files\nhttps://svelte.dev/e/rune_outside_svelte`);

			error.name = 'Svelte error';
			throw error;
		}
	}

	/**
	 * Property descriptors defined on `$state` objects must contain `value` and always be `enumerable`, `configurable` and `writable`.
	 * @returns {never}
	 */
	function state_descriptors_fixed() {
		{
			const error = new Error(`state_descriptors_fixed\nProperty descriptors defined on \`$state\` objects must contain \`value\` and always be \`enumerable\`, \`configurable\` and \`writable\`.\nhttps://svelte.dev/e/state_descriptors_fixed`);

			error.name = 'Svelte error';
			throw error;
		}
	}

	/**
	 * Cannot set prototype of `$state` object
	 * @returns {never}
	 */
	function state_prototype_fixed() {
		{
			const error = new Error(`state_prototype_fixed\nCannot set prototype of \`$state\` object\nhttps://svelte.dev/e/state_prototype_fixed`);

			error.name = 'Svelte error';
			throw error;
		}
	}

	/**
	 * Reading state that was created inside the same derived is forbidden. Consider using `untrack` to read locally created state
	 * @returns {never}
	 */
	function state_unsafe_local_read() {
		{
			const error = new Error(`state_unsafe_local_read\nReading state that was created inside the same derived is forbidden. Consider using \`untrack\` to read locally created state\nhttps://svelte.dev/e/state_unsafe_local_read`);

			error.name = 'Svelte error';
			throw error;
		}
	}

	/**
	 * Updating state inside a derived or a template expression is forbidden. If the value should not be reactive, declare it without `$state`
	 * @returns {never}
	 */
	function state_unsafe_mutation() {
		{
			const error = new Error(`state_unsafe_mutation\nUpdating state inside a derived or a template expression is forbidden. If the value should not be reactive, declare it without \`$state\`\nhttps://svelte.dev/e/state_unsafe_mutation`);

			error.name = 'Svelte error';
			throw error;
		}
	}

	let legacy_mode_flag = false;

	function enable_legacy_mode_flag() {
		legacy_mode_flag = true;
	}

	const EACH_ITEM_REACTIVE = 1;
	const EACH_INDEX_REACTIVE = 1 << 1;
	/** See EachBlock interface metadata.is_controlled for an explanation what this is */
	const EACH_IS_CONTROLLED = 1 << 2;
	const EACH_IS_ANIMATED = 1 << 3;
	const EACH_ITEM_IMMUTABLE = 1 << 4;

	const PROPS_IS_IMMUTABLE = 1;
	const PROPS_IS_RUNES = 1 << 1;
	const PROPS_IS_UPDATED = 1 << 2;
	const PROPS_IS_BINDABLE = 1 << 3;
	const PROPS_IS_LAZY_INITIAL = 1 << 4;
	const TRANSITION_GLOBAL = 1 << 2;

	const TEMPLATE_FRAGMENT = 1;
	const TEMPLATE_USE_IMPORT_NODE = 1 << 1;

	const HYDRATION_START = '[';
	/** used to indicate that an `{:else}...` block was rendered */
	const HYDRATION_START_ELSE = '[!';
	const HYDRATION_END = ']';
	const HYDRATION_ERROR = {};

	const UNINITIALIZED = Symbol();

	// Dev-time component properties
	const FILENAME = Symbol('filename');

	const NAMESPACE_SVG = 'http://www.w3.org/2000/svg';

	/* This file is generated by scripts/process-messages/index.js. Do not edit! */


	var bold$1 = 'font-weight: bold';
	var normal$1 = 'font-weight: normal';

	/**
	 * The following properties cannot be cloned with `$state.snapshot` — the return value contains the originals:
	 * 
	 * %properties%
	 * @param {string | undefined | null} [properties]
	 */
	function state_snapshot_uncloneable(properties) {
		{
			console.warn(`%c[svelte] state_snapshot_uncloneable\n%c${properties
			? `The following properties cannot be cloned with \`$state.snapshot\` — the return value contains the originals:

${properties}`
			: "Value cannot be cloned with `$state.snapshot` — the original value was returned"}\nhttps://svelte.dev/e/state_snapshot_uncloneable`, bold$1, normal$1);
		}
	}

	/** @import { Snapshot } from './types' */

	/**
	 * In dev, we keep track of which properties could not be cloned. In prod
	 * we don't bother, but we keep a dummy array around so that the
	 * signature stays the same
	 * @type {string[]}
	 */
	const empty = [];

	/**
	 * @template T
	 * @param {T} value
	 * @param {boolean} [skip_warning]
	 * @returns {Snapshot<T>}
	 */
	function snapshot(value, skip_warning = false) {
		if (!skip_warning) {
			/** @type {string[]} */
			const paths = [];

			const copy = clone(value, new Map(), '', paths);
			if (paths.length === 1 && paths[0] === '') {
				// value could not be cloned
				state_snapshot_uncloneable();
			} else if (paths.length > 0) {
				// some properties could not be cloned
				const slice = paths.length > 10 ? paths.slice(0, 7) : paths.slice(0, 10);
				const excess = paths.length - slice.length;

				let uncloned = slice.map((path) => `- <value>${path}`).join('\n');
				if (excess > 0) uncloned += `\n- ...and ${excess} more`;

				state_snapshot_uncloneable(uncloned);
			}

			return copy;
		}

		return clone(value, new Map(), '', empty);
	}

	/**
	 * @template T
	 * @param {T} value
	 * @param {Map<T, Snapshot<T>>} cloned
	 * @param {string} path
	 * @param {string[]} paths
	 * @param {null | T} original The original value, if `value` was produced from a `toJSON` call
	 * @returns {Snapshot<T>}
	 */
	function clone(value, cloned, path, paths, original = null) {
		if (typeof value === 'object' && value !== null) {
			var unwrapped = cloned.get(value);
			if (unwrapped !== undefined) return unwrapped;

			if (value instanceof Map) return /** @type {Snapshot<T>} */ (new Map(value));
			if (value instanceof Set) return /** @type {Snapshot<T>} */ (new Set(value));

			if (is_array(value)) {
				var copy = /** @type {Snapshot<any>} */ (Array(value.length));
				cloned.set(value, copy);

				if (original !== null) {
					cloned.set(original, copy);
				}

				for (var i = 0; i < value.length; i += 1) {
					var element = value[i];
					if (i in value) {
						copy[i] = clone(element, cloned, `${path}[${i}]` , paths);
					}
				}

				return copy;
			}

			if (get_prototype_of(value) === object_prototype) {
				/** @type {Snapshot<any>} */
				copy = {};
				cloned.set(value, copy);

				if (original !== null) {
					cloned.set(original, copy);
				}

				for (var key in value) {
					// @ts-expect-error
					copy[key] = clone(value[key], cloned, `${path}.${key}` , paths);
				}

				return copy;
			}

			if (value instanceof Date) {
				return /** @type {Snapshot<T>} */ (structuredClone(value));
			}

			if (typeof (/** @type {T & { toJSON?: any } } */ (value).toJSON) === 'function') {
				return clone(
					/** @type {T & { toJSON(): any } } */ (value).toJSON(),
					cloned,
					`${path}.toJSON()` ,
					paths,
					// Associate the instance with the toJSON clone
					value
				);
			}
		}

		if (value instanceof EventTarget) {
			// can't be cloned
			return /** @type {Snapshot<T>} */ (value);
		}

		try {
			return /** @type {Snapshot<T>} */ (structuredClone(value));
		} catch (e) {
			{
				paths.push(path);
			}

			return /** @type {Snapshot<T>} */ (value);
		}
	}

	/** @import { Derived, Reaction, Signal, Value } from '#client' */

	/**
	 * @param {string} label
	 */
	function get_stack$1(label) {
		let error = Error();
		const stack = error.stack;

		if (stack) {
			const lines = stack.split('\n');
			const new_lines = ['\n'];

			for (let i = 0; i < lines.length; i++) {
				const line = lines[i];

				if (line === 'Error') {
					continue;
				}
				if (line.includes('validate_each_keys')) {
					return null;
				}
				if (line.includes('svelte/src/internal')) {
					continue;
				}
				new_lines.push(line);
			}

			if (new_lines.length === 1) {
				return null;
			}

			define_property(error, 'stack', {
				value: new_lines.join('\n')
			});

			define_property(error, 'name', {
				// 'Error' suffix is required for stack traces to be rendered properly
				value: `${label}Error`
			});
		}
		return error;
	}

	/** @import { Derived, Effect, Reaction, Source, Value } from '#client' */

	let inspect_effects = new Set();

	/**
	 * @param {Set<any>} v
	 */
	function set_inspect_effects(v) {
		inspect_effects = v;
	}

	/**
	 * @template V
	 * @param {V} v
	 * @param {Error | null} [stack]
	 * @returns {Source<V>}
	 */
	function source(v, stack) {
		/** @type {Value} */
		var signal = {
			f: 0, // TODO ideally we could skip this altogether, but it causes type errors
			v,
			reactions: null,
			equals,
			version: 0
		};

		{
			signal.created = stack ?? get_stack$1('CreatedAt');
			signal.debug = null;
		}

		return signal;
	}

	/**
	 * @template V
	 * @param {V} v
	 */
	function state(v) {
		return push_derived_source(source(v));
	}

	/**
	 * @template V
	 * @param {V} initial_value
	 * @param {boolean} [immutable]
	 * @returns {Source<V>}
	 */
	/*#__NO_SIDE_EFFECTS__*/
	function mutable_source(initial_value, immutable = false) {
		const s = source(initial_value);
		if (!immutable) {
			s.equals = safe_equals;
		}

		// bind the signal to the component context, in case we need to
		// track updates to trigger beforeUpdate/afterUpdate callbacks
		if (legacy_mode_flag && component_context !== null && component_context.l !== null) {
			(component_context.l.s ??= []).push(s);
		}

		return s;
	}

	/**
	 * @template V
	 * @param {V} v
	 * @param {boolean} [immutable]
	 * @returns {Source<V>}
	 */
	function mutable_state(v, immutable = false) {
		return push_derived_source(mutable_source(v, immutable));
	}

	/**
	 * @template V
	 * @param {Source<V>} source
	 */
	/*#__NO_SIDE_EFFECTS__*/
	function push_derived_source(source) {
		if (active_reaction !== null && (active_reaction.f & DERIVED) !== 0) {
			if (derived_sources === null) {
				set_derived_sources([source]);
			} else {
				derived_sources.push(source);
			}
		}

		return source;
	}

	/**
	 * @template V
	 * @param {Value<V>} source
	 * @param {V} value
	 */
	function mutate(source, value) {
		set(
			source,
			untrack(() => get$2(source))
		);
		return value;
	}

	/**
	 * @template V
	 * @param {Source<V>} source
	 * @param {V} value
	 * @returns {V}
	 */
	function set(source, value) {
		if (
			active_reaction !== null &&
			is_runes() &&
			(active_reaction.f & (DERIVED | BLOCK_EFFECT)) !== 0 &&
			// If the source was created locally within the current derived, then
			// we allow the mutation.
			(derived_sources === null || !derived_sources.includes(source))
		) {
			state_unsafe_mutation();
		}

		return internal_set(source, value);
	}

	/**
	 * @template V
	 * @param {Source<V>} source
	 * @param {V} value
	 * @returns {V}
	 */
	function internal_set(source, value) {
		if (!source.equals(value)) {
			source.v = value;
			source.version = increment_version();

			{
				source.updated = get_stack$1('UpdatedAt');
			}

			mark_reactions(source, DIRTY);

			// If the current signal is running for the first time, it won't have any
			// reactions as we only allocate and assign the reactions after the signal
			// has fully executed. So in the case of ensuring it registers the reaction
			// properly for itself, we need to ensure the current effect actually gets
			// scheduled. i.e: `$effect(() => x++)`
			if (
				is_runes() &&
				active_effect !== null &&
				(active_effect.f & CLEAN) !== 0 &&
				(active_effect.f & BRANCH_EFFECT) === 0
			) {
				if (new_deps !== null && new_deps.includes(source)) {
					set_signal_status(active_effect, DIRTY);
					schedule_effect(active_effect);
				} else {
					if (untracked_writes === null) {
						set_untracked_writes([source]);
					} else {
						untracked_writes.push(source);
					}
				}
			}

			if (inspect_effects.size > 0) {
				const inspects = Array.from(inspect_effects);
				var previously_flushing_effect = is_flushing_effect;
				set_is_flushing_effect(true);
				try {
					for (const effect of inspects) {
						// Mark clean inspect-effects as maybe dirty and then check their dirtiness
						// instead of just updating the effects - this way we avoid overfiring.
						if ((effect.f & CLEAN) !== 0) {
							set_signal_status(effect, MAYBE_DIRTY);
						}
						if (check_dirtiness(effect)) {
							update_effect(effect);
						}
					}
				} finally {
					set_is_flushing_effect(previously_flushing_effect);
				}
				inspect_effects.clear();
			}
		}

		return value;
	}

	/**
	 * @param {Value} signal
	 * @param {number} status should be DIRTY or MAYBE_DIRTY
	 * @returns {void}
	 */
	function mark_reactions(signal, status) {
		var reactions = signal.reactions;
		if (reactions === null) return;

		var runes = is_runes();
		var length = reactions.length;

		for (var i = 0; i < length; i++) {
			var reaction = reactions[i];
			var flags = reaction.f;

			// Skip any effects that are already dirty
			if ((flags & DIRTY) !== 0) continue;

			// In legacy mode, skip the current effect to prevent infinite loops
			if (!runes && reaction === active_effect) continue;

			// Inspect effects need to run immediately, so that the stack trace makes sense
			if ((flags & INSPECT_EFFECT) !== 0) {
				inspect_effects.add(reaction);
				continue;
			}

			set_signal_status(reaction, status);

			// If the signal a) was previously clean or b) is an unowned derived, then mark it
			if ((flags & (CLEAN | UNOWNED)) !== 0) {
				if ((flags & DERIVED) !== 0) {
					mark_reactions(/** @type {Derived} */ (reaction), MAYBE_DIRTY);
				} else {
					schedule_effect(/** @type {Effect} */ (reaction));
				}
			}
		}
	}

	/* This file is generated by scripts/process-messages/index.js. Do not edit! */


	var bold = 'font-weight: bold';
	var normal = 'font-weight: normal';

	/**
	 * The `%attribute%` attribute on `%html%` changed its value between server and client renders. The client value, `%value%`, will be ignored in favour of the server value
	 * @param {string} attribute
	 * @param {string} html
	 * @param {string} value
	 */
	function hydration_attribute_changed(attribute, html, value) {
		{
			console.warn(`%c[svelte] hydration_attribute_changed\n%cThe \`${attribute}\` attribute on \`${html}\` changed its value between server and client renders. The client value, \`${value}\`, will be ignored in favour of the server value\nhttps://svelte.dev/e/hydration_attribute_changed`, bold, normal);
		}
	}

	/**
	 * The value of an `{@html ...}` block %location% changed between server and client renders. The client value will be ignored in favour of the server value
	 * @param {string | undefined | null} [location]
	 */
	function hydration_html_changed(location) {
		{
			console.warn(`%c[svelte] hydration_html_changed\n%c${location ? `The value of an \`{@html ...}\` block ${location} changed between server and client renders. The client value will be ignored in favour of the server value` : "The value of an `{@html ...}` block changed between server and client renders. The client value will be ignored in favour of the server value"}\nhttps://svelte.dev/e/hydration_html_changed`, bold, normal);
		}
	}

	/**
	 * Hydration failed because the initial UI does not match what was rendered on the server. The error occurred near %location%
	 * @param {string | undefined | null} [location]
	 */
	function hydration_mismatch(location) {
		{
			console.warn(`%c[svelte] hydration_mismatch\n%c${"Hydration failed because the initial UI does not match what was rendered on the server"}\nhttps://svelte.dev/e/hydration_mismatch`, bold, normal);
		}
	}

	/**
	 * The `render` function passed to `createRawSnippet` should return HTML for a single element
	 */
	function invalid_raw_snippet_render() {
		{
			console.warn(`%c[svelte] invalid_raw_snippet_render\n%cThe \`render\` function passed to \`createRawSnippet\` should return HTML for a single element\nhttps://svelte.dev/e/invalid_raw_snippet_render`, bold, normal);
		}
	}

	/**
	 * Detected a migrated `$:` reactive block in `%filename%` that both accesses and updates the same reactive value. This may cause recursive updates when converted to an `$effect`.
	 * @param {string} filename
	 */
	function legacy_recursive_reactive_block(filename) {
		{
			console.warn(`%c[svelte] legacy_recursive_reactive_block\n%cDetected a migrated \`$:\` reactive block in \`${filename}\` that both accesses and updates the same reactive value. This may cause recursive updates when converted to an \`$effect\`.\nhttps://svelte.dev/e/legacy_recursive_reactive_block`, bold, normal);
		}
	}

	/**
	 * Tried to unmount a component that was not mounted
	 */
	function lifecycle_double_unmount() {
		{
			console.warn(`%c[svelte] lifecycle_double_unmount\n%cTried to unmount a component that was not mounted\nhttps://svelte.dev/e/lifecycle_double_unmount`, bold, normal);
		}
	}

	/**
	 * %parent% passed a value to %child% with `bind:`, but the value is owned by %owner%. Consider creating a binding between %owner% and %parent%
	 * @param {string} parent
	 * @param {string} child
	 * @param {string} owner
	 */
	function ownership_invalid_binding(parent, child, owner) {
		{
			console.warn(`%c[svelte] ownership_invalid_binding\n%c${parent} passed a value to ${child} with \`bind:\`, but the value is owned by ${owner}. Consider creating a binding between ${owner} and ${parent}\nhttps://svelte.dev/e/ownership_invalid_binding`, bold, normal);
		}
	}

	/**
	 * %component% mutated a value owned by %owner%. This is strongly discouraged. Consider passing values to child components with `bind:`, or use a callback instead
	 * @param {string | undefined | null} [component]
	 * @param {string | undefined | null} [owner]
	 */
	function ownership_invalid_mutation(component, owner) {
		{
			console.warn(`%c[svelte] ownership_invalid_mutation\n%c${component ? `${component} mutated a value owned by ${owner}. This is strongly discouraged. Consider passing values to child components with \`bind:\`, or use a callback instead` : "Mutating a value outside the component that created it is strongly discouraged. Consider passing values to child components with `bind:`, or use a callback instead"}\nhttps://svelte.dev/e/ownership_invalid_mutation`, bold, normal);
		}
	}

	/**
	 * Reactive `$state(...)` proxies and the values they proxy have different identities. Because of this, comparisons with `%operator%` will produce unexpected results
	 * @param {string} operator
	 */
	function state_proxy_equality_mismatch(operator) {
		{
			console.warn(`%c[svelte] state_proxy_equality_mismatch\n%cReactive \`$state(...)\` proxies and the values they proxy have different identities. Because of this, comparisons with \`${operator}\` will produce unexpected results\nhttps://svelte.dev/e/state_proxy_equality_mismatch`, bold, normal);
		}
	}

	/** @import { TemplateNode } from '#client' */


	/**
	 * Use this variable to guard everything related to hydration code so it can be treeshaken out
	 * if the user doesn't use the `hydrate` method and these code paths are therefore not needed.
	 */
	let hydrating = false;

	/** @param {boolean} value */
	function set_hydrating(value) {
		hydrating = value;
	}

	/**
	 * The node that is currently being hydrated. This starts out as the first node inside the opening
	 * <!--[--> comment, and updates each time a component calls `$.child(...)` or `$.sibling(...)`.
	 * When entering a block (e.g. `{#if ...}`), `hydrate_node` is the block opening comment; by the
	 * time we leave the block it is the closing comment, which serves as the block's anchor.
	 * @type {TemplateNode}
	 */
	let hydrate_node;

	/** @param {TemplateNode} node */
	function set_hydrate_node(node) {
		if (node === null) {
			hydration_mismatch();
			throw HYDRATION_ERROR;
		}

		return (hydrate_node = node);
	}

	function hydrate_next() {
		return set_hydrate_node(/** @type {TemplateNode} */ (get_next_sibling(hydrate_node)));
	}

	/** @param {TemplateNode} node */
	function reset(node) {
		if (!hydrating) return;

		// If the node has remaining siblings, something has gone wrong
		if (get_next_sibling(hydrate_node) !== null) {
			hydration_mismatch();
			throw HYDRATION_ERROR;
		}

		hydrate_node = node;
	}

	function next(count = 1) {
		if (hydrating) {
			var i = count;
			var node = hydrate_node;

			while (i--) {
				node = /** @type {TemplateNode} */ (get_next_sibling(node));
			}

			hydrate_node = node;
		}
	}

	/**
	 * Removes all nodes starting at `hydrate_node` up until the next hydration end comment
	 */
	function remove_nodes() {
		var depth = 0;
		var node = hydrate_node;

		while (true) {
			if (node.nodeType === 8) {
				var data = /** @type {Comment} */ (node).data;

				if (data === HYDRATION_END) {
					if (depth === 0) return node;
					depth -= 1;
				} else if (data === HYDRATION_START || data === HYDRATION_START_ELSE) {
					depth += 1;
				}
			}

			var next = /** @type {TemplateNode} */ (get_next_sibling(node));
			node.remove();
			node = next;
		}
	}

	/** @import { ProxyMetadata } from '#client' */
	/** @typedef {{ file: string, line: number, column: number }} Location */


	/** @type {Record<string, Array<{ start: Location, end: Location, component: Function }>>} */
	const boundaries = {};

	const chrome_pattern = /at (?:.+ \()?(.+):(\d+):(\d+)\)?$/;
	const firefox_pattern = /@(.+):(\d+):(\d+)$/;

	function get_stack() {
		const stack = new Error().stack;
		if (!stack) return null;

		const entries = [];

		for (const line of stack.split('\n')) {
			let match = chrome_pattern.exec(line) ?? firefox_pattern.exec(line);

			if (match) {
				entries.push({
					file: match[1],
					line: +match[2],
					column: +match[3]
				});
			}
		}

		return entries;
	}

	/**
	 * Determines which `.svelte` component is responsible for a given state change
	 * @returns {Function | null}
	 */
	function get_component() {
		// first 4 lines are svelte internals; adjust this number if we change the internal call stack
		const stack = get_stack()?.slice(4);
		if (!stack) return null;

		for (let i = 0; i < stack.length; i++) {
			const entry = stack[i];
			const modules = boundaries[entry.file];
			if (!modules) {
				// If the first entry is not a component, that means the modification very likely happened
				// within a .svelte.js file, possibly triggered by a component. Since these files are not part
				// of the bondaries/component context heuristic, we need to bail in this case, else we would
				// have false positives when the .svelte.ts file provides a state creator function, encapsulating
				// the state and its mutations, and is being called from a component other than the one who
				// called the state creator function.
				if (i === 0) return null;
				continue;
			}

			for (const module of modules) {
				if (module.end == null) {
					return null;
				}
				if (module.start.line < entry.line && module.end.line > entry.line) {
					return module.component;
				}
			}
		}

		return null;
	}

	const ADD_OWNER = Symbol('ADD_OWNER');

	/**
	 * @param {any} object
	 * @param {any} owner
	 * @param {boolean} [global]
	 * @param {boolean} [skip_warning]
	 */
	function add_owner(object, owner, global = false, skip_warning = false) {
		if (object && !global) {
			const component = dev_current_component_function;
			const metadata = object[STATE_SYMBOL_METADATA];
			if (metadata && !has_owner(metadata, component)) {
				let original = get_owner(metadata);

				if (owner[FILENAME] !== component[FILENAME] && !skip_warning) {
					ownership_invalid_binding(component[FILENAME], owner[FILENAME], original[FILENAME]);
				}
			}
		}

		add_owner_to_object(object, owner, new Set());
	}

	/**
	 * @param {ProxyMetadata | null} from
	 * @param {ProxyMetadata} to
	 */
	function widen_ownership(from, to) {
		if (to.owners === null) {
			return;
		}

		while (from) {
			if (from.owners === null) {
				to.owners = null;
				break;
			}

			for (const owner of from.owners) {
				to.owners.add(owner);
			}

			from = from.parent;
		}
	}

	/**
	 * @param {any} object
	 * @param {Function} owner
	 * @param {Set<any>} seen
	 */
	function add_owner_to_object(object, owner, seen) {
		const metadata = /** @type {ProxyMetadata} */ (object?.[STATE_SYMBOL_METADATA]);

		if (metadata) {
			// this is a state proxy, add owner directly, if not globally shared
			if ('owners' in metadata && metadata.owners != null) {
				metadata.owners.add(owner);
			}
		} else if (object && typeof object === 'object') {
			if (seen.has(object)) return;
			seen.add(object);
			if (ADD_OWNER in object && object[ADD_OWNER]) {
				// this is a class with state fields. we put this in a render effect
				// so that if state is replaced (e.g. `instance.name = { first, last }`)
				// the new state is also co-owned by the caller of `getContext`
				render_effect(() => {
					object[ADD_OWNER](owner);
				});
			} else {
				var proto = get_prototype_of(object);

				if (proto === Object.prototype) {
					// recurse until we find a state proxy
					for (const key in object) {
						add_owner_to_object(object[key], owner, seen);
					}
				} else if (proto === Array.prototype) {
					// recurse until we find a state proxy
					for (let i = 0; i < object.length; i += 1) {
						add_owner_to_object(object[i], owner, seen);
					}
				}
			}
		}
	}

	/**
	 * @param {ProxyMetadata} metadata
	 * @param {Function} component
	 * @returns {boolean}
	 */
	function has_owner(metadata, component) {
		if (metadata.owners === null) {
			return true;
		}

		return (
			metadata.owners.has(component) ||
			(metadata.parent !== null && has_owner(metadata.parent, component))
		);
	}

	/**
	 * @param {ProxyMetadata} metadata
	 * @returns {any}
	 */
	function get_owner(metadata) {
		return (
			metadata?.owners?.values().next().value ??
			get_owner(/** @type {ProxyMetadata} */ (metadata.parent))
		);
	}

	/**
	 * @param {ProxyMetadata} metadata
	 */
	function check_ownership(metadata) {

		const component = get_component();

		if (component && !has_owner(metadata, component)) {
			let original = get_owner(metadata);

			// @ts-expect-error
			if (original[FILENAME] !== component[FILENAME]) {
				// @ts-expect-error
				ownership_invalid_mutation(component[FILENAME], original[FILENAME]);
			} else {
				ownership_invalid_mutation();
			}
		}
	}

	/** @import { ProxyMetadata, ProxyStateObject, Source } from '#client' */

	/**
	 * @template T
	 * @param {T} value
	 * @param {ProxyMetadata | null} [parent]
	 * @param {Source<T>} [prev] dev mode only
	 * @returns {T}
	 */
	function proxy(value, parent = null, prev) {
		/** @type {Error | null} */
		var stack = null;
		{
			stack = get_stack$1('CreatedAt');
		}
		// if non-proxyable, or is already a proxy, return `value`
		if (typeof value !== 'object' || value === null || STATE_SYMBOL in value) {
			return value;
		}

		const prototype = get_prototype_of(value);

		if (prototype !== object_prototype && prototype !== array_prototype) {
			return value;
		}

		/** @type {Map<any, Source<any>>} */
		var sources = new Map();
		var is_proxied_array = is_array(value);
		var version = source(0);

		if (is_proxied_array) {
			// We need to create the length source eagerly to ensure that
			// mutations to the array are properly synced with our proxy
			sources.set('length', source(/** @type {any[]} */ (value).length, stack));
		}

		/** @type {ProxyMetadata} */
		var metadata;

		{
			metadata = {
				parent,
				owners: null
			};

			{
				metadata.owners =
					parent === null
						? component_context !== null
							? new Set([component_context.function])
							: null
						: new Set();
			}
		}

		return new Proxy(/** @type {any} */ (value), {
			defineProperty(_, prop, descriptor) {
				if (
					!('value' in descriptor) ||
					descriptor.configurable === false ||
					descriptor.enumerable === false ||
					descriptor.writable === false
				) {
					// we disallow non-basic descriptors, because unless they are applied to the
					// target object — which we avoid, so that state can be forked — we will run
					// afoul of the various invariants
					// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/getOwnPropertyDescriptor#invariants
					state_descriptors_fixed();
				}

				var s = sources.get(prop);

				if (s === undefined) {
					s = source(descriptor.value, stack);
					sources.set(prop, s);
				} else {
					set(s, proxy(descriptor.value, metadata));
				}

				return true;
			},

			deleteProperty(target, prop) {
				var s = sources.get(prop);

				if (s === undefined) {
					if (prop in target) {
						sources.set(prop, source(UNINITIALIZED, stack));
					}
				} else {
					// When working with arrays, we need to also ensure we update the length when removing
					// an indexed property
					if (is_proxied_array && typeof prop === 'string') {
						var ls = /** @type {Source<number>} */ (sources.get('length'));
						var n = Number(prop);

						if (Number.isInteger(n) && n < ls.v) {
							set(ls, n);
						}
					}
					set(s, UNINITIALIZED);
					update_version(version);
				}

				return true;
			},

			get(target, prop, receiver) {
				if (prop === STATE_SYMBOL_METADATA) {
					return metadata;
				}

				if (prop === STATE_SYMBOL) {
					return value;
				}

				var s = sources.get(prop);
				var exists = prop in target;

				// create a source, but only if it's an own property and not a prototype property
				if (s === undefined && (!exists || get_descriptor(target, prop)?.writable)) {
					s = source(proxy(exists ? target[prop] : UNINITIALIZED, metadata), stack);
					sources.set(prop, s);
				}

				if (s !== undefined) {
					var v = get$2(s);

					// In case of something like `foo = bar.map(...)`, foo would have ownership
					// of the array itself, while the individual items would have ownership
					// of the component that created bar. That means if we later do `foo[0].baz = 42`,
					// we could get a false-positive ownership violation, since the two proxies
					// are not connected to each other via the parent metadata relationship.
					// For this reason, we need to widen the ownership of the children
					// upon access when we detect they are not connected.
					{
						/** @type {ProxyMetadata | undefined} */
						var prop_metadata = v?.[STATE_SYMBOL_METADATA];
						if (prop_metadata && prop_metadata?.parent !== metadata) {
							widen_ownership(metadata, prop_metadata);
						}
					}

					return v === UNINITIALIZED ? undefined : v;
				}

				return Reflect.get(target, prop, receiver);
			},

			getOwnPropertyDescriptor(target, prop) {
				var descriptor = Reflect.getOwnPropertyDescriptor(target, prop);

				if (descriptor && 'value' in descriptor) {
					var s = sources.get(prop);
					if (s) descriptor.value = get$2(s);
				} else if (descriptor === undefined) {
					var source = sources.get(prop);
					var value = source?.v;

					if (source !== undefined && value !== UNINITIALIZED) {
						return {
							enumerable: true,
							configurable: true,
							value,
							writable: true
						};
					}
				}

				return descriptor;
			},

			has(target, prop) {
				if (prop === STATE_SYMBOL_METADATA) {
					return true;
				}

				if (prop === STATE_SYMBOL) {
					return true;
				}

				var s = sources.get(prop);
				var has = (s !== undefined && s.v !== UNINITIALIZED) || Reflect.has(target, prop);

				if (
					s !== undefined ||
					(active_effect !== null && (!has || get_descriptor(target, prop)?.writable))
				) {
					if (s === undefined) {
						s = source(has ? proxy(target[prop], metadata) : UNINITIALIZED, stack);
						sources.set(prop, s);
					}

					var value = get$2(s);
					if (value === UNINITIALIZED) {
						return false;
					}
				}

				return has;
			},

			set(target, prop, value, receiver) {
				var s = sources.get(prop);
				var has = prop in target;

				// variable.length = value -> clear all signals with index >= value
				if (is_proxied_array && prop === 'length') {
					for (var i = value; i < /** @type {Source<number>} */ (s).v; i += 1) {
						var other_s = sources.get(i + '');
						if (other_s !== undefined) {
							set(other_s, UNINITIALIZED);
						} else if (i in target) {
							// If the item exists in the original, we need to create a uninitialized source,
							// else a later read of the property would result in a source being created with
							// the value of the original item at that index.
							other_s = source(UNINITIALIZED, stack);
							sources.set(i + '', other_s);
						}
					}
				}

				// If we haven't yet created a source for this property, we need to ensure
				// we do so otherwise if we read it later, then the write won't be tracked and
				// the heuristics of effects will be different vs if we had read the proxied
				// object property before writing to that property.
				if (s === undefined) {
					if (!has || get_descriptor(target, prop)?.writable) {
						s = source(undefined, stack);
						set(s, proxy(value, metadata));
						sources.set(prop, s);
					}
				} else {
					has = s.v !== UNINITIALIZED;
					set(s, proxy(value, metadata));
				}

				{
					/** @type {ProxyMetadata | undefined} */
					var prop_metadata = value?.[STATE_SYMBOL_METADATA];
					if (prop_metadata && prop_metadata?.parent !== metadata) {
						widen_ownership(metadata, prop_metadata);
					}
					check_ownership(metadata);
				}

				var descriptor = Reflect.getOwnPropertyDescriptor(target, prop);

				// Set the new value before updating any signals so that any listeners get the new value
				if (descriptor?.set) {
					descriptor.set.call(receiver, value);
				}

				if (!has) {
					// If we have mutated an array directly, we might need to
					// signal that length has also changed. Do it before updating metadata
					// to ensure that iterating over the array as a result of a metadata update
					// will not cause the length to be out of sync.
					if (is_proxied_array && typeof prop === 'string') {
						var ls = /** @type {Source<number>} */ (sources.get('length'));
						var n = Number(prop);

						if (Number.isInteger(n) && n >= ls.v) {
							set(ls, n + 1);
						}
					}

					update_version(version);
				}

				return true;
			},

			ownKeys(target) {
				get$2(version);

				var own_keys = Reflect.ownKeys(target).filter((key) => {
					var source = sources.get(key);
					return source === undefined || source.v !== UNINITIALIZED;
				});

				for (var [key, source] of sources) {
					if (source.v !== UNINITIALIZED && !(key in target)) {
						own_keys.push(key);
					}
				}

				return own_keys;
			},

			setPrototypeOf() {
				state_prototype_fixed();
			}
		});
	}

	/**
	 * @param {Source<number>} signal
	 * @param {1 | -1} [d]
	 */
	function update_version(signal, d = 1) {
		set(signal, signal.v + d);
	}

	/**
	 * @param {any} value
	 */
	function get_proxied_value(value) {
		if (value !== null && typeof value === 'object' && STATE_SYMBOL in value) {
			return value[STATE_SYMBOL];
		}

		return value;
	}

	/**
	 * @param {any} a
	 * @param {any} b
	 */
	function is(a, b) {
		return Object.is(get_proxied_value(a), get_proxied_value(b));
	}

	function init_array_prototype_warnings() {
		const array_prototype = Array.prototype;
		// The REPL ends up here over and over, and this prevents it from adding more and more patches
		// of the same kind to the prototype, which would slow down everything over time.
		// @ts-expect-error
		const cleanup = Array.__svelte_cleanup;
		if (cleanup) {
			cleanup();
		}

		const { indexOf, lastIndexOf, includes } = array_prototype;

		array_prototype.indexOf = function (item, from_index) {
			const index = indexOf.call(this, item, from_index);

			if (index === -1) {
				const test = indexOf.call(get_proxied_value(this), get_proxied_value(item), from_index);

				if (test !== -1) {
					state_proxy_equality_mismatch('array.indexOf(...)');
				}
			}

			return index;
		};

		array_prototype.lastIndexOf = function (item, from_index) {
			// we need to specify this.length - 1 because it's probably using something like
			// `arguments` inside so passing undefined is different from not passing anything
			const index = lastIndexOf.call(this, item, from_index ?? this.length - 1);

			if (index === -1) {
				// we need to specify this.length - 1 because it's probably using something like
				// `arguments` inside so passing undefined is different from not passing anything
				const test = lastIndexOf.call(
					get_proxied_value(this),
					get_proxied_value(item),
					from_index ?? this.length - 1
				);

				if (test !== -1) {
					state_proxy_equality_mismatch('array.lastIndexOf(...)');
				}
			}

			return index;
		};

		array_prototype.includes = function (item, from_index) {
			const has = includes.call(this, item, from_index);

			if (!has) {
				const test = includes.call(get_proxied_value(this), get_proxied_value(item), from_index);

				if (test) {
					state_proxy_equality_mismatch('array.includes(...)');
				}
			}

			return has;
		};

		// @ts-expect-error
		Array.__svelte_cleanup = () => {
			array_prototype.indexOf = indexOf;
			array_prototype.lastIndexOf = lastIndexOf;
			array_prototype.includes = includes;
		};
	}

	/** @import { TemplateNode } from '#client' */

	// export these for reference in the compiled code, making global name deduplication unnecessary
	/** @type {Window} */
	var $window;

	/** @type {() => Node | null} */
	var first_child_getter;
	/** @type {() => Node | null} */
	var next_sibling_getter;

	/**
	 * Initialize these lazily to avoid issues when using the runtime in a server context
	 * where these globals are not available while avoiding a separate server entry point
	 */
	function init_operations() {
		if ($window !== undefined) {
			return;
		}

		$window = window;

		var element_prototype = Element.prototype;
		var node_prototype = Node.prototype;

		// @ts-ignore
		first_child_getter = get_descriptor(node_prototype, 'firstChild').get;
		// @ts-ignore
		next_sibling_getter = get_descriptor(node_prototype, 'nextSibling').get;

		// the following assignments improve perf of lookups on DOM nodes
		// @ts-expect-error
		element_prototype.__click = undefined;
		// @ts-expect-error
		element_prototype.__className = '';
		// @ts-expect-error
		element_prototype.__attributes = null;
		// @ts-expect-error
		element_prototype.__styles = null;
		// @ts-expect-error
		element_prototype.__e = undefined;

		// @ts-expect-error
		Text.prototype.__t = undefined;

		{
			// @ts-expect-error
			element_prototype.__svelte_meta = null;

			init_array_prototype_warnings();
		}
	}

	/**
	 * @param {string} value
	 * @returns {Text}
	 */
	function create_text(value = '') {
		return document.createTextNode(value);
	}

	/**
	 * @template {Node} N
	 * @param {N} node
	 * @returns {Node | null}
	 */
	/*@__NO_SIDE_EFFECTS__*/
	function get_first_child(node) {
		return first_child_getter.call(node);
	}

	/**
	 * @template {Node} N
	 * @param {N} node
	 * @returns {Node | null}
	 */
	/*@__NO_SIDE_EFFECTS__*/
	function get_next_sibling(node) {
		return next_sibling_getter.call(node);
	}

	/**
	 * Don't mark this as side-effect-free, hydration needs to walk all nodes
	 * @template {Node} N
	 * @param {N} node
	 * @param {boolean} is_text
	 * @returns {Node | null}
	 */
	function child(node, is_text) {
		if (!hydrating) {
			return get_first_child(node);
		}

		var child = /** @type {TemplateNode} */ (get_first_child(hydrate_node));

		// Child can be null if we have an element with a single child, like `<p>{text}</p>`, where `text` is empty
		if (child === null) {
			child = hydrate_node.appendChild(create_text());
		} else if (is_text && child.nodeType !== 3) {
			var text = create_text();
			child?.before(text);
			set_hydrate_node(text);
			return text;
		}

		set_hydrate_node(child);
		return child;
	}

	/**
	 * Don't mark this as side-effect-free, hydration needs to walk all nodes
	 * @param {DocumentFragment | TemplateNode[]} fragment
	 * @param {boolean} is_text
	 * @returns {Node | null}
	 */
	function first_child(fragment, is_text) {
		if (!hydrating) {
			// when not hydrating, `fragment` is a `DocumentFragment` (the result of calling `open_frag`)
			var first = /** @type {DocumentFragment} */ (get_first_child(/** @type {Node} */ (fragment)));

			// TODO prevent user comments with the empty string when preserveComments is true
			if (first instanceof Comment && first.data === '') return get_next_sibling(first);

			return first;
		}

		return hydrate_node;
	}

	/**
	 * Don't mark this as side-effect-free, hydration needs to walk all nodes
	 * @param {TemplateNode} node
	 * @param {number} count
	 * @param {boolean} is_text
	 * @returns {Node | null}
	 */
	function sibling(node, count = 1, is_text = false) {
		let next_sibling = hydrating ? hydrate_node : node;
		var last_sibling;

		while (count--) {
			last_sibling = next_sibling;
			next_sibling = /** @type {TemplateNode} */ (get_next_sibling(next_sibling));
		}

		if (!hydrating) {
			return next_sibling;
		}

		var type = next_sibling?.nodeType;

		// if a sibling {expression} is empty during SSR, there might be no
		// text node to hydrate — we must therefore create one
		if (is_text && type !== 3) {
			var text = create_text();
			// If the next sibling is `null` and we're handling text then it's because
			// the SSR content was empty for the text, so we need to generate a new text
			// node and insert it after the last sibling
			if (next_sibling === null) {
				last_sibling?.after(text);
			} else {
				next_sibling.before(text);
			}
			set_hydrate_node(text);
			return text;
		}

		set_hydrate_node(next_sibling);
		return /** @type {TemplateNode} */ (next_sibling);
	}

	/**
	 * @template {Node} N
	 * @param {N} node
	 * @returns {void}
	 */
	function clear_text_content(node) {
		node.textContent = '';
	}

	/** @import { Derived, Effect } from '#client' */

	/**
	 * @template V
	 * @param {() => V} fn
	 * @returns {Derived<V>}
	 */
	/*#__NO_SIDE_EFFECTS__*/
	function derived(fn) {
		var flags = DERIVED | DIRTY;

		if (active_effect === null) {
			flags |= UNOWNED;
		} else {
			// Since deriveds are evaluated lazily, any effects created inside them are
			// created too late to ensure that the parent effect is added to the tree
			active_effect.f |= EFFECT_HAS_DERIVED;
		}

		var parent_derived =
			active_reaction !== null && (active_reaction.f & DERIVED) !== 0
				? /** @type {Derived} */ (active_reaction)
				: null;

		/** @type {Derived<V>} */
		const signal = {
			children: null,
			ctx: component_context,
			deps: null,
			equals,
			f: flags,
			fn,
			reactions: null,
			v: /** @type {V} */ (null),
			version: 0,
			parent: parent_derived ?? active_effect
		};

		{
			signal.created = get_stack$1('CreatedAt');
		}

		if (parent_derived !== null) {
			(parent_derived.children ??= []).push(signal);
		}

		return signal;
	}

	/**
	 * @template V
	 * @param {() => V} fn
	 * @returns {Derived<V>}
	 */
	/*#__NO_SIDE_EFFECTS__*/
	function derived_safe_equal(fn) {
		const signal = derived(fn);
		signal.equals = safe_equals;
		return signal;
	}

	/**
	 * @param {Derived} derived
	 * @returns {void}
	 */
	function destroy_derived_children(derived) {
		var children = derived.children;

		if (children !== null) {
			derived.children = null;

			for (var i = 0; i < children.length; i += 1) {
				var child = children[i];
				if ((child.f & DERIVED) !== 0) {
					destroy_derived(/** @type {Derived} */ (child));
				} else {
					destroy_effect(/** @type {Effect} */ (child));
				}
			}
		}
	}

	/**
	 * The currently updating deriveds, used to detect infinite recursion
	 * in dev mode and provide a nicer error than 'too much recursion'
	 * @type {Derived[]}
	 */
	let stack = [];

	/**
	 * @param {Derived} derived
	 * @returns {Effect | null}
	 */
	function get_derived_parent_effect(derived) {
		var parent = derived.parent;
		while (parent !== null) {
			if ((parent.f & DERIVED) === 0) {
				return /** @type {Effect} */ (parent);
			}
			parent = parent.parent;
		}
		return null;
	}

	/**
	 * @template T
	 * @param {Derived} derived
	 * @returns {T}
	 */
	function execute_derived(derived) {
		var value;
		var prev_active_effect = active_effect;

		set_active_effect(get_derived_parent_effect(derived));

		{
			let prev_inspect_effects = inspect_effects;
			set_inspect_effects(new Set());
			try {
				if (stack.includes(derived)) {
					derived_references_self();
				}

				stack.push(derived);

				destroy_derived_children(derived);
				value = update_reaction(derived);
			} finally {
				set_active_effect(prev_active_effect);
				set_inspect_effects(prev_inspect_effects);
				stack.pop();
			}
		}

		return value;
	}

	/**
	 * @param {Derived} derived
	 * @returns {void}
	 */
	function update_derived(derived) {
		var value = execute_derived(derived);
		var status =
			(skip_reaction || (derived.f & UNOWNED) !== 0) && derived.deps !== null ? MAYBE_DIRTY : CLEAN;

		set_signal_status(derived, status);

		if (!derived.equals(value)) {
			derived.v = value;
			derived.version = increment_version();
		}
	}

	/**
	 * @param {Derived} derived
	 * @returns {void}
	 */
	function destroy_derived(derived) {
		destroy_derived_children(derived);
		remove_reactions(derived, 0);
		set_signal_status(derived, DESTROYED);

		derived.v = derived.children = derived.deps = derived.ctx = derived.reactions = null;
	}

	/** @import { ComponentContext, ComponentContextLegacy, Derived, Effect, TemplateNode, TransitionManager } from '#client' */

	/**
	 * @param {'$effect' | '$effect.pre' | '$inspect'} rune
	 */
	function validate_effect(rune) {
		if (active_effect === null && active_reaction === null) {
			effect_orphan(rune);
		}

		if (active_reaction !== null && (active_reaction.f & UNOWNED) !== 0) {
			effect_in_unowned_derived();
		}

		if (is_destroying_effect) {
			effect_in_teardown(rune);
		}
	}

	/**
	 * @param {Effect} effect
	 * @param {Effect} parent_effect
	 */
	function push_effect(effect, parent_effect) {
		var parent_last = parent_effect.last;
		if (parent_last === null) {
			parent_effect.last = parent_effect.first = effect;
		} else {
			parent_last.next = effect;
			effect.prev = parent_last;
			parent_effect.last = effect;
		}
	}

	/**
	 * @param {number} type
	 * @param {null | (() => void | (() => void))} fn
	 * @param {boolean} sync
	 * @param {boolean} push
	 * @returns {Effect}
	 */
	function create_effect(type, fn, sync, push = true) {
		var is_root = (type & ROOT_EFFECT) !== 0;
		var parent_effect = active_effect;

		{
			// Ensure the parent is never an inspect effect
			while (parent_effect !== null && (parent_effect.f & INSPECT_EFFECT) !== 0) {
				parent_effect = parent_effect.parent;
			}
		}

		/** @type {Effect} */
		var effect = {
			ctx: component_context,
			deps: null,
			deriveds: null,
			nodes_start: null,
			nodes_end: null,
			f: type | DIRTY,
			first: null,
			fn,
			last: null,
			next: null,
			parent: is_root ? null : parent_effect,
			prev: null,
			teardown: null,
			transitions: null,
			version: 0
		};

		{
			effect.component_function = dev_current_component_function;
		}

		if (sync) {
			var previously_flushing_effect = is_flushing_effect;

			try {
				set_is_flushing_effect(true);
				update_effect(effect);
				effect.f |= EFFECT_RAN;
			} catch (e) {
				destroy_effect(effect);
				throw e;
			} finally {
				set_is_flushing_effect(previously_flushing_effect);
			}
		} else if (fn !== null) {
			schedule_effect(effect);
		}

		// if an effect has no dependencies, no DOM and no teardown function,
		// don't bother adding it to the effect tree
		var inert =
			sync &&
			effect.deps === null &&
			effect.first === null &&
			effect.nodes_start === null &&
			effect.teardown === null &&
			(effect.f & EFFECT_HAS_DERIVED) === 0;

		if (!inert && !is_root && push) {
			if (parent_effect !== null) {
				push_effect(effect, parent_effect);
			}

			// if we're in a derived, add the effect there too
			if (active_reaction !== null && (active_reaction.f & DERIVED) !== 0) {
				var derived = /** @type {Derived} */ (active_reaction);
				(derived.children ??= []).push(effect);
			}
		}

		return effect;
	}

	/**
	 * @param {() => void} fn
	 */
	function teardown(fn) {
		const effect = create_effect(RENDER_EFFECT, null, false);
		set_signal_status(effect, CLEAN);
		effect.teardown = fn;
		return effect;
	}

	/**
	 * Internal representation of `$effect(...)`
	 * @param {() => void | (() => void)} fn
	 */
	function user_effect(fn) {
		validate_effect('$effect');

		// Non-nested `$effect(...)` in a component should be deferred
		// until the component is mounted
		var defer =
			active_effect !== null &&
			(active_effect.f & BRANCH_EFFECT) !== 0 &&
			component_context !== null &&
			!component_context.m;

		{
			define_property(fn, 'name', {
				value: '$effect'
			});
		}

		if (defer) {
			var context = /** @type {ComponentContext} */ (component_context);
			(context.e ??= []).push({
				fn,
				effect: active_effect,
				reaction: active_reaction
			});
		} else {
			var signal = effect(fn);
			return signal;
		}
	}

	/**
	 * Internal representation of `$effect.pre(...)`
	 * @param {() => void | (() => void)} fn
	 * @returns {Effect}
	 */
	function user_pre_effect(fn) {
		validate_effect('$effect.pre');
		{
			define_property(fn, 'name', {
				value: '$effect.pre'
			});
		}
		return render_effect(fn);
	}

	/**
	 * An effect root whose children can transition out
	 * @param {() => void} fn
	 * @returns {(options?: { outro?: boolean }) => Promise<void>}
	 */
	function component_root(fn) {
		const effect = create_effect(ROOT_EFFECT, fn, true);

		return (options = {}) => {
			return new Promise((fulfil) => {
				if (options.outro) {
					pause_effect(effect, () => {
						destroy_effect(effect);
						fulfil(undefined);
					});
				} else {
					destroy_effect(effect);
					fulfil(undefined);
				}
			});
		};
	}

	/**
	 * @param {() => void | (() => void)} fn
	 * @returns {Effect}
	 */
	function effect(fn) {
		return create_effect(EFFECT, fn, false);
	}

	/**
	 * Internal representation of `$: ..`
	 * @param {() => any} deps
	 * @param {() => void | (() => void)} fn
	 */
	function legacy_pre_effect(deps, fn) {
		var context = /** @type {ComponentContextLegacy} */ (component_context);

		/** @type {{ effect: null | Effect, ran: boolean }} */
		var token = { effect: null, ran: false };
		context.l.r1.push(token);

		token.effect = render_effect(() => {
			deps();

			// If this legacy pre effect has already run before the end of the reset, then
			// bail out to emulate the same behavior.
			if (token.ran) return;

			token.ran = true;
			set(context.l.r2, true);
			untrack(fn);
		});
	}

	function legacy_pre_effect_reset() {
		var context = /** @type {ComponentContextLegacy} */ (component_context);

		render_effect(() => {
			if (!get$2(context.l.r2)) return;

			// Run dirty `$:` statements
			for (var token of context.l.r1) {
				var effect = token.effect;

				// If the effect is CLEAN, then make it MAYBE_DIRTY. This ensures we traverse through
				// the effects dependencies and correctly ensure each dependency is up-to-date.
				if ((effect.f & CLEAN) !== 0) {
					set_signal_status(effect, MAYBE_DIRTY);
				}

				if (check_dirtiness(effect)) {
					update_effect(effect);
				}

				token.ran = false;
			}

			context.l.r2.v = false; // set directly to avoid rerunning this effect
		});
	}

	/**
	 * @param {() => void | (() => void)} fn
	 * @returns {Effect}
	 */
	function render_effect(fn) {
		return create_effect(RENDER_EFFECT, fn, true);
	}

	/**
	 * @param {() => void | (() => void)} fn
	 * @returns {Effect}
	 */
	function template_effect(fn) {
		{
			define_property(fn, 'name', {
				value: '{expression}'
			});
		}
		return block(fn);
	}

	/**
	 * @param {(() => void)} fn
	 * @param {number} flags
	 */
	function block(fn, flags = 0) {
		return create_effect(RENDER_EFFECT | BLOCK_EFFECT | flags, fn, true);
	}

	/**
	 * @param {(() => void)} fn
	 * @param {boolean} [push]
	 */
	function branch(fn, push = true) {
		return create_effect(RENDER_EFFECT | BRANCH_EFFECT, fn, true, push);
	}

	/**
	 * @param {Effect} effect
	 */
	function execute_effect_teardown(effect) {
		var teardown = effect.teardown;
		if (teardown !== null) {
			const previously_destroying_effect = is_destroying_effect;
			const previous_reaction = active_reaction;
			set_is_destroying_effect(true);
			set_active_reaction(null);
			try {
				teardown.call(null);
			} finally {
				set_is_destroying_effect(previously_destroying_effect);
				set_active_reaction(previous_reaction);
			}
		}
	}

	/**
	 * @param {Effect} signal
	 * @returns {void}
	 */
	function destroy_effect_deriveds(signal) {
		var deriveds = signal.deriveds;

		if (deriveds !== null) {
			signal.deriveds = null;

			for (var i = 0; i < deriveds.length; i += 1) {
				destroy_derived(deriveds[i]);
			}
		}
	}

	/**
	 * @param {Effect} signal
	 * @param {boolean} remove_dom
	 * @returns {void}
	 */
	function destroy_effect_children(signal, remove_dom = false) {
		var effect = signal.first;
		signal.first = signal.last = null;

		while (effect !== null) {
			var next = effect.next;
			destroy_effect(effect, remove_dom);
			effect = next;
		}
	}

	/**
	 * @param {Effect} signal
	 * @returns {void}
	 */
	function destroy_block_effect_children(signal) {
		var effect = signal.first;

		while (effect !== null) {
			var next = effect.next;
			if ((effect.f & BRANCH_EFFECT) === 0) {
				destroy_effect(effect);
			}
			effect = next;
		}
	}

	/**
	 * @param {Effect} effect
	 * @param {boolean} [remove_dom]
	 * @returns {void}
	 */
	function destroy_effect(effect, remove_dom = true) {
		var removed = false;

		if ((remove_dom || (effect.f & HEAD_EFFECT) !== 0) && effect.nodes_start !== null) {
			/** @type {TemplateNode | null} */
			var node = effect.nodes_start;
			var end = effect.nodes_end;

			while (node !== null) {
				/** @type {TemplateNode | null} */
				var next = node === end ? null : /** @type {TemplateNode} */ (get_next_sibling(node));

				node.remove();
				node = next;
			}

			removed = true;
		}

		destroy_effect_children(effect, remove_dom && !removed);
		destroy_effect_deriveds(effect);
		remove_reactions(effect, 0);
		set_signal_status(effect, DESTROYED);

		var transitions = effect.transitions;

		if (transitions !== null) {
			for (const transition of transitions) {
				transition.stop();
			}
		}

		execute_effect_teardown(effect);

		var parent = effect.parent;

		// If the parent doesn't have any children, then skip this work altogether
		if (parent !== null && parent.first !== null) {
			unlink_effect(effect);
		}

		{
			effect.component_function = null;
		}

		// `first` and `child` are nulled out in destroy_effect_children
		// we don't null out `parent` so that error propagation can work correctly
		effect.next =
			effect.prev =
			effect.teardown =
			effect.ctx =
			effect.deps =
			effect.fn =
			effect.nodes_start =
			effect.nodes_end =
				null;
	}

	/**
	 * Detach an effect from the effect tree, freeing up memory and
	 * reducing the amount of work that happens on subsequent traversals
	 * @param {Effect} effect
	 */
	function unlink_effect(effect) {
		var parent = effect.parent;
		var prev = effect.prev;
		var next = effect.next;

		if (prev !== null) prev.next = next;
		if (next !== null) next.prev = prev;

		if (parent !== null) {
			if (parent.first === effect) parent.first = next;
			if (parent.last === effect) parent.last = prev;
		}
	}

	/**
	 * When a block effect is removed, we don't immediately destroy it or yank it
	 * out of the DOM, because it might have transitions. Instead, we 'pause' it.
	 * It stays around (in memory, and in the DOM) until outro transitions have
	 * completed, and if the state change is reversed then we _resume_ it.
	 * A paused effect does not update, and the DOM subtree becomes inert.
	 * @param {Effect} effect
	 * @param {() => void} [callback]
	 */
	function pause_effect(effect, callback) {
		/** @type {TransitionManager[]} */
		var transitions = [];

		pause_children(effect, transitions, true);

		run_out_transitions(transitions, () => {
			destroy_effect(effect);
			if (callback) callback();
		});
	}

	/**
	 * @param {TransitionManager[]} transitions
	 * @param {() => void} fn
	 */
	function run_out_transitions(transitions, fn) {
		var remaining = transitions.length;
		if (remaining > 0) {
			var check = () => --remaining || fn();
			for (var transition of transitions) {
				transition.out(check);
			}
		} else {
			fn();
		}
	}

	/**
	 * @param {Effect} effect
	 * @param {TransitionManager[]} transitions
	 * @param {boolean} local
	 */
	function pause_children(effect, transitions, local) {
		if ((effect.f & INERT) !== 0) return;
		effect.f ^= INERT;

		if (effect.transitions !== null) {
			for (const transition of effect.transitions) {
				if (transition.is_global || local) {
					transitions.push(transition);
				}
			}
		}

		var child = effect.first;

		while (child !== null) {
			var sibling = child.next;
			var transparent = (child.f & EFFECT_TRANSPARENT) !== 0 || (child.f & BRANCH_EFFECT) !== 0;
			// TODO we don't need to call pause_children recursively with a linked list in place
			// it's slightly more involved though as we have to account for `transparent` changing
			// through the tree.
			pause_children(child, transitions, transparent ? local : false);
			child = sibling;
		}
	}

	/**
	 * The opposite of `pause_effect`. We call this if (for example)
	 * `x` becomes falsy then truthy: `{#if x}...{/if}`
	 * @param {Effect} effect
	 */
	function resume_effect(effect) {
		resume_children(effect, true);
	}

	/**
	 * @param {Effect} effect
	 * @param {boolean} local
	 */
	function resume_children(effect, local) {
		if ((effect.f & INERT) === 0) return;

		// If a dependency of this effect changed while it was paused,
		// apply the change now
		if (check_dirtiness(effect)) {
			update_effect(effect);
		}

		// Ensure we toggle the flag after possibly updating the effect so that
		// each block logic can correctly operate on inert items
		effect.f ^= INERT;

		var child = effect.first;

		while (child !== null) {
			var sibling = child.next;
			var transparent = (child.f & EFFECT_TRANSPARENT) !== 0 || (child.f & BRANCH_EFFECT) !== 0;
			// TODO we don't need to call resume_children recursively with a linked list in place
			// it's slightly more involved though as we have to account for `transparent` changing
			// through the tree.
			resume_children(child, transparent ? local : false);
			child = sibling;
		}

		if (effect.transitions !== null) {
			for (const transition of effect.transitions) {
				if (transition.is_global || local) {
					transition.in();
				}
			}
		}
	}

	// Fallback for when requestIdleCallback is not available
	const request_idle_callback =
		typeof requestIdleCallback === 'undefined'
			? (/** @type {() => void} */ cb) => setTimeout(cb, 1)
			: requestIdleCallback;

	let is_micro_task_queued$1 = false;
	let is_idle_task_queued = false;

	/** @type {Array<() => void>} */
	let current_queued_micro_tasks = [];
	/** @type {Array<() => void>} */
	let current_queued_idle_tasks = [];

	function process_micro_tasks() {
		is_micro_task_queued$1 = false;
		const tasks = current_queued_micro_tasks.slice();
		current_queued_micro_tasks = [];
		run_all(tasks);
	}

	function process_idle_tasks() {
		is_idle_task_queued = false;
		const tasks = current_queued_idle_tasks.slice();
		current_queued_idle_tasks = [];
		run_all(tasks);
	}

	/**
	 * @param {() => void} fn
	 */
	function queue_micro_task(fn) {
		if (!is_micro_task_queued$1) {
			is_micro_task_queued$1 = true;
			queueMicrotask(process_micro_tasks);
		}
		current_queued_micro_tasks.push(fn);
	}

	/**
	 * @param {() => void} fn
	 */
	function queue_idle_task(fn) {
		if (!is_idle_task_queued) {
			is_idle_task_queued = true;
			request_idle_callback(process_idle_tasks);
		}
		current_queued_idle_tasks.push(fn);
	}

	/**
	 * Synchronously run any queued tasks.
	 */
	function flush_tasks() {
		if (is_micro_task_queued$1) {
			process_micro_tasks();
		}
		if (is_idle_task_queued) {
			process_idle_tasks();
		}
	}

	/* This file is generated by scripts/process-messages/index.js. Do not edit! */


	/**
	 * `%name%(...)` can only be used during component initialisation
	 * @param {string} name
	 * @returns {never}
	 */
	function lifecycle_outside_component(name) {
		{
			const error = new Error(`lifecycle_outside_component\n\`${name}(...)\` can only be used during component initialisation\nhttps://svelte.dev/e/lifecycle_outside_component`);

			error.name = 'Svelte error';
			throw error;
		}
	}

	/** @import { ComponentContext, Derived, Effect, Reaction, Signal, Source, Value } from '#client' */

	const FLUSH_MICROTASK = 0;
	const FLUSH_SYNC = 1;
	// Used for DEV time error handling
	/** @param {WeakSet<Error>} value */
	const handled_errors = new WeakSet();
	let is_throwing_error = false;

	// Used for controlling the flush of effects.
	let scheduler_mode = FLUSH_MICROTASK;
	// Used for handling scheduling
	let is_micro_task_queued = false;

	/** @type {Effect | null} */
	let last_scheduled_effect = null;

	let is_flushing_effect = false;
	let is_destroying_effect = false;

	/** @param {boolean} value */
	function set_is_flushing_effect(value) {
		is_flushing_effect = value;
	}

	/** @param {boolean} value */
	function set_is_destroying_effect(value) {
		is_destroying_effect = value;
	}

	// Handle effect queues

	/** @type {Effect[]} */
	let queued_root_effects = [];

	let flush_count = 0;
	/** @type {Effect[]} Stack of effects, dev only */
	let dev_effect_stack = [];
	// Handle signal reactivity tree dependencies and reactions

	/** @type {null | Reaction} */
	let active_reaction = null;

	/** @param {null | Reaction} reaction */
	function set_active_reaction(reaction) {
		active_reaction = reaction;
	}

	/** @type {null | Effect} */
	let active_effect = null;

	/** @param {null | Effect} effect */
	function set_active_effect(effect) {
		active_effect = effect;
	}

	/**
	 * When sources are created within a derived, we record them so that we can safely allow
	 * local mutations to these sources without the side-effect error being invoked unnecessarily.
	 * @type {null | Source[]}
	 */
	let derived_sources = null;

	/**
	 * @param {Source[] | null} sources
	 */
	function set_derived_sources(sources) {
		derived_sources = sources;
	}

	/**
	 * The dependencies of the reaction that is currently being executed. In many cases,
	 * the dependencies are unchanged between runs, and so this will be `null` unless
	 * and until a new dependency is accessed — we track this via `skipped_deps`
	 * @type {null | Value[]}
	 */
	let new_deps = null;

	let skipped_deps = 0;

	/**
	 * Tracks writes that the effect it's executed in doesn't listen to yet,
	 * so that the dependency can be added to the effect later on if it then reads it
	 * @type {null | Source[]}
	 */
	let untracked_writes = null;

	/** @param {null | Source[]} value */
	function set_untracked_writes(value) {
		untracked_writes = value;
	}

	/** @type {number} Used by sources and deriveds for handling updates to unowned deriveds */
	let current_version = 0;

	// If we are working with a get() chain that has no active container,
	// to prevent memory leaks, we skip adding the reaction.
	let skip_reaction = false;

	// Handling runtime component context
	/** @type {ComponentContext | null} */
	let component_context = null;

	/**
	 * The current component function. Different from current component context:
	 * ```html
	 * <!-- App.svelte -->
	 * <Foo>
	 *   <Bar /> <!-- context == Foo.svelte, function == App.svelte -->
	 * </Foo>
	 * ```
	 * @type {ComponentContext['function']}
	 */
	let dev_current_component_function = null;

	function increment_version() {
		return ++current_version;
	}

	/** @returns {boolean} */
	function is_runes() {
		return !legacy_mode_flag || (component_context !== null && component_context.l === null);
	}

	/**
	 * Determines whether a derived or effect is dirty.
	 * If it is MAYBE_DIRTY, will set the status to CLEAN
	 * @param {Reaction} reaction
	 * @returns {boolean}
	 */
	function check_dirtiness(reaction) {
		var flags = reaction.f;

		if ((flags & DIRTY) !== 0) {
			return true;
		}

		if ((flags & MAYBE_DIRTY) !== 0) {
			var dependencies = reaction.deps;
			var is_unowned = (flags & UNOWNED) !== 0;

			if (dependencies !== null) {
				var i;

				if ((flags & DISCONNECTED) !== 0) {
					for (i = 0; i < dependencies.length; i++) {
						(dependencies[i].reactions ??= []).push(reaction);
					}

					reaction.f ^= DISCONNECTED;
				}

				for (i = 0; i < dependencies.length; i++) {
					var dependency = dependencies[i];

					if (check_dirtiness(/** @type {Derived} */ (dependency))) {
						update_derived(/** @type {Derived} */ (dependency));
					}

					// If we are working with an unowned signal as part of an effect (due to !skip_reaction)
					// and the version hasn't changed, we still need to check that this reaction
					// is linked to the dependency source – otherwise future updates will not be caught.
					if (
						is_unowned &&
						active_effect !== null &&
						!skip_reaction &&
						!dependency?.reactions?.includes(reaction)
					) {
						(dependency.reactions ??= []).push(reaction);
					}

					if (dependency.version > reaction.version) {
						return true;
					}
				}
			}

			// Unowned signals should never be marked as clean.
			if (!is_unowned) {
				set_signal_status(reaction, CLEAN);
			}
		}

		return false;
	}

	/**
	 * @param {unknown} error
	 * @param {Effect} effect
	 */
	function propagate_error(error, effect) {
		/** @type {Effect | null} */
		var current = effect;

		while (current !== null) {
			if ((current.f & BOUNDARY_EFFECT) !== 0) {
				try {
					// @ts-expect-error
					current.fn(error);
					return;
				} catch {
					// Remove boundary flag from effect
					current.f ^= BOUNDARY_EFFECT;
				}
			}

			current = current.parent;
		}

		is_throwing_error = false;
		throw error;
	}

	/**
	 * @param {Effect} effect
	 */
	function should_rethrow_error(effect) {
		return (
			(effect.f & DESTROYED) === 0 &&
			(effect.parent === null || (effect.parent.f & BOUNDARY_EFFECT) === 0)
		);
	}

	/**
	 * @param {unknown} error
	 * @param {Effect} effect
	 * @param {Effect | null} previous_effect
	 * @param {ComponentContext | null} component_context
	 */
	function handle_error(error, effect, previous_effect, component_context) {
		if (is_throwing_error) {
			if (previous_effect === null) {
				is_throwing_error = false;
			}

			if (should_rethrow_error(effect)) {
				throw error;
			}

			return;
		}

		if (previous_effect !== null) {
			is_throwing_error = true;
		}

		if (
			component_context === null ||
			!(error instanceof Error) ||
			handled_errors.has(error)
		) {
			propagate_error(error, effect);
			return;
		}

		handled_errors.add(error);

		const component_stack = [];

		const effect_name = effect.fn?.name;

		if (effect_name) {
			component_stack.push(effect_name);
		}

		/** @type {ComponentContext | null} */
		let current_context = component_context;

		while (current_context !== null) {
			{
				/** @type {string} */
				var filename = current_context.function?.[FILENAME];

				if (filename) {
					const file = filename.split('/').pop();
					component_stack.push(file);
				}
			}

			current_context = current_context.p;
		}

		const indent = /Firefox/.test(navigator.userAgent) ? '  ' : '\t';
		define_property(error, 'message', {
			value: error.message + `\n${component_stack.map((name) => `\n${indent}in ${name}`).join('')}\n`
		});
		define_property(error, 'component_stack', {
			value: component_stack
		});

		const stack = error.stack;

		// Filter out internal files from callstack
		if (stack) {
			const lines = stack.split('\n');
			const new_lines = [];
			for (let i = 0; i < lines.length; i++) {
				const line = lines[i];
				if (line.includes('svelte/src/internal')) {
					continue;
				}
				new_lines.push(line);
			}
			define_property(error, 'stack', {
				value: new_lines.join('\n')
			});
		}

		propagate_error(error, effect);

		if (should_rethrow_error(effect)) {
			throw error;
		}
	}

	/**
	 * @template V
	 * @param {Reaction} reaction
	 * @returns {V}
	 */
	function update_reaction(reaction) {
		var previous_deps = new_deps;
		var previous_skipped_deps = skipped_deps;
		var previous_untracked_writes = untracked_writes;
		var previous_reaction = active_reaction;
		var previous_skip_reaction = skip_reaction;
		var prev_derived_sources = derived_sources;
		var previous_component_context = component_context;
		var flags = reaction.f;

		new_deps = /** @type {null | Value[]} */ (null);
		skipped_deps = 0;
		untracked_writes = null;
		active_reaction = (flags & (BRANCH_EFFECT | ROOT_EFFECT)) === 0 ? reaction : null;
		skip_reaction = !is_flushing_effect && (flags & UNOWNED) !== 0;
		derived_sources = null;
		component_context = reaction.ctx;

		try {
			var result = /** @type {Function} */ (0, reaction.fn)();
			var deps = reaction.deps;

			if (new_deps !== null) {
				var i;

				remove_reactions(reaction, skipped_deps);

				if (deps !== null && skipped_deps > 0) {
					deps.length = skipped_deps + new_deps.length;
					for (i = 0; i < new_deps.length; i++) {
						deps[skipped_deps + i] = new_deps[i];
					}
				} else {
					reaction.deps = deps = new_deps;
				}

				if (!skip_reaction) {
					for (i = skipped_deps; i < deps.length; i++) {
						(deps[i].reactions ??= []).push(reaction);
					}
				}
			} else if (deps !== null && skipped_deps < deps.length) {
				remove_reactions(reaction, skipped_deps);
				deps.length = skipped_deps;
			}

			return result;
		} finally {
			new_deps = previous_deps;
			skipped_deps = previous_skipped_deps;
			untracked_writes = previous_untracked_writes;
			active_reaction = previous_reaction;
			skip_reaction = previous_skip_reaction;
			derived_sources = prev_derived_sources;
			component_context = previous_component_context;
		}
	}

	/**
	 * @template V
	 * @param {Reaction} signal
	 * @param {Value<V>} dependency
	 * @returns {void}
	 */
	function remove_reaction(signal, dependency) {
		let reactions = dependency.reactions;
		if (reactions !== null) {
			var index = reactions.indexOf(signal);
			if (index !== -1) {
				var new_length = reactions.length - 1;
				if (new_length === 0) {
					reactions = dependency.reactions = null;
				} else {
					// Swap with last element and then remove.
					reactions[index] = reactions[new_length];
					reactions.pop();
				}
			}
		}
		// If the derived has no reactions, then we can disconnect it from the graph,
		// allowing it to either reconnect in the future, or be GC'd by the VM.
		if (
			reactions === null &&
			(dependency.f & DERIVED) !== 0 &&
			// Destroying a child effect while updating a parent effect can cause a dependency to appear
			// to be unused, when in fact it is used by the currently-updating parent. Checking `new_deps`
			// allows us to skip the expensive work of disconnecting and immediately reconnecting it
			(new_deps === null || !new_deps.includes(dependency))
		) {
			set_signal_status(dependency, MAYBE_DIRTY);
			// If we are working with a derived that is owned by an effect, then mark it as being
			// disconnected.
			if ((dependency.f & (UNOWNED | DISCONNECTED)) === 0) {
				dependency.f ^= DISCONNECTED;
			}
			remove_reactions(/** @type {Derived} **/ (dependency), 0);
		}
	}

	/**
	 * @param {Reaction} signal
	 * @param {number} start_index
	 * @returns {void}
	 */
	function remove_reactions(signal, start_index) {
		var dependencies = signal.deps;
		if (dependencies === null) return;

		for (var i = start_index; i < dependencies.length; i++) {
			remove_reaction(signal, dependencies[i]);
		}
	}

	/**
	 * @param {Effect} effect
	 * @returns {void}
	 */
	function update_effect(effect) {
		var flags = effect.f;

		if ((flags & DESTROYED) !== 0) {
			return;
		}

		set_signal_status(effect, CLEAN);

		var previous_effect = active_effect;
		var previous_component_context = component_context;

		active_effect = effect;

		{
			var previous_component_fn = dev_current_component_function;
			dev_current_component_function = effect.component_function;
		}

		try {
			if ((flags & BLOCK_EFFECT) !== 0) {
				destroy_block_effect_children(effect);
			} else {
				destroy_effect_children(effect);
			}
			destroy_effect_deriveds(effect);

			execute_effect_teardown(effect);
			var teardown = update_reaction(effect);
			effect.teardown = typeof teardown === 'function' ? teardown : null;
			effect.version = current_version;

			if (DEV) {
				dev_effect_stack.push(effect);
			}
		} catch (error) {
			handle_error(error, effect, previous_effect, previous_component_context || effect.ctx);
		} finally {
			active_effect = previous_effect;

			{
				dev_current_component_function = previous_component_fn;
			}
		}
	}

	function log_effect_stack() {
		// eslint-disable-next-line no-console
		console.error(
			'Last ten effects were: ',
			dev_effect_stack.slice(-10).map((d) => d.fn)
		);
		dev_effect_stack = [];
	}

	function infinite_loop_guard() {
		if (flush_count > 1000) {
			flush_count = 0;
			try {
				effect_update_depth_exceeded();
			} catch (error) {
				{
					// stack is garbage, ignore. Instead add a console.error message.
					define_property(error, 'stack', {
						value: ''
					});
				}
				// Try and handle the error so it can be caught at a boundary, that's
				// if there's an effect available from when it was last scheduled
				if (last_scheduled_effect !== null) {
					{
						try {
							handle_error(error, last_scheduled_effect, null, null);
						} catch (e) {
							// Only log the effect stack if the error is re-thrown
							log_effect_stack();
							throw e;
						}
					}
				} else {
					{
						log_effect_stack();
					}
					throw error;
				}
			}
		}
		flush_count++;
	}

	/**
	 * @param {Array<Effect>} root_effects
	 * @returns {void}
	 */
	function flush_queued_root_effects(root_effects) {
		var length = root_effects.length;
		if (length === 0) {
			return;
		}
		infinite_loop_guard();

		var previously_flushing_effect = is_flushing_effect;
		is_flushing_effect = true;

		try {
			for (var i = 0; i < length; i++) {
				var effect = root_effects[i];

				if ((effect.f & CLEAN) === 0) {
					effect.f ^= CLEAN;
				}

				/** @type {Effect[]} */
				var collected_effects = [];

				process_effects(effect, collected_effects);
				flush_queued_effects(collected_effects);
			}
		} finally {
			is_flushing_effect = previously_flushing_effect;
		}
	}

	/**
	 * @param {Array<Effect>} effects
	 * @returns {void}
	 */
	function flush_queued_effects(effects) {
		var length = effects.length;
		if (length === 0) return;

		for (var i = 0; i < length; i++) {
			var effect = effects[i];

			if ((effect.f & (DESTROYED | INERT)) === 0) {
				try {
					if (check_dirtiness(effect)) {
						update_effect(effect);

						// Effects with no dependencies or teardown do not get added to the effect tree.
						// Deferred effects (e.g. `$effect(...)`) _are_ added to the tree because we
						// don't know if we need to keep them until they are executed. Doing the check
						// here (rather than in `update_effect`) allows us to skip the work for
						// immediate effects.
						if (effect.deps === null && effect.first === null && effect.nodes_start === null) {
							if (effect.teardown === null) {
								// remove this effect from the graph
								unlink_effect(effect);
							} else {
								// keep the effect in the graph, but free up some memory
								effect.fn = null;
							}
						}
					}
				} catch (error) {
					handle_error(error, effect, null, effect.ctx);
				}
			}
		}
	}

	function process_deferred() {
		is_micro_task_queued = false;
		if (flush_count > 1001) {
			return;
		}
		const previous_queued_root_effects = queued_root_effects;
		queued_root_effects = [];
		flush_queued_root_effects(previous_queued_root_effects);

		if (!is_micro_task_queued) {
			flush_count = 0;
			last_scheduled_effect = null;
			{
				dev_effect_stack = [];
			}
		}
	}

	/**
	 * @param {Effect} signal
	 * @returns {void}
	 */
	function schedule_effect(signal) {
		if (scheduler_mode === FLUSH_MICROTASK) {
			if (!is_micro_task_queued) {
				is_micro_task_queued = true;
				queueMicrotask(process_deferred);
			}
		}

		last_scheduled_effect = signal;

		var effect = signal;

		while (effect.parent !== null) {
			effect = effect.parent;
			var flags = effect.f;

			if ((flags & (ROOT_EFFECT | BRANCH_EFFECT)) !== 0) {
				if ((flags & CLEAN) === 0) return;
				effect.f ^= CLEAN;
			}
		}

		queued_root_effects.push(effect);
	}

	/**
	 *
	 * This function both runs render effects and collects user effects in topological order
	 * from the starting effect passed in. Effects will be collected when they match the filtered
	 * bitwise flag passed in only. The collected effects array will be populated with all the user
	 * effects to be flushed.
	 *
	 * @param {Effect} effect
	 * @param {Effect[]} collected_effects
	 * @returns {void}
	 */
	function process_effects(effect, collected_effects) {
		var current_effect = effect.first;
		var effects = [];

		main_loop: while (current_effect !== null) {
			var flags = current_effect.f;
			var is_branch = (flags & BRANCH_EFFECT) !== 0;
			var is_skippable_branch = is_branch && (flags & CLEAN) !== 0;
			var sibling = current_effect.next;

			if (!is_skippable_branch && (flags & INERT) === 0) {
				if ((flags & RENDER_EFFECT) !== 0) {
					if (is_branch) {
						current_effect.f ^= CLEAN;
					} else {
						try {
							if (check_dirtiness(current_effect)) {
								update_effect(current_effect);
							}
						} catch (error) {
							handle_error(error, current_effect, null, current_effect.ctx);
						}
					}

					var child = current_effect.first;

					if (child !== null) {
						current_effect = child;
						continue;
					}
				} else if ((flags & EFFECT) !== 0) {
					effects.push(current_effect);
				}
			}

			if (sibling === null) {
				let parent = current_effect.parent;

				while (parent !== null) {
					if (effect === parent) {
						break main_loop;
					}
					var parent_sibling = parent.next;
					if (parent_sibling !== null) {
						current_effect = parent_sibling;
						continue main_loop;
					}
					parent = parent.parent;
				}
			}

			current_effect = sibling;
		}

		// We might be dealing with many effects here, far more than can be spread into
		// an array push call (callstack overflow). So let's deal with each effect in a loop.
		for (var i = 0; i < effects.length; i++) {
			child = effects[i];
			collected_effects.push(child);
			process_effects(child, collected_effects);
		}
	}

	/**
	 * Internal version of `flushSync` with the option to not flush previous effects.
	 * Returns the result of the passed function, if given.
	 * @param {() => any} [fn]
	 * @returns {any}
	 */
	function flush_sync(fn) {
		var previous_scheduler_mode = scheduler_mode;
		var previous_queued_root_effects = queued_root_effects;

		try {
			infinite_loop_guard();

			/** @type {Effect[]} */
			const root_effects = [];

			scheduler_mode = FLUSH_SYNC;
			queued_root_effects = root_effects;
			is_micro_task_queued = false;

			flush_queued_root_effects(previous_queued_root_effects);

			var result = fn?.();

			flush_tasks();
			if (queued_root_effects.length > 0 || root_effects.length > 0) {
				flush_sync();
			}

			flush_count = 0;
			last_scheduled_effect = null;
			if (DEV) {
				dev_effect_stack = [];
			}

			return result;
		} finally {
			scheduler_mode = previous_scheduler_mode;
			queued_root_effects = previous_queued_root_effects;
		}
	}

	/**
	 * Returns a promise that resolves once any pending state changes have been applied.
	 * @returns {Promise<void>}
	 */
	async function tick() {
		await Promise.resolve();
		// By calling flush_sync we guarantee that any pending state changes are applied after one tick.
		// TODO look into whether we can make flushing subsequent updates synchronously in the future.
		flush_sync();
	}

	/**
	 * @template V
	 * @param {Value<V>} signal
	 * @returns {V}
	 */
	function get$2(signal) {
		var flags = signal.f;
		var is_derived = (flags & DERIVED) !== 0;

		// If the derived is destroyed, just execute it again without retaining
		// its memoisation properties as the derived is stale
		if (is_derived && (flags & DESTROYED) !== 0) {
			var value = execute_derived(/** @type {Derived} */ (signal));
			// Ensure the derived remains destroyed
			destroy_derived(/** @type {Derived} */ (signal));
			return value;
		}

		// Register the dependency on the current reaction signal.
		if (active_reaction !== null) {
			if (derived_sources !== null && derived_sources.includes(signal)) {
				state_unsafe_local_read();
			}
			var deps = active_reaction.deps;

			// If the signal is accessing the same dependencies in the same
			// order as it did last time, increment `skipped_deps`
			// rather than updating `new_deps`, which creates GC cost
			if (new_deps === null && deps !== null && deps[skipped_deps] === signal) {
				skipped_deps++;
			} else if (new_deps === null) {
				new_deps = [signal];
			} else {
				new_deps.push(signal);
			}

			if (
				untracked_writes !== null &&
				active_effect !== null &&
				(active_effect.f & CLEAN) !== 0 &&
				(active_effect.f & BRANCH_EFFECT) === 0 &&
				untracked_writes.includes(signal)
			) {
				set_signal_status(active_effect, DIRTY);
				schedule_effect(active_effect);
			}
		} else if (is_derived && /** @type {Derived} */ (signal).deps === null) {
			var derived = /** @type {Derived} */ (signal);
			var parent = derived.parent;
			var target = derived;

			while (parent !== null) {
				// Attach the derived to the nearest parent effect, if there are deriveds
				// in between then we also need to attach them too
				if ((parent.f & DERIVED) !== 0) {
					var parent_derived = /** @type {Derived} */ (parent);

					target = parent_derived;
					parent = parent_derived.parent;
				} else {
					var parent_effect = /** @type {Effect} */ (parent);

					if (!parent_effect.deriveds?.includes(target)) {
						(parent_effect.deriveds ??= []).push(target);
					}
					break;
				}
			}
		}

		if (is_derived) {
			derived = /** @type {Derived} */ (signal);

			if (check_dirtiness(derived)) {
				update_derived(derived);
			}
		}

		return signal.v;
	}

	/**
	 * When used inside a [`$derived`](https://svelte.dev/docs/svelte/$derived) or [`$effect`](https://svelte.dev/docs/svelte/$effect),
	 * any state read inside `fn` will not be treated as a dependency.
	 *
	 * ```ts
	 * $effect(() => {
	 *   // this will run when `data` changes, but not when `time` changes
	 *   save(data, {
	 *     timestamp: untrack(() => time)
	 *   });
	 * });
	 * ```
	 * @template T
	 * @param {() => T} fn
	 * @returns {T}
	 */
	function untrack(fn) {
		const previous_reaction = active_reaction;
		try {
			active_reaction = null;
			return fn();
		} finally {
			active_reaction = previous_reaction;
		}
	}

	const STATUS_MASK = ~(DIRTY | MAYBE_DIRTY | CLEAN);

	/**
	 * @param {Signal} signal
	 * @param {number} status
	 * @returns {void}
	 */
	function set_signal_status(signal, status) {
		signal.f = (signal.f & STATUS_MASK) | status;
	}

	/**
	 * Retrieves the context that belongs to the closest parent component with the specified `key`.
	 * Must be called during component initialisation.
	 *
	 * @template T
	 * @param {any} key
	 * @returns {T}
	 */
	function getContext(key) {
		const context_map = get_or_init_context_map('getContext');
		const result = /** @type {T} */ (context_map.get(key));

		{
			const fn = /** @type {ComponentContext} */ (component_context).function;
			if (fn) {
				add_owner(result, fn, true);
			}
		}

		return result;
	}

	/**
	 * Associates an arbitrary `context` object with the current component and the specified `key`
	 * and returns that object. The context is then available to children of the component
	 * (including slotted content) with `getContext`.
	 *
	 * Like lifecycle functions, this must be called during component initialisation.
	 *
	 * @template T
	 * @param {any} key
	 * @param {T} context
	 * @returns {T}
	 */
	function setContext(key, context) {
		const context_map = get_or_init_context_map('setContext');
		context_map.set(key, context);
		return context;
	}

	/**
	 * Checks whether a given `key` has been set in the context of a parent component.
	 * Must be called during component initialisation.
	 *
	 * @param {any} key
	 * @returns {boolean}
	 */
	function hasContext(key) {
		const context_map = get_or_init_context_map('hasContext');
		return context_map.has(key);
	}

	/**
	 * Retrieves the whole context map that belongs to the closest parent component.
	 * Must be called during component initialisation. Useful, for example, if you
	 * programmatically create a component and want to pass the existing context to it.
	 *
	 * @template {Map<any, any>} [T=Map<any, any>]
	 * @returns {T}
	 */
	function getAllContexts() {
		const context_map = get_or_init_context_map('getAllContexts');

		{
			const fn = component_context?.function;
			if (fn) {
				for (const value of context_map.values()) {
					add_owner(value, fn, true);
				}
			}
		}

		return /** @type {T} */ (context_map);
	}

	/**
	 * @param {string} name
	 * @returns {Map<unknown, unknown>}
	 */
	function get_or_init_context_map(name) {
		if (component_context === null) {
			lifecycle_outside_component(name);
		}

		return (component_context.c ??= new Map(get_parent_context(component_context) || undefined));
	}

	/**
	 * @param {ComponentContext} component_context
	 * @returns {Map<unknown, unknown> | null}
	 */
	function get_parent_context(component_context) {
		let parent = component_context.p;
		while (parent !== null) {
			const context_map = parent.c;
			if (context_map !== null) {
				return context_map;
			}
			parent = parent.p;
		}
		return null;
	}

	/**
	 * @template {number | bigint} T
	 * @param {Value<T>} signal
	 * @param {1 | -1} [d]
	 * @returns {T}
	 */
	function update(signal, d = 1) {
		var value = get$2(signal);
		var result = d === 1 ? value++ : value--;

		set(signal, value);

		// @ts-expect-error
		return result;
	}

	/**
	 * @param {Record<string, unknown>} props
	 * @param {any} runes
	 * @param {Function} [fn]
	 * @returns {void}
	 */
	function push(props, runes = false, fn) {
		component_context = {
			p: component_context,
			c: null,
			e: null,
			m: false,
			s: props,
			x: null,
			l: null
		};

		if (legacy_mode_flag && !runes) {
			component_context.l = {
				s: null,
				u: null,
				r1: [],
				r2: source(false)
			};
		}

		{
			// component function
			component_context.function = fn;
			dev_current_component_function = fn;
		}
	}

	/**
	 * @template {Record<string, any>} T
	 * @param {T} [component]
	 * @returns {T}
	 */
	function pop(component) {
		const context_stack_item = component_context;
		if (context_stack_item !== null) {
			if (component !== undefined) {
				context_stack_item.x = component;
			}
			const component_effects = context_stack_item.e;
			if (component_effects !== null) {
				var previous_effect = active_effect;
				var previous_reaction = active_reaction;
				context_stack_item.e = null;
				try {
					for (var i = 0; i < component_effects.length; i++) {
						var component_effect = component_effects[i];
						set_active_effect(component_effect.effect);
						set_active_reaction(component_effect.reaction);
						effect(component_effect.fn);
					}
				} finally {
					set_active_effect(previous_effect);
					set_active_reaction(previous_reaction);
				}
			}
			component_context = context_stack_item.p;
			{
				dev_current_component_function = context_stack_item.p?.function ?? null;
			}
			context_stack_item.m = true;
		}
		// Micro-optimization: Don't set .a above to the empty object
		// so it can be garbage-collected when the return here is unused
		return component || /** @type {T} */ ({});
	}

	/**
	 * Possibly traverse an object and read all its properties so that they're all reactive in case this is `$state`.
	 * Does only check first level of an object for performance reasons (heuristic should be good for 99% of all cases).
	 * @param {any} value
	 * @returns {void}
	 */
	function deep_read_state(value) {
		if (typeof value !== 'object' || !value || value instanceof EventTarget) {
			return;
		}

		if (STATE_SYMBOL in value) {
			deep_read(value);
		} else if (!Array.isArray(value)) {
			for (let key in value) {
				const prop = value[key];
				if (typeof prop === 'object' && prop && STATE_SYMBOL in prop) {
					deep_read(prop);
				}
			}
		}
	}

	/**
	 * Deeply traverse an object and read all its properties
	 * so that they're all reactive in case this is `$state`
	 * @param {any} value
	 * @param {Set<any>} visited
	 * @returns {void}
	 */
	function deep_read(value, visited = new Set()) {
		if (
			typeof value === 'object' &&
			value !== null &&
			// We don't want to traverse DOM elements
			!(value instanceof EventTarget) &&
			!visited.has(value)
		) {
			visited.add(value);
			// When working with a possible SvelteDate, this
			// will ensure we capture changes to it.
			if (value instanceof Date) {
				value.getTime();
			}
			for (let key in value) {
				try {
					deep_read(value[key], visited);
				} catch (e) {
					// continue
				}
			}
			const proto = get_prototype_of(value);
			if (
				proto !== Object.prototype &&
				proto !== Array.prototype &&
				proto !== Map.prototype &&
				proto !== Set.prototype &&
				proto !== Date.prototype
			) {
				const descriptors = get_descriptors(proto);
				for (let key in descriptors) {
					const get = descriptors[key].get;
					if (get) {
						try {
							get.call(value);
						} catch (e) {
							// continue
						}
					}
				}
			}
		}
	}

	{
		/**
		 * @param {string} rune
		 */
		function throw_rune_error(rune) {
			if (!(rune in globalThis)) {
				// TODO if people start adjusting the "this can contain runes" config through v-p-s more, adjust this message
				/** @type {any} */
				let value; // let's hope noone modifies this global, but belts and braces
				Object.defineProperty(globalThis, rune, {
					configurable: true,
					// eslint-disable-next-line getter-return
					get: () => {
						if (value !== undefined) {
							return value;
						}

						rune_outside_svelte(rune);
					},
					set: (v) => {
						value = v;
					}
				});
			}
		}

		throw_rune_error('$state');
		throw_rune_error('$effect');
		throw_rune_error('$derived');
		throw_rune_error('$inspect');
		throw_rune_error('$props');
		throw_rune_error('$bindable');
	}

	const regex_return_characters = /\r/g;

	/**
	 * @param {string} str
	 * @returns {string}
	 */
	function hash(str) {
		str = str.replace(regex_return_characters, '');
		let hash = 5381;
		let i = str.length;

		while (i--) hash = ((hash << 5) - hash) ^ str.charCodeAt(i);
		return (hash >>> 0).toString(36);
	}

	/**
	 * @param {string} name
	 */
	function is_capture_event(name) {
		return name.endsWith('capture') && name !== 'gotpointercapture' && name !== 'lostpointercapture';
	}

	/** List of Element events that will be delegated */
	const DELEGATED_EVENTS = [
		'beforeinput',
		'click',
		'change',
		'dblclick',
		'contextmenu',
		'focusin',
		'focusout',
		'input',
		'keydown',
		'keyup',
		'mousedown',
		'mousemove',
		'mouseout',
		'mouseover',
		'mouseup',
		'pointerdown',
		'pointermove',
		'pointerout',
		'pointerover',
		'pointerup',
		'touchend',
		'touchmove',
		'touchstart'
	];

	/**
	 * Returns `true` if `event_name` is a delegated event
	 * @param {string} event_name
	 */
	function is_delegated(event_name) {
		return DELEGATED_EVENTS.includes(event_name);
	}

	/**
	 * @type {Record<string, string>}
	 * List of attribute names that should be aliased to their property names
	 * because they behave differently between setting them as an attribute and
	 * setting them as a property.
	 */
	const ATTRIBUTE_ALIASES = {
		// no `class: 'className'` because we handle that separately
		formnovalidate: 'formNoValidate',
		ismap: 'isMap',
		nomodule: 'noModule',
		playsinline: 'playsInline',
		readonly: 'readOnly',
		defaultvalue: 'defaultValue',
		defaultchecked: 'defaultChecked',
		srcobject: 'srcObject'
	};

	/**
	 * @param {string} name
	 */
	function normalize_attribute(name) {
		name = name.toLowerCase();
		return ATTRIBUTE_ALIASES[name] ?? name;
	}

	/**
	 * Subset of delegated events which should be passive by default.
	 * These two are already passive via browser defaults on window, document and body.
	 * But since
	 * - we're delegating them
	 * - they happen often
	 * - they apply to mobile which is generally less performant
	 * we're marking them as passive by default for other elements, too.
	 */
	const PASSIVE_EVENTS = ['touchstart', 'touchmove'];

	/**
	 * Returns `true` if `name` is a passive event
	 * @param {string} name
	 */
	function is_passive_event(name) {
		return PASSIVE_EVENTS.includes(name);
	}

	/** List of elements that require raw contents and should not have SSR comments put in them */
	const RAW_TEXT_ELEMENTS = /** @type {const} */ (['textarea', 'script', 'style', 'title']);

	/** @param {string} name */
	function is_raw_text_element(name) {
		return RAW_TEXT_ELEMENTS.includes(/** @type {RAW_TEXT_ELEMENTS[number]} */ (name));
	}

	/**
	 * Prevent devtools trying to make `location` a clickable link by inserting a zero-width space
	 * @param {string | undefined} location
	 */
	function sanitize_location(location) {
		return location?.replace(/\//g, '/\u200b');
	}

	/**
	 * @param {HTMLElement} dom
	 * @param {boolean} value
	 * @returns {void}
	 */
	function autofocus(dom, value) {
		if (value) {
			const body = document.body;
			dom.autofocus = true;

			queue_micro_task(() => {
				if (document.activeElement === body) {
					dom.focus();
				}
			});
		}
	}

	/**
	 * The child of a textarea actually corresponds to the defaultValue property, so we need
	 * to remove it upon hydration to avoid a bug when someone resets the form value.
	 * @param {HTMLTextAreaElement} dom
	 * @returns {void}
	 */
	function remove_textarea_child(dom) {
		if (hydrating && get_first_child(dom) !== null) {
			clear_text_content(dom);
		}
	}

	let listening_to_form_reset = false;

	function add_form_reset_listener() {
		if (!listening_to_form_reset) {
			listening_to_form_reset = true;
			document.addEventListener(
				'reset',
				(evt) => {
					// Needs to happen one tick later or else the dom properties of the form
					// elements have not updated to their reset values yet
					Promise.resolve().then(() => {
						if (!evt.defaultPrevented) {
							for (const e of /**@type {HTMLFormElement} */ (evt.target).elements) {
								// @ts-expect-error
								e.__on_r?.();
							}
						}
					});
				},
				// In the capture phase to guarantee we get noticed of it (no possiblity of stopPropagation)
				{ capture: true }
			);
		}
	}

	/**
	 * @template T
	 * @param {() => T} fn
	 */
	function without_reactive_context(fn) {
		var previous_reaction = active_reaction;
		var previous_effect = active_effect;
		set_active_reaction(null);
		set_active_effect(null);
		try {
			return fn();
		} finally {
			set_active_reaction(previous_reaction);
			set_active_effect(previous_effect);
		}
	}

	/**
	 * Listen to the given event, and then instantiate a global form reset listener if not already done,
	 * to notify all bindings when the form is reset
	 * @param {HTMLElement} element
	 * @param {string} event
	 * @param {(is_reset?: true) => void} handler
	 * @param {(is_reset?: true) => void} [on_reset]
	 */
	function listen_to_event_and_reset_event(element, event, handler, on_reset = handler) {
		element.addEventListener(event, () => without_reactive_context(handler));
		// @ts-expect-error
		const prev = element.__on_r;
		if (prev) {
			// special case for checkbox that can have multiple binds (group & checked)
			// @ts-expect-error
			element.__on_r = () => {
				prev();
				on_reset(true);
			};
		} else {
			// @ts-expect-error
			element.__on_r = () => on_reset(true);
		}

		add_form_reset_listener();
	}

	/** @import { Location } from 'locate-character' */

	/** @type {Set<string>} */
	const all_registered_events = new Set();

	/** @type {Set<(events: Array<string>) => void>} */
	const root_event_handles = new Set();

	/**
	 * @param {string} event_name
	 * @param {EventTarget} dom
	 * @param {EventListener} handler
	 * @param {AddEventListenerOptions} options
	 */
	function create_event(event_name, dom, handler, options) {
		/**
		 * @this {EventTarget}
		 */
		function target_handler(/** @type {Event} */ event) {
			if (!options.capture) {
				// Only call in the bubble phase, else delegated events would be called before the capturing events
				handle_event_propagation.call(dom, event);
			}
			if (!event.cancelBubble) {
				return without_reactive_context(() => {
					return handler.call(this, event);
				});
			}
		}

		// Chrome has a bug where pointer events don't work when attached to a DOM element that has been cloned
		// with cloneNode() and the DOM element is disconnected from the document. To ensure the event works, we
		// defer the attachment till after it's been appended to the document. TODO: remove this once Chrome fixes
		// this bug. The same applies to wheel events and touch events.
		if (
			event_name.startsWith('pointer') ||
			event_name.startsWith('touch') ||
			event_name === 'wheel'
		) {
			queue_micro_task(() => {
				dom.addEventListener(event_name, target_handler, options);
			});
		} else {
			dom.addEventListener(event_name, target_handler, options);
		}

		return target_handler;
	}

	/**
	 * @param {string} event_name
	 * @param {Element} dom
	 * @param {EventListener} handler
	 * @param {boolean} capture
	 * @param {boolean} [passive]
	 * @returns {void}
	 */
	function event(event_name, dom, handler, capture, passive) {
		var options = { capture, passive };
		var target_handler = create_event(event_name, dom, handler, options);

		// @ts-ignore
		if (dom === document.body || dom === window || dom === document) {
			teardown(() => {
				dom.removeEventListener(event_name, target_handler, options);
			});
		}
	}

	/**
	 * @param {Array<string>} events
	 * @returns {void}
	 */
	function delegate(events) {
		for (var i = 0; i < events.length; i++) {
			all_registered_events.add(events[i]);
		}

		for (var fn of root_event_handles) {
			fn(events);
		}
	}

	/**
	 * @this {EventTarget}
	 * @param {Event} event
	 * @returns {void}
	 */
	function handle_event_propagation(event) {
		var handler_element = this;
		var owner_document = /** @type {Node} */ (handler_element).ownerDocument;
		var event_name = event.type;
		var path = event.composedPath?.() || [];
		var current_target = /** @type {null | Element} */ (path[0] || event.target);

		// composedPath contains list of nodes the event has propagated through.
		// We check __root to skip all nodes below it in case this is a
		// parent of the __root node, which indicates that there's nested
		// mounted apps. In this case we don't want to trigger events multiple times.
		var path_idx = 0;

		// @ts-expect-error is added below
		var handled_at = event.__root;

		if (handled_at) {
			var at_idx = path.indexOf(handled_at);
			if (
				at_idx !== -1 &&
				(handler_element === document || handler_element === /** @type {any} */ (window))
			) {
				// This is the fallback document listener or a window listener, but the event was already handled
				// -> ignore, but set handle_at to document/window so that we're resetting the event
				// chain in case someone manually dispatches the same event object again.
				// @ts-expect-error
				event.__root = handler_element;
				return;
			}

			// We're deliberately not skipping if the index is higher, because
			// someone could create an event programmatically and emit it multiple times,
			// in which case we want to handle the whole propagation chain properly each time.
			// (this will only be a false negative if the event is dispatched multiple times and
			// the fallback document listener isn't reached in between, but that's super rare)
			var handler_idx = path.indexOf(handler_element);
			if (handler_idx === -1) {
				// handle_idx can theoretically be -1 (happened in some JSDOM testing scenarios with an event listener on the window object)
				// so guard against that, too, and assume that everything was handled at this point.
				return;
			}

			if (at_idx <= handler_idx) {
				path_idx = at_idx;
			}
		}

		current_target = /** @type {Element} */ (path[path_idx] || event.target);
		// there can only be one delegated event per element, and we either already handled the current target,
		// or this is the very first target in the chain which has a non-delegated listener, in which case it's safe
		// to handle a possible delegated event on it later (through the root delegation listener for example).
		if (current_target === handler_element) return;

		// Proxy currentTarget to correct target
		define_property(event, 'currentTarget', {
			configurable: true,
			get() {
				return current_target || owner_document;
			}
		});

		// This started because of Chromium issue https://chromestatus.com/feature/5128696823545856,
		// where removal or moving of of the DOM can cause sync `blur` events to fire, which can cause logic
		// to run inside the current `active_reaction`, which isn't what we want at all. However, on reflection,
		// it's probably best that all event handled by Svelte have this behaviour, as we don't really want
		// an event handler to run in the context of another reaction or effect.
		var previous_reaction = active_reaction;
		var previous_effect = active_effect;
		set_active_reaction(null);
		set_active_effect(null);

		try {
			/**
			 * @type {unknown}
			 */
			var throw_error;
			/**
			 * @type {unknown[]}
			 */
			var other_errors = [];

			while (current_target !== null) {
				/** @type {null | Element} */
				var parent_element =
					current_target.assignedSlot ||
					current_target.parentNode ||
					/** @type {any} */ (current_target).host ||
					null;

				try {
					// @ts-expect-error
					var delegated = current_target['__' + event_name];

					if (delegated !== undefined && !(/** @type {any} */ (current_target).disabled)) {
						if (is_array(delegated)) {
							var [fn, ...data] = delegated;
							fn.apply(current_target, [event, ...data]);
						} else {
							delegated.call(current_target, event);
						}
					}
				} catch (error) {
					if (throw_error) {
						other_errors.push(error);
					} else {
						throw_error = error;
					}
				}
				if (event.cancelBubble || parent_element === handler_element || parent_element === null) {
					break;
				}
				current_target = parent_element;
			}

			if (throw_error) {
				for (let error of other_errors) {
					// Throw the rest of the errors, one-by-one on a microtask
					queueMicrotask(() => {
						throw error;
					});
				}
				throw throw_error;
			}
		} finally {
			// @ts-expect-error is used above
			event.__root = handler_element;
			// @ts-ignore remove proxy on currentTarget
			delete event.currentTarget;
			set_active_reaction(previous_reaction);
			set_active_effect(previous_effect);
		}
	}

	/** @param {string} html */
	function create_fragment_from_html(html) {
		var elem = document.createElement('template');
		elem.innerHTML = html;
		return elem.content;
	}

	/** @import { Effect, TemplateNode } from '#client' */

	/**
	 * @param {TemplateNode} start
	 * @param {TemplateNode | null} end
	 */
	function assign_nodes(start, end) {
		var effect = /** @type {Effect} */ (active_effect);
		if (effect.nodes_start === null) {
			effect.nodes_start = start;
			effect.nodes_end = end;
		}
	}

	/**
	 * @param {string} content
	 * @param {number} flags
	 * @returns {() => Node | Node[]}
	 */
	/*#__NO_SIDE_EFFECTS__*/
	function template(content, flags) {
		var is_fragment = (flags & TEMPLATE_FRAGMENT) !== 0;
		var use_import_node = (flags & TEMPLATE_USE_IMPORT_NODE) !== 0;

		/** @type {Node} */
		var node;

		/**
		 * Whether or not the first item is a text/element node. If not, we need to
		 * create an additional comment node to act as `effect.nodes.start`
		 */
		var has_start = !content.startsWith('<!>');

		return () => {
			if (hydrating) {
				assign_nodes(hydrate_node, null);
				return hydrate_node;
			}

			if (node === undefined) {
				node = create_fragment_from_html(has_start ? content : '<!>' + content);
				if (!is_fragment) node = /** @type {Node} */ (get_first_child(node));
			}

			var clone = /** @type {TemplateNode} */ (
				use_import_node ? document.importNode(node, true) : node.cloneNode(true)
			);

			if (is_fragment) {
				var start = /** @type {TemplateNode} */ (get_first_child(clone));
				var end = /** @type {TemplateNode} */ (clone.lastChild);

				assign_nodes(start, end);
			} else {
				assign_nodes(clone, clone);
			}

			return clone;
		};
	}

	/**
	 * Don't mark this as side-effect-free, hydration needs to walk all nodes
	 * @param {any} value
	 */
	function text(value = '') {
		if (!hydrating) {
			var t = create_text(value + '');
			assign_nodes(t, t);
			return t;
		}

		var node = hydrate_node;

		if (node.nodeType !== 3) {
			// if an {expression} is empty during SSR, we need to insert an empty text node
			node.before((node = create_text()));
			set_hydrate_node(node);
		}

		assign_nodes(node, node);
		return node;
	}

	function comment() {
		// we're not delegating to `template` here for performance reasons
		if (hydrating) {
			assign_nodes(hydrate_node, null);
			return hydrate_node;
		}

		var frag = document.createDocumentFragment();
		var start = document.createComment('');
		var anchor = create_text();
		frag.append(start, anchor);

		assign_nodes(start, anchor);

		return frag;
	}

	/**
	 * Assign the created (or in hydration mode, traversed) dom elements to the current block
	 * and insert the elements into the dom (in client mode).
	 * @param {Text | Comment | Element} anchor
	 * @param {DocumentFragment | Element} dom
	 */
	function append(anchor, dom) {
		if (hydrating) {
			/** @type {Effect} */ (active_effect).nodes_end = hydrate_node;
			hydrate_next();
			return;
		}

		if (anchor === null) {
			// edge case — void `<svelte:element>` with content
			return;
		}

		anchor.before(/** @type {Node} */ (dom));
	}

	/** @import { ComponentContext, Effect, TemplateNode } from '#client' */
	/** @import { Component, ComponentType, SvelteComponent, MountOptions } from '../../index.js' */

	/**
	 * This is normally true — block effects should run their intro transitions —
	 * but is false during hydration (unless `options.intro` is `true`) and
	 * when creating the children of a `<svelte:element>` that just changed tag
	 */
	let should_intro = true;

	/** @param {boolean} value */
	function set_should_intro(value) {
		should_intro = value;
	}

	/**
	 * @param {Element} text
	 * @param {string} value
	 * @returns {void}
	 */
	function set_text(text, value) {
		// For objects, we apply string coercion (which might make things like $state array references in the template reactive) before diffing
		var str = value == null ? '' : typeof value === 'object' ? value + '' : value;
		// @ts-expect-error
		if (str !== (text.__t ??= text.nodeValue)) {
			// @ts-expect-error
			text.__t = str;
			text.nodeValue = str == null ? '' : str + '';
		}
	}

	/**
	 * Mounts a component to the given target and returns the exports and potentially the props (if compiled with `accessors: true`) of the component.
	 * Transitions will play during the initial render unless the `intro` option is set to `false`.
	 *
	 * @template {Record<string, any>} Props
	 * @template {Record<string, any>} Exports
	 * @param {ComponentType<SvelteComponent<Props>> | Component<Props, Exports, any>} component
	 * @param {MountOptions<Props>} options
	 * @returns {Exports}
	 */
	function mount(component, options) {
		return _mount(component, options);
	}

	/**
	 * Hydrates a component on the given target and returns the exports and potentially the props (if compiled with `accessors: true`) of the component
	 *
	 * @template {Record<string, any>} Props
	 * @template {Record<string, any>} Exports
	 * @param {ComponentType<SvelteComponent<Props>> | Component<Props, Exports, any>} component
	 * @param {{} extends Props ? {
	 * 		target: Document | Element | ShadowRoot;
	 * 		props?: Props;
	 * 		events?: Record<string, (e: any) => any>;
	 *  	context?: Map<any, any>;
	 * 		intro?: boolean;
	 * 		recover?: boolean;
	 * 	} : {
	 * 		target: Document | Element | ShadowRoot;
	 * 		props: Props;
	 * 		events?: Record<string, (e: any) => any>;
	 *  	context?: Map<any, any>;
	 * 		intro?: boolean;
	 * 		recover?: boolean;
	 * 	}} options
	 * @returns {Exports}
	 */
	function hydrate(component, options) {
		init_operations();
		options.intro = options.intro ?? false;
		const target = options.target;
		const was_hydrating = hydrating;
		const previous_hydrate_node = hydrate_node;

		try {
			var anchor = /** @type {TemplateNode} */ (get_first_child(target));
			while (
				anchor &&
				(anchor.nodeType !== 8 || /** @type {Comment} */ (anchor).data !== HYDRATION_START)
			) {
				anchor = /** @type {TemplateNode} */ (get_next_sibling(anchor));
			}

			if (!anchor) {
				throw HYDRATION_ERROR;
			}

			set_hydrating(true);
			set_hydrate_node(/** @type {Comment} */ (anchor));
			hydrate_next();

			const instance = _mount(component, { ...options, anchor });

			if (
				hydrate_node === null ||
				hydrate_node.nodeType !== 8 ||
				/** @type {Comment} */ (hydrate_node).data !== HYDRATION_END
			) {
				hydration_mismatch();
				throw HYDRATION_ERROR;
			}

			set_hydrating(false);

			return /**  @type {Exports} */ (instance);
		} catch (error) {
			if (error === HYDRATION_ERROR) {
				if (options.recover === false) {
					hydration_failed();
				}

				// If an error occured above, the operations might not yet have been initialised.
				init_operations();
				clear_text_content(target);

				set_hydrating(false);
				return mount(component, options);
			}

			throw error;
		} finally {
			set_hydrating(was_hydrating);
			set_hydrate_node(previous_hydrate_node);
		}
	}

	/** @type {Map<string, number>} */
	const document_listeners = new Map();

	/**
	 * @template {Record<string, any>} Exports
	 * @param {ComponentType<SvelteComponent<any>> | Component<any>} Component
	 * @param {MountOptions} options
	 * @returns {Exports}
	 */
	function _mount(Component, { target, anchor, props = {}, events, context, intro = true }) {
		init_operations();

		var registered_events = new Set();

		/** @param {Array<string>} events */
		var event_handle = (events) => {
			for (var i = 0; i < events.length; i++) {
				var event_name = events[i];

				if (registered_events.has(event_name)) continue;
				registered_events.add(event_name);

				var passive = is_passive_event(event_name);

				// Add the event listener to both the container and the document.
				// The container listener ensures we catch events from within in case
				// the outer content stops propagation of the event.
				target.addEventListener(event_name, handle_event_propagation, { passive });

				var n = document_listeners.get(event_name);

				if (n === undefined) {
					// The document listener ensures we catch events that originate from elements that were
					// manually moved outside of the container (e.g. via manual portals).
					document.addEventListener(event_name, handle_event_propagation, { passive });
					document_listeners.set(event_name, 1);
				} else {
					document_listeners.set(event_name, n + 1);
				}
			}
		};

		event_handle(array_from(all_registered_events));
		root_event_handles.add(event_handle);

		/** @type {Exports} */
		// @ts-expect-error will be defined because the render effect runs synchronously
		var component = undefined;

		var unmount = component_root(() => {
			var anchor_node = anchor ?? target.appendChild(create_text());

			branch(() => {
				if (context) {
					push({});
					var ctx = /** @type {ComponentContext} */ (component_context);
					ctx.c = context;
				}

				if (events) {
					// We can't spread the object or else we'd lose the state proxy stuff, if it is one
					/** @type {any} */ (props).$$events = events;
				}

				if (hydrating) {
					assign_nodes(/** @type {TemplateNode} */ (anchor_node), null);
				}

				should_intro = intro;
				// @ts-expect-error the public typings are not what the actual function looks like
				component = Component(anchor_node, props) || {};
				should_intro = true;

				if (hydrating) {
					/** @type {Effect} */ (active_effect).nodes_end = hydrate_node;
				}

				if (context) {
					pop();
				}
			});

			return () => {
				for (var event_name of registered_events) {
					target.removeEventListener(event_name, handle_event_propagation);

					var n = /** @type {number} */ (document_listeners.get(event_name));

					if (--n === 0) {
						document.removeEventListener(event_name, handle_event_propagation);
						document_listeners.delete(event_name);
					} else {
						document_listeners.set(event_name, n);
					}
				}

				root_event_handles.delete(event_handle);

				if (anchor_node !== anchor) {
					anchor_node.parentNode?.removeChild(anchor_node);
				}
			};
		});

		mounted_components.set(component, unmount);
		return component;
	}

	/**
	 * References of the components that were mounted or hydrated.
	 * Uses a `WeakMap` to avoid memory leaks.
	 */
	let mounted_components = new WeakMap();

	/**
	 * Unmounts a component that was previously mounted using `mount` or `hydrate`.
	 *
	 * Since 5.13.0, if `options.outro` is `true`, [transitions](https://svelte.dev/docs/svelte/transition) will play before the component is removed from the DOM.
	 *
	 * Returns a `Promise` that resolves after transitions have completed if `options.outro` is true, or immediately otherwise (prior to 5.13.0, returns `void`).
	 *
	 * ```js
	 * import { mount, unmount } from 'svelte';
	 * import App from './App.svelte';
	 *
	 * const app = mount(App, { target: document.body });
	 *
	 * // later...
	 * unmount(app, { outro: true });
	 * ```
	 * @param {Record<string, any>} component
	 * @param {{ outro?: boolean }} [options]
	 * @returns {Promise<void>}
	 */
	function unmount(component, options) {
		const fn = mounted_components.get(component);

		if (fn) {
			mounted_components.delete(component);
			return fn(options);
		}

		{
			lifecycle_double_unmount();
		}

		return Promise.resolve();
	}

	/** @import { Effect, TemplateNode } from '#client' */

	/**
	 * @param {TemplateNode} node
	 * @param {(branch: (fn: (anchor: Node) => void, flag?: boolean) => void) => void} fn
	 * @param {boolean} [elseif] True if this is an `{:else if ...}` block rather than an `{#if ...}`, as that affects which transitions are considered 'local'
	 * @returns {void}
	 */
	function if_block(node, fn, elseif = false) {
		if (hydrating) {
			hydrate_next();
		}

		var anchor = node;

		/** @type {Effect | null} */
		var consequent_effect = null;

		/** @type {Effect | null} */
		var alternate_effect = null;

		/** @type {UNINITIALIZED | boolean | null} */
		var condition = UNINITIALIZED;

		var flags = elseif ? EFFECT_TRANSPARENT : 0;

		var has_branch = false;

		const set_branch = (/** @type {(anchor: Node) => void} */ fn, flag = true) => {
			has_branch = true;
			update_branch(flag, fn);
		};

		const update_branch = (
			/** @type {boolean | null} */ new_condition,
			/** @type {null | ((anchor: Node) => void)} */ fn
		) => {
			if (condition === (condition = new_condition)) return;

			/** Whether or not there was a hydration mismatch. Needs to be a `let` or else it isn't treeshaken out */
			let mismatch = false;

			if (hydrating) {
				const is_else = /** @type {Comment} */ (anchor).data === HYDRATION_START_ELSE;

				if (!!condition === is_else) {
					// Hydration mismatch: remove everything inside the anchor and start fresh.
					// This could happen with `{#if browser}...{/if}`, for example
					anchor = remove_nodes();

					set_hydrate_node(anchor);
					set_hydrating(false);
					mismatch = true;
				}
			}

			if (condition) {
				if (consequent_effect) {
					resume_effect(consequent_effect);
				} else if (fn) {
					consequent_effect = branch(() => fn(anchor));
				}

				if (alternate_effect) {
					pause_effect(alternate_effect, () => {
						alternate_effect = null;
					});
				}
			} else {
				if (alternate_effect) {
					resume_effect(alternate_effect);
				} else if (fn) {
					alternate_effect = branch(() => fn(anchor));
				}

				if (consequent_effect) {
					pause_effect(consequent_effect, () => {
						consequent_effect = null;
					});
				}
			}

			if (mismatch) {
				// continue in hydration mode
				set_hydrating(true);
			}
		};

		block(() => {
			has_branch = false;
			fn(set_branch);
			if (!has_branch) {
				update_branch(null, null);
			}
		}, flags);

		if (hydrating) {
			anchor = hydrate_node;
		}
	}

	/** @import { EachItem, EachState, Effect, MaybeSource, Source, TemplateNode, TransitionManager, Value } from '#client' */

	/**
	 * The row of a keyed each block that is currently updating. We track this
	 * so that `animate:` directives have something to attach themselves to
	 * @type {EachItem | null}
	 */
	let current_each_item = null;

	/** @param {EachItem | null} item */
	function set_current_each_item(item) {
		current_each_item = item;
	}

	/**
	 * @param {any} _
	 * @param {number} i
	 */
	function index$d(_, i) {
		return i;
	}

	/**
	 * Pause multiple effects simultaneously, and coordinate their
	 * subsequent destruction. Used in each blocks
	 * @param {EachState} state
	 * @param {EachItem[]} items
	 * @param {null | Node} controlled_anchor
	 * @param {Map<any, EachItem>} items_map
	 */
	function pause_effects(state, items, controlled_anchor, items_map) {
		/** @type {TransitionManager[]} */
		var transitions = [];
		var length = items.length;

		for (var i = 0; i < length; i++) {
			pause_children(items[i].e, transitions, true);
		}

		var is_controlled = length > 0 && transitions.length === 0 && controlled_anchor !== null;
		// If we have a controlled anchor, it means that the each block is inside a single
		// DOM element, so we can apply a fast-path for clearing the contents of the element.
		if (is_controlled) {
			var parent_node = /** @type {Element} */ (
				/** @type {Element} */ (controlled_anchor).parentNode
			);
			clear_text_content(parent_node);
			parent_node.append(/** @type {Element} */ (controlled_anchor));
			items_map.clear();
			link(state, items[0].prev, items[length - 1].next);
		}

		run_out_transitions(transitions, () => {
			for (var i = 0; i < length; i++) {
				var item = items[i];
				if (!is_controlled) {
					items_map.delete(item.k);
					link(state, item.prev, item.next);
				}
				destroy_effect(item.e, !is_controlled);
			}
		});
	}

	/**
	 * @template V
	 * @param {Element | Comment} node The next sibling node, or the parent node if this is a 'controlled' block
	 * @param {number} flags
	 * @param {() => V[]} get_collection
	 * @param {(value: V, index: number) => any} get_key
	 * @param {(anchor: Node, item: MaybeSource<V>, index: MaybeSource<number>) => void} render_fn
	 * @param {null | ((anchor: Node) => void)} fallback_fn
	 * @returns {void}
	 */
	function each(node, flags, get_collection, get_key, render_fn, fallback_fn = null) {
		var anchor = node;

		/** @type {EachState} */
		var state = { flags, items: new Map(), first: null };

		var is_controlled = (flags & EACH_IS_CONTROLLED) !== 0;

		if (is_controlled) {
			var parent_node = /** @type {Element} */ (node);

			anchor = hydrating
				? set_hydrate_node(/** @type {Comment | Text} */ (get_first_child(parent_node)))
				: parent_node.appendChild(create_text());
		}

		if (hydrating) {
			hydrate_next();
		}

		/** @type {Effect | null} */
		var fallback = null;

		var was_empty = false;

		block(() => {
			var collection = get_collection();

			var array = is_array(collection)
				? collection
				: collection == null
					? []
					: array_from(collection);

			var length = array.length;

			if (was_empty && length === 0) {
				// ignore updates if the array is empty,
				// and it already was empty on previous run
				return;
			}
			was_empty = length === 0;

			/** `true` if there was a hydration mismatch. Needs to be a `let` or else it isn't treeshaken out */
			let mismatch = false;

			if (hydrating) {
				var is_else = /** @type {Comment} */ (anchor).data === HYDRATION_START_ELSE;

				if (is_else !== (length === 0)) {
					// hydration mismatch — remove the server-rendered DOM and start over
					anchor = remove_nodes();

					set_hydrate_node(anchor);
					set_hydrating(false);
					mismatch = true;
				}
			}

			// this is separate to the previous block because `hydrating` might change
			if (hydrating) {
				/** @type {EachItem | null} */
				var prev = null;

				/** @type {EachItem} */
				var item;

				for (var i = 0; i < length; i++) {
					if (
						hydrate_node.nodeType === 8 &&
						/** @type {Comment} */ (hydrate_node).data === HYDRATION_END
					) {
						// The server rendered fewer items than expected,
						// so break out and continue appending non-hydrated items
						anchor = /** @type {Comment} */ (hydrate_node);
						mismatch = true;
						set_hydrating(false);
						break;
					}

					var value = array[i];
					var key = get_key(value, i);
					item = create_item(
						hydrate_node,
						state,
						prev,
						null,
						value,
						key,
						i,
						render_fn,
						flags,
						get_collection
					);
					state.items.set(key, item);

					prev = item;
				}

				// remove excess nodes
				if (length > 0) {
					set_hydrate_node(remove_nodes());
				}
			}

			if (!hydrating) {
				var effect = /** @type {Effect} */ (active_reaction);
				reconcile(
					array,
					state,
					anchor,
					render_fn,
					flags,
					(effect.f & INERT) !== 0,
					get_key,
					get_collection
				);
			}

			if (fallback_fn !== null) {
				if (length === 0) {
					if (fallback) {
						resume_effect(fallback);
					} else {
						fallback = branch(() => fallback_fn(anchor));
					}
				} else if (fallback !== null) {
					pause_effect(fallback, () => {
						fallback = null;
					});
				}
			}

			if (mismatch) {
				// continue in hydration mode
				set_hydrating(true);
			}

			// When we mount the each block for the first time, the collection won't be
			// connected to this effect as the effect hasn't finished running yet and its deps
			// won't be assigned. However, it's possible that when reconciling the each block
			// that a mutation occurred and it's made the collection MAYBE_DIRTY, so reading the
			// collection again can provide consistency to the reactive graph again as the deriveds
			// will now be `CLEAN`.
			get_collection();
		});

		if (hydrating) {
			anchor = hydrate_node;
		}
	}

	/**
	 * Add, remove, or reorder items output by an each block as its input changes
	 * @template V
	 * @param {Array<V>} array
	 * @param {EachState} state
	 * @param {Element | Comment | Text} anchor
	 * @param {(anchor: Node, item: MaybeSource<V>, index: number | Source<number>) => void} render_fn
	 * @param {number} flags
	 * @param {boolean} is_inert
	 * @param {(value: V, index: number) => any} get_key
	 * @param {() => V[]} get_collection
	 * @returns {void}
	 */
	function reconcile(array, state, anchor, render_fn, flags, is_inert, get_key, get_collection) {
		var is_animated = (flags & EACH_IS_ANIMATED) !== 0;
		var should_update = (flags & (EACH_ITEM_REACTIVE | EACH_INDEX_REACTIVE)) !== 0;

		var length = array.length;
		var items = state.items;
		var first = state.first;
		var current = first;

		/** @type {undefined | Set<EachItem>} */
		var seen;

		/** @type {EachItem | null} */
		var prev = null;

		/** @type {undefined | Set<EachItem>} */
		var to_animate;

		/** @type {EachItem[]} */
		var matched = [];

		/** @type {EachItem[]} */
		var stashed = [];

		/** @type {V} */
		var value;

		/** @type {any} */
		var key;

		/** @type {EachItem | undefined} */
		var item;

		/** @type {number} */
		var i;

		if (is_animated) {
			for (i = 0; i < length; i += 1) {
				value = array[i];
				key = get_key(value, i);
				item = items.get(key);

				if (item !== undefined) {
					item.a?.measure();
					(to_animate ??= new Set()).add(item);
				}
			}
		}

		for (i = 0; i < length; i += 1) {
			value = array[i];
			key = get_key(value, i);
			item = items.get(key);

			if (item === undefined) {
				var child_anchor = current ? /** @type {TemplateNode} */ (current.e.nodes_start) : anchor;

				prev = create_item(
					child_anchor,
					state,
					prev,
					prev === null ? state.first : prev.next,
					value,
					key,
					i,
					render_fn,
					flags,
					get_collection
				);

				items.set(key, prev);

				matched = [];
				stashed = [];

				current = prev.next;
				continue;
			}

			if (should_update) {
				update_item(item, value, i, flags);
			}

			if ((item.e.f & INERT) !== 0) {
				resume_effect(item.e);
				if (is_animated) {
					item.a?.unfix();
					(to_animate ??= new Set()).delete(item);
				}
			}

			if (item !== current) {
				if (seen !== undefined && seen.has(item)) {
					if (matched.length < stashed.length) {
						// more efficient to move later items to the front
						var start = stashed[0];
						var j;

						prev = start.prev;

						var a = matched[0];
						var b = matched[matched.length - 1];

						for (j = 0; j < matched.length; j += 1) {
							move(matched[j], start, anchor);
						}

						for (j = 0; j < stashed.length; j += 1) {
							seen.delete(stashed[j]);
						}

						link(state, a.prev, b.next);
						link(state, prev, a);
						link(state, b, start);

						current = start;
						prev = b;
						i -= 1;

						matched = [];
						stashed = [];
					} else {
						// more efficient to move earlier items to the back
						seen.delete(item);
						move(item, current, anchor);

						link(state, item.prev, item.next);
						link(state, item, prev === null ? state.first : prev.next);
						link(state, prev, item);

						prev = item;
					}

					continue;
				}

				matched = [];
				stashed = [];

				while (current !== null && current.k !== key) {
					// If the each block isn't inert and an item has an effect that is already inert,
					// skip over adding it to our seen Set as the item is already being handled
					if (is_inert || (current.e.f & INERT) === 0) {
						(seen ??= new Set()).add(current);
					}
					stashed.push(current);
					current = current.next;
				}

				if (current === null) {
					continue;
				}

				item = current;
			}

			matched.push(item);
			prev = item;
			current = item.next;
		}

		if (current !== null || seen !== undefined) {
			var to_destroy = seen === undefined ? [] : array_from(seen);

			while (current !== null) {
				// If the each block isn't inert, then inert effects are currently outroing and will be removed once the transition is finished
				if (is_inert || (current.e.f & INERT) === 0) {
					to_destroy.push(current);
				}
				current = current.next;
			}

			var destroy_length = to_destroy.length;

			if (destroy_length > 0) {
				var controlled_anchor = (flags & EACH_IS_CONTROLLED) !== 0 && length === 0 ? anchor : null;

				if (is_animated) {
					for (i = 0; i < destroy_length; i += 1) {
						to_destroy[i].a?.measure();
					}

					for (i = 0; i < destroy_length; i += 1) {
						to_destroy[i].a?.fix();
					}
				}

				pause_effects(state, to_destroy, controlled_anchor, items);
			}
		}

		if (is_animated) {
			queue_micro_task(() => {
				if (to_animate === undefined) return;
				for (item of to_animate) {
					item.a?.apply();
				}
			});
		}

		/** @type {Effect} */ (active_effect).first = state.first && state.first.e;
		/** @type {Effect} */ (active_effect).last = prev && prev.e;
	}

	/**
	 * @param {EachItem} item
	 * @param {any} value
	 * @param {number} index
	 * @param {number} type
	 * @returns {void}
	 */
	function update_item(item, value, index, type) {
		if ((type & EACH_ITEM_REACTIVE) !== 0) {
			internal_set(item.v, value);
		}

		if ((type & EACH_INDEX_REACTIVE) !== 0) {
			internal_set(/** @type {Value<number>} */ (item.i), index);
		} else {
			item.i = index;
		}
	}

	/**
	 * @template V
	 * @param {Node} anchor
	 * @param {EachState} state
	 * @param {EachItem | null} prev
	 * @param {EachItem | null} next
	 * @param {V} value
	 * @param {unknown} key
	 * @param {number} index
	 * @param {(anchor: Node, item: V | Source<V>, index: number | Value<number>) => void} render_fn
	 * @param {number} flags
	 * @param {() => V[]} get_collection
	 * @returns {EachItem}
	 */
	function create_item(
		anchor,
		state,
		prev,
		next,
		value,
		key,
		index,
		render_fn,
		flags,
		get_collection
	) {
		var previous_each_item = current_each_item;
		var reactive = (flags & EACH_ITEM_REACTIVE) !== 0;
		var mutable = (flags & EACH_ITEM_IMMUTABLE) === 0;

		var v = reactive ? (mutable ? mutable_source(value) : source(value)) : value;
		var i = (flags & EACH_INDEX_REACTIVE) === 0 ? index : source(index);

		if (reactive) {
			// For tracing purposes, we need to link the source signal we create with the
			// collection + index so that tracing works as intended
			/** @type {Value} */ (v).debug = () => {
				var collection_index = typeof i === 'number' ? index : i.v;
				// eslint-disable-next-line @typescript-eslint/no-unused-expressions
				get_collection()[collection_index];
			};
		}

		/** @type {EachItem} */
		var item = {
			i,
			v,
			k: key,
			a: null,
			// @ts-expect-error
			e: null,
			prev,
			next
		};

		current_each_item = item;

		try {
			item.e = branch(() => render_fn(anchor, v, i), hydrating);

			item.e.prev = prev && prev.e;
			item.e.next = next && next.e;

			if (prev === null) {
				state.first = item;
			} else {
				prev.next = item;
				prev.e.next = item.e;
			}

			if (next !== null) {
				next.prev = item;
				next.e.prev = item.e;
			}

			return item;
		} finally {
			current_each_item = previous_each_item;
		}
	}

	/**
	 * @param {EachItem} item
	 * @param {EachItem | null} next
	 * @param {Text | Element | Comment} anchor
	 */
	function move(item, next, anchor) {
		var end = item.next ? /** @type {TemplateNode} */ (item.next.e.nodes_start) : anchor;

		var dest = next ? /** @type {TemplateNode} */ (next.e.nodes_start) : anchor;
		var node = /** @type {TemplateNode} */ (item.e.nodes_start);

		while (node !== end) {
			var next_node = /** @type {TemplateNode} */ (get_next_sibling(node));
			dest.before(node);
			node = next_node;
		}
	}

	/**
	 * @param {EachState} state
	 * @param {EachItem | null} prev
	 * @param {EachItem | null} next
	 */
	function link(state, prev, next) {
		if (prev === null) {
			state.first = next;
		} else {
			prev.next = next;
			prev.e.next = next && next.e;
		}

		if (next !== null) {
			next.prev = prev;
			next.e.prev = prev && prev.e;
		}
	}

	/** @import { Effect, TemplateNode } from '#client' */

	/**
	 * @param {Element} element
	 * @param {string | null} server_hash
	 * @param {string} value
	 */
	function check_hash(element, server_hash, value) {
		if (!server_hash || server_hash === hash(String(value ?? ''))) return;

		let location;

		// @ts-expect-error
		const loc = element.__svelte_meta?.loc;
		if (loc) {
			location = `near ${loc.file}:${loc.line}:${loc.column}`;
		} else if (dev_current_component_function?.[FILENAME]) {
			location = `in ${dev_current_component_function[FILENAME]}`;
		}

		hydration_html_changed(sanitize_location(location));
	}

	/**
	 * @param {Element | Text | Comment} node
	 * @param {() => string} get_value
	 * @param {boolean} svg
	 * @param {boolean} mathml
	 * @param {boolean} [skip_warning]
	 * @returns {void}
	 */
	function html(node, get_value, svg, mathml, skip_warning) {
		var anchor = node;

		var value = '';

		/** @type {Effect | undefined} */
		var effect;

		block(() => {
			if (value === (value = get_value() ?? '')) {
				if (hydrating) {
					hydrate_next();
				}
				return;
			}

			if (effect !== undefined) {
				destroy_effect(effect);
				effect = undefined;
			}

			if (value === '') return;

			effect = branch(() => {
				if (hydrating) {
					// We're deliberately not trying to repair mismatches between server and client,
					// as it's costly and error-prone (and it's an edge case to have a mismatch anyway)
					var hash = /** @type {Comment} */ (hydrate_node).data;
					var next = hydrate_next();
					var last = next;

					while (
						next !== null &&
						(next.nodeType !== 8 || /** @type {Comment} */ (next).data !== '')
					) {
						last = next;
						next = /** @type {TemplateNode} */ (get_next_sibling(next));
					}

					if (next === null) {
						hydration_mismatch();
						throw HYDRATION_ERROR;
					}

					{
						check_hash(/** @type {Element} */ (next.parentNode), hash, value);
					}

					assign_nodes(hydrate_node, last);
					anchor = set_hydrate_node(next);
					return;
				}

				var html = value + '';

				// Don't use create_fragment_with_script_from_html here because that would mean script tags are executed.
				// @html is basically `.innerHTML = ...` and that doesn't execute scripts either due to security reasons.
				/** @type {DocumentFragment | Element} */
				var node = create_fragment_from_html(html);

				assign_nodes(
					/** @type {TemplateNode} */ (get_first_child(node)),
					/** @type {TemplateNode} */ (node.lastChild)
				);

				{
					anchor.before(node);
				}
			});
		});
	}

	/**
	 * @param {Comment} anchor
	 * @param {Record<string, any>} $$props
	 * @param {string} name
	 * @param {Record<string, unknown>} slot_props
	 * @param {null | ((anchor: Comment) => void)} fallback_fn
	 */
	function slot(anchor, $$props, name, slot_props, fallback_fn) {
		if (hydrating) {
			hydrate_next();
		}

		var slot_fn = $$props.$$slots?.[name];
		// Interop: Can use snippets to fill slots
		var is_interop = false;
		if (slot_fn === true) {
			slot_fn = $$props[name === 'default' ? 'children' : name];
			is_interop = true;
		}

		if (slot_fn === undefined) {
			if (fallback_fn !== null) {
				fallback_fn(anchor);
			}
		} else {
			slot_fn(anchor, is_interop ? () => slot_props : slot_props);
		}
	}

	/** @import { Snippet } from 'svelte' */
	/** @import { Effect, TemplateNode } from '#client' */
	/** @import { Getters } from '#shared' */

	/**
	 * @template {(node: TemplateNode, ...args: any[]) => void} SnippetFn
	 * @param {TemplateNode} node
	 * @param {() => SnippetFn | null | undefined} get_snippet
	 * @param {(() => any)[]} args
	 * @returns {void}
	 */
	function snippet(node, get_snippet, ...args) {
		var anchor = node;

		/** @type {SnippetFn | null | undefined} */
		// @ts-ignore
		var snippet = noop;

		/** @type {Effect | null} */
		var snippet_effect;

		block(() => {
			if (snippet === (snippet = get_snippet())) return;

			if (snippet_effect) {
				destroy_effect(snippet_effect);
				snippet_effect = null;
			}

			if (snippet == null) {
				invalid_snippet();
			}

			snippet_effect = branch(() => /** @type {SnippetFn} */ (snippet)(anchor, ...args));
		}, EFFECT_TRANSPARENT);

		if (hydrating) {
			anchor = hydrate_node;
		}
	}

	/**
	 * Create a snippet programmatically
	 * @template {unknown[]} Params
	 * @param {(...params: Getters<Params>) => {
	 *   render: () => string
	 *   setup?: (element: Element) => void | (() => void)
	 * }} fn
	 * @returns {Snippet<Params>}
	 */
	function createRawSnippet(fn) {
		// @ts-expect-error the types are a lie
		return (/** @type {TemplateNode} */ anchor, /** @type {Getters<Params>} */ ...params) => {
			var snippet = fn(...params);

			/** @type {Element} */
			var element;

			if (hydrating) {
				element = /** @type {Element} */ (hydrate_node);
				hydrate_next();
			} else {
				var html = snippet.render().trim();
				var fragment = create_fragment_from_html(html);
				element = /** @type {Element} */ (get_first_child(fragment));

				if ((get_next_sibling(element) !== null || element.nodeType !== 1)) {
					invalid_raw_snippet_render();
				}

				anchor.before(element);
			}

			const result = snippet.setup?.(element);
			assign_nodes(element, element);

			if (typeof result === 'function') {
				teardown(result);
			}
		};
	}

	/** @import { TemplateNode, Dom, Effect } from '#client' */

	/**
	 * @template P
	 * @template {(props: P) => void} C
	 * @param {TemplateNode} node
	 * @param {() => C} get_component
	 * @param {(anchor: TemplateNode, component: C) => Dom | void} render_fn
	 * @returns {void}
	 */
	function component(node, get_component, render_fn) {
		if (hydrating) {
			hydrate_next();
		}

		var anchor = node;

		/** @type {C} */
		var component;

		/** @type {Effect | null} */
		var effect;

		block(() => {
			if (component === (component = get_component())) return;

			if (effect) {
				pause_effect(effect);
				effect = null;
			}

			if (component) {
				effect = branch(() => render_fn(anchor, component));
			}
		}, EFFECT_TRANSPARENT);

		if (hydrating) {
			anchor = hydrate_node;
		}
	}

	/** @import { Effect, TemplateNode } from '#client' */

	/**
	 * @param {Comment | Element} node
	 * @param {() => string} get_tag
	 * @param {boolean} is_svg
	 * @param {undefined | ((element: Element, anchor: Node | null) => void)} render_fn,
	 * @param {undefined | (() => string)} get_namespace
	 * @param {undefined | [number, number]} location
	 * @returns {void}
	 */
	function element(node, get_tag, is_svg, render_fn, get_namespace, location) {
		let was_hydrating = hydrating;

		if (hydrating) {
			hydrate_next();
		}

		/** @type {string | null} */
		var tag;

		/** @type {string | null} */
		var current_tag;

		/** @type {null | Element} */
		var element = null;

		if (hydrating && hydrate_node.nodeType === 1) {
			element = /** @type {Element} */ (hydrate_node);
			hydrate_next();
		}

		var anchor = /** @type {TemplateNode} */ (hydrating ? hydrate_node : node);

		/** @type {Effect | null} */
		var effect;

		/**
		 * The keyed `{#each ...}` item block, if any, that this element is inside.
		 * We track this so we can set it when changing the element, allowing any
		 * `animate:` directive to bind itself to the correct block
		 */
		var each_item_block = current_each_item;

		block(() => {
			const next_tag = get_tag() || null;
			var ns = next_tag === 'svg' ? NAMESPACE_SVG : null;

			// Assumption: Noone changes the namespace but not the tag (what would that even mean?)
			if (next_tag === tag) return;

			// See explanation of `each_item_block` above
			var previous_each_item = current_each_item;
			set_current_each_item(each_item_block);

			if (effect) {
				if (next_tag === null) {
					// start outro
					pause_effect(effect, () => {
						effect = null;
						current_tag = null;
					});
				} else if (next_tag === current_tag) {
					// same tag as is currently rendered — abort outro
					resume_effect(effect);
				} else {
					// tag is changing — destroy immediately, render contents without intro transitions
					destroy_effect(effect);
					set_should_intro(false);
				}
			}

			if (next_tag && next_tag !== current_tag) {
				effect = branch(() => {
					element = hydrating
						? /** @type {Element} */ (element)
						: ns
							? document.createElementNS(ns, next_tag)
							: document.createElement(next_tag);

					assign_nodes(element, element);

					if (render_fn) {
						if (hydrating && is_raw_text_element(next_tag)) {
							// prevent hydration glitches
							element.append(document.createComment(''));
						}

						// If hydrating, use the existing ssr comment as the anchor so that the
						// inner open and close methods can pick up the existing nodes correctly
						var child_anchor = /** @type {TemplateNode} */ (
							hydrating ? get_first_child(element) : element.appendChild(create_text())
						);

						if (hydrating) {
							if (child_anchor === null) {
								set_hydrating(false);
							} else {
								set_hydrate_node(child_anchor);
							}
						}

						// `child_anchor` is undefined if this is a void element, but we still
						// need to call `render_fn` in order to run actions etc. If the element
						// contains children, it's a user error (which is warned on elsewhere)
						// and the DOM will be silently discarded
						render_fn(element, child_anchor);
					}

					// we do this after calling `render_fn` so that child effects don't override `nodes.end`
					/** @type {Effect} */ (active_effect).nodes_end = element;

					anchor.before(element);
				});
			}

			tag = next_tag;
			if (tag) current_tag = tag;
			set_should_intro(true);

			set_current_each_item(previous_each_item);
		}, EFFECT_TRANSPARENT);

		if (was_hydrating) {
			set_hydrating(true);
			set_hydrate_node(anchor);
		}
	}

	/**
	 * The value/checked attribute in the template actually corresponds to the defaultValue property, so we need
	 * to remove it upon hydration to avoid a bug when someone resets the form value.
	 * @param {HTMLInputElement} input
	 * @returns {void}
	 */
	function remove_input_defaults(input) {
		if (!hydrating) return;

		var already_removed = false;

		// We try and remove the default attributes later, rather than sync during hydration.
		// Doing it sync during hydration has a negative impact on performance, but deferring the
		// work in an idle task alleviates this greatly. If a form reset event comes in before
		// the idle callback, then we ensure the input defaults are cleared just before.
		var remove_defaults = () => {
			if (already_removed) return;
			already_removed = true;

			// Remove the attributes but preserve the values
			if (input.hasAttribute('value')) {
				var value = input.value;
				set_attribute(input, 'value', null);
				input.value = value;
			}

			if (input.hasAttribute('checked')) {
				var checked = input.checked;
				set_attribute(input, 'checked', null);
				input.checked = checked;
			}
		};

		// @ts-expect-error
		input.__on_r = remove_defaults;
		queue_idle_task(remove_defaults);
		add_form_reset_listener();
	}

	/**
	 * @param {Element} element
	 * @param {any} value
	 */
	function set_value(element, value) {
		// @ts-expect-error
		var attributes = (element.__attributes ??= {});

		if (
			attributes.value ===
				(attributes.value =
					// treat null and undefined the same for the initial value
					value ?? undefined) ||
			// @ts-expect-error
			// `progress` elements always need their value set when its `0`
			(element.value === value && (value !== 0 || element.nodeName !== 'PROGRESS'))
		) {
			return;
		}

		// @ts-expect-error
		element.value = value;
	}

	/**
	 * Sets the `selected` attribute on an `option` element.
	 * Not set through the property because that doesn't reflect to the DOM,
	 * which means it wouldn't be taken into account when a form is reset.
	 * @param {HTMLOptionElement} element
	 * @param {boolean} selected
	 */
	function set_selected(element, selected) {
		if (selected) {
			// The selected option could've changed via user selection, and
			// setting the value without this check would set it back.
			if (!element.hasAttribute('selected')) {
				element.setAttribute('selected', '');
			}
		} else {
			element.removeAttribute('selected');
		}
	}

	/**
	 * @param {Element} element
	 * @param {string} attribute
	 * @param {string | null} value
	 * @param {boolean} [skip_warning]
	 */
	function set_attribute(element, attribute, value, skip_warning) {
		// @ts-expect-error
		var attributes = (element.__attributes ??= {});

		if (hydrating) {
			attributes[attribute] = element.getAttribute(attribute);

			if (
				attribute === 'src' ||
				attribute === 'srcset' ||
				(attribute === 'href' && element.nodeName === 'LINK')
			) {
				{
					check_src_in_dev_hydration(element, attribute, value ?? '');
				}

				// If we reset these attributes, they would result in another network request, which we want to avoid.
				// We assume they are the same between client and server as checking if they are equal is expensive
				// (we can't just compare the strings as they can be different between client and server but result in the
				// same url, so we would need to create hidden anchor elements to compare them)
				return;
			}
		}

		if (attributes[attribute] === (attributes[attribute] = value)) return;

		if (attribute === 'style' && '__styles' in element) {
			// reset styles to force style: directive to update
			element.__styles = {};
		}

		if (attribute === 'loading') {
			// @ts-expect-error
			element[LOADING_ATTR_SYMBOL] = value;
		}

		if (value == null) {
			element.removeAttribute(attribute);
		} else if (typeof value !== 'string' && get_setters(element).includes(attribute)) {
			// @ts-ignore
			element[attribute] = value;
		} else {
			element.setAttribute(attribute, value);
		}
	}

	/**
	 * Spreads attributes onto a DOM element, taking into account the currently set attributes
	 * @param {Element & ElementCSSInlineStyle} element
	 * @param {Record<string, any> | undefined} prev
	 * @param {Record<string, any>} next New attributes - this function mutates this object
	 * @param {string} [css_hash]
	 * @param {boolean} [preserve_attribute_case]
	 * @param {boolean} [is_custom_element]
	 * @param {boolean} [skip_warning]
	 * @returns {Record<string, any>}
	 */
	function set_attributes(
		element,
		prev,
		next,
		css_hash,
		preserve_attribute_case = false,
		is_custom_element = false,
		skip_warning = false
	) {
		var current = prev || {};
		var is_option_element = element.tagName === 'OPTION';

		for (var key in prev) {
			if (!(key in next)) {
				next[key] = null;
			}
		}

		if (css_hash !== undefined) {
			next.class = next.class ? next.class + ' ' + css_hash : css_hash;
		}

		var setters = get_setters(element);

		// @ts-expect-error
		var attributes = /** @type {Record<string, unknown>} **/ (element.__attributes ??= {});

		// since key is captured we use const
		for (const key in next) {
			// let instead of var because referenced in a closure
			let value = next[key];

			// Up here because we want to do this for the initial value, too, even if it's undefined,
			// and this wouldn't be reached in case of undefined because of the equality check below
			if (is_option_element && key === 'value' && value == null) {
				// The <option> element is a special case because removing the value attribute means
				// the value is set to the text content of the option element, and setting the value
				// to null or undefined means the value is set to the string "null" or "undefined".
				// To align with how we handle this case in non-spread-scenarios, this logic is needed.
				// There's a super-edge-case bug here that is left in in favor of smaller code size:
				// Because of the "set missing props to null" logic above, we can't differentiate
				// between a missing value and an explicitly set value of null or undefined. That means
				// that once set, the value attribute of an <option> element can't be removed. This is
				// a very rare edge case, and removing the attribute altogether isn't possible either
				// for the <option value={undefined}> case, so we're not losing any functionality here.
				// @ts-ignore
				element.value = element.__value = '';
				current[key] = value;
				continue;
			}

			var prev_value = current[key];
			if (value === prev_value) continue;

			current[key] = value;

			var prefix = key[0] + key[1]; // this is faster than key.slice(0, 2)
			if (prefix === '$$') continue;

			if (prefix === 'on') {
				/** @type {{ capture?: true }} */
				const opts = {};
				const event_handle_key = '$$' + key;
				let event_name = key.slice(2);
				var delegated = is_delegated(event_name);

				if (is_capture_event(event_name)) {
					event_name = event_name.slice(0, -7);
					opts.capture = true;
				}

				if (!delegated && prev_value) {
					// Listening to same event but different handler -> our handle function below takes care of this
					// If we were to remove and add listeners in this case, it could happen that the event is "swallowed"
					// (the browser seems to not know yet that a new one exists now) and doesn't reach the handler
					// https://github.com/sveltejs/svelte/issues/11903
					if (value != null) continue;

					element.removeEventListener(event_name, current[event_handle_key], opts);
					current[event_handle_key] = null;
				}

				if (value != null) {
					if (!delegated) {
						/**
						 * @this {any}
						 * @param {Event} evt
						 */
						function handle(evt) {
							current[key].call(this, evt);
						}

						current[event_handle_key] = create_event(event_name, element, handle, opts);
					} else {
						// @ts-ignore
						element[`__${event_name}`] = value;
						delegate([event_name]);
					}
				} else if (delegated) {
					// @ts-ignore
					element[`__${event_name}`] = undefined;
				}
			} else if (key === 'style' && value != null) {
				element.style.cssText = value + '';
			} else if (key === 'autofocus') {
				autofocus(/** @type {HTMLElement} */ (element), Boolean(value));
			} else if (key === '__value' || (key === 'value' && value != null)) {
				// @ts-ignore
				element.value = element[key] = element.__value = value;
			} else if (key === 'selected' && is_option_element) {
				set_selected(/** @type {HTMLOptionElement} */ (element), value);
			} else {
				var name = key;
				if (!preserve_attribute_case) {
					name = normalize_attribute(name);
				}

				var is_default = name === 'defaultValue' || name === 'defaultChecked';

				if (value == null && !is_custom_element && !is_default) {
					attributes[key] = null;

					if (name === 'value' || name === 'checked') {
						// removing value/checked also removes defaultValue/defaultChecked — preserve
						let input = /** @type {HTMLInputElement} */ (element);

						if (name === 'value') {
							let prev = input.defaultValue;
							input.removeAttribute(name);
							input.defaultValue = prev;
						} else {
							let prev = input.defaultChecked;
							input.removeAttribute(name);
							input.defaultChecked = prev;
						}
					} else {
						element.removeAttribute(key);
					}
				} else if (
					is_default ||
					(setters.includes(name) && (is_custom_element || typeof value !== 'string'))
				) {
					// @ts-ignore
					element[name] = value;
				} else if (typeof value !== 'function') {
					if (hydrating && (name === 'src' || name === 'href' || name === 'srcset')) {
						if (!skip_warning) check_src_in_dev_hydration(element, name, value ?? '');
					} else {
						set_attribute(element, name, value);
					}
				}
			}
			if (key === 'style' && '__styles' in element) {
				// reset styles to force style: directive to update
				element.__styles = {};
			}
		}

		return current;
	}

	/** @type {Map<string, string[]>} */
	var setters_cache = new Map();

	/** @param {Element} element */
	function get_setters(element) {
		var setters = setters_cache.get(element.nodeName);
		if (setters) return setters;
		setters_cache.set(element.nodeName, (setters = []));

		var descriptors;
		var proto = element; // In the case of custom elements there might be setters on the instance
		var element_proto = Element.prototype;

		// Stop at Element, from there on there's only unnecessary setters we're not interested in
		// Do not use contructor.name here as that's unreliable in some browser environments
		while (element_proto !== proto) {
			descriptors = get_descriptors(proto);

			for (var key in descriptors) {
				if (descriptors[key].set) {
					setters.push(key);
				}
			}

			proto = get_prototype_of(proto);
		}

		return setters;
	}

	/**
	 * @param {any} element
	 * @param {string} attribute
	 * @param {string} value
	 */
	function check_src_in_dev_hydration(element, attribute, value) {
		if (attribute === 'srcset' && srcset_url_equal(element, value)) return;
		if (src_url_equal(element.getAttribute(attribute) ?? '', value)) return;

		hydration_attribute_changed(
			attribute,
			element.outerHTML.replace(element.innerHTML, element.innerHTML && '...'),
			String(value)
		);
	}

	/**
	 * @param {string} element_src
	 * @param {string} url
	 * @returns {boolean}
	 */
	function src_url_equal(element_src, url) {
		if (element_src === url) return true;
		return new URL(element_src, document.baseURI).href === new URL(url, document.baseURI).href;
	}

	/** @param {string} srcset */
	function split_srcset(srcset) {
		return srcset.split(',').map((src) => src.trim().split(' ').filter(Boolean));
	}

	/**
	 * @param {HTMLSourceElement | HTMLImageElement} element
	 * @param {string} srcset
	 * @returns {boolean}
	 */
	function srcset_url_equal(element, srcset) {
		var element_urls = split_srcset(element.srcset);
		var urls = split_srcset(srcset);

		return (
			urls.length === element_urls.length &&
			urls.every(
				([url, width], i) =>
					width === element_urls[i][1] &&
					// We need to test both ways because Vite will create an a full URL with
					// `new URL(asset, import.meta.url).href` for the client when `base: './'`, and the
					// relative URLs inside srcset are not automatically resolved to absolute URLs by
					// browsers (in contrast to img.src). This means both SSR and DOM code could
					// contain relative or absolute URLs.
					(src_url_equal(element_urls[i][0], url) || src_url_equal(url, element_urls[i][0]))
			)
		);
	}

	/**
	 * @param {HTMLElement} dom
	 * @param {string} value
	 * @returns {void}
	 */
	function set_class(dom, value) {
		// @ts-expect-error need to add __className to patched prototype
		var prev_class_name = dom.__className;
		var next_class_name = to_class(value);

		if (hydrating && dom.className === next_class_name) {
			// In case of hydration don't reset the class as it's already correct.
			// @ts-expect-error need to add __className to patched prototype
			dom.__className = next_class_name;
		} else if (
			prev_class_name !== next_class_name ||
			(hydrating && dom.className !== next_class_name)
		) {
			// Removing the attribute when the value is only an empty string causes
			// peformance issues vs simply making the className an empty string. So
			// we should only remove the class if the the value is nullish.
			if (value == null) {
				dom.removeAttribute('class');
			} else {
				dom.className = next_class_name;
			}

			// @ts-expect-error need to add __className to patched prototype
			dom.__className = next_class_name;
		}
	}

	/**
	 * @template V
	 * @param {V} value
	 * @returns {string | V}
	 */
	function to_class(value) {
		return value == null ? '' : value;
	}

	/**
	 * @param {Element} dom
	 * @param {string} class_name
	 * @param {boolean} value
	 * @returns {void}
	 */
	function toggle_class(dom, class_name, value) {
		if (value) {
			if (dom.classList.contains(class_name)) return;
			dom.classList.add(class_name);
		} else {
			if (!dom.classList.contains(class_name)) return;
			dom.classList.remove(class_name);
		}
	}

	/** @import { Raf } from '#client' */

	const now = () => performance.now() ;

	/** @type {Raf} */
	const raf = {
		// don't access requestAnimationFrame eagerly outside method
		// this allows basic testing of user code without JSDOM
		// bunder will eval and remove ternary when the user's app is built
		tick: /** @param {any} _ */ (_) => (requestAnimationFrame )(_),
		now: () => now(),
		tasks: new Set()
	};

	/** @import { TaskCallback, Task, TaskEntry } from '#client' */

	// TODO move this into timing.js where it probably belongs

	/**
	 * @returns {void}
	 */
	function run_tasks() {
		// use `raf.now()` instead of the `requestAnimationFrame` callback argument, because
		// otherwise things can get wonky https://github.com/sveltejs/svelte/pull/14541
		const now = raf.now();

		raf.tasks.forEach((task) => {
			if (!task.c(now)) {
				raf.tasks.delete(task);
				task.f();
			}
		});

		if (raf.tasks.size !== 0) {
			raf.tick(run_tasks);
		}
	}

	/**
	 * Creates a new task that runs on each raf frame
	 * until it returns a falsy value or is aborted
	 * @param {TaskCallback} callback
	 * @returns {Task}
	 */
	function loop(callback) {
		/** @type {TaskEntry} */
		let task;

		if (raf.tasks.size === 0) {
			raf.tick(run_tasks);
		}

		return {
			promise: new Promise((fulfill) => {
				raf.tasks.add((task = { c: callback, f: fulfill }));
			}),
			abort() {
				raf.tasks.delete(task);
			}
		};
	}

	/** @import { AnimateFn, Animation, AnimationConfig, EachItem, Effect, TransitionFn, TransitionManager } from '#client' */

	/**
	 * @param {Element} element
	 * @param {'introstart' | 'introend' | 'outrostart' | 'outroend'} type
	 * @returns {void}
	 */
	function dispatch_event(element, type) {
		element.dispatchEvent(new CustomEvent(type));
	}

	/**
	 * Converts a property to the camel-case format expected by Element.animate(), KeyframeEffect(), and KeyframeEffect.setKeyframes().
	 * @param {string} style
	 * @returns {string}
	 */
	function css_property_to_camelcase(style) {
		// in compliance with spec
		if (style === 'float') return 'cssFloat';
		if (style === 'offset') return 'cssOffset';

		// do not rename custom @properties
		if (style.startsWith('--')) return style;

		const parts = style.split('-');
		if (parts.length === 1) return parts[0];
		return (
			parts[0] +
			parts
				.slice(1)
				.map(/** @param {any} word */ (word) => word[0].toUpperCase() + word.slice(1))
				.join('')
		);
	}

	/**
	 * @param {string} css
	 * @returns {Keyframe}
	 */
	function css_to_keyframe(css) {
		/** @type {Keyframe} */
		const keyframe = {};
		const parts = css.split(';');
		for (const part of parts) {
			const [property, value] = part.split(':');
			if (!property || value === undefined) break;

			const formatted_property = css_property_to_camelcase(property.trim());
			keyframe[formatted_property] = value.trim();
		}
		return keyframe;
	}

	/** @param {number} t */
	const linear$1 = (t) => t;

	/**
	 * Called inside keyed `{#each ...}` blocks (as `$.animation(...)`). This creates an animation manager
	 * and attaches it to the block, so that moves can be animated following reconciliation.
	 * @template P
	 * @param {Element} element
	 * @param {() => AnimateFn<P | undefined>} get_fn
	 * @param {(() => P) | null} get_params
	 */
	function animation(element, get_fn, get_params) {
		var item = /** @type {EachItem} */ (current_each_item);

		/** @type {DOMRect} */
		var from;

		/** @type {DOMRect} */
		var to;

		/** @type {Animation | undefined} */
		var animation;

		/** @type {null | { position: string, width: string, height: string, transform: string }} */
		var original_styles = null;

		item.a ??= {
			element,
			measure() {
				from = this.element.getBoundingClientRect();
			},
			apply() {
				animation?.abort();

				to = this.element.getBoundingClientRect();

				if (
					from.left !== to.left ||
					from.right !== to.right ||
					from.top !== to.top ||
					from.bottom !== to.bottom
				) {
					const options = get_fn()(this.element, { from, to }, get_params?.());

					animation = animate(this.element, options, undefined, 1, () => {
						animation?.abort();
						animation = undefined;
					});
				}
			},
			fix() {
				// If an animation is already running, transforming the element is likely to fail,
				// because the styles applied by the animation take precedence. In the case of crossfade,
				// that means the `translate(...)` of the crossfade transition overrules the `translate(...)`
				// we would apply below, leading to the element jumping somewhere to the top left.
				if (element.getAnimations().length) return;

				// It's important to destructure these to get fixed values - the object itself has getters,
				// and changing the style to 'absolute' can for example influence the width.
				var { position, width, height } = getComputedStyle(element);

				if (position !== 'absolute' && position !== 'fixed') {
					var style = /** @type {HTMLElement | SVGElement} */ (element).style;

					original_styles = {
						position: style.position,
						width: style.width,
						height: style.height,
						transform: style.transform
					};

					style.position = 'absolute';
					style.width = width;
					style.height = height;
					var to = element.getBoundingClientRect();

					if (from.left !== to.left || from.top !== to.top) {
						var transform = `translate(${from.left - to.left}px, ${from.top - to.top}px)`;
						style.transform = style.transform ? `${style.transform} ${transform}` : transform;
					}
				}
			},
			unfix() {
				if (original_styles) {
					var style = /** @type {HTMLElement | SVGElement} */ (element).style;

					style.position = original_styles.position;
					style.width = original_styles.width;
					style.height = original_styles.height;
					style.transform = original_styles.transform;
				}
			}
		};

		// in the case of a `<svelte:element>`, it's possible for `$.animation(...)` to be called
		// when an animation manager already exists, if the tag changes. in that case, we need to
		// swap out the element rather than creating a new manager, in case it happened at the same
		// moment as a reconciliation
		item.a.element = element;
	}

	/**
	 * Called inside block effects as `$.transition(...)`. This creates a transition manager and
	 * attaches it to the current effect — later, inside `pause_effect` and `resume_effect`, we
	 * use this to create `intro` and `outro` transitions.
	 * @template P
	 * @param {number} flags
	 * @param {HTMLElement} element
	 * @param {() => TransitionFn<P | undefined>} get_fn
	 * @param {(() => P) | null} get_params
	 * @returns {void}
	 */
	function transition(flags, element, get_fn, get_params) {
		var is_global = (flags & TRANSITION_GLOBAL) !== 0;

		/** @type {'in' | 'out' | 'both'} */
		var direction = 'both' ;

		/** @type {AnimationConfig | ((opts: { direction: 'in' | 'out' }) => AnimationConfig) | undefined} */
		var current_options;

		var inert = element.inert;

		/** @type {Animation | undefined} */
		var intro;

		/** @type {Animation | undefined} */
		var outro;

		function get_options() {
			var previous_reaction = active_reaction;
			var previous_effect = active_effect;
			set_active_reaction(null);
			set_active_effect(null);
			try {
				// If a transition is still ongoing, we use the existing options rather than generating
				// new ones. This ensures that reversible transitions reverse smoothly, rather than
				// jumping to a new spot because (for example) a different `duration` was used
				return (current_options ??= get_fn()(element, get_params?.() ?? /** @type {P} */ ({}), {
					direction
				}));
			} finally {
				set_active_reaction(previous_reaction);
				set_active_effect(previous_effect);
			}
		}

		/** @type {TransitionManager} */
		var transition = {
			is_global,
			in() {
				element.inert = inert;

				dispatch_event(element, 'introstart');

				intro = animate(element, get_options(), outro, 1, () => {
					dispatch_event(element, 'introend');

					// Ensure we cancel the animation to prevent leaking
					intro?.abort();
					intro = current_options = undefined;
				});
			},
			out(fn) {

				element.inert = true;

				dispatch_event(element, 'outrostart');

				outro = animate(element, get_options(), intro, 0, () => {
					dispatch_event(element, 'outroend');
					fn?.();
				});
			},
			stop: () => {
				intro?.abort();
				outro?.abort();
			}
		};

		var e = /** @type {Effect} */ (active_effect);

		(e.transitions ??= []).push(transition);

		// if this is a local transition, we only want to run it if the parent (branch) effect's
		// parent (block) effect is where the state change happened. we can determine that by
		// looking at whether the block effect is currently initializing
		if (should_intro) {
			var run = is_global;

			if (!run) {
				var block = /** @type {Effect | null} */ (e.parent);

				// skip over transparent blocks (e.g. snippets, else-if blocks)
				while (block && (block.f & EFFECT_TRANSPARENT) !== 0) {
					while ((block = block.parent)) {
						if ((block.f & BLOCK_EFFECT) !== 0) break;
					}
				}

				run = !block || (block.f & EFFECT_RAN) !== 0;
			}

			if (run) {
				effect(() => {
					untrack(() => transition.in());
				});
			}
		}
	}

	/**
	 * Animates an element, according to the provided configuration
	 * @param {Element} element
	 * @param {AnimationConfig | ((opts: { direction: 'in' | 'out' }) => AnimationConfig)} options
	 * @param {Animation | undefined} counterpart The corresponding intro/outro to this outro/intro
	 * @param {number} t2 The target `t` value — `1` for intro, `0` for outro
	 * @param {(() => void)} on_finish Called after successfully completing the animation
	 * @returns {Animation}
	 */
	function animate(element, options, counterpart, t2, on_finish) {
		var is_intro = t2 === 1;

		if (is_function(options)) {
			// In the case of a deferred transition (such as `crossfade`), `option` will be
			// a function rather than an `AnimationConfig`. We need to call this function
			// once the DOM has been updated...
			/** @type {Animation} */
			var a;
			var aborted = false;

			queue_micro_task(() => {
				if (aborted) return;
				var o = options({ direction: is_intro ? 'in' : 'out' });
				a = animate(element, o, counterpart, t2, on_finish);
			});

			// ...but we want to do so without using `async`/`await` everywhere, so
			// we return a facade that allows everything to remain synchronous
			return {
				abort: () => {
					aborted = true;
					a?.abort();
				},
				deactivate: () => a.deactivate(),
				reset: () => a.reset(),
				t: () => a.t()
			};
		}

		counterpart?.deactivate();

		if (!options?.duration) {
			on_finish();

			return {
				abort: noop,
				deactivate: noop,
				reset: noop,
				t: () => t2
			};
		}

		const { delay = 0, css, tick, easing = linear$1 } = options;

		var keyframes = [];

		if (is_intro && counterpart === undefined) {
			if (tick) {
				tick(0, 1); // TODO put in nested effect, to avoid interleaved reads/writes?
			}

			if (css) {
				var styles = css_to_keyframe(css(0, 1));
				keyframes.push(styles, styles);
			}
		}

		var get_t = () => 1 - t2;

		// create a dummy animation that lasts as long as the delay (but with whatever devtools
		// multiplier is in effect). in the common case that it is `0`, we keep it anyway so that
		// the CSS keyframes aren't created until the DOM is updated
		var animation = element.animate(keyframes, { duration: delay });

		animation.onfinish = () => {
			// for bidirectional transitions, we start from the current position,
			// rather than doing a full intro/outro
			var t1 = counterpart?.t() ?? 1 - t2;
			counterpart?.abort();

			var delta = t2 - t1;
			var duration = /** @type {number} */ (options.duration) * Math.abs(delta);
			var keyframes = [];

			if (duration > 0) {
				if (css) {
					var n = Math.ceil(duration / (1000 / 60)); // `n` must be an integer, or we risk missing the `t2` value

					for (var i = 0; i <= n; i += 1) {
						var t = t1 + delta * easing(i / n);
						var styles = css(t, 1 - t);
						keyframes.push(css_to_keyframe(styles));
					}
				}

				get_t = () => {
					var time = /** @type {number} */ (
						/** @type {globalThis.Animation} */ (animation).currentTime
					);

					return t1 + delta * easing(time / duration);
				};

				if (tick) {
					loop(() => {
						if (animation.playState !== 'running') return false;

						var t = get_t();
						tick(t, 1 - t);

						return true;
					});
				}
			}

			animation = element.animate(keyframes, { duration, fill: 'forwards' });

			animation.onfinish = () => {
				get_t = () => t2;
				tick?.(t2, 1 - t2);
				on_finish();
			};
		};

		return {
			abort: () => {
				if (animation) {
					animation.cancel();
					// This prevents memory leaks in Chromium
					animation.effect = null;
					// This prevents onfinish to be launched after cancel(),
					// which can happen in some rare cases
					// see https://github.com/sveltejs/svelte/issues/13681
					animation.onfinish = noop;
				}
			},
			deactivate: () => {
				on_finish = noop;
			},
			reset: () => {
				if (t2 === 0) {
					tick?.(1, 0);
				}
			},
			t: () => get_t()
		};
	}

	/**
	 * @param {HTMLInputElement} input
	 * @param {() => unknown} get
	 * @param {(value: unknown) => void} set
	 * @returns {void}
	 */
	function bind_value(input, get, set = get) {
		var runes = is_runes();

		listen_to_event_and_reset_event(input, 'input', (is_reset) => {
			if (input.type === 'checkbox') {
				// TODO should this happen in prod too?
				bind_invalid_checkbox_value();
			}

			/** @type {any} */
			var value = is_reset ? input.defaultValue : input.value;
			value = is_numberlike_input(input) ? to_number(value) : value;
			set(value);

			// In runes mode, respect any validation in accessors (doesn't apply in legacy mode,
			// because we use mutable state which ensures the render effect always runs)
			if (runes && value !== (value = get())) {
				var start = input.selectionStart;
				var end = input.selectionEnd;

				// the value is coerced on assignment
				input.value = value ?? '';

				// Restore selection
				if (end !== null) {
					input.selectionStart = start;
					input.selectionEnd = Math.min(end, input.value.length);
				}
			}
		});

		if (
			// If we are hydrating and the value has since changed,
			// then use the updated value from the input instead.
			(hydrating && input.defaultValue !== input.value) ||
			// If defaultValue is set, then value == defaultValue
			// TODO Svelte 6: remove input.value check and set to empty string?
			(untrack(get) == null && input.value)
		) {
			set(is_numberlike_input(input) ? to_number(input.value) : input.value);
		}

		render_effect(() => {
			if (input.type === 'checkbox') {
				// TODO should this happen in prod too?
				bind_invalid_checkbox_value();
			}

			var value = get();

			if (is_numberlike_input(input) && value === to_number(input.value)) {
				// handles 0 vs 00 case (see https://github.com/sveltejs/svelte/issues/9959)
				return;
			}

			if (input.type === 'date' && !value && !input.value) {
				// Handles the case where a temporarily invalid date is set (while typing, for example with a leading 0 for the day)
				// and prevents this state from clearing the other parts of the date input (see https://github.com/sveltejs/svelte/issues/7897)
				return;
			}

			// don't set the value of the input if it's the same to allow
			// minlength to work properly
			if (value !== input.value) {
				// @ts-expect-error the value is coerced on assignment
				input.value = value ?? '';
			}
		});
	}

	/**
	 * @param {HTMLInputElement} input
	 * @param {() => unknown} get
	 * @param {(value: unknown) => void} set
	 * @returns {void}
	 */
	function bind_checked(input, get, set = get) {
		listen_to_event_and_reset_event(input, 'change', (is_reset) => {
			var value = is_reset ? input.defaultChecked : input.checked;
			set(value);
		});

		if (
			// If we are hydrating and the value has since changed,
			// then use the update value from the input instead.
			(hydrating && input.defaultChecked !== input.checked) ||
			// If defaultChecked is set, then checked == defaultChecked
			untrack(get) == null
		) {
			set(input.checked);
		}

		render_effect(() => {
			var value = get();
			input.checked = Boolean(value);
		});
	}

	/**
	 * @param {HTMLInputElement} input
	 */
	function is_numberlike_input(input) {
		var type = input.type;
		return type === 'number' || type === 'range';
	}

	/**
	 * @param {string} value
	 */
	function to_number(value) {
		return value === '' ? null : +value;
	}

	/**
	 * Makes an `export`ed (non-prop) variable available on the `$$props` object
	 * so that consumers can do `bind:x` on the component.
	 * @template V
	 * @param {Record<string, unknown>} props
	 * @param {string} prop
	 * @param {V} value
	 * @returns {void}
	 */
	function bind_prop(props, prop, value) {
		var desc = get_descriptor(props, prop);

		if (desc && desc.set) {
			props[prop] = value;
			teardown(() => {
				props[prop] = null;
			});
		}
	}

	/**
	 * Selects the correct option(s) (depending on whether this is a multiple select)
	 * @template V
	 * @param {HTMLSelectElement} select
	 * @param {V} value
	 * @param {boolean} [mounting]
	 */
	function select_option(select, value, mounting) {
		if (select.multiple) {
			return select_options(select, value);
		}

		for (var option of select.options) {
			var option_value = get_option_value(option);
			if (is(option_value, value)) {
				option.selected = true;
				return;
			}
		}

		if (!mounting || value !== undefined) {
			select.selectedIndex = -1; // no option should be selected
		}
	}

	/**
	 * Selects the correct option(s) if `value` is given,
	 * and then sets up a mutation observer to sync the
	 * current selection to the dom when it changes. Such
	 * changes could for example occur when options are
	 * inside an `#each` block.
	 * @template V
	 * @param {HTMLSelectElement} select
	 * @param {() => V} [get_value]
	 */
	function init_select(select, get_value) {
		let mounting = true;
		effect(() => {
			if (get_value) {
				select_option(select, untrack(get_value), mounting);
			}
			mounting = false;

			var observer = new MutationObserver(() => {
				// @ts-ignore
				var value = select.__value;
				select_option(select, value);
				// Deliberately don't update the potential binding value,
				// the model should be preserved unless explicitly changed
			});

			observer.observe(select, {
				// Listen to option element changes
				childList: true,
				subtree: true, // because of <optgroup>
				// Listen to option element value attribute changes
				// (doesn't get notified of select value changes,
				// because that property is not reflected as an attribute)
				attributes: true,
				attributeFilter: ['value']
			});

			return () => {
				observer.disconnect();
			};
		});
	}

	/**
	 * @template V
	 * @param {HTMLSelectElement} select
	 * @param {V} value
	 */
	function select_options(select, value) {
		for (var option of select.options) {
			// @ts-ignore
			option.selected = ~value.indexOf(get_option_value(option));
		}
	}

	/** @param {HTMLOptionElement} option */
	function get_option_value(option) {
		// __value only exists if the <option> has a value attribute
		if ('__value' in option) {
			return option.__value;
		} else {
			return option.value;
		}
	}

	/**
	 * @param {any} bound_value
	 * @param {Element} element_or_component
	 * @returns {boolean}
	 */
	function is_bound_this(bound_value, element_or_component) {
		return (
			bound_value === element_or_component || bound_value?.[STATE_SYMBOL] === element_or_component
		);
	}

	/**
	 * @param {any} element_or_component
	 * @param {(value: unknown, ...parts: unknown[]) => void} update
	 * @param {(...parts: unknown[]) => unknown} get_value
	 * @param {() => unknown[]} [get_parts] Set if the this binding is used inside an each block,
	 * 										returns all the parts of the each block context that are used in the expression
	 * @returns {void}
	 */
	function bind_this(element_or_component = {}, update, get_value, get_parts) {
		effect(() => {
			/** @type {unknown[]} */
			var old_parts;

			/** @type {unknown[]} */
			var parts;

			render_effect(() => {
				old_parts = parts;
				// We only track changes to the parts, not the value itself to avoid unnecessary reruns.
				parts = [];

				untrack(() => {
					if (element_or_component !== get_value(...parts)) {
						update(element_or_component, ...parts);
						// If this is an effect rerun (cause: each block context changes), then nullfiy the binding at
						// the previous position if it isn't already taken over by a different effect.
						if (old_parts && is_bound_this(get_value(...old_parts), element_or_component)) {
							update(null, ...old_parts);
						}
					}
				});
			});

			return () => {
				// We cannot use effects in the teardown phase, we we use a microtask instead.
				queue_micro_task(() => {
					if (parts && is_bound_this(get_value(...parts), element_or_component)) {
						update(null, ...parts);
					}
				});
			};
		});

		return element_or_component;
	}

	/** @import { ActionReturn } from 'svelte/action' */

	/**
	 * Substitute for the `preventDefault` event modifier
	 * @deprecated
	 * @param {(event: Event, ...args: Array<unknown>) => void} fn
	 * @returns {(event: Event, ...args: unknown[]) => void}
	 */
	function preventDefault(fn) {
		return function (...args) {
			var event = /** @type {Event} */ (args[0]);
			event.preventDefault();
			// @ts-ignore
			return fn?.apply(this, args);
		};
	}

	/** @import { ComponentContextLegacy } from '#client' */

	/**
	 * Legacy-mode only: Call `onMount` callbacks and set up `beforeUpdate`/`afterUpdate` effects
	 * @param {boolean} [immutable]
	 */
	function init(immutable = false) {
		const context = /** @type {ComponentContextLegacy} */ (component_context);

		const callbacks = context.l.u;
		if (!callbacks) return;

		let props = () => deep_read_state(context.s);

		if (immutable) {
			let version = 0;
			let prev = /** @type {Record<string, any>} */ ({});

			// In legacy immutable mode, before/afterUpdate only fire if the object identity of a prop changes
			const d = derived(() => {
				let changed = false;
				const props = context.s;
				for (const key in props) {
					if (props[key] !== prev[key]) {
						prev[key] = props[key];
						changed = true;
					}
				}
				if (changed) version++;
				return version;
			});

			props = () => get$2(d);
		}

		// beforeUpdate
		if (callbacks.b.length) {
			user_pre_effect(() => {
				observe_all(context, props);
				run_all(callbacks.b);
			});
		}

		// onMount (must run before afterUpdate)
		user_effect(() => {
			const fns = untrack(() => callbacks.m.map(run$2));
			return () => {
				for (const fn of fns) {
					if (typeof fn === 'function') {
						fn();
					}
				}
			};
		});

		// afterUpdate
		if (callbacks.a.length) {
			user_effect(() => {
				observe_all(context, props);
				run_all(callbacks.a);
			});
		}
	}

	/**
	 * Invoke the getter of all signals associated with a component
	 * so they can be registered to the effect this function is called in.
	 * @param {ComponentContextLegacy} context
	 * @param {(() => void)} props
	 */
	function observe_all(context, props) {
		if (context.l.s) {
			for (const signal of context.l.s) get$2(signal);
		}

		props();
	}

	/**
	 * @this {any}
	 * @param {Record<string, unknown>} $$props
	 * @param {Event} event
	 * @returns {void}
	 */
	function bubble_event($$props, event) {
		var events = /** @type {Record<string, Function[] | Function>} */ ($$props.$$events)?.[
			event.type
		];

		var callbacks = is_array(events) ? events.slice() : events == null ? [] : [events];

		for (var fn of callbacks) {
			// Preserve "this" context
			fn.call(this, event);
		}
	}

	/** @import { Readable } from './public' */

	/**
	 * @template T
	 * @param {Readable<T> | null | undefined} store
	 * @param {(value: T) => void} run
	 * @param {(value: T) => void} [invalidate]
	 * @returns {() => void}
	 */
	function subscribe_to_store(store, run, invalidate) {
		if (store == null) {
			// @ts-expect-error
			run(undefined);

			return noop;
		}

		// Svelte store takes a private second argument
		// StartStopNotifier could mutate state, and we want to silence the corresponding validation error
		const unsub = untrack(() =>
			store.subscribe(
				run,
				// @ts-expect-error
				invalidate
			)
		);

		// Also support RxJS
		// @ts-expect-error TODO fix this in the types?
		return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;
	}

	/** @import { StoreReferencesContainer } from '#client' */
	/** @import { Store } from '#shared' */

	/**
	 * Whether or not the prop currently being read is a store binding, as in
	 * `<Child bind:x={$y} />`. If it is, we treat the prop as mutable even in
	 * runes mode, and skip `binding_property_non_reactive` validation
	 */
	let is_store_binding = false;

	/**
	 * Gets the current value of a store. If the store isn't subscribed to yet, it will create a proxy
	 * signal that will be updated when the store is. The store references container is needed to
	 * track reassignments to stores and to track the correct component context.
	 * @template V
	 * @param {Store<V> | null | undefined} store
	 * @param {string} store_name
	 * @param {StoreReferencesContainer} stores
	 * @returns {V}
	 */
	function store_get(store, store_name, stores) {
		const entry = (stores[store_name] ??= {
			store: null,
			source: mutable_source(undefined),
			unsubscribe: noop
		});

		if (entry.store !== store) {
			entry.unsubscribe();
			entry.store = store ?? null;

			if (store == null) {
				entry.source.v = undefined; // see synchronous callback comment below
				entry.unsubscribe = noop;
			} else {
				var is_synchronous_callback = true;

				entry.unsubscribe = subscribe_to_store(store, (v) => {
					if (is_synchronous_callback) {
						// If the first updates to the store value (possibly multiple of them) are synchronously
						// inside a derived, we will hit the `state_unsafe_mutation` error if we `set` the value
						entry.source.v = v;
					} else {
						set(entry.source, v);
					}
				});

				is_synchronous_callback = false;
			}
		}

		return get$2(entry.source);
	}

	/**
	 * Unsubscribes from all auto-subscribed stores on destroy
	 * @returns {StoreReferencesContainer}
	 */
	function setup_stores() {
		/** @type {StoreReferencesContainer} */
		const stores = {};

		teardown(() => {
			for (var store_name in stores) {
				const ref = stores[store_name];
				ref.unsubscribe();
			}
		});

		return stores;
	}

	/**
	 * Updates a store with a new value.
	 * @param {Store<V>} store  the store to update
	 * @param {any} expression  the expression that mutates the store
	 * @param {V} new_value  the new store value
	 * @template V
	 */
	function store_mutate(store, expression, new_value) {
		store.set(new_value);
		return expression;
	}

	/**
	 * Returns a tuple that indicates whether `fn()` reads a prop that is a store binding.
	 * Used to prevent `binding_property_non_reactive` validation false positives and
	 * ensure that these props are treated as mutable even in runes mode
	 * @template T
	 * @param {() => T} fn
	 * @returns {[T, boolean]}
	 */
	function capture_store_binding(fn) {
		var previous_is_store_binding = is_store_binding;

		try {
			is_store_binding = false;
			return [fn(), is_store_binding];
		} finally {
			is_store_binding = previous_is_store_binding;
		}
	}

	/** @import { Source } from './types.js' */

	/**
	 * The proxy handler for rest props (i.e. `const { x, ...rest } = $props()`).
	 * Is passed the full `$$props` object and excludes the named props.
	 * @type {ProxyHandler<{ props: Record<string | symbol, unknown>, exclude: Array<string | symbol>, name?: string }>}}
	 */
	const rest_props_handler = {
		get(target, key) {
			if (target.exclude.includes(key)) return;
			return target.props[key];
		},
		set(target, key) {
			{
				// TODO should this happen in prod too?
				props_rest_readonly(`${target.name}.${String(key)}`);
			}

			return false;
		},
		getOwnPropertyDescriptor(target, key) {
			if (target.exclude.includes(key)) return;
			if (key in target.props) {
				return {
					enumerable: true,
					configurable: true,
					value: target.props[key]
				};
			}
		},
		has(target, key) {
			if (target.exclude.includes(key)) return false;
			return key in target.props;
		},
		ownKeys(target) {
			return Reflect.ownKeys(target.props).filter((key) => !target.exclude.includes(key));
		}
	};

	/**
	 * @param {Record<string, unknown>} props
	 * @param {string[]} exclude
	 * @param {string} [name]
	 * @returns {Record<string, unknown>}
	 */
	/*#__NO_SIDE_EFFECTS__*/
	function rest_props(props, exclude, name) {
		return new Proxy(
			{ props, exclude, name, other: {}, to_proxy: [] } ,
			rest_props_handler
		);
	}

	/**
	 * The proxy handler for legacy $$restProps and $$props
	 * @type {ProxyHandler<{ props: Record<string | symbol, unknown>, exclude: Array<string | symbol>, special: Record<string | symbol, (v?: unknown) => unknown>, version: Source<number> }>}}
	 */
	const legacy_rest_props_handler = {
		get(target, key) {
			if (target.exclude.includes(key)) return;
			get$2(target.version);
			return key in target.special ? target.special[key]() : target.props[key];
		},
		set(target, key, value) {
			if (!(key in target.special)) {
				// Handle props that can temporarily get out of sync with the parent
				/** @type {Record<string, (v?: unknown) => unknown>} */
				target.special[key] = prop(
					{
						get [key]() {
							return target.props[key];
						}
					},
					/** @type {string} */ (key),
					PROPS_IS_UPDATED
				);
			}

			target.special[key](value);
			update(target.version); // $$props is coarse-grained: when $$props.x is updated, usages of $$props.y etc are also rerun
			return true;
		},
		getOwnPropertyDescriptor(target, key) {
			if (target.exclude.includes(key)) return;
			if (key in target.props) {
				return {
					enumerable: true,
					configurable: true,
					value: target.props[key]
				};
			}
		},
		deleteProperty(target, key) {
			// Svelte 4 allowed for deletions on $$restProps
			if (target.exclude.includes(key)) return true;
			target.exclude.push(key);
			update(target.version);
			return true;
		},
		has(target, key) {
			if (target.exclude.includes(key)) return false;
			return key in target.props;
		},
		ownKeys(target) {
			return Reflect.ownKeys(target.props).filter((key) => !target.exclude.includes(key));
		}
	};

	/**
	 * @param {Record<string, unknown>} props
	 * @param {string[]} exclude
	 * @returns {Record<string, unknown>}
	 */
	function legacy_rest_props(props, exclude) {
		return new Proxy({ props, exclude, special: {}, version: source(0) }, legacy_rest_props_handler);
	}

	/**
	 * The proxy handler for spread props. Handles the incoming array of props
	 * that looks like `() => { dynamic: props }, { static: prop }, ..` and wraps
	 * them so that the whole thing is passed to the component as the `$$props` argument.
	 * @template {Record<string | symbol, unknown>} T
	 * @type {ProxyHandler<{ props: Array<T | (() => T)> }>}}
	 */
	const spread_props_handler = {
		get(target, key) {
			let i = target.props.length;
			while (i--) {
				let p = target.props[i];
				if (is_function(p)) p = p();
				if (typeof p === 'object' && p !== null && key in p) return p[key];
			}
		},
		set(target, key, value) {
			let i = target.props.length;
			while (i--) {
				let p = target.props[i];
				if (is_function(p)) p = p();
				const desc = get_descriptor(p, key);
				if (desc && desc.set) {
					desc.set(value);
					return true;
				}
			}
			return false;
		},
		getOwnPropertyDescriptor(target, key) {
			let i = target.props.length;
			while (i--) {
				let p = target.props[i];
				if (is_function(p)) p = p();
				if (typeof p === 'object' && p !== null && key in p) {
					const descriptor = get_descriptor(p, key);
					if (descriptor && !descriptor.configurable) {
						// Prevent a "Non-configurability Report Error": The target is an array, it does
						// not actually contain this property. If it is now described as non-configurable,
						// the proxy throws a validation error. Setting it to true avoids that.
						descriptor.configurable = true;
					}
					return descriptor;
				}
			}
		},
		has(target, key) {
			// To prevent a false positive `is_entry_props` in the `prop` function
			if (key === STATE_SYMBOL || key === LEGACY_PROPS) return false;

			for (let p of target.props) {
				if (is_function(p)) p = p();
				if (p != null && key in p) return true;
			}

			return false;
		},
		ownKeys(target) {
			/** @type {Array<string | symbol>} */
			const keys = [];

			for (let p of target.props) {
				if (is_function(p)) p = p();
				for (const key in p) {
					if (!keys.includes(key)) keys.push(key);
				}
			}

			return keys;
		}
	};

	/**
	 * @param {Array<Record<string, unknown> | (() => Record<string, unknown>)>} props
	 * @returns {any}
	 */
	function spread_props(...props) {
		return new Proxy({ props }, spread_props_handler);
	}

	/**
	 * @template T
	 * @param {() => T} fn
	 * @returns {T}
	 */
	function with_parent_branch(fn) {
		var effect = active_effect;
		var previous_effect = active_effect;

		while (effect !== null && (effect.f & (BRANCH_EFFECT | ROOT_EFFECT)) === 0) {
			effect = effect.parent;
		}
		try {
			set_active_effect(effect);
			return fn();
		} finally {
			set_active_effect(previous_effect);
		}
	}

	/**
	 * This function is responsible for synchronizing a possibly bound prop with the inner component state.
	 * It is used whenever the compiler sees that the component writes to the prop, or when it has a default prop_value.
	 * @template V
	 * @param {Record<string, unknown>} props
	 * @param {string} key
	 * @param {number} flags
	 * @param {V | (() => V)} [fallback]
	 * @returns {(() => V | ((arg: V) => V) | ((arg: V, mutation: boolean) => V))}
	 */
	function prop(props, key, flags, fallback) {
		var immutable = (flags & PROPS_IS_IMMUTABLE) !== 0;
		var runes = !legacy_mode_flag || (flags & PROPS_IS_RUNES) !== 0;
		var bindable = (flags & PROPS_IS_BINDABLE) !== 0;
		var lazy = (flags & PROPS_IS_LAZY_INITIAL) !== 0;
		var is_store_sub = false;
		var prop_value;

		if (bindable) {
			[prop_value, is_store_sub] = capture_store_binding(() => /** @type {V} */ (props[key]));
		} else {
			prop_value = /** @type {V} */ (props[key]);
		}

		// Can be the case when someone does `mount(Component, props)` with `let props = $state({...})`
		// or `createClassComponent(Component, props)`
		var is_entry_props = STATE_SYMBOL in props || LEGACY_PROPS in props;

		var setter =
			get_descriptor(props, key)?.set ??
			(is_entry_props && bindable && key in props ? (v) => (props[key] = v) : undefined);

		var fallback_value = /** @type {V} */ (fallback);
		var fallback_dirty = true;
		var fallback_used = false;

		var get_fallback = () => {
			fallback_used = true;
			if (fallback_dirty) {
				fallback_dirty = false;
				if (lazy) {
					fallback_value = untrack(/** @type {() => V} */ (fallback));
				} else {
					fallback_value = /** @type {V} */ (fallback);
				}
			}

			return fallback_value;
		};

		if (prop_value === undefined && fallback !== undefined) {
			if (setter && runes) {
				props_invalid_value(key);
			}

			prop_value = get_fallback();
			if (setter) setter(prop_value);
		}

		/** @type {() => V} */
		var getter;
		if (runes) {
			getter = () => {
				var value = /** @type {V} */ (props[key]);
				if (value === undefined) return get_fallback();
				fallback_dirty = true;
				fallback_used = false;
				return value;
			};
		} else {
			// Svelte 4 did not trigger updates when a primitive value was updated to the same value.
			// Replicate that behavior through using a derived
			var derived_getter = with_parent_branch(() =>
				(immutable ? derived : derived_safe_equal)(() => /** @type {V} */ (props[key]))
			);
			derived_getter.f |= LEGACY_DERIVED_PROP;
			getter = () => {
				var value = get$2(derived_getter);
				if (value !== undefined) fallback_value = /** @type {V} */ (undefined);
				return value === undefined ? fallback_value : value;
			};
		}

		// easy mode — prop is never written to
		if ((flags & PROPS_IS_UPDATED) === 0) {
			return getter;
		}

		// intermediate mode — prop is written to, but the parent component had
		// `bind:foo` which means we can just call `$$props.foo = value` directly
		if (setter) {
			var legacy_parent = props.$$legacy;
			return function (/** @type {any} */ value, /** @type {boolean} */ mutation) {
				if (arguments.length > 0) {
					// We don't want to notify if the value was mutated and the parent is in runes mode.
					// In that case the state proxy (if it exists) should take care of the notification.
					// If the parent is not in runes mode, we need to notify on mutation, too, that the prop
					// has changed because the parent will not be able to detect the change otherwise.
					if (!runes || !mutation || legacy_parent || is_store_sub) {
						/** @type {Function} */ (setter)(mutation ? getter() : value);
					}
					return value;
				} else {
					return getter();
				}
			};
		}

		// hard mode. this is where it gets ugly — the value in the child should
		// synchronize with the parent, but it should also be possible to temporarily
		// set the value to something else locally.
		var from_child = false;
		var was_from_child = false;

		// The derived returns the current value. The underlying mutable
		// source is written to from various places to persist this value.
		var inner_current_value = mutable_source(prop_value);
		var current_value = with_parent_branch(() =>
			derived(() => {
				var parent_value = getter();
				var child_value = get$2(inner_current_value);

				if (from_child) {
					from_child = false;
					was_from_child = true;
					return child_value;
				}

				was_from_child = false;
				return (inner_current_value.v = parent_value);
			})
		);

		if (!immutable) current_value.equals = safe_equals;

		return function (/** @type {any} */ value, /** @type {boolean} */ mutation) {

			if (arguments.length > 0) {
				const new_value = mutation ? get$2(current_value) : runes && bindable ? proxy(value) : value;

				if (!current_value.equals(new_value)) {
					from_child = true;
					set(inner_current_value, new_value);
					// To ensure the fallback value is consistent when used with proxies, we
					// update the local fallback_value, but only if the fallback is actively used
					if (fallback_used && fallback_value !== undefined) {
						fallback_value = new_value;
					}
					untrack(() => get$2(current_value)); // force a synchronisation immediately
				}

				return value;
			}
			return get$2(current_value);
		};
	}

	/** @import { ComponentConstructorOptions, ComponentType, SvelteComponent, Component } from 'svelte' */

	/**
	 * Runs the given function once immediately on the server, and works like `$effect.pre` on the client.
	 *
	 * @deprecated Use this only as a temporary solution to migrate your component code to Svelte 5.
	 * @param {() => void | (() => void)} fn
	 * @returns {void}
	 */
	function run$1(fn) {
		user_pre_effect(() => {
			fn();
			var effect = /** @type {import('#client').Effect} */ (active_effect);
			// If the effect is immediately made dirty again, mark it as maybe dirty to emulate legacy behaviour
			if ((effect.f & DIRTY) !== 0) {
				let filename = "a file (we can't know which one)";
				{
					// @ts-ignore
					filename = dev_current_component_function?.[FILENAME] ?? filename;
				}
				legacy_recursive_reactive_block(filename);
				set_signal_status(effect, MAYBE_DIRTY);
			}
		});
	}

	/**
	 * Function to create a `bubble` function that mimic the behavior of `on:click` without handler available in svelte 4.
	 * @deprecated Use this only as a temporary solution to migrate your automatically delegated events in Svelte 5.
	 */
	function createBubbler() {
		const active_component_context = component_context;
		if (active_component_context === null) {
			lifecycle_outside_component('createBubbler');
		}

		return (/**@type {string}*/ type) => (/**@type {Event}*/ event) => {
			const events = /** @type {Record<string, Function | Function[]>} */ (
				active_component_context.s.$$events
			)?.[/** @type {any} */ (type)];

			if (events) {
				const callbacks = is_array(events) ? events.slice() : [events];
				for (const fn of callbacks) {
					fn.call(active_component_context.x, event);
				}
				return !event.defaultPrevented;
			}
			return true;
		};
	}

	/** @import { ComponentContext, ComponentContextLegacy } from '#client' */
	/** @import { EventDispatcher } from './index.js' */
	/** @import { NotFunction } from './internal/types.js' */

	/**
	 * The `onMount` function schedules a callback to run as soon as the component has been mounted to the DOM.
	 * It must be called during the component's initialisation (but doesn't need to live *inside* the component;
	 * it can be called from an external module).
	 *
	 * If a function is returned _synchronously_ from `onMount`, it will be called when the component is unmounted.
	 *
	 * `onMount` does not run inside [server-side components](https://svelte.dev/docs/svelte/svelte-server#render).
	 *
	 * @template T
	 * @param {() => NotFunction<T> | Promise<NotFunction<T>> | (() => any)} fn
	 * @returns {void}
	 */
	function onMount(fn) {
		if (component_context === null) {
			lifecycle_outside_component('onMount');
		}

		if (legacy_mode_flag && component_context.l !== null) {
			init_update_callbacks(component_context).m.push(fn);
		} else {
			user_effect(() => {
				const cleanup = untrack(fn);
				if (typeof cleanup === 'function') return /** @type {() => void} */ (cleanup);
			});
		}
	}

	/**
	 * Schedules a callback to run immediately before the component is unmounted.
	 *
	 * Out of `onMount`, `beforeUpdate`, `afterUpdate` and `onDestroy`, this is the
	 * only one that runs inside a server-side component.
	 *
	 * @param {() => any} fn
	 * @returns {void}
	 */
	function onDestroy(fn) {
		if (component_context === null) {
			lifecycle_outside_component('onDestroy');
		}

		onMount(() => () => untrack(fn));
	}

	/**
	 * @template [T=any]
	 * @param {string} type
	 * @param {T} [detail]
	 * @param {any}params_0
	 * @returns {CustomEvent<T>}
	 */
	function create_custom_event(type, detail, { bubbles = false, cancelable = false } = {}) {
		return new CustomEvent(type, { detail, bubbles, cancelable });
	}

	/**
	 * Creates an event dispatcher that can be used to dispatch [component events](https://svelte.dev/docs/svelte/legacy-on#Component-events).
	 * Event dispatchers are functions that can take two arguments: `name` and `detail`.
	 *
	 * Component events created with `createEventDispatcher` create a
	 * [CustomEvent](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent).
	 * These events do not [bubble](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#Event_bubbling_and_capture).
	 * The `detail` argument corresponds to the [CustomEvent.detail](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/detail)
	 * property and can contain any type of data.
	 *
	 * The event dispatcher can be typed to narrow the allowed event names and the type of the `detail` argument:
	 * ```ts
	 * const dispatch = createEventDispatcher<{
	 *  loaded: never; // does not take a detail argument
	 *  change: string; // takes a detail argument of type string, which is required
	 *  optional: number | null; // takes an optional detail argument of type number
	 * }>();
	 * ```
	 *
	 * @deprecated Use callback props and/or the `$host()` rune instead — see [migration guide](https://svelte.dev/docs/svelte/v5-migration-guide#Event-changes-Component-events)
	 * @template {Record<string, any>} [EventMap = any]
	 * @returns {EventDispatcher<EventMap>}
	 */
	function createEventDispatcher() {
		const active_component_context = component_context;
		if (active_component_context === null) {
			lifecycle_outside_component('createEventDispatcher');
		}

		return (type, detail, options) => {
			const events = /** @type {Record<string, Function | Function[]>} */ (
				active_component_context.s.$$events
			)?.[/** @type {any} */ (type)];

			if (events) {
				const callbacks = is_array(events) ? events.slice() : [events];
				// TODO are there situations where events could be dispatched
				// in a server (non-DOM) environment?
				const event = create_custom_event(/** @type {string} */ (type), detail, options);
				for (const fn of callbacks) {
					fn.call(active_component_context.x, event);
				}
				return !event.defaultPrevented;
			}

			return true;
		};
	}

	// TODO mark beforeUpdate and afterUpdate as deprecated in Svelte 6

	/**
	 * Schedules a callback to run immediately before the component is updated after any state change.
	 *
	 * The first time the callback runs will be before the initial `onMount`.
	 *
	 * In runes mode use `$effect.pre` instead.
	 *
	 * @deprecated Use [`$effect.pre`](https://svelte.dev/docs/svelte/$effect#$effect.pre) instead
	 * @param {() => void} fn
	 * @returns {void}
	 */
	function beforeUpdate(fn) {
		if (component_context === null) {
			lifecycle_outside_component('beforeUpdate');
		}

		if (component_context.l === null) {
			lifecycle_legacy_only('beforeUpdate');
		}

		init_update_callbacks(component_context).b.push(fn);
	}

	/**
	 * Schedules a callback to run immediately after the component has been updated.
	 *
	 * The first time the callback runs will be after the initial `onMount`.
	 *
	 * In runes mode use `$effect` instead.
	 *
	 * @deprecated Use [`$effect`](https://svelte.dev/docs/svelte/$effect) instead
	 * @param {() => void} fn
	 * @returns {void}
	 */
	function afterUpdate(fn) {
		if (component_context === null) {
			lifecycle_outside_component('afterUpdate');
		}

		if (component_context.l === null) {
			lifecycle_legacy_only('afterUpdate');
		}

		init_update_callbacks(component_context).a.push(fn);
	}

	/**
	 * Legacy-mode: Init callbacks object for onMount/beforeUpdate/afterUpdate
	 * @param {ComponentContext} context
	 */
	function init_update_callbacks(context) {
		var l = /** @type {ComponentContextLegacy} */ (context).l;
		return (l.u ??= { a: [], b: [], m: [] });
	}

	/**
	 * Synchronously flushes any pending state changes and those that result from it.
	 * @param {() => void} [fn]
	 * @returns {void}
	 */
	function flushSync(fn) {
		flush_sync(fn);
	}

	var indexClient = /*#__PURE__*/Object.freeze({
		__proto__: null,
		afterUpdate: afterUpdate,
		beforeUpdate: beforeUpdate,
		createEventDispatcher: createEventDispatcher,
		createRawSnippet: createRawSnippet,
		flushSync: flushSync,
		getAllContexts: getAllContexts,
		getContext: getContext,
		hasContext: hasContext,
		hydrate: hydrate,
		mount: mount,
		onDestroy: onDestroy,
		onMount: onMount,
		setContext: setContext,
		tick: tick,
		unmount: unmount,
		untrack: untrack
	});

	// generated during release, do not modify

	const PUBLIC_VERSION = '5';

	if (typeof window !== 'undefined')
		// @ts-ignore
		(window.__svelte ||= { v: new Set() }).v.add(PUBLIC_VERSION);

	function _assertClassBrand(e, t, n) {
	  if ("function" == typeof e ? e === t : e.has(t)) return arguments.length < 3 ? t : n;
	  throw new TypeError("Private element is not present on this object");
	}
	function _assertThisInitialized(e) {
	  if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  return e;
	}
	function _callSuper(t, o, e) {
	  return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e));
	}
	function _checkPrivateRedeclaration(e, t) {
	  if (t.has(e)) throw new TypeError("Cannot initialize the same private elements twice on an object");
	}
	function _classCallCheck(a, n) {
	  if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function");
	}
	function _classPrivateFieldGet2(s, a) {
	  return s.get(_assertClassBrand(s, a));
	}
	function _classPrivateFieldInitSpec(e, t, a) {
	  _checkPrivateRedeclaration(e, t), t.set(e, a);
	}
	function _classPrivateFieldSet2(s, a, r) {
	  return s.set(_assertClassBrand(s, a), r), r;
	}
	function _classPrivateMethodInitSpec(e, a) {
	  _checkPrivateRedeclaration(e, a), a.add(e);
	}
	function _defineProperties(e, r) {
	  for (var t = 0; t < r.length; t++) {
	    var o = r[t];
	    o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o);
	  }
	}
	function _createClass(e, r, t) {
	  return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", {
	    writable: !1
	  }), e;
	}
	function _defineProperty(e, r, t) {
	  return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {
	    value: t,
	    enumerable: !0,
	    configurable: !0,
	    writable: !0
	  }) : e[r] = t, e;
	}
	function _getPrototypeOf(t) {
	  return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) {
	    return t.__proto__ || Object.getPrototypeOf(t);
	  }, _getPrototypeOf(t);
	}
	function _inherits(t, e) {
	  if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
	  t.prototype = Object.create(e && e.prototype, {
	    constructor: {
	      value: t,
	      writable: !0,
	      configurable: !0
	    }
	  }), Object.defineProperty(t, "prototype", {
	    writable: !1
	  }), e && _setPrototypeOf(t, e);
	}
	function _isNativeReflectConstruct() {
	  try {
	    var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
	  } catch (t) {}
	  return (_isNativeReflectConstruct = function () {
	    return !!t;
	  })();
	}
	function _possibleConstructorReturn(t, e) {
	  if (e && ("object" == typeof e || "function" == typeof e)) return e;
	  if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");
	  return _assertThisInitialized(t);
	}
	function _setPrototypeOf(t, e) {
	  return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) {
	    return t.__proto__ = e, t;
	  }, _setPrototypeOf(t, e);
	}
	function _toPrimitive(t, r) {
	  if ("object" != typeof t || !t) return t;
	  var e = t[Symbol.toPrimitive];
	  if (void 0 !== e) {
	    var i = e.call(t, r || "default");
	    if ("object" != typeof i) return i;
	    throw new TypeError("@@toPrimitive must return a primitive value.");
	  }
	  return ("string" === r ? String : Number)(t);
	}
	function _toPropertyKey(t) {
	  var i = _toPrimitive(t, "string");
	  return "symbol" == typeof i ? i : i + "";
	}

	const inputValuesExtractors = Object.freeze({
	  checkbox: function (inpEl, defaultValue = undefined) {
	    if (typeof defaultValue == "object" && Object.hasOwn(defaultValue, "checked") && Object.hasOwn(defaultValue, "unchecked")) {
	      return inpEl.checked ? defaultValue.checked : defaultValue.unchecked;
	    } else if (Object.hasOwn(inpEl, "value") && typeof inpEl.value !== "undefined") {
	      return inpEl.checked ? inpEl.value : false;
	    } else {
	      return inpEl.checked;
	    }
	  }
	});

	/**
	 * Collection of common to UI functions and properties
	 *
	 * @class UICommon
	 */
	let UICommon$1 = /*#__PURE__*/function () {
	  function UICommon() {
	    _classCallCheck(this, UICommon);
	  }
	  return _createClass(UICommon, null, [{
	    key: "inputValuesExtractors",
	    get: function () {
	      return inputValuesExtractors;
	    }
	  }, {
	    key: "extractValueFromInput",
	    value: function extractValueFromInput(inpEl, defaultValue = undefined) {
	      if (Object.hasOwn(UICommon.inputValuesExtractors, inpEl.type)) {
	        return UICommon.inputValuesExtractors[inpEl.type](inpEl, defaultValue);
	      }
	      return inpEl.value;
	    }

	    /**
	     *
	     *
	     * @static
	     * @param {string}      field    field name
	     * @param {import('./events.types').UIEventInputChangeCallback}    onchange
	     * @param {any}         [defaultValue=undefined]
	     * @return {import('./events.types').UIEventCallback}
	     * @memberof UICommon
	     */
	  }, {
	    key: "onInput",
	    value: function onInput(field, onchange, defaultValue = undefined) {
	      return function (event) {
	        const value = UICommon.extractValueFromInput(event.currentTarget, defaultValue);
	        return onchange({
	          field,
	          value
	        }, event);
	      };
	    }

	    /**
	     *
	     *
	     * @static
	     * @param {KeyboardEvent} e
	     * @memberof UICommon
	     */
	  }, {
	    key: "isEnterEvent",
	    value: function isEnterEvent(e) {
	      return e.key === "Enter" && !e.altKey && !e.ctrlKey && !e.shiftKey;
	    }
	  }, {
	    key: "onlyOnEnter",
	    value: function onlyOnEnter(callback) {
	      return function (e) {
	        if (UICommon.isEnterEvent(e)) {
	          return callback(e);
	        } else {
	          return true;
	        }
	      };
	    }
	  }, {
	    key: "isMobile",
	    value: function isMobile() {
	      const testMobile = window.matchMedia || window.msMatchMedia;
	      if (testMobile) {
	        let testQuery = "(pointer:coarse)";
	        if (arguments.length) {
	          const max_width = typeof arguments[0] === "boolean" ? this.MOBILE_WIDTH_BREAK_POINT : arguments[0];
	          testQuery = `only screen and (max-width: ${max_width}px)`;
	        }
	        return testMobile(testQuery).matches;
	      }
	      return false;
	    }
	  }, {
	    key: "removeBodyScroll",
	    value: function removeBodyScroll() {
	      document.body.classList.add(this.SCROLL_DISABLER_CLASS);
	    }
	  }, {
	    key: "restoreBodyScroll",
	    value: function restoreBodyScroll() {
	      document.body.classList.remove(this.SCROLL_DISABLER_CLASS);
	    }

	    /**
	     *  Reformats input from any string to strict phone format
	     *  @param {string}    val    free style phone number
	     *  @param {string}    [filler=UICommon.FILLER]    free style phone number
	     *  @returns {string}          phone number
	     **/
	  }, {
	    key: "formatPhone",
	    value: function formatPhone(val, filler = this.FILLER) {
	      //starting from 11 digits in phone number
	      const slots = [1, 2, 2, 2, 3, 3, 3, 4, 4, 5, 5];
	      let digits = val.replace(/\D/g, "");
	      //if there are more, move them to country code slot
	      if (digits.length > 11) {
	        let d = digits.length - 11;
	        while (d > 0) {
	          d--;
	          slots.unshift(1);
	        }
	      }
	      let stack = ["", "", "", "", ""];
	      Array.from(digits).forEach(function (digit, index) {
	        let slot = slots[index];
	        stack[slot - 1] = stack[slot - 1] + digit;
	      });
	      //creating map of parts lengths
	      const lens = slots.reduce(function (acc, curr) {
	        if (typeof acc[curr] === "undefined") {
	          acc[curr] = 1;
	        } else {
	          acc[curr] += 1;
	        }
	        return acc;
	      }, {});
	      //fill empty positions with filler (_)
	      for (let t in stack) {
	        let dif = lens[parseInt(t) + 1] - stack[t].length;
	        while (dif > 0) {
	          stack[t] = stack[t] + filler;
	          dif--;
	        }
	      }
	      return `+${stack[0]} (${stack[1]}) ${stack[2]}-${stack[3]}-${stack[4]}`;
	    }
	  }, {
	    key: "setMoneySign",
	    value: function setMoneySign(val) {
	      this.MONEY_SIGN = val;
	    }

	    /**
	     *
	     *
	     * @static
	     * @param {number} price
	     * @return {string}
	     * @memberof UICommon
	     */
	  }, {
	    key: "formatPrice",
	    value: function formatPrice(price) {
	      let major = Math.floor(price / 100),
	        minor = price % 100;
	      return `${this.MONEY_SIGN}${major.toString()}.${minor.toString()}`;
	    }
	  }, {
	    key: "formatLocaleDatetime",
	    value: function formatLocaleDatetime(dt, opts = {
	      date: true,
	      time: true
	    }) {
	      const date = dt.toLocaleDateString(window.navigator.language);
	      const time = dt.toLocaleTimeString(window.navigator.language);
	      if (opts.date && opts.time) {
	        return `${date} ${time}`;
	      } else if (opts.date && !opts.time) {
	        return date;
	      } else {
	        return time;
	      }
	    }
	  }, {
	    key: "tryFormatLocaleDateTime",
	    value: function tryFormatLocaleDateTime(value, opts = {
	      date: true,
	      time: true
	    }) {
	      if (typeof value == "string" || typeof value == "number") {
	        const dt = new Date(value);
	        return UICommon.formatLocaleDatetime(dt, opts);
	      } else if (typeof value == "object") {
	        return UICommon.formatLocaleDatetime(value, opts);
	      } else {
	        return "";
	      }
	    }
	  }, {
	    key: "formatTimestamp",
	    value: function formatTimestamp(timestamp, offset = 0) {
	      let offsetLocal = new Date().getTimezoneOffset();
	      let deltaOffset = (offsetLocal - offset) * 60 * 1000;
	      let localDateTime = new Date(parseInt(timestamp) - deltaOffset);
	      return localDateTime.toLocaleString(window.navigator.language);
	    }
	  }, {
	    key: "declOfNum",
	    value: function declOfNum(n, text_forms) {
	      n = Math.abs(n) % 100;
	      let n1 = n % 10;
	      if (n > 10 && n < 20) {
	        return text_forms[2];
	      }
	      if (n1 > 1 && n1 < 5) {
	        return text_forms[1];
	      }
	      if (n1 == 1) {
	        return text_forms[0];
	      }
	      return text_forms[2];
	    }
	  }, {
	    key: "humanizedTimeDiff",
	    value: function humanizedTimeDiff(date /* unix time */) {
	      let currentTime = new Date().getTime();
	      let sec = Math.round((currentTime - date) / 1000);
	      let unit;
	      if (sec < 60) {
	        unit = this.declOfNum(sec, this.TIME.SECONDS);
	        return `${sec} ${unit} назад`;
	      } else if (sec < 3600) {
	        let min = Math.floor(sec / 60);
	        unit = this.declOfNum(min, this.TIME.MINUTES);
	        return `${min} ${unit} назад`;
	      } else {
	        let hours = Math.floor(sec / (60 * 60));
	        unit = this.declOfNum(hours, this.TIME.HOURS);
	        return `${hours} ${unit} назад`;
	      }
	    }
	  }]);
	}();
	_defineProperty(UICommon$1, "CLEAR_MACRO", "__CLEAR__");
	_defineProperty(UICommon$1, "ERROR_DEFAULT", "Что пошло не так.");
	_defineProperty(UICommon$1, "DEFAULT_REDIRECT_TIMEOUT", 3000);
	_defineProperty(UICommon$1, "CLASS_OK", "is-success");
	_defineProperty(UICommon$1, "CLASS_ERR", "is-danger");
	_defineProperty(UICommon$1, "SCROLL_DISABLER_CLASS", "remove-scroll");
	_defineProperty(UICommon$1, "FILLER", "_");
	_defineProperty(UICommon$1, "SCROLL_OPTIONS", {
	  top: 0,
	  behavior: "smooth"
	});
	_defineProperty(UICommon$1, "MOBILE_WIDTH_BREAK_POINT", 760);
	_defineProperty(UICommon$1, "MONEY_SIGN", "&#8381;");
	_defineProperty(UICommon$1, "TIME", {
	  SECONDS: ["секунду", "секунды", "секунд"],
	  MINUTES: ["минуту", "минуты", "минут"],
	  HOURS: ["час", "часа", "часов"]
	});

	var root$P = template(`<div><!></div>`);

	function Ui_block($$anchor, $$props) {
		push($$props, true);

		/**
		 * @typedef {Object} Props
		 * @property {string}   [id]
		 * @property {string}   [class]
		 * @property {string}   [role="button"]
		 * @property {number}   [tabIndex=0]
		 * @property {function} [onclick = () => true]
		 * @property {function} [onkeyup]
		 * @property {import('svelte').Snippet} [children]
		 */
		/** @type {Props} */
		let id = prop($$props, "id", 3, ""),
			classes = prop($$props, "class", 3, ""),
			role = prop($$props, "role", 3, "button"),
			tabIndex = prop($$props, "tabIndex", 3, 0),
			onclick = prop($$props, "onclick", 3, () => true);

		const onKeyUp = $$props.onkeyup ?? (onclick() ? UICommon$1.onlyOnEnter(onclick()) : undefined);
		var div = root$P();

		div.__click = function (...$$args) {
			onclick()?.apply(this, $$args);
		};

		div.__keyup = onKeyUp;

		var node = child(div);

		snippet(node, () => $$props.children ?? noop);
		reset(div);

		template_effect(() => {
			set_attribute(div, "id", id());
			set_class(div, `block ${classes() ?? ""}`);
			set_attribute(div, "role", role());
			set_attribute(div, "tabindex", tabIndex());
		});

		append($$anchor, div);
		pop();
	}

	delegate(["click", "keyup"]);

	function Ui_block_inner_vertical($$anchor, $$props) {
		push($$props, true);

		/**
		 * @typedef {Object} Props
		 * @property {string} [id]
		 * @property {string} [class]
		 * @property {string}   [role="button"]
		 * @property {number}   [tabIndex=0]
		 * @property {function} [onclick = () => true]
		 * @property {function} [onkeyup]
		 * @property {import('svelte').Snippet} [children]
		 */
		/** @type {Props} */
		let id = prop($$props, "id", 3, ""),
			classes = prop($$props, "class", 3, ""),
			role = prop($$props, "role", 3, "button"),
			tabIndex = prop($$props, "tabIndex", 3, 0),
			onclick = prop($$props, "onclick", 3, () => true);

		const DEFAULT_CLASSES_INNER = "block-inner-vertical";
		let classesInner = state(DEFAULT_CLASSES_INNER);

		user_effect(() => {
			set(classesInner, `block-inner-vertical ${classes()}`);
		});

		const onKeyUp = $$props.onkeyup ?? (onclick() ? UICommon$1.onlyOnEnter(onclick()) : undefined);

		Ui_block($$anchor, {
			get id() {
				return id();
			},
			get class() {
				return get$2(classesInner);
			},
			get onclick() {
				return onclick();
			},
			onkeyup: onKeyUp,
			get role() {
				return role();
			},
			get tabIndex() {
				return tabIndex();
			},
			children: ($$anchor, $$slotProps) => {
				var fragment_1 = comment();
				var node = first_child(fragment_1);

				snippet(node, () => $$props.children ?? noop);
				append($$anchor, fragment_1);
			},
			$$slots: { default: true }
		});

		pop();
	}

	var root$O = template(`<div><!></div>`);

	function Ui_box($$anchor, $$props) {
		push($$props, true);

		/**
		 * @typedef {Object} Props
		 * @property {string}   [id]
		 * @property {string}   [class]
		 * @property {string}   [role="button"]
		 * @property {number}   [tabIndex=0]
		 * @property {function} [onclick = () => true]
		 * @property {function} [onkeyup]
		 * @property {import('svelte').Snippet} [children]
		 */
		/** @type {Props} */
		let id = prop($$props, "id", 3, ""),
			classes = prop($$props, "class", 3, ""),
			role = prop($$props, "role", 3, "button"),
			tabIndex = prop($$props, "tabIndex", 3, 0),
			onclick = prop($$props, "onclick", 3, () => true);

		const onKeyUp = $$props.onkeyup ?? (onclick() ? UICommon$1.onlyOnEnter(onclick()) : undefined);
		var div = root$O();

		div.__click = function (...$$args) {
			onclick()?.apply(this, $$args);
		};

		div.__keyup = onKeyUp;

		var node = child(div);

		snippet(node, () => $$props.children ?? noop);
		reset(div);

		template_effect(() => {
			set_attribute(div, "id", id());
			set_class(div, `box ${classes() ?? ""} `);
			set_attribute(div, "role", role());
			set_attribute(div, "tabindex", tabIndex());
		});

		append($$anchor, div);
		pop();
	}

	delegate(["click", "keyup"]);

	var root$N = template(`<div><!></div>`);

	function Ui_content($$anchor, $$props) {
		push($$props, true);

		/**
		 * @typedef {Object} Props
		 * @property {string}   [id]
		 * @property {string}   [class]
		 * @property {string}   [role="button"]
		 * @property {number}   [tabIndex=0]
		 * @property {function} [onclick = () => true]
		 * @property {function} [onkeyup]
		 * @property {import('svelte').Snippet} [children]
		 */
		/** @type {Props} */
		let id = prop($$props, "id", 3, ""),
			classes = prop($$props, "class", 3, ""),
			role = prop($$props, "role", 3, "button"),
			tabIndex = prop($$props, "tabIndex", 3, 0),
			onclick = prop($$props, "onclick", 3, () => true);

		const onKeyUp = $$props.onkeyup ?? (onclick() ? UICommon$1.onlyOnEnter(onclick()) : undefined);
		var div = root$N();

		div.__click = function (...$$args) {
			onclick()?.apply(this, $$args);
		};

		div.__keyup = onKeyUp;

		var node = child(div);

		snippet(node, () => $$props.children ?? noop);
		reset(div);

		template_effect(() => {
			set_attribute(div, "id", id());
			set_class(div, `content ${classes() ?? ""}`);
			set_attribute(div, "role", role());
			set_attribute(div, "tabindex", tabIndex());
		});

		append($$anchor, div);
		pop();
	}

	delegate(["click", "keyup"]);

	var index$c = /*#__PURE__*/Object.freeze({
		__proto__: null,
		UIBlock: Ui_block,
		UIBlockInnerVertical: Ui_block_inner_vertical,
		UIBox: Ui_box,
		UIContent: Ui_content
	});

	/** @import { Readable, StartStopNotifier, Subscriber, Unsubscriber, Updater, Writable } from '../public.js' */
	/** @import { Stores, StoresValues, SubscribeInvalidateTuple } from '../private.js' */

	/**
	 * @type {Array<SubscribeInvalidateTuple<any> | any>}
	 */
	const subscriber_queue = [];

	/**
	 * Create a `Writable` store that allows both updating and reading by subscription.
	 *
	 * @template T
	 * @param {T} [value] initial value
	 * @param {StartStopNotifier<T>} [start]
	 * @returns {Writable<T>}
	 */
	function writable(value, start = noop) {
		/** @type {Unsubscriber | null} */
		let stop = null;

		/** @type {Set<SubscribeInvalidateTuple<T>>} */
		const subscribers = new Set();

		/**
		 * @param {T} new_value
		 * @returns {void}
		 */
		function set(new_value) {
			if (safe_not_equal(value, new_value)) {
				value = new_value;
				if (stop) {
					// store is ready
					const run_queue = !subscriber_queue.length;
					for (const subscriber of subscribers) {
						subscriber[1]();
						subscriber_queue.push(subscriber, value);
					}
					if (run_queue) {
						for (let i = 0; i < subscriber_queue.length; i += 2) {
							subscriber_queue[i][0](subscriber_queue[i + 1]);
						}
						subscriber_queue.length = 0;
					}
				}
			}
		}

		/**
		 * @param {Updater<T>} fn
		 * @returns {void}
		 */
		function update(fn) {
			set(fn(/** @type {T} */ (value)));
		}

		/**
		 * @param {Subscriber<T>} run
		 * @param {() => void} [invalidate]
		 * @returns {Unsubscriber}
		 */
		function subscribe(run, invalidate = noop) {
			/** @type {SubscribeInvalidateTuple<T>} */
			const subscriber = [run, invalidate];
			subscribers.add(subscriber);
			if (subscribers.size === 1) {
				stop = start(set, update) || noop;
			}
			run(/** @type {T} */ (value));
			return () => {
				subscribers.delete(subscriber);
				if (subscribers.size === 0 && stop) {
					stop();
					stop = null;
				}
			};
		}
		return { set, update, subscribe };
	}

	function initDict(target = {}) {
	  const handler = {
	    get: function (target, prop) {
	      if (!Object.hasOwn(target, prop)) {
	        return prop;
	      }
	      return Reflect.get(...arguments);
	    }
	  };
	  return new Proxy(target, handler);
	}
	function createLocale() {
	  const {
	    subscribe,
	    set,
	    update
	  } = writable(initDict());
	  return {
	    subscribe,
	    update,
	    set: function (val) {
	      set(initDict(val));
	    },
	    reset: function () {
	      return set(initDict());
	    }
	  };
	}
	const LOCALE = createLocale();

	function getDefaultExportFromCjs (x) {
		return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
	}

	var EventEmitter$2 = {exports: {}};

	/*!
	 * EventEmitter v5.2.9 - git.io/ee
	 * Unlicense - http://unlicense.org/
	 * Oliver Caldwell - https://oli.me.uk/
	 * @preserve
	 */
	var EventEmitter$1 = EventEmitter$2.exports;

	var hasRequiredEventEmitter;

	function requireEventEmitter () {
		if (hasRequiredEventEmitter) return EventEmitter$2.exports;
		hasRequiredEventEmitter = 1;
		(function (module) {
	(function (exports) {

			    /**
			     * Class for managing events.
			     * Can be extended to provide event functionality in other classes.
			     *
			     * @class EventEmitter Manages event registering and emitting.
			     */
			    function EventEmitter() {}

			    // Shortcuts to improve speed and size
			    var proto = EventEmitter.prototype;
			    var originalGlobalValue = exports.EventEmitter;

			    /**
			     * Finds the index of the listener for the event in its storage array.
			     *
			     * @param {Function[]} listeners Array of listeners to search through.
			     * @param {Function} listener Method to look for.
			     * @return {Number} Index of the specified listener, -1 if not found
			     * @api private
			     */
			    function indexOfListener(listeners, listener) {
			        var i = listeners.length;
			        while (i--) {
			            if (listeners[i].listener === listener) {
			                return i;
			            }
			        }

			        return -1;
			    }

			    /**
			     * Alias a method while keeping the context correct, to allow for overwriting of target method.
			     *
			     * @param {String} name The name of the target method.
			     * @return {Function} The aliased method
			     * @api private
			     */
			    function alias(name) {
			        return function aliasClosure() {
			            return this[name].apply(this, arguments);
			        };
			    }

			    /**
			     * Returns the listener array for the specified event.
			     * Will initialise the event object and listener arrays if required.
			     * Will return an object if you use a regex search. The object contains keys for each matched event. So /ba[rz]/ might return an object containing bar and baz. But only if you have either defined them with defineEvent or added some listeners to them.
			     * Each property in the object response is an array of listener functions.
			     *
			     * @param {String|RegExp} evt Name of the event to return the listeners from.
			     * @return {Function[]|Object} All listener functions for the event.
			     */
			    proto.getListeners = function getListeners(evt) {
			        var events = this._getEvents();
			        var response;
			        var key;

			        // Return a concatenated array of all matching events if
			        // the selector is a regular expression.
			        if (evt instanceof RegExp) {
			            response = {};
			            for (key in events) {
			                if (events.hasOwnProperty(key) && evt.test(key)) {
			                    response[key] = events[key];
			                }
			            }
			        }
			        else {
			            response = events[evt] || (events[evt] = []);
			        }

			        return response;
			    };

			    /**
			     * Takes a list of listener objects and flattens it into a list of listener functions.
			     *
			     * @param {Object[]} listeners Raw listener objects.
			     * @return {Function[]} Just the listener functions.
			     */
			    proto.flattenListeners = function flattenListeners(listeners) {
			        var flatListeners = [];
			        var i;

			        for (i = 0; i < listeners.length; i += 1) {
			            flatListeners.push(listeners[i].listener);
			        }

			        return flatListeners;
			    };

			    /**
			     * Fetches the requested listeners via getListeners but will always return the results inside an object. This is mainly for internal use but others may find it useful.
			     *
			     * @param {String|RegExp} evt Name of the event to return the listeners from.
			     * @return {Object} All listener functions for an event in an object.
			     */
			    proto.getListenersAsObject = function getListenersAsObject(evt) {
			        var listeners = this.getListeners(evt);
			        var response;

			        if (listeners instanceof Array) {
			            response = {};
			            response[evt] = listeners;
			        }

			        return response || listeners;
			    };

			    function isValidListener (listener) {
			        if (typeof listener === 'function' || listener instanceof RegExp) {
			            return true
			        } else if (listener && typeof listener === 'object') {
			            return isValidListener(listener.listener)
			        } else {
			            return false
			        }
			    }

			    /**
			     * Adds a listener function to the specified event.
			     * The listener will not be added if it is a duplicate.
			     * If the listener returns true then it will be removed after it is called.
			     * If you pass a regular expression as the event name then the listener will be added to all events that match it.
			     *
			     * @param {String|RegExp} evt Name of the event to attach the listener to.
			     * @param {Function} listener Method to be called when the event is emitted. If the function returns true then it will be removed after calling.
			     * @return {Object} Current instance of EventEmitter for chaining.
			     */
			    proto.addListener = function addListener(evt, listener) {
			        if (!isValidListener(listener)) {
			            throw new TypeError('listener must be a function');
			        }

			        var listeners = this.getListenersAsObject(evt);
			        var listenerIsWrapped = typeof listener === 'object';
			        var key;

			        for (key in listeners) {
			            if (listeners.hasOwnProperty(key) && indexOfListener(listeners[key], listener) === -1) {
			                listeners[key].push(listenerIsWrapped ? listener : {
			                    listener: listener,
			                    once: false
			                });
			            }
			        }

			        return this;
			    };

			    /**
			     * Alias of addListener
			     */
			    proto.on = alias('addListener');

			    /**
			     * Semi-alias of addListener. It will add a listener that will be
			     * automatically removed after its first execution.
			     *
			     * @param {String|RegExp} evt Name of the event to attach the listener to.
			     * @param {Function} listener Method to be called when the event is emitted. If the function returns true then it will be removed after calling.
			     * @return {Object} Current instance of EventEmitter for chaining.
			     */
			    proto.addOnceListener = function addOnceListener(evt, listener) {
			        return this.addListener(evt, {
			            listener: listener,
			            once: true
			        });
			    };

			    /**
			     * Alias of addOnceListener.
			     */
			    proto.once = alias('addOnceListener');

			    /**
			     * Defines an event name. This is required if you want to use a regex to add a listener to multiple events at once. If you don't do this then how do you expect it to know what event to add to? Should it just add to every possible match for a regex? No. That is scary and bad.
			     * You need to tell it what event names should be matched by a regex.
			     *
			     * @param {String} evt Name of the event to create.
			     * @return {Object} Current instance of EventEmitter for chaining.
			     */
			    proto.defineEvent = function defineEvent(evt) {
			        this.getListeners(evt);
			        return this;
			    };

			    /**
			     * Uses defineEvent to define multiple events.
			     *
			     * @param {String[]} evts An array of event names to define.
			     * @return {Object} Current instance of EventEmitter for chaining.
			     */
			    proto.defineEvents = function defineEvents(evts) {
			        for (var i = 0; i < evts.length; i += 1) {
			            this.defineEvent(evts[i]);
			        }
			        return this;
			    };

			    /**
			     * Removes a listener function from the specified event.
			     * When passed a regular expression as the event name, it will remove the listener from all events that match it.
			     *
			     * @param {String|RegExp} evt Name of the event to remove the listener from.
			     * @param {Function} listener Method to remove from the event.
			     * @return {Object} Current instance of EventEmitter for chaining.
			     */
			    proto.removeListener = function removeListener(evt, listener) {
			        var listeners = this.getListenersAsObject(evt);
			        var index;
			        var key;

			        for (key in listeners) {
			            if (listeners.hasOwnProperty(key)) {
			                index = indexOfListener(listeners[key], listener);

			                if (index !== -1) {
			                    listeners[key].splice(index, 1);
			                }
			            }
			        }

			        return this;
			    };

			    /**
			     * Alias of removeListener
			     */
			    proto.off = alias('removeListener');

			    /**
			     * Adds listeners in bulk using the manipulateListeners method.
			     * If you pass an object as the first argument you can add to multiple events at once. The object should contain key value pairs of events and listeners or listener arrays. You can also pass it an event name and an array of listeners to be added.
			     * You can also pass it a regular expression to add the array of listeners to all events that match it.
			     * Yeah, this function does quite a bit. That's probably a bad thing.
			     *
			     * @param {String|Object|RegExp} evt An event name if you will pass an array of listeners next. An object if you wish to add to multiple events at once.
			     * @param {Function[]} [listeners] An optional array of listener functions to add.
			     * @return {Object} Current instance of EventEmitter for chaining.
			     */
			    proto.addListeners = function addListeners(evt, listeners) {
			        // Pass through to manipulateListeners
			        return this.manipulateListeners(false, evt, listeners);
			    };

			    /**
			     * Removes listeners in bulk using the manipulateListeners method.
			     * If you pass an object as the first argument you can remove from multiple events at once. The object should contain key value pairs of events and listeners or listener arrays.
			     * You can also pass it an event name and an array of listeners to be removed.
			     * You can also pass it a regular expression to remove the listeners from all events that match it.
			     *
			     * @param {String|Object|RegExp} evt An event name if you will pass an array of listeners next. An object if you wish to remove from multiple events at once.
			     * @param {Function[]} [listeners] An optional array of listener functions to remove.
			     * @return {Object} Current instance of EventEmitter for chaining.
			     */
			    proto.removeListeners = function removeListeners(evt, listeners) {
			        // Pass through to manipulateListeners
			        return this.manipulateListeners(true, evt, listeners);
			    };

			    /**
			     * Edits listeners in bulk. The addListeners and removeListeners methods both use this to do their job. You should really use those instead, this is a little lower level.
			     * The first argument will determine if the listeners are removed (true) or added (false).
			     * If you pass an object as the second argument you can add/remove from multiple events at once. The object should contain key value pairs of events and listeners or listener arrays.
			     * You can also pass it an event name and an array of listeners to be added/removed.
			     * You can also pass it a regular expression to manipulate the listeners of all events that match it.
			     *
			     * @param {Boolean} remove True if you want to remove listeners, false if you want to add.
			     * @param {String|Object|RegExp} evt An event name if you will pass an array of listeners next. An object if you wish to add/remove from multiple events at once.
			     * @param {Function[]} [listeners] An optional array of listener functions to add/remove.
			     * @return {Object} Current instance of EventEmitter for chaining.
			     */
			    proto.manipulateListeners = function manipulateListeners(remove, evt, listeners) {
			        var i;
			        var value;
			        var single = remove ? this.removeListener : this.addListener;
			        var multiple = remove ? this.removeListeners : this.addListeners;

			        // If evt is an object then pass each of its properties to this method
			        if (typeof evt === 'object' && !(evt instanceof RegExp)) {
			            for (i in evt) {
			                if (evt.hasOwnProperty(i) && (value = evt[i])) {
			                    // Pass the single listener straight through to the singular method
			                    if (typeof value === 'function') {
			                        single.call(this, i, value);
			                    }
			                    else {
			                        // Otherwise pass back to the multiple function
			                        multiple.call(this, i, value);
			                    }
			                }
			            }
			        }
			        else {
			            // So evt must be a string
			            // And listeners must be an array of listeners
			            // Loop over it and pass each one to the multiple method
			            i = listeners.length;
			            while (i--) {
			                single.call(this, evt, listeners[i]);
			            }
			        }

			        return this;
			    };

			    /**
			     * Removes all listeners from a specified event.
			     * If you do not specify an event then all listeners will be removed.
			     * That means every event will be emptied.
			     * You can also pass a regex to remove all events that match it.
			     *
			     * @param {String|RegExp} [evt] Optional name of the event to remove all listeners for. Will remove from every event if not passed.
			     * @return {Object} Current instance of EventEmitter for chaining.
			     */
			    proto.removeEvent = function removeEvent(evt) {
			        var type = typeof evt;
			        var events = this._getEvents();
			        var key;

			        // Remove different things depending on the state of evt
			        if (type === 'string') {
			            // Remove all listeners for the specified event
			            delete events[evt];
			        }
			        else if (evt instanceof RegExp) {
			            // Remove all events matching the regex.
			            for (key in events) {
			                if (events.hasOwnProperty(key) && evt.test(key)) {
			                    delete events[key];
			                }
			            }
			        }
			        else {
			            // Remove all listeners in all events
			            delete this._events;
			        }

			        return this;
			    };

			    /**
			     * Alias of removeEvent.
			     *
			     * Added to mirror the node API.
			     */
			    proto.removeAllListeners = alias('removeEvent');

			    /**
			     * Emits an event of your choice.
			     * When emitted, every listener attached to that event will be executed.
			     * If you pass the optional argument array then those arguments will be passed to every listener upon execution.
			     * Because it uses `apply`, your array of arguments will be passed as if you wrote them out separately.
			     * So they will not arrive within the array on the other side, they will be separate.
			     * You can also pass a regular expression to emit to all events that match it.
			     *
			     * @param {String|RegExp} evt Name of the event to emit and execute listeners for.
			     * @param {Array} [args] Optional array of arguments to be passed to each listener.
			     * @return {Object} Current instance of EventEmitter for chaining.
			     */
			    proto.emitEvent = function emitEvent(evt, args) {
			        var listenersMap = this.getListenersAsObject(evt);
			        var listeners;
			        var listener;
			        var i;
			        var key;
			        var response;

			        for (key in listenersMap) {
			            if (listenersMap.hasOwnProperty(key)) {
			                listeners = listenersMap[key].slice(0);

			                for (i = 0; i < listeners.length; i++) {
			                    // If the listener returns true then it shall be removed from the event
			                    // The function is executed either with a basic call or an apply if there is an args array
			                    listener = listeners[i];

			                    if (listener.once === true) {
			                        this.removeListener(evt, listener.listener);
			                    }

			                    response = listener.listener.apply(this, args || []);

			                    if (response === this._getOnceReturnValue()) {
			                        this.removeListener(evt, listener.listener);
			                    }
			                }
			            }
			        }

			        return this;
			    };

			    /**
			     * Alias of emitEvent
			     */
			    proto.trigger = alias('emitEvent');

			    /**
			     * Subtly different from emitEvent in that it will pass its arguments on to the listeners, as opposed to taking a single array of arguments to pass on.
			     * As with emitEvent, you can pass a regex in place of the event name to emit to all events that match it.
			     *
			     * @param {String|RegExp} evt Name of the event to emit and execute listeners for.
			     * @param {...*} Optional additional arguments to be passed to each listener.
			     * @return {Object} Current instance of EventEmitter for chaining.
			     */
			    proto.emit = function emit(evt) {
			        var args = Array.prototype.slice.call(arguments, 1);
			        return this.emitEvent(evt, args);
			    };

			    /**
			     * Sets the current value to check against when executing listeners. If a
			     * listeners return value matches the one set here then it will be removed
			     * after execution. This value defaults to true.
			     *
			     * @param {*} value The new value to check for when executing listeners.
			     * @return {Object} Current instance of EventEmitter for chaining.
			     */
			    proto.setOnceReturnValue = function setOnceReturnValue(value) {
			        this._onceReturnValue = value;
			        return this;
			    };

			    /**
			     * Fetches the current value to check against when executing listeners. If
			     * the listeners return value matches this one then it should be removed
			     * automatically. It will return true by default.
			     *
			     * @return {*|Boolean} The current value to check for or the default, true.
			     * @api private
			     */
			    proto._getOnceReturnValue = function _getOnceReturnValue() {
			        if (this.hasOwnProperty('_onceReturnValue')) {
			            return this._onceReturnValue;
			        }
			        else {
			            return true;
			        }
			    };

			    /**
			     * Fetches the events object and creates one if required.
			     *
			     * @return {Object} The events storage object.
			     * @api private
			     */
			    proto._getEvents = function _getEvents() {
			        return this._events || (this._events = {});
			    };

			    /**
			     * Reverts the global {@link EventEmitter} to its previous value and returns a reference to this version.
			     *
			     * @return {Function} Non conflicting EventEmitter class.
			     */
			    EventEmitter.noConflict = function noConflict() {
			        exports.EventEmitter = originalGlobalValue;
			        return EventEmitter;
			    };

			    // Expose the class either via AMD, CommonJS or the global object
			    if (module.exports){
			        module.exports = EventEmitter;
			    }
			    else {
			        exports.EventEmitter = EventEmitter;
			    }
			}(typeof window !== 'undefined' ? window : EventEmitter$1 || {})); 
		} (EventEmitter$2));
		return EventEmitter$2.exports;
	}

	var EventEmitterExports = requireEventEmitter();
	var EventEmitter = /*@__PURE__*/getDefaultExportFromCjs(EventEmitterExports);

	/*
		:property.sub1.func().funcProp
		 = return funcProp of function result of sub1 property of property of object
		:{::helperVal}.sub
		 = return sub property of object property with name retrieved from helperVal property of helpers object
		:{::helperFunc()}.sub
		= return sub property of object property with name retrieved from helperVal function result of helpers object.
		if helpersFunx return 'car' then source path becomes :car.sub

	*/

	var src$1;
	var hasRequiredSrc$1;

	function requireSrc$1 () {
		if (hasRequiredSrc$1) return src$1;
		hasRequiredSrc$1 = 1;
		const SUB_PATH_START = "{",
		    SUB_PATH_END = "}",
		    PATH_SPLIT = ".",
		    PATH_START_OBJECT = ":",
		    PATH_START_HELPERS = "::",
		    FUNCTION_MARKER = "()",
		    MAX_DEEP = 10;

		/**
		 * Set of tools to use notPath property access notation
		 * : is for item
		 * :: is for helpers
		 * {} subpath
		 * . path splitter
		 * () function and should be executed with params (item, helper | undefined)
		 * sub-paths will be parsed and replaced by results in source path
		 */
		class notPath {
		    static get SUB_PATH_START() {
		        return SUB_PATH_START;
		    }
		    static get SUB_PATH_END() {
		        return SUB_PATH_END;
		    }
		    static get PATH_SPLIT() {
		        return PATH_SPLIT;
		    }
		    static get PATH_START_OBJECT() {
		        return PATH_START_OBJECT;
		    }
		    static get PATH_START_HELPERS() {
		        return PATH_START_HELPERS;
		    }
		    static get FUNCTION_MARKER() {
		        return FUNCTION_MARKER;
		    }
		    static get MAX_DEEP() {
		        return MAX_DEEP;
		    }

		    /*
				input ':{::helperVal}.sub'
				return ::helperVal
			*/

		    /**
		     * Returns first subpath in path
		     * if subpath not closed will return it anyway
		     * @param {string} path path in string notation
		     * @return {string|null} subpath or null if no sub path were found
		     */
		    static findNextSubPath(path) {
		        let subPath = "",
		            find = false;
		        for (let i = 0; i < path.length; i++) {
		            if (path[i] === SUB_PATH_START) {
		                find = true;
		                subPath = "";
		            } else {
		                if (path[i] === SUB_PATH_END && find) {
		                    return subPath;
		                } else {
		                    subPath += path[i];
		                }
		            }
		        }
		        return find ? subPath : null;
		    }

		    /**
		     * Replace sub-path in parent path by parsed version
		     * @param {string} path path to process
		     * @param {string} sub sub path to replace
		     * @param {string} parsed parsed sub path
		     * @return {string} parsed path
		     */

		    static replaceSubPath(path, sub, parsed) {
		        let subf = SUB_PATH_START + sub + SUB_PATH_END,
		            i = 0;
		        while (path.indexOf(subf) > -1 && i < MAX_DEEP) {
		            path = path.replace(subf, parsed);
		            i++;
		        }
		        return path;
		    }

		    /**
		     * Parses path while there any sub-paths
		     * @param {string} path raw unparsed path
		     * @param {object} item data
		     * @param {object} helpers helpers
		     * @return {string} parsed path
		     */
		    static parseSubs(path, item, helpers) {
		        let subPath = this.findNextSubPath(path),
		            subPathParsed,
		            i = 0;
		        while (subPath) {
		            subPathParsed = this.getValueByPath(
		                subPath.indexOf(PATH_START_HELPERS) > -1 ? helpers : item,
		                subPath,
		                item,
		                helpers
		            );
		            path = this.replaceSubPath(path, subPath, subPathParsed);
		            i++;
		            if (i > MAX_DEEP) {
		                break;
		            }
		            subPath = this.findNextSubPath(path);
		        }
		        return path;
		    }

		    /**
		     * Get property value
		     * @param {string} path path to property
		     * @param {object} item item object
		     * @param {object} [helpers] helpers object
		     */

		    static get(path, item, helpers = undefined) {
		        switch (path) {
		            case PATH_START_OBJECT:
		                return item;
		            case PATH_START_HELPERS:
		                return helpers;
		        }
		        path = this.parseSubs(path, item, helpers);
		        return this.getValueByPath(
		            path.indexOf(PATH_START_HELPERS) > -1 ? helpers : item,
		            path,
		            item,
		            helpers
		        );
		    }

		    /**
		     * Set property value
		     * @param {string}  path path to property
		     * @param {object}  item item object
		     * @param {object}  helpers         helpers object if 4 arguments or attrValue if only 3 provided
		     * @param {any}     [attrValue]     value we want to assign
		     */

		    static set(path, item, helpers, attrValue = undefined) {
		        if (arguments.length === 3) {
		            attrValue = helpers;
		            helpers = undefined;
		        }
		        let subPath = this.findNextSubPath(path),
		            subPathParsed,
		            i = 0;
		        while (subPath) {
		            subPathParsed = this.getValueByPath(
		                subPath.indexOf(PATH_START_HELPERS) > -1 ? helpers : item,
		                subPath,
		                item,
		                helpers
		            );
		            path = this.replaceSubPath(path, subPath, subPathParsed);
		            if (i > MAX_DEEP) {
		                break;
		            }
		            subPath = this.findNextSubPath(path);
		            i++;
		        }
		        this.setValueByPath(item, path, attrValue);
		        if (
		            item.isRecord &&
		            this.normilizePath(path).length > 1 &&
		            item.__isActive
		        ) {
		            item.trigger("change", item, path, attrValue);
		        }
		    }

		    /**
		     * Set target property to null
		     * @param {string} path path to property
		     * @param {object} item item object
		     * @param {object} helpers helpers object
		     */

		    static unset(path, item, helpers) {
		        this.set(path, item, helpers, null);
		    }

		    /**
		     * Parses step key, transforms it to end-form
		     * @param {string} step not parsed step key
		     * @param {object} item item object
		     * @param {object} helper helpers object
		     * @return {string|number} parsed step key
		     */

		    static parsePathStep(step, item, helper) {
		        let rStep = null;
		        if (step.indexOf(PATH_START_HELPERS) === 0 && helper) {
		            rStep = step.replace(PATH_START_HELPERS, "");
		            if (rStep.indexOf(FUNCTION_MARKER) === rStep.length - 2) {
		                rStep = rStep.replace(FUNCTION_MARKER, "");
		                if (Object.prototype.hasOwnProperty.call(helper, rStep)) {
		                    return helper[rStep](item, undefined);
		                }
		            } else {
		                return helper[rStep];
		            }
		        } else {
		            if (step.indexOf(PATH_START_OBJECT) === 0 && item) {
		                rStep = step.replace(PATH_START_OBJECT, "");
		                if (rStep.indexOf(FUNCTION_MARKER) === rStep.length - 2) {
		                    rStep = rStep.replace(FUNCTION_MARKER, "");
		                    if (Object.prototype.hasOwnProperty.call(item, rStep)) {
		                        return item[rStep](item, undefined);
		                    }
		                } else {
		                    return item[rStep];
		                }
		            }
		        }
		        return step;
		    }

		    //::fieldName.result
		    //{}
		    //{fieldName: 'targetRecordField'}
		    ////['targetRecordField', 'result']
		    /**
		     * Transforms path with sub paths to path without
		     * @param {string|array} path path to target property
		     * @param {object} item item object
		     * @param {object} helper helper object
		     * @return {array} parsed path
		     **/
		    static parsePath(path, item, helper) {
		        if (!Array.isArray(path)) {
		            path = path.split(PATH_SPLIT);
		        }
		        for (var i = 0; i < path.length; i++) {
		            path[i] = this.parsePathStep(path[i], item, helper);
		        }
		        return path;
		    }

		    /**
		     * Transforms path from string notation to array of keys
		     * @param {string|array} path  input path, if array does nothing
		     * @return {array} path in array notation
		     */

		    static normilizePath(path) {
		        if (Array.isArray(path)) {
		            return path;
		        } else {
		            while (path.indexOf(PATH_START_OBJECT) > -1) {
		                path = path.replace(PATH_START_OBJECT, "");
		            }
		            return path.split(PATH_SPLIT);
		        }
		    }

		    /*
				small = ["todo"],
				big = ["todo", "length"]
				return true;

			*/

		    /**
		     * Identifies if first path includes second, compared from start,
		     * no floating start position inside ['join', 'me'], ['me']
		     * will result in false
		     * @param {array} big where we will search
		     * @param {array} small what we will search
		     * @return {boolean} if we succeed
		     */

		    static ifFullSubPath(big, small) {
		        if (big.length < small.length) {
		            return false;
		        }
		        for (let t = 0; t < small.length; t++) {
		            if (small[t] !== big[t]) {
		                return false;
		            }
		        }
		        return true;
		    }

		    /**
		     * Getter through third object
		     * Path is parsed, no event triggering for notRecord
		     * @param {object} object object to be used as getter
		     * @param {string|array} attrPath path to property
		     * @param {object} item supporting data
		     * @param {helpers} object  supporting helpers
		     */

		    static getValueByPath(object, attrPath, item, helpers) {
		        attrPath = this.normilizePath(attrPath);
		        let attrName = attrPath.shift(),
		            isFunction = attrName.indexOf(FUNCTION_MARKER) > -1;
		        if (isFunction) {
		            attrName = attrName.replace(FUNCTION_MARKER, "");
		        }
		        if (
		            (typeof object === "object" || typeof object === "function") &&
		            typeof object !== "undefined" &&
		            object !== null &&
		            typeof object[attrName] !== "undefined" &&
		            object[attrName] !== null
		        ) {
		            let newObj = isFunction
		                ? object[attrName]({
		                      item,
		                      helpers,
		                  })
		                : object[attrName];
		            if (attrPath.length > 0) {
		                return this.getValueByPath(newObj, attrPath, item, helpers);
		            } else {
		                return newObj;
		            }
		        } else {
		            return undefined;
		        }
		    }

		    /**
		     * Setter through third object
		     * Path is parsed, no event triggering for notRecord
		     * @param {object} object object to be modified
		     * @param {string|array} attrPath path to property
		     * @param {any} attrValue  value to assign
		     */

		    static setValueByPath(object, attrPath, attrValue) {
		        attrPath = this.normilizePath(attrPath);
		        let attrName = attrPath.shift();
		        if (attrPath.length > 0) {
		            if (!Object.prototype.hasOwnProperty.call(object, attrName)) {
		                object[attrName] = {};
		            }
		            this.setValueByPath(object[attrName], attrPath, attrValue);
		        } else {
		            object[attrName] = attrValue;
		        }
		    }

		    /**
		     * Joins passed in strings with PATH_SPLIT
		     * @param {string} arguments path to be glued
		     * @return {string} composite path
		     */

		    static join() {
		        let args = Array.prototype.slice.call(arguments);
		        return args.join(PATH_SPLIT);
		    }
		}

		src$1 = notPath;
		return src$1;
	}

	var notPath$1;
	var hasRequiredNotPath;

	function requireNotPath () {
		if (hasRequiredNotPath) return notPath$1;
		hasRequiredNotPath = 1;
		notPath$1 = requireSrc$1();
		return notPath$1;
	}

	var notPathExports = requireNotPath();
	var notPath = /*@__PURE__*/getDefaultExportFromCjs(notPathExports);

	var _notCommon;

	/*
	https://github.com/TehShrike/is-mergeable-object

	Included for convinience only. All rights belongs to their authors and etc.
	start of my code marked.

	*/

	let isMergeableObject = function isMergeableObject(value) {
	  return isNonNullObject(value) && !isSpecial(value);
	};
	function isNonNullObject(value) {
	  return !!value && typeof value === "object";
	}
	function isSpecial(value) {
	  var stringValue = Object.prototype.toString.call(value);
	  return stringValue === "[object RegExp]" || stringValue === "[object Date]" || isReactElement(value);
	}

	// see https://github.com/facebook/react/blob/b5ac963fb791d1298e7f396236383bc955f916c1/src/isomorphic/classic/element/ReactElement.js#L21-L25
	var canUseSymbol = typeof Symbol === "function" && Symbol.for;
	var REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for("react.element") : 0xeac7;
	function isReactElement(value) {
	  return value.$$typeof === REACT_ELEMENT_TYPE;
	}

	/*
	https://github.com/KyleAMathews/deepmerge

	The MIT License (MIT)

	Copyright (c) 2012 Nicholas Fisher

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	function emptyTarget(val) {
	  return Array.isArray(val) ? [] : {};
	}
	function cloneUnlessOtherwiseSpecified(value, optionsArgument) {
	  const clone = !optionsArgument || optionsArgument.clone !== false;
	  return clone && isMergeableObject(value) ? deepmerge(emptyTarget(value), value, optionsArgument) : value;
	}
	function defaultArrayMerge(target, source, optionsArgument) {
	  return target.concat(source).map(function (element) {
	    return cloneUnlessOtherwiseSpecified(element, optionsArgument);
	  });
	}
	function mergeObject(target, source, optionsArgument) {
	  const destination = {};
	  if (isMergeableObject(target)) {
	    Object.keys(target).forEach(function (key) {
	      destination[key] = cloneUnlessOtherwiseSpecified(target[key], optionsArgument);
	    });
	  }
	  Object.keys(source).forEach(function (key) {
	    if (!isMergeableObject(source[key]) || !target[key]) {
	      destination[key] = cloneUnlessOtherwiseSpecified(source[key], optionsArgument);
	    } else {
	      destination[key] = deepmerge(target[key], source[key], optionsArgument);
	    }
	  });
	  return destination;
	}
	function deepmerge(target, source, optionsArgument) {
	  const sourceIsArray = Array.isArray(source);
	  const targetIsArray = Array.isArray(target);
	  const options = optionsArgument || {
	    arrayMerge: defaultArrayMerge
	  };
	  const sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;
	  if (!sourceAndTargetTypesMatch) {
	    return cloneUnlessOtherwiseSpecified(source, optionsArgument);
	  } else if (sourceIsArray) {
	    const arrayMerge = options.arrayMerge || defaultArrayMerge;
	    return arrayMerge(target, source, optionsArgument);
	  } else {
	    return mergeObject(target, source, optionsArgument);
	  }
	}
	deepmerge.all = function deepmergeAll(array, optionsArgument) {
	  if (!Array.isArray(array)) {
	    throw new Error("first argument should be an array");
	  }
	  return array.reduce(function (prev, next) {
	    return deepmerge(prev, next, optionsArgument);
	  }, {});
	};

	/**
	 *  Collection of common functions
	 *  @class
	 */
	let notCommon$1 = /*#__PURE__*/function () {
	  function notCommon() {
	    _classCallCheck(this, notCommon);
	  }
	  return _createClass(notCommon, null, [{
	    key: "isError",
	    value:
	    /**
	     *  @static {function} isError  function to perform object test, if it's an error object or not
	     * @param   {object}    e   object to test
	     */
	    function isError(e) {
	      return e instanceof Error ||
	      // @ts-ignore
	      Object.hasOwn(e, "status") && e.status === "error";
	    }
	  }, {
	    key: "mute",
	    value: function mute() {
	      notCommon.ENV_TYPE = "production";
	    }
	  }, {
	    key: "pad",
	    value: function pad(n) {
	      return n < 10 ? "0" + n : n;
	    }
	    /**
	     *  Returns today Date object without hours, minutes, seconds
	     *  @return {number}  current date with 00:00:00 in ms of unix time
	     */
	  }, {
	    key: "getTodayDate",
	    value: function getTodayDate() {
	      let t = new Date();
	      return new Date(t.getFullYear(), t.getMonth(), t.getDate()).getTime();
	    }

	    /**
	     *  Returns true if object has field of name
	     *   @param   {object}    obj    some object
	     *  @param  {string}    name  field name
	     *  @return {boolean}          if object contains field with name
	     **/
	  }, {
	    key: "objHas",
	    value: function objHas(obj, name) {
	      // @ts-ignore
	      return Object.hasOwn(obj, name);
	    }

	    /**
	     * Copies object to secure it from changes
	     * @param {object}   obj     original object
	     * @return {object}          copy of object
	     **/
	  }, {
	    key: "copyObj",
	    value: function copyObj(obj) {
	      return JSON.parse(JSON.stringify(obj));
	    }

	    /**
	     * Copies object to secure it from changes
	     * @param {object}   obj     original object
	     * @return {object}          copy of object
	     **/
	  }, {
	    key: "partCopyObj",
	    value: function partCopyObj(obj, list) {
	      let partObj = Object.keys(obj).reduce(function (prev, curr) {
	        if (list.includes(curr)) {
	          prev[curr] = obj[curr];
	        }
	        return prev;
	      }, {});
	      return JSON.parse(JSON.stringify(partObj));
	    }
	  }, {
	    key: "compareTwoArrays",
	    value: function compareTwoArrays(a, b) {
	      return a.length === b.length && a.every(function (element, index) {
	        return element === b[index];
	      });
	    }

	    /**
	     * Test argument type to be 'function'
	     * @param {any}  func    possible function
	     * @return {boolean}     if this is a function
	     **/
	  }, {
	    key: "isFunc",
	    value: function isFunc(func) {
	      return typeof func === "function";
	    }

	    /**
	     * Returns true if argument is Async function
	     * @param {function} func  to test
	     * @return {boolean}       if this function is constructed as AsyncFunction
	     **/
	  }, {
	    key: "isAsync",
	    value: function isAsync(func) {
	      return func.constructor.name === "AsyncFunction";
	    }

	    /**
	     *  Executes method of object in appropriate way inside Promise
	     * @param {object}   obj     original object
	     * @param {string}   name    method name to execute
	     * @param {Array}     params  array of params
	     * @return {Promise}          results of method execution
	     **/
	  }, {
	    key: "executeObjectFunction",
	    value: async function executeObjectFunction(obj, name, params) {
	      if (obj) {
	        // @ts-ignore
	        const proc = notPath.get(":" + name, obj);
	        if (notCommon.isFunc(proc)) {
	          if (notCommon.isAsync(proc)) {
	            return await proc(...params);
	          } else {
	            return proc(...params);
	          }
	        }
	      }
	    }

	    /**
	     *  Executes method of object in apropriate way inside Promise
	     * @param {Object}   from     original object
	     * @param {Object}   to    method name to execute
	     * @param {Array}     list  array of params
	     * @return {undefined}          results of method execution
	     **/
	  }, {
	    key: "mapBind",
	    value: function mapBind(from, to, list) {
	      list.forEach(function (item) {
	        if (typeof from[item] === "function") {
	          to[item] = from[item].bind(from);
	        }
	      });
	    }
	  }, {
	    key: "isClass",
	    value: function isClass(fn) {
	      return /^\s*class/.test(fn.toString());
	    }
	  }, {
	    key: "detectType",
	    value: function detectType(testie) {
	      if (typeof testie !== "function") {
	        return typeof testie;
	      } else {
	        if (notCommon.isClass(testie)) {
	          return "class";
	        } else {
	          return "function";
	        }
	      }
	    }

	    //Проверка является ли переменная массивом
	  }, {
	    key: "isArray",
	    value: function isArray(data) {
	      return typeof data == "object" && data instanceof Array;
	    }
	  }, {
	    key: "localIsoDate",
	    value: function localIsoDate(date) {
	      date = date || new Date();
	      let localIsoString = date.getFullYear() + "-" + notCommon.pad(date.getMonth() + 1) + "-" + notCommon.pad(date.getDate()) + "T" + notCommon.pad(date.getHours()) + ":" + notCommon.pad(date.getMinutes()) + ":" + notCommon.pad(date.getSeconds());
	      return localIsoString;
	    }
	  }, {
	    key: "getToday",
	    value: function getToday() {
	      let today = new Date();
	      let date = today.getFullYear() + "-" + notCommon.pad(today.getMonth() + 1) + "-" + notCommon.pad(today.getDate());
	      return date;
	    }
	  }, {
	    key: "backlogAdd",
	    value: function backlogAdd(msg, type = "log") {
	      if (notCommon.get("backlog") === true) {
	        notCommon.backlog.push({
	          msg,
	          type
	        });
	      }
	    }
	  }, {
	    key: "dumpBacklog",
	    value: function dumpBacklog() {
	      while (notCommon.backlog.length) {
	        let row = notCommon.backlog.shift();
	        window[notCommon.LOG][row.type](...row.msg);
	      }
	    }
	  }, {
	    key: "logMsg",
	    value: function logMsg() {
	      let now = notCommon.localIsoDate();
	      window[notCommon.LOG].log(`[${now}]: `, ...arguments);
	      notCommon.backlogAdd([`[${now}]: `, ...arguments], "log");
	    }
	  }, {
	    key: "log",
	    value: function log() {
	      notCommon.logMsg(...arguments);
	    }
	  }, {
	    key: "createLogger",
	    value: function createLogger(prefix) {
	      return {
	        log: notCommon.genLogMsg(prefix),
	        error: notCommon.genLogError(prefix),
	        debug: notCommon.genLogDebug(prefix),
	        report: notCommon.report
	      };
	    }

	    //Генерация метода вывода сообщений в консоль с указанием префикса.
	  }, {
	    key: "genLogMsg",
	    value: function genLogMsg(prefix) {
	      return function () {
	        //not arrow bc of arguments special var is not available in arrow functions
	        let now = notCommon.localIsoDate();
	        window[notCommon.LOG].log(`[${now}]: ${prefix}::`, ...arguments);
	        notCommon.backlogAdd([`[${now}]: ${prefix}::`, ...arguments], "log");
	      };
	    }

	    /**
	     * Определяет является ли окружение окружением разработки
	     * @returns  {boolean} true если это запущено в окружении разработки
	     **/
	  }, {
	    key: "isDev",
	    value: function isDev() {
	      return notCommon.ENV_TYPE === notCommon.DEV_ENV;
	    }
	  }, {
	    key: "debug",
	    value: function debug() {
	      if (notCommon.isDev()) {
	        return notCommon.logMsg(...arguments);
	      } else {
	        return notCommon.NOOP;
	      }
	    }
	  }, {
	    key: "genLogDebug",
	    value: function genLogDebug(prefix) {
	      if (notCommon.isDev()) {
	        return notCommon.genLogMsg(prefix);
	      } else {
	        return notCommon.NOOP;
	      }
	    }
	  }, {
	    key: "error",
	    value: function error() {
	      notCommon.logError(...arguments);
	    }

	    //Функция вывода сообщения об ошибке
	  }, {
	    key: "logError",
	    value: function logError() {
	      let now = notCommon.localIsoDate();
	      window[notCommon.LOG].error(`[${now}]: `, ...arguments);
	      notCommon.backlogAdd([`[${now}]: `, ...arguments], "error");
	    }
	  }, {
	    key: "genLogError",
	    value: function genLogError(prefix) {
	      return function () {
	        //do not change to arrow function, bc of arguments
	        let now = notCommon.localIsoDate();
	        window[notCommon.LOG].error(`[${now}]: ${prefix}::`, ...arguments);
	        notCommon.backlogAdd([`[${now}]: ${prefix}::`, ...arguments], "error");
	      };
	    }
	  }, {
	    key: "report",
	    value: function report(e) {
	      if (notCommon.getApp()) {
	        let reporter = notCommon.getApp().getService("nsErrorReporter");
	        if (reporter) {
	          reporter.report(e).catch(notCommon.error);
	        }
	      } else {
	        if (!notCommon.get("production")) {
	          notCommon.error(...arguments);
	        }
	      }
	    }
	  }, {
	    key: "trace",
	    value: function trace() {
	      if (!notCommon.get("production")) {
	        notCommon.trace(...arguments);
	      }
	    }
	  }, {
	    key: "trimBackslash",
	    value: function trimBackslash(str) {
	      if (str.indexOf("/") === 0) {
	        str = str.substring(1);
	      }
	      if (str[str.length - 1] === "/") {
	        str = str.substring(0, str.length - 1);
	      }
	      return str;
	    }

	    /**
	     *  Builds URL with structure like prefix/module/model/id/action
	     * If some part absent or set to false it will be excluded from result
	     *  @param {object} urlParts
	     *  @param {string} [urlParts.prefix='']
	     *  @param {string} [urlParts.module='']
	     *  @param {string} [urlParts.model='']
	     *  @param {string} [urlParts.id='']
	     *  @param {string} [urlParts.action='']
	     *  @return {string}  url path
	     */
	  }, {
	    key: "buildURL",
	    value: function buildURL({
	      prefix,
	      module,
	      model,
	      id,
	      action
	    } = {
	      prefix: "",
	      module: "",
	      model: "",
	      id: "",
	      action: ""
	    }) {
	      let url = ["/"];
	      if (prefix) {
	        url.push(encodeURIComponent(notCommon.trimBackslash(prefix)));
	      }
	      if (module) {
	        url.push(encodeURIComponent(notCommon.trimBackslash(module)));
	      }
	      if (model) {
	        url.push(encodeURIComponent(notCommon.trimBackslash(model)));
	      }
	      if (id) {
	        url.push(encodeURIComponent(notCommon.trimBackslash(id)));
	      }
	      if (action) {
	        url.push(encodeURIComponent(notCommon.trimBackslash(action)));
	      }
	      url = url.filter(function (el) {
	        return el !== "";
	      });
	      return url.join("/").replace(/\/\//g, "/");
	    }
	  }, {
	    key: "capitalizeFirstLetter",
	    value: function capitalizeFirstLetter(name) {
	      return name.charAt(0).toUpperCase() + name.slice(1);
	    }
	  }, {
	    key: "lowerFirstLetter",
	    value: function lowerFirstLetter(string) {
	      return string.charAt(0).toLowerCase() + string.slice(1);
	    }
	  }, {
	    key: "strLengthCap",
	    value: function strLengthCap(str, MAX_TITLE_LENGTH = 50, POST_FIX = "...") {
	      if (typeof str === "string" && str.length > MAX_TITLE_LENGTH) {
	        return str.substr(0, MAX_TITLE_LENGTH) + POST_FIX;
	      } else {
	        return str;
	      }
	    }
	  }, {
	    key: "escapeHtml",
	    value: function escapeHtml(unsafe) {
	      return unsafe.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#039;");
	    }
	  }, {
	    key: "startApp",
	    value: function startApp(starter) {
	      document.addEventListener("DOMContentLoaded", starter);
	    }
	  }, {
	    key: "getApp",
	    value: function getApp() {
	      return notCommon.get("app");
	    }
	  }, {
	    key: "extendAppConfig",
	    value: function extendAppConfig(conf, conf2) {
	      return notCommon.deepMerge(conf, conf2);
	    }
	  }, {
	    key: "absorbModule",
	    value: function absorbModule() {
	      let defaultConf,
	        //app options
	        mod,
	        //module options
	        targets = {}; //various collections
	      if (arguments.length == 1) {
	        targets = {
	          ...arguments[0]
	        };
	        if (Object.hasOwnProperty.call(arguments[0], "defaultConf")) {
	          defaultConf = arguments[0].defaultConf;
	          delete targets.defaultConf;
	        }
	        if (Object.hasOwnProperty.call(arguments[0], "mod")) {
	          mod = arguments[0].mod;
	          delete targets.mod;
	        }
	      } else {
	        notCommon.log("WARNING: absorbModule format obsoleted, use object {defaultConf, mod, services, uis, wsc, etc}");
	        defaultConf = arguments[0];
	        mod = arguments[1];
	        if (arguments.length > 2) {
	          targets.services = arguments[2];
	        }
	        if (arguments.length > 3) {
	          targets.uis = arguments[3];
	        }
	        if (arguments.length > 4) {
	          targets.wcs = arguments[4];
	        }
	      }
	      for (let prop in mod) {
	        //add manifest to other
	        if (prop === "manifest") {
	          defaultConf = notCommon.extendAppConfig(defaultConf, mod.manifest);
	          continue;
	        }
	        if (typeof notCommon.get(`absorb.${prop}`) === "function") {
	          // @ts-ignore
	          if (!Object.hasOwn(targets, prop)) {
	            targets[prop] = {};
	            notCommon.log(`WARNING: no accamulator object provided for '${prop}' collection`);
	          }
	          notCommon.get(`absorb.${prop}`)(targets[prop], mod[prop]);
	        } else if (prop.indexOf("nc") === 0) {
	          // @ts-ignore
	          if (!Object.hasOwn(defaultConf, "controllers")) {
	            defaultConf.controllers = {};
	          }
	          defaultConf.controllers[prop] = mod[prop];
	        } else {
	          //in case of some other stuff presented, isolating it in special var
	          // @ts-ignore
	          if (!Object.hasOwn(window, "notEnv")) {
	            // @ts-ignore
	            window.notEnv = {};
	          }
	          // @ts-ignore
	          window.notEnv[prop] = mod[prop];
	        }
	      }
	      return defaultConf;
	    }
	  }, {
	    key: "defineIfNotExists",
	    value: function defineIfNotExists(obj, key, defaultValue) {
	      // @ts-ignore
	      if (!Object.hasOwn(obj, key)) {
	        obj[key] = defaultValue;
	      }
	    }
	  }, {
	    key: "register",
	    value: function register(key, val) {
	      notCommon.registry[key] = val;
	    }
	  }, {
	    key: "get",
	    value: function get(key) {
	      // @ts-ignore
	      return Object.hasOwn(notCommon.registry, key) ? notCommon.registry[key] : null;
	    }

	    /**
	     * Moves item inside array from old_index to new_index
	     * @static
	     * @param {Array<any>} array
	     * @param {number} old_index
	     * @param {number} new_index
	     * @memberof notCommon
	     */
	  }, {
	    key: "moveItem",
	    value: function moveItem(array, old_index, new_index) {
	      const inRange = function (num) {
	        return num < array.length && num > -1;
	      };
	      if (inRange(new_index) && inRange(old_index)) {
	        array.splice(new_index, 0, array.splice(old_index, 1)[0]);
	      }
	    }
	  }, {
	    key: "stripProxy",
	    value: function stripProxy(obj) {
	      if (typeof obj !== "undefined" && obj !== null) {
	        if (obj.isProxy) {
	          if (Array.isArray(obj)) {
	            obj = Array.from(obj);
	          } else {
	            obj = Object.assign({}, obj);
	          }
	          for (let t in obj) {
	            // @ts-ignore
	            if (Object.hasOwn(obj, t)) {
	              obj[t] = notCommon.stripProxy(obj[t]);
	            }
	          }
	        }
	      }
	      return obj;
	    }
	  }, {
	    key: "pipe",
	    value: function pipe(data /* feed data */, funcs /* functions array */) {
	      let result;
	      for (let func of funcs) {
	        result = func(result || data);
	      }
	      return result;
	    }

	    /**
	     *
	     *
	     * @static
	     * @param {string} type
	     * @return {object}
	     * @memberof notCommon
	     */
	  }, {
	    key: "getAPI",
	    value: function getAPI(type) {
	      return notCommon.getManager()?.getAPI(type) ?? null;
	    }
	  }, {
	    key: "setManager",
	    value: function setManager(v) {
	      notCommon.MANAGER = v;
	    }

	    /**
	     *
	     *
	     * @static
	     * @return {object}
	     * @memberof notCommon
	     */
	  }, {
	    key: "getManager",
	    value: function getManager() {
	      return notCommon.MANAGER;
	    }
	  }, {
	    key: "getJSON",
	    value: function getJSON(url) {
	      return fetch(url).then(function (response) {
	        return response.json();
	      });
	    }
	  }, {
	    key: "wait",
	    value: function wait(sec) {
	      return new Promise(function (res) {
	        setTimeout(res, sec * 1000);
	      });
	    }
	  }, {
	    key: "registerWidgetEvents",
	    value: function registerWidgetEvents(events) {
	      if (notCommon.getApp()) {
	        Object.keys(events).forEach(function (eventName) {
	          notCommon.getApp().on(eventName, events[eventName]);
	        });
	      }
	    }
	  }, {
	    key: "navigate",
	    value: function navigate(url) {
	      notCommon.getApp() && notCommon.getApp().getWorking("router").navigate(url);
	    }
	  }, {
	    key: "select",
	    value: function select(variantsSet, value, def) {
	      if (variantsSet && typeof variantsSet == "object" && notCommon.objHas(variantsSet, value) && typeof variantsSet[value] !== "undefined" && variantsSet[value] !== null) {
	        return variantsSet[value];
	      } else {
	        return def;
	      }
	    }
	  }]);
	}();
	_notCommon = notCommon$1;
	/**
	 *  @static {Object} [MANAGER=null]  application manager, in some cases used to control initialization routine
	 */
	_defineProperty(notCommon$1, "MANAGER", null);
	/**
	 *  @static {string} [LOG="console"]  logger, window[LOG]
	 */
	_defineProperty(notCommon$1, "LOG", "console");
	/**
	 *  @static {function} deepMerge  function to perform deep merges of objects
	 */
	_defineProperty(notCommon$1, "deepMerge", deepmerge);
	_defineProperty(notCommon$1, "TZ_OFFSET", new Date().getTimezoneOffset() / 60 * -1);
	_defineProperty(notCommon$1, "DEV_ENV", "production");
	// @ts-ignore
	_defineProperty(notCommon$1, "ENV_TYPE", window.NOT_ENV_TYPE ?? _notCommon.DEV_ENV);
	_defineProperty(notCommon$1, "NOOP", function () {});
	_defineProperty(notCommon$1, "backlog", []);
	_defineProperty(notCommon$1, "registry", {});
	function absorbServices(target, src) {
	  if (target) {
	    for (let serv in src) {
	      // @ts-ignore
	      if (Object.hasOwn(target, serv)) {
	        notCommon$1.logError(`services property duplication ${serv}`);
	      }
	      target[serv] = src[serv];
	    }
	  }
	}
	function extendWSClient(wcs, wscName, wscOptions) {
	  // @ts-ignore
	  if (!Object.hasOwn(wcs, wscName)) {
	    wcs[wscName] = {
	      connection: {},
	      router: {
	        routes: {}
	      },
	      messenger: {}
	    };
	  }
	  let target = wcs[wscName];
	  // @ts-ignore
	  if (Object.hasOwn(wscOptions, "router")) {
	    // @ts-ignore
	    if (Object.hasOwn(wscOptions.router, "routes")) {
	      for (let routeType in wscOptions.router.routes) {
	        // @ts-ignore
	        if (!Object.hasOwn(target.router.routes, routeType)) {
	          target.router.routes[routeType] = {};
	        }
	        Object.assign(target.router.routes[routeType], {
	          ...wscOptions.router.routes[routeType]
	        });
	      }
	    }
	  }
	  // @ts-ignore
	  if (Object.hasOwn(wscOptions, "messenger")) {
	    Object.assign(target.messenger, {
	      ...wscOptions.messenger
	    });
	  }
	  // @ts-ignore
	  if (Object.hasOwn(wscOptions, "connection")) {
	    Object.assign(target.connection, {
	      ...wscOptions.connection
	    });
	  }
	  for (let t of ["name", "getToken", "logger", "identity", "credentials"]) {
	    // @ts-ignore
	    if (Object.hasOwn(wscOptions, t)) {
	      target[t] = wscOptions[t];
	    }
	  }
	}
	function absorbWSC(target, src) {
	  if (target) {
	    for (let wsClientName in src) {
	      extendWSClient(target, wsClientName, src[wsClientName]);
	    }
	  }
	}
	function absorbUIs(target, src) {
	  if (target) {
	    for (let ui in src) {
	      // @ts-ignore
	      if (Object.hasOwn(target, ui)) {
	        notCommon$1.logError(`uis property duplication ${ui}`);
	      }
	      target[ui] = src[ui];
	    }
	  }
	}
	function absorbFields(target, src) {
	  if (target) {
	    for (let ui in src) {
	      // @ts-ignore
	      if (Object.hasOwn(target, ui)) {
	        notCommon$1.logError(`fields property duplication ${ui}`);
	      }
	      target[ui] = src[ui];
	    }
	  }
	}
	notCommon$1.register("absorb.wsc", absorbWSC);
	notCommon$1.register("absorb.services", absorbServices);
	notCommon$1.register("absorb.uis", absorbUIs);
	notCommon$1.register("absorb.uis", absorbFields);

	/**
	 * strings localization and formating model
	 * @class
	 */
	let notLocale = /*#__PURE__*/function (_EventEmitter) {
	  function notLocale() {
	    var _this;
	    _classCallCheck(this, notLocale);
	    _this = _callSuper(this, notLocale);
	    _this.dict = {}; //dictionary of phrases
	    _this.helpers = {}; //additional helper functions and constants
	    let dict = _this.restoreFromStorage();
	    if (dict) {
	      _this.set(dict);
	    }
	    return _this;
	  }

	  /**
	   * String format should comply notPath standart.
	   * {path_to_access} - is
	   * : - is used to access to params
	   * :: - is used to access to helpers
	   * Welcome, {:where}! - will replace {:where} with content of params.where
	   * Welcome, {::where}! - will replace {:where} with content of this.helpers.where
	   * () - after path is to invoke function of target object
	   * Welcome, {::where()}! - will try to exec this.helpers.where(params, undefined)
	   * @param    {string}  str         localized string template with mark to include data
	   * @param    {object}  params      params to use in string
	   * @returns  {string}              localized version of string with
	   */
	  _inherits(notLocale, _EventEmitter);
	  return _createClass(notLocale, [{
	    key: "format",
	    value: function format(str, params) {
	      return notPath.parseSubs(str, params, this.helpers);
	    }

	    /**
	     * Return localized version of string with injected data from provided object
	     * may also use Locale.helpers as source of data
	     * @param {string}   phrase    name of string to localize
	     * @param {object}   params    object with data to inject in phrase template
	     * @return {string}            localized string with injected data
	     */
	  }, {
	    key: "say",
	    value: function say(phrase, params = false) {
	      try {
	        if (notCommon$1.objHas(this.dict, phrase)) {
	          let tmpl = this.dict[phrase],
	            result = "";
	          if (params) {
	            result = this.format(tmpl, params);
	          } else {
	            result = tmpl;
	          }
	          return result;
	        } else {
	          throw new Error(`Unknown locale phrase: ${phrase}`);
	        }
	      } catch (e) {
	        notCommon$1.debug(e);
	        return phrase;
	      }
	    }

	    /**
	     * Setting new dictionary. triggers event 'change'
	     * @param {object}     dict      vocabulary of phrases and templates
	     **/
	  }, {
	    key: "set",
	    value: function set(dict) {
	      LOCALE.set(dict);
	      this.saveToStorage(dict);
	      this.dict = Object.assign({}, {
	        ...dict
	      });
	      this.emit("change");
	    }
	  }, {
	    key: "saveToStorage",
	    value: function saveToStorage(dict) {
	      if (window.localStorage) {
	        try {
	          return window.localStorage.setItem("dictionary", JSON.stringify(dict));
	        } catch (e) {
	          notCommon$1.debug(e);
	          return false;
	        }
	      }
	      return false;
	    }
	  }, {
	    key: "restoreFromStorage",
	    value: function restoreFromStorage() {
	      if (window.localStorage) {
	        try {
	          let str = window.localStorage.getItem("dictionary");
	          if (str) {
	            let dict = JSON.parse(str);
	            return dict;
	          } else {
	            return false;
	          }
	        } catch (e) {
	          notCommon$1.debug(e);
	          return false;
	        }
	      }
	      return false;
	    }

	    /**
	     * Returns writable store of phrases
	     * @return {object}  writable store
	     */
	  }, {
	    key: "vocabulary",
	    value: function vocabulary() {
	      return LOCALE;
	    }
	  }]);
	}(EventEmitter);
	var notLocale$1 = new notLocale();

	const say = notLocale$1.say.bind(notLocale$1);

	var root_1$w = template(`<span role="button" tabindex="0"> </span>`);

	function Ui_tag($$anchor, $$props) {
		push($$props, true);

		const $$stores = setup_stores();
		const $LOCALE = () => store_get(LOCALE, "$LOCALE", $$stores);
		let sided = state(false);

		/**
		 * @typedef {Object} Props
		 * @property {string} [id] - if we want to address this tag
		 * @property {string} [title]
		 * @property {string} [color]
		 * @property {string} [size]
		 * @property {string} [padding]
		 * @property {boolean} [bold]
		 * @property {boolean} [right]
		 * @property {boolean} [left]
		 * @property {boolean} [top]
		 * @property {boolean} [bottom]
		 * @property {string} [classes]
		 * @property {any} [events]
		 * @property {any} [register] - register event handlers
		 * @property {any} [onUpdate]
		 * @property {any} [action]
		 */
		/** @type {Props} */
		let id = prop($$props, "id", 3, "tagId"),
			title = prop($$props, "title", 15, "tag"),
			color = prop($$props, "color", 3, "info"),
			size = prop($$props, "size", 3, "normal"),
			padding = prop($$props, "padding", 3, "normal"),
			bold = prop($$props, "bold", 3, false),
			right = prop($$props, "right", 3, false),
			left = prop($$props, "left", 3, false),
			top = prop($$props, "top", 3, false),
			bottom = prop($$props, "bottom", 3, false),
			classes = prop($$props, "classes", 3, ""),
			events = prop($$props, "events", 31, () => proxy({})),
			register = prop($$props, "register", 19, () => notCommon$1.registerWidgetEvents.bind(notCommon$1)),
			onUpdate = prop($$props, "onUpdate", 3, (data) => {
				if (Object.hasOwn(data, "title")) {
					title(data.title);
				}
			}),
			action = prop($$props, "action", 3, () => {
				return true;
			});

		function getStandartUpdateEventName() {
			return `tag-${id()}:update`;
		}

		onMount(() => {
			if (!Object.hasOwn(events(), getStandartUpdateEventName())) {
				events(events()[getStandartUpdateEventName()] = onUpdate(), true);
			}

			register()(events());
			set(sided, proxy(right() || left() || top() || bottom()));
		});

		var fragment = comment();
		var node = first_child(fragment);

		{
			var consequent = ($$anchor) => {
				var span = root_1$w();

				span.__keydown = function (...$$args) {
					(action() ? action() : undefined)?.apply(this, $$args);
				};

				span.__click = function (...$$args) {
					(action() ? action() : undefined)?.apply(this, $$args);
				};

				var text = child(span, true);

				reset(span);

				template_effect(() => {
					set_attribute(span, "id", `tag-${id() ?? ""}`);

					set_class(span, `
  tag
  ${(bold() ? 'has-text-weight-bold' : '') ?? ""}
  ${(padding() !== 'normal' ? `is-padded-${padding()}` : '') ?? ""}
  is-${size() ?? ""}
  is-${color() ?? ""}
  ${(get$2(sided) ? 'is-sided' : '') ?? ""}
  ${(right() ? 'is-sided-right' : '') ?? ""}
  ${(left() ? 'is-sided-left' : '') ?? ""}
  ${(top() ? 'is-sided-top' : '') ?? ""}
  ${(bottom() ? 'is-sided-bottom' : '') ?? ""}
  ${classes() ?? ""}`);

					set_text(text, $LOCALE()[title()]);
				});

				append($$anchor, span);
			};

			if_block(node, ($$render) => {
				if (title()) $$render(consequent);
			});
		}

		append($$anchor, fragment);
		pop();
	}

	delegate(["keydown", "click"]);

	function Ui_boolean($$anchor, $$props) {
		/**
		 * @typedef {Object} Props
		 * @property {string} [LC_TRUE = "not-node:booleans_true"]
		 * @property {string} [LC_FALSE = "not-node:booleans_false"]
		 * @property {any} value
		 * @property {boolean} [inverted = false]
		 */
		/** @type {Props} */
		let LC_TRUE = prop($$props, "LC_TRUE", 3, "not-node:booleans_true"),
			LC_FALSE = prop($$props, "LC_FALSE", 3, "not-node:booleans_false"),
			inverted = prop($$props, "inverted", 3, false);

		const FALSE_VALUE = {
			title: LC_FALSE(),
			color: inverted() ? "success" : "danger"
		};

		const TRUE_VALUE = {
			title: LC_TRUE(),
			color: inverted() ? "danger" : "success"
		};

		//if inverted === true, inverts value
		let tagValue = derived(() => $$props.value ? TRUE_VALUE : FALSE_VALUE);

		Ui_tag($$anchor, spread_props(() => get$2(tagValue)));
	}

	var root$M = template(`<span class="label"> <!></span>`);

	function Ui_boolean_labeled($$anchor, $$props) {
		push($$props, true);

		const $$stores = setup_stores();
		const $LOCALE = () => store_get(LOCALE, "$LOCALE", $$stores);
		/**
		 * @typedef {Object} Props
		 * @property {any} value
		 * @property {any} label
		 * @property {boolean} [inverted]
		 */
		/** @type {Props} */
		let inverted = prop($$props, "inverted", 3, false);
		var span = root$M();
		var text = child(span);
		var node = sibling(text);

		Ui_boolean(node, {
			get value() {
				return $$props.value;
			},
			get inverted() {
				return inverted();
			}
		});

		reset(span);
		template_effect(() => set_text(text, `${$LOCALE()[$$props.label] ?? ""}: `));
		append($$anchor, span);
		pop();
	}

	function Ui_booleans($$anchor, $$props) {
		push($$props, true);

		/**
		 * @typedef {Object} Props
		 * @property {any} [values]
		 * @property {boolean} [inverted]
		 * @property {any} [componentConstructor]
		 */
		/** @type {Props} */
		let values = prop($$props, "values", 19, () => []),
			inverted = prop($$props, "inverted", 3, false),
			componentConstructor = prop($$props, "componentConstructor", 3, Ui_boolean);

		let _values = state(proxy([]));

		onMount(() => {
			if (typeof values() === "boolean") {
				set(_values, proxy([{ value: values() }]));
			} else if (Array.isArray(values())) {
				if (values().every((itm) => typeof itm === "boolean")) {
					set(_values, proxy(values().map((itm) => {
						return { value: itm };
					})));
				} else {
					set(_values, proxy([...values()]));
				}
			}
		});

		var fragment = comment();
		var node = first_child(fragment);

		{
			var consequent = ($$anchor) => {
				var fragment_1 = comment();
				var node_1 = first_child(fragment_1);

				each(node_1, 17, () => get$2(_values), index$d, ($$anchor, item) => {
					var fragment_2 = comment();
					const SvelteComponent = derived(componentConstructor);
					var node_2 = first_child(fragment_2);
					var inverted_1 = derived(() => inverted() || get$2(item).inverted);

					component(node_2, () => get$2(SvelteComponent), ($$anchor, $$component) => {
						$$component($$anchor, spread_props(() => get$2(item), {
							get inverted() {
								return get$2(inverted_1);
							}
						}));
					});

					append($$anchor, fragment_2);
				});

				append($$anchor, fragment_1);
			};

			if_block(node, ($$render) => {
				if (get$2(_values).length) $$render(consequent);
			});
		}

		append($$anchor, fragment);
		pop();
	}

	function toggleView(_, hidden) {
		hidden(!hidden());
	}

	async function copyContent(
		__1,
		value,
		tooltip,
		contentCopied,
		tooltipTarget,
		tooltipText,
		tooltipTTL
	) {
		try {
			await navigator.clipboard.writeText(value());

			if (tooltip()) {
				set(contentCopied, true);
				get$2(tooltipTarget).dataset.tooltip = tooltipText();

				setTimeout(
					() => {
						set(contentCopied, false);
						get$2(tooltipTarget).removeAttribute("data-tooltip");
					},
					tooltipTTL()
				);
			}
		} catch(err) {
			console.error("Failed to copy: ", err);
		}
	}

	var root_1$v = template(`<span role="button" tabindex="0"><i></i></span>`);
	var root_2$l = template(`<span class="icon is-small is-right is-clickable is-vertical-middle" role="button" tabindex="0"><i></i></span>`);
	var root$L = template(`<span> </span> <!> <!>`, 1);

	function Ui_censored($$anchor, $$props) {
		/**
		 * @typedef {Object} Props
		 * @property {boolean} [hidden]
		 * @property {boolean} [showable]
		 * @property {boolean} [copiable]
		 * @property {string} [copyIcon]
		 * @property {string} [showIcon]
		 * @property {string} [hideIcon]
		 * @property {number} [maxLength]
		 * @property {string} [shadowClass]
		 * @property {boolean} [tooltip]
		 * @property {number} [tooltipTTL]
		 * @property {string} [tooltipText]
		 * @property {string} [tooltipClass]
		 * @property {string} [value]
		 */
		/** @type {Props} */
		let hidden = prop($$props, "hidden", 15, true),
			showable = prop($$props, "showable", 3, true),
			copiable = prop($$props, "copiable", 3, true),
			copyIcon = prop($$props, "copyIcon", 3, "copy"),
			showIcon = prop($$props, "showIcon", 3, "eye"),
			hideIcon = prop($$props, "hideIcon", 3, "eye-slash"),
			maxLength = prop($$props, "maxLength", 3, 20),
			shadowClass = prop($$props, "shadowClass", 3, "has-background-primary-90"),
			tooltip = prop($$props, "tooltip", 3, true),
			tooltipTTL = prop($$props, "tooltipTTL", 3, 2000),
			tooltipText = prop($$props, "tooltipText", 3, "Скопировано в буфер"),
			tooltipClass = prop($$props, "tooltipClass", 3, "has-tooltip-info"),
			value = prop($$props, "value", 3, "");

		let contentCopied = state(false),
			tooltipActive = derived(() => tooltip() && get$2(contentCopied)),
			tooltipTarget = state(undefined);

		var fragment = root$L();
		var span = first_child(fragment);
		var text = child(span, true);

		reset(span);

		var node = sibling(span, 2);

		{
			var consequent = ($$anchor) => {
				var span_1 = root_1$v();

				span_1.__click = [
					copyContent,
					value,
					tooltip,
					contentCopied,
					tooltipTarget,
					tooltipText,
					tooltipTTL
				];

				span_1.__keydown = [
					copyContent,
					value,
					tooltip,
					contentCopied,
					tooltipTarget,
					tooltipText,
					tooltipTTL
				];

				var i = child(span_1);

				reset(span_1);
				bind_this(span_1, ($$value) => set(tooltipTarget, $$value), () => get$2(tooltipTarget));

				template_effect(() => {
					set_class(span_1, "icon is-small is-right is-clickable " + (get$2(tooltipActive) ? ` ${tooltipClass()} ` : "") + " is-vertical-middle");
					set_class(i, `fas fa-${copyIcon() ?? ""}`);
				});

				append($$anchor, span_1);
			};

			if_block(node, ($$render) => {
				if (copiable()) $$render(consequent);
			});
		}

		var node_1 = sibling(node, 2);

		{
			var consequent_1 = ($$anchor) => {
				var span_2 = root_2$l();

				span_2.__click = [toggleView, hidden];
				span_2.__keydown = [toggleView, hidden];

				var i_1 = child(span_2);

				reset(span_2);
				template_effect(() => set_class(i_1, `fas fa-${(hidden() ? showIcon() : hideIcon()) ?? ""}`));
				append($$anchor, span_2);
			};

			if_block(node_1, ($$render) => {
				if (showable()) $$render(consequent_1);
			});
		}

		template_effect(() => {
			set_class(span, (hidden() ? "is-censored " + shadowClass() : "") + " is-vertical-middle ");
			set_attribute(span, "style", `display:inline-block; width: ${maxLength()}rem; height: var(--bulma-size-medium); overflow-x:hidden;`);
			set_text(text, hidden() ? "" : value());
		});

		append($$anchor, fragment);
	}

	delegate(["click", "keydown"]);

	var root$K = template(`<span> </span>`);

	function Ui_indicator($$anchor, $$props) {
		push($$props, true);

		let sided = state(false);

		/**
		 * @typedef {Object} Props
		 * @property {string} [id] - if we want to address this indicator
		 * @property {string} [state]
		 * @property {string} [size]
		 * @property {any} [labels]
		 * @property {string} [classes]
		 * @property {string} [padding]
		 * @property {boolean} [bold]
		 * @property {boolean} [right]
		 * @property {boolean} [left]
		 * @property {boolean} [top]
		 * @property {boolean} [bottom]
		 * @property {any} [events]
		 * @property {any} [register] - register event handlers
		 * @property {any} [onUpdate]
		 */
		/** @type {Props} */
		let id = prop($$props, "id", 3, "tagId"),
			currentState = prop($$props, "state", 15, "light"),
			size = prop($$props, "size", 3, "normal"),
			labels = prop($$props, "labels", 19, () => ({
				black: "black",
				dark: "dark",
				light: "light",
				white: "white",
				primary: "primary",
				link: "link",
				info: "info",
				success: "success",
				warning: "warning",
				danger: "danger"
			})),
			classes = prop($$props, "classes", 3, "mx-1"),
			padding = prop($$props, "padding", 3, "normal"),
			bold = prop($$props, "bold", 3, false),
			right = prop($$props, "right", 3, false),
			left = prop($$props, "left", 3, false),
			top = prop($$props, "top", 3, false),
			bottom = prop($$props, "bottom", 3, false),
			events = prop($$props, "events", 31, () => proxy({})),
			register = prop($$props, "register", 19, () => notCommon$1.registerWidgetEvents.bind(notCommon$1)),
			onUpdate = prop($$props, "onUpdate", 3, (data) => {
				if (Object.hasOwn(data, "state")) {
					currentState(data.state);
				}
			});

		function getStandartUpdateEventName() {
			return `indicator-${id()}:update`;
		}

		onMount(() => {
			if (!Object.hasOwn(events(), getStandartUpdateEventName())) {
				events(events()[getStandartUpdateEventName()] = onUpdate(), true);
			}

			register()(events());
		});

		user_effect(() => {
			set(sided, proxy(right() || left() || top() || bottom()));
		});

		var span = root$K();
		var text = child(span, true);

		reset(span);

		template_effect(() => {
			set_class(span, `tag
is-${size() ?? ""}
${(bold() ? 'has-text-weight-bold' : '') ?? ""}
${(padding() !== 'normal' ? `is-padded-${padding()}` : '') ?? ""}
${(get$2(sided) ? 'is-sided' : '') ?? ""}
${(right() ? 'is-sided-right' : '') ?? ""}
${(left() ? 'is-sided-left' : '') ?? ""}
${(top() ? 'is-sided-top' : '') ?? ""}
${(bottom() ? 'is-sided-bottom' : '') ?? ""}
  is-${currentState() ?? ""} ${classes() ?? ""}
  `);

			set_text(text, labels()[currentState()]);
		});

		append($$anchor, span);
		pop();
	}

	var root_1$u = template(`<div><span class="title"> </span></div>`);

	function Ui_loader($$anchor, $$props) {
		push($$props, true);

		const $$stores = setup_stores();
		const $LOCALE = () => store_get(LOCALE, "$LOCALE", $$stores);

		//hidden - no loader
		//container - parent container of form
		/**
		 * @typedef {Object} Props
		 * @property {boolean} [loading] - state if form loading
		 * @property {string} [size] - page - whole page
		 * @property {string} [title]
		 */
		/** @type {Props} */
		let loading = prop($$props, "loading", 3, false),
			size = prop($$props, "size", 3, "container"),
			title = prop($$props, "title", 3, "Waiting...");

		var fragment = comment();
		var node = first_child(fragment);

		{
			var consequent = ($$anchor) => {
				var div = root_1$u();
				var span = child(div);
				var text = child(span, true);

				reset(span);
				reset(div);

				template_effect(() => {
					set_class(div, `${(size() === 'page' ? 'pageloader' : 'containerloader') ?? ""} ${(loading() ? 'is-active' : '') ?? ""}`);
					set_text(text, $LOCALE()[title()]);
				});

				append($$anchor, div);
			};

			if_block(node, ($$render) => {
				if (size() !== "hidden") $$render(consequent);
			});
		}

		append($$anchor, fragment);
		pop();
	}

	var root$J = template(`<option> </option>`);

	function Ui_select_option($$anchor, $$props) {
		push($$props, true);

		const $$stores = setup_stores();
		const $LOCALE = () => store_get(LOCALE, "$LOCALE", $$stores);
		var option = root$J();
		var option_value = {};
		var text = child(option, true);

		reset(option);

		template_effect(() => {
			if (option_value !== (option_value = $$props.value)) {
				option.value = null == (option.__value = $$props.value) ? "" : $$props.value;
			}

			set_selected(option, $$props.selected);
			set_text(text, $LOCALE()[$$props.title]);
		});

		append($$anchor, option);
		pop();
	}

	var root_3$h = template(`<span class="mr-2"> </span>`);
	var root_4$c = template(`<span class="mr-2"> </span>`);
	var root_5$a = template(`<div><select><!><!></select></div>`);

	function Ui_select($$anchor, $$props) {
		push($$props, true);

		const $$stores = setup_stores();
		const $LOCALE = () => store_get(LOCALE, "$LOCALE", $$stores);

		/**
		 * @typedef {Object} Props
		 * @property {string} [value]
		 * @property {any}      [variants]
		 * @property {string} [placeholder]
		 * @property {string} [emptyValueTitle]
		 * @property {string} [fieldname]
		 * @property {boolean} [required]
		 * @property {boolean} [readonly]
		 * @property {boolean} [multiple]
		 * @property {number} [size]
		 * @property {boolean} [valid]
		 */
		/** @type {Props} */
		let value = prop($$props, "value", 15, ""),
			variants = prop($$props, "variants", 19, () => []),
			placeholder = prop($$props, "placeholder", 3, ""),
			emptyValueTitle = prop($$props, "emptyValueTitle", 3, ""),
			fieldname = prop($$props, "fieldname", 3, "select"),
			required = prop($$props, "required", 3, true),
			readonly = prop($$props, "readonly", 3, false),
			multiple = prop($$props, "multiple", 3, false),
			size = prop($$props, "size", 3, 8),
			valid = prop($$props, "valid", 3, true),
			classes = prop($$props, "class", 3, ""),
			onchange = prop($$props, "onchange", 3, () => true),
			others = rest_props($$props, [
				"$$slots",
				"$$events",
				"$$legacy",
				"value",
				"variants",
				"placeholder",
				"emptyValueTitle",
				"fieldname",
				"required",
				"readonly",
				"multiple",
				"size",
				"valid",
				"class",
				"onchange"
			]);

		let selectedVariants = state(proxy([]));

		function filterSelectedVariants(variant) {
			if (Array.isArray(value()) && multiple()) {
				return value().indexOf(variant.id) > -1;
			} else if (value()) {
				return value() == variant.id;
			} else {
				return false;
			}
		}

		let lastChange;

		function onBlur(ev) {
			let data = {
				field: fieldname(),
				value: ev.currentTarget.value
			};

			if (lastChange === data.value) {
				return true;
			} else {
				if (Array.isArray(data.value) && notCommon$1.compareTwoArrays(lastChange, data.value)) {
					return true;
				}
			}

			if (multiple()) {
				value(Array.from(ev.target.selectedOptions).map((el) => el.value));

				if (value().indexOf(UICommon$1.CLEAR_MACRO) > -1) {
					value([]);
				}

				data.value = value();
			} else {
				if (data.value === UICommon$1.CLEAR_MACRO) {
					value("");
				} else {
					value(data.value);
				}
			}

			onchange()(data);
			return true;
		}

		function onInput(ev) {
			let data = {
				field: fieldname(),
				value: ev.currentTarget.value
			};

			if (multiple()) {
				value(Array.from(ev.target.selectedOptions).map((el) => el.value));

				if (value().indexOf(UICommon$1.CLEAR_MACRO) > -1) {
					value([]);
				}

				data.value = value();
			} else {
				if (data.value === UICommon$1.CLEAR_MACRO) {
					value("");
				} else {
					value(data.value);
				}
			}

			lastChange = data.value;
			onchange()(data);
			return true;
		}

		let multipleClass = derived(() => multiple() ? " is-multiple " : "");

		user_effect(() => {
			value();
			set(selectedVariants, proxy(Array.isArray(variants()) ? variants().filter(filterSelectedVariants) : []));
		});

		let invalid = derived(() => !valid());
		var fragment = comment();
		var node = first_child(fragment);

		{
			var consequent_1 = ($$anchor) => {
				var fragment_1 = comment();
				var node_1 = first_child(fragment_1);

				{
					var consequent = ($$anchor) => {
						var fragment_2 = comment();
						var node_2 = first_child(fragment_2);

						each(node_2, 17, () => get$2(selectedVariants), index$d, ($$anchor, selectedVariant) => {
							var span = root_3$h();
							var text = child(span, true);

							reset(span);
							template_effect(() => set_text(text, $LOCALE()[get$2(selectedVariant).title]));
							append($$anchor, span);
						});

						append($$anchor, fragment_2);
					};

					var alternate = ($$anchor) => {
						var span_1 = root_4$c();
						var text_1 = child(span_1, true);

						reset(span_1);
						template_effect(() => set_text(text_1, $LOCALE()[emptyValueTitle()]));
						append($$anchor, span_1);
					};

					if_block(node_1, ($$render) => {
						if (value()) $$render(consequent); else $$render(alternate, false);
					});
				}

				append($$anchor, fragment_1);
			};

			var alternate_3 = ($$anchor) => {
				var div = root_5$a();
				var select = child(div);
				let attributes;

				init_select(select, () => attributes.value);

				var node_3 = child(select);

				{
					var consequent_3 = ($$anchor) => {
						var fragment_3 = comment();
						var node_4 = first_child(fragment_3);

						{
							var consequent_2 = ($$anchor) => {
								Ui_select_option($$anchor, {
									get value() {
										return UICommon$1.CLEAR_MACRO;
									},
									get title() {
										return placeholder();
									}
								});
							};

							var alternate_1 = ($$anchor) => {
								Ui_select_option($$anchor, {
									get value() {
										return UICommon$1.CLEAR_MACRO;
									},
									selected: "selected",
									get title() {
										return placeholder();
									}
								});
							};

							if_block(node_4, ($$render) => {
								if (value()) $$render(consequent_2); else $$render(alternate_1, false);
							});
						}

						append($$anchor, fragment_3);
					};

					if_block(node_3, ($$render) => {
						if (placeholder().length > 0) $$render(consequent_3);
					});
				}

				var node_5 = sibling(node_3);

				each(node_5, 17, variants, index$d, ($$anchor, variant) => {
					var fragment_6 = comment();
					var node_6 = first_child(fragment_6);

					{
						var consequent_4 = ($$anchor) => {
							var selected = derived(() => value() && value().indexOf(get$2(variant).id) > -1);

							Ui_select_option($$anchor, {
								get value() {
									return get$2(variant).id;
								},
								get selected() {
									return get$2(selected);
								},
								get title() {
									return get$2(variant).title;
								}
							});
						};

						var alternate_2 = ($$anchor) => {
							var selected_1 = derived(() => value() == get$2(variant).id);

							Ui_select_option($$anchor, {
								get value() {
									return get$2(variant).id;
								},
								get selected() {
									return get$2(selected_1);
								},
								get title() {
									return get$2(variant).title;
								}
							});
						};

						if_block(node_6, ($$render) => {
							if (multiple()) $$render(consequent_4); else $$render(alternate_2, false);
						});
					}

					append($$anchor, fragment_6);
				});

				reset(select);
				reset(div);

				template_effect(() => {
					set_class(div, `select ${classes() ?? ""} ${get$2(multipleClass) ?? ""}`);

					attributes = set_attributes(select, attributes, {
						id: `form-field-select-${fieldname() ?? ""}`,
						name: fieldname(),
						onblur: onBlur,
						oninput: onInput,
						readonly: readonly(),
						required: required(),
						multiple: multiple(),
						invalid: get$2(invalid),
						size: multiple() ? size() : false,
						...others
					});

					if ("value" in attributes) {
						select_option(select, attributes.value);
					}
				});

				append($$anchor, div);
			};

			if_block(node, ($$render) => {
				if (readonly()) $$render(consequent_1); else $$render(alternate_3, false);
			});
		}

		append($$anchor, fragment);
		pop();
	}

	function onClick$6(event, onclick, $$props, action) {
		event.stopPropagation();
		onclick() && onclick()({ event, value: $$props.value });
		return action() && action()(event, $$props.value);
	}

	var root_4$b = template(`<span class="icon"><i></i></span>`);
	var root_5$9 = template(`<span> </span>`);
	var root_6$9 = template(`<span class="icon"><i></i></span>`);
	var root_3$g = template(`<!> <!> <!>`, 1);
	var root$I = template(`<button><!></button>`);

	function Ui_button($$anchor, $$props) {
		push($$props, true);

		const $$stores = setup_stores();
		const $LOCALE = () => store_get(LOCALE, "$LOCALE", $$stores);

		/**
		 * @typedef {Object} Props
		 * @property {string} [title]
		 * @property {boolean} [light]
		 * @property {boolean} [loading]
		 * @property {boolean} [raised]
		 * @property {boolean} [outlined]
		 * @property {boolean} [inverted]
		 * @property {boolean} [rounded]
		 * @property {boolean} [disabled]
		 * @property {string} [state]
		 * @property {string} [type]
		 * @property {string} [color]
		 * @property {string} [size]
		 * @property {string} [class]
		 * @property {boolean} [icon]
		 * @property {string} [iconSide]
		 * @property {function} [action]
		 * @property {function} [onclick]
		 * @property {any} value
		 * @property {import('svelte').Snippet} [children]
		 */
		/** @type {Props} */
		let title = prop($$props, "title", 3, ""),
			light = prop($$props, "light", 3, false),
			loading = prop($$props, "loading", 3, false),
			raised = prop($$props, "raised", 3, false),
			outlined = prop($$props, "outlined", 3, false),
			inverted = prop($$props, "inverted", 3, false),
			rounded = prop($$props, "rounded", 3, false),
			disabled = prop($$props, "disabled", 3, false),
			state = prop($$props, "state", 3, ""),
			type = prop($$props, "type", 3, ""),
			color = prop($$props, "color", 3, ""),
			size = prop($$props, "size", 3, ""),
			classes = prop($$props, "class", 3, ""),
			icon = prop($$props, "icon", 3, false),
			iconSide = prop($$props, "iconSide", 3, "right"),
			onclick = prop($$props, "onclick", 3, () => {
				return true;
			}),
			action = prop($$props, "action", 3, () => {
				return true;
			});

		var button = root$I();

		button.__click = [onClick$6, onclick, $$props, action];

		var node = child(button);

		{
			var consequent = ($$anchor) => {
				var fragment = comment();
				var node_1 = first_child(fragment);

				snippet(node_1, () => $$props.children);
				append($$anchor, fragment);
			};

			var alternate_1 = ($$anchor) => {
				var fragment_1 = comment();
				var node_2 = first_child(fragment_1);

				{
					var consequent_4 = ($$anchor) => {
						var fragment_2 = root_3$g();
						var node_3 = first_child(fragment_2);

						{
							var consequent_1 = ($$anchor) => {
								var span = root_4$b();
								var i = child(span);

								reset(span);
								template_effect(() => set_class(i, `fas fa-${icon() ?? ""} ${(size() ? `is-${size()}` : '') ?? ""}`));
								append($$anchor, span);
							};

							if_block(node_3, ($$render) => {
								if (iconSide() === "left") $$render(consequent_1);
							});
						}

						var node_4 = sibling(node_3, 2);

						{
							var consequent_2 = ($$anchor) => {
								var span_1 = root_5$9();
								var text = child(span_1, true);

								reset(span_1);
								template_effect(() => set_text(text, $LOCALE()[title()]));
								append($$anchor, span_1);
							};

							if_block(node_4, ($$render) => {
								if (title()) $$render(consequent_2);
							});
						}

						var node_5 = sibling(node_4, 2);

						{
							var consequent_3 = ($$anchor) => {
								var span_2 = root_6$9();
								var i_1 = child(span_2);

								reset(span_2);
								template_effect(() => set_class(i_1, `fas fa-${icon() ?? ""} ${(size() ? `is-${size()}` : '') ?? ""}`));
								append($$anchor, span_2);
							};

							if_block(node_5, ($$render) => {
								if (iconSide() === "right") $$render(consequent_3);
							});
						}

						append($$anchor, fragment_2);
					};

					var alternate = ($$anchor) => {
						var text_1 = text();

						template_effect(() => set_text(text_1, $LOCALE()[title()]));
						append($$anchor, text_1);
					};

					if_block(
						node_2,
						($$render) => {
							if (icon()) $$render(consequent_4); else $$render(alternate, false);
						},
						true
					);
				}

				append($$anchor, fragment_1);
			};

			if_block(node, ($$render) => {
				if ($$props.children) $$render(consequent); else $$render(alternate_1, false);
			});
		}

		reset(button);

		template_effect(() => {
			button.disabled = disabled();
			set_attribute(button, "type", type() ? type() : "");

			set_class(button, `
  button
  ${classes() ?? ""}
  ${(state() ? `is-${state()}` : '') ?? ""}
  ${(inverted() ? `is-inverted` : '') ?? ""}
  ${(outlined() ? `is-outlined` : '') ?? ""}
  ${(raised() ? `is-raised` : '') ?? ""}
  ${(rounded() ? `is-rounded` : '') ?? ""}
  ${(light() ? `is-light` : '') ?? ""}
  ${(loading() ? `is-loading` : '') ?? ""}
  ${(color() ? `is-${color()}` : '') ?? ""}
  ${(size() ? `is-${size()}` : '') ?? ""}
  `);
		});

		append($$anchor, button);
		pop();
	}

	delegate(["click"]);

	var root$H = template(`<div></div>`);

	function Ui_buttons($$anchor, $$props) {
		push($$props, true);

		/**
		 * @typedef {Object} Props
		 * @property {Array<object>} [values = []]
		 * @property {boolean} [centered = false]
		 * @property {boolean} [right = false]
		 * @property {string} [classes = '']
		 * @property {import('svelte').Component} [buttonComponent = UIButton]
		 * @property {import('../events.types').UIEventInputChangeCallback} [action = ()=>true]
		 * @property {import('../events.types').UIEventCallback} [onclick = ()=>true]
		 */
		/** @type {Props} */
		let values = prop($$props, "values", 19, () => []),
			centered = prop($$props, "centered", 3, false),
			right = prop($$props, "right", 3, false),
			classes = prop($$props, "classes", 3, ""),
			SvelteComponent = prop($$props, "buttonComponent", 3, Ui_button),
			action = prop($$props, "action", 3, () => {
				return true;
			}),
			onclick = prop($$props, "onclick", 3, () => {
				return true;
			});

		let _values = state(proxy([]));

		user_effect(() => {
			set(_values, proxy(values().map((itm) => {
				if (isNaN(itm.id)) {
					itm.id = Math.round(Math.random() * 100);
				}

				return itm;
			})));
		});

		var div = root$H();

		each(div, 21, () => get$2(_values), (item) => item.id, ($$anchor, item, $$index) => {
			var fragment = comment();
			var node = first_child(fragment);

			component(node, SvelteComponent, ($$anchor, $$component) => {
				$$component($$anchor, spread_props(
					{
						get action() {
							return action();
						},
						get onclick() {
							return onclick();
						}
					},
					() => get$2(item),
					{
						get value() {
							return get$2(item).value;
						},
						set value($$value) {
							(get$2(item).value = $$value);
						}
					}
				));
			});

			append($$anchor, fragment);
		});

		reset(div);
		template_effect(() => set_class(div, `buttons has-addons ${(centered() ? 'is-centered' : '') ?? ""} ${(right() ? 'is-right' : '') ?? ""} ${classes() ?? ""}`));
		append($$anchor, div);
		pop();
	}

	var root$G = template(`<div><div class="column"><!></div> <div class="column"><!></div> <div class="column"><!></div></div>`);

	function Ui_buttons_row($$anchor, $$props) {
		/**
		 * @typedef {Object} Props
		 * @property {string} [classes]
		 * @property {any} [left]
		 * @property {any} [center]
		 * @property {any} [right]
		 */
		/** @type {Props} */
		let classes = prop($$props, "classes", 3, ""),
			left = prop($$props, "left", 19, () => []),
			center = prop($$props, "center", 19, () => []),
			right = prop($$props, "right", 19, () => []);

		var div = root$G();
		var div_1 = child(div);
		var node = child(div_1);

		Ui_buttons(node, {
			get values() {
				return left();
			}
		});

		reset(div_1);

		var div_2 = sibling(div_1, 2);
		var node_1 = child(div_2);

		Ui_buttons(node_1, {
			get values() {
				return center();
			},
			centered: true
		});

		reset(div_2);

		var div_3 = sibling(div_2, 2);
		var node_2 = child(div_3);

		Ui_buttons(node_2, {
			get values() {
				return right();
			},
			right: true
		});

		reset(div_3);
		reset(div);
		template_effect(() => set_class(div, `columns ${classes() ?? ""}`));
		append($$anchor, div);
	}

	function Ui_button_switch($$anchor, $$props) {
		push($$props, true);

		/**
		 * @typedef {Object} Props
		 * @property {string} [title]
		 * @property {boolean} [light]
		 * @property {boolean} [loading]
		 * @property {boolean} [raised]
		 * @property {boolean} [outlined]
		 * @property {boolean} [inverted]
		 * @property {boolean} [rounded]
		 * @property {boolean} [disabled]
		 * @property {string} [state]
		 * @property {string} [type]
		 * @property {string} [color]
		 * @property {string} [size]
		 * @property {string} [classes]
		 * @property {boolean} [icon]
		 * @property {string} [iconSide]
		 * @property {any} [uiOff]
		 * @property {any} [uiOn]
		 * @property {any} [action]
		 * @property {any} value
		 * @property {boolean} [selected]
		 */
		/** @type {Props} */
		let title = prop($$props, "title", 3, ""),
			light = prop($$props, "light", 3, false),
			loading = prop($$props, "loading", 3, false),
			raised = prop($$props, "raised", 3, false),
			outlined = prop($$props, "outlined", 3, false),
			inverted = prop($$props, "inverted", 3, false),
			rounded = prop($$props, "rounded", 3, false),
			disabled = prop($$props, "disabled", 3, false),
			activeState = prop($$props, "state", 3, ""),
			type = prop($$props, "type", 3, ""),
			color = prop($$props, "color", 3, ""),
			size = prop($$props, "size", 3, ""),
			classes = prop($$props, "class", 3, ""),
			icon = prop($$props, "icon", 3, false),
			iconSide = prop($$props, "iconSide", 3, "right"),
			uiOff = prop($$props, "uiOff", 3, () => {
				return { color: "" };
			}),
			uiOn = prop($$props, "uiOn", 3, () => {
				return { color: "success" };
			}),
			action = prop($$props, "action", 3, () => {
				return !selected();
			}),
			onclick = prop($$props, "onclick", 3, () => {}),
			onchange = prop($$props, "onchange", 3, () => {}),
			selected = prop($$props, "selected", 7, false);

		let childProps = proxy({
			title: title(),
			light: light(),
			loading: loading(),
			raised: raised(),
			outlined: outlined(),
			inverted: inverted(),
			rounded: rounded(),
			disabled: disabled(),
			type: type(),
			color: color(),
			size: size(),
			class: classes(),
			icon: icon(),
			iconSide: iconSide(),
			value: $$props.value
		});

		function onClick(event) {
			selected(action()(event, $$props.value, selected()));

			onclick()({
				value: $$props.value,
				selected: selected()
			});

			onChange();
		}

		function onChange() {
			onchange()({
				value: $$props.value,
				selected: selected()
			});
		}

		let uiElement = state(undefined);

		user_effect(() => {
			if (get$2(uiElement)) {
				const propsChanges = selected() ? uiOn()() : uiOff()();

				Object.keys(propsChanges).forEach((key) => {
					childProps[key] = propsChanges[key];
				});
			}
		});

		template_effect(() => {
			console.log({
				uiElement: snapshot(get$2(uiElement)),
				color: snapshot(color()),
				selected: snapshot(selected())
			});

			debugger;
		});

		bind_this(
			Ui_button($$anchor, spread_props(() => childProps, {
				get state() {
					return activeState();
				},
				onclick: onClick
			})),
			($$value) => set(uiElement, proxy($$value)),
			() => get$2(uiElement)
		);

		pop();
	}

	var root$F = template(`<div></div>`);

	function Ui_buttons_switchers($$anchor, $$props) {
		push($$props, true);

		function selectAll() {
			values().forEach((itm) => {
				itm.selected = true;
			});

			values(values());
		}

		function deselectAll() {
			values().forEach((itm) => {
				itm.selected = false;
			});

			values(values());
		}

		onMount(() => {
			if (min()) {
				selectUpToMin(0, -1);
			}
		});

		function addToHistory(id) {
		}

		function countSelected() {
			return values().filter((btn) => btn.selected).length;
		}

		function toggleFirstSuited(toValue) {
			const index = values().findIndex((itm) => itm.selected = !toValue);

			if (index > -1) {
				values(values()[index].selected = toValue, true);
			}
		}

		function selectUpToMin(cnt, indexOfCurrent) {
			let delta = min() - cnt;

			if (!delta) {
				return;
			}

			for (let t in values()) {
				if (t === indexOfCurrent) {
					continue;
				}

				if (!values()[t].selected) {
					values(values()[t].selected = true, true);
					delta--;

					if (!delta) {
						break;
					}
				}
			}
		}

		function deselectDownToMin(cnt, indexOfCurrent) {
			let delta = cnt - max();

			if (!delta) {
				return;
			}

			for (let t in values()) {
				if (t === indexOfCurrent) {
					continue;
				}

				if (values()[t].selected) {
					values(values()[t].selected = false, true);
					delta--;

					if (!delta) {
						break;
					}
				}
			}
		}

		/**
		 * @typedef {Object} Props
		 * @property {any} [values]
		 * @property {boolean} [centered]
		 * @property {boolean} [right]
		 * @property {string} [classes]
		 * @property {any} [buttonComponent]
		 * @property {function} [action]
		 * @property {function} [onclick]
		 * @property {function} [onchange]
		 * @property {number} [min]
		 * @property {number} [max]
		 */
		/** @type {Props} */
		let values = prop($$props, "values", 31, () => proxy([])),
			centered = prop($$props, "centered", 3, false),
			right = prop($$props, "right", 3, false),
			classes = prop($$props, "classes", 3, ""),
			buttonComponent = prop($$props, "buttonComponent", 3, Ui_button_switch),
			action = prop($$props, "action", 3, (ev, value, selected) => {
				let newSelected = !selected;
				const indexOfCurrent = values().indexOf((itm) => itm.value === value);
				const cnt = countSelected() + (newSelected ? 1 : -1);

				if (min()) {
					if (cnt < min()) {
						selectUpToMin(cnt, indexOfCurrent);
						values(values());
					}
				}

				if (max()) {
					if (max() < cnt) {
						deselectDownToMin(cnt, indexOfCurrent);
						values(values());
					}
				}

				return newSelected;
			}),
			min = prop($$props, "min", 3, 0),
			max = prop($$props, "max", 3, 100);

		var div = root$F();

		each(div, 21, values, (item) => item.id, ($$anchor, item, $$index) => {
			var fragment = comment();
			const SvelteComponent = derived(buttonComponent);
			var node = first_child(fragment);

			component(node, () => get$2(SvelteComponent), ($$anchor, $$component) => {
				$$component($$anchor, spread_props(
					{
						get action() {
							return action();
						}
					},
					() => get$2(item),
					{
						onclick,
						onchange,
						get value() {
							return get$2(item).value;
						},
						set value($$value) {
							(get$2(item).value = $$value);
						},
						get selected() {
							return get$2(item).selected;
						},
						set selected($$value) {
							(get$2(item).selected = $$value);
						}
					}
				));
			});

			append($$anchor, fragment);
		});

		reset(div);
		template_effect(() => set_class(div, `buttons has-addons ${(centered() ? 'is-centered' : '') ?? ""} ${(right() ? 'is-right' : '') ?? ""} ${classes() ?? ""}`));
		append($$anchor, div);

		return pop({
			selectAll,
			deselectAll,
			addToHistory,
			countSelected,
			toggleFirstSuited,
			selectUpToMin,
			deselectDownToMin
		});
	}

	var index$b = /*#__PURE__*/Object.freeze({
		__proto__: null,
		UIButton: Ui_button,
		UIButtonSwitch: Ui_button_switch,
		UIButtons: Ui_buttons,
		UIButtonsRow: Ui_buttons_row,
		UIButtonsSwitchers: Ui_buttons_switchers
	});

	const DEFAULT_STATUS_SUCCESS = "ok";
	const NAVIGATION_DELAY_SHORT = 500;
	const NAVIGATION_DELAY_NORMAL = 1500;
	const NAVIGATION_DELAY_LONG = 5000;
	const NAVIGATION_DELAYS = {
	  SHORT: NAVIGATION_DELAY_SHORT,
	  NORMAL: NAVIGATION_DELAY_NORMAL,
	  LONG: NAVIGATION_DELAY_LONG
	};
	const NAVIGATION_DELAY_DEFAULT = NAVIGATION_DELAY_NORMAL;

	var root_3$f = template(`<div class="field has-addons"><!></div> <div class="control"><!></div>`, 1);

	function Ui_select_from_model_on_demand_inline($$anchor, $$props) {
		push($$props, true);

		/**
		 * @typedef {Object} Props
		 * @property {boolean} [inputStarted]
		 * @property {any} value
		 * @property {any} [variants]
		 * @property {string} [placeholder]
		 * @property {string} [fieldname]
		 * @property {string} [modelName]
		 * @property {string} [actionName]
		 * @property {any} [actionFilter]
		 * @property {any} [actionSorter]
		 * @property {any} [actionPager]
		 * @property {any} [actionSearch]
		 * @property {string} [optionId]
		 * @property {string} [optionTitle]
		 * @property {boolean} [icon]
		 * @property {boolean} [required]
		 * @property {boolean} [readonly]
		 * @property {boolean} [multiple]
		 * @property {number} [size]
		 * @property {boolean} [valid]
		 * @property {boolean} [validated]
		 * @property {boolean} [errors]
		 * @property {boolean} [formErrors]
		 * @property {boolean} [formLevelError]
		 */
		/** @type {Props} */
		let variants = prop($$props, "variants", 31, () => proxy([])),
			placeholder = prop($$props, "placeholder", 3, "empty select item"),
			fieldname = prop($$props, "fieldname", 3, "selectFromModel"),
			modelName = prop($$props, "modelName", 3, ""),
			actionName = prop($$props, "actionName", 3, ""),
			actionFilter = prop($$props, "actionFilter", 19, () => ({})),
			actionSorter = prop($$props, "actionSorter", 19, () => ({})),
			actionPager = prop($$props, "actionPager", 19, () => ({})),
			actionSearch = prop($$props, "actionSearch", 3, undefined),
			optionId = prop($$props, "optionId", 3, ":_id"),
			optionTitle = prop($$props, "optionTitle", 3, ":title"),
			required = prop($$props, "required", 3, true),
			readonly = prop($$props, "readonly", 3, false),
			multiple = prop($$props, "multiple", 3, false),
			size = prop($$props, "size", 3, 8),
			valid = prop($$props, "valid", 3, true),
			onreject = prop($$props, "onreject", 3, () => false),
			onresolve = prop($$props, "onresolve", 3, () => true),
			onerror = prop($$props, "onerror", 3, () => true);

		function argumentsSetProvided() {
			return modelName() && actionName() && actionFilter();
		}

		let loaded = false;
		let disabled = derived(() => !loaded);
		let state$1 = state("hidden");
		let resultsList = [];

		onMount(async () => {
			if (argumentsSetProvided()) {
				const notApp = notCommon$1.getApp();
				const Model = notApp.getModel(modelName()).setFilter(actionFilter()).setSorter(actionSorter()).setPager(actionPager()).setSearch(actionSearch());
				const response = await Model[`$` + actionName()]();

				if (response.status === DEFAULT_STATUS_SUCCESS) {
					resultsList = response.result;

					variants(resultsList.map((item) => {
						return {
							id: notPath.get(optionId(), item),
							title: notPath.get(optionTitle(), item)
						};
					}));
				} else {
					onerror()(response.errors || [response.message]);
				}
			}
		});

		let resolvedValue;

		function onModelChanged({ value: selectedValue }) {
			resolvedValue = resultsList.find((item) => notPath.get(optionId(), item) === selectedValue);
		}

		const ACTIONS = {
			add: {
				color: "primary",
				icon: "plus",
				action() {
					set(state$1, "show");
				}
			},
			resolve: {
				icon: "check",
				color: "primary",
				action() {
					set(state$1, "hidden");
					onresolve()(resolvedValue);
				}
			},
			reject: {
				icon: "close",
				color: "danger",
				action() {
					set(state$1, "hidden");
					onreject()();
				}
			}
		};

		var fragment = comment();
		var node = first_child(fragment);

		{
			var consequent = ($$anchor) => {
				Ui_button($$anchor, spread_props(() => ACTIONS.add));
			};

			var alternate = ($$anchor) => {
				var fragment_2 = comment();
				var node_1 = first_child(fragment_2);

				{
					var consequent_1 = ($$anchor) => {
						var fragment_3 = root_3$f();
						var div = first_child(fragment_3);
						var node_2 = child(div);

						Ui_select(node_2, {
							get value() {
								return $$props.value;
							},
							get variants() {
								return variants();
							},
							get placeholder() {
								return placeholder();
							},
							get fieldname() {
								return fieldname();
							},
							get required() {
								return required();
							},
							get readonly() {
								return readonly();
							},
							get disabled() {
								return get$2(disabled);
							},
							get multiple() {
								return multiple();
							},
							get size() {
								return size();
							},
							get valid() {
								return valid();
							},
							onchange: onModelChanged
						});

						reset(div);

						var div_1 = sibling(div, 2);
						var node_3 = child(div_1);
						var values = derived(() => [ACTIONS.resolve, ACTIONS.reject]);

						Ui_buttons(node_3, {
							get values() {
								return get$2(values);
							}
						});

						reset(div_1);
						append($$anchor, fragment_3);
					};

					if_block(
						node_1,
						($$render) => {
							if (get$2(state$1) == "show") $$render(consequent_1);
						},
						true
					);
				}

				append($$anchor, fragment_2);
			};

			if_block(node, ($$render) => {
				if (get$2(state$1) === "hidden") $$render(consequent); else $$render(alternate, false);
			});
		}

		append($$anchor, fragment);
		pop();
	}

	var root$E = template(`<div class="control"><!></div>`);

	function Ui_select_from_model_with_search_modal($$anchor, $$props) {
		push($$props, true);

		/**
		 * @typedef {Object} Props
		 * @property {any} value
		 * @property {boolean} [inputStarted]
		 * @property {boolean} [icon]
		 * @property {string} [fieldname]
		 * @property {boolean} [readonly]
		 * @property {string} [serviceName] - Set this, as ns[ModelName], should be registered in notApp
		 * @property {string} [serviceOpenSelectorMethod] - Set this
		 * @property {string} [serviceLoadDataMethod] - Set this
		 * @property {any} [modelData]
		 * @property {boolean} [loading]
		 * @property {any} [selectedModelTitleFormatter]
		 * @property {string} [loadingLabel]
		 * @property {string} [isEmptyLabel]
		 */
		/** @type {Props} */
		let value = prop($$props, "value", 15),
			icon = prop($$props, "icon", 3, false),
			fieldname = prop($$props, "fieldname", 3, ""),
			readonly = prop($$props, "readonly", 3, false),
			serviceName = prop($$props, "serviceName", 3, ""),
			serviceOpenSelectorMethod = prop($$props, "serviceOpenSelectorMethod", 3, "openSelector"),
			serviceLoadDataMethod = prop($$props, "serviceLoadDataMethod", 3, "loadData"),
			modelData = prop($$props, "modelData", 15, null),
			loading = prop($$props, "loading", 15, false),
			selectedModelTitleFormatter = prop($$props, "selectedModelTitleFormatter", 3, (data) => `${data._id}`),
			loadingLabel = prop($$props, "loadingLabel", 3, "not-node:loading_label"),
			isEmptyLabel = prop($$props, "isEmptyLabel", 3, "not-node:field_value_is_empty_placeholder"),
			onchange = prop($$props, "onchange", 3, () => true);

		function getService() {
			if (!serviceName()) throw new Error("serviceName is not set");
			return notCommon$1.getApp().getService(serviceName());
		}

		function openModelSearchAndSelect() {
			if (!serviceOpenSelectorMethod()) {
				throw new Error("serviceOpenSelectorMethod is not set");
			}

			const service = getService();

			service[serviceOpenSelectorMethod()]().then((results) => {
				value(results._id);
				modelData(results);
				return value();
			}).then((value) => {
				onchange()({ field: fieldname(), value });
			}).catch((e) => {
				notCommon$1.report(e);
			});
		}

		function resetSelectedModel() {
			value(undefined);
			modelData(null);
			onchange()({ field: fieldname(), value: value() });
		}

		async function loadModelData() {
			try {
				if (value()) {
					loading(true);
					modelData(await getService()[serviceLoadDataMethod()](value()));
				}
			} catch(e) {
				notCommon$1.report(e);
			} finally {
				loading(false);
			}
		}

		onMount(() => {
			loadModelData();
		});

		const AVAILABLE_BUTTONS = [
			{
				id: 1,
				action: openModelSearchAndSelect,
				icon: icon(),
				color: "warning"
			},
			{
				id: 2,
				action: resetSelectedModel,
				icon: "times",
				color: "danger"
			}
		];

		function getModelButton() {
			if (loading()) {
				return {
					disabled: true,
					loading: loading(),
					title: loadingLabel()
				};
			} else {
				if (modelData()) {
					return {
						disabled: readonly(),
						action: openModelSearchAndSelect,
						title: selectedModelTitleFormatter()(modelData())
					};
				} else {
					return { disabled: true, title: isEmptyLabel() };
				}
			}
		}

		let VISIBLE_BUTTONS = state(proxy([]));

		run(() => {
			if (value()) {
				set(VISIBLE_BUTTONS, proxy([
					getModelButton(),
					...readonly() ? [] : AVAILABLE_BUTTONS
				]));
			} else {
				set(VISIBLE_BUTTONS, proxy([
					getModelButton(),
					...readonly() ? [] : [AVAILABLE_BUTTONS[0]]
				]));
			}
		});

		var div = root$E();
		var node = child(div);

		Ui_buttons(node, {
			get values() {
				return get$2(VISIBLE_BUTTONS);
			},
			classes: "is-no-flex-wrap"
		});

		reset(div);
		append($$anchor, div);
		pop();
	}

	var root$D = template(`<progress> </progress>`);

	function Ui_progress($$anchor, $$props) {
		/**
		 * @typedef {Object} Props
		 * @property {any} value
		 * @property {number} [max]
		 * @property {string} [color]
		 * @property {string} [size]
		 * @property {string} [classes]
		 */
		/** @type {Props} */
		let max = prop($$props, "max", 3, 100),
			color = prop($$props, "color", 3, ""),
			size = prop($$props, "size", 3, ""),
			classes = prop($$props, "classes", 3, "");

		var progress = root$D();
		var text = child(progress);

		reset(progress);

		template_effect(() => {
			set_class(progress, `
  progress
  ${classes() ?? ""}
  ${(color() ? `is-${color()}` : '') ?? ""}
  ${(size() ? `is-${size()}` : '') ?? ""}`);

			set_value(progress, $$props.value);
			set_attribute(progress, "max", max());
			set_text(text, `${$$props.value ?? ""}%`);
		});

		append($$anchor, progress);
	}

	function Ui_show_one_from_list($$anchor, $$props) {
		push($$props, true);

		const defaultFilter = (value) => value[idFieldName()] === $$props.id;

		/**
		 * @typedef {Object} Props
		 * @property {any} [values]
		 * @property {any} id
		 * @property {any} UIComponent
		 * @property {any} UIPlaceholder
		 * @property {any} active
		 * @property {string} [idFieldName]
		 * @property {any} [filter]
		 */
		/** @type {Props} */
		let values = prop($$props, "values", 19, () => []),
			active = prop($$props, "active", 15),
			idFieldName = prop($$props, "idFieldName", 3, "_id"),
			filter = prop($$props, "filter", 3, defaultFilter);

		run$1(() => {
			active(Array.isArray(values()) && values().length && typeof $$props.id !== "undefined" ? values().find(filter() || defaultFilter) : undefined);
		});

		var fragment = comment();
		var node = first_child(fragment);

		{
			var consequent = ($$anchor) => {
				var fragment_1 = comment();
				var node_1 = first_child(fragment_1);

				component(node_1, () => $$props.UIComponent, ($$anchor, $$component) => {
					$$component($$anchor, spread_props(active));
				});

				append($$anchor, fragment_1);
			};

			var alternate = ($$anchor) => {
				var fragment_2 = comment();
				var node_2 = first_child(fragment_2);

				{
					var consequent_1 = ($$anchor) => {
						var fragment_3 = comment();
						var node_3 = first_child(fragment_3);

						component(node_3, () => $$props.UIPlaceholder, ($$anchor, $$component) => {
							$$component($$anchor, {});
						});

						append($$anchor, fragment_3);
					};

					if_block(
						node_2,
						($$render) => {
							if ($$props.UIPlaceholder) $$render(consequent_1);
						},
						true
					);
				}

				append($$anchor, fragment_2);
			};

			if_block(node, ($$render) => {
				if (active()) $$render(consequent); else $$render(alternate, false);
			});
		}

		append($$anchor, fragment);
		pop();
	}

	var root$C = template(`<div><!> <!> <!></div>`);

	function Ui_tag_value($$anchor, $$props) {
		push($$props, true);

		/**
		 * @typedef {Object} Props
		 * @property {string} [id] - if we want to address this tag
		 * @property {any} title
		 * @property {any} value
		 * @property {any} [actions]
		 * @property {string} [classes]
		 * @property {any} [actionsGroupContructor]
		 * @property {any} [actionsGroupProps]
		 * @property {boolean} [readonly]
		 */
		/** @type {Props} */
		let id = prop($$props, "id", 3, "taggedValueId"),
			actions = prop($$props, "actions", 19, () => []),
			classes = prop($$props, "classes", 3, ""),
			actionsGroupContructor = prop($$props, "actionsGroupContructor", 3, Ui_buttons),
			actionsGroupProps = prop($$props, "actionsGroupProps", 19, () => ({})),
			readonly = prop($$props, "readonly", 3, false);

		var div = root$C();
		var node = child(div);

		{
			var consequent = ($$anchor) => {
				Ui_tag($$anchor, spread_props(() => $$props.title));
			};

			if_block(node, ($$render) => {
				if ($$props.title) $$render(consequent);
			});
		}

		var node_1 = sibling(node, 2);

		{
			var consequent_1 = ($$anchor) => {
				Ui_tag($$anchor, spread_props(() => $$props.value));
			};

			if_block(node_1, ($$render) => {
				if ($$props.value) $$render(consequent_1);
			});
		}

		var node_2 = sibling(node_1, 2);

		{
			var consequent_2 = ($$anchor) => {
				var fragment_2 = comment();
				const SvelteComponent = derived(actionsGroupContructor);
				var node_3 = first_child(fragment_2);

				component(node_3, () => get$2(SvelteComponent), ($$anchor, $$component) => {
					$$component($$anchor, spread_props(
						{
							get values() {
								return actions();
							}
						},
						actionsGroupProps
					));
				});

				append($$anchor, fragment_2);
			};

			if_block(node_2, ($$render) => {
				if (!readonly() && actions() && actions().length) $$render(consequent_2);
			});
		}

		reset(div);

		template_effect(() => {
			set_class(div, `tags has-addons ${classes() ?? ""}`);
			set_attribute(div, "id", id());
		});

		append($$anchor, div);
		pop();
	}

	var root$B = template(`<!> <!>`, 1);

	function Ui_title($$anchor, $$props) {
		push($$props, true);

		const $$stores = setup_stores();
		const $LOCALE = () => store_get(LOCALE, "$LOCALE", $$stores);

		/**
		 * @typedef {Object} Props
		 * @property {any} [id]
		 * @property {string} [title]
		 * @property {any} subtitle
		 * @property {number} [size]
		 * @property {any} subsize
		 * @property {boolean} [spaced]
		 * @property {string} [align]
		 */
		/** @type {Props} */
		let id = prop($$props, "id", 19, () => `title-${Math.random()}`),
			title = prop($$props, "title", 3, ""),
			size = prop($$props, "size", 3, 1),
			spaced = prop($$props, "spaced", 3, false),
			align = prop($$props, "align", 3, "left");

		const scrollToTop = (options = UICommon$1.SCROLL_OPTIONS) => {
			setTimeout(
				() => {
					document.getElementById(id()).scrollIntoView(options);
				},
				100
			);
		};

		let size2 = derived(() => $$props.subsize ? $$props.subsize : parseInt(size()) < 6 ? parseInt(size()) + 1 : size());
		let spacedStyle = derived(() => spaced() ? "is-spaced" : "");
		let resultTitle = derived(() => `<h${size()} id="${id()}" style="text-align: ${align()};" class="title ${get$2(spacedStyle)} is-${size()}">${$LOCALE()[title()]}</h${size()}>`);
		let resultSubtitle = derived(() => `<h${get$2(size2)} id="${id()}" style="text-align: ${align()};" class="subtitle is-${get$2(size2)}">${$LOCALE()[$$props.subtitle]}</h${get$2(size2)}>`);
		var fragment = root$B();
		var node = first_child(fragment);

		{
			var consequent = ($$anchor) => {
				var fragment_1 = comment();
				var node_1 = first_child(fragment_1);

				html(node_1, () => get$2(resultTitle));
				append($$anchor, fragment_1);
			};

			if_block(node, ($$render) => {
				if (title()) $$render(consequent);
			});
		}

		var node_2 = sibling(node, 2);

		{
			var consequent_1 = ($$anchor) => {
				var fragment_2 = comment();
				var node_3 = first_child(fragment_2);

				html(node_3, () => get$2(resultSubtitle));
				append($$anchor, fragment_2);
			};

			if_block(node_2, ($$render) => {
				if ($$props.subtitle) $$render(consequent_1);
			});
		}

		append($$anchor, fragment);
		return pop({ scrollToTop });
	}

	var root_3$e = template(`<span> </span>`);
	var root_1$t = template(`<p><!></p>`);

	function Ui_errors_list($$anchor, $$props) {
		push($$props, true);

		const $$stores = setup_stores();
		const $LOCALE = () => store_get(LOCALE, "$LOCALE", $$stores);

		/**
		 * @typedef {Object} Props
		 * @property {any} [errors]
		 * @property {boolean} [show]
		 * @property {string} [classes]
		 * @property {string} [id]
		 */
		/** @type {Props} */
		let errors = prop($$props, "errors", 19, () => []),
			show = prop($$props, "show", 3, false),
			classes = prop($$props, "classes", 3, ""),
			id = prop($$props, "id", 3, "errors-list");

		var fragment = comment();
		var node = first_child(fragment);

		{
			var consequent_1 = ($$anchor) => {
				var p = root_1$t();
				var node_1 = child(p);

				{
					var consequent = ($$anchor) => {
						var fragment_1 = comment();
						var node_2 = first_child(fragment_1);

						each(node_2, 17, errors, index$d, ($$anchor, error) => {
							var span = root_3$e();
							var text = child(span, true);

							reset(span);
							template_effect(() => set_text(text, $LOCALE()[get$2(error)]));
							append($$anchor, span);
						});

						append($$anchor, fragment_1);
					};

					var alternate = ($$anchor) => {
						var text_1 = text(" ");

						append($$anchor, text_1);
					};

					if_block(node_1, ($$render) => {
						if (show()) $$render(consequent); else $$render(alternate, false);
					});
				}

				reset(p);

				template_effect(() => {
					set_class(p, `help ${classes() ?? ""}`);
					set_attribute(p, "id", id());
				});

				append($$anchor, p);
			};

			if_block(node, ($$render) => {
				if (Array.isArray(errors()) && errors().length) $$render(consequent_1);
			});
		}

		append($$anchor, fragment);
		pop();
	}

	var root$A = template(`<article class="media"><figure class="media-left"><p class="image is-32x32"><img></p></figure> <div class="media-content"><div class="content"><p><strong> </strong> <small>@</small> <strong> </strong></p></div></div></article>`);

	function Ui_user_card($$anchor, $$props) {
		push($$props, true);

		/**
		 * @typedef {Object} Props
		 * @property {string} [id]
		 * @property {string} [image]
		 * @property {string} [username]
		 * @property {string} [role]
		 * @property {any} [events]
		 * @property {any} [register] - register event handlers
		 * @property {any} [onUpdate]
		 */
		/** @type {Props} */
		let id = prop($$props, "id", 3, "userCard"),
			image = prop($$props, "image", 3, "https://bulma.io/images/placeholders/32x32.png"),
			username = prop($$props, "username", 15, "John Doe"),
			role = prop($$props, "role", 15, "admin"),
			events = prop($$props, "events", 31, () => proxy({})),
			register = prop($$props, "register", 19, () => notCommon$1.registerWidgetEvents),
			onUpdate = prop($$props, "onUpdate", 3, (data) => {
				if (Object.hasOwn(data, "username")) {
					username(data.username);
				}

				if (Object.hasOwn(data, "role")) {
					role(data.role);
				}
			});

		function getCompId() {
			return `usercard-${id()}`;
		}

		function getStandartUpdateEventName() {
			let compId = getCompId();

			return `${compId}:update`;
		}

		onMount(() => {
			if (!Object.hasOwn(events(), getStandartUpdateEventName())) {
				events(events()[getStandartUpdateEventName()] = onUpdate(), true);
			}

			register()(events());
		});

		var article = root$A();

		template_effect(() => set_attribute(article, "id", getCompId()));

		var figure = child(article);
		var p = child(figure);
		var img = child(p);

		reset(p);
		reset(figure);

		var div = sibling(figure, 2);
		var div_1 = child(div);
		var p_1 = child(div_1);
		var strong = child(p_1);
		var text = child(strong, true);

		reset(strong);

		var strong_1 = sibling(strong, 4);
		var text_1 = child(strong_1, true);

		reset(strong_1);
		reset(p_1);
		reset(div_1);
		reset(div);
		reset(article);

		template_effect(() => {
			set_attribute(img, "src", image());
			set_attribute(img, "alt", username());
			set_text(text, username());
			set_text(text_1, role());
		});

		append($$anchor, article);
		pop();
	}

	var root_1$s = template(`<p> </p>`);
	var root_2$k = template(`<input>`);

	function Ui_textfield($$anchor, $$props) {
		push($$props, true);

		const $$stores = setup_stores();
		const $LOCALE = () => store_get(LOCALE, "$LOCALE", $$stores);

		/** @type {import('./type').UIInputProps} */
		let value = prop($$props, "value", 15, ""),
			placeholder = prop($$props, "placeholder", 3, ""),
			fieldname = prop($$props, "fieldname", 3, "textfield"),
			required = prop($$props, "required", 3, true),
			disabled = prop($$props, "disabled", 3, false),
			readonly = prop($$props, "readonly", 3, false),
			valid = prop($$props, "valid", 3, true),
			classes = prop($$props, "class", 3, ""),
			onchange = prop($$props, "onchange", 3, () => true),
			others = rest_props($$props, [
				"$$slots",
				"$$events",
				"$$legacy",
				"value",
				"placeholder",
				"fieldname",
				"required",
				"disabled",
				"readonly",
				"valid",
				"class",
				"onchange"
			]);

		let invalid = derived(() => !valid());
		const oninput = UICommon$1.onInput(fieldname(), onchange());
		var fragment = comment();
		var node = first_child(fragment);

		{
			var consequent = ($$anchor) => {
				var p = root_1$s();
				var text = child(p, true);

				reset(p);
				template_effect(() => set_text(text, value()));
				append($$anchor, p);
			};

			var alternate = ($$anchor) => {
				var input = root_2$k();

				remove_input_defaults(input);

				let attributes;

				template_effect(() => attributes = set_attributes(input, attributes, {
					id: `form-field-textfield-${fieldname() ?? ""}`,
					class: `input ${classes() ?? ""}`,
					type: "text",
					name: fieldname(),
					invalid: get$2(invalid),
					disabled: disabled(),
					required: required(),
					readonly: readonly(),
					placeholder: $LOCALE()[placeholder()],
					autocomplete: fieldname(),
					onchange: oninput,
					oninput,
					"aria-controls": `input-field-helper-${fieldname() ?? ""}`,
					"aria-describedby": `input-field-helper-${fieldname() ?? ""}`,
					...others
				}));

				bind_value(input, value);
				append($$anchor, input);
			};

			if_block(node, ($$render) => {
				if (readonly()) $$render(consequent); else $$render(alternate, false);
			});
		}

		append($$anchor, fragment);
		pop();
	}

	var root$z = template(`<div class="columns"><div class="column"><div class="field"><!></div></div></div>`);

	function Ui_simple_search_input($$anchor, $$props) {
		push($$props, true);

		const $$stores = setup_stores();
		const $LOCALE = () => store_get(LOCALE, "$LOCALE", $$stores);
		const dispatch = createEventDispatcher();

		/**
		 * @typedef {Object} Props
		 * @property {any} [placeholder]
		 * @property {string} [term]
		 */
		/** @type {Props} */
		let placeholder = prop($$props, "placeholder", 19, () => $LOCALE()["not-node:field_search_placeholder"]),
			term = prop($$props, "term", 15, "");

		function onChange({ detail }) {
			dispatch("termChange", detail);
		}

		var div = root$z();
		var div_1 = child(div);
		var div_2 = child(div_1);
		var node = child(div_2);

		Ui_textfield(node, {
			get placeholder() {
				return placeholder();
			},
			fieldname: "searchTermInput",
			icon: "magnifying-glass",
			get value() {
				return term();
			},
			set value($$value) {
				term($$value);
			},
			$$events: { change: onChange }
		});

		reset(div_2);
		reset(div_1);
		reset(div);
		append($$anchor, div);
		pop();
	}

	var index$a = /*#__PURE__*/Object.freeze({
		__proto__: null,
		UIBoolean: Ui_boolean,
		UIBooleanLabeled: Ui_boolean_labeled,
		UIBooleans: Ui_booleans,
		UICensored: Ui_censored,
		UIErrorsList: Ui_errors_list,
		UIIndicator: Ui_indicator,
		UILoader: Ui_loader,
		UIProgress: Ui_progress,
		UISelectFromModelOnDemandInline: Ui_select_from_model_on_demand_inline,
		UISelectFromModelWithSearchModal: Ui_select_from_model_with_search_modal,
		UIShowOneFromList: Ui_show_one_from_list,
		UISimpleSearchInput: Ui_simple_search_input,
		UITag: Ui_tag,
		UITagValue: Ui_tag_value,
		UITitle: Ui_title,
		UIUserCard: Ui_user_card
	});

	function Ui_form_input_errors($$anchor, $$props) {
		push($$props, true);

		let id = prop($$props, "id", 3, "generic-field");
		let allErrors = state(proxy([]));
		let showErrors = state(true);
		let validationClasses = "";

		user_pre_effect(() => {
			set(allErrors, proxy([].concat($$props.errors ? $$props.errors : [], $$props.formErrors ? $$props.formErrors : [])));
			set(showErrors, proxy(!($$props.validated && $$props.valid) && $$props.inputStarted));
		});

		Ui_errors_list($$anchor, {
			get show() {
				return get$2(showErrors);
			},
			get errors() {
				return get$2(allErrors);
			},
			get classes() {
				return validationClasses;
			},
			get id() {
				return id();
			}
		});

		pop();
	}

	var root$y = template(`<label><!></label>`);

	function Ui_label($$anchor, $$props) {
		push($$props, true);

		const $$stores = setup_stores();
		const $LOCALE = () => store_get(LOCALE, "$LOCALE", $$stores);

		/**
		 * @typedef {Object} Props
		 * @property {string} for
		 * @property {string} [label]
		 * @property {string} class
		 * @property {boolean}  [disabled = false]
		 */
		/** @type {Props} */
		let label = prop($$props, "label", 3, "label"),
			labelClass = prop($$props, "class", 3, "label"),
			disabled = prop($$props, "disabled", 3, false);

		var label_1 = root$y();
		var node = child(label_1);

		{
			var consequent = ($$anchor) => {
				var fragment = comment();
				var node_1 = first_child(fragment);

				snippet(node_1, () => $$props.children);
				append($$anchor, fragment);
			};

			var alternate = ($$anchor) => {
				var text$1 = text();

				template_effect(() => set_text(text$1, $LOCALE()[label()]));
				append($$anchor, text$1);
			};

			if_block(node, ($$render) => {
				if ($$props.children) $$render(consequent); else $$render(alternate, false);
			});
		}

		reset(label_1);

		template_effect(() => {
			label_1.disabled = disabled();
			set_class(label_1, labelClass());
			set_attribute(label_1, "for", $$props.for);
		});

		append($$anchor, label_1);
		pop();
	}

	var root$x = template(`<!> <!>`, 1);

	function Ui_icon_button_with_tag($$anchor, $$props) {
		let button = prop($$props, "button", 19, () => ({})),
			tag = prop($$props, "tag", 19, () => ({}));

		var fragment = root$x();
		var node = first_child(fragment);

		Ui_button(node, spread_props(button));

		var node_1 = sibling(node, 2);

		Ui_tag(node_1, spread_props(tag, { classes: "is-top-right" }));
		append($$anchor, fragment);
	}

	var root$w = template(`<div class="is-fab svelte-1haul9u"><!></div>`);

	function Ui_icon_floating($$anchor, $$props) {
		push($$props, true);

		//export let top = '2em';
		//export let left = '2em';
		//export let right;
		//export let bottom;
		/**
		 * @typedef {Object} Props
		 * @property {any} [trigger] - export let direction = 'left';  //left/right/top/bottom/around
		 */
		/** @type {Props} */
		let trigger = prop($$props, "trigger", 19, () => ({
			title: 'Click me!',
			icon: 'plus',
			color: 'primary',
			size: 'medium'
		}));

		function toggle() {}

		let positionStyle = state('');

		onMount(() => {
			set(positionStyle, '');
		});

		var div = root$w();
		var node = child(div);

		Ui_button(node, spread_props({ action: toggle }, trigger));
		reset(div);
		template_effect(() => set_attribute(div, "style", get$2(positionStyle)));
		append($$anchor, div);
		pop();
	}

	var root_1$r = template(`<span><span><i></i> <span> </span></span></span>`);
	var root_2$j = template(`<span><i></i></span>`);

	function Ui_icon_font($$anchor, $$props) {
		push($$props, true);

		const $$stores = setup_stores();
		const $LOCALE = () => store_get(LOCALE, "$LOCALE", $$stores);

		/**
		 * @typedef {Object} Props
		 * @property {string} [title]
		 * @property {string} [font]
		 * @property {string} [size]
		 * @property {string} [side]
		 * @property {boolean} [pointable]
		 */
		/** @type {Props} */
		let title = prop($$props, "title", 3, ""),
			font = prop($$props, "font", 3, ""),
			side = prop($$props, "side", 3, ""),
			size = prop($$props, "size", 3, ""),
			pointable = prop($$props, "pointable", 3, false);

		var fragment = comment();
		var node = first_child(fragment);

		{
			var consequent = ($$anchor) => {
				var span = root_1$r();
				var span_1 = child(span);
				var i = child(span_1);
				var span_2 = sibling(i, 2);
				var text = child(span_2, true);

				reset(span_2);
				reset(span_1);
				reset(span);

				template_effect(() => {
					set_class(span, `icon-text ${(pointable() ? 'is-clickable' : '') ?? ""}`);
					set_class(span_1, `icon ${(size() ? `is-${size()}` : '') ?? ""}`);

					set_class(i, `is-title-icon fas
      fa-${font() ?? ""}
      ${(size() == 'medium' ? 'fa-lg' : '') ?? ""}
      ${(size() == 'large' ? 'fa-2x' : '') ?? ""}
      `);

					set_text(text, $LOCALE()[title()]);
				});

				append($$anchor, span);
			};

			var alternate = ($$anchor) => {
				var span_3 = root_2$j();
				var i_1 = child(span_3);

				reset(span_3);

				template_effect(() => {
					set_class(span_3, `
        ${(pointable() ? 'is-clickable' : '') ?? ""}
        ${(side() ? `is-${side()}` : '') ?? ""}
        icon ${(size() ? `is-${size()}` : '') ?? ""} ${(size() == 'medium' ? 'fa-lg' : '') ?? ""}
${(size() == 'large' ? 'fa-2x' : '') ?? ""}`);

					set_class(i_1, `fas fa-${font() ?? ""}`);
				});

				append($$anchor, span_3);
			};

			if_block(node, ($$render) => {
				if (title()) $$render(consequent); else $$render(alternate, false);
			});
		}

		append($$anchor, fragment);
		pop();
	}

	var root_3$d = template(`<span class="icon"><!></span>`);
	var root_5$8 = template(`<figure><img></figure>`);

	function Ui_icon($$anchor, $$props) {
		/**
		 * @typedef {Object} Props
		 * @property {string} [title] - some label
		 * @property {string} [size] - font icon
		 * @property {string} [font]
		 * @property {string} [svg] - svg icon
		 * @property {string} [src] - image icon
		 * @property {any} width
		 * @property {any} height
		 */
		/** @type {Props} */
		let title = prop($$props, "title", 3, ""),
			size = prop($$props, "size", 3, ""),
			font = prop($$props, "font", 3, ""),
			svg = prop($$props, "svg", 3, ""),
			src = prop($$props, "src", 3, "");

		var fragment = comment();
		var node = first_child(fragment);

		{
			var consequent = ($$anchor) => {
				Ui_icon_font($$anchor, {
					get font() {
						return font();
					},
					get size() {
						return size();
					},
					get title() {
						return title();
					}
				});
			};

			var alternate_1 = ($$anchor) => {
				var fragment_2 = comment();
				var node_1 = first_child(fragment_2);

				{
					var consequent_1 = ($$anchor) => {
						var span = root_3$d();
						var node_2 = child(span);

						html(node_2, svg);
						reset(span);
						append($$anchor, span);
					};

					var alternate = ($$anchor) => {
						var fragment_3 = comment();
						var node_3 = first_child(fragment_3);

						{
							var consequent_2 = ($$anchor) => {
								var figure = root_5$8();
								var img = child(figure);

								reset(figure);

								template_effect(() => {
									set_class(figure, `image ${($$props.width && $$props.height ? `is-${$$props.width}x${$$props.height}` : '') ?? ""} `);
									set_attribute(img, "src", src());
									set_attribute(img, "title", title());
									set_attribute(img, "alt", title());
									set_attribute(img, "width", $$props.width);
									set_attribute(img, "height", $$props.height);
								});

								append($$anchor, figure);
							};

							if_block(
								node_3,
								($$render) => {
									if (src()) $$render(consequent_2);
								},
								true
							);
						}

						append($$anchor, fragment_3);
					};

					if_block(
						node_1,
						($$render) => {
							if (svg()) $$render(consequent_1); else $$render(alternate, false);
						},
						true
					);
				}

				append($$anchor, fragment_2);
			};

			if_block(node, ($$render) => {
				if (font()) $$render(consequent); else $$render(alternate_1, false);
			});
		}

		append($$anchor, fragment);
	}

	var index$9 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		UIIcon: Ui_icon,
		UIIconButtonWithTag: Ui_icon_button_with_tag,
		UIIconFloating: Ui_icon_floating,
		UIIconFont: Ui_icon_font
	});

	function Ui_validated_icon($$anchor, $$props) {
		let side = prop($$props, "side", 3, "right"),
			size = prop($$props, "size", 3, "small");

		var fragment = comment();
		var node = first_child(fragment);

		{
			var consequent = ($$anchor) => {
				var font = derived(() => $$props.valid ? "check" : "exclamation-triangle");

				Ui_icon_font($$anchor, {
					get font() {
						return get$2(font);
					},
					get side() {
						return side();
					},
					get size() {
						return size();
					}
				});
			};

			if_block(node, ($$render) => {
				if ($$props.validated === true) $$render(consequent);
			});
		}

		append($$anchor, fragment);
	}

	var root_1$q = template(`<!> <!> <!>`, 1);

	function Ui_form_input($$anchor, $$props) {
		const input = ($$anchor) => {
			var fragment = root_1$q();
			var node = first_child(fragment);

			component(node, () => $$props.UIInput, ($$anchor, $$component) => {
				$$component($$anchor, spread_props(
					{
						get fieldtype() {
							return $$props.fieldtype;
						},
						get fieldname() {
							return $$props.fieldname;
						},
						get valid() {
							return valid();
						},
						get disabled() {
							return $$props.disabled;
						},
						get readonly() {
							return $$props.readonly;
						}
					},
					() => others,
					{
						get value() {
							return value();
						},
						set value($$value) {
							value($$value);
						}
					}
				));
			});

			var node_1 = sibling(node, 2);

			{
				var consequent = ($$anchor) => {
					Ui_icon_font($$anchor, {
						get font() {
							return icon();
						},
						side: "left",
						size: "small"
					});
				};

				if_block(node_1, ($$render) => {
					if (icon()) $$render(consequent);
				});
			}

			var node_2 = sibling(node_1, 2);

			{
				var consequent_1 = ($$anchor) => {
					Ui_validated_icon($$anchor, {
						get validated() {
							return validated();
						},
						get valid() {
							return valid();
						}
					});
				};

				if_block(node_2, ($$render) => {
					if (!$$props.readonly) $$render(consequent_1);
				});
			}

			append($$anchor, fragment);
		};

		/**
		 * @typedef {Object} Props
		 * @property {any} [value]
		 * @property {object}
		 * @property {string} [label]
		 * @property {string} [placeholder]
		 * @property {string} fieldname
		 * @property {string} fieldtype
		 * @property {boolean} [icon]
		 * @property {boolean} [required]
		 * @property {boolean} [readonly]
		 * @property {boolean} [disabled]
		 * @property {import('../events.types').UIEventInputChangeCallback} [onchange]
		 * @property {boolean} [valid]
		 */
		/** @type {Props} */
		let value = prop($$props, "value", 15, ""),
			fieldnamePrefix = prop($$props, "fieldnamePrefix", 3, "form-field-"),
			icon = prop($$props, "icon", 3, false),
			valid = prop($$props, "valid", 3, true),
			validated = prop($$props, "validated", 3, false),
			others = rest_props($$props, [
				"$$slots",
				"$$events",
				"$$legacy",
				"value",
				"disabled",
				"readonly",
				"UIInput",
				"label",
				"fieldtype",
				"fieldname",
				"fieldnamePrefix",
				"icon",
				"valid",
				"validated"
			]);

		var fragment_3 = comment();
		var node_3 = first_child(fragment_3);

		{
			var consequent_2 = ($$anchor) => {
				Ui_label($$anchor, {
					get class() {
						return $$props.fieldtype;
					},
					get disabled() {
						return $$props.disabled;
					},
					get for() {
						return `${fieldnamePrefix() ?? ""}${$$props.fieldtype ?? ""}-${$$props.fieldname ?? ""}`;
					},
					children: ($$anchor, $$slotProps) => {
						input($$anchor);
					},
					$$slots: { default: true }
				});
			};

			var alternate = ($$anchor) => {
				input($$anchor);
			};

			if_block(node_3, ($$render) => {
				if ($$props.label) $$render(consequent_2); else $$render(alternate, false);
			});
		}

		append($$anchor, fragment_3);
	}

	var root$v = template(`<div><!></div>`);

	function Ui_control($$anchor, $$props) {
		push($$props, true);

		/**
		 * @typedef {Object} Props
		 * @property {string} [classes]
		 * @property {import('svelte').Snippet} [children]
		 */
		/** @type {Props} */
		let classes = prop($$props, "class", 3, "");
		var div = root$v();
		var node = child(div);

		snippet(node, () => $$props.children ?? noop);
		reset(div);
		template_effect(() => set_class(div, `control ${classes() ?? ""}`));
		append($$anchor, div);
		pop();
	}

	var root$u = template(`<!> <!>`, 1);

	function Ui_form_control($$anchor, $$props) {
		/**
		 * @typedef {Object} Props
		 * @property {boolean} [inputStarted]
		 * @property {boolean} [value]
		 * @property {string} [label]
		 * @property {string} [placeholder]
		 * @property {string} fieldname
		 * @property {string} fieldtype
		 * @property {boolean} [icon]
		 * @property {boolean} [required]
		 * @property {boolean} [readonly]
		 * @property {boolean} [disabled]
		 * @property {import('../events.types').UIEventInputChangeCallback} [onchange]
		 * @property {boolean} [valid]
		 * @property {boolean} [validated]
		 * @property {boolean} [errors]
		 * @property {boolean} [formErrors]
		 * @property {boolean} [formLevelError]
		 */
		/** @type {Props} */
		let value = prop($$props, "value", 15, ""),
			inputStarted = prop($$props, "inputStarted", 3, false),
			placeholder = prop($$props, "placeholder", 3, ""),
			fieldnamePrefix = prop($$props, "fieldnamePrefix", 3, "form-field-"),
			icon = prop($$props, "icon", 3, false),
			required = prop($$props, "required", 3, true),
			readonly = prop($$props, "readonly", 3, false),
			disabled = prop($$props, "disabled", 3, false),
			valid = prop($$props, "valid", 3, true),
			validated = prop($$props, "validated", 3, false),
			errors = prop($$props, "errors", 3, false),
			onchange = prop($$props, "onchange", 3, () => true),
			onerror = prop($$props, "onerror", 3, () => true),
			formErrors = prop($$props, "formErrors", 3, false),
			others = rest_props($$props, [
				"$$slots",
				"$$events",
				"$$legacy",
				"value",
				"UIInput",
				"inputStarted",
				"label",
				"placeholder",
				"fieldtype",
				"fieldname",
				"fieldnamePrefix",
				"icon",
				"required",
				"readonly",
				"disabled",
				"valid",
				"validated",
				"errors",
				"onchange",
				"onerror",
				"formErrors"
			]);

		let iconClasses = derived(() => (icon() ? " has-icons-left " : "") + " has-icons-right ");
		var fragment = root$u();
		var node = first_child(fragment);

		Ui_control(node, {
			get class() {
				return get$2(iconClasses);
			},
			children: ($$anchor, $$slotProps) => {
				Ui_form_input($$anchor, spread_props(
					{
						get UIInput() {
							return $$props.UIInput;
						},
						get label() {
							return $$props.label;
						},
						get placeholder() {
							return placeholder();
						},
						get fieldtype() {
							return $$props.fieldtype;
						},
						get fieldname() {
							return $$props.fieldname;
						},
						get fieldnamePrefix() {
							return fieldnamePrefix();
						},
						get icon() {
							return icon();
						},
						get required() {
							return required();
						},
						get readonly() {
							return readonly();
						},
						get disabled() {
							return disabled();
						},
						get valid() {
							return valid();
						},
						get onchange() {
							return onchange();
						},
						get onerror() {
							return onerror();
						}
					},
					() => others,
					{
						get value() {
							return value();
						},
						set value($$value) {
							value($$value);
						}
					}
				));
			},
			$$slots: { default: true }
		});

		var node_1 = sibling(node, 2);

		Ui_form_input_errors(node_1, {
			get inputStarted() {
				return inputStarted();
			},
			get validated() {
				return validated();
			},
			get valid() {
				return valid();
			},
			get errors() {
				return errors();
			},
			get formErrors() {
				return formErrors();
			},
			get id() {
				return `input-field-helper-${$$props.fieldname ?? ""}`;
			}
		});

		append($$anchor, fragment);
	}

	var index$8 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		UIFormControl: Ui_form_control,
		UIFormInput: Ui_form_input,
		UIFormInputErrors: Ui_form_input_errors,
		UIValidatedIcon: Ui_validated_icon
	});

	var root_1$p = template(`<a><figure><img></figure></a>`);
	var root_2$i = template(`<figure><img></figure>`);

	function Ui_image($$anchor, $$props) {
		/**
		 * @typedef {Object} Props
		 * @property {any} urlFull
		 * @property {any} url
		 * @property {any} title
		 * @property {string} [cors]
		 * @property {number} [size]
		 * @property {boolean} [contained]
		 * @property {boolean} [covered]
		 * @property {string} [classes]
		 */
		/** @type {Props} */
		let cors = prop($$props, "cors", 3, "anonymous"),
			size = prop($$props, "size", 3, 64),
			contained = prop($$props, "contained", 3, true),
			covered = prop($$props, "covered", 3, true),
			classes = prop($$props, "classes", 3, ""),
			onclick = prop($$props, "onclick", 3, () => true),
			onkeyup = prop($$props, "onkeyup", 3, () => true);

		let sizeStyle = derived(() => isNaN(size()) ? `is-${size()}` : `is-${size()}x${size()}`);
		let containedStyle = derived(() => contained() ? "is-contained" : "");
		let coveredStyle = derived(() => covered() ? "is-covered" : "");
		var fragment = comment();
		var node = first_child(fragment);

		{
			var consequent = ($$anchor) => {
				var a = root_1$p();

				a.__click = function (...$$args) {
					onclick()?.apply(this, $$args);
				};

				var figure = child(a);
				var img = child(figure);

				reset(figure);
				reset(a);

				template_effect(() => {
					set_attribute(a, "href", $$props.urlFull);
					set_attribute(a, "alt", $$props.title);
					set_class(figure, `image ${get$2(sizeStyle) ?? ""} ${get$2(containedStyle) ?? ""} ${get$2(coveredStyle) ?? ""} ${classes() ?? ""}`);
					set_attribute(img, "alt", $$props.title);
					set_attribute(img, "src", $$props.url);
					set_attribute(img, "crossorigin", cors());
				});

				append($$anchor, a);
			};

			var alternate = ($$anchor) => {
				var figure_1 = root_2$i();
				var img_1 = child(figure_1);

				img_1.__click = function (...$$args) {
					onclick()?.apply(this, $$args);
				};

				img_1.__keyup = function (...$$args) {
					onkeyup()?.apply(this, $$args);
				};

				reset(figure_1);

				template_effect(() => {
					set_class(figure_1, `image ${get$2(sizeStyle) ?? ""} ${get$2(containedStyle) ?? ""} ${get$2(coveredStyle) ?? ""} ${classes() ?? ""}`);
					set_attribute(img_1, "alt", $$props.title);
					set_attribute(img_1, "src", $$props.url);
					set_attribute(img_1, "crossorigin", cors());
				});

				append($$anchor, figure_1);
			};

			if_block(node, ($$render) => {
				if ($$props.urlFull) $$render(consequent); else $$render(alternate, false);
			});
		}

		append($$anchor, fragment);
	}

	delegate(["click", "keyup"]);

	function Ui_images($$anchor, $$props) {
		let values = prop($$props, "values", 19, () => []);
		var fragment = comment();
		var node = first_child(fragment);

		each(node, 17, values, (item) => item.url, ($$anchor, item) => {
			Ui_image($$anchor, spread_props(() => get$2(item), {
				$$events: {
					click($$arg) {
						bubble_event.call(this, $$props, $$arg);
					}
				}
			}));
		});

		append($$anchor, fragment);
	}

	var index$7 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		UIImage: Ui_image,
		UIImages: Ui_images
	});

	enable_legacy_mode_flag();

	/*
	Adapted from https://github.com/mattdesl
	Distributed under MIT License https://github.com/mattdesl/eases/blob/master/LICENSE.md
	*/


	/**
	 * @param {number} t
	 * @returns {number}
	 */
	function cubicOut(t) {
		const f = t - 1.0;
		return f * f * f + 1.0;
	}

	/** @import { FlipParams, AnimationConfig } from './public.js' */

	/**
	 * The flip function calculates the start and end position of an element and animates between them, translating the x and y values.
	 * `flip` stands for [First, Last, Invert, Play](https://aerotwist.com/blog/flip-your-animations/).
	 *
	 * @param {Element} node
	 * @param {{ from: DOMRect; to: DOMRect }} fromTo
	 * @param {FlipParams} params
	 * @returns {AnimationConfig}
	 */
	function flip(node, { from, to }, params = {}) {
		var style = getComputedStyle(node);
		var zoom = get_zoom(node); // https://drafts.csswg.org/css-viewport/#effective-zoom

		var transform = style.transform === 'none' ? '' : style.transform;
		var [ox, oy] = style.transformOrigin.split(' ').map(parseFloat);
		var dsx = from.width / to.width;
		var dsy = from.height / to.height;

		var dx = (from.left + dsx * ox - (to.left + ox)) / zoom;
		var dy = (from.top + dsy * oy - (to.top + oy)) / zoom;
		var { delay = 0, duration = (d) => Math.sqrt(d) * 120, easing = cubicOut } = params;

		return {
			delay,
			duration: typeof duration === 'function' ? duration(Math.sqrt(dx * dx + dy * dy)) : duration,
			easing,
			css: (t, u) => {
				var x = u * dx;
				var y = u * dy;
				var sx = t + u * dsx;
				var sy = t + u * dsy;
				return `transform: ${transform} scale(${sx}, ${sy}) translate(${x}px, ${y}px);`;
			}
		};
	}

	/**
	 * @param {Element} element
	 */
	function get_zoom(element) {
		if ('currentCSSZoom' in element) {
			return /** @type {number} */ (element.currentCSSZoom);
		}

		/** @type {Element | null} */
		var current = element;
		var zoom = 1;

		while (current !== null) {
			zoom *= +getComputedStyle(current).zoom;
			current = /** @type {Element | null} */ (current.parentElement);
		}

		return zoom;
	}

	/** @import { BlurParams, CrossfadeParams, DrawParams, FadeParams, FlyParams, ScaleParams, SlideParams, TransitionConfig } from './public' */
	/** @param {number} x */
	const linear = (x) => x;

	/**
	 * Animates the opacity of an element from 0 to the current opacity for `in` transitions and from the current opacity to 0 for `out` transitions.
	 *
	 * @param {Element} node
	 * @param {FadeParams} [params]
	 * @returns {TransitionConfig}
	 */
	function fade(node, { delay = 0, duration = 400, easing = linear } = {}) {
		const o = +getComputedStyle(node).opacity;
		return {
			delay,
			duration,
			easing,
			css: (t) => `opacity: ${t * o}`
		};
	}

	var root_1$o = template(`<option selected class="svelte-75ckfb"> </option>`);
	var root_4$a = template(`<option selected class="svelte-75ckfb"> </option>`);
	var root_7$3 = template(`<div class="tags has-addons svelte-75ckfb"><span class="tag svelte-75ckfb"> </span> <span class="tag is-delete svelte-75ckfb"></span></div>`);
	var root_6$8 = template(`<div class="svelte-75ckfb"><!></div>`);
	var root_8$2 = template(`<span class="autocomplete-clear-button svelte-75ckfb"><!></span>`);
	var root_11$3 = template(`<div class="autocomplete-list-item svelte-75ckfb"><!></div>`);
	var root_17 = template(`<div class="autocomplete-list-item-no-results svelte-75ckfb"> </div>`);
	var root_9$1 = template(`<!> <!> <!>`, 1);
	var root_19$1 = template(`<div class="autocomplete-list-item-loading svelte-75ckfb"><!></div>`);
	var root_22$1 = template(`<div class="autocomplete-list-item-create svelte-75ckfb"><!></div>`);
	var root_25 = template(`<div class="autocomplete-list-item-no-results svelte-75ckfb"><!></div>`);
	var root$t = template(`<div><select class="svelte-75ckfb"><!></select> <div class="input-container svelte-75ckfb"><!> <input> <!></div> <div><!></div></div>`);

	function SimpleAutocomplete($$anchor, $$props) {
		const $$sanitized_props = legacy_rest_props($$props, [
			"children",
			"$$slots",
			"$$events",
			"$$legacy"
		]);

		const $$restProps = legacy_rest_props($$sanitized_props, [
			"highlightFilter",
			"items",
			"searchFunction",
			"labelFieldName",
			"keywordsFieldName",
			"valueFieldName",
			"labelFunction",
			"keywordsFunction",
			"valueFunction",
			"keywordsCleanFunction",
			"textCleanFunction",
			"beforeChange",
			"onChange",
			"onFocus",
			"onBlur",
			"onCreate",
			"selectFirstIfEmpty",
			"minCharactersToSearch",
			"maxItemsToShowInList",
			"multiple",
			"create",
			"ignoreAccents",
			"matchAllKeywords",
			"sortByMatchedKeywords",
			"itemFilterFunction",
			"itemSortFunction",
			"lock",
			"delay",
			"localFiltering",
			"localSorting",
			"cleanUserText",
			"lowercaseKeywords",
			"closeOnBlur",
			"orderableSelection",
			"hideArrow",
			"showClear",
			"clearText",
			"showLoadingIndicator",
			"noResultsText",
			"loadingText",
			"moreItemsText",
			"createText",
			"placeholder",
			"className",
			"inputClassName",
			"inputId",
			"name",
			"selectName",
			"selectId",
			"title",
			"html5autocomplete",
			"autocompleteOffValue",
			"readonly",
			"dropdownClassName",
			"disabled",
			"noInputStyles",
			"required",
			"debug",
			"tabindex",
			"selectedItem",
			"value",
			"highlightedItem",
			"text"
		]);

		push($$props, false);

		const showList = mutable_state();
		const hasSelection = mutable_state();
		const clearable = mutable_state();
		const locked = mutable_state();
		let items = prop($$props, "items", 28, () => []);
		let searchFunction = prop($$props, "searchFunction", 8, false);
		let labelFieldName = prop($$props, "labelFieldName", 8, undefined);
		let keywordsFieldName = prop($$props, "keywordsFieldName", 24, labelFieldName);
		let valueFieldName = prop($$props, "valueFieldName", 8, undefined);

		let labelFunction = prop($$props, "labelFunction", 8, function (item) {
			if (item === undefined || item === null) {
				return "";
			}

			return labelFieldName() ? item[labelFieldName()] : item;
		});

		let keywordsFunction = prop($$props, "keywordsFunction", 8, function (item) {
			if (item === undefined || item === null) {
				return "";
			}

			return keywordsFieldName() ? item[keywordsFieldName()] : labelFunction()(item);
		});

		let valueFunction = prop($$props, "valueFunction", 8, function (item, forceSingle = false) {
			if (item === undefined || item === null) {
				return item;
			}

			if (!multiple() || forceSingle) {
				return valueFieldName() ? item[valueFieldName()] : item;
			} else {
				return item.map((i) => valueFieldName() ? i[valueFieldName()] : i);
			}
		});

		let keywordsCleanFunction = prop($$props, "keywordsCleanFunction", 8, function (keywords) {
			return keywords;
		});

		let textCleanFunction = prop($$props, "textCleanFunction", 8, function (userEnteredText) {
			return userEnteredText;
		});

		let beforeChange = prop($$props, "beforeChange", 8, function (oldSelectedItem, newSelectedItem) {
			return true;
		});

		let onChange = prop($$props, "onChange", 8, function (newSelectedItem) {});
		let onFocus = prop($$props, "onFocus", 8, function () {});
		let onBlur = prop($$props, "onBlur", 8, function () {});

		let onCreate = prop($$props, "onCreate", 8, function (text) {
			if (debug()) {
				console.log("onCreate: " + text);
			}
		});

		let selectFirstIfEmpty = prop($$props, "selectFirstIfEmpty", 8, false);
		let minCharactersToSearch = prop($$props, "minCharactersToSearch", 8, 1);
		let maxItemsToShowInList = prop($$props, "maxItemsToShowInList", 8, 0);
		let multiple = prop($$props, "multiple", 8, false);
		let create = prop($$props, "create", 8, false);
		let ignoreAccents = prop($$props, "ignoreAccents", 8, true);
		let matchAllKeywords = prop($$props, "matchAllKeywords", 8, true);
		let sortByMatchedKeywords = prop($$props, "sortByMatchedKeywords", 8, false);
		let itemFilterFunction = prop($$props, "itemFilterFunction", 8, undefined);
		let itemSortFunction = prop($$props, "itemSortFunction", 8, undefined);
		let lock = prop($$props, "lock", 8, false);
		let delay = prop($$props, "delay", 8, 0);
		let localFiltering = prop($$props, "localFiltering", 8, true);
		let localSorting = prop($$props, "localSorting", 8, true);
		let cleanUserText = prop($$props, "cleanUserText", 8, true);
		let lowercaseKeywords = prop($$props, "lowercaseKeywords", 8, true);
		let closeOnBlur = prop($$props, "closeOnBlur", 8, false);
		let orderableSelection = prop($$props, "orderableSelection", 8, false);
		let hideArrow = prop($$props, "hideArrow", 8, false);
		let showClear = prop($$props, "showClear", 8, false);
		let clearText = prop($$props, "clearText", 8, "&#10006;");
		let showLoadingIndicator = prop($$props, "showLoadingIndicator", 8, false);
		let noResultsText = prop($$props, "noResultsText", 8, "No results found");
		let loadingText = prop($$props, "loadingText", 8, "Loading results...");
		let moreItemsText = prop($$props, "moreItemsText", 8, "items not shown");
		let createText = prop($$props, "createText", 8, "Not found, add anyway?");
		let placeholder = prop($$props, "placeholder", 8, undefined);
		let className = prop($$props, "className", 8, undefined);
		let inputClassName = prop($$props, "inputClassName", 8, undefined);
		let inputId = prop($$props, "inputId", 8, undefined);
		let name = prop($$props, "name", 8, undefined);
		let selectName = prop($$props, "selectName", 8, undefined);
		let selectId = prop($$props, "selectId", 8, undefined);
		let title = prop($$props, "title", 8, undefined);
		let html5autocomplete = prop($$props, "html5autocomplete", 8, undefined);
		let autocompleteOffValue = prop($$props, "autocompleteOffValue", 8, "off");
		let readonly = prop($$props, "readonly", 8, undefined);
		let dropdownClassName = prop($$props, "dropdownClassName", 8, undefined);
		let disabled = prop($$props, "disabled", 8, false);
		let noInputStyles = prop($$props, "noInputStyles", 8, false);
		let required = prop($$props, "required", 8, null);
		let debug = prop($$props, "debug", 8, false);
		let tabindex = prop($$props, "tabindex", 8, 0);
		let selectedItem = prop($$props, "selectedItem", 28, () => multiple() ? [] : undefined);
		let value = prop($$props, "value", 12, undefined);
		let highlightedItem = prop($$props, "highlightedItem", 12, undefined);
		// --- Internal State ----
		const uniqueId = "sautocomplete-" + Math.floor(Math.random() * 1000);
		// HTML elements
		let input = mutable_state();
		let list = mutable_state();
		let inputContainer = mutable_state();
		// UI state
		let opened = mutable_state(false);
		let loading = mutable_state(false);
		let highlightIndex = mutable_state(-1);
		let text$1 = prop($$props, "text", 12, undefined);
		let filteredTextLength = mutable_state(0);
		// view model
		let filteredListItems = mutable_state();
		let listItems = [];
		// requests/responses counters
		let lastRequestId = 0;
		let lastResponseId = 0;
		// other state
		let inputDelayTimeout;
		let setPositionOnNextUpdate = mutable_state(false);

		// --- Lifecycle events ---
		afterUpdate(() => {
			if (get$2(setPositionOnNextUpdate)) {
				setScrollAwareListPosition();
			}

			set(setPositionOnNextUpdate, false);
		});

		// --- Functions ---
		function safeFunction(theFunction, argument) {
			if (typeof theFunction !== "function") {
				console.error("Not a function: " + theFunction + ", argument: " + argument);
				return undefined;
			}

			let result;

			try {
				result = theFunction(argument);
			} catch(error) {
				console.warn("Error executing Autocomplete function on value: " + argument + " function: " + theFunction);
			}

			return result;
		}

		function safeStringFunction(theFunction, argument) {
			let result = safeFunction(theFunction, argument);

			if (result === undefined || result === null) {
				result = "";
			}

			if (typeof result !== "string") {
				result = result.toString();
			}

			return result;
		}

		function safeLabelFunction(item) {
			// console.log("labelFunction: " + labelFunction);
			// console.log("safeLabelFunction, item: " + item);
			return safeStringFunction(labelFunction(), item);
		}

		function safeKeywordsFunction(item) {
			// console.log("safeKeywordsFunction");
			const keywords = safeStringFunction(keywordsFunction(), item);
			let result = safeStringFunction(keywordsCleanFunction(), keywords);

			result = lowercaseKeywords() ? result.toLowerCase().trim() : result;

			if (ignoreAccents()) {
				result = removeAccents(result);
			}

			if (debug()) {
				console.log("Extracted keywords: '" + result + "' from item: " + JSON.stringify(item));
			}

			return result;
		}

		function prepareListItems() {
			let timerId;

			if (debug()) {
				timerId = `Autocomplete prepare list ${inputId() ? `(id: ${inputId()})` : ""}`;
				console.time(timerId);
				console.log("Prepare items to search");
				console.log("items: " + JSON.stringify(items()));
			}

			if (!Array.isArray(items())) {
				console.warn("Autocomplete items / search function did not return array but", items());
				items([]);
			}

			const length = items() ? items().length : 0;

			listItems = new Array(length);

			if (length > 0) {
				items().forEach((item, i) => {
					const listItem = getListItem(item);

					if (listItem === undefined) {
						console.log("Undefined item for: ", item);
					}

					listItems[i] = listItem;
				});
			}

			set(filteredListItems, listItems);

			if (debug()) {
				console.log(listItems.length + " items to search");
				console.timeEnd(timerId);
			}
		}

		function getListItem(item) {
			return {
				// keywords representation of the item
				keywords: localFiltering() ? safeKeywordsFunction(item) : [],
				// item label
				label: safeLabelFunction(item),
				// store reference to the origial item
				item
			};
		}

		function onSelectedItemChanged() {
			value(valueFunction()(selectedItem()));

			if (selectedItem() && !multiple()) {
				text$1(safeLabelFunction(selectedItem()));
			}

			set(filteredListItems, listItems);
			onChange()(selectedItem());
		}

		function prepareUserEnteredText(userEnteredText) {
			if (userEnteredText === undefined || userEnteredText === null) {
				return "";
			}

			if (!cleanUserText()) {
				return userEnteredText;
			}

			const textFiltered = userEnteredText.replace(/[&/\\#,+()$~%.'":*?<>{}]/g, " ").trim();
			const cleanUserEnteredText = safeStringFunction(textCleanFunction(), textFiltered);
			const textTrimmed = lowercaseKeywords() ? cleanUserEnteredText.toLowerCase().trim() : cleanUserEnteredText.trim();

			return textTrimmed;
		}

		function numberOfMatches(listItem, searchWords) {
			if (!listItem) {
				return 0;
			}

			const itemKeywords = listItem.keywords;
			let matches = 0;

			searchWords.forEach((searchWord) => {
				if (itemKeywords.includes(searchWord)) {
					matches++;
				}
			});

			return matches;
		}

		async function search() {
			let timerId;

			if (debug()) {
				timerId = `Autocomplete search ${inputId() ? `(id: ${inputId()})` : ""}`;
				console.time(timerId);
				console.log("Searching user entered text: '" + text$1() + "'");
			}

			let textFiltered = prepareUserEnteredText(text$1());

			if (minCharactersToSearch() > 1 && textFiltered.length < minCharactersToSearch()) {
				textFiltered = "";
			}

			set(filteredTextLength, textFiltered.length);

			if (debug()) {
				console.log("Changed user entered text '" + text$1() + "' into '" + textFiltered + "'");
			}

			// if no search text load all items
			if (textFiltered === "") {
				if (searchFunction()) {
					// we will need to rerun the search
					items([]);

					if (debug()) {
						console.log("User entered text is empty clear list of items");
					}
				} else {
					set(filteredListItems, listItems);

					if (debug()) {
						console.log("User entered text is empty set the list of items to all items");
					}
				}

				if (closeIfMinCharsToSearchReached()) {
					if (debug()) {
						console.timeEnd(timerId);
					}

					return;
				}
			}

			if (!searchFunction()) {
				// internal search
				processListItems(textFiltered);
			} else {
				// external search which provides items
				lastRequestId = lastRequestId + 1;

				const currentRequestId = lastRequestId;

				set(loading, true);

				// searchFunction is a generator
				if (searchFunction().constructor.name === "AsyncGeneratorFunction") {
					for await (const chunk of searchFunction()(textFiltered, maxItemsToShowInList())) {
						// a chunk of an old response: throw it away
						if (currentRequestId < lastResponseId) {
							return false;
						}

						// a chunk for a new response: reset the item list
						if (currentRequestId > lastResponseId) {
							items([]);
						}

						lastResponseId = currentRequestId;
						items([...items(), ...chunk]);
						processListItems(textFiltered);
					}

					// there was nothing in the chunk
					if (lastResponseId < currentRequestId) {
						lastResponseId = currentRequestId;
						items([]);
						processListItems(textFiltered);
					}
				} else // searchFunction is a regular function
				{
					let result = await searchFunction()(textFiltered, maxItemsToShowInList());

					// If a response to a newer request has been received
					// while responses to this request were being loaded,
					// then we can just throw away this outdated results.
					if (currentRequestId < lastResponseId) {
						return false;
					}

					lastResponseId = currentRequestId;
					items(result);
					processListItems(textFiltered);
				}

				set(loading, false);
			}

			if (debug()) {
				console.timeEnd(timerId);
				console.log("Search found " + get$2(filteredListItems).length + " items");
			}
		}

		function defaultItemFilterFunction(listItem, searchWords) {
			const matches = numberOfMatches(listItem, searchWords);

			if (matchAllKeywords()) {
				return matches >= searchWords.length;
			} else {
				return matches > 0;
			}
		}

		function defaultItemSortFunction(obj1, obj2, searchWords) {
			return numberOfMatches(obj2, searchWords) - numberOfMatches(obj1, searchWords);
		}

		function processListItems(textFiltered) {
			// cleans, filters, orders, and highlights the list items
			prepareListItems();

			const textFilteredWithoutAccents = ignoreAccents() ? removeAccents(textFiltered) : textFiltered;
			const searchWords = textFilteredWithoutAccents.split(/\s+/g).filter((word) => word !== "");
			// local search
			let tempfilteredListItems;

			if (localFiltering()) {
				if (itemFilterFunction()) {
					tempfilteredListItems = listItems.filter((item) => itemFilterFunction()(item.item, searchWords));
				} else {
					tempfilteredListItems = listItems.filter((item) => defaultItemFilterFunction(item, searchWords));
				}

				if (localSorting()) {
					if (itemSortFunction()) {
						tempfilteredListItems = tempfilteredListItems.sort((item1, item2) => itemSortFunction()(item1.item, item2.item, searchWords));
					} else {
						if (sortByMatchedKeywords()) {
							tempfilteredListItems = tempfilteredListItems.sort((item1, item2) => defaultItemSortFunction(item1, item2, searchWords));
						}
					}
				}
			} else {
				tempfilteredListItems = listItems;
			}

			const hlfilter = highlightFilter(searchWords, "label");

			set(filteredListItems, tempfilteredListItems.map(hlfilter));
			closeIfMinCharsToSearchReached();
			return true;
		}

		// $: text, search();
		function afterCreate(createdItem) {
			let listItem;

			if (debug()) {
				console.log("createdItem", createdItem);
			}

			if ("undefined" !== typeof createdItem) {
				prepareListItems();
				set(filteredListItems, listItems);

				let index = findItemIndex(createdItem, get$2(filteredListItems));

				// if the items array was not updated, add the created item manually
				if (index <= 0) {
					items([createdItem]);
					prepareListItems();
					set(filteredListItems, listItems);
					index = 0;
				}

				if (index >= 0) {
					set(highlightIndex, index);
					listItem = get$2(filteredListItems)[get$2(highlightIndex)];
				}
			}

			return listItem;
		}

		function selectListItem(listItem) {
			if (debug()) {
				console.log("selectListItem", listItem);
			}

			if ("undefined" === typeof listItem && create()) {
				// allow undefined items if create is enabled
				const createdItem = onCreate()(text$1());

				if ("undefined" !== typeof createdItem) {
					if (typeof createdItem.then === "function") {
						createdItem.then((newItem) => {
							if ("undefined" !== typeof newItem) {
								const newListItem = afterCreate(newItem);

								if ("undefined" !== typeof newListItem) {
									selectListItem(newListItem);
								}
							}
						});

						return true;
					} else {
						listItem = afterCreate(createdItem);
					}
				}
			}

			if ("undefined" === typeof listItem) {
				if (debug()) {
					console.log(`listItem is undefined. Can not select.`);
				}

				return false;
			}

			if (get$2(locked)) {
				return true;
			}

			const newSelectedItem = listItem.item;

			if (beforeChange()(selectedItem(), newSelectedItem)) {
				// simple selection
				if (!multiple()) {
					selectedItem(undefined); // triggers change even if the the same item is selected
					selectedItem(newSelectedItem);
				} else // first selection of multiple ones
				if (!selectedItem()) {
					selectedItem([newSelectedItem]);
				} else // selecting something already selected => unselect it
				if (selectedItem().includes(newSelectedItem)) {
					selectedItem(selectedItem().filter((i) => i !== newSelectedItem));
				} else // adds the element to the selection
				{
					selectedItem([...selectedItem(), newSelectedItem]);
				}
			}

			return true;
		}

		function selectItem() {
			if (debug()) {
				console.log("selectItem", get$2(highlightIndex));
			}

			const listItem = get$2(filteredListItems)[get$2(highlightIndex)];

			if (selectListItem(listItem)) {
				if (debug()) {
					console.log("selectListItem true, closing");
				}

				close();

				if (multiple()) {
					text$1("");
					get$2(input).focus();
				}
			} else {
				if (debug()) {
					console.log("selectListItem false, not closing");
				}
			}
		}

		function up() {
			if (debug()) {
				console.log("up");
			}

			open();

			if (get$2(highlightIndex) > 0) {
				update(highlightIndex, -1);
			}

			highlight();
		}

		function down() {
			if (debug()) {
				console.log("down");
			}

			open();

			if (get$2(highlightIndex) < get$2(filteredListItems).length - 1) {
				update(highlightIndex);
			}

			highlight();
		}

		function highlight() {
			if (debug()) {
				console.log("highlight");
			}

			const query = ".selected";

			if (debug()) {
				console.log("Seaching DOM element: " + query + " in " + get$2(list));
			}

			/**
			 * @param {Element} el
			 */
			const el = get$2(list) && get$2(list).querySelector(query);

			if (el) {
				if (typeof el.scrollIntoViewIfNeeded === "function") {
					if (debug()) {
						console.log("Scrolling selected item into view");
					}

					el.scrollIntoViewIfNeeded();
				} else if (el.scrollIntoView === "function") {
					if (debug()) {
						console.log("Scrolling selected item into view");
					}

					el.scrollIntoView();
				} else {
					if (debug()) {
						console.warn("Could not scroll selected item into view, scrollIntoViewIfNeeded not supported");
					}
				}
			} else {
				if (debug()) {
					console.warn("Selected item not found to scroll into view");
				}
			}
		}

		function onListItemClick(listItem) {
			if (debug()) {
				console.log("onListItemClick");
			}

			if (selectListItem(listItem)) {
				close();

				if (multiple()) {
					text$1("");
					get$2(input).focus();
				}
			}
		}

		function onDocumentClick(e) {
			if (debug()) {
				console.log("onDocumentClick");
			}

			if (e.composedPath().some((path) => path.classList && path.classList.contains(uniqueId))) {
				if (debug()) {
					console.log("onDocumentClick inside");
				}

				// resetListToAllItemsAndOpen();
				highlight();
			} else {
				if (debug()) {
					console.log("onDocumentClick outside");
				}

				close();
			}
		}

		function onKeyDown(e) {
			if (debug()) {
				console.log("onKeyDown");
			}

			let key = e.key;

			if (key === "Tab" && e.shiftKey) key = "ShiftTab";

			const fnmap = {
				Tab: get$2(opened) ? close : null,
				ShiftTab: get$2(opened) ? close : null,
				ArrowDown: down.bind(this),
				ArrowUp: up.bind(this),
				Escape: onEsc.bind(this),
				Backspace: multiple() && get$2(hasSelection) && !text$1() ? onBackspace.bind(this) : null
			};

			const fn = fnmap[key];

			if (typeof fn === "function") {
				fn(e);
			}
		}

		function onKeyPress(e) {
			if (debug()) {
				console.log("onKeyPress");
			}

			if (e.key === "Enter") {
				onEnter(e);
			}
		}

		function onEnter(e) {
			if (get$2(opened)) {
				e.preventDefault();
				selectItem();
			}
		}

		function onInput(e) {
			if (debug()) {
				console.log("onInput");
			}

			text$1(e.target.value);

			if (inputDelayTimeout) {
				clearTimeout(inputDelayTimeout);
			}

			if (delay()) {
				inputDelayTimeout = setTimeout(processInput, delay());
			} else {
				processInput();
			}
		}

		function unselectItem(tag) {
			if (debug()) {
				console.log("unselectItem", tag);
			}

			selectedItem(selectedItem().filter((i) => i !== tag));
			get$2(input).focus();
		}

		function processInput() {
			if (search()) {
				set(highlightIndex, 0);
				open();
			}
		}

		function onInputClick() {
			if (debug()) {
				console.log("onInputClick");
			}

			resetListToAllItemsAndOpen();
		}

		function onEsc(e) {
			if (debug()) {
				console.log("onEsc");
			}

			//if (text) return clear();
			e.stopPropagation();

			if (get$2(opened)) {
				get$2(input).focus();
				close();
			}
		}

		function onBackspace(e) {
			if (debug()) {
				console.log("onBackspace");
			}

			unselectItem(selectedItem()[selectedItem().length - 1]);
		}

		function onFocusInternal() {
			if (debug()) {
				console.log("onFocus");
			}

			onFocus()();
			resetListToAllItemsAndOpen();
		}

		function onBlurInternal() {
			if (debug()) {
				console.log("onBlur");
			}

			if (closeOnBlur()) {
				close();
			}

			onBlur()();
		}

		function resetListToAllItemsAndOpen() {
			if (debug()) {
				console.log("resetListToAllItemsAndOpen");
			}

			if (searchFunction() && !listItems.length) {
				search();
			} else if (!text$1()) {
				set(filteredListItems, listItems);
			}

			open();

			// find selected item
			if (selectedItem()) {
				if (debug()) {
					console.log("Searching currently selected item: " + JSON.stringify(selectedItem()));
				}

				const index = findItemIndex(selectedItem(), get$2(filteredListItems));

				if (index >= 0) {
					set(highlightIndex, index);
					highlight();
				}
			}
		}

		function findItemIndex(item, items) {
			if (debug()) {
				console.log("Finding index for item", item);
			}

			let index = -1;

			for (let i = 0; i < items.length; i++) {
				const listItem = items[i];

				if ("undefined" === typeof listItem) {
					if (debug()) {
						console.log(`listItem ${i} is undefined. Skipping.`);
					}

					continue;
				}

				if (debug()) {
					console.log("Item " + i + ": " + JSON.stringify(listItem));
				}

				if (item === listItem.item) {
					index = i;
					break;
				}
			}

			if (debug()) {
				if (index >= 0) {
					console.log("Found index for item: " + index);
				} else {
					console.warn("Not found index for item: " + item);
				}
			}

			return index;
		}

		function open() {
			if (debug()) {
				console.log("open");
			}

			// check if the search text has more than the min chars required
			if (get$2(locked) || notEnoughSearchText()) {
				return;
			}

			set(setPositionOnNextUpdate, true);
			set(opened, true);
		}

		function close() {
			if (debug()) {
				console.log("close");
			}

			set(opened, false);
			set(loading, false);

			if (!text$1() && selectFirstIfEmpty()) {
				set(highlightIndex, 0);
				selectItem();
			}
		}

		function notEnoughSearchText() {
			return minCharactersToSearch() > 0 && get$2(filteredTextLength) < minCharactersToSearch() && (// When no searchFunction is defined, the menu should always open when the input is focused
			searchFunction() || get$2(filteredTextLength) > 0);
		}

		function closeIfMinCharsToSearchReached() {
			if (notEnoughSearchText()) {
				close();
				return true;
			}

			return false;
		}

		function clear() {
			if (debug()) {
				console.log("clear");
			}

			text$1("");
			selectedItem(multiple() ? [] : undefined);

			setTimeout(() => {
				get$2(input).focus();
			});
		}

		function highlightFilter(keywords, field) {
			return (item) => {
				let label = item[field];
				const newItem = Object.assign({ highlighted: undefined }, item);

				newItem.highlighted = label;

				const labelLowercase = label.toLowerCase();
				const labelLowercaseNoAc = ignoreAccents() ? removeAccents(labelLowercase) : labelLowercase;

				if (keywords && keywords.length) {
					const positions = [];

					for (let i = 0; i < keywords.length; i++) {
						let keyword = keywords[i];

						if (ignoreAccents()) {
							keyword = removeAccents(keyword);
						}

						const keywordLen = keyword.length;
						let pos1 = 0;

						do {
							pos1 = labelLowercaseNoAc.indexOf(keyword, pos1);

							if (pos1 >= 0) {
								let pos2 = pos1 + keywordLen;

								positions.push([pos1, pos2]);
								pos1 = pos2;
							}
						} while (pos1 !== -1);
					}

					if (positions.length > 0) {
						const keywordPatterns = new Set();

						for (let i = 0; i < positions.length; i++) {
							const pair = positions[i];
							const pos1 = pair[0];
							const pos2 = pair[1];
							const keywordPattern = labelLowercase.substring(pos1, pos2);

							keywordPatterns.add(keywordPattern);
						}

						for (let keywordPattern of keywordPatterns) {
							// FIXME pst: workarond for wrong replacement <b> tags
							if (keywordPattern === "b") {
								continue;
							}

							const reg = new RegExp("(" + keywordPattern + ")", "ig");
							const newHighlighted = newItem.highlighted.replace(reg, "<b>$1</b>");

							newItem.highlighted = newHighlighted;
						}
					}
				}

				return newItem;
			};
		}

		function removeAccents(str) {
			return str.normalize("NFD").replace(/[\u0300-\u036f]/g, "");
		}

		function isConfirmed(listItem) {
			if (!selectedItem()) {
				return false;
			}

			if (multiple()) {
				return selectedItem().includes(listItem);
			} else {
				return listItem === selectedItem();
			}
		}

		let draggingOver = mutable_state(false);

		function dragstart(event, index) {
			if (orderableSelection()) {
				event.dataTransfer.setData("source", index);
			}
		}

		function dragover(event, index) {
			if (orderableSelection()) {
				event.preventDefault();
				set(draggingOver, index);
			}
		}

		function dragleave(event, index) {
			if (orderableSelection()) {
				set(draggingOver, false);
			}
		}

		function drop(event, index) {
			if (orderableSelection()) {
				event.preventDefault();
				set(draggingOver, false);

				let from = parseInt(event.dataTransfer.getData("source"));
				let to = index;

				if (from != to) {
					moveSelectedItem(from, to);
				}
			}
		}

		function moveSelectedItem(from, to) {
			let newSelection = [...selectedItem()];

			if (from < to) {
				newSelection.splice(to + 1, 0, newSelection[from]);
				newSelection.splice(from, 1);
			} else {
				newSelection.splice(to, 0, newSelection[from]);
				newSelection.splice(from + 1, 1);
			}

			selectedItem(newSelection);
		}

		function setScrollAwareListPosition() {
			const { height: viewPortHeight } = window.visualViewport;
			const { bottom: inputButtom, height: inputHeight } = get$2(inputContainer).getBoundingClientRect();
			const { height: listHeight } = get$2(list).getBoundingClientRect();

			if (inputButtom + listHeight > viewPortHeight) {
				mutate(list, get$2(list).style.top = `-${inputHeight + listHeight}px`);
			} else {
				mutate(list, get$2(list).style.top = "0px");
			}
		}

		legacy_pre_effect(
			() => (
				deep_read_state(items()),
				deep_read_state(searchFunction())
			),
			() => {
				(
					items(),
					searchFunction() || prepareListItems()
				);
			}
		);

		legacy_pre_effect(() => (deep_read_state(selectedItem())), () => {
			(
				selectedItem(),
				onSelectedItemChanged()
			);
		});

		legacy_pre_effect(
			() => (
				get$2(filteredListItems),
				get$2(highlightIndex)
			),
			() => {
				highlightedItem(get$2(filteredListItems) && get$2(highlightIndex) && get$2(highlightIndex) >= 0 && get$2(highlightIndex) < get$2(filteredListItems).length ? get$2(filteredListItems)[get$2(highlightIndex)].item : null);
			}
		);

		legacy_pre_effect(
			() => (
				get$2(opened),
				deep_read_state(items()),
				get$2(filteredTextLength)
			),
			() => {
				set(showList, get$2(opened) && (items() && items().length > 0 || get$2(filteredTextLength) > 0));
			}
		);

		legacy_pre_effect(
			() => (
				deep_read_state(multiple()),
				deep_read_state(selectedItem())
			),
			() => {
				set(hasSelection, multiple() && selectedItem() && selectedItem().length > 0 || !multiple() && selectedItem());
			}
		);

		legacy_pre_effect(
			() => (
				deep_read_state(showClear()),
				deep_read_state(lock()),
				deep_read_state(multiple()),
				get$2(hasSelection)
			),
			() => {
				set(clearable, showClear() || (lock() || multiple()) && get$2(hasSelection));
			}
		);

		legacy_pre_effect(
			() => (
				deep_read_state(lock()),
				get$2(hasSelection)
			),
			() => {
				set(locked, lock() && get$2(hasSelection));
			}
		);

		legacy_pre_effect_reset();
		init();

		var div = root$t();

		event("click", $window, onDocumentClick);
		event("scroll", $window, () => set(setPositionOnNextUpdate, true));

		var select = child(div);
		var node = child(select);

		{
			var consequent = ($$anchor) => {
				var option = root_1$o();
				var option_value = {};
				var text_1 = child(option, true);

				template_effect(() => set_text(text_1, safeLabelFunction(selectedItem())));
				reset(option);

				template_effect(() => {
					if (option_value !== (option_value = valueFunction()(selectedItem(), true))) {
						option.value = null == (option.__value = valueFunction()(selectedItem(), true)) ? "" : valueFunction()(selectedItem(), true);
					}
				});

				append($$anchor, option);
			};

			var alternate = ($$anchor) => {
				var fragment = comment();
				var node_1 = first_child(fragment);

				{
					var consequent_1 = ($$anchor) => {
						var fragment_1 = comment();
						var node_2 = first_child(fragment_1);

						each(node_2, 1, selectedItem, index$d, ($$anchor, i) => {
							var option_1 = root_4$a();
							var option_1_value = {};
							var text_2 = child(option_1, true);

							template_effect(() => set_text(text_2, safeLabelFunction(get$2(i))));
							reset(option_1);

							template_effect(() => {
								if (option_1_value !== (option_1_value = valueFunction()(get$2(i), true))) {
									option_1.value = null == (option_1.__value = valueFunction()(get$2(i), true)) ? "" : valueFunction()(get$2(i), true);
								}
							});

							append($$anchor, option_1);
						});

						append($$anchor, fragment_1);
					};

					if_block(
						node_1,
						($$render) => {
							if (multiple() && get$2(hasSelection)) $$render(consequent_1);
						},
						true
					);
				}

				append($$anchor, fragment);
			};

			if_block(node, ($$render) => {
				if (!multiple() && get$2(hasSelection)) $$render(consequent); else $$render(alternate, false);
			});
		}

		reset(select);

		var div_1 = sibling(select, 2);
		var node_3 = child(div_1);

		{
			var consequent_2 = ($$anchor) => {
				var fragment_2 = comment();
				var node_4 = first_child(fragment_2);

				each(node_4, 11, selectedItem, (tagItem) => valueFunction()(tagItem, true), ($$anchor, tagItem, i) => {
					var div_2 = root_6$8();

					set_attribute(div_2, "draggable", true);

					var node_5 = child(div_2);

					slot(
						node_5,
						$$props,
						"tag",
						{
							get label() {
								return safeLabelFunction(get$2(tagItem));
							},
							get item() {
								return get$2(tagItem);
							},
							unselectItem
						},
						($$anchor) => {
							var div_3 = root_7$3();
							var span = child(div_3);
							var text_3 = child(span, true);

							template_effect(() => set_text(text_3, safeLabelFunction(get$2(tagItem))));
							reset(span);

							var span_1 = sibling(span, 2);
							var event_handler = derived(() => unselectItem(get$2(tagItem)));

							reset(div_3);

							event("click", span_1, preventDefault(function (...$$args) {
								get$2(event_handler)?.apply(this, $$args);
							}));

							event("keypress", span_1, preventDefault((e) => {
								e.key == "Enter" && unselectItem(get$2(tagItem));
							}));

							append($$anchor, div_3);
						}
					);

					reset(div_2);
					template_effect(() => toggle_class(div_2, "is-active", get$2(draggingOver) === get$2(i)));
					animation(div_2, () => flip, () => ({ duration: 200 }));
					transition(3, div_2, () => fade, () => ({ duration: 200 }));
					event("dragstart", div_2, (event) => dragstart(event, get$2(i)));
					event("dragover", div_2, (event) => dragover(event, get$2(i)));
					event("dragleave", div_2, (event) => dragleave(event, get$2(i)));
					event("drop", div_2, (event) => drop(event, get$2(i)));
					append($$anchor, div_2);
				});

				append($$anchor, fragment_2);
			};

			if_block(node_3, ($$render) => {
				if (multiple() && get$2(hasSelection)) $$render(consequent_2);
			});
		}

		var input_1 = sibling(node_3, 2);

		remove_input_defaults(input_1);

		let attributes;

		bind_this(input_1, ($$value) => set(input, $$value), () => get$2(input));

		var node_6 = sibling(input_1, 2);

		{
			var consequent_3 = ($$anchor) => {
				var span_2 = root_8$2();
				var node_7 = child(span_2);

				html(node_7, clearText);
				reset(span_2);
				event("click", span_2, clear);

				event("keypress", span_2, (e) => {
					e.key == "Enter" && clear();
				});

				append($$anchor, span_2);
			};

			if_block(node_6, ($$render) => {
				if (get$2(clearable)) $$render(consequent_3);
			});
		}

		reset(div_1);
		bind_this(div_1, ($$value) => set(inputContainer, $$value), () => get$2(inputContainer));

		var div_4 = sibling(div_1, 2);
		var node_8 = child(div_4);

		{
			var consequent_8 = ($$anchor) => {
				var fragment_3 = root_9$1();
				var node_9 = first_child(fragment_3);

				slot(
					node_9,
					$$props,
					"dropdown-header",
					{
						get nbItems() {
							return get$2(filteredListItems).length;
						},
						get maxItemsToShowInList() {
							return maxItemsToShowInList();
						}
					},
					null
				);

				var node_10 = sibling(node_9, 2);

				each(node_10, 1, () => get$2(filteredListItems), index$d, ($$anchor, listItem, i) => {
					var fragment_4 = comment();
					var node_11 = first_child(fragment_4);

					{
						var consequent_5 = ($$anchor) => {
							var div_5 = root_11$3();
							const class_directive = derived_safe_equal(() => isConfirmed(get$2(listItem).item));

							template_effect(() => toggle_class(div_5, "confirmed", get$2(class_directive)));

							var node_12 = child(div_5);

							slot(
								node_12,
								$$props,
								"item",
								{
									get item() {
										return get$2(listItem).item;
									},
									get label() {
										return get$2(listItem).highlighted ? get$2(listItem).highlighted : get$2(listItem).label;
									}
								},
								($$anchor) => {
									var fragment_5 = comment();
									var node_13 = first_child(fragment_5);

									{
										var consequent_4 = ($$anchor) => {
											var fragment_6 = comment();
											var node_14 = first_child(fragment_6);

											html(node_14, () => get$2(listItem).highlighted);
											append($$anchor, fragment_6);
										};

										var alternate_1 = ($$anchor) => {
											var fragment_7 = comment();
											var node_15 = first_child(fragment_7);

											html(node_15, () => get$2(listItem).label);
											append($$anchor, fragment_7);
										};

										if_block(node_13, ($$render) => {
											if (get$2(listItem).highlighted) $$render(consequent_4); else $$render(alternate_1, false);
										});
									}

									append($$anchor, fragment_5);
								}
							);

							reset(div_5);
							template_effect(() => toggle_class(div_5, "selected", i === get$2(highlightIndex)));
							event("click", div_5, () => onListItemClick(get$2(listItem)));

							event("keypress", div_5, (e) => {
								e.key == "Enter" && onListItemClick(get$2(listItem));
							});

							event("pointerenter", div_5, () => {
								set(highlightIndex, i);
							});

							append($$anchor, div_5);
						};

						if_block(node_11, ($$render) => {
							if (get$2(listItem) && (maxItemsToShowInList() <= 0 || i < maxItemsToShowInList())) $$render(consequent_5);
						});
					}

					append($$anchor, fragment_4);
				});

				var node_16 = sibling(node_10, 2);

				slot(
					node_16,
					$$props,
					"dropdown-footer",
					{
						get nbItems() {
							return get$2(filteredListItems).length;
						},
						get maxItemsToShowInList() {
							return maxItemsToShowInList();
						}
					},
					($$anchor) => {
						var fragment_8 = comment();
						var node_17 = first_child(fragment_8);

						{
							var consequent_7 = ($$anchor) => {
								var fragment_9 = comment();
								var node_18 = first_child(fragment_9);

								{
									var consequent_6 = ($$anchor) => {
										var div_6 = root_17();
										var text_4 = child(div_6);

										reset(div_6);

										template_effect(() => set_text(text_4, `...${get$2(filteredListItems).length - maxItemsToShowInList() ?? ""}
              ${moreItemsText() ?? ""}`));

										append($$anchor, div_6);
									};

									if_block(node_18, ($$render) => {
										if (moreItemsText()) $$render(consequent_6);
									});
								}

								append($$anchor, fragment_9);
							};

							if_block(node_17, ($$render) => {
								if (maxItemsToShowInList() > 0 && get$2(filteredListItems).length > maxItemsToShowInList()) $$render(consequent_7);
							});
						}

						append($$anchor, fragment_8);
					}
				);

				append($$anchor, fragment_3);
			};

			var alternate_4 = ($$anchor) => {
				var fragment_10 = comment();
				var node_19 = first_child(fragment_10);

				{
					var consequent_9 = ($$anchor) => {
						var div_7 = root_19$1();
						var node_20 = child(div_7);

						slot(
							node_20,
							$$props,
							"loading",
							{
								get loadingText() {
									return loadingText();
								}
							},
							($$anchor) => {
								var text_5 = text();

								template_effect(() => set_text(text_5, loadingText()));
								append($$anchor, text_5);
							}
						);

						reset(div_7);
						append($$anchor, div_7);
					};

					var alternate_3 = ($$anchor) => {
						var fragment_12 = comment();
						var node_21 = first_child(fragment_12);

						{
							var consequent_10 = ($$anchor) => {
								var div_8 = root_22$1();
								var node_22 = child(div_8);

								slot(
									node_22,
									$$props,
									"create",
									{
										get createText() {
											return createText();
										}
									},
									($$anchor) => {
										var text_6 = text();

										template_effect(() => set_text(text_6, createText()));
										append($$anchor, text_6);
									}
								);

								reset(div_8);
								event("click", div_8, selectItem);

								event("keypress", div_8, (e) => {
									e.key == "Enter" && selectItem();
								});

								append($$anchor, div_8);
							};

							var alternate_2 = ($$anchor) => {
								var fragment_14 = comment();
								var node_23 = first_child(fragment_14);

								{
									var consequent_11 = ($$anchor) => {
										var div_9 = root_25();
										var node_24 = child(div_9);

										slot(
											node_24,
											$$props,
											"no-results",
											{
												get noResultsText() {
													return noResultsText();
												}
											},
											($$anchor) => {
												var text_7 = text();

												template_effect(() => set_text(text_7, noResultsText()));
												append($$anchor, text_7);
											}
										);

										reset(div_9);
										append($$anchor, div_9);
									};

									if_block(
										node_23,
										($$render) => {
											if (noResultsText()) $$render(consequent_11);
										},
										true
									);
								}

								append($$anchor, fragment_14);
							};

							if_block(
								node_21,
								($$render) => {
									if (create()) $$render(consequent_10); else $$render(alternate_2, false);
								},
								true
							);
						}

						append($$anchor, fragment_12);
					};

					if_block(
						node_19,
						($$render) => {
							if (get$2(loading) && loadingText()) $$render(consequent_9); else $$render(alternate_3, false);
						},
						true
					);
				}

				append($$anchor, fragment_10);
			};

			if_block(node_8, ($$render) => {
				if (get$2(filteredListItems) && get$2(filteredListItems).length > 0) $$render(consequent_8); else $$render(alternate_4, false);
			});
		}

		reset(div_4);
		bind_this(div_4, ($$value) => set(list, $$value), () => get$2(list));
		reset(div);

		template_effect(() => {
			set_class(div, `${(className() ? className() : '') ?? ""} autocomplete select is-fullwidth ${uniqueId ?? ""} svelte-75ckfb`);
			toggle_class(div, "hide-arrow", hideArrow() || !items().length);
			toggle_class(div, "is-multiple", multiple());
			toggle_class(div, "show-clear", get$2(clearable));
			toggle_class(div, "is-loading", showLoadingIndicator() && get$2(loading));
			set_attribute(select, "name", selectName());
			set_attribute(select, "id", selectId());
			select.multiple = multiple();

			attributes = set_attributes(
				input_1,
				attributes,
				{
					type: "text",
					class: `${(inputClassName() ? inputClassName() : '') ?? ""} ${(noInputStyles() ? '' : 'input autocomplete-input') ?? ""}`,
					id: inputId() ? inputId() : "",
					autocomplete: html5autocomplete() ? "on" : autocompleteOffValue(),
					placeholder: placeholder(),
					name: name(),
					disabled: disabled(),
					required: required(),
					title: title(),
					readonly: readonly() || get$2(locked),
					tabindex: tabindex(),
					...$$restProps
				},
				"svelte-75ckfb"
			);

			set_class(div_4, `${(dropdownClassName() ? dropdownClassName() : '') ?? ""} autocomplete-list ${(get$2(showList) ? '' : 'hidden') ?? ""}
    is-fullwidth svelte-75ckfb`);
		});

		bind_value(input_1, text$1);
		event("input", input_1, onInput);
		event("focus", input_1, onFocusInternal);
		event("blur", input_1, onBlurInternal);
		event("keydown", input_1, onKeyDown);
		event("click", input_1, onInputClick);
		event("keypress", input_1, onKeyPress);
		event("dragover", input_1, (event) => dragover(event, selectedItem().length - 1));
		event("drop", input_1, (event) => drop(event, selectedItem().length - 1));
		append($$anchor, div);
		bind_prop($$props, "highlightFilter", highlightFilter);
		return pop({ highlightFilter });
	}

	var root_3$c = template(`<p> </p>`);

	function Ui_autocomplete($$anchor, $$props) {
		push($$props, true);

		const $$stores = setup_stores();
		const $LOCALE = () => store_get(LOCALE, "$LOCALE", $$stores);

		/**
		 * @typedef {Object} Props
		 * @property {string} [idField]
		 * @property {string} [labelField]
		 * @property {number} [minCharactersToSearch]
		 * @property {boolean} [selectFirstIfEmpty]
		 * @property {number} [maxItemsToShowInList]
		 * @property {string} [noResultsText]
		 * @property {boolean} [showClear]
		 * @property {any} value
		 * @property {string} [placeholder]
		 * @property {string} [fieldname]
		 * @property {boolean} [disabled]
		 * @property {boolean} [readonly]
		 * @property {boolean} [icon]
		 * @property {boolean} [inputStarted]
		 * @property {boolean} [valid]
		 * @property {boolean} [validated]
		 * @property {boolean} [errors]
		 * @property {boolean} [formErrors]
		 * @property {any} [searchFunction]
		 */
		/** @type {Props} */
		let value = prop($$props, "value", 15),
			placeholder = prop($$props, "placeholder", 3, ""),
			fieldname = prop($$props, "fieldname", 3, "checkbox-list"),
			disabled = prop($$props, "disabled", 3, false),
			readonly = prop($$props, "readonly", 3, false),
			required = prop($$props, "required", 3, false),
			valid = prop($$props, "valid", 3, true),
			onchange = prop($$props, "onchange", 3, () => true),
			others = rest_props($$props, [
				"$$slots",
				"$$events",
				"$$legacy",
				"value",
				"placeholder",
				"fieldname",
				"disabled",
				"readonly",
				"required",
				"valid",
				"onchange"
			]);

		let invalid = derived(() => !valid());
		const oninput = UICommon$1.onInput(fieldname(), onchange());
		var fragment = comment();
		var node = first_child(fragment);

		{
			var consequent = ($$anchor) => {
				var value_1 = derived(() => value() ? value().title : "");

				Ui_textfield($$anchor, spread_props(
					{
						get value() {
							return get$2(value_1);
						},
						get fieldname() {
							return fieldname();
						},
						get placeholder() {
							return placeholder();
						}
					},
					() => others
				));
			};

			var alternate_1 = ($$anchor) => {
				var fragment_2 = comment();
				var node_1 = first_child(fragment_2);

				{
					var consequent_1 = ($$anchor) => {
						var p = root_3$c();
						var text = child(p, true);

						reset(p);
						template_effect(() => set_text(text, value() ? value().title : ""));
						append($$anchor, p);
					};

					var alternate = ($$anchor) => {
						SimpleAutocomplete($$anchor, spread_props(
							{
								onChange: oninput,
								get valid() {
									return valid();
								},
								get invalid() {
									return get$2(invalid);
								},
								get required() {
									return required();
								},
								get placeholder() {
									return $LOCALE()[placeholder()];
								}
							},
							() => others,
							{
								get selectedItem() {
									return value();
								},
								set selectedItem($$value) {
									value($$value);
								}
							}
						));
					};

					if_block(
						node_1,
						($$render) => {
							if (readonly()) $$render(consequent_1); else $$render(alternate, false);
						},
						true
					);
				}

				append($$anchor, fragment_2);
			};

			if_block(node, ($$render) => {
				if (disabled()) $$render(consequent); else $$render(alternate_1, false);
			});
		}

		append($$anchor, fragment);
		pop();
	}

	var root_1$n = template(`<p><time> </time></p>`);
	var root_2$h = template(`<input>`);

	function Ui_date($$anchor, $$props) {
		push($$props, true);

		const $$stores = setup_stores();
		const $LOCALE = () => store_get(LOCALE, "$LOCALE", $$stores);

		/** @type {import('./type').UIInputProps} */
		let value = prop($$props, "value", 31, () => proxy(new Date())),
			placeholder = prop($$props, "placeholder", 3, ""),
			fieldname = prop($$props, "fieldname", 3, "datetime"),
			pattern = prop($$props, "pattern", 3, "d{4}-d{2}-d{2}"),
			required = prop($$props, "required", 3, true),
			disabled = prop($$props, "disabled", 3, false),
			readonly = prop($$props, "readonly", 3, false),
			valid = prop($$props, "valid", 3, true),
			classes = prop($$props, "class", 3, ""),
			onchange = prop($$props, "onchange", 3, () => true),
			others = rest_props($$props, [
				"$$slots",
				"$$events",
				"$$legacy",
				"value",
				"placeholder",
				"fieldname",
				"pattern",
				"required",
				"disabled",
				"readonly",
				"valid",
				"class",
				"onchange"
			]);

		onMount(() => {
			if (value() instanceof Date) {
				value(value().toISOString().split("T")[0]);
			} else if (value().indexOf("T") > 0) {
				value(value().split("T")[0]);
			}
		});

		let invalid = derived(() => !valid());
		const oninput = UICommon$1.onInput(fieldname(), onchange());
		var fragment = comment();
		var node = first_child(fragment);

		{
			var consequent = ($$anchor) => {
				var p = root_1$n();
				var time = child(p);
				var text = child(time, true);

				template_effect(() => set_text(text, UICommon$1.tryFormatLocaleDateTime(value())));
				reset(time);
				reset(p);
				template_effect(() => set_attribute(time, "datetime", value()));
				append($$anchor, p);
			};

			var alternate = ($$anchor) => {
				var input = root_2$h();

				remove_input_defaults(input);

				let attributes;

				template_effect(() => attributes = set_attributes(input, attributes, {
					id: `form-field-date-${fieldname() ?? ""}`,
					class: `input ${classes() ?? ""}`,
					type: "date",
					name: fieldname(),
					invalid: get$2(invalid),
					required: required(),
					readonly: readonly(),
					disabled: disabled(),
					placeholder: $LOCALE()[placeholder()],
					pattern: pattern(),
					autocomplete: fieldname(),
					onchange: oninput,
					oninput,
					"aria-controls": `input-field-helper-${fieldname() ?? ""}`,
					"aria-describedby": `input-field-helper-${fieldname() ?? ""}`,
					...others
				}));

				bind_value(input, value);
				append($$anchor, input);
			};

			if_block(node, ($$render) => {
				if (readonly()) $$render(consequent); else $$render(alternate, false);
			});
		}

		append($$anchor, fragment);
		pop();
	}

	var root_2$g = template(`<p> </p>`);
	var root_3$b = template(`<input>`);

	function Ui_datetime_in_tz($$anchor, $$props) {
		push($$props, true);

		function removeMsFromDate(isoDate, markAsZULU = false) {
			return isoDate.split(".")[0] + (markAsZULU ? "" : "Z");
		}

		function shiftDatetime(isoDate, shift) {
			try {
				const dateUtc = new Date(markAsZULU(isoDate)).getTime();
				const offset = shift * -60000;

				if (dateIsValid(dateUtc + offset)) {
					const newDate = new Date(dateUtc + offset);
					const newIsoDate = newDate.toISOString();

					return removeMsFromDate(newIsoDate, true);
				}
			} catch {
				return;
			}
		}

		function markAsZULU(dateString) {
			return dateString && dateString.at(-1) !== "Z" ? dateString + "Z" : dateString;
		}

		/** @type {import('./type').UIInputProps} */
		let fieldname = prop($$props, "fieldname", 3, "datetime"),
			value = prop($$props, "value", 31, () => proxy(removeMsFromDate(new Date().toISOString()))),
			timezoneOffset = prop($$props, "timezoneOffset", 3, 0),
			required = prop($$props, "required", 3, false),
			disabled = prop($$props, "disabled", 3, false),
			readonly = prop($$props, "readonly", 3, false),
			valid = prop($$props, "valid", 3, true),
			classes = prop($$props, "class", 3, ""),
			onchange = prop($$props, "onchange", 3, () => true),
			others = rest_props($$props, [
				"$$slots",
				"$$events",
				"$$legacy",
				"fieldname",
				"value",
				"timezoneOffset",
				"required",
				"disabled",
				"readonly",
				"valid",
				"class",
				"onchange"
			]);

		let shiftedValue = state(undefined),
			prevShiftedValue;

		const setShifted = (val) => {
			if (dateIsValid(val)) {
				prevShiftedValue = get$2(shiftedValue);
				set(shiftedValue, proxy(val));
			}
		};

		const resetShiftedValue = () => {
			set(shiftedValue, proxy(prevShiftedValue));
		};

		onMount(() => {
			setShifted(shiftDatetime(value(), timezoneOffset()));
		});

		const dateIsValid = (date) => {
			try {
				new Date(date);
				return true;
			} catch {
				return false;
			}
		};

		const changed = () => value() !== shiftDatetime(get$2(shiftedValue), -timezoneOffset());

		const dispatchChange = () => {
			setShifted(get$2(shiftedValue));
			value(markAsZULU(shiftDatetime(get$2(shiftedValue), -timezoneOffset())));
			onchange()({ field: fieldname(), value: value() });
		};

		function onChange(ev) {
			if (ev.currentTarget.value && get$2(shiftedValue) && dateIsValid(get$2(shiftedValue))) {
				if (changed()) {
					dispatchChange();
				}

				return true;
			} else {
				resetShiftedValue();
			}

			return false;
		}

		let invalid = derived(() => !valid());
		var fragment = comment();
		var node = first_child(fragment);

		{
			var consequent_1 = ($$anchor) => {
				var fragment_1 = comment();
				var node_1 = first_child(fragment_1);

				{
					var consequent = ($$anchor) => {
						var p = root_2$g();
						var text = child(p, true);

						reset(p);
						template_effect(() => set_text(text, get$2(shiftedValue)));
						append($$anchor, p);
					};

					var alternate = ($$anchor) => {
						var input = root_3$b();

						remove_input_defaults(input);

						let attributes;

						template_effect(() => attributes = set_attributes(input, attributes, {
							id: `form-field-datetime-in-timezone-${fieldname() ?? ""}`,
							class: `input ${classes() ?? ""}`,
							type: "datetime-local",
							name: fieldname(),
							invalid: get$2(invalid),
							disabled: disabled(),
							required: required(),
							readonly: readonly(),
							autocomplete: fieldname(),
							onchange: onChange,
							onblur: onChange,
							oninput: onChange,
							"aria-controls": `input-field-helper-${fieldname() ?? ""}`,
							"aria-describedby": `input-field-helper-${fieldname() ?? ""}`,
							...others
						}));

						bind_value(input, () => get$2(shiftedValue), ($$value) => set(shiftedValue, $$value));
						append($$anchor, input);
					};

					if_block(node_1, ($$render) => {
						if (readonly()) $$render(consequent); else $$render(alternate, false);
					});
				}

				append($$anchor, fragment_1);
			};

			if_block(node, ($$render) => {
				if (get$2(shiftedValue)) $$render(consequent_1);
			});
		}

		append($$anchor, fragment);
		pop();
	}

	var root_1$m = template(`<p> </p>`);
	var root_2$f = template(`<input>`);

	function Ui_email($$anchor, $$props) {
		push($$props, true);

		const $$stores = setup_stores();
		const $LOCALE = () => store_get(LOCALE, "$LOCALE", $$stores);

		/** @type {import('./type').UIInputProps} */
		let value = prop($$props, "value", 15, ""),
			placeholder = prop($$props, "placeholder", 3, ""),
			fieldname = prop($$props, "fieldname", 3, "email"),
			required = prop($$props, "required", 3, true),
			readonly = prop($$props, "readonly", 3, false),
			disabled = prop($$props, "disabled", 3, false),
			valid = prop($$props, "valid", 3, true),
			classes = prop($$props, "class", 3, ""),
			onchange = prop($$props, "onchange", 3, () => true),
			others = rest_props($$props, [
				"$$slots",
				"$$events",
				"$$legacy",
				"value",
				"placeholder",
				"fieldname",
				"required",
				"readonly",
				"disabled",
				"valid",
				"class",
				"onchange"
			]);

		let invalid = derived(() => !valid());
		const oninput = UICommon$1.onInput(fieldname(), onchange());
		var fragment = comment();
		var node = first_child(fragment);

		{
			var consequent = ($$anchor) => {
				var p = root_1$m();
				var text = child(p, true);

				reset(p);
				template_effect(() => set_text(text, value()));
				append($$anchor, p);
			};

			var alternate = ($$anchor) => {
				var input = root_2$f();

				remove_input_defaults(input);

				let attributes;

				template_effect(() => attributes = set_attributes(input, attributes, {
					id: `form-field-email-${fieldname() ?? ""}`,
					class: `input ${classes() ?? ""}`,
					type: "email",
					name: fieldname(),
					invalid: get$2(invalid),
					required: required(),
					readonly: readonly(),
					disabled: disabled(),
					placeholder: $LOCALE()[placeholder()],
					autocomplete: fieldname(),
					onchange: oninput,
					oninput,
					"aria-controls": `input-field-helper-${fieldname() ?? ""}`,
					"aria-describedby": `input-field-helper-${fieldname() ?? ""}`,
					...others
				}));

				bind_value(input, value);
				append($$anchor, input);
			};

			if_block(node, ($$render) => {
				if (readonly()) $$render(consequent); else $$render(alternate, false);
			});
		}

		append($$anchor, fragment);
		pop();
	}

	var root$s = template(`<input type="hidden">`);

	function Ui_hidden($$anchor, $$props) {
		/** @type {import('./type').UIInputProps} */
		let value = prop($$props, "value", 15, ""),
			fieldname = prop($$props, "fieldname", 3, "hidden"),
			required = prop($$props, "required", 3, true),
			readonly = prop($$props, "readonly", 3, false),
			others = rest_props($$props, [
				"$$slots",
				"$$events",
				"$$legacy",
				"value",
				"fieldname",
				"required",
				"readonly"
			]);

		var input = root$s();

		remove_input_defaults(input);

		template_effect(() => {
			set_attribute(input, "id", `form-field-hidden-${fieldname() ?? ""}`);
			input.required = required();
			input.readOnly = readonly();
			set_attribute(input, "name", fieldname());
			set_attribute(input, "others", others);
		});

		bind_value(input, value);
		append($$anchor, input);
	}

	var root_1$l = template(`<p> </p>`);
	var root_2$e = template(`<textarea></textarea>`);

	function Ui_textarea($$anchor, $$props) {
		push($$props, true);

		const $$stores = setup_stores();
		const $LOCALE = () => store_get(LOCALE, "$LOCALE", $$stores);

		/** @type {import('./type').UIInputProps} */
		let value = prop($$props, "value", 15, ""),
			placeholder = prop($$props, "placeholder", 3, ""),
			fieldname = prop($$props, "fieldname", 3, "textarea"),
			rows = prop($$props, "rows", 3, 10),
			required = prop($$props, "required", 3, true),
			readonly = prop($$props, "readonly", 3, false),
			disabled = prop($$props, "disabled", 3, false),
			valid = prop($$props, "valid", 3, true),
			classes = prop($$props, "class", 3, ""),
			onchange = prop($$props, "onchange", 3, () => true),
			others = rest_props($$props, [
				"$$slots",
				"$$events",
				"$$legacy",
				"value",
				"placeholder",
				"fieldname",
				"rows",
				"required",
				"readonly",
				"disabled",
				"valid",
				"class",
				"onchange"
			]);

		let invalid = derived(() => !valid());
		const oninput = UICommon$1.onInput(fieldname(), onchange());
		var fragment = comment();
		var node = first_child(fragment);

		{
			var consequent = ($$anchor) => {
				var p = root_1$l();
				var text = child(p, true);

				reset(p);
				template_effect(() => set_text(text, value()));
				append($$anchor, p);
			};

			var alternate = ($$anchor) => {
				var textarea = root_2$e();

				remove_textarea_child(textarea);

				let attributes;

				template_effect(() => attributes = set_attributes(textarea, attributes, {
					id: `form-field-textarea-${fieldname() ?? ""}`,
					class: `textarea ${classes() ?? ""}`,
					name: fieldname(),
					invalid: get$2(invalid),
					disabled: disabled(),
					required: required(),
					readonly: readonly(),
					onblur: oninput,
					placeholder: $LOCALE()[placeholder()],
					rows: rows(),
					"aria-controls": `input-field-helper-${fieldname() ?? ""}`,
					"aria-describedby": `input-field-helper-${fieldname() ?? ""}`,
					...others
				}));

				bind_value(textarea, value);
				append($$anchor, textarea);
			};

			if_block(node, ($$render) => {
				if (readonly()) $$render(consequent); else $$render(alternate, false);
			});
		}

		append($$anchor, fragment);
		pop();
	}

	function Ui_json_area($$anchor, $$props) {
		push($$props, true);

		/** @type {import('./type').UIInputProps} */
		let value = prop($$props, "value", 31, () => proxy({})),
			fieldname = prop($$props, "fieldname", 3, "jsonarea"),
			valid = prop($$props, "valid", 15, true),
			onchange = prop($$props, "onchange", 3, () => true),
			onerror = prop($$props, "onerror", 3, () => {}),
			others = rest_props($$props, [
				"$$slots",
				"$$events",
				"$$legacy",
				"value",
				"fieldname",
				"valid",
				"onchange",
				"onerror"
			]);

		let _value = state("{}");

		onMount(() => {
			try {
				set(_value, proxy(JSON.stringify(value(), null, 4)));
			} catch {
				set(_value, "{}");
			}
		});

		function onChange({ value: val }) {
			try {
				value(JSON.parse(val));
				valid(true);
				onchange()({ field: fieldname(), value: value() });
			} catch(error) {
				onerror()(error.message);
			}

			return true;
		}

		Ui_textarea($$anchor, spread_props(
			{
				onchange: onChange,
				get valid() {
					return valid();
				}
			},
			() => others,
			{
				get value() {
					return get$2(_value);
				},
				set value($$value) {
					set(_value, proxy($$value));
				}
			}
		));

		pop();
	}

	var _lib = /*#__PURE__*/new WeakMap();
	let Lib = /*#__PURE__*/function () {
	  function Lib(seedLib) {
	    _classCallCheck(this, Lib);
	    _classPrivateFieldInitSpec(this, _lib, {});
	    if (seedLib instanceof Lib) {
	      this.import(seedLib.getContent());
	    }
	  }

	  /**
	   *
	   * @params {string}  mode what to do if element exists [replace|add|skip]
	   */
	  return _createClass(Lib, [{
	    key: "add",
	    value: function add(name, comp, mode = "replace") {
	      if (this.contains(name)) {
	        if (mode === "replace") {
	          _classPrivateFieldGet2(_lib, this)[name] = comp;
	        } else if (mode === "add") {
	          _classPrivateFieldGet2(_lib, this)[name] = Object.assign(_classPrivateFieldGet2(_lib, this)[name], comp);
	        }
	      } else {
	        _classPrivateFieldGet2(_lib, this)[name] = comp;
	      }
	    }
	  }, {
	    key: "get",
	    value: function get(name) {
	      return _classPrivateFieldGet2(_lib, this)[name];
	    }
	  }, {
	    key: "contains",
	    value: function contains(name) {
	      return Object.hasOwn(_classPrivateFieldGet2(_lib, this), name);
	    }
	  }, {
	    key: "import",
	    value: function _import(bulk, mode = "replace") {
	      for (let f in bulk) {
	        this.add(f, bulk[f], mode);
	      }
	    }
	  }, {
	    key: "isEmpty",
	    value: function isEmpty() {
	      return Object.keys(_classPrivateFieldGet2(_lib, this)).length === 0;
	    }
	  }, {
	    key: "getContent",
	    value: function getContent() {
	      return {
	        ..._classPrivateFieldGet2(_lib, this)
	      };
	    }
	  }]);
	}();

	/*
	 * Библиотека UI конструкторов
	 */

	const COMPONENTS$1 = new Lib();
	const FIELDS$1 = new Lib();
	const VARIANTS$1 = new Lib();

	function Ui_list_empty_placeholder($$anchor) {
		Ui_title($$anchor, {
			title: "not-node:empty_list_placeholder",
			size: 4,
			align: "center"
		});
	}

	var root_2$d = template(`<span class="icon"><i></i></span>`);
	var root_3$a = template(`<span> </span>`);
	var root_4$9 = template(`<span class="icon"><i></i></span>`);
	var root_1$k = template(`<!> <!> <!> <!>`, 1);
	var root_5$7 = template(` <!>`, 1);
	var root$r = template(`<a><!></a>`);

	function Ui_link($$anchor, $$props) {
		push($$props, true);

		const $$stores = setup_stores();
		const $LOCALE = () => store_get(LOCALE, "$LOCALE", $$stores);

		/**
		 * @typedef {Object} Props
		 * @property {string} [title] - attributes
		 * @property {string} [url]
		 * @property {any} download
		 * @property {string} [target]
		 * @property {any} rel
		 * @property {boolean} [light] - visual
		 * @property {boolean} [loading]
		 * @property {boolean} [raised]
		 * @property {boolean} [outlined]
		 * @property {boolean} [inverted]
		 * @property {boolean} [rounded]
		 * @property {boolean} [button]
		 * @property {string} [state]
		 * @property {string} [type]
		 * @property {string} [color]
		 * @property {string} [size]
		 * @property {string} [classes]
		 * @property {boolean} [icon] - icons
		 * @property {string} [iconSide]
		 * @property {any} [action]
		 * @property {import('svelte').Snippet} [children]
		 */
		/** @type {Props} */
		let title = prop($$props, "title", 3, ""),
			url = prop($$props, "url", 3, ""),
			target = prop($$props, "target", 3, "_blank"),
			light = prop($$props, "light", 3, false),
			loading = prop($$props, "loading", 3, false),
			raised = prop($$props, "raised", 3, false),
			outlined = prop($$props, "outlined", 3, false),
			inverted = prop($$props, "inverted", 3, false),
			rounded = prop($$props, "rounded", 3, false),
			button = prop($$props, "button", 3, true),
			state = prop($$props, "state", 3, ""),
			type = prop($$props, "type", 3, ""),
			color = prop($$props, "color", 3, ""),
			size = prop($$props, "size", 3, ""),
			classes = prop($$props, "classes", 15, ""),
			icon = prop($$props, "icon", 3, false),
			iconSide = prop($$props, "iconSide", 3, "right"),
			action = prop($$props, "action", 3, () => {
				return true;
			});

		run$1(() => {
			classes((button() ? "button " : "") + (state() && state().length > 0 ? ` is-${state()} ` : "") + (light() ? ` is-light ` : "") + (type() && type().length > 0 ? ` is-${type()} ` : "") + (size() && size().length > 0 ? ` is-${size()} ` : ""));
		});

		var a = root$r();

		a.__click = function (...$$args) {
			action()?.apply(this, $$args);
		};

		var node = child(a);

		{
			var consequent_3 = ($$anchor) => {
				var fragment = root_1$k();
				var node_1 = first_child(fragment);

				{
					var consequent = ($$anchor) => {
						var span = root_2$d();
						var i = child(span);

						reset(span);
						template_effect(() => set_class(i, `fas fa-${icon() ?? ""} ${(size() ? `is-${size()}` : '') ?? ""}`));
						append($$anchor, span);
					};

					if_block(node_1, ($$render) => {
						if (iconSide() === "left") $$render(consequent);
					});
				}

				var node_2 = sibling(node_1, 2);

				{
					var consequent_1 = ($$anchor) => {
						var span_1 = root_3$a();
						var text = child(span_1, true);

						reset(span_1);
						template_effect(() => set_text(text, $LOCALE()[title()]));
						append($$anchor, span_1);
					};

					if_block(node_2, ($$render) => {
						if (title()) $$render(consequent_1);
					});
				}

				var node_3 = sibling(node_2, 2);

				snippet(node_3, () => $$props.children ?? noop);

				var node_4 = sibling(node_3, 2);

				{
					var consequent_2 = ($$anchor) => {
						var span_2 = root_4$9();
						var i_1 = child(span_2);

						reset(span_2);
						template_effect(() => set_class(i_1, `fas fa-${icon() ?? ""} ${(size() ? `is-${size()}` : '') ?? ""}`));
						append($$anchor, span_2);
					};

					if_block(node_4, ($$render) => {
						if (iconSide() === "right") $$render(consequent_2);
					});
				}

				append($$anchor, fragment);
			};

			var alternate = ($$anchor) => {
				var fragment_1 = root_5$7();
				var text_1 = first_child(fragment_1);
				var node_5 = sibling(text_1);

				snippet(node_5, () => $$props.children ?? noop);
				template_effect(() => set_text(text_1, `${$LOCALE()[title()] ?? ""} `));
				append($$anchor, fragment_1);
			};

			if_block(node, ($$render) => {
				if (icon()) $$render(consequent_3); else $$render(alternate, false);
			});
		}

		reset(a);

		template_effect(() => {
			set_attribute(a, "target", target());
			set_attribute(a, "href", url());
			set_attribute(a, "download", $$props.download);
			set_attribute(a, "rel", $$props.rel);
			set_class(a, `${classes() ?? ""} ${(state() ? `is-${state()}` : '') ?? ""} ${(inverted() ? `is-inverted` : '') ?? ""} ${(outlined() ? `is-outlined` : '') ?? ""} ${(raised() ? `is-raised` : '') ?? ""} ${(rounded() ? `is-rounded` : '') ?? ""} ${(light() ? `is-light` : '') ?? ""} ${(loading() ? `is-loading` : '') ?? ""} ${(color() ? `is-${color()}` : '') ?? ""} ${(type() ? `is-${type()}` : '') ?? ""} ${(size() ? `is-${size()}` : '') ?? ""}`);
		});

		append($$anchor, a);
		pop();
	}

	delegate(["click"]);

	var root_1$j = template(`<div><p class="control"></p></div>`);
	var root_3$9 = template(`<div></div>`);

	function Ui_links($$anchor, $$props) {
		/**
		 * @typedef {Object} Props
		 * @property {any} [values]
		 * @property {string} [classes]
		 * @property {boolean} [centered]
		 * @property {boolean} [right]
		 * @property {boolean} [joined]
		 */
		/** @type {Props} */
		let values = prop($$props, "values", 19, () => []),
			classes = prop($$props, "classes", 3, ""),
			centered = prop($$props, "centered", 3, false),
			right = prop($$props, "right", 3, false),
			joined = prop($$props, "joined", 3, true);

		var fragment = comment();
		var node = first_child(fragment);

		{
			var consequent = ($$anchor) => {
				var div = root_1$j();
				var p = child(div);

				each(p, 21, values, (item) => item.id, ($$anchor, item) => {
					Ui_link($$anchor, spread_props(() => get$2(item)));
				});

				reset(p);
				reset(div);
				template_effect(() => set_class(div, `field has-addons ${(centered() ? 'is-centered' : '') ?? ""} ${(right() ? 'is-right' : '') ?? ""} ${classes() ?? ""}`));
				append($$anchor, div);
			};

			var alternate = ($$anchor) => {
				var div_1 = root_3$9();

				each(div_1, 21, values, (item) => item.id, ($$anchor, item) => {
					Ui_link($$anchor, spread_props(() => get$2(item)));
				});

				reset(div_1);
				template_effect(() => set_class(div_1, `buttons ${(centered() ? 'is-centered' : '') ?? ""} ${(right() ? 'is-right' : '') ?? ""} ${classes() ?? ""}`));
				append($$anchor, div_1);
			};

			if_block(node, ($$render) => {
				if (joined()) $$render(consequent); else $$render(alternate, false);
			});
		}

		append($$anchor, fragment);
	}

	var on_keyup = (e, onClick) => {
		if (e && e.key == "Enter") {
			onClick();
		}
	};

	var on_keyup_1 = (e, onClick, onclickImage, $$props) => {
		e.preventDefault();

		if (e && e.key == "Enter") {
			onClick();
			onclickImage()($$props.value);
		}
	};

	var on_click = (e, onClick, onclickImage, $$props) => {
		e.preventDefault();
		onClick();
		onclickImage()($$props.value);
	};

	var root_5$6 = template(`<figure class="image is-64x64"><img class="is-rounded"></figure>`);
	var root_1$i = template(`<div role="button" tabindex="0" class="list-item-image"><!></div>`);

	var on_click_1 = (e, onClick, onclickContent, $$props) => {
		e.preventDefault();
		onClick();
		onclickContent()($$props.value);
	};

	var on_keyup_2 = (e, onClick, onclickContent, $$props) => {
		e.preventDefault();

		if (e && e.key == "Enter") {
			onClick();
			onclickContent()($$props.value);
		}
	};

	var on_keyup_3 = (e, onClick, onclickTitle, $$props) => {
		e.preventDefault();

		if (e && e.key == "Enter") {
			onClick();
			onclickTitle()($$props.value);
		}
	};

	var on_click_2 = (e, onClick, onclickTitle, $$props) => {
		e.preventDefault();
		onClick();
		onclickTitle()($$props.value);
	};

	var root_6$7 = template(`<div class="list-item-title" role="button" tabindex="0"><!></div>`);

	var on_keyup_4 = (e, onClick, onclickDescription, $$props) => {
		e.preventDefault();

		if (e && e.key == "Enter") {
			onClick();
			onclickDescription()($$props.value);
		}
	};

	var on_click_3 = (e, onClick, onclickDescription, $$props) => {
		e.preventDefault();
		onClick();
		onclickDescription()($$props.value);
	};

	var root_11$2 = template(`<div role="button" tabindex="0" class="list-item-description"><!></div>`);
	var root_16 = template(`<div class="list-item-controls"><!> <!></div>`);
	var root$q = template(`<div role="button" tabindex="0"><!> <div role="button" tabindex="0" class="list-item-content"><!> <!></div> <!></div>`);

	function Ui_list_item($$anchor, $$props) {
		push($$props, true);

		/**
		 * @typedef {Object} Props
		 * @property {any} title
		 * @property {any} description
		 * @property {any} [actions]
		 * @property {any} [links]
		 * @property {any} [listActions]
		 * @property {any} [listLinks]
		 * @property {string} [classes]
		 * @property {string} [commonClasses]
		 * @property {string} [image]
		 * @property {any} value - value of item, will be passed to event handlers
		 * @property {any} [index] - index in array 0-length
		 * @property {boolean} [first] - if first
		 * @property {boolean} [last] - if last
		 * @property {any} [titleComponent] - customization
		 * @property {any} [titleComponentProps]
		 * @property {any} descriptionComponent
		 * @property {any} [descriptionComponentProps]
		 * @property {any} imageComponent
		 * @property {any} [imageComponentProps]
		 */
		/** @type {Props} */
		let actions = prop($$props, "actions", 19, () => []),
			links = prop($$props, "links", 19, () => []),
			listActions = prop($$props, "listActions", 19, () => []),
			listLinks = prop($$props, "listLinks", 19, () => []),
			classes = prop($$props, "classes", 3, ""),
			commonClasses = prop($$props, "commonClasses", 3, ""),
			image = prop($$props, "image", 3, ""),
			index = prop($$props, "index", 19, () => -1),
			first = prop($$props, "first", 3, false),
			last = prop($$props, "last", 3, false),
			titleComponent = prop($$props, "titleComponent", 3, Ui_title),
			titleComponentProps = prop($$props, "titleComponentProps", 19, () => ({ size: 6 })),
			descriptionComponentProps = prop($$props, "descriptionComponentProps", 19, () => ({})),
			imageComponentProps = prop($$props, "imageComponentProps", 19, () => ({})),
			onclickImage = prop($$props, "onclickImage", 3, () => false),
			onclickContent = prop($$props, "onclickContent", 3, () => false),
			onclickTitle = prop($$props, "onclickTitle", 3, () => false),
			onclickDescription = prop($$props, "onclickDescription", 3, () => false);

		function onClick() {
			onclick($$props.value);
		}

		let allActions = state(proxy([]));
		let allLinks = state(proxy([]));

		onMount(() => {
			set(allActions, proxy([...actions(), ...listActions()].map((btn) => {
				return {
					...btn,
					action: () => btn.action($$props.value)
				};
			})));

			set(allLinks, proxy([...links(), ...listLinks()]));
		});

		var div = root$q();

		div.__click = onClick;
		div.__keyup = [on_keyup, onClick];

		var node = child(div);

		{
			var consequent_2 = ($$anchor) => {
				var div_1 = root_1$i();

				div_1.__keyup = [on_keyup_1, onClick, onclickImage, $$props];
				div_1.__click = [on_click, onClick, onclickImage, $$props];

				var node_1 = child(div_1);

				{
					var consequent_1 = ($$anchor) => {
						var fragment = comment();
						var node_2 = first_child(fragment);

						{
							var consequent = ($$anchor) => {
								var fragment_1 = comment();
								const SvelteComponent = derived(() => $$props.imageComponent);
								var node_3 = first_child(fragment_1);

								component(node_3, () => get$2(SvelteComponent), ($$anchor, $$component) => {
									$$component($$anchor, spread_props(
										{
											get value() {
												return image();
											}
										},
										imageComponentProps
									));
								});

								append($$anchor, fragment_1);
							};

							var alternate = ($$anchor) => {
								var fragment_2 = comment();
								const SvelteComponent_1 = derived(() => $$props.imageComponent);
								var node_4 = first_child(fragment_2);

								component(node_4, () => get$2(SvelteComponent_1), ($$anchor, $$component) => {
									$$component($$anchor, spread_props(image, imageComponentProps));
								});

								append($$anchor, fragment_2);
							};

							if_block(node_2, ($$render) => {
								if (typeof image() === "string") $$render(consequent); else $$render(alternate, false);
							});
						}

						append($$anchor, fragment);
					};

					var alternate_1 = ($$anchor) => {
						var figure = root_5$6();
						var img = child(figure);

						reset(figure);

						template_effect(() => {
							set_attribute(img, "src", image());
							set_attribute(img, "alt", $$props.title);
						});

						append($$anchor, figure);
					};

					if_block(node_1, ($$render) => {
						if ($$props.imageComponent) $$render(consequent_1); else $$render(alternate_1, false);
					});
				}

				reset(div_1);
				append($$anchor, div_1);
			};

			if_block(node, ($$render) => {
				if (image()) $$render(consequent_2);
			});
		}

		var div_2 = sibling(node, 2);

		div_2.__click = [
			on_click_1,
			onClick,
			onclickContent,
			$$props
		];

		div_2.__keyup = [
			on_keyup_2,
			onClick,
			onclickContent,
			$$props
		];

		var node_5 = child(div_2);

		{
			var consequent_5 = ($$anchor) => {
				var div_3 = root_6$7();

				div_3.__keyup = [on_keyup_3, onClick, onclickTitle, $$props];
				div_3.__click = [on_click_2, onClick, onclickTitle, $$props];

				var node_6 = child(div_3);

				{
					var consequent_4 = ($$anchor) => {
						var fragment_3 = comment();
						var node_7 = first_child(fragment_3);

						{
							var consequent_3 = ($$anchor) => {
								var fragment_4 = comment();
								const SvelteComponent_2 = derived(titleComponent);
								var node_8 = first_child(fragment_4);

								component(node_8, () => get$2(SvelteComponent_2), ($$anchor, $$component) => {
									$$component($$anchor, spread_props(
										{
											get title() {
												return $$props.title;
											}
										},
										titleComponentProps,
										{ onchange }
									));
								});

								append($$anchor, fragment_4);
							};

							var alternate_2 = ($$anchor) => {
								var fragment_5 = comment();
								const SvelteComponent_3 = derived(titleComponent);
								var node_9 = first_child(fragment_5);

								component(node_9, () => get$2(SvelteComponent_3), ($$anchor, $$component) => {
									$$component($$anchor, spread_props(() => $$props.title, titleComponentProps, { onchange }));
								});

								append($$anchor, fragment_5);
							};

							if_block(node_7, ($$render) => {
								if (typeof $$props.title === "string") $$render(consequent_3); else $$render(alternate_2, false);
							});
						}

						append($$anchor, fragment_3);
					};

					var alternate_3 = ($$anchor) => {
						var text$1 = text();

						template_effect(() => set_text(text$1, $$props.title));
						append($$anchor, text$1);
					};

					if_block(node_6, ($$render) => {
						if (titleComponent()) $$render(consequent_4); else $$render(alternate_3, false);
					});
				}

				reset(div_3);
				append($$anchor, div_3);
			};

			if_block(node_5, ($$render) => {
				if ($$props.title) $$render(consequent_5);
			});
		}

		var node_10 = sibling(node_5, 2);

		{
			var consequent_8 = ($$anchor) => {
				var div_4 = root_11$2();

				div_4.__keyup = [
					on_keyup_4,
					onClick,
					onclickDescription,
					$$props
				];

				div_4.__click = [
					on_click_3,
					onClick,
					onclickDescription,
					$$props
				];

				var node_11 = child(div_4);

				{
					var consequent_7 = ($$anchor) => {
						var fragment_7 = comment();
						var node_12 = first_child(fragment_7);

						{
							var consequent_6 = ($$anchor) => {
								var fragment_8 = comment();
								const SvelteComponent_4 = derived(() => $$props.descriptionComponent);
								var node_13 = first_child(fragment_8);

								component(node_13, () => get$2(SvelteComponent_4), ($$anchor, $$component) => {
									$$component($$anchor, spread_props(
										{
											get value() {
												return $$props.description;
											}
										},
										descriptionComponentProps,
										{ onchange, onclick }
									));
								});

								append($$anchor, fragment_8);
							};

							var alternate_4 = ($$anchor) => {
								var fragment_9 = comment();
								const SvelteComponent_5 = derived(() => $$props.descriptionComponent);
								var node_14 = first_child(fragment_9);

								component(node_14, () => get$2(SvelteComponent_5), ($$anchor, $$component) => {
									$$component($$anchor, spread_props(() => $$props.description, descriptionComponentProps, { onchange, onclick }));
								});

								append($$anchor, fragment_9);
							};

							if_block(node_12, ($$render) => {
								if (typeof $$props.description === "string") $$render(consequent_6); else $$render(alternate_4, false);
							});
						}

						append($$anchor, fragment_7);
					};

					var alternate_5 = ($$anchor) => {
						var text_1 = text();

						template_effect(() => set_text(text_1, $$props.description));
						append($$anchor, text_1);
					};

					if_block(node_11, ($$render) => {
						if ($$props.descriptionComponent) $$render(consequent_7); else $$render(alternate_5, false);
					});
				}

				reset(div_4);
				append($$anchor, div_4);
			};

			if_block(node_10, ($$render) => {
				if ($$props.description) $$render(consequent_8);
			});
		}

		reset(div_2);

		var node_15 = sibling(div_2, 2);

		{
			var consequent_11 = ($$anchor) => {
				var div_5 = root_16();
				var node_16 = child(div_5);

				{
					var consequent_9 = ($$anchor) => {
						Ui_buttons($$anchor, {
							get values() {
								return get$2(allActions);
							},
							right: true
						});
					};

					if_block(node_16, ($$render) => {
						if (get$2(allActions) && get$2(allActions).length) $$render(consequent_9);
					});
				}

				var node_17 = sibling(node_16, 2);

				{
					var consequent_10 = ($$anchor) => {
						Ui_links($$anchor, {
							get values() {
								return get$2(allLinks);
							},
							right: true
						});
					};

					if_block(node_17, ($$render) => {
						if (get$2(allLinks) && get$2(allLinks).length) $$render(consequent_10);
					});
				}

				reset(div_5);
				append($$anchor, div_5);
			};

			if_block(node_15, ($$render) => {
				if (get$2(allActions) && get$2(allActions).length || get$2(allLinks) && get$2(allLinks).length) $$render(consequent_11);
			});
		}

		reset(div);
		template_effect(() => set_class(div, `list-item ${classes() ?? ""} ${commonClasses() ?? ""} ${(last() ? 'list-item-last' : '') ?? ""} ${(first() ? 'list-item-first' : '') ?? ""}  ${`list-item-at-${index()}` ?? ""} ${`list-item-` + (index() % 2 ? 'odd' : 'even') ?? ""}`));
		append($$anchor, div);
		pop();
	}

	delegate(["click", "keyup"]);

	function Ui_list_block($$anchor, $$props) {
		push($$props, true);

		/**
		 * @typedef {Object} Props
		 * @property {string} [idFieldName]
		 * @property {any} [items]
		 * @property {any} [actions]
		 * @property {any} [links]
		 * @property {string} [itemClasses]
		 * @property {any} [listItemComponent]
		 * @property {any} [listItemComponentProps]
		 * @property {any} [titleComponent]
		 * @property {any} [titleComponentProps]
		 * @property {any} descriptionComponent
		 * @property {any} [descriptionComponentProps]
		 * @property {any} imageComponent
		 * @property {any} [imageComponentProps]
		 */
		/** @type {Props} */
		let idFieldName = prop($$props, "idFieldName", 3, "id"),
			items = prop($$props, "items", 23, () => []),
			actions = prop($$props, "actions", 19, () => []),
			links = prop($$props, "links", 19, () => []),
			itemClasses = prop($$props, "itemClasses", 3, ""),
			listItemComponent = prop($$props, "listItemComponent", 3, Ui_list_item),
			listItemComponentProps = prop($$props, "listItemComponentProps", 19, () => ({})),
			titleComponent = prop($$props, "titleComponent", 3, Ui_title),
			titleComponentProps = prop($$props, "titleComponentProps", 19, () => ({ size: 6 })),
			descriptionComponentProps = prop($$props, "descriptionComponentProps", 19, () => ({})),
			imageComponentProps = prop($$props, "imageComponentProps", 19, () => ({}));

		var fragment = comment();
		var node = first_child(fragment);

		{
			var consequent = ($$anchor) => {
				var fragment_1 = comment();
				const SvelteComponent = derived(listItemComponent);
				var node_1 = first_child(fragment_1);

				each(node_1, 19, items, (item) => item[idFieldName()], ($$anchor, item, index) => {
					var fragment_2 = comment();
					var node_2 = first_child(fragment_2);
					var first = derived(() => get$2(index) === 0);
					var last = derived(() => get$2(index) === items().length - 1);

					component(node_2, () => get$2(SvelteComponent), ($$anchor, $$component) => {
						$$component($$anchor, spread_props(
							listItemComponentProps,
							{
								get titleComponent() {
									return titleComponent();
								},
								get titleComponentProps() {
									return titleComponentProps();
								},
								get descriptionComponent() {
									return $$props.descriptionComponent;
								},
								get descriptionComponentProps() {
									return descriptionComponentProps();
								},
								get imageComponent() {
									return $$props.imageComponent;
								},
								get imageComponentProps() {
									return imageComponentProps();
								}
							},
							() => get$2(item),
							{
								get listActions() {
									return actions();
								},
								get listLinks() {
									return links();
								},
								get commonClasses() {
									return itemClasses();
								},
								get index() {
									return get$2(index);
								},
								get first() {
									return get$2(first);
								},
								get last() {
									return get$2(last);
								},
								get value() {
									return items()[get$2(index)];
								},
								set value($$value) {
									items()[get$2(index)] = $$value;
								},
								$$events: {
									click($$arg) {
										bubble_event.call(this, $$props, $$arg);
									},
									clickContent($$arg) {
										bubble_event.call(this, $$props, $$arg);
									},
									clickDescription($$arg) {
										bubble_event.call(this, $$props, $$arg);
									},
									clickImage($$arg) {
										bubble_event.call(this, $$props, $$arg);
									},
									clickTitle($$arg) {
										bubble_event.call(this, $$props, $$arg);
									}
								}
							}
						));
					});

					append($$anchor, fragment_2);
				});

				append($$anchor, fragment_1);
			};

			if_block(node, ($$render) => {
				if (items()) $$render(consequent);
			});
		}

		append($$anchor, fragment);
		pop();
	}

	var root_1$h = template(`<div><!></div>`);

	function Ui_list($$anchor, $$props) {
		push($$props, true);

		//customization
		/**
		 * @typedef {Object} Props
		 * @property {string} [classes]
		 * @property {any} [items]
		 * @property {any} [actions]
		 * @property {any} [links]
		 * @property {boolean} [actionsVisible]
		 * @property {boolean} [itemsHoverable]
		 * @property {boolean} [overflowEllipsis]
		 * @property {boolean} [hiddenImages]
		 * @property {string} [itemClasses]
		 * @property {any} itemLength
		 * @property {string} [idFieldName]
		 * @property {any} [emptyListPlaceholderComponent] - empty
		 * @property {any} [emptyListPlaceholderComponentProps]
		 * @property {any} [listItemComponent] - item
		 * @property {any} [listItemComponentProps]
		 * @property {any} [titleComponent] - item parts
		 * @property {any} [titleComponentProps]
		 * @property {any} descriptionComponent
		 * @property {any} [descriptionComponentProps]
		 * @property {any} imageComponent
		 * @property {any} [imageComponentProps]
		 */
		/** @type {Props} */
		let classes = prop($$props, "classes", 3, ""),
			items = prop($$props, "items", 31, () => proxy([])),
			actions = prop($$props, "actions", 19, () => []),
			links = prop($$props, "links", 19, () => []),
			actionsVisible = prop($$props, "actionsVisible", 3, false),
			itemsHoverable = prop($$props, "itemsHoverable", 3, false),
			overflowEllipsis = prop($$props, "overflowEllipsis", 3, false),
			hiddenImages = prop($$props, "hiddenImages", 3, false),
			itemClasses = prop($$props, "itemClasses", 3, ""),
			idFieldName = prop($$props, "idFieldName", 3, "id"),
			emptyListPlaceholderComponent = prop($$props, "emptyListPlaceholderComponent", 3, Ui_list_empty_placeholder),
			emptyListPlaceholderComponentProps = prop($$props, "emptyListPlaceholderComponentProps", 19, () => ({})),
			listItemComponent = prop($$props, "listItemComponent", 3, Ui_list_item),
			listItemComponentProps = prop($$props, "listItemComponentProps", 19, () => ({})),
			titleComponent = prop($$props, "titleComponent", 3, Ui_title),
			titleComponentProps = prop($$props, "titleComponentProps", 19, () => ({ size: 6 })),
			descriptionComponentProps = prop($$props, "descriptionComponentProps", 19, () => ({})),
			imageComponentProps = prop($$props, "imageComponentProps", 19, () => ({}));

		var fragment = comment();
		var node = first_child(fragment);

		{
			var consequent = ($$anchor) => {
				var div = root_1$h();
				var node_1 = child(div);

				Ui_list_block(node_1, {
					get itemClasses() {
						return itemClasses();
					},
					get listItemComponent() {
						return listItemComponent();
					},
					get listItemComponentProps() {
						return listItemComponentProps();
					},
					get idFieldName() {
						return idFieldName();
					},
					get titleComponent() {
						return titleComponent();
					},
					get titleComponentProps() {
						return titleComponentProps();
					},
					get descriptionComponent() {
						return $$props.descriptionComponent;
					},
					get descriptionComponentProps() {
						return descriptionComponentProps();
					},
					get imageComponent() {
						return $$props.imageComponent;
					},
					get imageComponentProps() {
						return imageComponentProps();
					},
					get actions() {
						return actions();
					},
					get links() {
						return links();
					},
					get items() {
						return items();
					},
					set items($$value) {
						items($$value);
					},
					$$events: {
						change($$arg) {
							bubble_event.call(this, $$props, $$arg);
						},
						click($$arg) {
							bubble_event.call(this, $$props, $$arg);
						},
						clickContent($$arg) {
							bubble_event.call(this, $$props, $$arg);
						},
						clickDescription($$arg) {
							bubble_event.call(this, $$props, $$arg);
						},
						clickImage($$arg) {
							bubble_event.call(this, $$props, $$arg);
						},
						clickTitle($$arg) {
							bubble_event.call(this, $$props, $$arg);
						}
					}
				});

				reset(div);

				template_effect(() => {
					set_attribute(div, "style", $$props.itemLength ? `--length: ${$$props.itemLength};` : "");
					set_class(div, `list ${classes() ?? ""} ${(actionsVisible() ? 'has-visible-pointer-controls' : '') ?? ""} ${(itemsHoverable() ? 'has-hoverable-list-items' : '') ?? ""} ${(overflowEllipsis() ? 'has-overflow-ellipsis' : '') ?? ""} ${(hiddenImages() ? 'has-hidden-images' : '') ?? ""}`);
				});

				append($$anchor, div);
			};

			var alternate = ($$anchor) => {
				var fragment_1 = comment();
				const SvelteComponent = derived(emptyListPlaceholderComponent);
				var node_2 = first_child(fragment_1);

				component(node_2, () => get$2(SvelteComponent), ($$anchor, $$component) => {
					$$component($$anchor, spread_props(emptyListPlaceholderComponentProps));
				});

				append($$anchor, fragment_1);
			};

			if_block(node, ($$render) => {
				if (items().length) $$render(consequent); else $$render(alternate, false);
			});
		}

		append($$anchor, fragment);
		pop();
	}

	var root$p = template(`<!> <!>`, 1);

	function Ui_list_of_models($$anchor, $$props) {
		push($$props, true);

		//field props
		/**
		 * @typedef {Object} Props
		 * @property {boolean} [inputStarted] - svelte-ignore unused-export-let
		 * @property {any} [value]
		 * @property {string} [placeholder]
		 * @property {string} [fieldname]
		 * @property {boolean} [required]
		 * @property {boolean} [readonly]
		 * @property {boolean} [multiple]
		 * @property {number} [size]
		 * @property {boolean} [valid] - validation
		 * @property {boolean} [validated]
		 * @property {boolean} [errors]
		 * @property {boolean} [formErrors]
		 * @property {boolean} [formLevelError]
		 * @property {string} [modelName] - model bindings
		 * @property {string} [actionName]
		 * @property {any} [actionFilter]
		 * @property {any} [actionSorter]
		 * @property {any} [actionPager]
		 * @property {any} [actionSearch]
		 * @property {string} [optionId] - presentation
		 * @property {string} [optionTitle]
		 * @property {string} [selectorUI] - selector UI to add new item to list
		 * @property {any} [selectorUIProps]
		 * @property {string} [itemUI] - list item UI to present in readonly or editable variants
		 * @property {any} [itemUIProps]
		 * @property {any} [transformValueItemToListItem]
		 */
		/** @type {Props} */
		let value = prop($$props, "value", 31, () => proxy([])),
			placeholder = prop($$props, "placeholder", 15, ""),
			fieldname = prop($$props, "fieldname", 15, "selectFromModel"),
			required = prop($$props, "required", 15, true),
			readonly = prop($$props, "readonly", 3, false),
			multiple = prop($$props, "multiple", 15, false),
			size = prop($$props, "size", 15, 8),
			valid = prop($$props, "valid", 15, true),
			modelName = prop($$props, "modelName", 3, ""),
			actionName = prop($$props, "actionName", 3, ""),
			actionFilter = prop($$props, "actionFilter", 19, () => ({})),
			actionSorter = prop($$props, "actionSorter", 19, () => ({})),
			actionPager = prop($$props, "actionPager", 19, () => ({})),
			actionSearch = prop($$props, "actionSearch", 3, undefined),
			optionId = prop($$props, "optionId", 3, ":_id"),
			optionTitle = prop($$props, "optionTitle", 3, ":title"),
			selectorUI = prop($$props, "selectorUI", 3, "UISelectFromModelOnDemandInline"),
			selectorUIProps = prop($$props, "selectorUIProps", 19, () => ({})),
			itemUI = prop($$props, "itemUI", 3, "UIListItem"),
			itemUIProps = prop($$props, "itemUIProps", 19, () => ({})),
			transformValueItemToListItem = prop($$props, "transformValueItemToListItem", 3, (item) => {
				return item
					? {
						id: item._id,
						title: item.title,
						description: item.description,
						value: item
					}
					: undefined;
			});

		function addItem(item) {
			if (!Array.isArray(value())) {
				value([]);
			}

			value().push(item);
			value(value());
		}

		let items = derived(() => value().map ? value().map(transformValueItemToListItem()) : []);

		const ACTIONS = [
			{
				action(listItem) {
					const val = listItem.value;
					const itemIndex = value().findIndex((valueItem) => valueItem === val);

					if (itemIndex > -1) {
						const valCopy = [...value()];

						notCommon$1.moveItem(valCopy, itemIndex, itemIndex - 1);
						value(valCopy);
					}
				},
				title: "",
				icon: "arrow-up",
				color: "normal"
			},
			{
				action: (listItem) => {
					const val = listItem.value;
					const itemIndex = value().findIndex((valueItem) => valueItem === val);

					if (itemIndex > -1) {
						const valCopy = [...value()];

						notCommon$1.moveItem(valCopy, itemIndex, itemIndex + 1);
						value(valCopy);
					}
				},
				title: "",
				icon: "arrow-down",
				color: "normal"
			},
			{
				action: (listItem) => {
					const val = listItem.value;
					const itemIndex = value().findIndex((valueItem) => valueItem === val);

					if (itemIndex > -1) {
						value().splice(itemIndex, 1);
						value(value());
					}
				},
				title: "",
				icon: "trash",
				color: "danger"
			}
		];

		var fragment = root$p();
		var node = first_child(fragment);
		var listItemComponent = derived(() => COMPONENTS$1.get(itemUI()));

		Ui_list(node, spread_props(
			{
				get listItemComponent() {
					return get$2(listItemComponent);
				}
			},
			itemUIProps,
			{
				get items() {
					return get$2(items);
				},
				actions: ACTIONS
			}
		));

		var node_1 = sibling(node, 2);

		{
			var consequent = ($$anchor) => {
				var fragment_1 = comment();
				const SvelteComponent = derived(() => COMPONENTS$1.get(selectorUI()));
				var node_2 = first_child(fragment_1);

				component(node_2, () => get$2(SvelteComponent), ($$anchor, $$component) => {
					$$component($$anchor, spread_props(selectorUIProps, {
						get modelName() {
							return modelName();
						},
						get actionName() {
							return actionName();
						},
						get actionFilter() {
							return actionFilter();
						},
						get actionSorter() {
							return actionSorter();
						},
						get actionPager() {
							return actionPager();
						},
						get actionSearch() {
							return actionSearch();
						},
						get optionId() {
							return optionId();
						},
						get optionTitle() {
							return optionTitle();
						},
						get placeholder() {
							return placeholder();
						},
						set placeholder($$value) {
							placeholder($$value);
						},
						get fieldname() {
							return fieldname();
						},
						set fieldname($$value) {
							fieldname($$value);
						},
						get required() {
							return required();
						},
						set required($$value) {
							required($$value);
						},
						get multiple() {
							return multiple();
						},
						set multiple($$value) {
							multiple($$value);
						},
						get size() {
							return size();
						},
						set size($$value) {
							size($$value);
						},
						get valid() {
							return valid();
						},
						set valid($$value) {
							valid($$value);
						},
						$$events: { resolve: (e) => addItem(e.detail) }
					}));
				});

				append($$anchor, fragment_1);
			};

			if_block(node_1, ($$render) => {
				if (!readonly()) $$render(consequent);
			});
		}

		append($$anchor, fragment);
		pop();
	}

	var root$o = template(`<div role="button" tabindex="0"><!></div>`);

	function Ui_column($$anchor, $$props) {
		push($$props, true);

		const bubble = createBubbler();

		/**
		 * @typedef {Object} Props
		 * @property {string} [class]
		 * @property {string} [title]
		 * @property {boolean} [narrow]
		 * @property {import('svelte').Snippet} [children]
		 */
		/** @type {Props} */
		let classes = prop($$props, "class", 3, ""),
			title = prop($$props, "title", 3, ""),
			narrow = prop($$props, "narrow", 3, false);

		var div = root$o();
		var event_handler = derived(() => bubble("click"));

		div.__click = function (...$$args) {
			get$2(event_handler)?.apply(this, $$args);
		};

		var event_handler_1 = derived(() => bubble("keyup"));

		div.__keyup = function (...$$args) {
			get$2(event_handler_1)?.apply(this, $$args);
		};

		var node = child(div);

		snippet(node, () => $$props.children ?? noop);
		reset(div);

		template_effect(() => {
			set_attribute(div, "title", title());
			set_class(div, `column ${classes() ?? ""} ${(narrow() ? 'is-narrow' : '') ?? ""}`);
		});

		append($$anchor, div);
		pop();
	}

	delegate(["click", "keyup"]);

	var root$n = template(`<div role="button" tabindex="0"><!></div>`);

	function Ui_columns($$anchor, $$props) {
		push($$props, true);

		const bubble = createBubbler();
		/**
		 * @typedef {Object} Props
		 * @property {string} [classes]
		 * @property {import('svelte').Snippet} [children]
		 */
		/** @type {Props} */
		let classes = prop($$props, "classes", 3, "");
		var div = root$n();
		var event_handler = derived(() => bubble('click'));

		div.__click = function (...$$args) {
			get$2(event_handler)?.apply(this, $$args);
		};

		var event_handler_1 = derived(() => bubble('keyup'));

		div.__keyup = function (...$$args) {
			get$2(event_handler_1)?.apply(this, $$args);
		};

		var node = child(div);

		snippet(node, () => $$props.children ?? noop);
		reset(div);
		template_effect(() => set_class(div, `columns ${classes() ?? ""}`));
		append($$anchor, div);
		pop();
	}

	delegate(["click", "keyup"]);

	var root$m = template(`<div role="button" tabindex="0"><!></div>`);

	function Ui_container($$anchor, $$props) {
		push($$props, true);

		const bubble = createBubbler();

		/**
		 * @typedef {Object} Props
		 * @property {string} [id]
		 * @property {string} [classes]
		 * @property {boolean} [widescreen]
		 * @property {boolean} [fullhd]
		 * @property {boolean} [maxDesktop]
		 * @property {boolean} [maxWidescreen]
		 * @property {boolean} [fluid]
		 * @property {import('svelte').Snippet} [children]
		 */
		/** @type {Props} */
		let id = prop($$props, "id", 3, ""),
			classes = prop($$props, "classes", 3, ""),
			widescreen = prop($$props, "widescreen", 3, false),
			fullhd = prop($$props, "fullhd", 3, false),
			maxDesktop = prop($$props, "maxDesktop", 3, false),
			maxWidescreen = prop($$props, "maxWidescreen", 3, false),
			fluid = prop($$props, "fluid", 3, false);

		var div = root$m();
		var event_handler = derived(() => bubble('click'));

		div.__click = function (...$$args) {
			get$2(event_handler)?.apply(this, $$args);
		};

		var event_handler_1 = derived(() => bubble('keyup'));

		div.__keyup = function (...$$args) {
			get$2(event_handler_1)?.apply(this, $$args);
		};

		var node = child(div);

		snippet(node, () => $$props.children ?? noop);
		reset(div);

		template_effect(() => {
			set_attribute(div, "id", id());
			set_class(div, `container ${classes() ?? ""}`);
			toggle_class(div, "is-widescreen", widescreen());
			toggle_class(div, "is-fullhd", fullhd());
			toggle_class(div, "is-max-desktop", maxDesktop());
			toggle_class(div, "is-max-widescreen", maxWidescreen());
			toggle_class(div, "is-fluid", fluid());
		});

		append($$anchor, div);
		pop();
	}

	delegate(["click", "keyup"]);

	var root$l = template(`<footer><!></footer>`);

	function Ui_footer($$anchor, $$props) {
		push($$props, true);

		/**
		 * @typedef {Object} Props
		 * @property {string} [id]
		 * @property {string} [classes]
		 * @property {import('svelte').Snippet} [children]
		 */
		/** @type {Props} */
		let id = prop($$props, "id", 3, ''),
			classes = prop($$props, "classes", 3, '');

		var footer = root$l();
		var node = child(footer);

		snippet(node, () => $$props.children ?? noop);
		reset(footer);

		template_effect(() => {
			set_attribute(footer, "id", id());
			set_class(footer, `footer  ${classes() ?? ""} `);
		});

		append($$anchor, footer);
		pop();
	}

	var root$k = template(`<section role="button"><!></section>`);

	function Ui_section$2($$anchor, $$props) {
		push($$props, true);

		const bubble = createBubbler();

		/**
		 * @typedef {Object} Props
		 * @property {string} [id]
		 * @property {any} size
		 * @property {string} [classes]
		 * @property {number} [tabindex]
		 * @property {import('svelte').Snippet} [children]
		 */
		/** @type {Props} */
		let id = prop($$props, "id", 3, ""),
			classes = prop($$props, "classes", 3, ""),
			tabindex = prop($$props, "tabindex", 3, 0);

		var section = root$k();
		var event_handler = derived(() => bubble('click'));

		section.__click = function (...$$args) {
			get$2(event_handler)?.apply(this, $$args);
		};

		var event_handler_1 = derived(() => bubble('keyup'));

		section.__keyup = function (...$$args) {
			get$2(event_handler_1)?.apply(this, $$args);
		};

		var node = child(section);

		snippet(node, () => $$props.children ?? noop);
		reset(section);

		template_effect(() => {
			set_attribute(section, "id", id());
			set_class(section, `section ${($$props.size ? 'is-' + $$props.size : '') ?? ""}  ${classes() ?? ""}`);
			set_attribute(section, "tabindex", tabindex());
		});

		append($$anchor, section);
		pop();
	}

	delegate(["click", "keyup"]);

	function Ui_level_item($$anchor, $$props) {
		push($$props, true);

		/**
		 * @typedef {Object} Props
		 * @property {string} [tag]
		 * @property {import('svelte').Snippet} [children]
		 */
		/** @type {Props} */
		let tag = prop($$props, "tag", 3, "div");
		var fragment = comment();
		var node = first_child(fragment);

		element(node, tag, false, ($$element, $$anchor) => {
			var fragment_1 = comment();
			var node_1 = first_child(fragment_1);

			{
				var consequent = ($$anchor) => {
					var fragment_2 = comment();
					var node_2 = first_child(fragment_2);

					snippet(node_2, () => $$props.children);
					append($$anchor, fragment_2);
				};

				var alternate = ($$anchor) => {};

				if_block(node_1, ($$render) => {
					if ($$props.children) $$render(consequent); else $$render(alternate, false);
				});
			}

			append($$anchor, fragment_1);
		});

		append($$anchor, fragment);
		pop();
	}

	var root$j = template(`<nav class="level"><div class="level-left"><!></div> <div class="level-right"><!></div></nav>`);

	function Ui_level($$anchor, $$props) {
		push($$props, true);

		var nav = root$j();
		var div = child(nav);
		var node = child(div);

		snippet(node, () => $$props.left ?? noop);
		reset(div);

		var div_1 = sibling(div, 2);
		var node_1 = child(div_1);

		snippet(node_1, () => $$props.right ?? noop);
		reset(div_1);
		reset(nav);
		append($$anchor, nav);
		pop();
	}

	var index$6 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		UIColumn: Ui_column,
		UIColumns: Ui_columns,
		UIContainer: Ui_container,
		UIFooter: Ui_footer,
		UILevel: Ui_level,
		UILevelItem: Ui_level_item,
		UISection: Ui_section$2
	});

	var root_1$g = template(`<p> </p>`);
	var root_2$c = template(`<input>`);

	function Ui_number($$anchor, $$props) {
		push($$props, true);

		const $$stores = setup_stores();
		const $LOCALE = () => store_get(LOCALE, "$LOCALE", $$stores);

		/** @type {import('./type').UIInputProps} */
		let value = prop($$props, "value", 15, 0),
			placeholder = prop($$props, "placeholder", 3, "0.0"),
			min = prop($$props, "min", 3, 0),
			max = prop($$props, "max", 3, 100),
			step = prop($$props, "step", 3, 1),
			fieldname = prop($$props, "fieldname", 3, "number"),
			required = prop($$props, "required", 3, true),
			disabled = prop($$props, "disabled", 3, false),
			readonly = prop($$props, "readonly", 3, false),
			valid = prop($$props, "valid", 3, true),
			classes = prop($$props, "class", 3, ""),
			onchange = prop($$props, "onchange", 3, () => true),
			others = rest_props($$props, [
				"$$slots",
				"$$events",
				"$$legacy",
				"value",
				"placeholder",
				"min",
				"max",
				"step",
				"fieldname",
				"required",
				"disabled",
				"readonly",
				"valid",
				"class",
				"onchange"
			]);

		let invalid = derived(() => !valid());
		const oninput = UICommon$1.onInput(fieldname(), onchange());
		var fragment = comment();
		var node = first_child(fragment);

		{
			var consequent = ($$anchor) => {
				var p = root_1$g();
				var text = child(p, true);

				reset(p);
				template_effect(() => set_text(text, value()));
				append($$anchor, p);
			};

			var alternate = ($$anchor) => {
				var input = root_2$c();

				remove_input_defaults(input);

				let attributes;

				template_effect(() => attributes = set_attributes(input, attributes, {
					id: `form-field-number-${fieldname() ?? ""}`,
					class: `input ${classes() ?? ""}`,
					type: "number",
					name: fieldname(),
					invalid: get$2(invalid),
					disabled: disabled(),
					required: required(),
					readonly: readonly(),
					min: min(),
					max: max(),
					step: step(),
					placeholder: $LOCALE()[placeholder()],
					autocomplete: fieldname(),
					onchange: oninput,
					oninput,
					"aria-controls": `input-field-helper-${fieldname() ?? ""}`,
					"aria-describedby": `input-field-helper-${fieldname() ?? ""}`,
					...others
				}));

				bind_value(input, value);
				append($$anchor, input);
			};

			if_block(node, ($$render) => {
				if (readonly()) $$render(consequent); else $$render(alternate, false);
			});
		}

		append($$anchor, fragment);
		pop();
	}

	var root_2$b = template(`<!> <!> <!>`, 1);
	var root_8$1 = template(`<!> <!> <!>`, 1);
	var root$i = template(`<!> <!> <!>`, 1);

	function Ui_named_numbers_list($$anchor, $$props) {
		push($$props, true);

		/** @type {import('./type').UIInputProps} */
		let fieldname = prop($$props, "fieldname", 3, "numbers_list"),
			value = prop($$props, "value", 31, () => proxy({})),
			label = prop($$props, "label", 3, "named numbers list"),
			placeholder = prop($$props, "placeholder", 15, "new item"),
			readonly = prop($$props, "readonly", 3, false),
			onchange = prop($$props, "onchange", 3, () => true);

		let list = derived(() => Object.keys(value()).map((name) => {
			return {
				id: name,
				title: name,
				number: value()[name]
			};
		}));

		function remove(id) {
			if (notCommon$1.objHas(value(), id)) {
				delete value()[id];
				value(value());
				onchange()({ value: value(), field: fieldname() });
			}
		}

		function add() {
			const id = newVal.id.trim();
			const number = parseInt(newVal.number);

			if (id && id !== "" && !isNaN(number) && !notCommon$1.objHas(value(), id)) {
				value(value()[id] = number, true);
			}

			onchange()({ value: value(), field: fieldname() });
		}

		const createNewVal = () => {
			return { id: "", number: 0 };
		};

		let newVal = proxy(createNewVal());
		var fragment = root$i();
		var node = first_child(fragment);

		Ui_title(node, {
			get title() {
				return label();
			},
			size: 5
		});

		var node_1 = sibling(node, 2);

		each(node_1, 17, () => get$2(list), (item) => item.id, ($$anchor, item) => {
			Ui_columns($$anchor, {
				children: ($$anchor, $$slotProps) => {
					var fragment_2 = root_2$b();
					var node_2 = first_child(fragment_2);

					Ui_column(node_2, {
						classes: "is-6",
						children: ($$anchor, $$slotProps) => {
							next();

							var text$1 = text();

							template_effect(() => set_text(text$1, get$2(item).title));
							append($$anchor, text$1);
						},
						$$slots: { default: true }
					});

					var node_3 = sibling(node_2, 2);

					Ui_column(node_3, {
						classes: "is-4",
						children: ($$anchor, $$slotProps) => {
							next();

							var text_1 = text();

							template_effect(() => set_text(text_1, get$2(item).number));
							append($$anchor, text_1);
						},
						$$slots: { default: true }
					});

					var node_4 = sibling(node_3, 2);

					{
						var consequent = ($$anchor) => {
							Ui_column($$anchor, {
								classes: "is-2",
								children: ($$anchor, $$slotProps) => {
									Ui_button($$anchor, {
										icon: "minus",
										action: () => remove(get$2(item).id)
									});
								},
								$$slots: { default: true }
							});
						};

						if_block(node_4, ($$render) => {
							if (!readonly()) $$render(consequent);
						});
					}

					append($$anchor, fragment_2);
				},
				$$slots: { default: true }
			});
		});

		var node_5 = sibling(node_1, 2);

		{
			var consequent_1 = ($$anchor) => {
				Ui_columns($$anchor, {
					children: ($$anchor, $$slotProps) => {
						var fragment_8 = root_8$1();
						var node_6 = first_child(fragment_8);

						Ui_column(node_6, {
							classes: "is-6",
							children: ($$anchor, $$slotProps) => {
								Ui_textfield($$anchor, {
									get value() {
										return newVal.id;
									},
									set value($$value) {
										newVal.id = $$value;
									},
									get placeholder() {
										return placeholder();
									},
									set placeholder($$value) {
										placeholder($$value);
									}
								});
							},
							$$slots: { default: true }
						});

						var node_7 = sibling(node_6, 2);

						Ui_column(node_7, {
							classes: "is-4",
							children: ($$anchor, $$slotProps) => {
								Ui_number($$anchor, {
									get value() {
										return newVal.number;
									},
									set value($$value) {
										newVal.number = $$value;
									}
								});
							},
							$$slots: { default: true }
						});

						var node_8 = sibling(node_7, 2);

						Ui_column(node_8, {
							classes: "is-2",
							children: ($$anchor, $$slotProps) => {
								Ui_button($$anchor, { icon: "plus", action: () => add() });
							},
							$$slots: { default: true }
						});

						append($$anchor, fragment_8);
					},
					$$slots: { default: true }
				});
			};

			if_block(node_5, ($$render) => {
				if (!readonly()) $$render(consequent_1);
			});
		}

		append($$anchor, fragment);
		pop();
	}

	var root$h = template(`<input>`);

	function Ui_password($$anchor, $$props) {
		push($$props, true);

		const $$stores = setup_stores();
		const $LOCALE = () => store_get(LOCALE, "$LOCALE", $$stores);

		/** @type {import('./type').UIInputProps} */
		prop($$props, "inputStarted", 11, false);
			let value = prop($$props, "value", 15, ""),
			placeholder = prop($$props, "placeholder", 3, ""),
			fieldname = prop($$props, "fieldname", 3, "password"),
			required = prop($$props, "required", 3, true),
			readonly = prop($$props, "readonly", 3, false),
			disabled = prop($$props, "disabled", 3, false),
			valid = prop($$props, "valid", 3, true),
			classes = prop($$props, "class", 3, ""),
			onchange = prop($$props, "onchange", 3, () => true),
			others = rest_props($$props, [
				"$$slots",
				"$$events",
				"$$legacy",
				"inputStarted",
				"value",
				"placeholder",
				"fieldname",
				"required",
				"readonly",
				"disabled",
				"valid",
				"class",
				"onchange"
			]);

		let invalid = derived(() => !valid());
		const oninput = UICommon$1.onInput(fieldname(), onchange());
		var input = root$h();

		remove_input_defaults(input);

		let attributes;

		template_effect(() => attributes = set_attributes(input, attributes, {
			id: `form-field-password-${fieldname() ?? ""}`,
			class: `input ${classes() ?? ""}`,
			type: "password",
			name: fieldname(),
			invalid: get$2(invalid),
			required: required(),
			readonly: readonly(),
			disabled: disabled(),
			placeholder: $LOCALE()[placeholder()],
			autocomplete: fieldname(),
			onchange: oninput,
			oninput,
			"aria-controls": `input-field-helper-${fieldname() ?? ""}`,
			"aria-describedby": `input-field-helper-${fieldname() ?? ""}`,
			...others
		}));

		bind_value(input, value);
		append($$anchor, input);
		pop();
	}

	function Ui_radio_buttons($$anchor, $$props) {
		push($$props, true);

		//
		/**
		 * @typedef {Object} Props
		 * @property {string} [fieldname]
		 * @property {any} [variants] - [
		array of groups
		{
		id:number,
		title:string|object,
		image:string|object,
		variants = [
		array of values variants in group
		{
		id:number,
		title:string|object,
		description:string|object,
		image:string|object,
		value:object
		}]
		}
		]
		 * @property {any} value - multiple && multiple in group
		{
		array of arrays of selected values in group
		if no selection group should be empty array
		[groupId]: [...variantsId]
		}
		multiple && one in group
		{
		[groupId]: variantId
		}
		only one (not multiple && one in group)
		{
		group: groupId
		value: variantId
		}
		 * @property {any} title
		 * @property {any} image
		 * @property {any} [buttonProps]
		 * @property {any} [titleComponent]
		 * @property {any} [titleComponentProps]
		 * @property {any} [imageComponent]
		 * @property {any} [imageComponentProps]
		 * @property {any} [descriptionComponent]
		 * @property {any} [descriptionComponentProps]
		 * @property {any} [listComponent]
		 * @property {any} [listComponentProps]
		 * @property {any} [getUIItem]
		 * @property {any} [getDefaultItemSublime]
		 * @property {any} [uiOn]
		 * @property {any} [uiOff]
		 */
		/** @type {Props} */
		let fieldname = prop($$props, "fieldname", 3, "radio-buttons"),
			variants = prop($$props, "variants", 19, () => []),
			value = prop($$props, "value", 15),
			buttonProps = prop($$props, "buttonProps", 19, () => ({})),
			titleComponent = prop($$props, "titleComponent", 3, Ui_title),
			titleComponentProps = prop($$props, "titleComponentProps", 19, () => ({ size: 5 })),
			imageComponent = prop($$props, "imageComponent", 3, Ui_image),
			imageComponentProps = prop($$props, "imageComponentProps", 19, () => ({ covered: true })),
			descriptionComponent = prop($$props, "descriptionComponent", 3, Ui_buttons),
			descriptionComponentProps = prop($$props, "descriptionComponentProps", 19, () => ({})),
			listComponent = prop($$props, "listComponent", 3, Ui_list),
			listComponentProps = prop($$props, "listComponentProps", 19, () => ({})),
			getUIItem = prop($$props, "getUIItem", 3, (valueId) => {
				return variantsButtons.find((btnVal) => btnVal.value === valueId);
			}),
			getDefaultItemSublime = prop($$props, "getDefaultItemSublime", 3, () => {
				return variants()[0].value;
			}),
			uiOn = prop($$props, "uiOn", 3, (item) => {
				item.color = "success";
				item.outlined = false;
			}),
			uiOff = prop($$props, "uiOff", 3, (item) => {
				item.color = false;
				item.outlined = true;
			}),
			onchange = prop($$props, "onchange", 3, () => true);

		onMount(() => {
			initVariantsButton();
			selectDefault();
		});

		let variantsButtons = [],
			listItems = state(proxy([]));

		function initVariantsButton() {
			variantsButtons = variants().map((variant) => {
				return { ...buttonProps(), ...variant };
			});

			set(listItems, proxy([
				{
					id: 0,
					title: $$props.title,
					image: $$props.image,
					description: { values: variantsButtons }
				}
			]));
		}

		//
		function toggle(selectedValue) {
			let ui = { on: undefined, off: undefined };

			//
			if (value()) {
				ui.off = value();
				ui.on = selectedValue;
			}

			value(selectedValue);
			updateUI(ui);
			//
			onchange()({ field: fieldname(), value: value() });
		}

		//
		function updateUI(changes) {
			if (changes.off) {
				uiOff()(getUIItem()(changes.off));
			}

			if (changes.on) {
				uiOn()(getUIItem()(changes.on));
			}

			variantsButtons = variantsButtons;
			set(listItems, proxy(get$2(listItems)));
		}

		//
		function selectDefault() {
			if (variants().length > 0) {
				if (typeof value() !== "undefined") {
					updateUI({ on: value() });
				} else {
					const defValue = getDefaultItemSublime()();

					toggle(defValue);
				}
			}
		}

		const SvelteComponent = derived(listComponent);
		var fragment = comment();
		var node = first_child(fragment);

		var descriptionComponentProps_1 = derived(() => ({
			...descriptionComponentProps(),
			action(event, value) {
				toggle(value);
			}
		}));

		component(node, () => get$2(SvelteComponent), ($$anchor, $$component) => {
			$$component($$anchor, spread_props(listComponentProps, {
				get titleComponent() {
					return titleComponent();
				},
				get titleComponentProps() {
					return titleComponentProps();
				},
				get descriptionComponent() {
					return descriptionComponent();
				},
				get descriptionComponentProps() {
					return get$2(descriptionComponentProps_1);
				},
				get imageComponent() {
					return imageComponent();
				},
				get imageComponentProps() {
					return imageComponentProps();
				},
				get items() {
					return get$2(listItems);
				},
				set items($$value) {
					set(listItems, proxy($$value));
				}
			}));
		});

		append($$anchor, fragment);
		pop();
	}

	var root_1$f = template(`<p> </p>`);
	var root_4$8 = template(`<option></option>`);
	var root_3$8 = template(`<datalist></datalist>`);
	var root_2$a = template(`<input> <output> </output> <!>`, 1);

	function Ui_range($$anchor, $$props) {
		push($$props, true);

		const $$stores = setup_stores();
		const $LOCALE = () => store_get(LOCALE, "$LOCALE", $$stores);

		/** @type {import('./type').UIInputProps} */
		let value = prop($$props, "value", 15, 10),
			min = prop($$props, "min", 3, 0),
			max = prop($$props, "max", 3, 100),
			step = prop($$props, "step", 3, 1),
			tickmarks = prop($$props, "tickmarks", 3, false),
			placeholder = prop($$props, "placeholder", 3, ""),
			fieldname = prop($$props, "fieldname", 3, "range"),
			required = prop($$props, "required", 3, true),
			disabled = prop($$props, "disabled", 3, false),
			readonly = prop($$props, "readonly", 3, false),
			valid = prop($$props, "valid", 3, true),
			classes = prop($$props, "class", 3, ""),
			onchange = prop($$props, "onchange", 3, () => true),
			others = rest_props($$props, [
				"$$slots",
				"$$events",
				"$$legacy",
				"value",
				"min",
				"max",
				"step",
				"tickmarks",
				"placeholder",
				"fieldname",
				"required",
				"disabled",
				"readonly",
				"valid",
				"class",
				"onchange"
			]);

		let invalid = derived(() => !valid());
		const oninput = UICommon$1.onInput(fieldname(), onchange());
		var fragment = comment();
		var node = first_child(fragment);

		{
			var consequent = ($$anchor) => {
				var p = root_1$f();
				var text = child(p, true);

				reset(p);
				template_effect(() => set_text(text, value()));
				append($$anchor, p);
			};

			var alternate = ($$anchor) => {
				var fragment_1 = root_2$a();
				var input = first_child(fragment_1);

				remove_input_defaults(input);

				let attributes;
				var output = sibling(input, 2);
				var text_1 = child(output, true);

				reset(output);

				var node_1 = sibling(output, 2);

				{
					var consequent_1 = ($$anchor) => {
						var datalist = root_3$8();

						each(datalist, 21, tickmarks, index$d, ($$anchor, tickmark) => {
							var option = root_4$8();
							var option_value = {};

							template_effect(() => {
								if (option_value !== (option_value = get$2(tickmark).value)) {
									option.value = null == (option.__value = get$2(tickmark).value) ? "" : get$2(tickmark).value;
								}

								set_attribute(option, "label", get$2(tickmark).label);
							});

							append($$anchor, option);
						});

						reset(datalist);
						template_effect(() => set_attribute(datalist, "id", `form-field-range-${fieldname() ?? ""}-tickmarks`));
						append($$anchor, datalist);
					};

					if_block(node_1, ($$render) => {
						if (Array.isArray(tickmarks()) && tickmarks().length) $$render(consequent_1);
					});
				}

				template_effect(() => {
					attributes = set_attributes(input, attributes, {
						id: `form-field-range-${fieldname() ?? ""}`,
						class: `input big-number slider has-output is-fullwidth is-success ${classes() ?? ""}`,
						type: "range",
						name: fieldname(),
						min: min(),
						max: max(),
						step: step(),
						list: `form-field-range-${fieldname() ?? ""}-tickmarks`,
						invalid: get$2(invalid),
						disabled: disabled(),
						required: required(),
						readonly: readonly(),
						placeholder: $LOCALE()[placeholder()],
						autocomplete: fieldname(),
						"aria-controls": `input-field-helper-${fieldname() ?? ""}`,
						"aria-describedby": `input-field-helper-${fieldname() ?? ""}`,
						onchange: oninput,
						oninput,
						...others
					});

					set_attribute(output, "for", `form-field-range-${fieldname() ?? ""}`);
					set_text(text_1, value());
				});

				bind_value(input, value);
				append($$anchor, fragment_1);
			};

			if_block(node, ($$render) => {
				if (readonly()) $$render(consequent); else $$render(alternate, false);
			});
		}

		append($$anchor, fragment);
		pop();
	}

	function Ui_select_from_model($$anchor, $$props) {
		push($$props, true);

		/**
		 * @typedef {Object} Props
		 * @property {boolean} [inputStarted]
		 * @property {any} value
		 * @property {string} [placeholder]
		 * @property {string} [emptyValueTitle]
		 * @property {string} [fieldname]
		 * @property {string} [modelName]
		 * @property {string} [actionName]
		 * @property {any} [actionFilter]
		 * @property {any} [actionSorter]
		 * @property {any} [actionPager]
		 * @property {any} [actionSearch]
		 * @property {string} [optionId]
		 * @property {string} [optionTitle]
		 * @property {boolean} [icon]
		 * @property {boolean} [required]
		 * @property {boolean} [readonly]
		 * @property {boolean} [multiple]
		 * @property {number} [size]
		 * @property {boolean} [valid]
		 * @property {boolean} [validated]
		 * @property {boolean} [errors]
		 * @property {boolean} [formErrors]
		 * @property {boolean} [formLevelError]
		 * @property {boolean} [returnVariant]
		 */
		/** @type {Props} */
		let placeholder = prop($$props, "placeholder", 3, ""),
			emptyValueTitle = prop($$props, "emptyValueTitle", 3, ""),
			fieldname = prop($$props, "fieldname", 3, "selectFromModel"),
			modelName = prop($$props, "modelName", 3, ""),
			actionName = prop($$props, "actionName", 3, ""),
			actionFilter = prop($$props, "actionFilter", 19, () => ({})),
			actionSorter = prop($$props, "actionSorter", 19, () => ({})),
			actionPager = prop($$props, "actionPager", 19, () => ({})),
			actionSearch = prop($$props, "actionSearch", 3, undefined),
			optionId = prop($$props, "optionId", 3, ":_id"),
			optionTitle = prop($$props, "optionTitle", 3, ":title"),
			required = prop($$props, "required", 3, true),
			readonly = prop($$props, "readonly", 3, false),
			multiple = prop($$props, "multiple", 3, false),
			size = prop($$props, "size", 3, 8),
			valid = prop($$props, "valid", 3, true),
			returnVariant = prop($$props, "returnVariant", 3, false),
			classes = prop($$props, "class", 3, ""),
			onchange = prop($$props, "onchange", 3, () => true),
			onerror = prop($$props, "onerror", 3, () => {}),
			others = rest_props($$props, [
				"$$slots",
				"$$events",
				"$$legacy",
				"value",
				"placeholder",
				"emptyValueTitle",
				"fieldname",
				"modelName",
				"actionName",
				"actionFilter",
				"actionSorter",
				"actionPager",
				"actionSearch",
				"optionId",
				"optionTitle",
				"required",
				"readonly",
				"multiple",
				"size",
				"valid",
				"returnVariant",
				"class",
				"onchange",
				"onerror"
			]);

		function argumentsSetProvided() {
			return modelName() && actionName() && actionFilter();
		}

		let loaded = false;
		let variants = state(proxy([]));
		let disabled = derived(() => !loaded);

		onMount(async () => {
			if (argumentsSetProvided()) {
				const notApp = notCommon$1.getApp();
				const Model = notApp.getModel(modelName()).setFilter(actionFilter()).setSorter(actionSorter()).setPager(actionPager()).setSearch(actionSearch());
				const response = await Model[`$` + actionName()]();

				if (response.status === DEFAULT_STATUS_SUCCESS) {
					const result = response.result;

					set(variants, proxy(result.map((item) => {
						return {
							id: notPath.get(optionId(), item),
							title: notPath.get(optionTitle(), item)
						};
					})));
				} else {
					onerror()(response.errors || response.message);
				}
			}
		});

		function onChange(data) {
			if (returnVariant()) {
				onchange()({
					...data,
					value: get$2(variants).find((itm) => itm.id === data.value)
				});
			} else {
				onchange()(data);
			}
		}

		Ui_select($$anchor, spread_props(
			{
				get value() {
					return $$props.value;
				},
				get class() {
					return classes();
				},
				get placeholder() {
					return placeholder();
				},
				get emptyValueTitle() {
					return emptyValueTitle();
				},
				get fieldname() {
					return fieldname();
				},
				get required() {
					return required();
				},
				get readonly() {
					return readonly();
				},
				get disabled() {
					return get$2(disabled);
				},
				get multiple() {
					return multiple();
				},
				get size() {
					return size();
				},
				get valid() {
					return valid();
				},
				onchange: onChange
			},
			() => others,
			{
				get variants() {
					return get$2(variants);
				},
				set variants($$value) {
					set(variants, proxy($$value));
				}
			}
		));

		pop();
	}

	var root_2$9 = template(`<!> <input> <label class="label"><!></label>`, 1);

	function Ui_switch$1($$anchor, $$props) {
		push($$props, true);

		const $$stores = setup_stores();
		const $LOCALE = () => store_get(LOCALE, "$LOCALE", $$stores);

		/** @type {import('./type').UIInputProps} */
		let value = prop($$props, "value", 15, false),
			label = prop($$props, "label", 3, ""),
			hideLabel = prop($$props, "hideLabel", 3, false),
			placeholder = prop($$props, "placeholder", 3, ""),
			fieldname = prop($$props, "fieldname", 3, "textfield"),
			required = prop($$props, "required", 3, true),
			readonly = prop($$props, "readonly", 3, false),
			disabled = prop($$props, "disabled", 3, false),
			valid = prop($$props, "valid", 3, true),
			classes = prop($$props, "class", 3, ""),
			onchange = prop($$props, "onchange", 3, () => true),
			others = rest_props($$props, [
				"$$slots",
				"$$events",
				"$$legacy",
				"value",
				"label",
				"hideLabel",
				"placeholder",
				"fieldname",
				"required",
				"readonly",
				"disabled",
				"valid",
				"class",
				"onchange"
			]);

		let invalid = derived(() => !valid());
		const oninput = UICommon$1.onInput(fieldname(), onchange());
		var fragment = comment();
		var node = first_child(fragment);

		{
			var consequent = ($$anchor) => {
				Ui_boolean($$anchor, {
					get LC_TRUE() {
						return label();
					},
					get LC_FALSE() {
						return label();
					},
					get value() {
						return value();
					}
				});
			};

			var alternate_1 = ($$anchor) => {
				var fragment_2 = root_2$9();
				var node_1 = first_child(fragment_2);

				{
					var consequent_1 = ($$anchor) => {
						Ui_boolean($$anchor, { value: false });
					};

					if_block(node_1, ($$render) => {
						if (!label() && !hideLabel()) $$render(consequent_1);
					});
				}

				var input = sibling(node_1, 2);

				remove_input_defaults(input);

				let attributes;
				var label_1 = sibling(input, 2);
				var node_2 = child(label_1);

				{
					var consequent_3 = ($$anchor) => {
						var fragment_4 = comment();
						var node_3 = first_child(fragment_4);

						{
							var consequent_2 = ($$anchor) => {
								var text$1 = text();

								template_effect(() => set_text(text$1, $LOCALE()[label()]));
								append($$anchor, text$1);
							};

							var alternate = ($$anchor) => {
								Ui_boolean($$anchor, { value: false });
							};

							if_block(node_3, ($$render) => {
								if (label()) $$render(consequent_2); else $$render(alternate, false);
							});
						}

						append($$anchor, fragment_4);
					};

					if_block(node_2, ($$render) => {
						if (!hideLabel()) $$render(consequent_3);
					});
				}

				reset(label_1);

				template_effect(() => {
					attributes = set_attributes(input, attributes, {
						id: `form-field-switch-${fieldname() ?? ""}`,
						class: `switch ${classes() ?? ""}`,
						type: "checkbox",
						name: fieldname(),
						placeholder: $LOCALE()[placeholder()],
						disabled: disabled(),
						required: required(),
						readonly: readonly(),
						invalid: get$2(invalid),
						onblur: oninput,
						oninput,
						"aria-controls": `input-field-helper-${fieldname() ?? ""}`,
						"aria-describedby": `input-field-helper-${fieldname() ?? ""}`,
						...others
					});

					set_attribute(label_1, "for", `form-field-switch-${fieldname() ?? ""}`);
				});

				bind_checked(input, value);
				append($$anchor, fragment_2);
			};

			if_block(node, ($$render) => {
				if (readonly()) $$render(consequent); else $$render(alternate_1, false);
			});
		}

		append($$anchor, fragment);
		pop();
	}

	var root_4$7 = template(`<div class="switch-list-item"><input> <!></div>`);

	function Ui_switch_list($$anchor, $$props) {
		push($$props, true);

		/** @type {import('./type').UIInputProps} */
		let value = prop($$props, "value", 31, () => proxy([])),
			variants = prop($$props, "variants", 19, () => []),
			fieldname = prop($$props, "fieldname", 3, "textfield"),
			required = prop($$props, "required", 3, true),
			readonly = prop($$props, "readonly", 3, false),
			disabled = prop($$props, "disabled", 3, false),
			valid = prop($$props, "valid", 3, true),
			classes = prop($$props, "class", 3, " is-rounded is-success "),
			onchange = prop($$props, "onchange", 3, () => true),
			others = rest_props($$props, [
				"$$slots",
				"$$events",
				"$$legacy",
				"value",
				"variants",
				"fieldname",
				"required",
				"readonly",
				"disabled",
				"valid",
				"class",
				"onchange"
			]);

		function addId(varId) {
			if (!value().includes(varId)) {
				value().push(varId);
				value(value());
			}
		}

		function remId(varId) {
			if (value().includes(varId)) {
				value().splice(value().indexOf(varId), 1);
				value(value());
			}
		}

		function onChange(ev) {
			const varId = ev.target.id.split("-variant-").at(-1);

			ev.target.checked ? addId(varId) : remId(varId);

			let data = { field: fieldname(), value: value() };

			onchange()(data);
			return true;
		}

		let invalid = derived(() => !valid());
		var fragment = comment();
		var node = first_child(fragment);

		{
			var consequent_1 = ($$anchor) => {
				var fragment_1 = comment();
				var node_1 = first_child(fragment_1);

				{
					var consequent = ($$anchor) => {
						var text$1 = text();

						template_effect(() => set_text(text$1, variants().filter((variant) => value().includes(variant.id)).map((variant) => variant.title).join(", ")));
						append($$anchor, text$1);
					};

					if_block(node_1, ($$render) => {
						if (value()) $$render(consequent);
					});
				}

				append($$anchor, fragment_1);
			};

			var alternate = ($$anchor) => {
				var fragment_3 = comment();
				var node_2 = first_child(fragment_3);

				each(node_2, 17, variants, (variant) => variant.id, ($$anchor, variant) => {
					var div = root_4$7();
					var input = child(div);

					remove_input_defaults(input);

					let attributes;
					var node_3 = sibling(input, 2);

					Ui_label(node_3, {
						class: "label",
						get for() {
							return `form-field-switch-${fieldname() ?? ""}-variant-${get$2(variant).id ?? ""}`;
						},
						get label() {
							return get$2(variant).title;
						}
					});

					reset(div);

					template_effect(() => attributes = set_attributes(input, attributes, {
						type: "checkbox",
						class: `switch ${classes() ?? ""}`,
						id: `form-field-switch-${fieldname() ?? ""}-variant-${get$2(variant).id ?? ""}`,
						checked: value().includes(get$2(variant).id),
						name: fieldname(),
						disabled: disabled(),
						required: required(),
						readonly: readonly(),
						invalid: get$2(invalid),
						onblur: onChange,
						oninput: onChange,
						"aria-controls": `input-field-helper-${fieldname() ?? ""}-variant-${get$2(variant).id ?? ""}`,
						"aria-describedby": `input-field-helper-${fieldname() ?? ""}-variant-${get$2(variant).id ?? ""}`,
						...others
					}));

					append($$anchor, div);
				});

				append($$anchor, fragment_3);
			};

			if_block(node, ($$render) => {
				if (readonly()) $$render(consequent_1); else $$render(alternate, false);
			});
		}

		append($$anchor, fragment);
		pop();
	}

	function remove(e, value, changeEvent) {
		e && e.preventDefault();

		let id = e.currentTarget.dataset.id;

		if (value().includes(id)) {
			value().splice(value().indexOf(id), 1);
			value(value());
			changeEvent();
		}

		return false;
	}

	var root_4$6 = template(`<button aria-label="delete button" class="delete is-small"></button>`);
	var root_3$7 = template(`<span> <!></span>`);
	var root_6$6 = template(`<div class="select is-small"><select><!><!></select></div> <!>`, 1);
	var root_1$e = template(`<!> <!>`, 1);

	function Ui_tag_select($$anchor, $$props) {
		push($$props, true);

		const $$stores = setup_stores();
		const $LOCALE = () => store_get(LOCALE, "$LOCALE", $$stores);

		onMount(() => {
			clearValueFromDeadVariants();
		});

		/**
		 * @typedef {Object} Props
		 * @property {any} [value] - list of item ids
		 * @property {any} [variants]
		 * @property {string} [fieldname]
		 * @property {boolean} [readonly] - export let required = true;
		 * @property {boolean} [valid]
		 * @property {any} [beforeAdd]
		 * @property {any} [getItemId]
		 * @property {any} [getItemTitle]
		 * @property {any} [getItemType]
		 * @property {any} [buildItem]
		 */
		/** @type {Props} */
		let value = prop($$props, "value", 31, () => proxy([])),
			LC_ADD = prop($$props, "LC_ADD", 3, "not-node:add_label"),
			LC_SELECT_FROM_LIST = prop($$props, "LC_SELECT_FROM_LIST", 3, "not-node:select_from_list_label"),
			variants = prop($$props, "variants", 19, () => []),
			fieldname = prop($$props, "fieldname", 3, "tag"),
			readonly = prop($$props, "readonly", 3, false),
			beforeAdd = prop($$props, "beforeAdd", 3, () => /*variant, variants*/ {
				return true;
			}),
			getItemId = prop($$props, "getItemId", 3, (variant) => {
				return variant.id;
			}),
			getItemTitle = prop($$props, "getItemTitle", 3, (variant) => {
				return variant.title;
			}),
			getItemType = prop($$props, "getItemType", 3, (variant) => {
				return "info";
			}),
			buildItem = prop($$props, "buildItem", 3, (variant) => {
				return {
					id: getItemId()(variant),
					title: getItemTitle()(variant),
					type: getItemType()(variant)
				};
			}),
			classes = prop($$props, "class", 3, ""),
			onchange = prop($$props, "onchange", 3, () => true);

		function variantIdToVariant(id) {
			return variants().find((variant) => getItemId()(variant) === id);
		}

		function changeEvent() {
			onchange()({ field: fieldname(), value: value() });
		}

		function add(e) {
			e && e.preventDefault();

			let id = e.currentTarget.parentNode.querySelector("select").value;
			const variant = variantIdToVariant(id);

			if (!variant) {
				return false;
			}

			if (!beforeAdd()(variant, variants())) {
				return false;
			}

			if (id && value().indexOf(id) === -1) {
				value().push(id);
				value(value());
				changeEvent();
			}

			return false;
		}

		function clearValueFromDeadVariants() {
			value(value().filter((id) => {
				return variantIdToVariant(id);
			}));

			return value();
		}

		/*
		item = {
		  id,        //unique
		  title,     //some text
		  type       //for coloring items, usual html template names danger, success, etc
		}
		*/
		let items = derived(() => value().map(variantIdToVariant).filter((variant) => variant).map(buildItem()));

		Ui_columns($$anchor, {
			get class() {
				return classes();
			},
			children: ($$anchor, $$slotProps) => {
				var fragment_1 = root_1$e();
				var node = first_child(fragment_1);

				Ui_column(node, {
					children: ($$anchor, $$slotProps) => {
						var fragment_2 = comment();
						var node_1 = first_child(fragment_2);

						each(node_1, 17, () => get$2(items), (item) => item.id, ($$anchor, item) => {
							var span = root_3$7();
							var text = child(span);
							var node_2 = sibling(text);

							{
								var consequent = ($$anchor) => {
									var button = root_4$6();

									button.__click = [remove, value, changeEvent];
									template_effect(() => set_attribute(button, "data-id", get$2(item).id));
									append($$anchor, button);
								};

								if_block(node_2, ($$render) => {
									if (!readonly()) $$render(consequent);
								});
							}

							reset(span);

							template_effect(() => {
								set_class(span, `mx-1 tag is-${get$2(item).type ?? ""}`);
								set_text(text, `${$LOCALE()[get$2(item).title] ?? ""} `);
							});

							append($$anchor, span);
						});

						append($$anchor, fragment_2);
					},
					$$slots: { default: true }
				});

				var node_3 = sibling(node, 2);

				{
					var consequent_1 = ($$anchor) => {
						Ui_column($$anchor, {
							children: ($$anchor, $$slotProps) => {
								var fragment_4 = root_6$6();
								var div = first_child(fragment_4);
								var select = child(div);
								var node_4 = child(select);

								Ui_select_option(node_4, {
									value: -1,
									selected: true,
									get title() {
										return LC_SELECT_FROM_LIST();
									}
								});

								var node_5 = sibling(node_4);

								each(node_5, 17, variants, index$d, ($$anchor, variant) => {
									Ui_select_option($$anchor, {
										get value() {
											return get$2(variant).id;
										},
										get title() {
											return get$2(variant).title;
										}
									});
								});

								reset(select);
								reset(div);

								var node_6 = sibling(div, 2);

								Ui_button(node_6, {
									color: "primary",
									size: "small",
									action: add,
									get title() {
										return LC_ADD();
									}
								});

								append($$anchor, fragment_4);
							},
							$$slots: { default: true }
						});
					};

					if_block(node_3, ($$render) => {
						if (!readonly()) $$render(consequent_1);
					});
				}

				append($$anchor, fragment_1);
			},
			$$slots: { default: true }
		});

		pop();
	}

	delegate(["click"]);

	var root_1$d = template(`<p> </p>`);
	var root_2$8 = template(`<input>`);

	function Ui_telephone($$anchor, $$props) {
		push($$props, true);

		const $$stores = setup_stores();
		const $LOCALE = () => store_get(LOCALE, "$LOCALE", $$stores);

		/** @type {import('./type').UIInputProps} */
		let value = prop($$props, "value", 15, ""),
			placeholder = prop($$props, "placeholder", 3, "+7 (987) 654-32-10"),
			fieldname = prop($$props, "fieldname", 3, "telephone"),
			required = prop($$props, "required", 3, true),
			disabled = prop($$props, "disabled", 3, false),
			readonly = prop($$props, "readonly", 3, false),
			valid = prop($$props, "valid", 3, true),
			classes = prop($$props, "class", 3, ""),
			onchange = prop($$props, "onchange", 3, () => true),
			others = rest_props($$props, [
				"$$slots",
				"$$events",
				"$$legacy",
				"value",
				"placeholder",
				"fieldname",
				"required",
				"disabled",
				"readonly",
				"valid",
				"class",
				"onchange"
			]);

		let invalid = derived(() => !valid());
		const oninput = UICommon$1.onInput(fieldname(), onchange());
		var fragment = comment();
		var node = first_child(fragment);

		{
			var consequent = ($$anchor) => {
				var p = root_1$d();
				var text = child(p, true);

				reset(p);
				template_effect(() => set_text(text, value()));
				append($$anchor, p);
			};

			var alternate = ($$anchor) => {
				var input = root_2$8();

				remove_input_defaults(input);

				let attributes;

				template_effect(() => attributes = set_attributes(input, attributes, {
					id: `form-field-telephone-${fieldname() ?? ""}`,
					class: `input ${classes() ?? ""}`,
					type: "tel",
					name: fieldname(),
					invalid: get$2(invalid),
					required: required(),
					readonly: readonly(),
					disabled: disabled(),
					placeholder: $LOCALE()[placeholder()],
					autocomplete: fieldname(),
					onchange: oninput,
					oninput,
					"aria-controls": `input-field-helper-${fieldname() ?? ""}`,
					"aria-describedby": `input-field-helper-${fieldname() ?? ""}`,
					...others
				}));

				bind_value(input, value);
				append($$anchor, input);
			};

			if_block(node, ($$render) => {
				if (readonly()) $$render(consequent); else $$render(alternate, false);
			});
		}

		append($$anchor, fragment);
		pop();
	}

	var index$5 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		UIAutocomplete: Ui_autocomplete,
		UIControl: Ui_control,
		UIDate: Ui_date,
		UIDatetimeInTZ: Ui_datetime_in_tz,
		UIEmail: Ui_email,
		UIHidden: Ui_hidden,
		UIJSONArea: Ui_json_area,
		UIListOfModels: Ui_list_of_models,
		UINamedNumbersList: Ui_named_numbers_list,
		UINumber: Ui_number,
		UIPassword: Ui_password,
		UIRadioButtons: Ui_radio_buttons,
		UIRange: Ui_range,
		UISelect: Ui_select,
		UISelectFromModel: Ui_select_from_model,
		UISelectOption: Ui_select_option,
		UISwitch: Ui_switch$1,
		UISwitchList: Ui_switch_list,
		UITagSelect: Ui_tag_select,
		UITelephone: Ui_telephone,
		UITextarea: Ui_textarea,
		UITextfield: Ui_textfield
	});

	var index$4 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		UILink: Ui_link,
		UILinks: Ui_links
	});

	var root_4$5 = template(`<div class="column box"> </div>`);
	var root_1$c = template(`<div class="columns"><div class="column"><!></div> <!> <div class="column"><!></div></div>`);

	function Ui_endless_list_navigation($$anchor, $$props) {
		push($$props, true);

		const $$stores = setup_stores();
		const $LOCALE = () => store_get(LOCALE, "$LOCALE", $$stores);
		const dispatch = createEventDispatcher();

		// export let skip = 0;
		/**
		 * @typedef {Object} Props
		 * @property {number} [page] - export let count = 0;
		 * @property {number} [pages]
		 * @property {any} [buttonComponent]
		 * @property {any} [buttonComponentProps]
		 */
		/** @type {Props} */
		let page = prop($$props, "page", 3, 0),
			pages = prop($$props, "pages", 3, 0),
			buttonComponent = prop($$props, "buttonComponent", 3, Ui_button),
			buttonComponentProps = prop($$props, "buttonComponentProps", 19, () => ({}));

		var fragment = comment();
		var node = first_child(fragment);

		{
			var consequent_3 = ($$anchor) => {
				var div = root_1$c();
				var div_1 = child(div);
				var node_1 = child(div_1);

				{
					var consequent = ($$anchor) => {
						var fragment_1 = comment();
						const SvelteComponent = derived(buttonComponent);
						var node_2 = first_child(fragment_1);

						component(node_2, () => get$2(SvelteComponent), ($$anchor, $$component) => {
							$$component($$anchor, spread_props(buttonComponentProps, {
								action: () => dispatch('prev'),
								children: ($$anchor, $$slotProps) => {
									next();

									var text$1 = text();

									template_effect(() => set_text(text$1, $LOCALE()['not-node:list_navigation_prev_button_label']));
									append($$anchor, text$1);
								},
								$$slots: { default: true }
							}));
						});

						append($$anchor, fragment_1);
					};

					if_block(node_1, ($$render) => {
						if (page() > 1) $$render(consequent);
					});
				}

				reset(div_1);

				var node_3 = sibling(div_1, 2);

				{
					var consequent_1 = ($$anchor) => {
						var div_2 = root_4$5();
						var text_1 = child(div_2);

						reset(div_2);
						template_effect(() => set_text(text_1, `${page() ?? ""} / ${pages() ?? ""}`));
						append($$anchor, div_2);
					};

					if_block(node_3, ($$render) => {
						if (pages() > 1) $$render(consequent_1);
					});
				}

				var div_3 = sibling(node_3, 2);
				var node_4 = child(div_3);

				{
					var consequent_2 = ($$anchor) => {
						var fragment_3 = comment();
						const SvelteComponent_1 = derived(buttonComponent);
						var node_5 = first_child(fragment_3);

						component(node_5, () => get$2(SvelteComponent_1), ($$anchor, $$component) => {
							$$component($$anchor, spread_props(buttonComponentProps, {
								action: () => dispatch('next'),
								children: ($$anchor, $$slotProps) => {
									next();

									var text_2 = text();

									template_effect(() => set_text(text_2, $LOCALE()['not-node:list_navigation_next_button_label']));
									append($$anchor, text_2);
								},
								$$slots: { default: true }
							}));
						});

						append($$anchor, fragment_3);
					};

					if_block(node_4, ($$render) => {
						if (page() < pages()) $$render(consequent_2);
					});
				}

				reset(div_3);
				reset(div);
				append($$anchor, div);
			};

			if_block(node, ($$render) => {
				if (pages() > 0) $$render(consequent_3);
			});
		}

		append($$anchor, fragment);
		pop();
	}

	var root$g = template(`<div class="box list-item-selectable svelte-ialyiy" role="button" tabindex="0"><span> </span></div>`);

	function Ui_endless_list_simple_item($$anchor, $$props) {
		push($$props, true);

		const dispatch = createEventDispatcher();

		function click() {
			dispatch("click", {
				_id: $$props._id,
				id: $$props.id,
				title: $$props.title
			});
		}

		var div = root$g();
		var event_handler = derived(() => preventDefault(click));

		div.__click = function (...$$args) {
			get$2(event_handler)?.apply(this, $$args);
		};

		div.__keyup = click;

		var span = child(div);
		var text = child(span, true);

		reset(span);
		reset(div);
		template_effect(() => set_text(text, $$props.title));
		append($$anchor, div);
		pop();
	}

	delegate(["click", "keyup"]);

	var root$f = template(`<div><!></div> <!>`, 1);

	function Ui_endless_list($$anchor, $$props) {
		push($$props, true);

		const dispatch = createEventDispatcher();

		/**
		 * @typedef {Object} Props
		 * @property {any} [data]
		 * @property {any} [itemComponent] - list element
		 * @property {any} [itemComponentProps]
		 * @property {any} [emptyListPlaceholderComponent] - if list is empty
		 * @property {any} [emptyListPlaceholderComponentProps]
		 * @property {any} [listNavigationComponent] - prev and next block
		 * @property {any} [listNavigationComponentProps]
		 */
		/** @type {Props} */
		let data = prop($$props, "data", 31, () => proxy({
				list: [],
				skip: 0,
				count: 0,
				page: 0,
				pages: 0
			})),
			itemComponent = prop($$props, "itemComponent", 3, Ui_endless_list_simple_item),
			itemComponentProps = prop($$props, "itemComponentProps", 19, () => ({})),
			emptyListPlaceholderComponent = prop($$props, "emptyListPlaceholderComponent", 3, Ui_list_empty_placeholder),
			emptyListPlaceholderComponentProps = prop($$props, "emptyListPlaceholderComponentProps", 19, () => ({})),
			listNavigationComponent = prop($$props, "listNavigationComponent", 3, Ui_endless_list_navigation),
			listNavigationComponentProps = prop($$props, "listNavigationComponentProps", 19, () => ({}));

		function select({ detail }) {
			dispatch("select", detail);
		}

		const SvelteComponent_2 = derived(listNavigationComponent);
		var fragment = root$f();
		var div = first_child(fragment);
		var node = child(div);

		{
			var consequent = ($$anchor) => {
				var fragment_1 = comment();
				var node_1 = first_child(fragment_1);

				each(node_1, 17, () => data().list, (item) => item.id, ($$anchor, item) => {
					var fragment_2 = comment();
					const SvelteComponent = derived(itemComponent);
					var node_2 = first_child(fragment_2);

					component(node_2, () => get$2(SvelteComponent), ($$anchor, $$component) => {
						$$component($$anchor, spread_props(itemComponentProps, () => get$2(item), { $$events: { click: select } }));
					});

					append($$anchor, fragment_2);
				});

				append($$anchor, fragment_1);
			};

			var alternate = ($$anchor) => {
				var fragment_3 = comment();
				const SvelteComponent_1 = derived(emptyListPlaceholderComponent);
				var node_3 = first_child(fragment_3);

				component(node_3, () => get$2(SvelteComponent_1), ($$anchor, $$component) => {
					$$component($$anchor, spread_props(emptyListPlaceholderComponentProps));
				});

				append($$anchor, fragment_3);
			};

			if_block(node, ($$render) => {
				if (data().list.length) $$render(consequent); else $$render(alternate, false);
			});
		}

		reset(div);

		var node_4 = sibling(div, 2);

		component(node_4, () => get$2(SvelteComponent_2), ($$anchor, $$component) => {
			$$component($$anchor, spread_props(listNavigationComponentProps, {
				get page() {
					return data().page;
				},
				set page($$value) {
					data(data().page = $$value, true);
				},
				get pages() {
					return data().pages;
				},
				set pages($$value) {
					data(data().pages = $$value, true);
				},
				get skip() {
					return data().skip;
				},
				set skip($$value) {
					data(data().skip = $$value, true);
				},
				get count() {
					return data().count;
				},
				set count($$value) {
					data(data().count = $$value, true);
				},
				$$events: {
					prev($$arg) {
						bubble_event.call(this, $$props, $$arg);
					},
					next($$arg) {
						bubble_event.call(this, $$props, $$arg);
					}
				}
			}));
		});

		append($$anchor, fragment);
		pop();
	}

	function Ui_list_select($$anchor, $$props) {
		push($$props, true);

		const dispatch = createEventDispatcher();

		/**
		 * @typedef {Object} Props
		 * @property {string} [fieldname]
		 * @property {boolean} [multiple]
		 * @property {boolean} [atLeastOne]
		 * @property {any} [variants] - array of values variants in group
		[
		{
		id:number,
		title:string|object,
		description:string|object,
		image:string|object,
		value:object
		}
		]
		 * @property {any} value - [...selectedItemsValues]
		 * @property {any} [selectedVariantsIds] - [...selectedItemsIds]
		 * @property {any} [titleComponent]
		 * @property {any} [titleComponentProps]
		 * @property {any} [imageComponent]
		 * @property {any} [imageComponentProps]
		 * @property {any} [descriptionComponent]
		 * @property {any} [descriptionComponentProps]
		 * @property {any} [listComponent]
		 * @property {any} [listComponentProps]
		 * @property {any} [sublimeValue]
		 * @property {any} [getItem]
		 * @property {any} [getItemValue]
		 * @property {any} [getDefaultItemSublime]
		 * @property {any} [uiOn]
		 * @property {any} [uiOff]
		 */
		/** @type {Props} */
		let fieldname = prop($$props, "fieldname", 3, "list-select"),
			multiple = prop($$props, "multiple", 3, false),
			atLeastOne = prop($$props, "atLeastOne", 3, true),
			variants = prop($$props, "variants", 31, () => proxy([])),
			value = prop($$props, "value", 15),
			selectedVariantsIds = prop($$props, "selectedVariantsIds", 31, () => proxy([])),
			titleComponent = prop($$props, "titleComponent", 3, Ui_title),
			titleComponentProps = prop($$props, "titleComponentProps", 19, () => ({ size: 5 })),
			imageComponent = prop($$props, "imageComponent", 3, Ui_image),
			imageComponentProps = prop($$props, "imageComponentProps", 19, () => ({ covered: true })),
			descriptionComponent = prop($$props, "descriptionComponent", 3, Ui_buttons),
			descriptionComponentProps = prop($$props, "descriptionComponentProps", 19, () => ({})),
			listComponent = prop($$props, "listComponent", 3, Ui_list),
			listComponentProps = prop($$props, "listComponentProps", 19, () => ({})),
			sublimeValue = prop($$props, "sublimeValue", 3, (value) => value.id),
			getItem = prop($$props, "getItem", 3, ({ valueId }) => {
				return variants().find((btnVal) => btnVal.value.id === valueId);
			}),
			getItemValue = prop($$props, "getItemValue", 3, ({ valueId }) => {
				return getItem()({ valueId }).value;
			}),
			getDefaultItemSublime = prop($$props, "getDefaultItemSublime", 3, () => {
				return variants()[0].id;
			}),
			uiOn = prop($$props, "uiOn", 3, (item) => {
				item.color = "success";
				item.outlined = false;
			}),
			uiOff = prop($$props, "uiOff", 3, (item) => {
				item.color = false;
				item.outlined = true;
			});

		onMount(() => {
			if (value() && Array.isArray(value())) {
				if (atLeastOne() && value().length) {
					value().forEach((itemValue) => {
						let ui = updateSelected(itemValue);

						updateUI(ui);
					});
				}

				return;
			}

			selectDefault();
		});

		//
		function countOfSelected() {
			return Array.isArray(value()) ? selectedVariantsIds().length : 0;
		}

		const notLastOne = () => !(atLeastOne() && countOfSelected() === 1);

		//
		function updateSelected(detail) {
			const valueId = sublimeValue()(detail);
			let ui = { on: undefined, off: undefined };

			//
			if (!Array.isArray(selectedVariantsIds())) {
				selectedVariantsIds([]);
			}

			if (multiple()) {
				if (selectedVariantsIds().includes(valueId)) {
					if (notLastOne()) {
						selectedVariantsIds().splice(selectedVariantsIds().indexOf(valueId), 1);
						ui.off = { valueId };
					}
				} else {
					selectedVariantsIds().push(valueId);
					ui.on = { valueId };
				}
			} else {
				if (atLeastOne()) {
					if (!selectedVariantsIds().includes(valueId)) {
						if (countOfSelected() > 0) {
							ui.off = { valueId: selectedVariantsIds().pop() };
						}

						ui.on = { valueId };
						selectedVariantsIds([valueId]);
					}
				} else {
					if (selectedVariantsIds().includes(valueId)) {
						ui.off = { valueId };
						selectedVariantsIds().splice(selectedVariantsIds().indexOf(valueId), 1);
					} else {
						ui.on = { valueId };
						selectedVariantsIds().push(valueId);
					}
				}
			}

			selectedVariantsIds(selectedVariantsIds());
			return ui;
		}

		//
		function toggle(detail) {
			let ui = updateSelected(detail);

			updateUI(ui);
			//
			updateValue();
			//
			dispatch("change", { field: fieldname(), value: value() });
		}

		//
		function updateUI(changes) {
			if (changes.off) {
				uiOff()(getItem()(changes.off));
			}

			if (changes.on) {
				uiOn()(getItem()(changes.on));
			}

			variants(variants());
		}

		//
		function updateValue() {
			let newVal = [];

			if (typeof selectedVariantsIds() !== "undefined" && Array.isArray(selectedVariantsIds())) {
				newVal = selectedVariantsIds().filter((val) => typeof val !== "undefined").map((valueId) => getItemValue()({ valueId }));
			}

			value(newVal);
		}

		//
		function selectDefault() {
			if (atLeastOne() && variants().length > 0) {
				const defValueId = getDefaultItemSublime()();

				toggle({ id: defValueId });
			}
		}

		const SvelteComponent = derived(listComponent);
		var fragment = comment();
		var node = first_child(fragment);

		var descriptionComponentProps_1 = derived(() => ({
			...descriptionComponentProps(),
			action(event, value) {
				toggle(value);
			}
		}));

		component(node, () => get$2(SvelteComponent), ($$anchor, $$component) => {
			$$component($$anchor, spread_props(listComponentProps, {
				get titleComponent() {
					return titleComponent();
				},
				get titleComponentProps() {
					return titleComponentProps();
				},
				get descriptionComponent() {
					return descriptionComponent();
				},
				get descriptionComponentProps() {
					return get$2(descriptionComponentProps_1);
				},
				get imageComponent() {
					return imageComponent();
				},
				get imageComponentProps() {
					return imageComponentProps();
				},
				get items() {
					return variants();
				},
				set items($$value) {
					variants($$value);
				}
			}));
		});

		append($$anchor, fragment);
		pop();
	}

	function Ui_list_select_with_groups($$anchor, $$props) {
		push($$props, true);

		/**
		 * @typedef {Object} Props
		 * @property {string} [fieldname]
		 * @property {boolean} [multiple]
		 * @property {boolean} [onlyOneInGroup]
		 * @property {boolean} [atLeastOne]
		 * @property {any} [variants] - [
		array of groups
		{
		id:number,
		title:string|object,
		image:string|object,
		variants = [
		array of values variants in group
		{
		id:number,
		title:string|object,
		description:string|object,
		image:string|object,
		value:object
		}]
		}
		]
		 * @property {any} [variantsSelected] - multiple && multiple in group
		{
		array of arrays of selected values in group
		if no selection group should be empty array
		[groupId]: [...variantsId]
		}
		multiple && one in group
		{
		[groupId]: variantId
		}
		only one (not multiple && one in group)
		{
		group: groupId
		value: variantId
		}
		 * @property {any} value - {[groupId]: [...valuesOfSelectedItems]}
		 * @property {any} [titleComponent]
		 * @property {any} [titleComponentProps]
		 * @property {any} [imageComponent]
		 * @property {any} [imageComponentProps]
		 * @property {any} [descriptionComponent]
		 * @property {any} [descriptionComponentProps]
		 * @property {any} [listComponent]
		 * @property {any} [listComponentProps]
		 * @property {any} [sublimeValue]
		 * @property {any} [getItem]
		 * @property {any} [getItemValue]
		 * @property {any} [getDefaultItemSublime]
		 * @property {any} [uiOn]
		 * @property {any} [uiOff]
		 */
		/** @type {Props} */
		let onchange = prop($$props, "onchange", 3, () => true),
			fieldname = prop($$props, "fieldname", 3, "list-select-tags"),
			multiple = prop($$props, "multiple", 3, false),
			onlyOneInGroup = prop($$props, "onlyOneInGroup", 3, true),
			atLeastOne = prop($$props, "atLeastOne", 3, true),
			variants = prop($$props, "variants", 31, () => proxy([])),
			variantsSelected = prop($$props, "variantsSelected", 31, () => proxy({})),
			value = prop($$props, "value", 15),
			titleComponent = prop($$props, "titleComponent", 3, Ui_title),
			titleComponentProps = prop($$props, "titleComponentProps", 19, () => ({ size: 5 })),
			imageComponent = prop($$props, "imageComponent", 3, Ui_image),
			imageComponentProps = prop($$props, "imageComponentProps", 19, () => ({ covered: true })),
			descriptionComponent = prop($$props, "descriptionComponent", 3, Ui_buttons),
			descriptionComponentProps = prop($$props, "descriptionComponentProps", 19, () => ({})),
			listComponent = prop($$props, "listComponent", 3, Ui_list),
			listComponentProps = prop($$props, "listComponentProps", 19, () => ({})),
			sublimeValue = prop($$props, "sublimeValue", 3, (value) => {
				return { groupId: value.group, valueId: value.id };
			}),
			getItem = prop($$props, "getItem", 3, ({ groupId, valueId }) => {
				return variants().find((group) => group.id === groupId).description.values.find((btnVal) => btnVal.value.id === valueId);
			}),
			getItemValue = prop($$props, "getItemValue", 3, ({ groupId, valueId }) => {
				return getItem()({ groupId, valueId }).value;
			}),
			getDefaultItemSublime = prop($$props, "getDefaultItemSublime", 3, () => {
				return {
					groupId: variants()[0].id,
					valueId: variants()[0].description.values[0].value.id
				};
			}),
			uiOn = prop($$props, "uiOn", 3, (item) => {
				item.color = "success";
				item.outlined = false;
			}),
			uiOff = prop($$props, "uiOff", 3, (item) => {
				item.color = false;
				item.outlined = false;
			});

		onMount(() => {
			if (value()) {
				if (multiple()) {
					if (onlyOneInGroup()) {
						for (let t of Object.keys(value())) {
							const itemValue = value()[t];
							let ui = updateSelected(itemValue);

							updateUI(ui);
						}
					} else {
						for (let t of Object.keys(value())) {
							value()[t].forEach((itemValue) => {
								let ui = updateSelected(itemValue);

								updateUI(ui);
							});
						}
					}
				} else {
					let ui = updateSelected(value());

					updateUI(ui);
				}
			} else {
				selectDefault();
			}
		});

		//
		function countOfSelected() {
			let c = 0;

			if (multiple()) {
				for (let groupValue of Object.values(variantsSelected())) {
					if (onlyOneInGroup()) {
						if (typeof groupValue !== "undefined") {
							c++;
						}
					} else {
						if (typeof groupValue !== "undefined" && Array.isArray(groupValue)) {
							c += groupValue.length;
						}
					}
				}
			} else {
				if (typeof variantsSelected() !== "undefined" && typeof variantsSelected().value !== "undefined" && typeof variantsSelected().group !== "undefined") {
					c++;
				}
			}

			return c;
		}

		//
		function updateSelected(detail) {
			const { valueId, groupId } = sublimeValue()(detail);
			let ui = { on: undefined, off: undefined };

			//
			if (multiple()) {
				if (onlyOneInGroup()) {
					if (typeof variantsSelected()[groupId] !== "undefined") {
						ui.off = {
							groupId,
							valueId: variantsSelected()[groupId]
						};
					}

					variantsSelected(variantsSelected()[groupId] = valueId, true);
					ui.on = { groupId, valueId };
				} else {
					if (!Array.isArray(variantsSelected()[groupId])) {
						variantsSelected(variantsSelected()[groupId] = [], true);
					}

					if (variantsSelected()[groupId].includes(valueId)) {
						if (countOfSelected() > 1) {
							variantsSelected()[groupId].splice(variantsSelected()[groupId].indexOf(valueId), 1);
							ui.off = { groupId, valueId };
						}
					} else {
						variantsSelected()[groupId].push(valueId);
						ui.on = { groupId, valueId };
					}

					variantsSelected(variantsSelected()[groupId] = variantsSelected()[groupId], true);
				}

				variantsSelected(variantsSelected());
			} else {
				if (variantsSelected() && variantsSelected().groupId === groupId && variantsSelected().valueId === valueId) {
					if (!atLeastOne()) {
						variantsSelected(undefined);
						ui.off = { groupId, valueId };
					}
				} else {
					if (variantsSelected()) {
						if (typeof variantsSelected().groupId !== "undefined") {
							ui.off = {
								groupId: variantsSelected().groupId,
								valueId: variantsSelected().valueId
							};
						}
					}

					ui.on = { groupId, valueId };
					variantsSelected({ groupId, valueId });
				}
			}

			return ui;
		}

		//
		function toggle(detail) {
			let ui = updateSelected(detail);

			updateUI(ui);
			//
			updateValue();
			//
			onchange()({ field: fieldname(), value: value() });
		}

		//
		function updateUI(changes) {
			if (changes.off) {
				uiOff()(getItem()(changes.off));
			}

			if (changes.on) {
				uiOn()(getItem()(changes.on));
			}

			variants(variants());
		}

		//
		function updateValue() {
			if (multiple()) {
				let newVal = {};

				if (onlyOneInGroup()) {
					for (let groupId in variantsSelected()) {
						if (typeof variantsSelected()[groupId] !== "undefined") {
							newVal[groupId] = getItemValue()({
								groupId,
								valueId: variantsSelected()[groupId]
							});
						}
					}
				} else {
					for (let groupId in variantsSelected()) {
						if (typeof variantsSelected()[groupId] !== "undefined" && Array.isArray(variantsSelected()[groupId])) {
							newVal[groupId] = variantsSelected()[groupId].filter((val) => typeof val !== "undefined").map((itemValueId) => {
								return getItemValue()({ groupId, valueId: itemValueId });
							});
						}
					}
				}

				if (Object.keys(newVal).length == 0) {
					value(undefined);
				} else {
					value(newVal);
				}
			} else {
				if (variantsSelected()) {
					value(getItemValue()(variantsSelected()));
				} else {
					value(undefined);
				}
			}
		}

		//
		function selectDefault() {
			if (atLeastOne() && variants().length > 0) {
				const defValue = getDefaultItemSublime()();

				toggle({ id: defValue.valueId, group: defValue.groupId });
			}
		}

		const SvelteComponent = derived(listComponent);
		var fragment = comment();
		var node = first_child(fragment);

		var descriptionComponentProps_1 = derived(() => ({
			...descriptionComponentProps(),
			action(event, value) {
				toggle(value);
			}
		}));

		component(node, () => get$2(SvelteComponent), ($$anchor, $$component) => {
			$$component($$anchor, spread_props(listComponentProps, {
				get titleComponent() {
					return titleComponent();
				},
				get titleComponentProps() {
					return titleComponentProps();
				},
				get descriptionComponent() {
					return descriptionComponent();
				},
				get descriptionComponentProps() {
					return get$2(descriptionComponentProps_1);
				},
				get imageComponent() {
					return imageComponent();
				},
				get imageComponentProps() {
					return imageComponentProps();
				},
				get items() {
					return variants();
				},
				set items($$value) {
					variants($$value);
				}
			}));
		});

		append($$anchor, fragment);
		pop();
	}

	var root$e = template(`<!> <!>`, 1);

	function Ui_list_select_buttons_with_groups($$anchor, $$props) {
		push($$props, true);

		/**
		 * @typedef {Object} Props
		 * @property {string} [fieldname]
		 * @property {any} [variants] - [
		array of groups
		{
		id:number,
		title:string|object,
		image:string|object,
		variants = [
		array of values variants in group
		{
		id:number,
		title:string|object,
		description:string|object,
		image:string|object,
		value:object
		}]
		}
		]
		 * @property {any} [variantsSelected] - multiple && multiple in group
		{
		array of arrays of selected values in group
		if no selection group should be empty array
		[groupId]: [...variantsId]
		}
		multiple && one in group
		{
		[groupId]: variantId
		}
		only one (not multiple && one in group)
		{
		group: groupId
		value: variantId
		}
		 * @property {any} value - {[groupId]: [...valuesOfSelectedItems]}
		 * @property {any} [titleComponent]
		 * @property {any} [titleComponentProps]
		 * @property {any} [imageComponent]
		 * @property {any} [imageComponentProps]
		 * @property {any} [descriptionComponent]
		 * @property {any} [descriptionComponentProps]
		 * @property {any} [listComponent]
		 * @property {any} [listComponentProps]
		 * @property {any} [actionsList]
		 * @property {any} [sublimeValue]
		 */
		/** @type {Props} */
		let onchange = prop($$props, "onchange", 3, () => true),
			fieldname = prop($$props, "fieldname", 3, "list-select-tags"),
			variants = prop($$props, "variants", 31, () => proxy([])),
			value = prop($$props, "value", 15),
			titleComponent = prop($$props, "titleComponent", 3, Ui_title),
			titleComponentProps = prop($$props, "titleComponentProps", 19, () => ({ size: 5 })),
			imageComponent = prop($$props, "imageComponent", 3, Ui_image),
			imageComponentProps = prop($$props, "imageComponentProps", 19, () => ({ covered: true })),
			descriptionComponent = prop($$props, "descriptionComponent", 3, Ui_buttons_switchers),
			descriptionComponentProps = prop($$props, "descriptionComponentProps", 19, () => ({})),
			listComponent = prop($$props, "listComponent", 3, Ui_list),
			listComponentProps = prop($$props, "listComponentProps", 19, () => ({})),
			actionsList = prop($$props, "actionsList", 19, () => ["selectAll", "deselectAll"]),
			sublimeValue = prop($$props, "sublimeValue", 3, (value) => {
				return { groupId: value.group, valueId: value.id };
			});

		//
		const AVAILABLE_ACTIONS = {
			selectAll: {
				title: "Выбрать все",
				color: "success",
				action() {
					selectAll();
				}
			},
			deselectAll: {
				title: "Снять выделение со всех",
				color: "",
				action() {
					deselectAll();
				}
			}
		};

		let ACTIONS = state(proxy([]));

		onMount(() => {
			actionsList().forEach((name) => {
				Object.hasOwn(AVAILABLE_ACTIONS, name) ? get$2(ACTIONS).push(AVAILABLE_ACTIONS[name]) : false;
			});

			set(ACTIONS, proxy(get$2(ACTIONS)));
		});

		const selectAll = () => {
			setSelectionOfAll(true);
		};

		const deselectAll = () => {
			setSelectionOfAll(false);
		};

		const selectGroup = (groupId) => {
			setSelectionOfGroup(groupId, true);
		};

		const deselectGroup = (groupId) => {
			setSelectionOfGroup(groupId, false);
		};

		const setSelectionOfGroup = (groupId, selection) => {
			variants().forEach((group) => {
				if (groupId === group.id) {
					group.description.values.forEach((itm) => {
						itm.selected = selection;
					});
				}
			});

			variants(variants());
			triggerChange();
		};

		const setSelectionOfAll = (selection) => {
			variants().forEach((group) => {
				group.description.values.forEach((itm) => {
					itm.selected = selection;
				});
			});

			variants(variants());
			triggerChange();
		};

		function getSelectedItems() {
			let result = {};

			variants().forEach((group) => {
				if (!Object.hasOwn(result, group.id)) {
					result[group.id] = [];
				}

				group.description.values.forEach((itm) => {
					if (itm.selected) {
						result[group.id].push(sublimeValue()(itm.value));
					}
				});
			});

			return result;
		}

		function triggerChange() {
			value(getSelectedItems());

			onchange()({
				fieldname: fieldname(),
				value: value()
			});
		}

		const SvelteComponent = derived(listComponent);
		var fragment = root$e();
		var node = first_child(fragment);

		Ui_buttons(node, {
			get values() {
				return get$2(ACTIONS);
			},
			centered: true
		});

		var node_1 = sibling(node, 2);

		var descriptionComponentProps_1 = derived(() => ({
			action(event, value, selected) {
				setTimeout(triggerChange, 0);
				return !selected;
			},
			...descriptionComponentProps()
		}));

		component(node_1, () => get$2(SvelteComponent), ($$anchor, $$component) => {
			$$component($$anchor, spread_props(listComponentProps, {
				get titleComponent() {
					return titleComponent();
				},
				get titleComponentProps() {
					return titleComponentProps();
				},
				get descriptionComponent() {
					return descriptionComponent();
				},
				get descriptionComponentProps() {
					return get$2(descriptionComponentProps_1);
				},
				get imageComponent() {
					return imageComponent();
				},
				get imageComponentProps() {
					return imageComponentProps();
				},
				get items() {
					return variants();
				},
				set items($$value) {
					variants($$value);
				}
			}));
		});

		append($$anchor, fragment);

		return pop({
			selectAll,
			deselectAll,
			selectGroup,
			deselectGroup,
			setSelectionOfGroup,
			setSelectionOfAll,
			getSelectedItems
		});
	}

	var index$3 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		UIEndlessList: Ui_endless_list,
		UIEndlessListNavigation: Ui_endless_list_navigation,
		UIEndlessListSimpleItem: Ui_endless_list_simple_item,
		UIList: Ui_list,
		UIListEmptyPlaceholder: Ui_list_empty_placeholder,
		UIListItem: Ui_list_item,
		UIListSelect: Ui_list_select,
		UIListSelectButtonsWithGroups: Ui_list_select_buttons_with_groups,
		UIListSelectWithGroups: Ui_list_select_with_groups
	});

	function overlayClick(e, closeOnClick, closeOverlay) {
		if (closeOnClick()) {
			closeOverlay(e);
		}
	}

	function closeButtonClick(_, rejectOverlay) {
		rejectOverlay();
	}

	var root_2$7 = template(`<button aria-label="delete button"></button>`);
	var root_1$b = template(`<div role="button" tabindex="0"><!> <!></div>`);

	function Ui_overlay($$anchor, $$props) {
		push($$props, true);

		let overflowSave = state("");
		const zIndexStep = 1000;

		/**
		 * @typedef {Object} Props
		 * @property {boolean} [closeButton]
		 * @property {boolean} [show]
		 * @property {boolean} [closeOnClick]
		 * @property {string} [closeSize]
		 * @property {number} [layer]
		 * @property {string} [classes]
		 * @property {import('svelte').Snippet} [children]
		 */
		/** @type {Props} */
		let closeButton = prop($$props, "closeButton", 3, false),
			show = prop($$props, "show", 3, true),
			closeOnClick = prop($$props, "closeOnClick", 3, true),
			closeSize = prop($$props, "closeSize", 3, "normal"),
			layer = prop($$props, "layer", 3, 1),
			classes = prop($$props, "classes", 3, ""),
			onreject = prop($$props, "onreject", 3, () => false);

		function closeOverlay(e) {
			try {
				if (e && e.originalTarget) {
					const target = e.originalTarget;

					if (target.classList && target.classList.contains("is-overlay")) {
						rejectOverlay();
					}
				} //eslint-disable-next-line no-empty
			} catch {}
		}

		function rejectOverlay(data = {}) {
			onreject()(data);
		}

		onMount(() => {
			set(overflowSave, proxy(document.body.style.overflow));

			if (show()) {
				document.body.style.overflow = "hidden";
			} else {
				document.body.style.overflow = get$2(overflowSave);
			}
		});

		onDestroy(() => {
			document.body.style.overflow = get$2(overflowSave);
		});

		var fragment = comment();
		var node = first_child(fragment);

		{
			var consequent_1 = ($$anchor) => {
				var div = root_1$b();

				div.__click = [overlayClick, closeOnClick, closeOverlay];
				div.__keyup = [overlayClick, closeOnClick, closeOverlay];

				var node_1 = child(div);

				{
					var consequent = ($$anchor) => {
						var button = root_2$7();

						button.__click = [closeButtonClick, rejectOverlay];
						template_effect(() => set_class(button, `delete is-${closeSize() ?? ""}`));
						append($$anchor, button);
					};

					if_block(node_1, ($$render) => {
						if (closeButton()) $$render(consequent);
					});
				}

				var node_2 = sibling(node_1, 2);

				snippet(node_2, () => $$props.children ?? noop);
				reset(div);

				template_effect(() => {
					set_class(div, `is-overlay not-overlay ${classes() ?? ""}`);
					set_attribute(div, "style", `z-index: ${zIndexStep * layer() ?? ""};`);
				});

				transition(3, div, () => fade);
				append($$anchor, div);
			};

			if_block(node, ($$render) => {
				if (show()) $$render(consequent_1);
			});
		}

		append($$anchor, fragment);
		pop();
	}

	delegate(["click", "keyup"]);

	var root_3$6 = template(`<div><span class="title"> </span></div> <!> <!> <!>`, 1);
	var root_2$6 = template(`<!> <!>`, 1);

	function Ui_modal($$anchor, $$props) {
		push($$props, true);

		const $$stores = setup_stores();
		const $LOCALE = () => store_get(LOCALE, "$LOCALE", $$stores);

		/**
		 * @typedef {Object} Props
		 * @property {string} [buttonsPosition]
		 * @property {boolean} [closeButton]
		 * @property {boolean} [applyButton]
		 * @property {number} [titleSize]
		 * @property {boolean} [show]
		 * @property {boolean} [loading]
		 * @property {string} [title]
		 * @property {string} [subtitle]
		 * @property {string} [classes]
		 * @property {string} [overlayClasses]
		 * @property {string} [buttonsClasses]
		 * @property {string} [WAITING_TEXT]
		 * @property {import('svelte').Snippet} [children]
		 */
		/** @type {Props} */
		let buttonsPosition = prop($$props, "buttonsPosition", 3, "bottom"),
			closeButton = prop($$props, "closeButton", 3, false),
			applyButton = prop($$props, "applyButton", 3, false),
			titleSize = prop($$props, "titleSize", 3, 2),
			show = prop($$props, "show", 3, false),
			loading = prop($$props, "loading", 3, false),
			title = prop($$props, "title", 3, "Modal window"),
			subtitle = prop($$props, "subtitle", 3, ""),
			classes = prop($$props, "classes", 3, ""),
			overlayClasses = prop($$props, "overlayClasses", 3, ""),
			buttonsClasses = prop($$props, "buttonsClasses", 3, ""),
			WAITING_TEXT = prop($$props, "WAITING_TEXT", 3, "Обработка");

		Ui_overlay($$anchor, {
			get show() {
				return show();
			},
			closeOnClick: false,
			closeButton: false,
			get classes() {
				return overlayClasses();
			},
			children: ($$anchor, $$slotProps) => {
				Ui_box($$anchor, {
					get classes() {
						return classes();
					},
					children: ($$anchor, $$slotProps) => {
						var fragment_2 = root_2$6();
						var node = first_child(fragment_2);

						Ui_title(node, {
							get size() {
								return titleSize();
							},
							get title() {
								return $LOCALE()[title()];
							},
							get subtitle() {
								return $LOCALE()[subtitle()];
							}
						});

						var node_1 = sibling(node, 2);

						Ui_content(node_1, {
							children: ($$anchor, $$slotProps) => {
								var fragment_3 = root_3$6();
								var div = first_child(fragment_3);
								var span = child(div);
								var text = child(span, true);

								reset(span);
								reset(div);

								var node_2 = sibling(div, 2);

								{
									var consequent = ($$anchor) => {
										var left = derived(() => closeButton() ? [closeButton()] : []);
										var right = derived(() => applyButton() ? [applyButton()] : []);

										Ui_buttons_row($$anchor, {
											get classes() {
												return buttonsClasses();
											},
											get left() {
												return get$2(left);
											},
											get right() {
												return get$2(right);
											}
										});
									};

									if_block(node_2, ($$render) => {
										if (buttonsPosition() === "top") $$render(consequent);
									});
								}

								var node_3 = sibling(node_2, 2);

								snippet(node_3, () => $$props.children ?? noop);

								var node_4 = sibling(node_3, 2);

								{
									var consequent_1 = ($$anchor) => {
										var classes_1 = derived(() => buttonsClasses() || "is-footer is-mobile");
										var left_1 = derived(() => closeButton() ? [closeButton()] : []);
										var right_1 = derived(() => applyButton() ? [applyButton()] : []);

										Ui_buttons_row($$anchor, {
											get classes() {
												return get$2(classes_1);
											},
											get left() {
												return get$2(left_1);
											},
											get right() {
												return get$2(right_1);
											}
										});
									};

									if_block(node_4, ($$render) => {
										if (buttonsPosition() === "bottom") $$render(consequent_1);
									});
								}

								template_effect(() => {
									set_class(div, `pageloader ${(loading() ? 'is-active' : '') ?? ""}`);
									set_text(text, $LOCALE()[WAITING_TEXT()]);
								});

								append($$anchor, fragment_3);
							},
							$$slots: { default: true }
						});

						append($$anchor, fragment_2);
					},
					$$slots: { default: true }
				});
			},
			$$slots: { default: true }
		});

		pop();
	}

	var root_1$a = template(`<div><!> <!> <!></div>`);

	function Ui_generic_selector($$anchor, $$props) {
		push($$props, true);

		const $$stores = setup_stores();
		const $LOCALE = () => store_get(LOCALE, "$LOCALE", $$stores);
		let dispatch = createEventDispatcher();

		/**
		 * @typedef {Object} Props
		 * @property {boolean} [show]
		 * @property {string} [term]
		 * @property {string} [size]
		 * @property {any} [inputComponent]
		 * @property {any} [inputComponentProps]
		 * @property {any} [outputComponent]
		 * @property {any} [outputComponentProps]
		 * @property {any} [results]
		 */
		/** @type {Props} */
		let show = prop($$props, "show", 3, true),
			term = prop($$props, "term", 15, ''),
			size = prop($$props, "size", 3, 'narrow'),
			inputComponent = prop($$props, "inputComponent", 3, Ui_simple_search_input),
			inputComponentProps = prop($$props, "inputComponentProps", 19, () => ({})),
			outputComponent = prop($$props, "outputComponent", 3, Ui_endless_list),
			outputComponentProps = prop($$props, "outputComponentProps", 19, () => ({})),
			results = prop($$props, "results", 31, () => proxy({
				list: [],
				page: 0,
				pages: 0,
				skip: 0,
				count: 0
			}));

		onMount(() => {});

		const buttons = [
			{
				title: $LOCALE()['not-node:button_cancel_label'],
				action: () => reject()
			}
		];

		function overlayClosed() {
			dispatch('reject');
		}

		function select({ detail }) {
			console.log('selected user', detail);
			dispatch('resolve', detail);
		}

		function reject() {
			dispatch('reject');
		}

		Ui_overlay($$anchor, {
			get show() {
				return show();
			},
			closeOnClick: true,
			closeButton: false,
			$$events: { reject: overlayClosed },
			children: ($$anchor, $$slotProps) => {
				var div = root_1$a();
				const SvelteComponent = derived(inputComponent);
				const SvelteComponent_1 = derived(outputComponent);
				var node = child(div);

				component(node, () => get$2(SvelteComponent), ($$anchor, $$component) => {
					$$component($$anchor, spread_props(inputComponentProps, {
						get term() {
							return term();
						},
						set term($$value) {
							term($$value);
						},
						$$events: {
							termChange($$arg) {
								bubble_event.call(this, $$props, $$arg);
							}
						}
					}));
				});

				var node_1 = sibling(node, 2);

				component(node_1, () => get$2(SvelteComponent_1), ($$anchor, $$component) => {
					$$component($$anchor, spread_props(outputComponentProps, {
						get data() {
							return results();
						},
						set data($$value) {
							results($$value);
						},
						$$events: {
							prev($$arg) {
								bubble_event.call(this, $$props, $$arg);
							},
							next($$arg) {
								bubble_event.call(this, $$props, $$arg);
							},
							select
						}
					}));
				});

				var node_2 = sibling(node_1, 2);

				Ui_buttons(node_2, {
					values: buttons,
					centered: true,
					classes: "mt-5"
				});

				reset(div);
				template_effect(() => set_class(div, `paper box block ${size() ?? ""} svelte-1gllhdk`));
				append($$anchor, div);
			},
			$$slots: { default: true }
		});

		pop();
	}

	var index$2 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		UIGenericSelector: Ui_generic_selector,
		UIModal: Ui_modal,
		UIOverlay: Ui_overlay
	});

	var root$d = template(`<article class="message is-danger"><div class="message-header"><p> </p></div> <div class="message-body"> </div></article>`);

	function Ui_error($$anchor, $$props) {
		push($$props, true);

		const $$stores = setup_stores();
		const $LOCALE = () => store_get(LOCALE, "$LOCALE", $$stores);
		var article = root$d();
		var div = child(article);
		var p = child(div);
		var text = child(p, true);

		reset(p);
		reset(div);

		var div_1 = sibling(div, 2);
		var text_1 = child(div_1, true);

		reset(div_1);
		reset(article);

		template_effect(() => {
			set_text(text, $LOCALE()[$$props.title]);
			set_text(text_1, $LOCALE()[$$props.message]);
		});

		append($$anchor, article);
		pop();
	}

	var root$c = template(`<article class="message is-success"><div class="message-header"><p> </p></div> <div class="message-body"> </div></article>`);

	function Ui_success($$anchor, $$props) {
		push($$props, true);

		const $$stores = setup_stores();
		const $LOCALE = () => store_get(LOCALE, "$LOCALE", $$stores);
		var article = root$c();
		var div = child(article);
		var p = child(div);
		var text = child(p, true);

		reset(p);
		reset(div);

		var div_1 = sibling(div, 2);
		var text_1 = child(div_1, true);

		reset(div_1);
		reset(article);

		template_effect(() => {
			set_text(text, $LOCALE()[$$props.title]);
			set_text(text_1, $LOCALE()[$$props.message]);
		});

		append($$anchor, article);
		pop();
	}

	function accept(_, show) {
		localStorage.setItem('cookie_date', Date.now());
		show(false);
	}

	var root_1$9 = template(`<div id="cookie_notification" class="svelte-19d5xat"><p class="svelte-19d5xat"> </p> <button class="button is-success cookie_accept svelte-19d5xat"> </button></div>`);

	function Ui_cookie_notification($$anchor, $$props) {
		push($$props, true);

		const $$stores = setup_stores();
		const $LOCALE = () => store_get(LOCALE, "$LOCALE", $$stores);

		/**
		 * @typedef {Object} Props
		 * @property {boolean} [show]
		 * @property {string} [message]
		 * @property {string} [agree]
		 */
		/** @type {Props} */
		let show = prop($$props, "show", 15, false),
			message = prop($$props, "message", 3, 'Для улучшения работы сайта и его взаимодействия с пользователями мы используем файлы cookie. Продолжая работу с сайтом, Вы разрешаете использование cookie-файлов. Вы всегда можете отключить файлы cookie в настройках Вашего браузера.'),
			agree = prop($$props, "agree", 3, 'Хорошо');

		onMount(() => {
			let cookieDate = localStorage.getItem('cookie_date');

			if (!cookieDate || +cookieDate + 31536000000 < Date.now()) {
				show(true);
			}
		});

		var fragment = comment();
		var node = first_child(fragment);

		{
			var consequent = ($$anchor) => {
				var div = root_1$9();
				var p = child(div);
				var text = child(p, true);

				reset(p);

				var button = sibling(p, 2);

				button.__click = [accept, show];

				var text_1 = child(button, true);

				reset(button);
				reset(div);

				template_effect(() => {
					set_text(text, $LOCALE()[message()]);
					set_text(text_1, $LOCALE()[agree()]);
				});

				append($$anchor, div);
			};

			if_block(node, ($$render) => {
				if (show()) $$render(consequent);
			});
		}

		append($$anchor, fragment);
		pop();
	}

	delegate(["click"]);

	var index$1 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		UICookieNotification: Ui_cookie_notification,
		UIError: Ui_error,
		UISuccess: Ui_success
	});

	//block elements

	var Elements = /*#__PURE__*/Object.freeze({
		__proto__: null,
		Blocks: index$c,
		Buttons: index$b,
		Forms: index$8,
		Icons: index$9,
		Images: index$7,
		Inputs: index$5,
		Layouts: index$6,
		Links: index$4,
		Lists: index$3,
		Modals: index$2,
		Notifications: index$1,
		UICommon: UICommon$1,
		Various: index$a
	});

	const META_METHOD_INIT = Symbol("init"),
	  META_DATA = Symbol("data"),
	  META_WORKING = Symbol("working"),
	  META_OPTIONS = Symbol("options");
	let notBase = /*#__PURE__*/function (_EventEmitter) {
	  function notBase(input) {
	    var _this;
	    _classCallCheck(this, notBase);
	    _this = _callSuper(this, notBase);
	    _this[META_DATA] = {};
	    _this[META_WORKING] = {};
	    _this[META_OPTIONS] = {};
	    _this[META_METHOD_INIT](input);
	    return _possibleConstructorReturn(_this, _this);
	  }
	  _inherits(notBase, _EventEmitter);
	  return _createClass(notBase, [{
	    key: META_METHOD_INIT,
	    value: function (input) {
	      if (!input) {
	        input = {};
	      }

	      // @ts-ignore
	      if (Object.hasOwn(input, "data")) {
	        this.setData(input.data);
	      }

	      // @ts-ignore
	      if (Object.hasOwn(input, "working")) {
	        this.setWorking(input.working);
	      }

	      // @ts-ignore
	      if (Object.hasOwn(input, "options")) {
	        this.setOptions(input.options);
	      }
	      this.log = notCommon$1.genLogMsg(this.getWorking("name"));
	      this.info = this.log;
	      this.debug = notCommon$1.genLogDebug(this.getWorking("name"));
	      this.error = notCommon$1.genLogError(this.getWorking("name"));
	    }
	  }, {
	    key: "setCommon",
	    value: function setCommon(what, args) {
	      switch (args.length) {
	        case 1:
	          {
	            /* set collection */
	            what = args[0];
	            break;
	          }
	        case 2:
	          {
	            /* set collection element */
	            notPath.set(args[0] /* path */, what /* collection */, undefined /* helpers */, args[1] /* value */);
	            break;
	          }
	      }
	      return this;
	    }
	  }, {
	    key: "getCommon",
	    value: function getCommon(what, args) {
	      switch (args.length) {
	        /* if we want get data by path */
	        case 1:
	          {
	            return notPath.get(args[0], what);
	          }
	        /* if we want get data by path with default value */
	        case 2:
	          {
	            let res = notPath.get(args[0], what);
	            if (res === undefined) {
	              /* no data, return default value */
	              return args[1];
	            } else {
	              /* data, return it */
	              return res;
	            }
	          }
	        /* return full collection */
	        default:
	          {
	            return what;
	          }
	      }
	    }

	    /*
	    CORE OBJECT
	      DATA - information
	      OPTIONS - how to work
	      WORKING - temporarily generated in proccess
	    */
	  }, {
	    key: "setData",
	    value: function setData() {
	      if (arguments.length === 1) {
	        this[META_DATA] = arguments[0];
	      } else {
	        this.setCommon(this.getData(), arguments);
	      }
	      this.emit("change");
	      return this;
	    }
	  }, {
	    key: "getData",
	    value: function getData() {
	      return this.getCommon(this[META_DATA], arguments);
	    }
	  }, {
	    key: "setOptions",
	    value: function setOptions() {
	      if (arguments.length === 1) {
	        this[META_OPTIONS] = arguments[0];
	      } else {
	        this.setCommon(this.getOptions(), arguments);
	      }
	      return this;
	    }
	  }, {
	    key: "getOptions",
	    value: function getOptions() {
	      return this.getCommon(this[META_OPTIONS], arguments);
	    }
	  }, {
	    key: "setWorking",
	    value: function setWorking() {
	      if (arguments.length === 1) {
	        this[META_WORKING] = arguments[0];
	      } else {
	        this.setCommon(this.getWorking(), arguments);
	      }
	      return this;
	    }
	  }, {
	    key: "getWorking",
	    value: function getWorking() {
	      return this.getCommon(this[META_WORKING], arguments);
	    }
	  }, {
	    key: "report",
	    value: function report(e) {
	      if (notCommon$1.report) {
	        notCommon$1.report(e);
	      }
	    }
	  }, {
	    key: "getApp",
	    value: function getApp() {
	      return notCommon$1.getApp();
	    }
	  }, {
	    key: "destroy",
	    value: function destroy() {
	      this.removeEvent();
	      this.setOptions(null);
	      this.setWorking(null);
	      this.setData(null);
	      this.emit("destroy");
	    }
	  }]);
	}(EventEmitter);

	const OPT_MODE_HISTORY = Symbol("history"),
	  OPT_MODE_HASH = Symbol("hash"),
	  OPT_DEFAULT_CHECK_INTERVAL = 50;
	let notRouter = /*#__PURE__*/function (_notBase) {
	  function notRouter() {
	    var _this;
	    _classCallCheck(this, notRouter);
	    _this = _callSuper(this, notRouter, [{
	      working: {
	        routes: [],
	        mode: OPT_MODE_HISTORY,
	        root: "/",
	        //always in slashes /user/, /, /input/. and no /user or input/level
	        initialized: false,
	        delays: NAVIGATION_DELAYS,
	        delay_default: NAVIGATION_DELAY_DEFAULT
	      }
	    }]);
	    _defineProperty(_this, "host", "");
	    return _possibleConstructorReturn(_this, _this);
	  }

	  /**
	   * Set object with named delays
	   * @param {Object.<string, number>} delays
	   * @returns {notRouter}
	   */
	  _inherits(notRouter, _notBase);
	  return _createClass(notRouter, [{
	    key: "setDelays",
	    value: function setDelays(delays) {
	      this.setWorking("delays", delays);
	      return this;
	    }

	    /**
	     * Set default navigation delay, provided as name of one of `delays` or in number form
	     * @param {string|number} delay
	     * @returns {notRouter}
	     */
	  }, {
	    key: "setDefaultNavigationDelay",
	    value: function setDefaultNavigationDelay(delay) {
	      this.setWorking("delay_default", this.delayAsMs(delay));
	      return this;
	    }

	    /**
	     * Returns number of ms, if not set returns NAVIGATION_DELAY_DEFAULT
	     * @returns {number}
	     */
	  }, {
	    key: "getDefaultNavigationDelay",
	    value: function getDefaultNavigationDelay() {
	      return this.getWorking(`delay_default`, NAVIGATION_DELAY_DEFAULT);
	    }

	    /**
	     *  Ensures that delay is in ms, if its provided as name of alias, searches for it and returns, if not found - returns working default_delay
	     * @param {string|number} delay    name of delay alias or number of ms
	     * @returns {number}               delay in ms
	     */
	  }, {
	    key: "delayAsMs",
	    value: function delayAsMs(delay) {
	      if (typeof delay === "number") {
	        return delay;
	      } else {
	        if (typeof delay === "string" && delay.length > 0) {
	          return this.getWorking(`delays.${delay}`, this.getDefaultNavigationDelay());
	        } else {
	          return this.getDefaultNavigationDelay();
	        }
	      }
	    }

	    /**
	     *
	     *  @param {string}              url     we go to url
	     *  @param {string|number}       delay   name of delay alias or number of ms
	     *  @returns {NodeJS.Timeout}            timeout identificator
	     */
	  }, {
	    key: "navigateWithDelay",
	    value: function navigateWithDelay(url, delay, doBefore) {
	      var _this2 = this;
	      return setTimeout(function () {
	        typeof doBefore === "function" && doBefore();
	        _this2.navigate(url);
	      }, this.delayAsMs(delay));
	    }

	    /**
	     * Use browser History API
	     */
	  }, {
	    key: "history",
	    value: function history() {
	      this.setWorking("mode", OPT_MODE_HISTORY);
	    }

	    /**
	     * Use hash part as container for location information
	     */
	  }, {
	    key: "hash",
	    value: function hash() {
	      this.setWorking("mode", OPT_MODE_HASH);
	    }

	    /**
	     * root should start and end with
	     * @param {string} root
	     * @returns {notRouter}
	     */
	  }, {
	    key: "setRoot",
	    value: function setRoot(root) {
	      this.setWorking("root", root && root !== "/" ? "/" + this.clearSlashes(root) + "/" : "/");
	      return this;
	    }

	    /**
	     * clear first and last slashes from string
	     * @param {string} path
	     * @returns {string}
	     */
	  }, {
	    key: "clearSlashes",
	    value: function clearSlashes(path) {
	      return path.toString().replace(/\/$/, "").replace(/^\//, "");
	    }
	  }, {
	    key: "add",
	    value: function add(re, handler) {
	      if (typeof re == "function") {
	        handler = re;
	        re = "";
	      }
	      let rule = {
	        re: re,
	        handler: handler
	      };
	      this.getWorking("routes").push(rule);
	      return this;
	    }
	  }, {
	    key: "addList",
	    value: function addList(list) {
	      for (let t in list) {
	        this.add(t, list[t]);
	      }
	      return this;
	    }
	  }, {
	    key: "remove",
	    value: function remove(param) {
	      for (var i = 0, r; i < this.getWorking("routes").length, r = this.getWorking("routes")[i]; i++) {
	        if (r.handler === param || r.re === param) {
	          this.getWorking("routes").splice(i, 1);
	          return this;
	        }
	      }
	      return this;
	    }
	  }, {
	    key: "flush",
	    value: function flush() {
	      this.setWorking({
	        routes: [],
	        mode: OPT_MODE_HISTORY,
	        root: "/"
	      });
	      return this;
	    }
	  }, {
	    key: "isInitialized",
	    value: function isInitialized() {
	      return this.getWorking("initialized");
	    }
	  }, {
	    key: "setInitialized",
	    value: function setInitialized(val = true) {
	      return this.setWorking("initialized", val);
	    }
	  }, {
	    key: "getFragment",
	    value: function getFragment() {
	      var fragment = "";
	      if (this.getWorking("mode") === OPT_MODE_HISTORY) {
	        if (!location) return "";
	        fragment = this.clearSlashes(decodeURI(location.pathname + location.search));
	        fragment = fragment.replace(/\?(.*)$/, "");
	        fragment = this.getWorking("root") != "/" ? fragment.replace(this.getWorking("root"), "") : fragment;
	      } else {
	        if (!window) return "";
	        var match = window.location.href.match(/#(.*)$/);
	        fragment = match ? match[1] : "";
	      }
	      return this.clearSlashes(fragment);
	    }
	  }, {
	    key: "checkLocation",
	    value: function checkLocation() {
	      let current = this.getWorking("current"),
	        fragment = this.getFragment(),
	        init = this.isInitialized();
	      if (current !== fragment || !init) {
	        this.setWorking("current", fragment);
	        this.check(fragment);
	        this.setInitialized(true);
	      }
	    }
	  }, {
	    key: "hrefClick",
	    value: function hrefClick() {
	      //console.log(...arguments);
	    }
	  }, {
	    key: "getRoot",
	    value: function getRoot() {
	      return this.getWorking("root");
	    }
	  }, {
	    key: "listen",
	    value: function listen(loopInterval = OPT_DEFAULT_CHECK_INTERVAL) {
	      this.setWorking("current", "notInitialized");
	      clearInterval(this.getWorking("interval"));
	      this.setWorking("interval", setInterval(this.checkLocation.bind(this), loopInterval));
	      window.addEventListener("popstate", this.hrefClick.bind(this));
	      return this;
	    }
	  }, {
	    key: "check",
	    value: function check(f) {
	      let fragment = f || this.getFragment(),
	        failBack = null;
	      for (let i = 0; i < this.getWorking("routes").length; i++) {
	        let path = this.getWorking("root") + this.getWorking("routes")[i].re,
	          fullRE = this.clearSlashes(decodeURI(path)),
	          match = fragment.match(fullRE);
	        if (match && match.length) {
	          if (fullRE === "") {
	            match.shift();
	            failBack = {
	              route: this.getWorking("routes")[i],
	              match
	            };
	          } else {
	            match.shift();
	            this.getWorking("routes")[i].handler.apply(this.host || {}, match);
	            this.emit("afterRoute", this.getWorking("routes")[i]);
	            return this;
	          }
	        }
	      }
	      if (failBack) {
	        failBack.route.handler.apply(this.host || {}, failBack.match);
	        this.emit("afterRoute", failBack.route);
	      }
	      return this;
	    }

	    /**
	     *  Refreshes page
	     * @param {number} timeout time to wait in ms
	     */
	  }, {
	    key: "refresh",
	    value: function refresh(timeout = 0) {
	      var _this3 = this;
	      if (timeout > 0) {
	        setTimeout(function () {
	          return _this3.refresh();
	        }, timeout);
	      } else {
	        this.check(this.getWorking("current"));
	      }
	    }

	    /**
	     * Changes locations
	     * @param {string} path
	     * @returns
	     */
	  }, {
	    key: "navigate",
	    value: function navigate(path) {
	      path = path ? path : "";
	      switch (this.getWorking("mode")) {
	        case OPT_MODE_HISTORY:
	          {
	            const newRoute = this.getFullRoute(path);
	            if (newRoute === this.lastRoute) {
	              this.refresh();
	            } else {
	              this.lastRoute = newRoute;
	              history.pushState(null, "", this.lastRoute);
	            }
	            break;
	          }
	        case OPT_MODE_HASH:
	          {
	            window.location.href.match(/#(.*)$/);
	            window.location.href = window.location.href.replace(/#(.*)$/, "") + "#" + path;
	            break;
	          }
	      }
	      return this;
	    }

	    /**
	     *  returns app root + path
	     * @param {string} path
	     * @returns {string}
	     */
	  }, {
	    key: "getFullRoute",
	    value: function getFullRoute(path = "") {
	      path = this.clearSlashes(path);
	      const root = this.getWorking("root");
	      if (root !== "/") {
	        if (path.indexOf(root.substring(1)) === 0) {
	          return "/" + path;
	        }
	      }
	      return this.getWorking("root") + this.clearSlashes(path);
	    }

	    /**
	     * Returns all links with n-href attribute
	     * @returns {Array<HTMLAnchorElement>}
	     */
	  }, {
	    key: "getAllLinks",
	    value: function getAllLinks() {
	      const allElements = document.body.querySelectorAll("a");
	      let list = [];
	      for (let j = 0; j < allElements.length; j++) {
	        for (let i = 0, atts = allElements[j].attributes, n = atts.length; i < n; i++) {
	          if (atts[i].nodeName.indexOf("n-href") === 0) {
	            list.push(allElements[j]);
	            break;
	          }
	        }
	      }
	      return list;
	    }

	    /**
	     * Reroute all links(anchor tags) with n-href attribute.
	     * Disable navigation to href.
	     * @returns {notRouter}
	     */
	  }, {
	    key: "reRouteExisted",
	    value: function reRouteExisted() {
	      const list = this.getAllLinks();
	      for (let t = 0; t < list.length; t++) {
	        this.initRerouting(list[t], list[t].getAttribute("n-href"));
	      }
	      return this;
	    }

	    /**
	     * If `el` is not initialized, adds onclick listener to navigate to `link` location.
	     * Disables default navigation to href.
	     * @param {HTMLAnchorElement}   el
	     * @param {string}              link
	     * @returns
	     */
	  }, {
	    key: "initRerouting",
	    value: function initRerouting(el, link) {
	      var _this4 = this;
	      // @ts-ignore
	      if (!el.notRouterInitialized) {
	        let fullLink = this.getFullRoute(link);
	        el.setAttribute("href", fullLink);
	        el.addEventListener("click", function (e) {
	          e.preventDefault();
	          _this4.navigate(link);
	          return false;
	        });
	        // @ts-ignore
	        el.notRouterInitialized = true;
	      }
	      return this;
	    }
	  }]);
	}(notBase);
	var notRouter$1 = new notRouter();

	const LOG_PREFIX$1 = "APIQuee";
	let notAPIQueue = /*#__PURE__*/function (_notBase) {
	  function notAPIQueue(options = {}) {
	    var _this;
	    _classCallCheck(this, notAPIQueue);
	    _this = _callSuper(this, notAPIQueue, [{
	      working: {
	        name: options.name ? options.name : LOG_PREFIX$1
	      },
	      options
	    }]);
	    _this.busy = false;
	    _this.queue = [];
	    _this.busySince = -1;
	    _this.afterEmpty = undefined;
	    _this.start();
	    return _possibleConstructorReturn(_this, _this);
	  }
	  _inherits(notAPIQueue, _notBase);
	  return _createClass(notAPIQueue, [{
	    key: "stop",
	    value: function stop() {
	      if (this.interval) {
	        clearInterval(this.interval);
	        this.interval = undefined;
	        this.busy = false;
	        this.busySince = -1;
	      }
	    }
	  }, {
	    key: "start",
	    value: function start() {
	      this.stop();
	      this.interval = setInterval(this.checkQueue.bind(this), this.QUEUE_CHECK_INTERVAL);
	    }
	  }, {
	    key: "checkQueue",
	    value: function checkQueue() {
	      var _this2 = this;
	      if (!this.isEmpty() && !this.isBusy()) {
	        this.setBusy().runNext().then(this.setFree.bind(this)).catch(function (e) {
	          _this2.error && _this2.error(e);
	          _this2.setFree();
	        });
	      } else {
	        if (!this.isBusy()) {
	          if (this.afterEmpty) {
	            let t = this.afterEmpty;
	            this.afterEmpty = undefined;
	            t();
	          }
	        }
	      }
	    }
	  }, {
	    key: "addToQueue",
	    value: function addToQueue(task) {
	      this.queue.push(task);
	    }
	  }, {
	    key: "runNext",
	    value: function runNext() {
	      let list = this.queue.map(function (action) {
	        return action.title;
	      }).join(", ");
	      this.debug && this.debug(`tasks [${list}]`);
	      let task = this.queue.shift();
	      if (!notCommon$1.isFunc(task.action)) {
	        this.error && this.error("В задании нет исполнимой части, action не функция", task.title);
	        return Promise.resolve();
	      }
	      if (!notCommon$1.isFunc(task.resolve)) {
	        this.error && this.error("В задании нет возвратной части, resolve не функция", task.title);
	        return task.action();
	      }
	      return task.action().then(task.resolve);
	    }
	  }, {
	    key: "isBusy",
	    value: function isBusy() {
	      let busy = !!this.busy,
	        now = Date.now() / 1000;
	      if (busy && this.busySince > -1) {
	        if (now - this.busySince > notAPIQueue.MAX_BUSY_TIME) {
	          this.setFree();
	          return false;
	        } else {
	          return true;
	        }
	      } else {
	        return false;
	      }
	    }
	  }, {
	    key: "setBusy",
	    value: function setBusy() {
	      this.busy = true;
	      this.busySince = Date.now() / 1000;
	      return this;
	    }
	  }, {
	    key: "setFree",
	    value: function setFree() {
	      this.busy = false;
	      this.busySince = -1;
	      return this;
	    }
	  }, {
	    key: "isEmpty",
	    value: function isEmpty() {
	      return this.queue.length === 0;
	    }

	    /**
	     * Исполнитель запросов
	     * @param      {function}   action      должна возвращать Promise
	     * @param      {function}   [afterEmpty = undefined]  будет выполнена когда очурудь опустеет и будет свободна. полезна при пачке однотипных заданий
	     * @param       {string}    [title = '']    optional title of request
	     * @returns    {Promise}    результат функции
	     **/
	  }, {
	    key: "run",
	    value: function run(action, afterEmpty = undefined, title = "") {
	      var _this3 = this;
	      if (afterEmpty && typeof this.afterEmpty === "undefined") {
	        this.afterEmpty = afterEmpty;
	      }
	      return new Promise(function (resolve, reject) {
	        try {
	          _this3.addToQueue({
	            action,
	            resolve,
	            title
	          });
	        } catch (e) {
	          _this3.error && _this3.error(e);
	          reject(e);
	        }
	      });
	    }
	  }, {
	    key: "actionIsQueued",
	    value: function actionIsQueued(title) {
	      return this.queue.some(function (queued) {
	        return queued.title == title;
	      });
	    }

	    /**
	     *
	     *
	     * @param      {function}   action      должна возвращать Promise
	     * @param      {function}   [afterEmpty = undefined]  будет выполнена когда очурудь опустеет и будет свободна. полезна при пачке однотипных заданий
	     * @param       {string}    [title = '']    optional title of request
	     * @return    {Promise}
	     * @memberof notAPIQueue
	     */
	  }, {
	    key: "runIfNotQueued",
	    value: function runIfNotQueued(action, afterEmpty = undefined, title = "") {
	      if (this.actionIsQueued(title)) {
	        return Promise.resolve();
	      } else {
	        return this.run(action, afterEmpty, title);
	      }
	    }
	  }]);
	}(notBase);
	_defineProperty(notAPIQueue, "QUEUE_CHECK_INTERVAL", 100);
	_defineProperty(notAPIQueue, "MAX_BUSY_TIME", 300);

	let notAPIOptions = {
	  rps: 50,
	  protocol: 'http',
	  host: 'localhost',
	  port: 9000
	};

	const LOG_PREFIX = 'APIConnection';
	let notAPIConnection = /*#__PURE__*/function (_notBase) {
	  function notAPIConnection(options) {
	    var _this;
	    _classCallCheck(this, notAPIConnection);
	    _this = _callSuper(this, notAPIConnection, [{
	      options,
	      working: {
	        name: options.name ? options.name : LOG_PREFIX
	      }
	    }]);
	    _this.online = null;
	    _this.run();
	    return _possibleConstructorReturn(_this, _this);
	  }
	  _inherits(notAPIConnection, _notBase);
	  return _createClass(notAPIConnection, [{
	    key: "run",
	    value: function run() {
	      this.int = window.setInterval(this.check.bind(this), 1000);
	    }
	  }, {
	    key: "pause",
	    value: function pause() {
	      window.clearInterval(this.int);
	    }
	  }, {
	    key: "resume",
	    value: function resume() {
	      this.run();
	    }
	  }, {
	    key: "isOnline",
	    value: function isOnline() {
	      return window.navigator.onLine;
	    }
	  }, {
	    key: "check",
	    value: function check() {
	      let t = this.isOnline();
	      if (this.online !== null) {
	        if (this.online !== t) {
	          this.changeState(t);
	        }
	      }
	      this.online = t;
	    }
	  }, {
	    key: "changeState",
	    value: function changeState(online = false) {
	      if (online) {
	        this.emit('online');
	      } else {
	        this.emit('offline');
	      }
	    }
	  }]);
	}(notBase);
	_defineProperty(notAPIConnection, "int", void 0);
	_defineProperty(notAPIConnection, "online", void 0);

	var index = /*#__PURE__*/Object.freeze({
		__proto__: null,
		notAPIConnection: notAPIConnection,
		notAPIOptions: notAPIOptions,
		notAPIQueue: notAPIQueue
	});

	const ALL$1 = {};
	function exist$1(key) {
	  return notCommon$1.objHas(ALL$1, key);
	}
	function get$1(key) {
	  if (exist$1(key)) {
	    return ALL$1[key];
	  } else {
	    return false;
	  }
	}
	function create$1(key, props = {
	  raw: [],
	  filtered: [],
	  selected: {}
	}) {
	  if (!exist$1(key)) {
	    if (Object.keys(props).length > 0) {
	      ALL$1[key] = {};
	      Object.keys(props).forEach(function (name) {
	        ALL$1[key][name] = writable(props[name]);
	      });
	    } else {
	      throw new Error("store's props wasn't specified");
	    }
	  }
	  return ALL$1[key];
	}

	/**
	 * Creates object that is fake Store
	 * Some time this is useful when you need to initialize local var,
	 * before you could get actual Stores from central storage by its ID
	 *	@params {mixed} val 	data of type that is actual storage will contain
	 * @returns {Object}
	 */

	function fake(val) {
	  return {
	    subscribe(f) {
	      f(val);
	      return function () {};
	    },
	    set() {}
	  };
	}

	var stores = /*#__PURE__*/Object.freeze({
		__proto__: null,
		create: create$1,
		fake: fake,
		get: get$1
	});

	const //record
	  META_INTERFACE = Symbol('interface'),
	  META_MAP_TO_INTERFACE = ['getActionsCount', 'getActions', 'setFindBy', 'resetFilter', 'setFilter', 'getFilter', 'setSorter', 'getSorter', 'resetSorter', 'setPageNumber', 'setPageSize', 'setPager', 'setReturn', 'setSearch', 'getSearch', 'resetSearch', 'resetPager', 'getPager', 'addFormFieldType', 'addFormField', 'getFieldTypes', 'getActionFormFields'],
	  DEFAULT_ACTION_PREFIX$1 = '$';

	const OPT_DEFAULT_INDEX_FIELD_NAME_PRIORITY = ["_id", "id", "ID"],
	  DEFAULT_FILTER = {},
	  DEFAULT_SEARCH = "",
	  DEFAULT_RETURN = {},
	  DEFAULT_PAGE_NUMBER = 0,
	  DEFAULT_PAGE_SIZE = 10,
	  DEFAULT_ACTION_PREFIX = "$",
	  DEFAULT_WS_ROUTE_ACTION_SPLITTER = "//";
	let notInterface = /*#__PURE__*/function (_notBase) {
	  function notInterface(manifest, options) {
	    var _this;
	    _classCallCheck(this, notInterface);
	    _this = _callSuper(this, notInterface, [{
	      working: {
	        name: "network interface for: " + (manifest.model ? manifest.model : "unknown"),
	        filter: DEFAULT_FILTER,
	        search: DEFAULT_SEARCH,
	        return: DEFAULT_RETURN,
	        pager: {
	          size: DEFAULT_PAGE_SIZE,
	          page: DEFAULT_PAGE_NUMBER
	        }
	      },
	      options
	    }]);
	    _this.manifest = manifest;
	    _this.initActions();
	    return _possibleConstructorReturn(_this, _this);
	  }
	  _inherits(notInterface, _notBase);
	  return _createClass(notInterface, [{
	    key: "initActions",
	    value: function initActions() {
	      if (this.getActionsCount() > 0) {
	        let actions = this.getActions();
	        for (let actionName in actions) {
	          this.initAction(actionName);
	        }
	      }
	    }
	  }, {
	    key: "initAction",
	    value: function initAction(actionName) {
	      var _this2 = this;
	      if (!notCommon$1.objHas(this, DEFAULT_ACTION_PREFIX + actionName)) {
	        this[DEFAULT_ACTION_PREFIX + actionName] = function (opts, headers, fileUpload = false, files) {
	          return _this2.request(_this2, actionName, opts, headers, fileUpload, files);
	        };
	      }
	    }
	  }, {
	    key: "requestHTTP",
	    value: function requestHTTP(record, actionName, params, headers = {}, fileUpload = false, files) {
	      try {
	        let compositeData = Object.assign({}, record.getData && typeof record.getData === "function" ? record.getData() : record, params);
	        let actionData = this.getActionData(actionName),
	          requestParams = this.collectRequestData(actionData),
	          requestParamsEncoded = this.encodeRequest(requestParams),
	          //id = this.getID(compositeData, actionData, actionName),
	          apiServerURL = this.getServerURL(),
	          url = this.getURL(compositeData, actionData, actionName),
	          opts = {};
	        if (fileUpload) {
	          url = this.getURL(params, actionData, actionName);
	          const fd = new FormData();
	          fd.append("file", files);
	          opts.body = fd;
	        } else {
	          if (["OPTIONS", "GET"].indexOf(actionData.method.toUpperCase()) === -1) {
	            opts = {
	              method: actionData.method,
	              body: JSON.stringify(record.getData && typeof record.getData === "function" ? record.getData() : record),
	              headers: {
	                Accept: "application/json",
	                "Content-Type": "application/json"
	              }
	            };
	          }
	        }
	        opts.method = actionData.method.toUpperCase();
	        if (headers && Object.keys(headers).length) {
	          opts.headers = headers;
	        }
	        return fetch(apiServerURL + url + requestParamsEncoded, opts).then(function (response) {
	          return response.json();
	        });
	      } catch (e) {
	        notCommon$1.error(e);
	        notCommon$1.report(e);
	      }
	    }
	  }, {
	    key: "requestWS",
	    value: function requestWS(record, actionName) {
	      try {
	        let actionData = this.getActionData(actionName),
	          requestParams = this.collectRequestData(actionData);
	        const WS = notCommon$1.getApp().getWSClient();
	        const messageName = this.getWSRequestName(actionName);
	        const payload = Object.assign({}, requestParams, record.getData());
	        if (notCommon$1.objHas(actionData, "type") && typeof actionData.type === "string" && actionData.type.length && actionData.type !== "request") {
	          return WS.message(actionData.type, messageName, payload).then(function (response) {
	            return response.payload;
	          });
	        } else {
	          return WS.request(messageName, payload).then(function (response) {
	            return response.payload;
	          });
	        }
	      } catch (e) {
	        notCommon$1.error(e);
	        notCommon$1.report(e);
	      }
	    }
	  }, {
	    key: "request",
	    value: function request() {
	      let actionData = this.getActionData(arguments[1]);
	      switch (this.selectTransport(actionData)) {
	        case "ws":
	          return this.requestWS(...arguments);
	        case "http":
	          return this.requestHTTP(...arguments);
	        default:
	          throw new Error("Offline");
	      }
	    }
	  }, {
	    key: "wsIsUp",
	    value: function wsIsUp(actionData) {
	      if (actionData.ws === true) {
	        let client;
	        if (notCommon$1.objHas(actionData, "wsClient") && actionData.wsClient) {
	          client = notCommon$1.getApp().getWSClient(actionData.wsClient);
	        } else {
	          client = notCommon$1.getApp().getWSClient();
	        }
	        if (client) {
	          return true;
	        }
	      }
	      return false;
	    }
	  }, {
	    key: "selectTransport",
	    value: function selectTransport(actionData) {
	      if (this.wsIsUp(actionData)) {
	        return "ws"; //for ws/wss
	      }
	      if (notCommon$1.objHas(actionData, "method")) {
	        return "http"; //for http/https
	      }
	      return false; //for offline
	    }
	  }, {
	    key: "getModelName",
	    value: function getModelName() {
	      return this && this.manifest ? this.manifest.model : null;
	    }
	  }, {
	    key: "getActionData",
	    value: function getActionData(actionName) {
	      return this.getActions() && this.getActions()[actionName] ? this.getActions()[actionName] : null;
	    }
	  }, {
	    key: "getActionsCount",
	    value: function getActionsCount() {
	      return this.getActions() ? Object.keys(this.getActions()).length : 0;
	    }
	  }, {
	    key: "getActions",
	    value: function getActions() {
	      return this.manifest && this.manifest.actions ? this.manifest.actions : {};
	    }
	  }, {
	    key: "parseParams",
	    value: function parseParams(start, end, line, record) {
	      let fieldName = "";
	      let len = start.length;
	      while (line.indexOf(start) > -1) {
	        let ind = line.indexOf(start);
	        let startSlice = ind + len;
	        let endSlice = line.indexOf(end);
	        if (ind > endSlice) {
	          break;
	        }
	        fieldName = line.slice(startSlice, endSlice);
	        if (fieldName == "") break;
	        this.log && this.log(start + fieldName + end, notPath.get(fieldName, record));
	        line = line.replace(start + fieldName + end, notPath.get(fieldName, record));
	      }
	      return line;
	    }
	  }, {
	    key: "parseLine",
	    value: function parseLine(line, record, actionName) {
	      line = line.replace(":modelName", this.manifest.model);
	      line = line.replace(":actionName", actionName);
	      line = this.parseParams(":record[", "]", line, record);
	      line = this.parseParams(":", "?", line, record);
	      return line;
	    }
	  }, {
	    key: "getURL",
	    value: function getURL(record, actionData, actionName) {
	      var line = this.parseLine(this.manifest.url, record, actionName) + (notCommon$1.objHas(actionData, "postFix") ? this.parseLine(actionData.postFix, record, actionName) : "");
	      return line;
	    }
	  }, {
	    key: "getServerURL",
	    value: function getServerURL() {
	      return notCommon$1.getApp() ? notCommon$1.getApp().getOptions("api.server.url", "") : "";
	    }
	  }, {
	    key: "getWSRequestName",
	    value: function getWSRequestName(actionName) {
	      const modelName = this.manifest.model;
	      return `${modelName}${DEFAULT_WS_ROUTE_ACTION_SPLITTER}${actionName}`;
	    }
	  }, {
	    key: "encodeRequest",
	    value: function encodeRequest(data) {
	      let p = "?";
	      for (let t in data) {
	        if (typeof data[t] !== "undefined" && data[t] !== null) {
	          p += encodeURIComponent(t) + "=" + encodeURIComponent(data[t].constructor === Object ? JSON.stringify(data[t]) : data[t]) + "&";
	        }
	      }
	      //for test purpose only, special test server needed
	      if (this.getOptions("test")) {
	        p += "&test=1";
	        if (this.getOptions("test.session")) {
	          p += "&session=" + this.getOptions("test.session");
	        }
	        if (this.getOptions("test.session")) {
	          p += "&role=" + this.getOptions("test.role");
	        }
	      }
	      return p;
	    }
	  }, {
	    key: "collectRequestData",
	    value: function collectRequestData(actionData) {
	      let requestData = {};
	      if (notCommon$1.objHas(actionData, "data") && Array.isArray(actionData.data)) {
	        for (let i = 0; i < actionData.data.length; i++) {
	          let dataProviderName = "get" + notCommon$1.capitalizeFirstLetter(actionData.data[i]);
	          if (this[dataProviderName] && typeof this[dataProviderName] === "function") {
	            let data = this[dataProviderName](),
	              res = {};
	            if (["pager", "sorter", "filter", "search", "return"].indexOf(actionData.data[i]) > -1) {
	              res[actionData.data[i]] = data;
	            } else {
	              res = data;
	            }
	            requestData = Object.assign(requestData, res);
	          }
	        }
	      }
	      return requestData;
	    }
	  }, {
	    key: "getID",
	    value: function getID(record, actionData) {
	      let resultId,
	        list = OPT_DEFAULT_INDEX_FIELD_NAME_PRIORITY,
	        prefixes = ["", this.manifest.model];
	      if (notCommon$1.objHas(actionData, "index") && actionData.index) {
	        list = [actionData.index].concat(OPT_DEFAULT_INDEX_FIELD_NAME_PRIORITY);
	      }
	      for (let pre of prefixes) {
	        for (let t of list) {
	          if (notCommon$1.objHas(record, pre + t)) {
	            resultId = record[pre + t];
	            break;
	          }
	        }
	      }
	      return resultId;
	    }
	  }, {
	    key: "setFindBy",
	    value: function setFindBy(key, value) {
	      var obj = {};
	      obj[key] = value;
	      return this.setFilter(obj);
	    }
	  }, {
	    key: "setFilter",
	    value: function setFilter(filterData = DEFAULT_FILTER) {
	      this.setWorking("filter", filterData);
	      return this;
	    }
	  }, {
	    key: "resetFilter",
	    value: function resetFilter() {
	      return this.setFilter();
	    }
	  }, {
	    key: "getFilter",
	    value: function getFilter() {
	      return this.getWorking("filter");
	    }
	  }, {
	    key: "setSearch",
	    value: function setSearch(searchData = DEFAULT_SEARCH) {
	      this.setWorking("search", searchData);
	      return this;
	    }
	  }, {
	    key: "resetSearch",
	    value: function resetSearch() {
	      return this.setSearch();
	    }
	  }, {
	    key: "getSearch",
	    value: function getSearch() {
	      return this.getWorking("search");
	    }
	  }, {
	    key: "setSorter",
	    value: function setSorter(sorterData) {
	      this.setWorking("sorter", sorterData);
	      return this;
	    }
	  }, {
	    key: "resetSorter",
	    value: function resetSorter() {
	      return this.setSorter({});
	    }
	  }, {
	    key: "getSorter",
	    value: function getSorter() {
	      return this.getWorking("sorter");
	    }
	  }, {
	    key: "setReturn",
	    value: function setReturn(returnData = DEFAULT_RETURN) {
	      this.setWorking("return", returnData);
	      return this;
	    }
	  }, {
	    key: "resetReturn",
	    value: function resetReturn() {
	      return this.setReturn({});
	    }
	  }, {
	    key: "getReturn",
	    value: function getReturn() {
	      return this.getWorking("return");
	    }
	  }, {
	    key: "setPageNumber",
	    value: function setPageNumber(pageNumber) {
	      this.setWorking("pager.page", pageNumber);
	      return this;
	    }
	  }, {
	    key: "setPageSize",
	    value: function setPageSize(pageSize) {
	      this.setWorking("pager.size", pageSize);
	      return this;
	    }

	    //pageSize = DEFAULT_PAGE_SIZE, pageNumber = DEFAULT_PAGE_NUMBER
	  }, {
	    key: "setPager",
	    value: function setPager() {
	      if ((arguments.length < 2 || isNaN(arguments[0]) || isNaN(arguments[1])) && arguments[0].constructor === Object && notCommon$1.objHas(arguments[0], "page") && notCommon$1.objHas(arguments[0], "size")) {
	        const pager = arguments[0];
	        this.setWorking("pager", {
	          size: pager.size || DEFAULT_PAGE_SIZE,
	          page: pager.page || DEFAULT_PAGE_NUMBER
	        });
	      } else if (arguments.length === 2 && !isNaN(arguments[0]) && !isNaN(arguments[1])) {
	        this.setWorking("pager", {
	          size: arguments[0] || DEFAULT_PAGE_SIZE,
	          page: arguments[1] || DEFAULT_PAGE_NUMBER
	        });
	      }
	      return this;
	    }
	  }, {
	    key: "resetPager",
	    value: function resetPager() {
	      return this.setPager();
	    }
	  }, {
	    key: "getPager",
	    value: function getPager() {
	      return this.getWorking("pager");
	    }
	  }, {
	    key: "getRecord",
	    value: function getRecord() {
	      this.getData();
	    }
	  }, {
	    key: "getDefaultAsPlainObject",
	    value: function getDefaultAsPlainObject() {
	      if (!this.manifest || !this.manifest.fields) {
	        return {};
	      }
	      const result = {};
	      for (const fieldName of Object.keys(this.manifest.fields)) {
	        if (Object.hasOwn(this.manifest.fields[fieldName], "default")) {
	          const defaultValue = this.manifest.fields[fieldName].default;
	          if (Array.isArray(defaultValue)) {
	            result[fieldName] = [...defaultValue];
	          } else if (typeof defaultValue === "object") {
	            result[fieldName] = {
	              ...defaultValue
	            };
	          } else {
	            result[fieldName] = defaultValue;
	          }
	        }
	      }
	      return result;
	    }
	  }]);
	}(notBase);

	let notRecord = /*#__PURE__*/function (_notBase) {
	  function notRecord(manifest, item) {
	    var _this;
	    _classCallCheck(this, notRecord);
	    _this = _callSuper(this, notRecord);
	    if (typeof item === "undefined" || item === null || typeof item !== "object") {
	      return _possibleConstructorReturn(_this, item);
	    }
	    if (item && item.isProxy) {
	      notCommon$1.error("this is Proxy item");
	      return _possibleConstructorReturn(_this, item);
	    }
	    if (item && (item.isRecord || item.isProperty)) {
	      return _possibleConstructorReturn(_this, item);
	    } else {
	      if (Array.isArray(item)) {
	        return _possibleConstructorReturn(_this, _this.createCollection(manifest, item));
	      }
	    }
	    _this.setOptions({});
	    _this[META_INTERFACE] = new notInterface(manifest, {});
	    _this.setData(item);
	    _this.interfaceUp();
	    _this.mapToInterface();
	    _this.mapToMethods();
	    return _possibleConstructorReturn(_this, _this);
	  }
	  _inherits(notRecord, _notBase);
	  return _createClass(notRecord, [{
	    key: "toDefault",
	    value: function toDefault() {
	      return this.setData(this[META_INTERFACE].getDefaultAsPlainObject());
	    }
	  }, {
	    key: "mapToInterface",
	    value: function mapToInterface() {
	      let rec = this;
	      for (let t of META_MAP_TO_INTERFACE) {
	        if (this[META_INTERFACE][t] && typeof this[META_INTERFACE][t] === "function") {
	          this[t] = function () {
	            let res = rec[META_INTERFACE][t](...arguments);
	            return res == rec[META_INTERFACE] ? rec : res;
	          };
	        }
	      }
	    }
	  }, {
	    key: "mapToMethods",
	    value: function mapToMethods() {
	      let manifest = this[META_INTERFACE].manifest,
	        app = notCommon$1.getApp(),
	        methods = {};
	      if (manifest.methods) {
	        methods = manifest.methods;
	      } else if (app) {
	        methods = app.getOptions(["models", this[META_INTERFACE].manifest.model].join("."), {});
	      }
	      if (methods) {
	        for (let t in methods) {
	          if (Object.hasOwn(methods, t)) {
	            this[t] = methods[t];
	          }
	        }
	      }
	    }
	  }, {
	    key: "createCollection",
	    value: function createCollection(manifest, items) {
	      var collection = [];
	      for (var i = 0; i < items.length; i++) {
	        collection.push(new notRecord(manifest, items[i]));
	      }
	      return collection;
	    }
	  }, {
	    key: "interfaceUp",
	    value: function interfaceUp() {
	      if (this[META_INTERFACE].getActionsCount() > 0) {
	        let actions = this[META_INTERFACE].getActions();
	        for (let i in actions) {
	          this.actionUp(i, actions[i]);
	        }
	      }
	    }
	  }, {
	    key: "actionUp",
	    value: function actionUp(index) {
	      var _this2 = this;
	      if (!Object.hasOwn(this, [DEFAULT_ACTION_PREFIX$1 + index])) {
	        this[DEFAULT_ACTION_PREFIX$1 + index] = function (...params) {
	          return _this2[META_INTERFACE].request(_this2, index, ...params);
	        };
	      }
	    }
	    /*
	    -> 'path.to.key', valueOfKey
	    <- ok, with one onChange event triggered
	    */
	  }, {
	    key: "setAttr",
	    value: function setAttr(key, value) {
	      return this.setData(key, value);
	    }

	    /*
	    ->
	    {
	    'keyPath': value,
	    'key.subPath': value2,
	    'keyPath.0.title': value3
	    }
	    <- ok, with bunch of onChange events triggered
	    */
	  }, {
	    key: "setAttrs",
	    value: function setAttrs(objectPart) {
	      //notCommon.log('setAttrs', objectPart, Object.keys(objectPart));
	      if (objectPart && typeof objectPart === "object" && Object.keys(objectPart).length > 0) {
	        for (let path in objectPart) {
	          //notCommon.log('setAttrs one to go', path);
	          this.setAttr(path, objectPart[path]);
	        }
	      }
	    }

	    /*
	    -> 'pathToKey'
	    <- value1
	    */
	  }, {
	    key: "getAttr",
	    value: function getAttr(what, plain = false) {
	      let prx = this.getData(what, {});
	      if (plain) {
	        return notCommon$1.stripProxy(prx);
	      } else {
	        return prx;
	      }
	    }

	    /*
	    -> ['pathToKey', 'path.to.key', 'simpleKey',...]
	    <- [value1, value2, value3,...]
	    */
	  }, {
	    key: "getAttrs",
	    value: function getAttrs(what) {
	      let result = [];
	      if (what && what.length > 0) {
	        for (let path of what) {
	          result.push(this.getAttr(path));
	        }
	      }
	      return result;
	    }
	  }, {
	    key: "getManifest",
	    value: function getManifest() {
	      if (this[META_INTERFACE]) {
	        return this[META_INTERFACE].manifest;
	      } else {
	        return {};
	      }
	    }
	  }, {
	    key: "setItem",
	    value: function setItem(item) {
	      this.setData(item);
	      return this;
	    }
	  }]);
	}(notBase);

	/**
	 * @const {string} [OPT_CONTROLLER_PREFIX = "nc"] controller names prefix nc aka NotController
	 */
	const OPT_CONTROLLER_PREFIX = "nc";
	/**
	 * @const {string} [OPT_RECORD_PREFIX = "nr"] record names prefix nr aka NotRecord
	 */
	const OPT_RECORD_PREFIX = "nr";
	/**
	 * @const {string} [DEFAULT_WS_CLIENT_NAME = "main"] default name of WS client
	 */
	const DEFAULT_WS_CLIENT_NAME = "main";

	/**
	 * Class of application
	 * @class
	 */
	let notApp = /*#__PURE__*/function (_notBase) {
	  /**
	   * @class
	   * @param {object} options              application options
	   * @param {string} options.name         name
	   * @param {object} options.controllers  controllers
	   * @param {string}  options.manifestURL URL of network manifest with all available models/actions/fields requests options
	   */
	  function notApp(options) {
	    var _this;
	    _classCallCheck(this, notApp);
	    _this = _callSuper(this, notApp, [{
	      working: {
	        name: options.name,
	        interfaces: {},
	        controllers: notCommon$1.objHas(options, "controllers") ? options.controllers : {},
	        initController: null,
	        currentController: null,
	        uis: {},
	        wsc: {},
	        wss: {},
	        services: {}
	      },
	      options
	    }]);
	    _this?.log && _this.log("start app");
	    notCommon$1.register("app", _this);
	    _this.initManifest();
	    return _possibleConstructorReturn(_this, _this);
	  }

	  /**
	   * Initializes application according to network manifest, which is retrieved from server
	   */
	  _inherits(notApp, _notBase);
	  return _createClass(notApp, [{
	    key: "initManifest",
	    value: function initManifest() {
	      var _this2 = this;
	      notCommon$1.getJSON(this.getOptions("manifestURL")).then(function (manifest) {
	        return _this2.setInterfaceManifest(manifest);
	      }).catch(function (e) {
	        return notCommon$1.report(e);
	      });
	    }

	    /**
	     * One page routing initialization
	     */
	  }, {
	    key: "initRouter",
	    value: function initRouter() {
	      this.setWorking("router", notRouter$1);
	      this.getWorking("router").setRoot(this.getOptions("router.root"));
	      notRouter$1.reRouteExisted();
	    }

	    /**
	     * Creates all the routes handlers and pushes them into router
	     */
	  }, {
	    key: "execRouter",
	    value: function execRouter() {
	      var routieInput = {};
	      for (let t = 0; t < this.getOptions("router.manifest").length; t++) {
	        let routeBlock = this.getOptions("router.manifest")[t],
	          paths = routeBlock.paths,
	          schemes = routeBlock.schemes,
	          controller = routeBlock.controller;
	        for (let i = 0; i < paths.length; i++) {
	          let pathScheme = schemes && Array.isArray(schemes) && schemes.length > i ? schemes[i] : false;
	          routieInput[paths[i]] = this.bindController(controller, pathScheme);
	        }
	      }
	      this.getWorking("router").addList(routieInput).listen(); //.navigate(this.getOptions('router.index'));
	    }

	    /**
	     * Sets interface manifest option
	     * @param {object}  manifest    interface manifest
	     */
	  }, {
	    key: "setInterfaceManifest",
	    value: function setInterfaceManifest(manifest) {
	      Object.freeze(manifest);
	      this.setOptions("interfaceManifest", manifest);
	      this.initRouter();
	      this.update();
	    }

	    /**
	     * returns constructor of interface model
	     * @param {string}  modelName   model name
	     * @returns {object}    interface model constructor
	     */
	  }, {
	    key: "getInterfaceManifest",
	    value: function getInterfaceManifest(modelName) {
	      if (modelName) {
	        return this.getOptions("interfaceManifest")[modelName];
	      } else {
	        return this.getOptions("interfaceManifest");
	      }
	    }

	    /**
	     * Updating Application, reloads interfaces, init controller launched, start again
	     */
	  }, {
	    key: "update",
	    value: function update() {
	      //нужно инициализировать
	      //модели полученными интерфейсами
	      this.updateInterfaces();
	      //иницилицировать и запустить контроллер инициализации
	      this.initController();
	      this.startApp();
	    }

	    /**
	     * Initialization of services, startup of routing
	     */
	  }, {
	    key: "startApp",
	    value: function startApp() {
	      this.initServices();
	      //создать контроллеры
	      //роутер и привязать к нему контроллеры
	      this.execRouter();
	      this.emit("afterStarted", this);
	    }

	    /**
	     *
	     * @param {object} controllerName controller constructor
	     * @param {string[]} controllerPathScheme
	     * @returns {function} function creates new controller instance and pass in notApp instance, arguments from router parser and pathScheme
	     */
	  }, {
	    key: "bindController",
	    value: function bindController(controllerName, controllerPathScheme) {
	      let app = this;
	      return function () {
	        new controllerName(app, arguments, controllerPathScheme);
	      };
	    }

	    /**
	     * Initializes 'initialization' controller which is runs once,
	     * to perform custom initializations routines by application code
	     */
	  }, {
	    key: "initController",
	    value: function initController() {
	      if (typeof this.getOptions("initController") !== "undefined") {
	        let initController = this.getOptions("initController");
	        this.setWorking("initController", new initController(this));
	      }
	    }

	    /**
	     * Returns working controller
	     * @returns {object} working controller
	     */
	  }, {
	    key: "getCurrentController",
	    value: function getCurrentController() {
	      return this.getWorking("currentController");
	    }

	    /**
	     * Destroyes working controller then sets provided as working
	     * @param {object} ctrl controller instance
	     * @returns {object} notApp instance
	     */
	  }, {
	    key: "setCurrentController",
	    value: function setCurrentController(ctrl) {
	      let oldCtrl = this.getCurrentController();
	      if (oldCtrl && oldCtrl.destroy) {
	        oldCtrl.destroy();
	      }
	      this.setWorking("currentController", ctrl);
	      return this;
	    }

	    /**
	     * Creates arrow function: (modelInitData = {}) => notRecord
	     * Factory that creates notRecord instances with binded
	     * recordManifest and provided data to initialize record
	     * @param {Object} recordManifest
	     * @return {function}
	     * @memberof notApp
	     */
	  }, {
	    key: "createInterfaceModelFactory",
	    value: function createInterfaceModelFactory(recordManifest) {
	      return function (recordData) {
	        return new notRecord(recordManifest, recordData);
	      };
	    }

	    /**
	     * Clears interfaces, recreates all according to Options.interafaceManifest
	     */
	  }, {
	    key: "updateInterfaces",
	    value: function updateInterfaces() {
	      this.clearInterfaces();
	      let manifests = this.getOptions("interfaceManifest");
	      if (manifests) {
	        for (let name in manifests) {
	          let recordManifest = manifests[name],
	            recordMethods = this.getOptions(["models", name].join("."), {});
	          recordManifest.methods = recordMethods;
	          const nameInt = this.createInterfaceModelFactory(recordManifest);
	          this.setInterface(name, nameInt);
	        }
	      }
	    }

	    /**
	     * Converts interface name (modelName) to standartizied prefixModelName
	     * @param {string} name interface model name
	     * @returns {string}    not record name
	     */
	  }, {
	    key: "getRecordName",
	    value: function getRecordName(name) {
	      return OPT_RECORD_PREFIX + notCommon$1.capitalizeFirstLetter(name);
	    }

	    /**
	     * Converts controller name (controllerName) to standartizied prefixControllerName
	     * @param {string} name controller name
	     * @returns {string}    not controller name
	     */
	  }, {
	    key: "getControllerName",
	    value: function getControllerName(name) {
	      return OPT_CONTROLLER_PREFIX + notCommon$1.capitalizeFirstLetter(name);
	    }

	    /**
	     * Sets named interface factory function
	     *
	     * @param {string} name
	     * @param {function} modelFactory
	     * @return {notApp}
	     * @memberof notApp
	     */
	  }, {
	    key: "setInterface",
	    value: function setInterface(name, modelFactory) {
	      return this.setWorking(`interfaces.${name}`, modelFactory);
	    }

	    /**
	     * Returns all network interfaces
	     * @returns {object} all network insterfaces
	     */
	  }, {
	    key: "getInterfaces",
	    value: function getInterfaces() {
	      return this.getWorking("interfaces");
	    }

	    /**
	     * Sets interfaces list clear
	     * @returns {object} notApp instance
	     */
	  }, {
	    key: "clearInterfaces",
	    value: function clearInterfaces() {
	      this.setWorking("interfaces", {});
	      return this;
	    }

	    /**
	     * Sets WebSockets client
	     * @param {string} [name=DEFAULT_WS_CLIENT_NAME] name of client
	     * @param {object} wsc  notWSClient instance
	     * @returns {object} notApp instance
	     */
	    // @ts-ignore
	  }, {
	    key: "setWSClient",
	    value: function setWSClient(name = DEFAULT_WS_CLIENT_NAME, wsc) {
	      return this.setWorking(`wsc.${name}`, wsc);
	    }

	    /**
	     * Returns web sockets client instance by name
	     * @param {string} [name=DEFAULT_WS_CLIENT_NAME]
	     * @returns {object} instance of notWSClient
	     */
	  }, {
	    key: "getWSClient",
	    value: function getWSClient(name = DEFAULT_WS_CLIENT_NAME) {
	      return this.getWorking(`wsc.${name}`);
	    }

	    /**
	     * returns network interface class initializator
	     * @param {string} name name of network interface
	     * @returns {function} interface class initializator
	     */
	  }, {
	    key: "getInterface",
	    value: function getInterface(name) {
	      return this.getInterfaces()[name];
	    }

	    /**
	     * Returns network interface (model) initialized with provided data
	     * @param {string} name interface(modelName)
	     * @param {object} [data={}]    model data
	     * @returns network interface initializes with provided data
	     */
	  }, {
	    key: "getModel",
	    value: function getModel(name, data = {}) {
	      return this.getInterface(name)(data);
	    }

	    /**
	     * Sets service
	     * @param {string} name name of the service
	     * @param {object|function} val service
	     */
	  }, {
	    key: "setService",
	    value: function setService(name, val) {
	      return this.setWorking(`services.${name}`, val);
	    }

	    /**
	     * Returns service
	     * @param {string} name name of the service
	     * @returns {object|function} service
	     */
	  }, {
	    key: "getService",
	    value: function getService(name) {
	      return this.getWorking(`services.${name}`);
	    }

	    /**
	     * Initializes all provided services
	     */
	  }, {
	    key: "initServices",
	    value: function initServices() {
	      if (this.getOptions("services")) {
	        for (let servName in this.getOptions("services")) {
	          try {
	            let serv = this.getOptions(`services.${servName}`);
	            const servType = notCommon$1.detectType(serv);
	            switch (servType) {
	              case "function":
	              case "class":
	                this.setService(servName, new serv(this));
	                break;
	              default:
	                this.setService(servName, serv);
	            }
	          } catch (e) {
	            this?.error && this.error(`Service (${servName}) init error`, e);
	          }
	        }
	      }
	    }

	    /**
	     * Returns module dedicated options reader
	     * @param {string} moduleName   module name
	     * @returns {object} reader object {get(pathToValue, defaultValue)}
	     */
	  }, {
	    key: "getConfigReaderForModule",
	    value: function getConfigReaderForModule(moduleName = "") {
	      var _this3 = this;
	      const modConfPath = ["modules", moduleName].join(".");
	      return {
	        get: function (subPath, fallback) {
	          if (subPath && typeof subPath == "string" && subPath.length) {
	            return _this3.getOptions([modConfPath, subPath].join("."), fallback);
	          } else {
	            return _this3.getOptions(modConfPath, fallback);
	          }
	        }
	      };
	    }

	    /**
	     * Returns module dedicated options reader
	     * @param {string} [moduleName='']   module name
	     * @returns {object} reader object {get(pathToValue, defaultValue)}
	     */
	  }, {
	    key: "moduleConfig",
	    value: function moduleConfig(moduleName = "") {
	      return this.getConfigReaderForModule(moduleName);
	    }
	  }]);
	}(notBase);
	/**
	 *  @static {function} DEFAULT_WS_CLIENT_NAME  function to perform deep merges of objects
	 */
	_defineProperty(notApp, "DEFAULT_WS_CLIENT_NAME", DEFAULT_WS_CLIENT_NAME);

	/**
	 * @const {string}  [OPT_DEFAULT_ACTION_NAME = "default"]      default action name
	 */
	const OPT_DEFAULT_ACTION_NAME = "default";

	/**
	 * @const {string}  [OPT_DEFAULT_CONTAINER_SELECTOR = "main.content"]  selector of container HTML
	 *                          element
	 */
	const OPT_DEFAULT_CONTAINER_SELECTOR = "main.content";

	/**
	 * @const {string}  [OPT_DEFAULT_PLURAL_NAME = "Models"]  default plural name of entities
	 */
	const OPT_DEFAULT_PLURAL_NAME = "Models";

	/**
	 * @const {string}  [OPT_DEFAULT_SINGLE_NAME = "Model"]  default single name of entities
	 */
	const OPT_DEFAULT_SINGLE_NAME = "Model";

	/**
	 * @const {string}  [OPT_DEFAULT_MODULE_NAME="main"]  default module name
	 */
	const OPT_DEFAULT_MODULE_NAME = "main";

	/**
	 * @const {boolean}  [OPT_DEFAULT_AUTO_NAME = true]  if shoould be used auto name generator
	 */
	const OPT_DEFAULT_AUTO_NAME = true;

	/**
	 *  Basic class for user controller
	 *  @extends notBase
	 */
	let notController = /*#__PURE__*/function (_notBase) {
	  /**
	   *  @class
	   *  @param {import('./app.js').default} app
	   *  @param  {string}    name
	   */
	  function notController(app, name) {
	    var _this;
	    _classCallCheck(this, notController);
	    _this = _callSuper(this, notController, [{}]);
	    /**
	     *
	     * @type    {object|null}
	     * @memberof notController
	     */
	    _defineProperty(_this, "els", void 0);
	    /**
	     *
	     * @type    {object|null}
	     * @memberof notController
	     */
	    _defineProperty(_this, "make", void 0);
	    /**
	     *
	     * @type    {null|import('./app.js').default}
	     * @memberof notController
	     */
	    _defineProperty(_this, "app", void 0);
	    _this.app = app;
	    _this.app.setCurrentController(_this);
	    _this.setWorking({
	      name,
	      ready: false,
	      views: {},
	      libs: {},
	      helpers: {}
	    });
	    _this.ui = {};
	    _this.els = {};
	    _this.setData({});
	    _this.setOptions({
	      moduleName: OPT_DEFAULT_MODULE_NAME,
	      containerSelector: OPT_DEFAULT_CONTAINER_SELECTOR,
	      prefix: app.getOptions("paths.module"),
	      names: {
	        plural: OPT_DEFAULT_PLURAL_NAME,
	        single: OPT_DEFAULT_SINGLE_NAME
	      }
	    });
	    _this.setURLPrefix(app.getOptions("router.root"));
	    /*
	    сразу делаем доступными модели notRecord из nc`ControllerName` будут доступны как this.nr`ModelName`
	    */
	    let interfaces = app.getInterfaces();
	    _this.make = {};
	    for (let t in interfaces) {
	      // @ts-ignore
	      if (Object.hasOwn(interfaces, t)) {
	        _this.make[t] = interfaces[t];
	      }
	    }
	    _this.on("destroy", function () {
	      _this.app = null;
	      for (let uiName in _this.ui) {
	        _this.ui[uiName].destroy && _this.ui[uiName].destroy();
	        _this.ui[uiName].$destroy && _this.ui[uiName].$destroy();
	        _this.ui[uiName] = null;
	      }
	      _this.els = null;
	      _this.make = null;
	    });
	    return _possibleConstructorReturn(_this, _this);
	  }

	  /**
	   *  Returns current notApp
	   *  @return {import('./app.js').default}
	   */
	  _inherits(notController, _notBase);
	  return _createClass(notController, [{
	    key: "getApp",
	    value: function getApp() {
	      return notCommon$1.getApp();
	    }

	    /**
	     *  Sets default controller model
	     *  @param {import('./record.js')}  model  notRecord interface object
	     *  @return {notController}
	     */
	  }, {
	    key: "setModel",
	    value: function setModel(model) {
	      this.setWorking("model", model);
	      return this;
	    }

	    /**
	     *  If zero or one argument provided this modelName instance will be returned
	     *  If two provided and first is a string than instance of name will be returned initialized with second object param or empty object
	     *  @param {string|object}      [name]    modelName of instance to return or initial data for instance
	     *  @param {object}             [data]    model data
	     *  @return {import('./record.js').default}
	     */
	  }, {
	    key: "getModel",
	    value: function getModel(name, data) {
	      if (typeof name === "string") {
	        const int = this.getInterface(name);
	        return int && int(data || {});
	      } else {
	        const int = this.getInterface();
	        return int && int(name || {});
	      }
	    }

	    /**
	     * Returns controller interface if name is not specified or interface of specified
	     *
	     * @param {string} [name=""]
	     * @return {*}
	     * @memberof notController
	     */
	  }, {
	    key: "getInterface",
	    value: function getInterface(name = "") {
	      return this.app?.getInterface(name || this.getModelName());
	    }

	    /**
	     *  Returns current model name
	     *  @return {string}
	     */
	  }, {
	    key: "getModelName",
	    value: function getModelName() {
	      return this.getWorking("modelName");
	    }
	    /**
	     *  Sets default controller model name
	     *  @param {string}  modelName  notRecord interface object
	     *  @return {notController}
	     */
	  }, {
	    key: "setModelName",
	    value: function setModelName(modelName) {
	      this.setWorking("modelName", notCommon$1.lowerFirstLetter(modelName));
	      return this;
	    }

	    /**
	     *  Returns current model primary ID field name
	     *  @return {import('./record.js')}
	     */
	  }, {
	    key: "getModelIDFieldName",
	    value: function getModelIDFieldName() {
	      return this.getWorking("modelIDFieldName", "_id");
	    }

	    /**
	     *  Sets current model primary ID field name
	     *  @return {notController}
	     */
	  }, {
	    key: "setModelIDFieldName",
	    value: function setModelIDFieldName(val = "_id") {
	      return this.setWorking("modelIDFieldName", val);
	    }

	    /**
	     *  Marks this controller as ready
	     *  emits "ready"/"busy" events
	     *  @param {Boolean}  val  true/false
	     */
	  }, {
	    key: "setReady",
	    value: function setReady(val = true) {
	      this.setWorking("ready", val);
	      val ? this.emit("ready") : this.emit("busy");
	    }

	    /**
	     *  Sets module URL prefix
	     *  @param {string} val URL prefix
	     *  @return {notController} this
	     */
	  }, {
	    key: "setURLPrefix",
	    value: function setURLPrefix(val) {
	      this.setOptions("urlPrefix", val);
	      this.updateAutoName();
	      return this;
	    }

	    /**
	     *  Returns module url prefix
	     *  @return  {string} prefix
	     */
	  }, {
	    key: "getURLPrefix",
	    value: function getURLPrefix() {
	      return this.getOptions("urlPrefix");
	    }

	    /**
	     *  Sets module name
	     *  @param {string} val name of the module
	     *  @return {notController} this
	     */
	  }, {
	    key: "setModuleName",
	    value: function setModuleName(val) {
	      this.setOptions("moduleName", notCommon$1.lowerFirstLetter(val));
	      this.updateAutoName();
	      return this;
	    }
	    /**
	     *  Returns module name
	     *  @return  {string} module name
	     */
	  }, {
	    key: "getModuleName",
	    value: function getModuleName() {
	      return this.getOptions("moduleName");
	    }

	    /**
	     *  Returns this module path prefix
	     *  @return {string}  path to module dir
	     */
	  }, {
	    key: "getModulePrefix",
	    value: function getModulePrefix() {
	      return [notCommon$1.getApp().getOptions("paths.modules"), this.getModuleName()].join("/");
	    }

	    /**
	     *  Returns this model URL with URL prefix
	     *  @return {string}  url path
	     */
	  }, {
	    key: "getModelURL",
	    value: function getModelURL() {
	      return notCommon$1.buildURL({
	        prefix: this.getURLPrefix(),
	        module: this.getModuleName(),
	        model: this.getModelName()
	      });
	    }

	    /**
	     *  Returns this model action URL with URL prefix
	     * @param  {string}   id       some identificator of model
	     * @param  {string}   action   action name
	     *  @return {string}  url path
	     */
	  }, {
	    key: "getModelActionURL",
	    value: function getModelActionURL(id, action = "") {
	      return notCommon$1.buildURL({
	        prefix: this.getURLPrefix(),
	        module: this.getModuleName(),
	        model: this.getModelName(),
	        id,
	        action
	      });
	    }

	    /**
	     * Creates url from value content
	     * @param {object}  val
	     **/
	  }, {
	    key: "buildURL",
	    value: function buildURL(val) {
	      return notCommon$1.buildURL(val);
	    }

	    /**
	     *  Updates working name
	     *  @return {notController} this
	     */
	  }, {
	    key: "updateAutoName",
	    value: function updateAutoName() {
	      if (this.getOptions("autoName", OPT_DEFAULT_AUTO_NAME)) ;
	      return this;
	    }

	    /**
	     *  Sets object name
	     *  @param {string} val name of the object
	     *  @return {notController} this
	     */
	  }, {
	    key: "setName",
	    value: function setName(val) {
	      this.setWorking("name", val);
	      this.setOptions("autoName", false);
	      return this;
	    }

	    /**
	     *  Gets object name
	     *  @return {string}
	     */
	  }, {
	    key: "getName",
	    value: function getName() {
	      return this.getWorking("name");
	    }

	    /**
	     *  Preload records from server, using listAll method,
	     *  returns Promise
	     *  @param {object}  list  map of preloaded records
	     *  @return {Promise}
	     */
	  }, {
	    key: "preloadLib",
	    value: function preloadLib(list = {}) {
	      var _this2 = this;
	      return new Promise(function (resolve, reject) {
	        if (typeof list !== "object") {
	          resolve(undefined);
	        } else {
	          _this2.setWorking("loading", []);
	          for (let t in list) {
	            _this2.getWorking("loading").push(list[t]);
	            _this2.make[list[t]]({}).$listAll().then(function (data) {
	              if (!_this2.getOptions("libs")) {
	                _this2.setOptions("libs", {});
	              }
	              _this2.getOptions("libs")[t] = data;
	              if (_this2.getWorking("loading").indexOf(list[t]) > -1) {
	                _this2.getWorking("loading").splice(_this2.getWorking("loading").indexOf(list[t]), 1);
	              }
	              if (_this2.getWorking("loading").length === 0) {
	                resolve(undefined);
	              }
	            }).catch(function (err) {
	              _this2.report(err);
	              reject();
	            });
	          }
	          if (_this2.getWorking("loading").length === 0) {
	            resolve(undefined);
	          }
	        }
	      });
	    }

	    /**
	     * emits afterRender event
	     */
	  }, {
	    key: "onAfterRender",
	    value: function onAfterRender() {
	      this.emit("afterRender");
	    }

	    /**
	     *  Transform route name in action name
	     *  @param {String}   name tranform action name
	     *  @return {String}
	     */
	  }, {
	    key: "getActionName",
	    value: function getActionName(name = OPT_DEFAULT_ACTION_NAME) {
	      return "run" + notCommon$1.capitalizeFirstLetter(name);
	    }

	    /**
	     *  Get default controller action name
	     *  @return {String} default action from options
	     */
	  }, {
	    key: "getDefaultActionName",
	    value: function getDefaultActionName() {
	      return this.getActionName(this.getOptions("defaultAction", OPT_DEFAULT_ACTION_NAME));
	    }

	    /**
	     *  Route params into specific run[Route_name] function
	     *  @param {array}   params   controller input params
	     *  @return {undefined}
	     */
	  }, {
	    key: "route",
	    value: function route(params) {
	      let [routerName, ...subParams] = params,
	        actionName = this.getActionName(routerName ? routerName : OPT_DEFAULT_ACTION_NAME);
	      if (typeof this[actionName] === "function") {
	        this.setCurrentAction(actionName);
	        this[actionName](subParams);
	      } else if (this[this.getDefaultActionName()]) {
	        this.setCurrentAction(this.getDefaultActionName());
	        this[this.getDefaultActionName()](subParams);
	      } else {
	        this.setCurrentAction(undefined);
	        this.error && this.error("No action in router", params);
	      }
	    }

	    /**
	     * Sets working action
	     * @params {string} actionName current action name
	     */
	  }, {
	    key: "setCurrentAction",
	    value: function setCurrentAction(actionName) {
	      this.setWorking("action", actionName);
	    }

	    /**
	     * Gets working action
	     * @returns {string} current action name
	     */
	  }, {
	    key: "getCurrentAction",
	    value: function getCurrentAction() {
	      return this.getWorking("action");
	    }

	    /**
	     *  Return application options
	     *  @return {object}
	     */
	  }, {
	    key: "getAppOptions",
	    value: function getAppOptions() {
	      try {
	        return this.getApp().getOptions();
	      } catch (e) {
	        this.error && this.error(e);
	      }
	    }

	    /**
	     *  Returns module options
	     *  @param  {string}   [moduleName]    name of the module which options requested
	     *  @return {object}
	     */
	  }, {
	    key: "getModuleOptions",
	    value: function getModuleOptions(moduleName) {
	      try {
	        return this.getApp().getOptions(["modules", moduleName || this.getModuleName()].join("."));
	      } catch (e) {
	        this.error && this.error(e);
	      }
	    }

	    /**
	     *  Returns module services
	     *  @param  {string}   moduleName    name of the module which services requested
	     *  @return {object}
	     */
	  }, {
	    key: "getServices",
	    value: function getServices(moduleName) {
	      try {
	        return this.getApp().getOptions(["services", moduleName || this.getModuleName()].join("."));
	      } catch (e) {
	        this.error && this.error(e);
	      }
	    }

	    /**
	     *  Returns module components
	     *  @param  {string}   moduleName    name of the module which components requested
	     *  @return {object}
	     */
	  }, {
	    key: "getComponents",
	    value: function getComponents(moduleName) {
	      try {
	        return this.getApp().getOptions(["components", moduleName || this.getModuleName()].join("."));
	      } catch (e) {
	        this.error && this.error(e);
	      }
	    }

	    /**
	     *  Refreshes current URL, re-run all action
	     *  @param {number} timeout time to wait in ms
	     */
	  }, {
	    key: "refresh",
	    value: function refresh(timeout = 0) {
	      this.app?.getWorking("router").refresh(timeout);
	    }

	    /**
	     * Returns path pattern for router
	     * @params {number} [0] paramsCount   number of params
	     * @return {string}  pattern for controller supported url
	     */
	  }, {
	    key: "getRouter",
	    value:
	    /**
	     * Returns Application router
	     * @returns {import('./router.js').default}
	     */
	    function getRouter() {
	      return this.app?.getWorking("router");
	    }

	    /**
	     * Changes location to `url` after `delay` ms
	     * @param {string} url
	     * @param {number|string}   delay   number in ms or name of delay
	     */
	  }, {
	    key: "navigateWithDelay",
	    value: function navigateWithDelay(url, delay = NAVIGATION_DELAY_DEFAULT, doBefore = function () {}) {
	      return this.getRouter().navigateWithDelay(url, delay, doBefore);
	    }

	    /**
	     * Changes location to `url`
	     * @param {string} url
	     */
	  }, {
	    key: "navigate",
	    value: function navigate(url) {
	      return this.getRouter().navigate(url);
	    }

	    /**
	     *  Navigating to this controller main model `action` with provided `id`,
	     *  empty `id` will be dropped from resulting url
	     *
	     * @param {string} id
	     * @param {string} [action=""]
	     * @param {number} [delay=0]            delay in ms before navigate
	     * @param   {function}  [doBefore]      will executed only if delayed after delay but before navigate
	     * @return {*}
	     * @memberof notController
	     */
	  }, {
	    key: "navigateAction",
	    value: function navigateAction(id, action = "", delay = 0, doBefore = function () {}) {
	      return this.navigateModuleAction(this.getModuleName(), this.getModelName(), id, action, delay, doBefore);
	    }

	    /**
	     *  Navigating to this controller module model of `modelName` `action` with provided `id`,
	     *  empty `id` will be dropped from resulting url
	     *
	     * @param {string} modelName
	     * @param {string} id
	     * @param {string} [action=""]
	     * @param {number} [delay=0]            delay in ms before navigate
	     * @param   {function}  [doBefore]      will executed only if delayed after delay but before navigate
	     * @return {*}
	     * @memberof notController
	     */
	  }, {
	    key: "navigateModelAction",
	    value: function navigateModelAction(modelName, id, action = "", delay = 0, doBefore = function () {}) {
	      return this.navigateModuleAction(this.getModuleName(), modelName, id, action, delay, doBefore);
	    }

	    /**
	     *  Navigating to `moduleName` `modelName` `action` with provided `id`,
	     *  empty `id` will be dropped from resulting url
	     *
	     * @param {string} moduleName
	     * @param {string} modelName
	     * @param {string} id
	     * @param {string} [action=""]
	     * @param {number} [delay=0]            delay in ms before navigate
	     * @param   {function}  [doBefore]      will executed only if delayed after delay but before navigate
	     * @return {*}
	     * @memberof notController
	     */
	  }, {
	    key: "navigateModuleAction",
	    value: function navigateModuleAction(moduleName, modelName, id, action = "", delay = 0, doBefore = function () {}) {
	      if (delay) {
	        return this.getRouter().navigateWithDelay(notCommon$1.buildURL({
	          prefix: this.getURLPrefix(),
	          module: moduleName,
	          model: modelName,
	          id,
	          action
	        }), delay, doBefore);
	      } else {
	        return this.getRouter().navigate(notCommon$1.buildURL({
	          prefix: this.getURLPrefix(),
	          module: moduleName,
	          model: modelName,
	          id,
	          action
	        }));
	      }
	    }

	    /**
	     * Creates menu item from child class constructor
	     *
	     * @static
	     * @param {notController} childConstructor
	     * @return {Array<import('./types.js').NavigationItem>}
	     * @memberof notController
	     */
	  }], [{
	    key: "MODULE_NAME",
	    get:
	    /**
	     *  @static {string} MODULE_NAME  name of module
	     */
	    function () {
	      return OPT_DEFAULT_MODULE_NAME;
	    }
	    /**
	     *  @static {string} MODEL_NAME  name of model
	     */
	  }, {
	    key: "MODEL_NAME",
	    get: function () {
	      return "ModelName";
	    }
	  }, {
	    key: "LABELS",
	    get: function () {
	      return {
	        plural: `${OPT_DEFAULT_MODULE_NAME}:model_label_plural`,
	        single: `${OPT_DEFAULT_MODULE_NAME}:model_label_single`
	      };
	    }
	  }, {
	    key: "getControllerRoute",
	    value: function getControllerRoute(paramsCount = 0) {
	      let path = [];
	      if (this.MODULE_NAME && this.MODULE_NAME.length > 0) {
	        path.push(notCommon$1.lowerFirstLetter(this.MODULE_NAME));
	      }
	      if (this.MODEL_NAME && this.MODEL_NAME.length > 0) {
	        path.push(notCommon$1.lowerFirstLetter(this.MODEL_NAME));
	      }
	      path = [path.join("/")];
	      for (let i = 0; i < paramsCount; i++) {
	        path.push("/([^/]+)");
	      }
	      return path.join("");
	    }

	    /**
	     * Returns path patterns for router
	     * @params {number} [0] paramsDeep   how many paths with params in the end
	     * @return {string[]}  patterns for controller supported url in order of simplification
	     */
	  }, {
	    key: "getControllerRoutes",
	    value: function getControllerRoutes(paramsDeep = 0) {
	      let routes = [this.getControllerRoute(0)];
	      for (let i = 0; i < paramsDeep; i++) {
	        routes.unshift(this.getControllerRoute(i + 1));
	      }
	      return routes;
	    }

	    /**
	     * Returns router rule.
	     * @returns {Object} router rule {paths:String[], controller:notController}
	     */
	  }, {
	    key: "getRoutes",
	    value: function getRoutes() {
	      return {
	        paths: this.getControllerRoutes(this.PARAMS_LENGTH),
	        controller: this
	      };
	    }
	  }, {
	    key: "getCommonMenu",
	    value: function getCommonMenu(childConstructor) {
	      return [{
	        // @ts-ignore
	        section: childConstructor.MODULE_NAME,
	        // @ts-ignore
	        title: childConstructor.LABELS.plural,
	        url: `/${notCommon$1.lowerFirstLetter(
        // @ts-ignore
        childConstructor.MODULE_NAME
        // @ts-ignore
        )}/${notCommon$1.lowerFirstLetter(childConstructor.MODEL_NAME)}`
	      }];
	    }
	  }, {
	    key: "getMenu",
	    value: function getMenu() {}
	  }]);
	}(notBase);
	/**
	 *  @static {number} PARAMS_LENGTH  number of params in URL path
	 */
	_defineProperty(notController, "PARAMS_LENGTH", 2);

	const ALL = {};
	function exist(key) {
	  return Object.hasOwn(ALL, key);
	}
	function get(key) {
	  if (exist(key)) {
	    return ALL[key];
	  } else {
	    return false;
	  }
	}
	function create(key, props = {
	  raw: [],
	  filtered: [],
	  selected: {}
	}) {
	  if (!exist(key)) {
	    if (Object.keys(props).length > 0) {
	      ALL[key] = {};
	      Object.keys(props).forEach(function (name) {
	        ALL[key][name] = writable(props[name]);
	      });
	    } else {
	      throw new Error("store's props wasn't specified");
	    }
	  }
	  return ALL[key];
	}

	function onInput(ev, id, fieldname, dispatch) {
		let data = {
			id: id(),
			field: fieldname(),
			value: ev.target.type === 'checkbox' ? ev.target.checked : ev.target.value
		};

		dispatch('change', data);
		return true;
	}

	var root$b = template(`<input type="checkbox"> <label class="label"></label>`, 1);

	function Ui_switch($$anchor, $$props) {
		push($$props, true);

		let dispatch = createEventDispatcher();

		/**
		 * @typedef {Object} Props
		 * @property {string} [id]
		 * @property {boolean} [value]
		 * @property {string} [fieldname]
		 * @property {boolean} [disabled]
		 * @property {boolean} [readonly]
		 * @property {string} [styling]
		 */
		/** @type {Props} */
		let id = prop($$props, "id", 3, ''),
			value = prop($$props, "value", 15, false),
			fieldname = prop($$props, "fieldname", 3, 'switch'),
			disabled = prop($$props, "disabled", 3, false),
			readonly = prop($$props, "readonly", 3, false),
			styling = prop($$props, "styling", 3, " is-rounded is-success ");

		var fragment = root$b();
		var input = first_child(fragment);

		remove_input_defaults(input);
		input.__input = [onInput, id, fieldname, dispatch];

		var label = sibling(input, 2);

		template_effect(() => {
			set_class(input, `switch ${styling() ?? ""}`);
			set_attribute(input, "id", `edit-table-row-cell-inline-switch-${fieldname() ?? ""}-${id() ?? ""}`);
			set_attribute(input, "name", fieldname());
			input.readOnly = readonly();
			input.disabled = disabled();
			set_attribute(label, "for", `edit-table-row-cell-inline-switch-${fieldname() ?? ""}-${id() ?? ""}`);
		});

		bind_checked(input, value);
		append($$anchor, fragment);
		pop();
	}

	delegate(["input"]);

	var root_3$5 = template(`<a> </a>`);
	var root_2$5 = template(`<div class="mx-1 tags has-addons svelte-38rpfk"><span class="tag"> </span> <span><!></span></div>`);
	var root_6$5 = template(`<a> </a>`);
	var root_5$5 = template(`<span><!></span>`);

	function Ui_tags($$anchor, $$props) {
		/*
		  import { createEventDispatcher } from 'svelte';
		  let dispatch = createEventDispatcher();
		*/
		/**
		 * @typedef {Object} Props
		 * @property {any} [values] - item = {
		id,        //unique
		title,     //some text
		value,      //for double tags
		color       //coloring
		}
		 */
		/** @type {Props} */
		let values = prop($$props, "values", 19, () => []);
		var fragment = comment();
		var node = first_child(fragment);

		each(node, 17, values, (item) => item.id, ($$anchor, item) => {
			var fragment_1 = comment();
			var node_1 = first_child(fragment_1);

			{
				var consequent_1 = ($$anchor) => {
					var div = root_2$5();
					var span = child(div);
					var text$1 = child(span, true);

					reset(span);

					var span_1 = sibling(span, 2);
					var node_2 = child(span_1);

					{
						var consequent = ($$anchor) => {
							var a = root_3$5();
							var text_1 = child(a, true);

							reset(a);

							template_effect(() => {
								set_attribute(a, "href", get$2(item).url);
								set_class(a, `${get$2(item).urlCustomClasses ?? ""} svelte-38rpfk`);
								set_text(text_1, get$2(item).value);
							});

							append($$anchor, a);
						};

						var alternate = ($$anchor) => {
							var text_2 = text();

							template_effect(() => set_text(text_2, get$2(item).value));
							append($$anchor, text_2);
						};

						if_block(node_2, ($$render) => {
							if (get$2(item).url) $$render(consequent); else $$render(alternate, false);
						});
					}

					reset(span_1);
					reset(div);

					template_effect(() => {
						set_text(text$1, get$2(item).title);
						set_class(span_1, `tag is-${get$2(item).color ?? ""} ${get$2(item).customClasses ?? ""} svelte-38rpfk`);
					});

					append($$anchor, div);
				};

				var alternate_2 = ($$anchor) => {
					var span_2 = root_5$5();
					var node_3 = child(span_2);

					{
						var consequent_2 = ($$anchor) => {
							var a_1 = root_6$5();
							var text_3 = child(a_1, true);

							reset(a_1);

							template_effect(() => {
								set_attribute(a_1, "href", get$2(item).url);
								set_class(a_1, `${get$2(item).urlCustomClasses ?? ""} svelte-38rpfk`);
								set_text(text_3, get$2(item).title);
							});

							append($$anchor, a_1);
						};

						var alternate_1 = ($$anchor) => {
							var text_4 = text();

							template_effect(() => set_text(text_4, get$2(item).title));
							append($$anchor, text_4);
						};

						if_block(node_3, ($$render) => {
							if (get$2(item).url) $$render(consequent_2); else $$render(alternate_1, false);
						});
					}

					reset(span_2);
					template_effect(() => set_class(span_2, `mx-1 tag is-${get$2(item).color ?? ""} ${get$2(item).customClasses ?? ""} svelte-38rpfk`));
					append($$anchor, span_2);
				};

				if_block(node_1, ($$render) => {
					if (Object.hasOwn(get$2(item), "value")) $$render(consequent_1); else $$render(alternate_2, false);
				});
			}

			append($$anchor, fragment_1);
		});

		append($$anchor, fragment);
	}

	var root$a = template(`<td><!></td>`);

	function NotTableCell($$anchor, $$props) {
		push($$props, true);

		const $$stores = setup_stores();
		const $LOCALE = () => store_get(LOCALE, "$LOCALE", $$stores);
		let title = state("");

		onMount(() => {
			if (typeof field().type === "undefined") {
				if (Object.hasOwn(field(), "titlePath")) {
					set(title, proxy(notPath.get(field().titlePath, item(), helpers())));
				} else if (Object.hasOwn(field(), "titleComposer") && typeof field().titleComposer === "function") {
					set(title, proxy(field().titleComposer(item(), helpers())));
				} else {
					set(title, proxy(notPath.get(field().path, item(), helpers())));
				}
			}
		});

		let getItemId = prop($$props, "getItemId", 3, (item) => item._id),
			field = prop($$props, "field", 19, () => ({})),
			item = prop($$props, "item", 19, () => ({})),
			helpers = prop($$props, "helpers", 19, () => ({}));

		var td = root$a();
		var node = child(td);

		{
			var consequent = ($$anchor) => {
				var values = derived(() => notPath.get(field().path, item(), helpers()));

				Ui_links($$anchor, {
					get values() {
						return get$2(values);
					}
				});
			};

			var alternate_7 = ($$anchor) => {
				var fragment_1 = comment();
				var node_1 = first_child(fragment_1);

				{
					var consequent_1 = ($$anchor) => {
						var values_1 = derived(() => notPath.get(field().path, item(), helpers()));

						Ui_buttons($$anchor, {
							get values() {
								return get$2(values_1);
							}
						});
					};

					var alternate_6 = ($$anchor) => {
						var fragment_3 = comment();
						var node_2 = first_child(fragment_3);

						{
							var consequent_2 = ($$anchor) => {
								var values_2 = derived(() => notPath.get(field().path, item(), helpers()));

								Ui_images($$anchor, {
									get values() {
										return get$2(values_2);
									}
								});
							};

							var alternate_5 = ($$anchor) => {
								var fragment_5 = comment();
								var node_3 = first_child(fragment_5);

								{
									var consequent_3 = ($$anchor) => {
										var values_3 = derived(() => notPath.get(field().path, item(), helpers()));

										Ui_booleans($$anchor, {
											get values() {
												return get$2(values_3);
											}
										});
									};

									var alternate_4 = ($$anchor) => {
										var fragment_7 = comment();
										var node_4 = first_child(fragment_7);

										{
											var consequent_4 = ($$anchor) => {
												var values_4 = derived(() => notPath.get(field().path, item(), helpers()));

												Ui_tags($$anchor, {
													get values() {
														return get$2(values_4);
													}
												});
											};

											var alternate_3 = ($$anchor) => {
												var fragment_9 = comment();
												var node_5 = first_child(fragment_9);

												{
													var consequent_5 = ($$anchor) => {
														var id = derived(() => getItemId()(item()));
														var value = derived(() => notPath.get(field().path, item(), helpers()));

														Ui_switch($$anchor, {
															get id() {
																return get$2(id);
															},
															get fieldname() {
																return field().path;
															},
															get value() {
																return get$2(value);
															},
															get disabled() {
																return field().disabled;
															},
															get readonly() {
																return field().readonly;
															},
															$$events: {
																change(...$$args) {
																	field().onChange?.apply(this, $$args);
																}
															}
														});
													};

													var alternate_2 = ($$anchor) => {
														var fragment_11 = comment();
														var node_6 = first_child(fragment_11);

														{
															var consequent_6 = ($$anchor) => {
																var fragment_12 = comment();
																var node_7 = first_child(fragment_12);
																var id_1 = derived(() => getItemId()(item()));
																var value_1 = derived(() => notPath.get(field().path, item(), helpers()));

																component(node_7, () => field().component, ($$anchor, $$component) => {
																	$$component($$anchor, spread_props(
																		{
																			get id() {
																				return get$2(id_1);
																			},
																			get fieldname() {
																				return field().path;
																			},
																			get disabled() {
																				return field().disabled;
																			},
																			get readonly() {
																				return field().readonly;
																			},
																			get value() {
																				return get$2(value_1);
																			}
																		},
																		() => field().options,
																		{
																			$$events: {
																				change(...$$args) {
																					field().onChange?.apply(this, $$args);
																				}
																			}
																		}
																	));
																});

																append($$anchor, fragment_12);
															};

															var alternate_1 = ($$anchor) => {
																var fragment_13 = comment();
																var node_8 = first_child(fragment_13);

																{
																	var consequent_7 = ($$anchor) => {
																		var text$1 = text();

																		template_effect(() => set_text(text$1, notCommon$1.strLengthCap(notPath.get(field().path, item(), helpers()), field().maxLength)));
																		append($$anchor, text$1);
																	};

																	var alternate = ($$anchor) => {
																		var text_1 = text();

																		template_effect(() => set_text(text_1, $LOCALE()[notPath.get(field().path, item(), helpers())]));
																		append($$anchor, text_1);
																	};

																	if_block(
																		node_8,
																		($$render) => {
																			if (field() && typeof field() !== "undefined" && !isNaN(field().maxLength) && field().maxLength) $$render(consequent_7); else $$render(alternate, false);
																		},
																		true
																	);
																}

																append($$anchor, fragment_13);
															};

															if_block(
																node_6,
																($$render) => {
																	if (field().component) $$render(consequent_6); else $$render(alternate_1, false);
																},
																true
															);
														}

														append($$anchor, fragment_11);
													};

													if_block(
														node_5,
														($$render) => {
															if (field().type === "switch") $$render(consequent_5); else $$render(alternate_2, false);
														},
														true
													);
												}

												append($$anchor, fragment_9);
											};

											if_block(
												node_4,
												($$render) => {
													if (field().type === "tag") $$render(consequent_4); else $$render(alternate_3, false);
												},
												true
											);
										}

										append($$anchor, fragment_7);
									};

									if_block(
										node_3,
										($$render) => {
											if (field().type === "boolean") $$render(consequent_3); else $$render(alternate_4, false);
										},
										true
									);
								}

								append($$anchor, fragment_5);
							};

							if_block(
								node_2,
								($$render) => {
									if (field().type === "image") $$render(consequent_2); else $$render(alternate_5, false);
								},
								true
							);
						}

						append($$anchor, fragment_3);
					};

					if_block(
						node_1,
						($$render) => {
							if (field().type === "button") $$render(consequent_1); else $$render(alternate_6, false);
						},
						true
					);
				}

				append($$anchor, fragment_1);
			};

			if_block(node, ($$render) => {
				if (field().type === "link") $$render(consequent); else $$render(alternate_7, false);
			});
		}

		reset(td);

		template_effect(() => {
			set_class(td, (field().hideOnMobile ? " is-hidden-touch " : "") + (field().classes ? ` ${field().classes} ` : ""));
			set_attribute(td, "title", get$2(title));
		});

		append($$anchor, td);
		pop();
	}

	function onRowSelect(
		e,
		dispatch,
		itemId,
		$selectedList,
		selectedList
	) {
		e.preventDefault();

		dispatch('rowSelectChange', {
			id: get$2(itemId),
			selected: $selectedList()[get$2(itemId)]
		});

		return false;
	}

	var root_1$8 = template(`<td><input type="checkbox" placeholder=""></td>`);
	var root$9 = template(`<tr><!><!></tr>`);

	function NotTableRow($$anchor, $$props) {
		push($$props, true);

		const $$stores = setup_stores();
		const $selectedList = () => store_get(selectedList, "$selectedList", $$stores);
		let dispatch = createEventDispatcher();

		let itemId = state(undefined),
			selectedList;

		onMount(() => {
			set(itemId, proxy(getItemId()(item())));
			selectedList = get($$props.id).selected;
		});

		/**
		 * @typedef {Object} Props
		 * @property {any} id
		 * @property {any} [item]
		 * @property {any} [helpers]
		 * @property {any} [fields]
		 * @property {boolean} [showSelect]
		 * @property {any} [getItemId]
		 */
		/** @type {Props} */
		let item = prop($$props, "item", 19, () => ({})),
			helpers = prop($$props, "helpers", 19, () => ({})),
			fields = prop($$props, "fields", 19, () => []),
			showSelect = prop($$props, "showSelect", 3, false),
			getItemId = prop($$props, "getItemId", 3, () => {});

		var tr = root$9();
		var node = child(tr);

		{
			var consequent = ($$anchor) => {
				var td = root_1$8();
				var input = child(td);

				remove_input_defaults(input);
				template_effect(() => set_attribute(input, "id", `table-row-select-${getItemId()(item()) ?? ""}`));
				template_effect(() => set_attribute(input, "data-id", getItemId()(item())));
				template_effect(() => set_attribute(input, "name", `row_selected_${getItemId()(item()) ?? ""}`));

				input.__change = [
					onRowSelect,
					dispatch,
					itemId,
					$selectedList,
					selectedList
				];

				reset(td);
				bind_checked(input, () => $selectedList()[get$2(itemId)], ($$value) => store_mutate(selectedList, untrack($selectedList)[get$2(itemId)] = $$value, untrack($selectedList)));
				append($$anchor, td);
			};

			if_block(node, ($$render) => {
				if (showSelect() && $selectedList()) $$render(consequent);
			});
		}

		var node_1 = sibling(node);

		each(node_1, 17, fields, index$d, ($$anchor, field) => {
			NotTableCell($$anchor, {
				get field() {
					return get$2(field);
				},
				get helpers() {
					return helpers();
				},
				get item() {
					return item();
				},
				get getItemId() {
					return getItemId();
				}
			});
		});

		reset(tr);
		append($$anchor, tr);
		pop();
	}

	delegate(["change"]);

	function onSearchInput(ev, dispatch) {
		try {
			let data = ev.currentTarget.value.trim();

			dispatch("searchChange", data);
		} catch {
			return;
		}
	}

	function goPrev(_, dispatch) {
		dispatch("goToPrevPage");
	}

	function goNext(__1, dispatch) {
		dispatch("goToNextPage");
	}

	function goTo(e, dispatch) {
		e.preventDefault();

		let el = e.target;

		dispatch("goToPage", parseInt(el.dataset.page));
		return false;
	}

	function onSelectAll(__2, $$props, items, getItemId, selectAll) {
		get($$props.id).selected.update((value) => {
			items().forEach((item) => {
				value[getItemId()(item)] = selectAll();
			});

			return value;
		});
	}

	var root_1$7 = template(`<div class="field is-grouped"><!></div>`);
	var root_2$4 = template(`<div class="field is-grouped"><!></div>`);
	var root_5$4 = template(`<div class="field"><div class="control"><input class="input" type="text" placeholder="Поиск"></div></div>`);
	var root_6$4 = template(`<th><input type="checkbox" id="table-row-select-page" placeholder="" name="row_selected_all"></th>`);
	var root_7$2 = template(`<th><!></th>`);
	var root_14$1 = template(`<a href="" class="pagination-link is-current" aria-current="page"> </a>`);
	var root_15$1 = template(`<a href="" class="pagination-link"> </a>`);
	var root_13 = template(`<li><!></li>`);
	var root_11$1 = template(`<nav class="pagination is-centered" aria-label="pagination"><a href="" class="pagination-previous">Назад</a> <a href="" class="pagination-next">Вперед</a> <ul class="pagination-list"><!></ul></nav>`);
	var root$8 = template(`<!> <!> <!> <table class="table"><thead><tr><!><!></tr></thead><tbody></tbody></table> <!>`, 1);

	function NotTable($$anchor, $$props) {
		push($$props, true);

		const $$stores = setup_stores();
		const $LOCALE = () => store_get(LOCALE, "$LOCALE", $$stores);
		let dispatch = createEventDispatcher();

		/**
		 * @typedef {Object} Props
		 * @property {any} id
		 * @property {any} filterUI
		 * @property {any} [helpers]
		 * @property {any} [state]
		 * @property {any} [filter]
		 * @property {any} [sorter]
		 * @property {any} [fields]
		 * @property {any} [selected]
		 * @property {any} [items]
		 * @property {any} [actions]
		 * @property {any} [links]
		 * @property {string} [search]
		 * @property {boolean} [showSearch]
		 * @property {boolean} [showSelect]
		 * @property {boolean} [selectAll]
		 * @property {any} [getItemId]
		 */
		/** @type {Props} */
		let helpers = prop($$props, "helpers", 19, () => ({})),
			state = prop($$props, "state", 31, () => proxy({})),
			filter = prop($$props, "filter", 31, () => proxy({})),
			sorter = prop($$props, "sorter", 31, () => proxy({})),
			fields = prop($$props, "fields", 19, () => []),
			selected = prop($$props, "selected", 31, () => proxy({})),
			items = prop($$props, "items", 31, () => proxy([])),
			actions = prop($$props, "actions", 19, () => []),
			links = prop($$props, "links", 19, () => []),
			search = prop($$props, "search", 15, ""),
			showSearch = prop($$props, "showSearch", 3, true),
			showSelect = prop($$props, "showSelect", 3, true),
			selectAll = prop($$props, "selectAll", 15, false),
			getItemId = prop($$props, "getItemId", 3, (item) => item._id);

		onMount(() => {
			if (showSelect()) {
				get($$props.id).selected.subscribe((value) => {
					selected(value);
				});
			}

			get($$props.id).refined.subscribe((value) => {
				items(value);

				if (showSelect()) {
					for (let itemId in selected()) {
						if (!items().some((item) => getItemId()(item) === itemId)) {
							delete selected()[itemId];
						} else {
							if (!Object.hasOwn(selected(), itemId)) {
								selected(selected()[itemId] = false, true);
							}
						}
					}

					selected(selected());
				}
			});

			get($$props.id).state.subscribe((value) => {
				state(value);
			});
		});

		function onSearchChange({ detail }) {
			try {
				dispatch("searchChange", detail);
			} catch {
				return;
			}
		}

		function onFilterChange({ detail }) {
			try {
				dispatch("filterChange", detail);
			} catch {
				return;
			}
		}

		function onFieldHeadClick(field) {
			const propPath = field.path.substring(1);

			if (Object.hasOwn(sorter(), propPath)) {
				sorter(sorter()[propPath] = parseInt(sorter()[propPath]) * -1, true);
			} else {
				sorter({ [propPath]: 1 });
			}

			dispatch("sorterChange", sorter());
		}

		var fragment = root$8();
		var node = first_child(fragment);

		{
			var consequent = ($$anchor) => {
				var div = root_1$7();
				var node_1 = child(div);

				Ui_links(node_1, {
					get values() {
						return links();
					}
				});

				reset(div);
				append($$anchor, div);
			};

			if_block(node, ($$render) => {
				if (links().length) $$render(consequent);
			});
		}

		var node_2 = sibling(node, 2);

		{
			var consequent_1 = ($$anchor) => {
				var div_1 = root_2$4();
				var node_3 = child(div_1);

				Ui_buttons(node_3, {
					get values() {
						return actions();
					}
				});

				reset(div_1);
				append($$anchor, div_1);
			};

			if_block(node_2, ($$render) => {
				if (actions().length) $$render(consequent_1);
			});
		}

		var node_4 = sibling(node_2, 2);

		{
			var consequent_3 = ($$anchor) => {
				var fragment_1 = comment();
				var node_5 = first_child(fragment_1);

				{
					var consequent_2 = ($$anchor) => {
						var fragment_2 = comment();
						const SvelteComponent = derived(() => $$props.filterUI);
						var node_6 = first_child(fragment_2);

						component(node_6, () => get$2(SvelteComponent), ($$anchor, $$component) => {
							$$component($$anchor, {
								get filter() {
									return filter();
								},
								set filter($$value) {
									filter($$value);
								},
								$$events: {
									change: onFilterChange,
									searchChange: onSearchChange
								}
							});
						});

						append($$anchor, fragment_2);
					};

					var alternate = ($$anchor) => {
						var div_2 = root_5$4();
						var div_3 = child(div_2);
						var input = child(div_3);

						remove_input_defaults(input);
						input.__input = [onSearchInput, dispatch];
						reset(div_3);
						reset(div_2);
						bind_value(input, search);
						append($$anchor, div_2);
					};

					if_block(node_5, ($$render) => {
						if ($$props.filterUI) $$render(consequent_2); else $$render(alternate, false);
					});
				}

				append($$anchor, fragment_1);
			};

			if_block(node_4, ($$render) => {
				if (showSearch()) $$render(consequent_3);
			});
		}

		var table = sibling(node_4, 2);
		var thead = child(table);
		var tr = child(thead);
		var node_7 = child(tr);

		{
			var consequent_4 = ($$anchor) => {
				var th = root_6$4();
				var input_1 = child(th);

				remove_input_defaults(input_1);

				input_1.__change = [
					onSelectAll,
					$$props,
					items,
					getItemId,
					selectAll
				];

				reset(th);
				bind_checked(input_1, selectAll);
				append($$anchor, th);
			};

			if_block(node_7, ($$render) => {
				if (showSelect()) $$render(consequent_4);
			});
		}

		var node_8 = sibling(node_7);

		each(node_8, 17, fields, index$d, ($$anchor, field) => {
			var th_1 = root_7$2();
			const propPath = derived(() => get$2(field).path.substring(1));
			var event_handler = derived(() => onFieldHeadClick(get$2(field)));

			th_1.__click = function (...$$args) {
				get$2(event_handler)?.apply(this, $$args);
			};

			var node_9 = child(th_1);

			{
				var consequent_5 = ($$anchor) => {
					var font = derived(() => sorter()[get$2(propPath)] > 0 ? "sort-up" : "sort-down");

					Ui_icon_font($$anchor, {
						get font() {
							return get$2(font);
						},
						get title() {
							return get$2(field).title;
						},
						pointable: true
					});
				};

				var alternate_1 = ($$anchor) => {
					var text$1 = text();

					template_effect(() => set_text(text$1, $LOCALE()[get$2(field).title]));
					append($$anchor, text$1);
				};

				if_block(node_9, ($$render) => {
					if (get$2(field).sortable && Object.hasOwn(sorter(), get$2(propPath))) $$render(consequent_5); else $$render(alternate_1, false);
				});
			}

			reset(th_1);
			template_effect(() => set_class(th_1, (get$2(field).hideOnMobile ? " is-hidden-touch" : "") + (get$2(field).sortable ? " is-clickable" : "")));
			append($$anchor, th_1);
		});

		reset(tr);
		reset(thead);

		var tbody = sibling(thead);

		each(tbody, 21, items, (item) => item._id, ($$anchor, item) => {
			NotTableRow($$anchor, {
				get id() {
					return $$props.id;
				},
				get item() {
					return get$2(item);
				},
				get fields() {
					return fields();
				},
				get helpers() {
					return helpers();
				},
				get showSelect() {
					return showSelect();
				},
				get getItemId() {
					return getItemId();
				},
				$$events: {
					rowSelectChange($$arg) {
						bubble_event.call(this, $$props, $$arg);
					}
				}
			});
		});

		reset(tbody);
		reset(table);

		var node_10 = sibling(table, 2);

		{
			var consequent_8 = ($$anchor) => {
				var nav = root_11$1();
				var a = child(nav);

				a.__click = [goPrev, dispatch];

				var a_1 = sibling(a, 2);

				a_1.__click = [goNext, dispatch];

				var ul = sibling(a_1, 2);
				var node_11 = child(ul);

				{
					var consequent_7 = ($$anchor) => {
						var fragment_6 = comment();
						var node_12 = first_child(fragment_6);

						each(node_12, 17, () => state().pagination.pages.list, index$d, ($$anchor, page) => {
							var li = root_13();
							var node_13 = child(li);

							{
								var consequent_6 = ($$anchor) => {
									var a_2 = root_14$1();
									var text_1 = child(a_2, true);

									reset(a_2);

									template_effect(() => {
										set_attribute(a_2, "aria-label", `Страница ${get$2(page).index ?? ""}`);
										set_text(text_1, get$2(page).index + 1);
									});

									append($$anchor, a_2);
								};

								var alternate_2 = ($$anchor) => {
									var a_3 = root_15$1();

									a_3.__click = [goTo, dispatch];

									var text_2 = child(a_3, true);

									reset(a_3);

									template_effect(() => {
										set_attribute(a_3, "aria-label", `Страница ${get$2(page).index ?? ""}`);
										set_attribute(a_3, "data-page", get$2(page).index);
										set_text(text_2, get$2(page).index + 1);
									});

									append($$anchor, a_3);
								};

								if_block(node_13, ($$render) => {
									if (get$2(page).active) $$render(consequent_6); else $$render(alternate_2, false);
								});
							}

							reset(li);
							append($$anchor, li);
						});

						append($$anchor, fragment_6);
					};

					if_block(node_11, ($$render) => {
						if (state().pagination && state().pagination.pages && state().pagination.pages.list) $$render(consequent_7);
					});
				}

				reset(ul);
				reset(nav);
				append($$anchor, nav);
			};

			if_block(node_10, ($$render) => {
				if (state()?.pagination?.pages?.list.length > 1) $$render(consequent_8);
			});
		}

		append($$anchor, fragment);
		pop();
	}

	delegate(["input", "change", "click"]);

	const CONST_ID_DUBLICATE_POSTFIX = "__dublicate__";
	const OPT_DEFAULT_PAGE_SIZE = 20,
	  OPT_DEFAULT_PAGE_NUMBER = 0,
	  OPT_DEFAULT_PAGE_RANGE = 6,
	  OPT_DEFAULT_SORT_DIRECTION = 1,
	  OPT_DEFAULT_SEARCH = "",
	  OPT_DEFAULT_RETURN = {},
	  OPT_DEFAULT_COMBINED = false,
	  OPT_DEFAULT_COMBINED_ACTION = "listAndCount",
	  OPT_DEFAULT_COUNT_ACTION = "count",
	  OPT_DEFAULT_LIST_ACTION = "list",
	  OPT_DEFAULT_SORT_FIELD = "_id",
	  OPT_FIELD_NAME_PRE_PROC = "preprocessor";
	const DEFAULT_OPTIONS = {
	  ui: NotTable,
	  links: [],
	  actions: [],
	  endless: false,
	  idField: "_id",
	  getItemId: function (item) {
	    return item._id;
	  }
	};
	let notTable = /*#__PURE__*/function (_EventEmitter) {
	  function notTable(input = {}) {
	    var _this;
	    _classCallCheck(this, notTable);
	    _this = _callSuper(this, notTable);
	    _this.id = "table-" + Math.random();
	    _this.options = {
	      ...DEFAULT_OPTIONS,
	      ...(input.options ? input.options : {})
	    };
	    _this.ui = {};
	    _this.data = {
	      raw: [],
	      filtered: [],
	      refined: [],
	      selected: {}
	    };
	    _this.state = {
	      pagination: {
	        items: {
	          count: 0,
	          from: 0,
	          to: 0
	        },
	        pages: {
	          count: 0,
	          from: 0,
	          to: 0,
	          current: 0,
	          list: []
	        }
	      }
	    };
	    _this.working = {};
	    _this.stores = create(_this.id, {
	      raw: [],
	      filtered: [],
	      refined: [],
	      selected: {},
	      state: _this.state,
	      working: _this.working
	    });
	    _this.stores.working.subscribe(_this.onWorkingUpdate.bind(_this));
	    //полученные из сети
	    _this.stores.raw.subscribe(_this.onRawUpdate.bind(_this));
	    //применены фильтры, сортировки и т.д.
	    _this.stores.filtered.subscribe(_this.onFilteredUpdate.bind(_this));
	    //урезаны до минимального набора, точно соотвествующего табличному формату
	    _this.stores.refined.subscribe(_this.onRefinedUpdate.bind(_this));
	    //словарь с идентификаторами выбранных строк
	    _this.stores.selected.subscribe(_this.onSelectedUpdate.bind(_this));
	    //pagination, items information
	    _this.stores.state.subscribe(_this.onStateUpdate.bind(_this));
	    if (notCommon$1.objHas(input, "data") && Array.isArray(input.data)) {
	      _this.stores.raw.update(function (val) {
	        val = input.data;
	        return val;
	      });
	    }
	    _this.setCombinedActionName(_this.getOptions("interface.combinedAction", OPT_DEFAULT_COMBINED_ACTION));
	    if (notCommon$1.objHas(_this.options, "filter")) {
	      _this.setFilter(_this.options.filter, true);
	    } else {
	      _this.resetFilter();
	    }
	    if (notCommon$1.objHas(_this.options, "pager")) {
	      _this.setPager(_this.options.pager, true);
	    } else {
	      _this.resetPager();
	    }
	    if (notCommon$1.objHas(_this.options, "sorter")) {
	      _this.setSorter(_this.options.sorter, true);
	    } else {
	      _this.resetSorter(true);
	    }
	    if (notCommon$1.objHas(_this.options, "return")) {
	      _this.setReturn(_this.options.return);
	    } else {
	      _this.setReturn();
	    }
	    if (notCommon$1.objHas(_this.options, "search")) {
	      _this.setSearch(_this.options.search, true);
	    } else {
	      _this.setSearch();
	    }
	    _this.render();
	    _this.updateData();
	    return _possibleConstructorReturn(_this, _this);
	  }
	  _inherits(notTable, _EventEmitter);
	  return _createClass(notTable, [{
	    key: "onWorkingUpdate",
	    value: function onWorkingUpdate(val) {
	      this.working = val;
	      return val;
	    }
	  }, {
	    key: "onRawUpdate",
	    value: function onRawUpdate(val) {
	      this.data.raw = val;
	      return val;
	    }
	  }, {
	    key: "onFilteredUpdate",
	    value: function onFilteredUpdate(val) {
	      this.data.filtered = val;
	      this.refineFiltered();
	      return val;
	    }
	  }, {
	    key: "onRefinedUpdate",
	    value: function onRefinedUpdate(val) {
	      this.data.refined = val;
	      this.clearSelected();
	      return val;
	    }
	  }, {
	    key: "onStateUpdate",
	    value: function onStateUpdate(val) {
	      this.state = val;
	      return val;
	    }
	  }, {
	    key: "onSearchChange",
	    value: function onSearchChange(line) {
	      if (line.length > 3) {
	        this.setSearch(line);
	      } else {
	        this.setSearch();
	      }
	    }
	  }, {
	    key: "onSorterChange",
	    value: function onSorterChange(sorter) {
	      if (sorter) {
	        this.setSorter(sorter);
	      } else {
	        this.resetSorter();
	      }
	    }
	  }, {
	    key: "onFilterChange",
	    value: function onFilterChange({
	      filter,
	      actionName
	    }) {
	      if (actionName.indexOf(OPT_DEFAULT_COMBINED_ACTION) === 0) {
	        this.setCombinedActionName(actionName);
	      }
	      if (filter) {
	        this.setFilter(filter);
	      } else {
	        this.resetFilter();
	      }
	    }
	  }, {
	    key: "onSelectedUpdate",
	    value: function onSelectedUpdate(val) {
	      this.data.selected = val;
	    }
	  }, {
	    key: "clearSelected",
	    value: function clearSelected() {
	      this.data.selected = {};
	    }
	  }, {
	    key: "getSelected",
	    value: function getSelected(object = false, store = "refined") {
	      let res = [];
	      for (let id in this.data.selected) {
	        if (this.data.selected[id]) {
	          if (object) {
	            let indx = this.data[store].findIndex(function (item) {
	              return item._id === id;
	            });
	            if (indx > -1) {
	              res.push(this.data[store][indx]);
	            }
	          } else {
	            res.push(id);
	          }
	        }
	      }
	      return res;
	    }
	  }, {
	    key: "getItemId",
	    value: function getItemId(item) {
	      return this.getOptions("getItemId", DEFAULT_OPTIONS.getItemId)(item);
	    }
	  }, {
	    key: "selectAll",
	    value: function selectAll() {
	      var _this2 = this;
	      this.stores.selected.update(function () {
	        let value = {};
	        _this2.data.filtered.forEach(function (item) {
	          value[_this2.getItemId(item)] = true;
	        });
	        return value;
	      });
	    }
	  }, {
	    key: "selectNone",
	    value: function selectNone() {
	      var _this3 = this;
	      this.stores.selected.update(function () {
	        let value = {};
	        _this3.data.filtered.forEach(function (item) {
	          value[_this3.getItemId(item)] = false;
	        });
	        return value;
	      });
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      var _this4 = this;
	      if (!this.ui.table) {
	        this.ui.table = new this.options.ui({
	          target: this.options.targetEl,
	          props: {
	            filterUI: this.getOptions("filterUI", undefined),
	            id: this.id,
	            helpers: Object.assign({}, this.getHelpers()),
	            fields: this.getOptions("fields"),
	            actions: this.getActions(),
	            links: this.getLinks(),
	            search: "",
	            showSelect: this.getOptions("showSelect"),
	            showSearch: this.getOptions("showSearch"),
	            showSort: this.getOptions("showSort"),
	            idField: this.getOptions("idField"),
	            getItemId: this.getOptions("getItemId"),
	            filter: this.getFilter()
	          }
	        });
	      }
	      this.ui.table.$on("searchChange", function (e) {
	        return _this4.onSearchChange(e.detail);
	      });
	      this.ui.table.$on("sorterChange", function (e) {
	        return _this4.onSorterChange(e.detail);
	      });
	      this.ui.table.$on("filterChange", function (e) {
	        return _this4.onFilterChange(e.detail);
	      });
	      this.ui.table.$on("goToPage", function (e) {
	        return _this4.goToPage(e.detail);
	      });
	      this.ui.table.$on("goToNextPage", function () {
	        return _this4.goToNext();
	      });
	      this.ui.table.$on("goToPrevPage", function () {
	        return _this4.goToPrev();
	      });
	    }
	  }, {
	    key: "getActions",
	    value: function getActions() {
	      return this.getOptions("actions", []);
	    }
	  }, {
	    key: "getLinks",
	    value: function getLinks() {
	      return this.getOptions("links", []);
	    }
	  }, {
	    key: "getHelpers",
	    value: function getHelpers() {
	      return this.options.helpers || {};
	    }
	  }, {
	    key: "setWorking",
	    value: function setWorking(key, value) {
	      var _this5 = this;
	      this.stores.working.update(function (val) {
	        notPath.set(key, val, _this5.getHelpers(), value);
	        return val;
	      });
	      return this;
	    }
	  }, {
	    key: "getWorking",
	    value: function getWorking(key, def) {
	      let res = notPath.get(key, this.working, this.getHelpers());
	      if (res === undefined) {
	        return def;
	      } else {
	        return res;
	      }
	    }
	  }, {
	    key: "setState",
	    value: function setState(key, value) {
	      var _this6 = this;
	      this.stores.state.update(function (val) {
	        notPath.set(key, val, _this6.getHelpers(), value);
	        return val;
	      });
	      return this;
	    }
	  }, {
	    key: "getState",
	    value: function getState(key, def) {
	      let res = notPath.get(key, this.state, this.getHelpers());
	      if (res === undefined) {
	        return def;
	      } else {
	        return res;
	      }
	    }
	  }, {
	    key: "setOptions",
	    value: function setOptions(key, value) {
	      notPath.set(key, this.options, this.getHelpers(), value);
	      return this;
	    }
	  }, {
	    key: "getOptions",
	    value: function getOptions(key, def) {
	      let res = notPath.get(key, this.options, this.getHelpers());
	      if (res === undefined) {
	        return def;
	      } else {
	        return res;
	      }
	    }
	  }, {
	    key: "setFilter",
	    value: function setFilter(hash, withoutInvalidation = false) {
	      this.setState("filter", hash);
	      if (withoutInvalidation) {
	        return this;
	      }
	      this.invalidateData();
	      this.updateData();
	      return this;
	    }
	  }, {
	    key: "resetFilter",
	    value: function resetFilter() {
	      this.setState("filter", {});
	      return this;
	    }
	  }, {
	    key: "getFilter",
	    value: function getFilter() {
	      return this.getState("filter");
	    }
	  }, {
	    key: "setPager",
	    value: function setPager(hash, withoutInvalidation = false) {
	      this.setState("pager", hash);
	      if (withoutInvalidation) {
	        return this;
	      }
	      this.updateData();
	      return this;
	    }
	  }, {
	    key: "getDefaultPageNumber",
	    value: function getDefaultPageNumber() {
	      return isNaN(this.getOptions("pager.page")) ? OPT_DEFAULT_PAGE_NUMBER : this.getOptions("pager.page");
	    }
	  }, {
	    key: "getDefaultPageSize",
	    value: function getDefaultPageSize() {
	      return isNaN(this.getOptions("pager.size")) ? OPT_DEFAULT_PAGE_SIZE : this.getOptions("pager.size");
	    }
	  }, {
	    key: "resetPager",
	    value: function resetPager() {
	      this.setState("pager", {
	        size: this.getDefaultPageSize(),
	        page: this.getDefaultPageNumber()
	      });
	    }
	  }, {
	    key: "getPager",
	    value: function getPager() {
	      return this.getState("pager");
	    }
	  }, {
	    key: "setSorter",
	    value: function setSorter(hash, withoutInvalidation = false) {
	      this.setWorking("sorter", hash);
	      if (withoutInvalidation) {
	        return this;
	      }
	      this.invalidateData();
	      this.updateData();
	      return this;
	    }
	  }, {
	    key: "resetSorter",
	    value: function resetSorter(withoutInvalidation = false) {
	      let t = {};
	      t[OPT_DEFAULT_SORT_FIELD] = OPT_DEFAULT_SORT_DIRECTION;
	      return this.setSorter(t, withoutInvalidation);
	    }
	  }, {
	    key: "getSorter",
	    value: function getSorter() {
	      return this.getWorking("sorter");
	    }
	  }, {
	    key: "getSorterDirection",
	    value: function getSorterDirection() {
	      try {
	        let names = Object.keys(this.getSorter());
	        return this.getSorter()[names[0]];
	      } catch {
	        return OPT_DEFAULT_SORT_DIRECTION;
	      }
	    }
	  }, {
	    key: "getSearch",
	    value: function getSearch() {
	      let search = typeof this.getWorking("search") !== "undefined" && this.getWorking("search") !== null;
	      return search ? this.getWorking("search") : "";
	    }
	  }, {
	    key: "setSearch",
	    value: function setSearch(line = OPT_DEFAULT_SEARCH, withoutInvalidation = false) {
	      this.setWorking("search", line);
	      if (withoutInvalidation) {
	        return this;
	      }
	      this.invalidateData();
	      this.updateData();
	      return this;
	    }
	  }, {
	    key: "getReturn",
	    value: function getReturn() {
	      return this.getWorking("return");
	    }
	  }, {
	    key: "setReturn",
	    value: function setReturn(ret = OPT_DEFAULT_RETURN) {
	      this.setWorking("return", ret);
	      return this;
	    }
	  }, {
	    key: "clearFilteredData",
	    value: function clearFilteredData() {
	      this.stores.filtered.update(function (val) {
	        val.splice(0, val.length);
	        return val;
	      });
	    }
	  }, {
	    key: "clearRawData",
	    value: function clearRawData() {
	      this.stores.raw.update(function (val) {
	        val.splice(0, val.length);
	        return val;
	      });
	    }
	  }, {
	    key: "clearRefinedData",
	    value: function clearRefinedData() {
	      this.stores.refined.update(function (val) {
	        val.splice(0, val.length);
	        return val;
	      });
	    }
	  }, {
	    key: "invalidateData",
	    value: function invalidateData() {
	      //clearing filtered and sorted
	      this.clearFilteredData();
	      //in case live loading from server
	      if (this.isLive()) {
	        //clearing loaded data
	        this.clearRawData();
	      }
	      //resset pager anyway
	      this.resetPager();
	    }
	  }, {
	    key: "isLive",
	    value: function isLive() {
	      return this.getOptions("interface") && this.getOptions("interface.factory");
	    }
	  }, {
	    key: "setUpdating",
	    value: function setUpdating() {
	      this.setState("updating", true);
	    }
	  }, {
	    key: "setUpdated",
	    value: function setUpdated() {
	      this.setState("updating", false);
	    }
	  }, {
	    key: "ifUpdating",
	    value: function ifUpdating() {
	      return this.getState("updating");
	    }
	  }, {
	    key: "getDataInterface",
	    value: function getDataInterface() {
	      let factory = this.getOptions("interface.factory");
	      if (typeof factory === "function") {
	        return factory({});
	      } else {
	        return factory;
	      }
	    }
	  }, {
	    key: "getLoadDataActionName",
	    value: function getLoadDataActionName() {
	      return this.getOptions("interface.listAction") ? this.getOptions("interface.listAction") : OPT_DEFAULT_LIST_ACTION;
	    }
	  }, {
	    key: "setCombinedActionName",
	    value: function setCombinedActionName(actionName = OPT_DEFAULT_COUNT_ACTION) {
	      this.setWorking("interface.combinedAction", actionName);
	    }
	  }, {
	    key: "getCombinedActionName",
	    value: function getCombinedActionName() {
	      return this.getWorking("interface.combinedAction") ? this.getWorking("interface.combinedAction") : OPT_DEFAULT_COMBINED_ACTION;
	    }
	  }, {
	    key: "getCountActionName",
	    value: function getCountActionName() {
	      return this.getOptions("interface.countAction") ? this.getOptions("interface.countAction") : OPT_DEFAULT_COUNT_ACTION;
	    }
	  }, {
	    key: "loadData",
	    value: function loadData() {
	      //load from server
	      let query = this.getDataInterface().setFilter(this.getFilter()).setSorter(this.getSorter()).setReturn(this.getReturn()).setSearch(this.getSearch()).setPager(this.getPager()),
	        actionName;
	      if (this.getOptions("interface.combined", OPT_DEFAULT_COMBINED)) {
	        actionName = this.getCombinedActionName();
	      } else {
	        actionName = this.getLoadDataActionName();
	      }
	      return query["$" + actionName]();
	    }
	  }, {
	    key: "goToNext",
	    value: function goToNext() {
	      let next = isNaN(this.getState("pager.page")) ? this.getDefaultPageNumber() : this.getState("pager.page") + 1;
	      this.setState("pager.page", Math.min(next, this.getState("pagination.pages.to")));
	      this.updateData();
	    }
	  }, {
	    key: "goToPrev",
	    value: function goToPrev() {
	      let prev = isNaN(this.getState("pager.page")) ? this.getDefaultPageNumber() : this.getState("pager.page") - 1;
	      this.setState("pager.page", Math.max(prev, this.getState("pagination.pages.from")));
	      this.updateData();
	    }
	  }, {
	    key: "goToFirst",
	    value: function goToFirst() {
	      this.setState("pager.page", this.getState("pagination.pages.from"));
	      this.updateData();
	    }
	  }, {
	    key: "goToLast",
	    value: function goToLast() {
	      this.setState("pager.page", this.getState("pagination.pages.to"));
	      this.updateData();
	    }
	  }, {
	    key: "goToPage",
	    value: function goToPage(pageNumber) {
	      this.setState("pager.page", pageNumber);
	      this.updateData();
	    }
	  }, {
	    key: "testDataItem",
	    value: function testDataItem(item) {
	      var strValue = this.getSearch().toLowerCase();
	      for (var k in item) {
	        var toComp = item[k].toString().toLowerCase();
	        if (toComp.indexOf(strValue) > -1) {
	          return true;
	        }
	      }
	      return false;
	    }
	  }, {
	    key: "getRowsCount",
	    value: function getRowsCount() {
	      var _this7 = this;
	      let query = this.getDataInterface().setFilter(this.getFilter());
	      return query["$" + this.getCountActionName()]().then(function (data) {
	        _this7.updatePagination(data.count);
	      }).catch(function (e) {
	        _this7.error(e);
	      });
	    }
	  }, {
	    key: "updatePagination",
	    value: function updatePagination(itemsCount) {
	      var _this8 = this;
	      this.log("update pagination", itemsCount);
	      this.state.pagination.pages.list.splice(0, this.state.pagination.pages.list.length);
	      let itemsFrom = (this.getPager().page - OPT_DEFAULT_PAGE_NUMBER) * this.getPager().size + 1,
	        pagesCount = itemsCount % this.getPager().size ? Math.floor(itemsCount / this.getPager().size) + 1 : Math.round(itemsCount / this.getPager().size),
	        pagesFrom = Math.max(OPT_DEFAULT_PAGE_NUMBER, this.getPager().page - OPT_DEFAULT_PAGE_RANGE),
	        pagesTo = Math.min(pagesCount - (1 - OPT_DEFAULT_PAGE_NUMBER), this.getPager().page + OPT_DEFAULT_PAGE_RANGE),
	        list = [],
	        itemsTo = Math.min(itemsFrom + this.getPager().size - 1, itemsCount);
	      for (let t = pagesFrom; t <= pagesTo; t++) {
	        list.push({
	          index: t,
	          active: t === this.getPager().page
	        });
	      }
	      this.stores.state.update(function (val) {
	        _this8.log("update pagination", val);
	        val.pagination.items.count = itemsCount;
	        val.pagination.items.from = itemsFrom;
	        val.pagination.items.to = itemsTo;
	        val.pagination.pages.count = pagesCount;
	        val.pagination.pages.from = pagesFrom;
	        val.pagination.pages.to = pagesTo;
	        val.pagination.pages.current = _this8.getPager().page;
	        val.pagination.pages.list.splice(0, val.pagination.pages.list.length, ...list);
	        return val;
	      });
	    }
	  }, {
	    key: "updateData",
	    value: function updateData() {
	      var _this9 = this;
	      if (this.isLive()) {
	        if (this.ifUpdating()) {
	          return;
	        }
	        if (!this.getOptions("endless", false)) {
	          this.clearRawData();
	        }
	        this.setUpdating();
	        if (this.getOptions("interface.combined", OPT_DEFAULT_COMBINED)) {
	          this.loadData().then(function (data) {
	            let full = notCommon$1.objHas(data, "status") && notCommon$1.objHas(data, "result");
	            _this9.stores.filtered.update(function (val) {
	              if (!_this9.getOptions("endless", false)) {
	                _this9.clearFilteredData();
	              }
	              if (full) {
	                val.push(...data.result.list);
	              } else {
	                if (notCommon$1.objHas(data, "list") && Array.isArray(data.list)) {
	                  val.push(...data.list);
	                } else if (Array.isArray(data)) {
	                  val.push(...data);
	                }
	              }
	              return val;
	            });
	            _this9.setWorking("lastCount", full ? data.result.count : data.count);
	          }).then(function () {
	            _this9.updatePagination(_this9.getWorking("lastCount"));
	          }).catch(this.error.bind(this)).then(this.setUpdated.bind(this));
	        } else {
	          this.loadData().then(function (data) {
	            _this9.stores.filtered.update(function (val) {
	              val.push(...data);
	              return val;
	            });
	          }).then(this.getRowsCount.bind(this)).catch(this.error.bind(this)).then(this.setUpdated.bind(this));
	        }
	      } else {
	        //local magic
	        this.setUpdating();
	        this.processData();
	        this.setUpdated();
	      }
	    }
	  }, {
	    key: "getData",
	    value: function getData() {
	      return this.data;
	    }
	  }, {
	    key: "processData",
	    value: function processData() {
	      var _this10 = this;
	      let thatFilter = this.getFilter();
	      //this.getData('rows').__setPassive;
	      this.log(this.getData());
	      if (typeof thatFilter !== "undefined" && thatFilter !== null && typeof thatFilter.filterSearch !== "undefined" && thatFilter.filterSearch !== null && thatFilter.filterSearch.length > 0) {
	        this.stores.filtered.update(function (val) {
	          val.splice(0, val.length, ..._this10.data.raw.filter(_this10.testDataItem.bind(_this10)));
	          return val;
	        });
	      } else {
	        this.stores.filtered.update(function (val) {
	          val.splice(0, val.length, ..._this10.data.raw);
	          return val;
	        });
	      }
	      ////sorter
	      let thatSorter = this.getSorter();
	      if (typeof thatSorter !== "undefined" && thatSorter !== null) {
	        this.stores.filtered.update(function (val) {
	          val.sort(function (item1, item2) {
	            let t1 = notPath.get(thatSorter.sortByField, item1, {}),
	              t2 = notPath.get(thatSorter.sortByField, item2, {});
	            if (isNaN(t1)) {
	              if (typeof t1 !== "undefined" && typeof t2 !== "undefined" && t1.localeCompare) {
	                return t1.localeCompare() * -thatSorter.sortDirection;
	              } else {
	                return 0;
	              }
	            } else {
	              return (t1 < t2 ? 1 : -1) * thatSorter.sortDirection;
	            }
	          });
	          return val;
	        });
	      }
	    }
	  }, {
	    key: "error",
	    value: function error() {
	      if (this.options.logger) {
	        this.options.logger.error(...arguments);
	      }
	    }
	  }, {
	    key: "log",
	    value: function log() {
	      if (this.options.logger) {
	        this.options.logger.log(...arguments);
	      }
	    }
	  }, {
	    key: "checkFieldsNames",
	    value: function checkFieldsNames() {
	      const fieldId = this.getOptions("idField");
	      const pathId = ":" + fieldId;
	      let fields = this.getOptions("fields", []);
	      fields.forEach(function (field) {
	        if (pathId === field.path) {
	          field.path = field.path + CONST_ID_DUBLICATE_POSTFIX;
	        }
	      });
	    }
	  }, {
	    key: "readFieldValue",
	    value: function readFieldValue(path, item, helpers) {
	      if (path.indexOf(CONST_ID_DUBLICATE_POSTFIX) > -1) {
	        const fieldId = this.getOptions("idField");
	        const pathId = ":" + fieldId;
	        return notPath.get(pathId, item, helpers);
	      } else {
	        return notPath.get(path, item, helpers);
	      }
	    }
	  }, {
	    key: "refineFiltered",
	    value: function refineFiltered() {
	      var _this11 = this;
	      let result = [];
	      this.checkFieldsNames();
	      this.data.filtered.forEach(function (item, index) {
	        let refined = {};
	        if (_this11.getOptions("idField")) {
	          refined[_this11.getOptions("idField")] = item[_this11.getOptions("idField")];
	        }
	        _this11.getOptions("fields", []).forEach(function (field) {
	          let preprocessed = null,
	            val = _this11.readFieldValue(field.path, item, _this11.getOptions("helpers"));
	          if (notCommon$1.objHas(field, OPT_FIELD_NAME_PRE_PROC)) {
	            try {
	              preprocessed = field[OPT_FIELD_NAME_PRE_PROC](val, item, index);
	            } catch (e) {
	              _this11.error("Error while preprocessing cell value", val, item, index);
	              _this11.error(e);
	            }
	            notPath.set(field.path, refined, preprocessed);
	          } else {
	            notPath.set(field.path, refined, val);
	          }
	        });
	        result.push(refined);
	      });
	      this.stores.refined.update(function (val) {
	        val.splice(0, val.length, ...result);
	        return val;
	      });
	    }
	  }, {
	    key: "$destroy",
	    value: function $destroy() {
	      for (let name in this.ui) {
	        this.ui[name].$destroy && this.ui[name].$destroy();
	        delete this.ui[name];
	      }
	    }
	  }]);
	}(EventEmitter);

	var root_1$6 = template(`<!> <!>`, 1);
	var root$7 = template(`<!> <!>`, 1);

	function Ui_action_container($$anchor, $$props) {
		push($$props, true);

		//hidden - no loader
		//container - parent container of form
		let success = state(false);
		let error = state(false);

		/**
		 * @typedef {Object} Props
		 * @property {any} [container]
		 * @property {string} [loaderTitle]
		 * @property {boolean} [loaderActive] - state if form loading
		 * @property {string} [loaderSize] - page - whole page
		 * @property {string} [successTitle]
		 * @property {string} [successMessage]
		 * @property {string} [errorTitle]
		 * @property {string} [errorMessage]
		 */
		/** @type {Props} */
		let container = prop($$props, "container", 19, () => ({})),
			loaderTitle = prop($$props, "loaderTitle", 15, "Отправка данных на сервер"),
			loaderActive = prop($$props, "loaderActive", 15, false),
			loaderSize = prop($$props, "loaderSize", 15, "container"),
			successTitle = prop($$props, "successTitle", 15, "OK"),
			successMessage = prop($$props, "successMessage", 15, ""),
			errorTitle = prop($$props, "errorTitle", 15, "Error"),
			errorMessage = prop($$props, "errorMessage", 15, "");

		function showSuccess(title, message) {
			set(error, false);
			set(success, true);

			if (message != undefined) {
				successMessage(message);
			}

			if (title != undefined) {
				successTitle(title);
			}
		}

		function showError(title, message) {
			set(success, false);
			set(error, true);

			if (message != undefined) {
				errorMessage(message);
			}

			if (title != undefined) {
				errorTitle(title);
			}
		}

		function setLoading() {
			loaderActive(true);
			set(success, false);
			set(error, false);
		}

		function resetLoading() {
			loaderActive(false);
		}

		function hideAll() {
			loaderActive(false);
			set(success, false);
			set(error, false);
		}

		var fragment = root$7();
		var node = first_child(fragment);

		Ui_loader(node, {
			get loading() {
				return loaderActive();
			},
			set loading($$value) {
				loaderActive($$value);
			},
			get title() {
				return loaderTitle();
			},
			set title($$value) {
				loaderTitle($$value);
			},
			get size() {
				return loaderSize();
			},
			set size($$value) {
				loaderSize($$value);
			}
		});

		var node_1 = sibling(node, 2);

		Ui_container(node_1, spread_props(container, {
			children: ($$anchor, $$slotProps) => {
				var fragment_1 = root_1$6();
				var node_2 = first_child(fragment_1);

				{
					var consequent = ($$anchor) => {
						Ui_error($$anchor, {
							get title() {
								return errorTitle();
							},
							set title($$value) {
								errorTitle($$value);
							},
							get message() {
								return errorMessage();
							},
							set message($$value) {
								errorMessage($$value);
							}
						});
					};

					if_block(node_2, ($$render) => {
						if (get$2(error)) $$render(consequent);
					});
				}

				var node_3 = sibling(node_2, 2);

				{
					var consequent_1 = ($$anchor) => {
						Ui_success($$anchor, {
							get title() {
								return successTitle();
							},
							set title($$value) {
								successTitle($$value);
							},
							get message() {
								return successMessage();
							},
							set message($$value) {
								successMessage($$value);
							}
						});
					};

					if_block(node_3, ($$render) => {
						if (get$2(success)) $$render(consequent_1);
					});
				}

				append($$anchor, fragment_1);
			},
			$$slots: { default: true }
		}));

		append($$anchor, fragment);

		return pop({
			showSuccess,
			showError,
			setLoading,
			resetLoading,
			hideAll
		});
	}

	const DEFAULT_CONTAINER_SELECTOR$2 = ".container";
	var _uiComponent$1 = /*#__PURE__*/new WeakMap();
	var _ui = /*#__PURE__*/new WeakMap();
	let notActionUI = /*#__PURE__*/function (_notBase) {
	  function notActionUI({
	    target = null,
	    name = "Default",
	    options = {},
	    working = {},
	    data = {},
	    ui = Ui_action_container //default UI
	  }) {
	    var _this;
	    _classCallCheck(this, notActionUI);
	    _this = _callSuper(this, notActionUI, [{
	      working: {
	        name: `${name}ActionUI`,
	        ...working
	      },
	      options,
	      data
	    }]);
	    //UI renderer component class constructor
	    _classPrivateFieldInitSpec(_this, _uiComponent$1, null);
	    _classPrivateFieldInitSpec(_this, _ui, null);
	    if (target) {
	      _this.setOptions("target", target);
	    }
	    _classPrivateFieldSet2(_uiComponent$1, _this, ui);
	    _this.initUI();
	    return _this;
	  }
	  _inherits(notActionUI, _notBase);
	  return _createClass(notActionUI, [{
	    key: "initUI",
	    value: function initUI() {
	      try {
	        const target = this.getTargetEl();
	        while (target.children.length) target.removeChild(target.firstChild);
	        _classPrivateFieldSet2(_ui, this, new (_classPrivateFieldGet2(_uiComponent$1, this))({
	          target,
	          props: this.getOptions()
	        }));
	      } catch (e) {
	        this.error(e);
	      }
	    }
	  }, {
	    key: "setLoading",
	    value: function setLoading() {
	      this.emit("loading");
	      _classPrivateFieldGet2(_ui, this).setLoading();
	    }
	  }, {
	    key: "resetLoading",
	    value: function resetLoading() {
	      this.emit("loaded");
	      _classPrivateFieldGet2(_ui, this).resetLoading();
	    }
	  }, {
	    key: "destroy",
	    value: function destroy() {
	      this.emit("destroy");
	      if (_classPrivateFieldGet2(_ui, this)) {
	        _classPrivateFieldGet2(_ui, this).$destroy && _classPrivateFieldGet2(_ui, this).$destroy();
	        _classPrivateFieldGet2(_ui, this).destroy && _classPrivateFieldGet2(_ui, this).destroy();
	        _classPrivateFieldSet2(_ui, this, null);
	      }
	      this.setOptions(null);
	      this.setWorking(null);
	      this.setData(null);
	    }
	  }, {
	    key: "processResult",
	    value: function processResult(result) {
	      if (result.status === DEFAULT_STATUS_SUCCESS) {
	        this.setFormSuccess();
	        return true;
	      } else {
	        this.setFormErrors(result);
	        return false;
	      }
	    }

	    /**
	     *   Form validation result
	     **/
	  }, {
	    key: "setFormSuccess",
	    value: function setFormSuccess() {
	      _classPrivateFieldGet2(_ui, this).showSuccess();
	      this.emit("success");
	    }
	  }, {
	    key: "setFormErrors",
	    value: function setFormErrors(result) {
	      const status = {
	        form: [],
	        fields: {}
	      };
	      if (result.message) {
	        status.form.push(result.message);
	      }
	      if (result.errors && Object.keys(result.errors).length > 0) {
	        status.fields = {
	          ...result.errors
	        };
	      }
	      _classPrivateFieldGet2(_ui, this).showError(status);
	      this.emit("error", status);
	    }

	    /***
	     * Redefinable getters
	     **/
	  }, {
	    key: "getTargetEl",
	    value: function getTargetEl() {
	      const targetEl = this.getOptions("target", DEFAULT_CONTAINER_SELECTOR$2);
	      if (targetEl instanceof HTMLElement) {
	        return targetEl;
	      } else if (typeof targetEl === "string") {
	        return document.querySelector(targetEl);
	      } else {
	        throw new Error("ActionUI parent element is not defined");
	      }
	    }
	  }]);
	}(notBase);

	let notFormUtils$1 = /*#__PURE__*/function () {
	  function notFormUtils() {
	    _classCallCheck(this, notFormUtils);
	  }
	  return _createClass(notFormUtils, null, [{
	    key: "addComponent",
	    value: function addComponent(name, value) {
	      COMPONENTS$1.add(name, value);
	    }
	  }, {
	    key: "addVariants",
	    value: function addVariants(name, value) {
	      VARIANTS$1.add(name, value);
	    }
	  }, {
	    key: "addField",
	    value: function addField(name, field) {
	      FIELDS$1.add(name, field);
	    }
	  }, {
	    key: "actionFieldsInit",
	    value: function actionFieldsInit(fieldName, options, data) {
	      var _this = this;
	      if (Array.isArray(fieldName)) {
	        fieldName.forEach(function (subFieldName) {
	          _this.actionFieldsInit(subFieldName, options, data);
	        });
	      } else {
	        if (!notCommon$1.objHas(options, "fields")) {
	          options.fields = {};
	        }
	        if (!notCommon$1.objHas(options.fields, fieldName)) {
	          options.fields[fieldName] = {};
	        }
	        //copying initial data
	        if (typeof data !== "undefined" && data !== null && typeof data[fieldName] !== "undefined" && data[fieldName] !== null) {
	          options.fields[fieldName].value = data[fieldName];
	        }
	      }
	    }
	  }]);
	}();
	_defineProperty(notFormUtils$1, "validator", null);

	const DEFAULT_FIELD = {
	  label: "",
	  placeholder: "",
	  enabled: true,
	  visible: true,
	  required: true,
	  validated: false,
	  valid: false,
	  errors: false
	};

	/**
	 * Creates field manifest
	 * @param {string} type      name/type of the field
	 * @param {Object} mutation  mutation to manifest from library
	 * @param {Object} VARIANTS  store which contains named lists of field value variants
	 * @param {Object} FIELDS    store which contains named lists of field manifests
	 * @return {Object}          field manifest
	 **/
	function fieldInit(type, mutation = {}, VARIANTS, FIELDS) {
	  let field = {
	    ...DEFAULT_FIELD
	  };
	  //getting field core manifest
	  if (FIELDS.contains(type)) {
	    field = {
	      ...field,
	      ...FIELDS.get(type)
	    };
	  }
	  //adding mutations
	  if (mutation) {
	    field = {
	      ...field,
	      ...mutation
	    };
	  }
	  //adding variants list to field from VARIANTS store
	  if (notCommon$1.objHas(field, "variantsSource") && VARIANTS.contains(field.variantsSource)) {
	    field.variants = VARIANTS.get(field.variantsSource);
	  } else {
	    if (!field.variants || field.variants.length === 0) {
	      field.variants = [];
	    }
	  }
	  return field;
	}

	/**
	 * Initialization of form structure object
	 * @param {object}               form          form structure object
	 * @param {string|Array<string>} fieldName     name of the field type if string, array of strings = subform
	 * @param {Object}               VARIANTS      store which contains named lists of field value variants
	 * @param {Object}               FIELDS        store which contains named lists of field manifests
	 * @param {Object}               formFieldsOptions   form wide options
	 * @returns {Object}                           form structure object
	 **/
	function initFormByField(form = {}, fieldName = [], VARIANTS, FIELDS, formFieldsOptions, data) {
	  if (Array.isArray(fieldName)) {
	    fieldName.forEach(function (subFormFieldName) {
	      return initFormByField(form, subFormFieldName, VARIANTS, FIELDS, formFieldsOptions, data);
	    });
	  } else {
	    let opts = {};
	    if (formFieldsOptions && notCommon$1.objHas(formFieldsOptions, "mutations") && notCommon$1.objHas(formFieldsOptions.mutations, fieldName)) {
	      opts = formFieldsOptions.mutations[fieldName]; //option mutation for field
	    }
	    if (data && notCommon$1.objHas(data, fieldName)) {
	      opts.value = data[fieldName];
	    }
	    form[fieldName] = fieldInit(fieldName, opts, VARIANTS, FIELDS);
	    //if form readonly, marking every field as readonly
	    if (formFieldsOptions && formFieldsOptions.readonly) {
	      form[fieldName].readonly = true;
	    }
	  }
	  return form;
	}

	/**
	 *  Marking field as invalid by own validator
	 * @param {Object}           form          form structure object
	 * @param {string}           fieldName     name of the field
	 * @param {any}              value         value of field
	 * @param  {Array<string>}   errors        list of errors
	 * @return {Object}                        form structure object
	 **/
	function setFieldInvalid(form, fieldName, value, errors) {
	  form[fieldName].errors = [...errors];
	  form[fieldName].validated = true;
	  form[fieldName].valid = false;
	  form[fieldName].value = value;
	  return form;
	}

	/**
	 *  Marking field as valid by own validator
	 * @param {Object}           form          form structure object
	 * @param {string}           fieldName     name of the field
	 * @param {any}              value         value of field
	 * @return {Object}                        form structure object
	 **/
	function setFieldValid(form, fieldName, value) {
	  form[fieldName].errors = false;
	  form[fieldName].validated = true;
	  form[fieldName].valid = true;
	  form[fieldName].value = value;
	  for (let fname in form) {
	    if (fname !== fieldName) {
	      if (Array.isArray(form[fname].errors) && form[fname].errors.length === 0) {
	        form[fname].errors = false;
	      }
	      if (form[fname].errors !== false) {
	        break;
	      }
	    }
	  }
	  return form;
	}

	/**
	 * Checks if field has errors
	 * @param {Object}           form          form structure object
	 * @param {string}           fieldName     name of the field
	 * @returns {boolean}                      true - valid, false -invalid
	 **/
	function isFieldValid(form, fieldName) {
	  return !Array.isArray(form[fieldName].errors);
	}

	/**
	 * Form level validator error in this field
	 * @param {Object}           form          form structure object
	 * @param {string}           fieldName     name of the field
	 * @param  {Array<string>}   errors        list of errors
	 * @return {Object}                        form structure object
	 **/
	function setFormFieldInvalid(form, fieldName, errors) {
	  form[fieldName].formErrors = [...errors];
	  form[fieldName].validated = true;
	  form[fieldName].inputStarted = true;
	  form[fieldName].valid = false;
	  form[fieldName].formLevelError = true;
	  return form;
	}
	/**
	 * Form level validator success in this field
	 * @param {Object}           form          form structure object
	 * @param {string}           fieldName     name of the field
	 * @return {Object}                        form structure object
	 **/
	function setFormFieldValid(form, fieldName) {
	  form[fieldName].formErrors = false;
	  form[fieldName].validated = true;
	  form[fieldName].valid = true;
	  form[fieldName].formLevelError = false;
	  return form;
	}

	/**
	 * Updates fields and form error labels
	 * @param {Object}           form                  form structure object
	 * @param {Object}           validationStatus      results of validation
	 **/
	function updateFormValidationStatus({
	  form,
	  formErrors,
	  validationStatus
	} /* FormValidationSession.getCompleteResult() */) {
	  if (Array.isArray(validationStatus.form) && validationStatus.form.length) {
	    formErrors.splice(0, formErrors.length, ...validationStatus.form);
	  } else {
	    formErrors.splice(0, formErrors.length);
	  }
	  if (validationStatus.fields) {
	    for (let fieldName in validationStatus.fields) {
	      if (Array.isArray(validationStatus.fields[fieldName]) && validationStatus.fields[fieldName].length) {
	        setFormFieldInvalid(form, fieldName, validationStatus.fields[fieldName]);
	      } else {
	        setFormFieldValid(form, fieldName);
	      }
	    }
	  }
	}
	function setFieldsVisibility(form, fieldsList, val) {
	  if (Array.isArray(fieldsList)) {
	    Object.keys(form).forEach(function (fieldName) {
	      form[fieldName].visible = fieldsList.includes(fieldName) ? val : !val;
	    });
	    return true;
	  }
	  return false;
	}
	function setFieldValue(form, fieldName, value) {
	  if (notCommon$1.objHas(form, fieldName)) {
	    form[fieldName].value = value;
	    return true;
	  }
	  return false;
	}
	function fieldIsVisibleAndFilled(form, fieldName) {
	  return notCommon$1.objHas(form, fieldName) && form[fieldName].enabled && form[fieldName].visible && typeof form[fieldName].value !== "undefined";
	}
	function collectData(fields, form) {
	  let result = {};
	  fields.flat().forEach(function (fieldName) {
	    if (fieldIsVisibleAndFilled(form, fieldName)) {
	      result[fieldName] = form[fieldName].value;
	    }
	  });
	  return result;
	}
	var FormHelpers = {
	  fieldInit,
	  initFormByField,
	  setFieldInvalid,
	  setFieldValid,
	  isFieldValid,
	  setFormFieldInvalid,
	  setFormFieldValid,
	  updateFormValidationStatus,
	  fieldIsVisibleAndFilled,
	  setFieldsVisibility,
	  setFieldValue,
	  collectData
	};

	var result;
	var hasRequiredResult;

	function requireResult () {
		if (hasRequiredResult) return result;
		hasRequiredResult = 1;
		const emptyFieldsResults = (data) => {
		    return Object.keys(data).reduce((acc, curr) => {
		        acc[curr] = [];
		        return acc;
		    }, {});
		};

		const FIELDS = ["fields", "form"];

		result = class ValidationResult {
		    #clean = true;
		    #result;

		    constructor(result) {
		        this.#result = JSON.parse(JSON.stringify(result));
		        Object.keys(this.#result).forEach((fieldName) => {
		            if (!FIELDS.includes(fieldName)) {
		                delete this.#result[fieldName];
		            }
		        });
		        this.#clean = this.#result.form.errors.length === 0;
		        const list = this.#getFieldsList();
		        for (let fieldName of list) {
		            if (this.isFieldDirty(fieldName)) {
		                this.#clean = false;
		            }
		        }
		    }

		    destroy() {
		        this.#result = undefined;
		    }

		    get clean() {
		        return this.#clean;
		    }

		    static getDefaultResult(data) {
		        return {
		            fields: emptyFieldsResults(data),
		            form: {
		                fields: emptyFieldsResults(data),
		                errors: [],
		                exceptions: [],
		            },
		        };
		    }

		    getReport() {
		        return JSON.parse(JSON.stringify(this.#getCompleteResult()));
		    }

		    getDetailedReport() {
		        if (typeof this.#result === "object") {
		            return JSON.parse(JSON.stringify(this.#result));
		        } else {
		            return undefined;
		        }
		    }

		    isFieldDirty(fieldName) {
		        if (
		            Array.isArray(this.#result.fields[fieldName]) &&
		            this.#result.fields[fieldName].length
		        ) {
		            return true;
		        }
		        if (
		            Array.isArray(this.#result.form.fields[fieldName]) &&
		            this.#result.form.fields[fieldName].length
		        ) {
		            return true;
		        }
		        return false;
		    }

		    getCompleteResultForField(fieldName) {
		        const fieldResult = [];
		        if (Array.isArray(this.#result.fields[fieldName])) {
		            fieldResult.push(...this.#result.fields[fieldName]);
		        }
		        if (Array.isArray(this.#result.form.fields[fieldName])) {
		            fieldResult.push(...this.#result.form.fields[fieldName]);
		        }
		        return fieldResult;
		    }

		    #getCompleteResult() {
		        const resultComplete = {
		            clean: this.#clean,
		            fields: {},
		            form: [],
		        };
		        const list = this.#getFieldsList();
		        for (let fieldName of list) {
		            const errors = this.getCompleteResultForField(fieldName);
		            if (errors.length) {
		                resultComplete.fields[fieldName] = errors;
		            }
		        }
		        resultComplete.form = [...this.#result.form.errors];
		        if (resultComplete.form.length === 0) {
		            delete resultComplete.form;
		        }
		        return resultComplete;
		    }

		    #getFieldsList() {
		        const fields = Object.keys(this.#result.fields);
		        const fieldsInForm = Object.keys(this.#result.form.fields);
		        return [...new Set([...fieldsInForm, ...fields])];
		    }
		};
		return result;
	}

	/**
	*	Template of error.js
	*	For building for specific environment.
	*	Node.js or Browser
	*	@param {string}	env	node|browser in wich env it will be running
	*	@param {string}	url	URL of report collector
	*	@param {string}	key	key to indetificate reporter
	*/

	var error_node;
	var hasRequiredError_node;

	function requireError_node () {
		if (hasRequiredError_node) return error_node;
		hasRequiredError_node = 1;
		/**
		* Error reporting with features, saving browser info, uri and so on.
		* @module not-error/error
		*/
		class notError extends Error {
			constructor(message, options = {}, error = null){
				super(message);
				this.options = options;
				this.adopt(error);
				this.fill();
				this.getTime();
				return this;
			}

			/**
			*	Adopting native error object
			*	@param {Error}	error 	Error object
			*	@return {notError}		chainable
			*/
			adopt(error){
				if(error instanceof Error){
					this.parent = error;
				}
				return this;
			}

			getStack(){
				if(this.parent){
					return this.parent.stack;
				}else {
					return this.stack;
				}
			}

			getDetails(){
				let src = this;
				if(this.parent){
					src = this.parent;
				}
				return {
					columnNumber:    	src.columnNumber,
					fileName:        	src.fileName,
					lineNumber:      	src.lineNumber,
					name:            	src.name,
					message:        	src.message,
					stack:          	src.stack
				};
			}

			/**
			*	Updating this.env.date property
			*	@return  {object}	{timestamp, offset}
			*/
			getTime(){
				let date = new Date();
				this.env.date = {
					timestamp : date.getTime(),
					offset: date.getTimezoneOffset()
				};
				return this.env.date;
			}


			/**
			******************************************************************************************************
			******************************************************************************************************
			***	Node.js Section
			******************************************************************************************************
			******************************************************************************************************
			**/

			/**
			*	Filtering out key by `white` list
			*	@param {object} object hash to be copied according filter `white` list
			*	@param {array} filter array of sting, which represents keys we want to be
			*						copied in resulting object from source
			*	@return {object}		white listed hash
			*/
			filterEnv(object, filter){
				let result = {};
				for(let t of filter){
					if(Object.prototype.hasOwnProperty.call(object, t)){
						result[t] = object[t];
					}
				}
				return result;
			}

			/**
			*	Collecting information specific for Node.js V8
			*	@return {notError}		chainable
			*/
			fill(){
				/**
				*	You want some fields from env but not all, cause there are passwords
				*	from db, api keys and etc
				*/
				this.env = {
					browser: 	false,
					node: 		true,
					versions: Object.assign({}, process.versions),
					vars: 		this.filterEnv(process.env, this.options.whitelist || ['NODE_ENV'])
				};
				return this;
			}


		}


		error_node = notError;
		return error_node;
	}

	var validation_error_node;
	var hasRequiredValidation_error_node;

	function requireValidation_error_node () {
		if (hasRequiredValidation_error_node) return validation_error_node;
		hasRequiredValidation_error_node = 1;
		const notError = requireError_node();


		//reportable
		class notValidationError extends notError{
		  constructor(message, fields = {}, err = null, params = {}){
		    super(message, {fields, params}, err);
		    return this;
		  }

		  /**
		  * Sets hash of fields errors messages for usage in forms
		  *	@return {Object}	hash of field->errors [key:string]: Array<string>
		  **/
		  setFieldsErrors(messages){
		    this.options.fields = messages;
		  }

		  /**
		  * Returns hash of errors
		  *	@return {Object}	hash of field->errors [key:string]: Array<string>
		  **/
		  getFieldsErrors(){
		    return this.options.fields;
		  }

		}


		validation_error_node = notValidationError;
		return validation_error_node;
	}

	/**
	 * Test argument type to be 'function'
	 * @param {any}  func    possible function
	 * @return {boolean}     if this is a function
	 **/

	var common;
	var hasRequiredCommon;

	function requireCommon () {
		if (hasRequiredCommon) return common;
		hasRequiredCommon = 1;
		const isFunc = (func) => {
		    return typeof func === "function";
		};

		/**
		 * Returns true if argument is Async function
		 * @param {function} func  to test
		 * @return {boolean}       if this function is constructed as AsyncFunction
		 **/
		const isAsync = (func) => {
		    return func.constructor.name === "AsyncFunction";
		};

		common = async (proc, params) => {
		    if (isFunc(proc)) {
		        if (isAsync(proc)) {
		            return await proc(...params);
		        } else {
		            return proc(...params);
		        }
		    }
		};
		return common;
	}

	var session;
	var hasRequiredSession;

	function requireSession () {
		if (hasRequiredSession) return session;
		hasRequiredSession = 1;
		const ValidationResult = requireResult();
		const notVaildationError = requireValidation_error_node();
		const executeObjectFunction = requireCommon();

		const ValidationSession = async (validators, data) => {
		    const result = ValidationResult.getDefaultResult(data);
		    await validateFields({ validators, data, result });
		    await validateForm({ validators, data, result });
		    return new ValidationResult(result);
		};

		session = ValidationSession;

		const validateFields = async ({ validators, data, result }) => {
		    for (let t in data) {
		        await validateField(t, data[t], validators, result);
		    }
		};

		const validateField = async (fieldName, value, validators, result) => {
		    const fieldValidators = getFieldValidators(fieldName, validators);
		    return await runFieldValidators(fieldName, value, fieldValidators, result);
		};

		const getFieldValidators = (name, validators) => {
		    return validators && validators.fields && validators.fields[name]
		        ? validators.fields[name]
		        : [];
		};

		const runFieldValidators = async (fieldName, value, validators, result) => {
		    for (let validatorRule of validators) {
		        try {
		            const valid = await executeObjectFunction(
		                validatorRule["validator"],
		                [value]
		            );
		            if (!valid) {
		                setFieldError(fieldName, validatorRule.message, result);
		            }
		        } catch (e) {
		            if (e instanceof notVaildationError || !validatorRule.message) {
		                setFieldError(fieldName, e.message, result);
		            } else {
		                setFieldError(fieldName, validatorRule.message, result);
		            }
		        }
		    }
		};

		const setFieldError = (fieldName, errorMessage, result) => {
		    if (!result.fields[fieldName].includes(errorMessage)) {
		        result.fields[fieldName].push(errorMessage);
		    }
		};

		const validateForm = async ({ validators, data, result }) => {
		    const formValidators = getFormValidators(validators);
		    await runFormValidators(data, formValidators, result);
		};

		const getFormValidators = (validators) => {
		    return validators && validators.form ? validators.form : [];
		};

		const runFormValidators = async (data, formValidators, result) => {
		    for (let validator of formValidators) {
		        try {
		            await validator(data);
		        } catch (e) {
		            if (e && typeof e.getFieldsErrors === "function") {
		                const formErrors = e.getFieldsErrors();
		                Array.isArray(formErrors.form) &&
		                    addFormErrors(formErrors.form, result);
		                formErrors.fields &&
		                    addFormFieldsErrors(formErrors.fields, result);
		            } else {
		                throw e;
		            }
		        }
		    }
		};

		const addFormErrors = (errors, result) => {
		    errors.forEach((error) => {
		        addFormError(error, result);
		    });
		};

		const addFormError = (errorMessage, result) => {
		    if (!result.form.errors.includes(errorMessage)) {
		        result.form.errors.push(errorMessage);
		    }
		};

		const addFormFieldsErrors = (fieldsErrors, result) => {
		    for (let fieldName in fieldsErrors) {
		        addFormFieldErrors(fieldName, fieldsErrors[fieldName], result);
		    }
		};

		const addFormFieldErrors = (fieldName, errorMessages, result) => {
		    errorMessages.forEach((error) => {
		        addFormFieldError(fieldName, error, result);
		    });
		};

		const addFormFieldError = (fieldName, errorMessage, result) => {
		    if (!Array.isArray(result.form.fields[fieldName])) {
		        result.form.fields[fieldName] = [];
		    }
		    if (!result.form.fields[fieldName].includes(errorMessage)) {
		        result.form.fields[fieldName].push(errorMessage);
		    }
		};
		return session;
	}

	var runner_utils;
	var hasRequiredRunner_utils;

	function requireRunner_utils () {
		if (hasRequiredRunner_utils) return runner_utils;
		hasRequiredRunner_utils = 1;
		const composeFieldsValidators = (data, validatorsLib) => {
		    if (validatorsLib && validatorsLib.fields) {
		        const list = Object.keys(data);
		        const result = {};
		        list.forEach((fieldName) => {
		            if (Array.isArray(validatorsLib.fields[fieldName])) {
		                result[fieldName] = validatorsLib.fields[fieldName];
		            }
		        });
		        return result;
		    } else {
		        return {};
		    }
		};

		const composeFormValidators = (name, validatorsLib) => {
		    if (!validatorsLib) return [];
		    if (validatorsLib.forms && Array.isArray(validatorsLib.forms[name])) {
		        return validatorsLib.forms[name];
		    }
		    if (Array.isArray(validatorsLib.form)) {
		        return validatorsLib.form;
		    }
		    return [];
		};

		runner_utils = {
		    composeFieldsValidators,
		    composeFormValidators,
		};
		return runner_utils;
	}

	var runner;
	var hasRequiredRunner;

	function requireRunner () {
		if (hasRequiredRunner) return runner;
		hasRequiredRunner = 1;
		const {
		    composeFieldsValidators,
		    composeFormValidators,
		} = requireRunner_utils();

		const ValidationSession = requireSession();

		/**
		 * Creates validation runner function from provided validation rules lib
		 * @param {object}     validationLib object containing fields validation rules and form specific rules
		 * @returns {function} (data: object, formName: string)=>Promise<ValidationResult>
		 **/
		const ValidationRunner = (validatorsLib) => {
		    /**
		     * Validation session runner
		     * @param {object} data      object to validate
		     * @param {string} formName
		     * @returns {Promise}
		     **/
		    return (data, formName) => {
		        const validators = {
		            //fields specific validators
		            fields: composeFieldsValidators(data, validatorsLib),
		            //form specific validators
		            form: composeFormValidators(formName, validatorsLib),
		        };
		        return ValidationSession(validators, data);
		    };
		};

		runner = ValidationRunner;
		return runner;
	}

	var builder_utils;
	var hasRequiredBuilder_utils;

	function requireBuilder_utils () {
		if (hasRequiredBuilder_utils) return builder_utils;
		hasRequiredBuilder_utils = 1;
		const augmentFieldsValidators = (fieldValidators, getValidatorEnv) => {
		    return fieldValidators.map((fieldRule) =>
		        augmentFieldValidator(fieldRule, getValidatorEnv)
		    );
		};

		const augmentFieldValidator = (rule, getValidatorEnv) => {
		    if (rule.validator && typeof rule.validator === "function") {
		        const ruleValidator = rule.validator;
		        const result = {
		            ...rule,
		        };
		        delete result.validator;
		        result.validator = (val) => ruleValidator(val, getValidatorEnv());
		        return result;
		    }
		    return rule;
		};

		const augmentFormValidators = (rules, getValidatorEnv) => {
		    return rules.map((rule) => augmentFormValidator(rule, getValidatorEnv));
		};

		const augmentFormValidator = (rule, getValidatorEnv) => {
		    return (val) => rule(val, getValidatorEnv());
		};

		builder_utils = {
		    augmentFieldsValidators,
		    augmentFieldValidator,
		    augmentFormValidators,
		    augmentFormValidator,
		};
		return builder_utils;
	}

	var builder;
	var hasRequiredBuilder;

	function requireBuilder () {
		if (hasRequiredBuilder) return builder;
		hasRequiredBuilder = 1;
		const objHas = (obj, name) => {
		    return Object.prototype.hasOwnProperty.call(obj, name);
		};
		const {
		    augmentFieldsValidators,
		    augmentFormValidators,
		} = requireBuilder_utils();

		/**
		 * @typedef   {object}    notValidationSchema
		 * @property  {object}    [fields]
		 * @property  {array}     [form]
		 * @property  {object}    [forms]
		 */

		/**
		 * returns valid empty validation scheme
		 *
		 * @return {notValidationSchema}
		 */
		const emptyScheme = () => {
		    return {
		        fields: {},
		        forms: {},
		    };
		};
		/**
		 *
		 *
		 * @param {object} validators
		 * @param {function} getValidatorEnv
		 * @return {notValidationSchema}
		 */
		const validationBuilder = (validators, getValidatorEnv) => {
		    if (typeof validators === "undefined" || validators === null) {
		        return emptyScheme();
		    }
		    const augmented = {};
		    if (objHas(validators, "fields")) {
		        augmented.fields = transformFieldsValidators(
		            validators.fields,
		            getValidatorEnv
		        );
		    }
		    if (objHas(validators, "forms")) {
		        augmented.forms = transformFormsValidators(
		            validators.forms,
		            getValidatorEnv
		        );
		    } else {
		        if (objHas(validators, "form")) {
		            augmented.form = augmentFormValidators(
		                validators.form,
		                getValidatorEnv
		            );
		        }
		    }
		    return augmented;
		};

		builder = validationBuilder;

		const transformFieldsValidators = (fields, getValidatorEnv) => {
		    const augmented = {};
		    for (let fieldName in fields) {
		        if (Array.isArray(fields[fieldName])) {
		            augmented[fieldName] = augmentFieldsValidators(
		                fields[fieldName],
		                getValidatorEnv
		            );
		        }
		    }
		    return augmented;
		};

		const transformFormsValidators = (formsValidators, getValidatorEnv) => {
		    const augmented = {};
		    for (let formName in formsValidators) {
		        if (Array.isArray(formsValidators[formName])) {
		            augmented[formName] = augmentFormValidators(
		                formsValidators[formName],
		                getValidatorEnv
		            );
		        }
		    }
		    return augmented;
		};
		return builder;
	}

	var src;
	var hasRequiredSrc;

	function requireSrc () {
		if (hasRequiredSrc) return src;
		hasRequiredSrc = 1;
		const Session = requireSession();
		const Runner = requireRunner();
		const Builder = requireBuilder();
		const Result = requireResult();

		src = {
		    name: "not-validation",
		    Session,
		    Runner,
		    Builder,
		    Result,
		};
		return src;
	}

	var srcExports = requireSrc();

	var root_4$4 = template(`<div><div class="field-label is-normal"><!></div> <div class="field-body"></div></div>`);
	var root_7$1 = template(`<!> <!>`, 1);
	var root_6$3 = template(`<div></div>`);

	function Field($$anchor, $$props) {
		push($$props, true);

		/**
		 * @typedef {Object} Props
		 * @property {string} [label]
		 * @property {string} [name]
		 * @property {boolean} [readonly]
		 * @property {boolean} [horizontal]
		 * @property {any} [controls]
		 * @property {import('../../../elements/events.types').UIEventInputChangeCallback} onchange
		 * @property {string} [classes] - field style modification
		 * @property {boolean} [addons] - //addons
		 * @property {boolean} [addonsCentered]
		 * @property {boolean} [addonsRight]
		 * @property {boolean} [grouped] - //group flag
		 * @property {boolean} [groupedMultiline]
		 * @property {boolean} [groupedRight]
		 * @property {boolean} [groupedCentered]
		 */
		/** @type {Props} */
		let label = prop($$props, "label", 3, ""),
			name = prop($$props, "name", 3, "generic field"),
			readonly = prop($$props, "readonly", 3, false),
			horizontal = prop($$props, "horizontal", 3, false),
			controls = prop($$props, "controls", 19, () => []),
			classes = prop($$props, "classes", 3, ""),
			addons = prop($$props, "addons", 3, false),
			addonsCentered = prop($$props, "addonsCentered", 3, false),
			addonsRight = prop($$props, "addonsRight", 3, false),
			grouped = prop($$props, "grouped", 3, false),
			groupedMultiline = prop($$props, "groupedMultiline", 3, false),
			groupedRight = prop($$props, "groupedRight", 3, false),
			groupedCentered = prop($$props, "groupedCentered", 3, false),
			onchange = prop($$props, "onchange", 3, () => true),
			formFieldPrefix = prop($$props, "formFieldPrefix", 3, "form-field-");

		let fieldClasses = state("");
		let hidden = state(false);
		let fieldId = state(undefined);

		onMount(() => {
			set(fieldClasses, get$2(fieldClasses) + (" " + classes()));
			set(fieldClasses, get$2(fieldClasses) + (addons() ? " has-addons " : ""));
			set(fieldClasses, get$2(fieldClasses) + (addonsCentered() ? " has-addons-centered " : ""));
			set(fieldClasses, get$2(fieldClasses) + (addonsRight() ? " has-addons-right " : ""));
			set(fieldClasses, get$2(fieldClasses) + (grouped() ? " is-grouped " : ""));
			set(fieldClasses, get$2(fieldClasses) + (groupedMultiline() ? " is-grouped-multiline " : ""));
			set(fieldClasses, get$2(fieldClasses) + (groupedRight() ? " is-grouped-right " : ""));
			set(fieldClasses, get$2(fieldClasses) + (groupedCentered() ? " is-grouped-centered " : ""));

			if (readonly()) {
				controls().forEach((control) => {
					control.readonly = true;
				});
			}

			let notHidden = controls().filter((control) => control.component !== "UIHidden");

			set(hidden, notHidden.length === 0);

			let tmp = controls().map((itm) => itm.component).join("_");

			set(fieldId, `${formFieldPrefix()}${tmp}-${name()}`);
		});

		var fragment = comment();
		var node = first_child(fragment);

		{
			var consequent = ($$anchor) => {
				var fragment_1 = comment();
				var node_1 = first_child(fragment_1);

				each(node_1, 17, controls, index$d, ($$anchor, control) => {
					var fragment_2 = comment();
					const SvelteComponent = derived(() => COMPONENTS$1.get(get$2(control).component));
					var node_2 = first_child(fragment_2);

					component(node_2, () => get$2(SvelteComponent), ($$anchor, $$component) => {
						$$component($$anchor, spread_props(() => get$2(control), {
							get onchange() {
								return onchange();
							},
							get fieldname() {
								return name();
							}
						}));
					});

					append($$anchor, fragment_2);
				});

				append($$anchor, fragment_1);
			};

			var alternate_1 = ($$anchor) => {
				var fragment_3 = comment();
				var node_3 = first_child(fragment_3);

				{
					var consequent_1 = ($$anchor) => {
						var div = root_4$4();
						var div_1 = child(div);
						var node_4 = child(div_1);
						var label_1 = derived(() => label() || controls()[0].label);

						Ui_label(node_4, {
							get for() {
								return get$2(fieldId);
							},
							get label() {
								return get$2(label_1);
							}
						});

						reset(div_1);

						var div_2 = sibling(div_1, 2);

						each(div_2, 21, controls, index$d, ($$anchor, control) => {
							var fragment_4 = comment();
							const SvelteComponent_1 = derived(() => COMPONENTS$1.get(get$2(control).component));
							var node_5 = first_child(fragment_4);

							component(node_5, () => get$2(SvelteComponent_1), ($$anchor, $$component) => {
								$$component($$anchor, spread_props(() => get$2(control), {
									get onchange() {
										return onchange();
									},
									get fieldname() {
										return name();
									}
								}));
							});

							append($$anchor, fragment_4);
						});

						reset(div_2);
						reset(div);

						template_effect(() => {
							set_class(div, `field is-horizontal ${get$2(fieldClasses) ?? ""} ${get$2(fieldId) ?? ""}`);
							set_attribute(div_2, "id", get$2(fieldId));
						});

						append($$anchor, div);
					};

					var alternate = ($$anchor) => {
						var div_3 = root_6$3();

						each(div_3, 21, controls, index$d, ($$anchor, control) => {
							var fragment_5 = root_7$1();
							const SvelteComponent_2 = derived(() => COMPONENTS$1.get(get$2(control).component));
							var node_6 = first_child(fragment_5);

							Ui_label(node_6, {
								get for() {
									return `form-field-${get$2(control).component ?? ""}-${name() ?? ""}`;
								},
								get label() {
									return get$2(control).label;
								}
							});

							var node_7 = sibling(node_6, 2);

							component(node_7, () => get$2(SvelteComponent_2), ($$anchor, $$component) => {
								$$component($$anchor, spread_props(() => get$2(control), {
									get onchange() {
										return onchange();
									},
									get fieldname() {
										return name();
									}
								}));
							});

							append($$anchor, fragment_5);
						});

						reset(div_3);
						template_effect(() => set_class(div_3, `field ${get$2(fieldClasses) ?? ""} ${get$2(fieldId) ?? ""}`));
						append($$anchor, div_3);
					};

					if_block(
						node_3,
						($$render) => {
							if (horizontal()) $$render(consequent_1); else $$render(alternate, false);
						},
						true
					);
				}

				append($$anchor, fragment_3);
			};

			if_block(node, ($$render) => {
				if (get$2(hidden)) $$render(consequent); else $$render(alternate_1, false);
			});
		}

		append($$anchor, fragment);
		pop();
	}

	function submitForm(e, dispatch, collectData) {
		e && e.preventDefault();
		dispatch("submit", collectData());
		return false;
	}

	function rejectForm(_, dispatch) {
		dispatch("reject");
	}

	var root_1$5 = template(`<div><span class="title"> </span></div>`);
	var root_2$3 = template(`<div class="notification is-success"><h3 class="form-success-message"> </h3></div>`);
	var root_4$3 = template(`<h5 class="title is-5"> </h5>`);
	var root_5$3 = template(`<h6 class="subtitle is-6"> </h6>`);
	var root_7 = template(`<button> </button>`);
	var root_8 = template(`<button> </button>`);
	var root_9 = template(`<div class="edit-form-error notification is-danger"> </div>`);
	var root_6$2 = template(`<div class="buttons is-grouped is-centered"><!> <!></div> <!>`, 1);
	var root_14 = template(`<div><!></div>`);
	var root_15 = template(`<div class="column notification is-danger"> </div>`);
	var root_11 = template(`<div class="columns"></div>`);
	var root_19 = template(`<div class="notification is-danger"> </div>`);
	var root_22 = template(`<span> </span>`);
	var root_21 = template(`<div class="edit-form-error notification is-danger"></div>`);
	var root_23 = template(`<button> </button>`);
	var root_24 = template(`<button> </button>`);
	var root_20 = template(`<!> <div class="buttons is-grouped is-centered"><!> <!></div>`, 1);
	var root_3$4 = template(`<!> <!> <!> <!> <!>`, 1);
	var root$6 = template(`<div class="form-container"><!> <!></div>`);

	function Form($$anchor, $$props) {
		push($$props, true);

		const $$stores = setup_stores();
		const $LOCALE = () => store_get(LOCALE, "$LOCALE", $$stores);
		let dispatch = createEventDispatcher();
		//validation status
		let formErrors = state(proxy([]));
		let formHasErrors = state(false);
		let fieldsHasErrors = state(false);
		let success = state(false);

		//input data
		//form structure object
		//hidden - no loader
		//container - parent container of form
		//fields list structure
		/**
		 * @typedef {Object} Props
		 * @property {any} [form] - {
		[fieldName: string] => description: object
		}
		 * @property {boolean} [loading] - state if form loading
		 * @property {string} [loader] - page - whole page
		 * @property {any} [fields] - each item is a row
		if item is array, then there few fields in a row
		[
		[name, age],
		[email, telephone]
		bio,
		agreed
		]
		 * @property {string} [SUCCESS_TEXT] - form result labels
		 * @property {string} [WAITING_TEXT]
		 * @property {string} [title] - form labels
		 * @property {string} [description]
		 * @property {boolean} [buttonsFirst] - if you want button on top
		 * @property {boolean} [horizontal] - if form fields should have horizontal layout
		 * @property {any} [submit] - buttons labels and availability
		 * @property {any} [cancel]
		 */
		/** @type {Props} */
		let form = prop($$props, "form", 31, () => proxy({})),
			loading = prop($$props, "loading", 15, false),
			loader = prop($$props, "loader", 3, "container"),
			fields = prop($$props, "fields", 19, () => []),
			SUCCESS_TEXT = prop($$props, "SUCCESS_TEXT", 3, "Операция завершена"),
			WAITING_TEXT = prop($$props, "WAITING_TEXT", 3, "Отправка данных на сервер"),
			title = prop($$props, "title", 3, ""),
			description = prop($$props, "description", 3, ""),
			buttonsFirst = prop($$props, "buttonsFirst", 3, false),
			horizontal = prop($$props, "horizontal", 3, false),
			submit = prop($$props, "submit", 19, () => ({ caption: "Отправить", enabled: true })),
			cancel = prop($$props, "cancel", 19, () => ({ caption: "Назад", enabled: true }));

		let formInvalid = derived(() => get$2(formHasErrors) || get$2(fieldsHasErrors));

		function collectData() {
			return FormHelpers.collectData(fields(), form());
		}

		function setFieldInvalid(fieldName, value, errors) {
			form(FormHelpers.setFieldInvalid(form(), fieldName, value, errors));
			set(fieldsHasErrors, true);
		}

		function setFieldValid(fieldName, value) {
			form(FormHelpers.setFieldValid(form(), fieldName, value));
		}

		function isFieldValid(fieldName) {
			return FormHelpers.isFieldValid(form(), fieldName);
		}

		function setFormFieldInvalid(fieldName, errors) {
			form(FormHelpers.setFormFieldInvalid(form(), fieldName, errors));
			dispatch(`field.invalid`, { fieldName });
		}

		function setFormFieldValid(fieldName) {
			form(FormHelpers.setFormFieldValid(form(), fieldName));
			dispatch(`field.valid`, { fieldName });
		}

		function updateFormValidationStatus(
			validationStatus /* FormValidationSession.getCompleteResult() */
		) {
			set(formHasErrors, false);
			set(fieldsHasErrors, false);

			if (Array.isArray(validationStatus.form) && validationStatus.form.length) {
				get$2(formErrors).splice(0, get$2(formErrors).length, ...validationStatus.form);
				set(formHasErrors, true);
			} else {
				get$2(formErrors).splice(0, get$2(formErrors).length);
			}

			set(formErrors, proxy(get$2(formErrors)));

			if (validationStatus.fields) {
				for (let fieldName of Object.keys(form())) {
					if (Array.isArray(validationStatus.fields[fieldName]) && validationStatus.fields[fieldName].length) {
						FormHelpers.setFormFieldInvalid(form(), fieldName, validationStatus.fields[fieldName]);
						set(fieldsHasErrors, true);
					} else {
						FormHelpers.setFormFieldValid(form(), fieldName);
					}
				}
			}
		}

		function showSuccess() {
			set(success, true);
		}

		function setLoading() {
			loading(true);
		}

		function resetLoading() {
			loading(false);
		}

		function setFieldsVisibility(fieldsList, val) {
			if (FormHelpers.setFieldsVisibility(form(), fieldsList, val)) {
				form(form());
			}
		}

		function setVisibleFields(fieldsList) {
			setFieldsVisibility(fieldsList, true);
		}

		function setInvisibleFields(fieldsList) {
			setFieldsVisibility(fieldsList, false);
		}

		function setFieldValue(fieldName, value) {
			if (FormHelpers.setFieldValue(form(), fieldName, value)) {
				onFieldChange({ detail: { field: fieldName, value } });
			}
		}

		function updateField(fieldName, props) {
			form(form()[fieldName] = { ...form()[fieldName], ...props }, true);
			form(form());
		}

		function onFieldChange(ev) {
			let data = ev.detail;

			form(form()[data.field].value = data.value, true);
			form(form());
			dispatch("change", data);
		}

		var div = root$6();
		var node = child(div);

		{
			var consequent = ($$anchor) => {
				var div_1 = root_1$5();
				var span = child(div_1);
				var text = child(span, true);

				reset(span);
				reset(div_1);

				template_effect(() => {
					set_class(div_1, `${(loader() === 'page' ? 'pageloader' : 'containerloader') ?? ""} ${(loading() ? 'is-active' : '') ?? ""}`);
					set_text(text, $LOCALE()[WAITING_TEXT()]);
				});

				append($$anchor, div_1);
			};

			if_block(node, ($$render) => {
				if (loader() !== "hidden") $$render(consequent);
			});
		}

		var node_1 = sibling(node, 2);

		{
			var consequent_1 = ($$anchor) => {
				var div_2 = root_2$3();
				var h3 = child(div_2);
				var text_1 = child(h3, true);

				reset(h3);
				reset(div_2);
				template_effect(() => set_text(text_1, $LOCALE()[SUCCESS_TEXT()]));
				append($$anchor, div_2);
			};

			var alternate_3 = ($$anchor) => {
				var fragment = root_3$4();
				var node_2 = first_child(fragment);

				{
					var consequent_2 = ($$anchor) => {
						var h5 = root_4$3();
						var text_2 = child(h5, true);

						reset(h5);
						template_effect(() => set_text(text_2, $LOCALE()[title()]));
						append($$anchor, h5);
					};

					if_block(node_2, ($$render) => {
						if (title()) $$render(consequent_2);
					});
				}

				var node_3 = sibling(node_2, 2);

				{
					var consequent_3 = ($$anchor) => {
						var h6 = root_5$3();
						var text_3 = child(h6, true);

						reset(h6);
						template_effect(() => set_text(text_3, $LOCALE()[description()]));
						append($$anchor, h6);
					};

					if_block(node_3, ($$render) => {
						if (description()) $$render(consequent_3);
					});
				}

				var node_4 = sibling(node_3, 2);

				{
					var consequent_7 = ($$anchor) => {
						var fragment_1 = root_6$2();
						var div_3 = first_child(fragment_1);
						var node_5 = child(div_3);

						{
							var consequent_4 = ($$anchor) => {
								var button = root_7();

								button.__click = [rejectForm, dispatch];

								var text_4 = child(button, true);

								reset(button);

								template_effect(() => {
									set_class(button, `button is-outlined ${cancel().classes ?? ""}`);
									set_text(text_4, $LOCALE()[cancel().caption]);
								});

								append($$anchor, button);
							};

							if_block(node_5, ($$render) => {
								if (cancel().enabled) $$render(consequent_4);
							});
						}

						var node_6 = sibling(node_5, 2);

						{
							var consequent_5 = ($$anchor) => {
								var button_1 = root_8();

								button_1.__click = [submitForm, dispatch, collectData];

								var text_5 = child(button_1, true);

								reset(button_1);

								template_effect(() => {
									button_1.disabled = get$2(formInvalid);
									set_class(button_1, `button is-primary is-hovered ${submit().classes ?? ""}`);
									set_text(text_5, $LOCALE()[submit().caption]);
								});

								append($$anchor, button_1);
							};

							if_block(node_6, ($$render) => {
								if (submit().enabled) $$render(consequent_5);
							});
						}

						reset(div_3);

						var node_7 = sibling(div_3, 2);

						{
							var consequent_6 = ($$anchor) => {
								var div_4 = root_9();
								var text_6 = child(div_4, true);

								template_effect(() => set_text(text_6, get$2(formErrors).join(", ")));
								reset(div_4);
								append($$anchor, div_4);
							};

							if_block(node_7, ($$render) => {
								if (get$2(formErrors).length > 0) $$render(consequent_6);
							});
						}

						append($$anchor, fragment_1);
					};

					if_block(node_4, ($$render) => {
						if (buttonsFirst()) $$render(consequent_7);
					});
				}

				var node_8 = sibling(node_4, 2);

				each(node_8, 17, fields, index$d, ($$anchor, field) => {
					var fragment_2 = comment();
					var node_9 = first_child(fragment_2);

					{
						var consequent_10 = ($$anchor) => {
							var div_5 = root_11();

							each(div_5, 21, () => get$2(field), index$d, ($$anchor, subfield) => {
								var fragment_3 = comment();
								var node_10 = first_child(fragment_3);

								{
									var consequent_9 = ($$anchor) => {
										var fragment_4 = comment();
										var node_11 = first_child(fragment_4);

										{
											var consequent_8 = ($$anchor) => {
												var div_6 = root_14();
												var node_12 = child(div_6);
												var controls = derived(() => [form()[get$2(subfield)]]);

												Field(node_12, {
													get controls() {
														return get$2(controls);
													},
													get name() {
														return get$2(subfield);
													},
													get horizontal() {
														return horizontal();
													},
													get label() {
														return form()[get$2(subfield)].label;
													},
													$$events: { change: onFieldChange }
												});

												reset(div_6);
												template_effect(() => set_class(div_6, `column ${(form()[get$2(subfield)].fieldSize ? 'is-' + form()[get$2(subfield)].fieldSize : '') ?? ""} `));
												append($$anchor, div_6);
											};

											if_block(node_11, ($$render) => {
												if (form()[get$2(subfield)].visible) $$render(consequent_8);
											});
										}

										append($$anchor, fragment_4);
									};

									var alternate = ($$anchor) => {
										var div_7 = root_15();
										var text_7 = child(div_7);

										reset(div_7);
										template_effect(() => set_text(text_7, `Subfield '${get$2(subfield) ?? ""}' is not registered`));
										append($$anchor, div_7);
									};

									if_block(node_10, ($$render) => {
										if (form()[get$2(subfield)] && form()[get$2(subfield)].component) $$render(consequent_9); else $$render(alternate, false);
									});
								}

								append($$anchor, fragment_3);
							});

							reset(div_5);
							append($$anchor, div_5);
						};

						var alternate_2 = ($$anchor) => {
							var fragment_5 = comment();
							var node_13 = first_child(fragment_5);

							{
								var consequent_12 = ($$anchor) => {
									var fragment_6 = comment();
									var node_14 = first_child(fragment_6);

									{
										var consequent_11 = ($$anchor) => {
											var controls_1 = derived(() => [form()[get$2(field)]]);

											Field($$anchor, {
												get controls() {
													return get$2(controls_1);
												},
												get name() {
													return get$2(field);
												},
												get horizontal() {
													return horizontal();
												},
												get label() {
													return form()[get$2(field)].label;
												},
												$$events: { change: onFieldChange }
											});
										};

										if_block(node_14, ($$render) => {
											if (form()[get$2(field)].visible) $$render(consequent_11);
										});
									}

									append($$anchor, fragment_6);
								};

								var alternate_1 = ($$anchor) => {
									var div_8 = root_19();
									var text_8 = child(div_8);

									reset(div_8);
									template_effect(() => set_text(text_8, `Field '${get$2(field) ?? ""}' is not registered`));
									append($$anchor, div_8);
								};

								if_block(
									node_13,
									($$render) => {
										if (form()[get$2(field)] && form()[get$2(field)].component) $$render(consequent_12); else $$render(alternate_1, false);
									},
									true
								);
							}

							append($$anchor, fragment_5);
						};

						if_block(node_9, ($$render) => {
							if (Array.isArray(get$2(field))) $$render(consequent_10); else $$render(alternate_2, false);
						});
					}

					append($$anchor, fragment_2);
				});

				var node_15 = sibling(node_8, 2);

				{
					var consequent_16 = ($$anchor) => {
						var fragment_8 = root_20();
						var node_16 = first_child(fragment_8);

						{
							var consequent_13 = ($$anchor) => {
								var div_9 = root_21();

								each(div_9, 21, () => get$2(formErrors), index$d, ($$anchor, formError) => {
									var span_1 = root_22();
									var text_9 = child(span_1, true);

									reset(span_1);
									template_effect(() => set_text(text_9, $LOCALE()[get$2(formError)]));
									append($$anchor, span_1);
								});

								reset(div_9);
								append($$anchor, div_9);
							};

							if_block(node_16, ($$render) => {
								if (get$2(formErrors).length > 0) $$render(consequent_13);
							});
						}

						var div_10 = sibling(node_16, 2);
						var node_17 = child(div_10);

						{
							var consequent_14 = ($$anchor) => {
								var button_2 = root_23();

								button_2.__click = [rejectForm, dispatch];

								var text_10 = child(button_2, true);

								reset(button_2);

								template_effect(() => {
									set_class(button_2, `button ${(cancel().classes ? cancel().classes : '') ?? ""}`);
									set_text(text_10, $LOCALE()[cancel().caption]);
								});

								append($$anchor, button_2);
							};

							if_block(node_17, ($$render) => {
								if (cancel().enabled) $$render(consequent_14);
							});
						}

						var node_18 = sibling(node_17, 2);

						{
							var consequent_15 = ($$anchor) => {
								var button_3 = root_24();

								button_3.__click = [submitForm, dispatch, collectData];

								var text_11 = child(button_3, true);

								reset(button_3);

								template_effect(() => {
									button_3.disabled = get$2(formInvalid);
									set_class(button_3, `button is-primary is-hovered ${(submit().classes ? submit().classes : '') ?? ""}`);
									set_text(text_11, $LOCALE()[submit().caption]);
								});

								append($$anchor, button_3);
							};

							if_block(node_18, ($$render) => {
								if (submit().enabled) $$render(consequent_15);
							});
						}

						reset(div_10);
						append($$anchor, fragment_8);
					};

					if_block(node_15, ($$render) => {
						if (!buttonsFirst()) $$render(consequent_16);
					});
				}

				append($$anchor, fragment);
			};

			if_block(node_1, ($$render) => {
				if (get$2(success)) $$render(consequent_1); else $$render(alternate_3, false);
			});
		}

		reset(div);
		append($$anchor, div);

		return pop({
			collectData,
			setFieldInvalid,
			setFieldValid,
			isFieldValid,
			setFormFieldInvalid,
			setFormFieldValid,
			updateFormValidationStatus,
			showSuccess,
			setLoading,
			resetLoading,
			setFieldsVisibility,
			setVisibleFields,
			setInvisibleFields,
			setFieldValue,
			updateField
		});
	}

	delegate(["click"]);

	const DEFAULT_RULES = {
	  notReadonly(v) {
	    return {
	      readonly: !v
	    };
	  },
	  readonly(v) {
	    return {
	      readonly: v
	    };
	  },
	  enable(v) {
	    return {
	      disabled: !v
	    };
	  },
	  disable(v) {
	    return {
	      disabled: v
	    };
	  }
	};
	let notFormRules = /*#__PURE__*/function () {
	  function notFormRules() {
	    _classCallCheck(this, notFormRules);
	  }
	  return _createClass(notFormRules, null, [{
	    key: "add",
	    value: function add(name, func) {
	      if (!notCommon$1.objHas(_assertClassBrand(notFormRules, this, _RULES)._, name)) {
	        _assertClassBrand(notFormRules, this, _RULES)._[name] = func;
	      }
	    }
	  }, {
	    key: "remove",
	    value: function remove(name) {
	      if (notCommon$1.objHas(_assertClassBrand(notFormRules, this, _RULES)._, name) && !Object.keys(DEFAULT_RULES).includes(name)) {
	        delete _assertClassBrand(notFormRules, this, _RULES)._[name];
	      }
	    }
	  }, {
	    key: "exec",
	    value: function exec(rule, master, slaves, value, form) {
	      return _assertClassBrand(notFormRules, this, _RULES)._[rule](value, master, slaves, form);
	    }
	  }]);
	}();
	var _RULES = {
	  _: {
	    ...DEFAULT_RULES
	  }
	};

	const DEFAULT_CONTAINER_SELECTOR$1 = ".form";
	const DEFAULT_ACTION_NAME = "default";
	var _uiComponent = /*#__PURE__*/new WeakMap();
	var _validationRunner = /*#__PURE__*/new WeakMap();
	var _form$1 = /*#__PURE__*/new WeakMap();
	var _action = /*#__PURE__*/new WeakMap();
	var _fields = /*#__PURE__*/new WeakMap();
	var _variants = /*#__PURE__*/new WeakMap();
	var _notForm_brand = /*#__PURE__*/new WeakSet();
	let notForm = /*#__PURE__*/function (_notBase) {
	  //variants for UI

	  function notForm({
	    target = null,
	    name = "Default",
	    options = {},
	    working = {},
	    data: _data = {},
	    ui = Form //default UI
	  }) {
	    var _this;
	    _classCallCheck(this, notForm);
	    _this = _callSuper(this, notForm, [{
	      working: {
	        name: `${name}Form`,
	        ...working
	      },
	      options,
	      data: _data
	    }]);
	    _classPrivateMethodInitSpec(_this, _notForm_brand);
	    //UI renderer component class constructor
	    _classPrivateFieldInitSpec(_this, _uiComponent, null);
	    //form validation
	    _classPrivateFieldInitSpec(_this, _validationRunner, null);
	    //ui component
	    _classPrivateFieldInitSpec(_this, _form$1, null);
	    //model.action
	    _classPrivateFieldInitSpec(_this, _action, DEFAULT_ACTION_NAME);
	    //fields schemas
	    _classPrivateFieldInitSpec(_this, _fields, new Lib());
	    //fields of UI
	    //variants sets for select menus and so on
	    _classPrivateFieldInitSpec(_this, _variants, null);
	    _classPrivateFieldSet2(_variants, _this, new Lib(VARIANTS$1.getContent()));
	    if (target) {
	      _this.setOptions("target", target);
	    }
	    _classPrivateFieldSet2(_uiComponent, _this, ui);
	    if (notCommon$1.objHas(options, "action")) {
	      _classPrivateFieldSet2(_action, _this, options.action);
	    }
	    _this.initForm();
	    return _this;
	  }
	  _inherits(notForm, _notBase);
	  return _createClass(notForm, [{
	    key: "initForm",
	    value: function initForm() {
	      if (this.getOptions("autoInit", true)) {
	        this.initLibs();
	      }
	      if (this.getOptions("autoRender", true)) {
	        this.initUI();
	      }
	    }
	  }, {
	    key: "initLibs",
	    value: function initLibs() {
	      this.initFields();
	      this.initVariants();
	      this.initValidator();
	    }
	  }, {
	    key: "reInit",
	    value: function reInit() {
	      this.initLibs();
	      this.updateUI();
	      this.resetLoading();
	    }
	  }, {
	    key: "initFields",
	    value: function initFields() {
	      const manifest = this.getFormManifest();
	      if (notCommon$1.objHas(manifest, "fields") && _classPrivateFieldGet2(_fields, this).isEmpty()) {
	        _classPrivateFieldGet2(_fields, this).import(manifest.fields); //all fields available in model manifest
	      }
	    }
	  }, {
	    key: "initVariants",
	    value: function initVariants() {
	      if (this.getOptions("variants")) {
	        _classPrivateFieldGet2(_variants, this).import(this.getOptions("variants"));
	      }
	    }

	    //creating validators runner for this specific form
	  }, {
	    key: "initValidator",
	    value: function initValidator() {
	      _classPrivateFieldSet2(_validationRunner, this, srcExports.Runner(this.getFormValidators()));
	    }
	  }, {
	    key: "initUI",
	    value: function initUI() {
	      try {
	        const props = _assertClassBrand(_notForm_brand, this, _getFormProps).call(this, {
	          manifest: this.getFormManifest(),
	          formOptions: this.getFormOptions(),
	          data: this.getFormData(),
	          injectedProps: this.getFormInjectedProps()
	        });
	        const target = this.getFormTargetEl();
	        while (target.children.length) target.removeChild(target.firstChild);
	        _classPrivateFieldSet2(_form$1, this, new (_classPrivateFieldGet2(_uiComponent, this))({
	          target,
	          props
	        }));
	        _assertClassBrand(_notForm_brand, this, _bindUIEvents).call(this);
	        this.validateForm();
	      } catch (e) {
	        this.error(e);
	      }
	    }
	  }, {
	    key: "updateUI",
	    value: function updateUI() {
	      try {
	        const props = _assertClassBrand(_notForm_brand, this, _getFormProps).call(this, {
	          manifest: this.getFormManifest(),
	          formOptions: this.getFormOptions(),
	          data: this.getFormData(),
	          injectedProps: this.getFormInjectedProps()
	        });
	        _classPrivateFieldGet2(_form$1, this).$set(props);
	        this.validateForm();
	      } catch (e) {
	        this.error(e);
	      }
	    }
	  }, {
	    key: "validateForm",
	    value: async function validateForm() {
	      if (this.getOptions("readonly", false)) {
	        return;
	      }
	      try {
	        const validationResult = await _classPrivateFieldGet2(_validationRunner, this).call(this, _classPrivateFieldGet2(_form$1, this).collectData(), this.getFormAction());
	        _classPrivateFieldGet2(_form$1, this).updateFormValidationStatus(validationResult.getReport());
	        if (!validationResult.clean) {
	          this.emit("error", validationResult.getReport());
	        }
	      } catch (e) {
	        const report = {
	          form: [UICommon$1.ERROR_DEFAULT, e.message]
	        };
	        _classPrivateFieldGet2(_form$1, this) && _classPrivateFieldGet2(_form$1, this).updateFormValidationStatus(report);
	        this.emit("error", report);
	        notCommon$1.report(e);
	      }
	    }
	  }, {
	    key: "submit",
	    value: function submit(data) {
	      this.emit("submit", data);
	    }
	  }, {
	    key: "reject",
	    value: function reject() {
	      this.emit("reject");
	    }

	    //binding event to actual UI
	  }, {
	    key: "$on",
	    value: function $on() {
	      if (_classPrivateFieldGet2(_form$1, this)) {
	        _classPrivateFieldGet2(_form$1, this).$on(...arguments);
	      }
	    }
	  }, {
	    key: "setLoading",
	    value: function setLoading() {
	      this.emit("loading");
	      _classPrivateFieldGet2(_form$1, this).setLoading();
	    }
	  }, {
	    key: "resetLoading",
	    value: function resetLoading() {
	      this.emit("loaded");
	      _classPrivateFieldGet2(_form$1, this).resetLoading();
	    }
	  }, {
	    key: "destroy",
	    value: function destroy() {
	      this.emit("destroy");
	      if (_classPrivateFieldGet2(_form$1, this)) {
	        _classPrivateFieldGet2(_form$1, this).$destroy && _classPrivateFieldGet2(_form$1, this).$destroy();
	        _classPrivateFieldGet2(_form$1, this).destroy && _classPrivateFieldGet2(_form$1, this).destroy();
	        _classPrivateFieldSet2(_form$1, this, null);
	      }
	      _classPrivateFieldSet2(_validationRunner, this, null);
	      _classPrivateFieldSet2(_action, this, null);
	      _classPrivateFieldSet2(_fields, this, null);
	      _classPrivateFieldSet2(_variants, this, null);
	      this.setOptions(null);
	      this.setWorking(null);
	      this.setData(null);
	    }
	  }, {
	    key: "getName",
	    value: function getName() {
	      return this.getWorking("name");
	    }
	  }, {
	    key: "getFormAction",
	    value: function getFormAction() {
	      return _classPrivateFieldGet2(_action, this);
	    }
	  }, {
	    key: "setFormAction",
	    value: function setFormAction(val) {
	      if (val && val !== _classPrivateFieldGet2(_action, this)) {
	        _classPrivateFieldSet2(_action, this, val);
	        _classPrivateFieldGet2(_form$1, this) && _classPrivateFieldGet2(_form$1, this).$destroy();
	        this.initForm();
	      }
	    }
	  }, {
	    key: "processResult",
	    value: function processResult(result) {
	      if (result.status === DEFAULT_STATUS_SUCCESS) {
	        this.setFormSuccess();
	        return true;
	      } else {
	        this.setFormErrors(result);
	        return false;
	      }
	    }

	    /**
	     *   Form validation result
	     **/
	  }, {
	    key: "setFormSuccess",
	    value: function setFormSuccess() {
	      _classPrivateFieldGet2(_form$1, this).showSuccess();
	      this.emit("success");
	    }
	  }, {
	    key: "setFormErrors",
	    value: function setFormErrors(result) {
	      if (this.getOptions("readonly", false)) {
	        return;
	      }
	      const status = {
	        form: [],
	        fields: {}
	      };
	      if (result.message) {
	        status.form.push(result.message);
	      }
	      if (result.errors && Object.keys(result.errors).length > 0) {
	        status.fields = {
	          ...result.errors
	        };
	      }
	      _classPrivateFieldGet2(_form$1, this).updateFormValidationStatus(status);
	      this.emit("error", status);
	    }

	    /**
	     * Returns variant by collection name and item id
	     * @param {string}         name  name of the variants collection
	     * @param {string|number}  id    item identificator
	     * @returns {object}             item
	     **/
	  }, {
	    key: "getVariant",
	    value: function getVariant(name, id) {
	      let lib = _classPrivateFieldGet2(_variants, this).get(name);
	      let result = lib.find(function (item) {
	        return item.id === id;
	      });
	      if (result) {
	        return result;
	      }
	      return null;
	    }

	    /***
	     * Redefinable getters
	     **/
	  }, {
	    key: "getFormTargetEl",
	    value: function getFormTargetEl() {
	      const targetEl = this.getOptions("target", DEFAULT_CONTAINER_SELECTOR$1);
	      if (targetEl instanceof HTMLElement) {
	        return targetEl;
	      } else if (typeof targetEl === "string") {
	        return document.querySelector(targetEl);
	      } else {
	        throw new Error("Form parent element is not defined");
	      }
	    }
	  }, {
	    key: "getFormValidators",
	    value: function getFormValidators() {
	      if (this.getOptions("validators")) {
	        return this.getOptions("validators", {});
	      } else {
	        _assertClassBrand(_notForm_brand, this, _missingOverrideWarning).call(this, "validators");
	        return {};
	      }
	    }
	  }, {
	    key: "getFormManifest",
	    value: function getFormManifest() {
	      const modelName = this.getModelName();
	      if (modelName && notCommon$1.getApp()) {
	        return notCommon$1.getApp().getInterfaceManifest(modelName);
	      }
	      if (this.getOptions("manifest", undefined)) {
	        return this.getOptions("manifest", {});
	      } else {
	        _assertClassBrand(_notForm_brand, this, _missingOverrideWarning).call(this, "manifest");
	        return {};
	      }
	    }
	  }, {
	    key: "getFormData",
	    value: function getFormData() {
	      if (this.getData()) {
	        return this.getData();
	      } else {
	        _assertClassBrand(_notForm_brand, this, _missingOverrideWarning).call(this, "data");
	        return {};
	      }
	    }
	  }, {
	    key: "getFormOptions",
	    value: function getFormOptions() {
	      if (this.getOptions("ui", undefined) || this.getOptions("fields", undefined)) {
	        return {
	          ui: this.getOptions("ui", {}),
	          fields: this.getOptions("fields", {})
	        };
	      } else {
	        _assertClassBrand(_notForm_brand, this, _missingOverrideWarning).call(this, "options");
	        return {
	          ui: {},
	          fields: {}
	        };
	      }
	    }
	  }, {
	    key: "getFormInjectedProps",
	    value: function getFormInjectedProps() {
	      return this.getOptions("injected", {});
	    }

	    /**
	     * Override empty message
	     **/
	  }, {
	    key: "collectData",
	    value:
	    /**
	     * Form operations
	     **/
	    function collectData() {
	      if (this.getOptions("readonly", false)) {
	        return this.getData();
	      }
	      const data = _classPrivateFieldGet2(_form$1, this).collectData();
	      this.setData({
	        ...data
	      }); //update in inner store
	      return data;
	    }
	  }, {
	    key: "updateField",
	    value: function updateField(fieldName, props) {
	      _classPrivateFieldGet2(_form$1, this).updateField(fieldName, props);
	    }
	  }, {
	    key: "getModel",
	    value: function getModel(name, data) {
	      if (typeof name === "string") {
	        return this.getInterface(name)(data || {});
	      } else {
	        return this.getInterface()(name || {});
	      }
	    }
	  }, {
	    key: "getInterface",
	    value: function getInterface(name = false) {
	      return notCommon$1.getApp().getInterface(name || this.getModelName());
	    }

	    /**
	     *  Returns current model name
	     *  @return {string}
	     */
	  }, {
	    key: "getModelName",
	    value: function getModelName() {
	      return this.getOptions("model");
	    }
	  }]);
	}(notBase);
	function _bindUIEvents() {
	  var _this2 = this;
	  _classPrivateFieldGet2(_form$1, this).$on("change", function () {
	    return _this2.validateForm();
	  });
	  _classPrivateFieldGet2(_form$1, this).$on("change", function (ev) {
	    _this2.emit("change", ev.detail);
	    _this2.emit(`change.${ev.detail.field}`, ev.detail.value);
	  });
	  _classPrivateFieldGet2(_form$1, this).$on("submit", function (ev) {
	    return _this2.submit(ev.detail);
	  });
	  _classPrivateFieldGet2(_form$1, this).$on("reject", function () {
	    return _this2.reject();
	  });
	  _classPrivateFieldGet2(_form$1, this).$on("error", function ({
	    detail
	  }) {
	    return _this2.emit("error", detail);
	  });
	  _assertClassBrand(_notForm_brand, this, _bindMasterSlaveEvents).call(this);
	}
	function _bindMasterSlaveEvents() {
	  const masters = this.getOptions("masters", false);
	  if (!masters) {
	    return;
	  }
	  for (let master in masters) {
	    const rules = masters[master];
	    for (let ruleName in rules) {
	      const ruleSlaves = rules[ruleName];
	      _assertClassBrand(_notForm_brand, this, _addMasterSlaveEvents).call(this, ruleName, master, ruleSlaves);
	    }
	  }
	}
	function _addMasterSlaveEvents(rule, master, slaves = []) {
	  var _this3 = this;
	  this.on(`change.${master}`, function (value) {
	    _assertClassBrand(_notForm_brand, _this3, _execSlaveRule).call(_this3, rule, master, slaves, value);
	  });
	  this.emit(`change.${master}`, this.getFormData()[master]);
	}
	function _execSlaveRule(rule, master, slaves, value) {
	  var _this4 = this;
	  const cmd = notFormRules.exec(rule, master, slaves, value, this);
	  slaves.forEach(function (slaveField) {
	    _this4.updateField(slaveField, cmd);
	  });
	}
	function _getFormProps({
	  manifest,
	  //model manifest
	  formOptions = {
	    ui: {},
	    fields: {}
	  },
	  //some options
	  data = null,
	  //initial data for form
	  injectedProps = {}
	}) {
	  const action = _classPrivateFieldGet2(_action, this);
	  if (typeof formOptions === "undefined" || formOptions === null) {
	    formOptions = {
	      ui: {},
	      fields: {}
	    };
	  }
	  const form = FormHelpers.initFormByField(
	  //form seed object
	  {},
	  /*
	  Form structure
	  [
	  //each item is line of form
	  //field - field takes whole line of form
	  //[field1, field2] - few fields in one line
	  nameFirst, nameLast
	  [age, country, language],
	  [email, telephone]
	  ]
	  */
	  manifest.actions[action].fields,
	  //form fields structure
	  _classPrivateFieldGet2(_variants, this),
	  //variants library
	  _classPrivateFieldGet2(_fields, this),
	  //fields library
	  formOptions.fields,
	  //form wide fields options
	  data);
	  return {
	    //if no auto init of form structure, set to loading state
	    loading: !this.getOptions("autoInit", true),
	    title: manifest.actions[action].title,
	    description: manifest.actions[action].description,
	    fields: manifest.actions[action].fields,
	    form,
	    //injecting options to UI from top level input
	    ...formOptions.ui,
	    //form UI options
	    ...injectedProps
	  };
	}
	function _missingOverrideWarning(missing) {
	  this.error(`${missing} for ${this.getWorking("name")} form is not defined`);
	}

	var root$5 = template(`<div class="block-container"><div class="form-paper"></div> <!></div>`);

	function Form_set($$anchor, $$props) {
		push($$props, true);

		let dispatch = createEventDispatcher();

		/**
		 * @typedef {Object} Props
		 * @property {string} [name]
		 * @property {boolean} [showModes]
		 * @property {string} [mode]
		 * @property {any} [forms]
		 */
		/** @type {Props} */
		let name = prop($$props, "name", 3, 'default-form'),
			showModes = prop($$props, "showModes", 3, false),
			mode = prop($$props, "mode", 15, 'default'),
			forms = prop($$props, "forms", 19, () => []);

		function setMode(val) {
			mode(val);
			dispatch('mode', val);
			updateModesButtons();
		}

		let FORMS_BUTTONS = state(proxy([]));

		function updateModesButtons() {
			set(FORMS_BUTTONS, proxy(forms().filter((form) => {
				return mode() !== form.mode;
			}).map((form) => {
				return {
					title: form.title,
					outlined: true,
					type: 'link',
					action() {
						setMode(form.mode);
					}
				};
			})));
		}

		onMount(() => {
			updateModesButtons();
		});

		var div = root$5();
		var div_1 = child(div);
		var node = sibling(div_1, 2);

		{
			var consequent = ($$anchor) => {
				Ui_buttons($$anchor, {
					centered: true,
					classes: "mt-4",
					get values() {
						return get$2(FORMS_BUTTONS);
					},
					set values($$value) {
						set(FORMS_BUTTONS, proxy($$value));
					}
				});
			};

			if_block(node, ($$render) => {
				if (showModes()) $$render(consequent);
			});
		}

		reset(div);

		template_effect(() => {
			set_attribute(div, "id", `${name() ?? ""}-form-set`);
			set_attribute(div_1, "id", `${name() ?? ""}-form-set-container`);
		});

		append($$anchor, div);
		pop();
	}

	const DEFAULT_CONTAINER_SELECTOR = ".form-set";
	const DEFAULT_FORM_SET_NAME = "form-set";
	var _formSetComponent = /*#__PURE__*/new WeakMap();
	var _formComponent = /*#__PURE__*/new WeakMap();
	var _form = /*#__PURE__*/new WeakMap();
	var _frame = /*#__PURE__*/new WeakMap();
	var _notFormSet_brand = /*#__PURE__*/new WeakSet();
	let notFormSet = /*#__PURE__*/function (_notBase) {
	  /*
	  new notFormSet({
	  options:{
	    target: el,
	    forms: [{
	      mode: 'form1',
	      title: 'Form 1',
	      form: formConstructor1 //custom constructors
	    },{
	      mode: 'form2',
	      title: 'Form 2',
	      props: {}             //params to create notForm instance
	    },{
	      mode: 'form3',
	      title: 'Form 3',
	      form: formConstructor3 //custom constructors
	    }]
	  }
	  });
	  */

	  function notFormSet({
	    options = {},
	    formComponent = Form,
	    formSetComponent = Form_set
	  }) {
	    var _this;
	    _classCallCheck(this, notFormSet);
	    _this = _callSuper(this, notFormSet, [{
	      options: {
	        name: DEFAULT_FORM_SET_NAME,
	        mode: "default",
	        showModes: true,
	        ...options
	      }
	    }]);
	    _classPrivateMethodInitSpec(_this, _notFormSet_brand);
	    _classPrivateFieldInitSpec(_this, _formSetComponent, null);
	    _classPrivateFieldInitSpec(_this, _formComponent, null);
	    _classPrivateFieldInitSpec(_this, _form, null);
	    _classPrivateFieldInitSpec(_this, _frame, null);
	    _classPrivateFieldSet2(_formComponent, _this, formComponent);
	    _classPrivateFieldSet2(_formSetComponent, _this, formSetComponent);
	    _this.setFormMode(_this.getOptions("mode"));
	    _this.initUI();
	    return _this;
	  }

	  /**
	   * Initalizing form frame mode, with switchers between modes
	   **/
	  _inherits(notFormSet, _notBase);
	  return _createClass(notFormSet, [{
	    key: "initUI",
	    value: function initUI() {
	      var _this2 = this;
	      const target = this.getFrameTargetEl();
	      while (target.children.length) target.removeChild(target.firstChild);
	      _classPrivateFieldSet2(_frame, this, new (_classPrivateFieldGet2(_formSetComponent, this))({
	        target,
	        props: _assertClassBrand(_notFormSet_brand, this, _getFrameProps).call(this)
	      }));
	      _classPrivateFieldGet2(_frame, this).$on("mode", function (ev) {
	        _this2.setFormMode(ev.detail);
	        _this2.updateForm();
	      });
	      this.updateForm();
	    }
	  }, {
	    key: "setFormMode",
	    value: function setFormMode(name) {
	      if (this.isModeExists(name)) {
	        this.setWorking("mode", name);
	      } else {
	        this.setWorking("mode", this.getFirstMode());
	        this.updateFormModeInUI();
	      }
	    }
	  }, {
	    key: "updateFormModeInUI",
	    value: function updateFormModeInUI() {
	      if (_classPrivateFieldGet2(_frame, this) && this.getWorking("mode") !== null) {
	        _classPrivateFieldGet2(_frame, this).$set({
	          mode: this.getWorking("mode")
	        });
	      }
	    }
	  }, {
	    key: "getFormMode",
	    value: function getFormMode() {
	      return this.getWorking("mode");
	    }
	  }, {
	    key: "updateForm",
	    value: function updateForm() {
	      this.destroyForm();
	      if (this.getWorking("mode") !== null) {
	        this.renderForm();
	      }
	    }
	  }, {
	    key: "renderForm",
	    value: function renderForm() {
	      var _this3 = this;
	      const targetEl = this.getFormTargetEl();
	      const formConfig = this.getFormConfig();
	      if (!(targetEl instanceof HTMLElement && formConfig)) {
	        throw new Error("error while form rendering");
	      }
	      const changeMode = function (mode) {
	        _this3.setFormMode(mode);
	        _this3.updateForm();
	      };
	      if (formConfig.form) {
	        while (targetEl.children.length) targetEl.removeChild(targetEl.firstChild);
	        _classPrivateFieldSet2(_form, this, new formConfig.form({
	          options: {
	            target: targetEl,
	            changeMode
	          }
	        }));
	      } else if (formConfig.props) {
	        _classPrivateFieldSet2(_form, this, new (_classPrivateFieldGet2(_formComponent, this))({
	          target: targetEl,
	          ...formConfig.props,
	          changeMode
	        }));
	      }
	    }
	  }, {
	    key: "getFormConfig",
	    value: function getFormConfig() {
	      var _this4 = this;
	      return this.getOptions("forms").find(function (form) {
	        return form.mode === _this4.getFormMode();
	      });
	    }
	  }, {
	    key: "destroyForm",
	    value: function destroyForm() {
	      const containerEl = this.getFormTargetEl();
	      if (containerEl) {
	        while (containerEl.firstChild) {
	          containerEl.removeChild(containerEl.lastChild);
	        }
	      }
	      if (_classPrivateFieldGet2(_form, this) && _classPrivateFieldGet2(_form, this).$destroy) {
	        _classPrivateFieldGet2(_form, this).$destroy();
	      }
	      _classPrivateFieldSet2(_form, this, null);
	    }
	  }, {
	    key: "destroyFrame",
	    value: function destroyFrame() {
	      if (_classPrivateFieldGet2(_frame, this) && _classPrivateFieldGet2(_frame, this).$destroy) {
	        _classPrivateFieldGet2(_frame, this).$destroy();
	      }
	      _classPrivateFieldSet2(_frame, this, null);
	    }
	  }, {
	    key: "isModeExists",
	    value: function isModeExists(mode) {
	      const forms = this.getOptions("forms", []);
	      return forms.some(function (item) {
	        return item.mode === mode;
	      });
	    }
	  }, {
	    key: "getFirstMode",
	    value: function getFirstMode() {
	      const forms = this.getOptions("forms", []);
	      if (forms.length > 0) {
	        return forms[0].mode;
	      }
	      return null;
	    }
	  }, {
	    key: "destroy",
	    value: function destroy() {
	      _classPrivateFieldSet2(_formSetComponent, this, null);
	      _classPrivateFieldSet2(_formComponent, this, null);
	      this.destroyForm();
	      this.destroyFrame();
	      this.setData(null);
	      this.setOptions(null);
	      this.setWorking(null);
	    }
	  }, {
	    key: "getFrameTargetEl",
	    value: function getFrameTargetEl() {
	      const target = this.getOptions("target", DEFAULT_CONTAINER_SELECTOR);
	      if (target instanceof HTMLElement) {
	        return target;
	      } else if (typeof target === "string") {
	        return document.querySelector(target);
	      } else {
	        throw new Error("form set target is not HTMLElement or string");
	      }
	    }
	  }, {
	    key: "getFormTargetEl",
	    value: function getFormTargetEl() {
	      const name = this.getOptions("name", DEFAULT_FORM_SET_NAME);
	      return document.querySelector(`#${name}-form-set-container`);
	    }
	  }]);
	}(notBase);
	function _getFrameProps() {
	  return {
	    showModes: this.getOptions("showModes", true),
	    mode: this.getFormMode(),
	    forms: this.getOptions("forms", []),
	    name: this.getOptions("name", DEFAULT_FORM_SET_NAME)
	  };
	}

	function onClick$5(ev, go) {
		if (typeof go() === 'function') {
			ev.preventDefault();
			go()(ev.currentTarget.dataset.href);
			return false;
		} else {
			return true;
		}
	}

	var root_3$3 = template(`<li class="is-active"><a aria-current="page"> </a></li>`);
	var root_5$2 = template(`<li class="is-plain-crumb"> </li>`);
	var root_6$1 = template(`<li><a> </a></li>`);
	var root_1$4 = template(`<nav class="breadcrumb" aria-label="breadcrumbs"><ul></ul></nav>`);

	function Ui_breadcrumbs($$anchor, $$props) {
		push($$props, true);

		const $$stores = setup_stores();
		const $LOCALE = () => store_get(LOCALE, "$LOCALE", $$stores);

		/**
		 * @typedef {Object} Props
		 * @property {string} [root]
		 * @property {any} [items]
		 * @property {any} [go]
		 */
		/** @type {Props} */
		let root = prop($$props, "root", 3, ''),
			items = prop($$props, "items", 19, () => []),
			go = prop($$props, "go", 3, null);

		var nav = root_1$4();
		var ul = child(nav);

		each(ul, 21, items, index$d, ($$anchor, link, index) => {
			var fragment = comment();
			var node = first_child(fragment);

			{
				var consequent = ($$anchor) => {
					var li = root_3$3();
					var a = child(li);
					var text = child(a, true);

					reset(a);
					reset(li);

					template_effect(() => {
						set_attribute(a, "href", `${root() ?? ""}${get$2(link).url ?? ""}`);
						set_attribute(a, "data-href", get$2(link).url);
						set_text(text, $LOCALE()[get$2(link).title]);
					});

					append($$anchor, li);
				};

				var alternate_1 = ($$anchor) => {
					var fragment_1 = comment();
					var node_1 = first_child(fragment_1);

					{
						var consequent_1 = ($$anchor) => {
							var li_1 = root_5$2();
							var text_1 = child(li_1, true);

							reset(li_1);
							template_effect(() => set_text(text_1, $LOCALE()[get$2(link).title]));
							append($$anchor, li_1);
						};

						var alternate = ($$anchor) => {
							var li_2 = root_6$1();
							var a_1 = child(li_2);

							a_1.__click = [onClick$5, go];

							var text_2 = child(a_1, true);

							reset(a_1);
							reset(li_2);

							template_effect(() => {
								set_attribute(a_1, "href", `${root() ?? ""}${get$2(link).url ?? ""}`);
								set_attribute(a_1, "data-href", get$2(link).url);
								set_text(text_2, $LOCALE()[get$2(link).title]);
							});

							append($$anchor, li_2);
						};

						if_block(node_1, ($$render) => {
							if (get$2(link).url === false) $$render(consequent_1); else $$render(alternate, false);
						});
					}

					append($$anchor, fragment_1);
				};

				if_block(node, ($$render) => {
					if (items().length === index + 1) $$render(consequent); else $$render(alternate_1, false);
				});
			}

			append($$anchor, fragment);
		});

		reset(ul);
		reset(nav);
		append($$anchor, nav);
		pop();
	}

	delegate(["click"]);

	let notBreadcrumbs = /*#__PURE__*/function () {
	  function notBreadcrumbs() {
	    _classCallCheck(this, notBreadcrumbs);
	  }
	  return _createClass(notBreadcrumbs, null, [{
	    key: "render",
	    value: function render({
	      target,
	      root = '',
	      navigate
	    }) {
	      this.remove();
	      if (notBreadcrumbs.UIConstructor) {
	        this.ui = new notBreadcrumbs.UIConstructor({
	          target,
	          props: {
	            items: this.getBreadcrumbs(),
	            root: root,
	            go: navigate
	          }
	        });
	      }
	    }
	  }, {
	    key: "setHead",
	    value: function setHead(head) {
	      this.head.splice(0, this.head.length, ...head);
	      return this;
	    }
	  }, {
	    key: "setTail",
	    value: function setTail(tail) {
	      this.tail.splice(0, this.tail.length, ...tail);
	      return this;
	    }
	  }, {
	    key: "getBreadcrumbs",
	    value: function getBreadcrumbs() {
	      let crumbs = [];
	      crumbs.push(...this.head);
	      crumbs.push(...this.tail);
	      return crumbs;
	    }
	  }, {
	    key: "update",
	    value: function update() {
	      if (this.ui) {
	        this.ui.$set({
	          items: this.getBreadcrumbs()
	        });
	      }
	    }
	  }, {
	    key: "remove",
	    value: function remove() {
	      if (this.ui) {
	        this.ui.$destroy();
	        this.ui = null;
	      }
	      return this;
	    }
	  }]);
	}();
	_defineProperty(notBreadcrumbs, "UIConstructor", null);
	_defineProperty(notBreadcrumbs, "ui", null);
	_defineProperty(notBreadcrumbs, "head", []);
	_defineProperty(notBreadcrumbs, "tail", []);

	notBreadcrumbs.UIConstructor = Ui_breadcrumbs;

	var _Menu;
	let Menu = /*#__PURE__*/function () {
	  function Menu() {
	    _classCallCheck(this, Menu);
	  }
	  return _createClass(Menu, null, [{
	    key: "hide",
	    value: function hide() {}
	  }, {
	    key: "setApp",
	    value: function setApp(app) {
	      if (!this.app) {
	        this.app = app;
	      }
	      return this;
	    }
	  }, {
	    key: "setOptions",
	    value: function setOptions(options) {
	      this.options = {
	        ...this.options,
	        ...options
	      };
	      return this;
	    }
	  }, {
	    key: "getOptionsPathTo",
	    value: function getOptionsPathTo(what) {
	      return `menu.${this.options.type}.${what}`;
	    }
	  }, {
	    key: "isDirectNavigation",
	    value: function isDirectNavigation() {
	      return this.app ? this.app.getOptions(this.getOptionsPathTo("directNavigation"), this.options.directNavigation) : this.options.directNavigation;
	    }
	  }, {
	    key: "getOptions",
	    value: function getOptions() {
	      if (this.app) {
	        return {
	          brand: this.app.getOptions("brand", this.options.brand),
	          items: this.app.getOptions(this.getOptionsPathTo("items"), this.options.items),
	          sections: this.app.getOptions(this.getOptionsPathTo("sections"), this.options.sections),
	          targetSelector: this.app.getOptions(this.getOptionsPathTo("targetSelector"), this.options.targetSelector),
	          toggleSelector: this.app.getOptions(this.getOptionsPathTo("toggleSelector"), this.options.toggleSelector),
	          open: this.app.getOptions(this.getOptionsPathTo("open"), this.options.open),
	          directNavigation: this.app.getOptions(this.getOptionsPathTo("directNavigation"), this.options.directNavigation),
	          root: this.app.getOptions("router.root", this.options.root),
	          navigate: this.options.navigate.bind(this),
	          getComponent: this.getComponent.bind(this)
	        };
	      } else {
	        return this.options;
	      }
	    }
	  }, {
	    key: "getComponent",
	    value: function getComponent(name) {
	      if (COMPONENTS$1.contains(name)) {
	        return COMPONENTS$1.get(name);
	      } else {
	        return false;
	      }
	    }
	  }, {
	    key: "initField",
	    value: function initField(list, fields = []) {
	      var _this = this;
	      list.forEach(function (item) {
	        fields.forEach(function (field) {
	          if (!Object.hasOwn(item, field)) {
	            item[field] = _this.DEFAULT[field];
	          }
	        });
	        if (Object.hasOwn(item, "items")) {
	          _this.initField(item.items, fields);
	        }
	      });
	    }
	  }, {
	    key: "sortList",
	    value: function sortList(list) {
	      var _this2 = this;
	      list.sort(function (item1, item2) {
	        if (Object.hasOwn(item1, "items")) {
	          _this2.sortList(item1.items);
	        }
	        if (Object.hasOwn(item2, "items")) {
	          _this2.sortList(item2.items);
	        }
	        if (item1.priority === item2.priority) {
	          return item1.title > item2.title ? 1 : -1;
	        } else {
	          return item1.priority < item2.priority ? 1 : -1;
	        }
	      });
	    }
	  }, {
	    key: "removeDublicates",
	    value: function removeDublicates(sections) {
	      for (let i = 0; i < sections.length; i++) {
	        let priority = sections[i].priority;
	        sections.filter(function (section) {
	          return section.id === sections[i].id;
	        }).forEach(function (item, indx) {
	          if (indx === 0) {
	            return;
	          }
	          if (item.priority < priority) {
	            priority = item.priority;
	          }
	          sections.splice(sections.indexOf(item), 1);
	        });
	        sections[i].priority = priority;
	      }
	      return sections;
	    }
	  }, {
	    key: "prepareData",
	    value: function prepareData() {
	      let items = [];
	      items.push(...this.getOptions().items);
	      let sections = [];
	      sections.push(...this.getOptions().sections);
	      this.initField(sections, ["priority"]);
	      this.removeDublicates(sections);
	      this.initField(items, ["priority", "section", "type"]);
	      this.sortList(sections);
	      sections.push({
	        id: this.DEFAULT.section,
	        title: this.DEFAULT.sectionTitle
	      });
	      this.sortList(items);
	      this.sections = sections;
	      this.items = items;
	    }
	  }, {
	    key: "remove",
	    value: function remove() {
	      if (this.menu) {
	        this.menu.$destroy();
	        this.menu = null;
	        clearInterval(this.interval);
	      }
	    }
	  }, {
	    key: "updateIndicator",
	    value: function updateIndicator(sectionId, itemId, state) {
	      this.updateSection(sectionId, function (section) {
	        section.indicator.state = state;
	      });
	      this.updateItem(itemId, function (item) {
	        item.indicator.state = state;
	      });
	    }
	  }, {
	    key: "updateTag",
	    value: function updateTag(sectionId, itemId, tag) {
	      this.updateSection(sectionId, function (section) {
	        section.tag = tag;
	      });
	      this.updateItem(itemId, function (item) {
	        item.tag = tag;
	      });
	    }
	  }, {
	    key: "updateSectionTag",
	    value: function updateSectionTag(sectionId, tag) {
	      this.updateSection(sectionId, function (section) {
	        section.tag = {
	          ...section.tag,
	          ...tag
	        };
	      });
	    }
	  }, {
	    key: "updateItemTag",
	    value: function updateItemTag(itemId, tag) {
	      this.updateItem(itemId, function (item) {
	        item.tag = {
	          ...item.tag,
	          ...tag
	        };
	      });
	    }
	  }, {
	    key: "updateSection",
	    value: function updateSection(sectionId, proc) {
	      if (this.sections && sectionId) {
	        for (let section in this.sections) {
	          if (this.sections[section].id !== sectionId) continue;
	          proc(this.sections[section]);
	        }
	        if (this.menu) {
	          this.menu.$set({
	            sections: this.sections
	          });
	        }
	      }
	    }
	  }, {
	    key: "updateSectionItems",
	    value: function updateSectionItems(sectionId, proc) {
	      if (this.sections && sectionId) {
	        let oldList = this.items.filter(function (item) {
	          return item.section === sectionId;
	        });
	        for (let i of oldList) {
	          this.items.splice(this.items.indexOf(i), 1);
	        }
	        this.items.push(...proc(oldList));
	        if (this.menu) {
	          this.menu.$set({
	            items: this.items
	          });
	        }
	      }
	    }
	  }, {
	    key: "updateItem",
	    value: function updateItem(itemId, proc) {
	      if (itemId && this.items) {
	        this.items.forEach(function (item) {
	          if (item.id !== itemId) return;
	          proc(item);
	        });
	        if (this.menu) {
	          this.menu.$set({
	            items: this.items
	          });
	        }
	      }
	    }
	  }, {
	    key: "isTouch",
	    value: function isTouch() {
	      return UICommon$1.isMobile(true);
	    }
	  }, {
	    key: "getSectionComponent",
	    value: function getSectionComponent() {}
	  }]);
	}();
	_Menu = Menu;
	_defineProperty(Menu, "MAX_TOUCH_WIDTH", 1023);
	_defineProperty(Menu, "DEFAULT", {
	  section: "any",
	  sectionTitle: "Меню",
	  priority: 0,
	  //link, button, dropdown, component
	  type: "link",
	  open: false
	});
	/**
	 *
	 * @type {import('../../app.js').default | null}
	 * @static
	 * @memberof Menu
	 */
	_defineProperty(Menu, "app", null);
	_defineProperty(Menu, "directNavigation", false);
	_defineProperty(Menu, "menu", void 0);
	_defineProperty(Menu, "options", {
	  directNavigation: false,
	  navigate: function (urls) {
	    _Menu.hide();
	    if (!_Menu.isDirectNavigation() && _Menu.app) {
	      let func = _Menu.app.getWorking("router");
	      if (func) {
	        return func.navigate(urls.short);
	      }
	    }
	    document.location.assign(urls.full);
	  }
	});
	_defineProperty(Menu, "items", []);
	_defineProperty(Menu, "sections", []);
	_defineProperty(Menu, "location", void 0);
	_defineProperty(Menu, "interval", void 0);

	function onClick$4(ev, onnavigate) {
		ev.preventDefault();

		onnavigate()({
			full: ev.target.getAttribute("href"),
			short: ev.target.dataset.href
		});

		return false;
	}

	var root_2$2 = template(`<li><a> <!> <!></a></li>`);
	var root_5$1 = template(`<li> <!> <!></li>`);

	function Ui_item_without_children($$anchor, $$props) {
		push($$props, true);

		const $$stores = setup_stores();
		const $LOCALE = () => store_get(LOCALE, "$LOCALE", $$stores);

		/**
		 * @typedef {Object} Props
		 * @property {string} [root]
		 * @property {any} [item]
		 */
		/** @type {Props} */
		let root = prop($$props, "root", 3, ""),
			item = prop($$props, "item", 19, () => ({})),
			onnavigate = prop($$props, "onnavigate", 3, () => {});

		var fragment = comment();
		var node = first_child(fragment);

		{
			var consequent_2 = ($$anchor) => {
				var li = root_2$2();
				var a = child(li);

				a.__click = [onClick$4, onnavigate];

				var text = child(a);
				var node_1 = sibling(text);

				{
					var consequent = ($$anchor) => {
						Ui_indicator($$anchor, spread_props(
							{
								get id() {
									return item().id;
								}
							},
							() => item().tag
						));
					};

					if_block(node_1, ($$render) => {
						if (item().tag) $$render(consequent);
					});
				}

				var node_2 = sibling(node_1, 2);

				{
					var consequent_1 = ($$anchor) => {
						Ui_indicator($$anchor, spread_props(
							{
								get id() {
									return item().id;
								}
							},
							() => item().indicator
						));
					};

					if_block(node_2, ($$render) => {
						if (item().indicator) $$render(consequent_1);
					});
				}

				reset(a);
				reset(li);

				template_effect(() => {
					set_class(li, item().classes);
					set_attribute(a, "href", `${root() ?? ""}${item().url ?? ""}`);
					set_attribute(a, "data-href", item().url);
					set_text(text, `${$LOCALE()[item().title] ?? ""} `);
				});

				append($$anchor, li);
			};

			var alternate = ($$anchor) => {
				var li_1 = root_5$1();
				var text_1 = child(li_1);
				var node_3 = sibling(text_1);

				{
					var consequent_3 = ($$anchor) => {
						Ui_indicator($$anchor, spread_props(
							{
								get id() {
									return item().id;
								}
							},
							() => item().tag
						));
					};

					if_block(node_3, ($$render) => {
						if (item().tag) $$render(consequent_3);
					});
				}

				var node_4 = sibling(node_3, 2);

				{
					var consequent_4 = ($$anchor) => {
						Ui_indicator($$anchor, spread_props(
							{
								get id() {
									return item().id;
								}
							},
							() => item().indicator
						));
					};

					if_block(node_4, ($$render) => {
						if (item().indicator) $$render(consequent_4);
					});
				}

				reset(li_1);

				template_effect(() => {
					set_class(li_1, `is-no-follow-subtitle ${item().classes ?? ""}`);
					set_text(text_1, `${$LOCALE()[item().title] ?? ""} `);
				});

				append($$anchor, li_1);
			};

			if_block(node, ($$render) => {
				if (typeof item().url !== "undefined" && item().url !== false) $$render(consequent_2); else $$render(alternate, false);
			});
		}

		append($$anchor, fragment);
		pop();
	}

	delegate(["click"]);

	function onClick$3(e, closed, ontoggle) {
		e && e.preventDefault() && e.stopPropagation();
		closed(!closed());

		if (!ontoggle()(closed())) {
			closed(!closed());
		}

		return false;
	}

	var root$4 = template(`<span class="icon is-small is-toggle-submenu is-pulled-right" role="button" tabindex="0"><i aria-hidden="true"></i></span>`);

	function Ui_trigger($$anchor, $$props) {
		push($$props, true);

		const CLASS_ICON = {
			OPENED: "fa-angle-down",
			CLOSED: "fa-angle-up"
		};

		/**
		 * @typedef {Object} Props
		 * @property {any} [icon_opened]
		 * @property {any} [icon_closed]
		 * @property {boolean} [closed]    returns if we should apply toggle or if false - reject it and toggle backward
		 */
		/** @type {Props} */
		let icon_opened = prop($$props, "icon_opened", 19, () => CLASS_ICON.OPENED),
			icon_closed = prop($$props, "icon_closed", 19, () => CLASS_ICON.CLOSED),
			closed = prop($$props, "closed", 7),
			ontoggle = prop($$props, "ontoggle", 3, () => {
				return true;
			});

		var span = root$4();

		span.__click = [onClick$3, closed, ontoggle];
		span.__keyup = [onClick$3, closed, ontoggle];

		var i = child(span);

		reset(span);
		template_effect(() => set_class(i, `fas ${(closed() ? icon_closed() : icon_opened()) ?? ""}`));
		append($$anchor, span);
		pop();
	}

	delegate(["click", "keyup"]);

	var root_4$2 = template(`<span class="is-no-link"> </span>`);
	var root$3 = template(`<!> <!> <!> <!>`, 1);

	function Ui_item_label($$anchor, $$props) {
		push($$props, true);

		const $$stores = setup_stores();
		const $LOCALE = () => store_get(LOCALE, "$LOCALE", $$stores);
		let item = prop($$props, "item", 19, () => ({}));
		var fragment = root$3();
		var node = first_child(fragment);

		{
			var consequent = ($$anchor) => {
				Ui_icon_font($$anchor, spread_props(() => item().icon));
			};

			var alternate_1 = ($$anchor) => {
				var fragment_2 = comment();
				var node_1 = first_child(fragment_2);

				{
					var consequent_1 = ($$anchor) => {
						var fragment_3 = comment();
						const SvelteComponent = derived(() => COMPONENTS$1.get(item().component));
						var node_2 = first_child(fragment_3);

						component(node_2, () => get$2(SvelteComponent), ($$anchor, $$component) => {
							$$component($$anchor, spread_props(
								{
									get id() {
										return item().id;
									}
								},
								() => item().props
							));
						});

						append($$anchor, fragment_3);
					};

					var alternate = ($$anchor) => {
						var span = root_4$2();
						var text = child(span, true);

						reset(span);
						template_effect(() => set_text(text, $LOCALE()[item().title]));
						append($$anchor, span);
					};

					if_block(
						node_1,
						($$render) => {
							if (item().type === "component" && item().component && COMPONENTS$1.contains(item().component)) $$render(consequent_1); else $$render(alternate, false);
						},
						true
					);
				}

				append($$anchor, fragment_2);
			};

			if_block(node, ($$render) => {
				if (item().icon) $$render(consequent); else $$render(alternate_1, false);
			});
		}

		var node_3 = sibling(node, 2);

		{
			var consequent_2 = ($$anchor) => {
				Ui_tag($$anchor, spread_props(
					{
						get id() {
							return item().id;
						}
					},
					() => item().tag
				));
			};

			if_block(node_3, ($$render) => {
				if (item().tag) $$render(consequent_2);
			});
		}

		var node_4 = sibling(node_3, 2);

		{
			var consequent_3 = ($$anchor) => {
				Ui_indicator($$anchor, spread_props(
					{
						get id() {
							return item().id;
						}
					},
					() => item().indicator
				));
			};

			if_block(node_4, ($$render) => {
				if (item().indicator) $$render(consequent_3);
			});
		}

		var node_5 = sibling(node_4, 2);

		snippet(node_5, () => $$props.children ?? noop);
		append($$anchor, fragment);
		pop();
	}

	function onClick$2(ev, onnavigate) {
		ev.preventDefault();

		onnavigate()({
			full: ev.target.getAttribute("href"),
			short: ev.target.dataset.href
		});

		return false;
	}

	var root_4$1 = template(`<a class="has-subitems"><!></a>`);
	var root_3$2 = template(`<li><!> <!></li>`);
	var root_1$3 = template(`<ul></ul>`);

	function Ui_items_1($$anchor, $$props) {
		push($$props, true);

		/**
		 * @typedef {Object} Props
		 * @property {string} [root]
		 * @property {any} [items]
		 * @property {boolean} [closed]
		 * @property {function} [onnavigate]
		 */
		/** @type {Props} */
		let root = prop($$props, "root", 3, ""),
			items = prop($$props, "items", 19, () => []),
			onnavigate = prop($$props, "onnavigate", 3, () => {});

		const createClosedItemsLib = (lst) => {
			const lib = {};

			lst.forEach((itm, index) => lib[index] = itm.closed);
			return lib;
		};

		let closedChildren = proxy(createClosedItemsLib(items()));
		var ul = root_1$3();

		each(ul, 21, items, index$d, ($$anchor, item, index) => {
			var fragment = comment();
			var node = first_child(fragment);

			{
				var consequent_1 = ($$anchor) => {
					var li = root_3$2();
					var node_1 = child(li);

					{
						var consequent = ($$anchor) => {
							var a = root_4$1();

							a.__click = [onClick$2, onnavigate];

							var node_2 = child(a);

							Ui_item_label(node_2, {
								get item() {
									return get$2(item);
								},
								children: ($$anchor, $$slotProps) => {
									Ui_trigger($$anchor, {
										get closed() {
											return closedChildren[index];
										},
										set closed($$value) {
											closedChildren[index] = $$value;
										}
									});
								},
								$$slots: { default: true }
							});

							reset(a);

							template_effect(() => {
								set_attribute(a, "href", `${root() ?? ""}${get$2(item).url ?? ""}`);
								set_attribute(a, "data-href", get$2(item).url);
							});

							append($$anchor, a);
						};

						var alternate = ($$anchor) => {
							Ui_item_label($$anchor, {
								get item() {
									return get$2(item);
								},
								children: ($$anchor, $$slotProps) => {
									Ui_trigger($$anchor, {
										get closed() {
											return closedChildren[index];
										},
										set closed($$value) {
											closedChildren[index] = $$value;
										}
									});
								},
								$$slots: { default: true }
							});
						};

						if_block(node_1, ($$render) => {
							if (typeof get$2(item).url !== "undefined" && get$2(item).url !== false) $$render(consequent); else $$render(alternate, false);
						});
					}

					var node_3 = sibling(node_1, 2);

					Ui_items_1(node_3, {
						get root() {
							return root();
						},
						get items() {
							return get$2(item).items;
						},
						get onnavigate() {
							return onnavigate();
						},
						get closed() {
							return closedChildren[index];
						},
						set closed($$value) {
							closedChildren[index] = $$value;
						}
					});

					reset(li);
					template_effect(() => set_class(li, `is-no-follow-subtitle ${get$2(item).classes ?? ""}`));
					append($$anchor, li);
				};

				var alternate_1 = ($$anchor) => {
					Ui_item_without_children($$anchor, {
						get root() {
							return root();
						},
						get item() {
							return get$2(item);
						},
						get onnavigate() {
							return onnavigate();
						}
					});
				};

				if_block(node, ($$render) => {
					if (get$2(item).items && get$2(item).items.length) $$render(consequent_1); else $$render(alternate_1, false);
				});
			}

			append($$anchor, fragment);
		});

		reset(ul);
		template_effect(() => set_class(ul, `menu-list ${($$props.closed ? 'is-closed' : '') ?? ""}`));
		append($$anchor, ul);
		pop();
	}

	delegate(["click"]);

	var root_3$1 = template(`<p><!> <!> <!></p>`);
	var root_1$2 = template(`<!> <!>`, 1);

	function Ui_section$1($$anchor, $$props) {
		push($$props, true);

		const $$stores = setup_stores();
		const $LOCALE = () => store_get(LOCALE, "$LOCALE", $$stores);

		/**
		 * @typedef {Object} Props
		 * @property {any}      section
		 * @property {any}      [items]
		 * @property {string}   [root]
		 * @property {function} [onnavigate]
		 */
		/** @type {Props} */
		let items = prop($$props, "items", 19, () => []),
			root = prop($$props, "root", 3, ""),
			onnavigate = prop($$props, "onnavigate", 3, () => {});

		let sectionItems = derived(() => items().filter((item) => $$props.section.id === item.section));
		var fragment = root_1$2();
		var node = first_child(fragment);

		{
			var consequent_4 = ($$anchor) => {
				var fragment_1 = comment();
				var node_1 = first_child(fragment_1);

				{
					var consequent_3 = ($$anchor) => {
						var p = root_3$1();
						var node_2 = child(p);

						{
							var consequent = ($$anchor) => {
								var fragment_2 = comment();
								const SvelteComponent = derived(() => COMPONENTS$1.get($$props.section.component));
								var node_3 = first_child(fragment_2);

								component(node_3, () => get$2(SvelteComponent), ($$anchor, $$component) => {
									$$component($$anchor, spread_props(
										{
											get id() {
												return $$props.section.id;
											}
										},
										() => $$props.section.props
									));
								});

								append($$anchor, fragment_2);
							};

							var alternate = ($$anchor) => {
								var text$1 = text();

								template_effect(() => set_text(text$1, $LOCALE()[$$props.section.title]));
								append($$anchor, text$1);
							};

							if_block(node_2, ($$render) => {
								if ($$props.section.type === "component" && $$props.section.component && COMPONENTS$1.contains($$props.section.component)) $$render(consequent); else $$render(alternate, false);
							});
						}

						var node_4 = sibling(node_2, 2);

						{
							var consequent_1 = ($$anchor) => {
								Ui_indicator($$anchor, spread_props(
									{
										get id() {
											return $$props.section.id;
										}
									},
									() => $$props.section.tag
								));
							};

							if_block(node_4, ($$render) => {
								if ($$props.section.tag) $$render(consequent_1);
							});
						}

						var node_5 = sibling(node_4, 2);

						{
							var consequent_2 = ($$anchor) => {
								Ui_indicator($$anchor, spread_props(
									{
										get id() {
											return $$props.section.id;
										}
									},
									() => $$props.section.indicator
								));
							};

							if_block(node_5, ($$render) => {
								if ($$props.section.indicator) $$render(consequent_2);
							});
						}

						reset(p);
						template_effect(() => set_class(p, `menu-label ${$$props.section.classes ?? ""}`));
						append($$anchor, p);
					};

					if_block(node_1, ($$render) => {
						if (get$2(sectionItems).length || $$props.section.component || $$props.section.tag || $$props.section.indicator) $$render(consequent_3);
					});
				}

				append($$anchor, fragment_1);
			};

			if_block(node, ($$render) => {
				if ($$props.section) $$render(consequent_4);
			});
		}

		var node_6 = sibling(node, 2);

		{
			var consequent_5 = ($$anchor) => {
				Ui_items_1($$anchor, {
					get root() {
						return root();
					},
					get items() {
						return get$2(sectionItems);
					},
					get onnavigate() {
						return onnavigate();
					}
				});
			};

			if_block(node_6, ($$render) => {
				if (get$2(sectionItems).length) $$render(consequent_5);
			});
		}

		append($$anchor, fragment);
		pop();
	}

	function Ui_side_menu($$anchor, $$props) {
		push($$props, true);

		/**
		 * @typedef {Object} Props
		 * @property {string} [root]
		 * @property {any} [items]
		 * @property {any} [sections]
		 * @property {any} [navigate = ()=>undefined]
		 */
		/** @type {Props} */
		let root = prop($$props, "root", 3, ""),
			items = prop($$props, "items", 19, () => []),
			sections = prop($$props, "sections", 19, () => []),
			navigate = prop($$props, "navigate", 3, null);

		function onClick(ev) {
			if (typeof navigate() === "function") {
				navigate()(ev);
			}
		}

		var fragment = comment();
		var node = first_child(fragment);

		each(node, 17, sections, index$d, ($$anchor, section) => {
			Ui_section$1($$anchor, {
				get section() {
					return get$2(section);
				},
				get items() {
					return items();
				},
				get root() {
					return root();
				},
				onnavigate: onClick
			});
		});

		append($$anchor, fragment);
		pop();
	}

	const SideMenuState = writable({
	  open: true
	});

	var _notSideMenu;
	const TYPE$1 = "side";
	let notSideMenu = /*#__PURE__*/function (_Menu) {
	  function notSideMenu() {
	    _classCallCheck(this, notSideMenu);
	    return _callSuper(this, notSideMenu, arguments);
	  }
	  _inherits(notSideMenu, _Menu);
	  return _createClass(notSideMenu, null, [{
	    key: "render",
	    value: function render(app) {
	      if (app) {
	        this.setApp(app);
	      }
	      this.prepareData();
	      if (!this.menu) {
	        this.createUI();
	      }
	    }
	  }, {
	    key: "update",
	    value: function update() {
	      if (this.menu) {
	        this.menu.$destroy();
	        this.createUI();
	      }
	    }
	  }, {
	    key: "createUI",
	    value: function createUI() {
	      let target = document.querySelector(this.getOptions().targetSelector);
	      if (!target) {
	        return;
	      }
	      this.menu = mount(Ui_side_menu, {
	        target,
	        props: {
	          items: this.items,
	          sections: this.sections,
	          root: this.getOptions().root,
	          navigate: this.getOptions().navigate
	        }
	      });
	      this.initSizeResponse();
	      this.interval = setInterval(this.updateMenuActiveItem.bind(this), 200);
	      this.bindToggle();
	    }
	  }, {
	    key: "itemIsActive",
	    value: function itemIsActive(itemURL) {
	      return (this.location + "/").indexOf(itemURL + "/") > -1;
	    }
	  }, {
	    key: "updateMenu",
	    value: function updateMenu() {
	      var _this = this;
	      Array.from(document.querySelectorAll(this.getOptions().targetSelector + " a")).forEach(function (item) {
	        if (_this.itemIsActive(item.getAttribute("href"))) {
	          item.classList.add("is-active");
	        } else {
	          item.classList.remove("is-active");
	        }
	      });
	    }
	  }, {
	    key: "updateMenuActiveItem",
	    value: function updateMenuActiveItem() {
	      let url = window.location.toString(),
	        lastLocation = this.location;
	      if (lastLocation) {
	        if (url !== lastLocation) {
	          this.location = url;
	          this.updateMenu();
	        }
	      } else {
	        this.location = url;
	        this.updateMenu();
	      }
	    }
	  }, {
	    key: "initSizeResponse",
	    value: function initSizeResponse() {
	      this.nav = document.querySelector("nav.navbar");
	      this.aside = document.querySelector("aside");
	      this.main = document.querySelector("main");
	      this.resizeAsideAndMain(this.aside, this.main, this.nav);
	      this.resizeMain(this.main, this.aside);
	      window.addEventListener("resize", this.resizeMain.bind(this));
	      if (this.isTouch()) {
	        if (this.getOptions().open) {
	          this.show();
	        } else {
	          this.hide();
	        }
	      }
	    }
	  }, {
	    key: "resizeMain",
	    value: function resizeMain() {
	      if (this.isTouch()) {
	        if (this.aside.classList.contains("is-active")) {
	          this.main.style.display = "none";
	        } else {
	          this.main.style.display = "block";
	          this.main.style.marginLeft = "0px";
	        }
	      } else {
	        let rect = this.aside.getBoundingClientRect();
	        this.main.style.display = "block";
	        if (this.main.style.height === "0px") {
	          this.main.style.height = "auto";
	        }
	        this.main.style.marginLeft = rect.width + rect.left + "px";
	      }
	    }
	  }, {
	    key: "resizeAside",
	    value: function resizeAside() {
	      if (this.aside.style.display !== "none") {
	        let rect = this.nav.getBoundingClientRect();
	        this.aside.style.height = window.innerHeight - rect.height + "px";
	        this.aside.style.marginTop = rect.height + "px";
	      }
	    }
	  }, {
	    key: "resizeAsideAndMain",
	    value: function resizeAsideAndMain() {
	      let rect = this.nav.getBoundingClientRect();
	      this.aside.style.height = window.innerHeight - rect.height + "px";
	      //this.aside.style.paddingTop = (rect.height) + 'px';
	      //this.main.style.marginTop = (rect.height) + 'px';
	    }
	  }, {
	    key: "bindToggle",
	    value: function bindToggle() {
	      var _this2 = this;
	      let els = document.querySelectorAll(this.getOptions().toggleSelector);
	      Array.from(els).forEach(function (el) {
	        el.removeEventListener("click", _this2.toggle.bind(_this2));
	        el.addEventListener("click", _this2.toggle.bind(_this2));
	      });
	    }
	  }, {
	    key: "toggle",
	    value: function toggle(e) {
	      e && e.preventDefault();
	      if (this.aside) {
	        if (this.isTouch()) {
	          this.aside.classList.toggle("is-active");
	        } else {
	          this.aside.classList.toggle("is-closed");
	        }
	        this.resizeMain();
	      }
	      return false;
	    }
	  }, {
	    key: "hide",
	    value: function hide(e) {
	      e && e.preventDefault();
	      if (this.aside) {
	        if (this.isTouch()) {
	          this.aside.classList.remove("is-active");
	        } else {
	          this.aside.classList.add("is-closed");
	        }
	        this.resizeMain();
	      }
	      SideMenuState.update(function (val) {
	        val.open = false;
	        return val;
	      });
	      return false;
	    }
	  }, {
	    key: "show",
	    value: function show(e) {
	      e && e.preventDefault();
	      if (this.aside) {
	        if (this.isTouch()) {
	          this.aside.classList.add("is-active");
	        } else {
	          this.aside.classList.remove("is-closed");
	        }
	        this.resizeMain();
	      }
	      SideMenuState.update(function (val) {
	        val.open = true;
	        return val;
	      });
	      return false;
	    }
	  }, {
	    key: "isOpen",
	    value: function isOpen() {
	      if (this.aside) {
	        if (this.isTouch()) {
	          return this.aside.classList.contains("is-active");
	        } else {
	          return !this.aside.classList.contains("is-closed");
	        }
	      } else {
	        return true;
	      }
	    }
	  }]);
	}(Menu);
	_notSideMenu = notSideMenu;
	_defineProperty(notSideMenu, "nav", void 0);
	_defineProperty(notSideMenu, "main", void 0);
	_defineProperty(notSideMenu, "aside", void 0);
	_defineProperty(notSideMenu, "DEFAULT", {
	  section: "any",
	  sectionTitle: "Меню",
	  priority: 0,
	  open: true,
	  type: "link"
	});
	_defineProperty(notSideMenu, "options", {
	  directNavigation: false,
	  type: TYPE$1,
	  items: [],
	  sections: [],
	  targetSelector: `#${TYPE$1}-menu`,
	  toggleSelector: `.${TYPE$1}-menu-toggle`,
	  root: "/",
	  open: true,
	  navigate: function (urls) {
	    if (_notSideMenu.isTouch()) {
	      _notSideMenu.hide();
	      _notSideMenu.app && _notSideMenu.app.emit("top-navbar-burger:update", {
	        closed: true
	      });
	    }
	    if (!_notSideMenu.isDirectNavigation() && _notSideMenu.app) {
	      let func = _notSideMenu.app.getWorking("router");
	      if (func) {
	        return func.navigate(urls.short);
	      }
	    }
	    document.location.assign(urls.full);
	  }
	});

	var root$2 = template(`<a class="navbar-item"><!> <!></a>`);

	function Ui_brand($$anchor, $$props) {
		/**
		 * @typedef {Object} Props
		 * @property {string} [url]
		 * @property {string} [title]
		 * @property {any} [icon]
		 */
		/** @type {Props} */
		let url = prop($$props, "url", 3, "/"),
			title = prop($$props, "title", 3, ""),
			icon = prop($$props, "icon", 19, () => ({
				src: "https://via.placeholder.com/56x28",
				width: 28,
				height: 56
			}));

		var a = root$2();
		var node = child(a);

		Ui_icon(node, spread_props(icon));

		var node_1 = sibling(node, 2);

		{
			var consequent = ($$anchor) => {
				var fragment = comment();
				var node_2 = first_child(fragment);

				html(node_2, () => `<span class="navbar-item-brand-title">${title()}</span>`);
				append($$anchor, fragment);
			};

			if_block(node_1, ($$render) => {
				if (title()) $$render(consequent);
			});
		}

		reset(a);
		template_effect(() => set_attribute(a, "href", url()));
		append($$anchor, a);
	}

	var root$1 = template(`<!> <!> <!>`, 1);

	function Ui_item_content($$anchor, $$props) {
		push($$props, true);

		const $$stores = setup_stores();
		const $LOCALE = () => store_get(LOCALE, "$LOCALE", $$stores);
		var fragment = root$1();
		var node = first_child(fragment);

		{
			var consequent = ($$anchor) => {
				Ui_icon($$anchor, spread_props(() => $$props.item.icon));
			};

			var alternate_1 = ($$anchor) => {
				var fragment_2 = comment();
				var node_1 = first_child(fragment_2);

				{
					var consequent_1 = ($$anchor) => {
						var fragment_3 = comment();
						const SvelteComponent = derived(() => COMPONENTS$1.get($$props.item.component));
						var node_2 = first_child(fragment_3);

						component(node_2, () => get$2(SvelteComponent), ($$anchor, $$component) => {
							$$component($$anchor, spread_props(
								{
									get id() {
										return $$props.item.id;
									}
								},
								() => $$props.item.props
							));
						});

						append($$anchor, fragment_3);
					};

					var alternate = ($$anchor) => {
						var text$1 = text();

						template_effect(() => set_text(text$1, $LOCALE()[$$props.item.title]));
						append($$anchor, text$1);
					};

					if_block(
						node_1,
						($$render) => {
							if ($$props.item.type === 'component' && $$props.item.component && COMPONENTS$1.contains($$props.item.component)) $$render(consequent_1); else $$render(alternate, false);
						},
						true
					);
				}

				append($$anchor, fragment_2);
			};

			if_block(node, ($$render) => {
				if ($$props.item.icon) $$render(consequent); else $$render(alternate_1, false);
			});
		}

		var node_3 = sibling(node, 2);

		{
			var consequent_2 = ($$anchor) => {
				Ui_tag($$anchor, spread_props(
					{
						top: true,
						right: true,
						size: "small",
						get id() {
							return $$props.item.id;
						}
					},
					() => $$props.item.tag
				));
			};

			if_block(node_3, ($$render) => {
				if ($$props.item.tag) $$render(consequent_2);
			});
		}

		var node_4 = sibling(node_3, 2);

		{
			var consequent_3 = ($$anchor) => {
				Ui_indicator($$anchor, spread_props(
					{
						get id() {
							return $$props.item.id;
						}
					},
					() => $$props.item.indicator
				));
			};

			if_block(node_4, ($$render) => {
				if ($$props.item.indicator) $$render(consequent_3);
			});
		}

		append($$anchor, fragment);
		pop();
	}

	function onClick$1(event, dispatch, item) {
		dispatch("click", { event, element: item() });
	}

	var root_2$1 = template(`<hr>`);
	var root_3 = template(`<a><!></a>`);
	var root_4 = template(`<div role="button" tabindex="0"><!></div>`);
	var root_1$1 = template(`<!> <!>`, 1);

	function Ui_item($$anchor, $$props) {
		push($$props, true);

		const dispatch = createEventDispatcher();

		/**
		 * @typedef {Object} Props
		 * @property {string} [root]
		 * @property {any} [item]
		 * @property {string} [hidden]
		 * @property {string} [classes]
		 */
		/** @type {Props} */
		let root = prop($$props, "root", 3, ""),
			item = prop($$props, "item", 19, () => ({})),
			hidden = prop($$props, "hidden", 3, ""),
			classes = prop($$props, "classes", 3, "");

		var fragment = root_1$1();
		var node = first_child(fragment);

		{
			var consequent = ($$anchor) => {
				var hr = root_2$1();

				template_effect(() => set_class(hr, `navbar-divider ${(hidden() ? `is-hidden-${hidden()}` : '') ?? ""} `));
				append($$anchor, hr);
			};

			if_block(node, ($$render) => {
				if (item().break) $$render(consequent);
			});
		}

		var node_1 = sibling(node, 2);

		{
			var consequent_1 = ($$anchor) => {
				var a = root_3();

				a.__click = [onClick$1, dispatch, item];

				var node_2 = child(a);

				Ui_item_content(node_2, {
					get item() {
						return item();
					}
				});

				reset(a);

				template_effect(() => {
					set_class(a, `navbar-item ${(hidden() ? `is-hidden-${hidden()}` : '') ?? ""} ${item().classes ?? ""} ${classes() ?? ""} `);
					set_attribute(a, "href", `${root() ?? ""}${item().url ?? ""}`);
					set_attribute(a, "data-href", item().url);
				});

				append($$anchor, a);
			};

			var alternate = ($$anchor) => {
				var div = root_4();

				div.__click = [onClick$1, dispatch, item];
				div.__keyup = [onClick$1, dispatch, item];

				var node_3 = child(div);

				Ui_item_content(node_3, {
					get item() {
						return item();
					}
				});

				reset(div);
				template_effect(() => set_class(div, `navbar-item ${(hidden() ? `is-hidden-${hidden()}` : '') ?? ""} ${item().classes ?? ""} ${classes() ?? ""}`));
				append($$anchor, div);
			};

			if_block(node_1, ($$render) => {
				if (item().url) $$render(consequent_1); else $$render(alternate, false);
			});
		}

		append($$anchor, fragment);
		pop();
	}

	delegate(["click", "keyup"]);

	function onClick(event, dispatch, section) {
		dispatch("click", { event, element: section() });
	}

	var root_2 = template(`<div><a href=""><!></a> <div></div></div>`);
	var root_5 = template(`<a><!></a>`);
	var root_6 = template(`<div role="button" tabindex="0"><!></div>`);

	function Ui_section($$anchor, $$props) {
		push($$props, true);

		const dispatch = createEventDispatcher();

		/**
		 * @typedef {Object} Props
		 * @property {string} [root]
		 * @property {any} [section]
		 * @property {any} [items]
		 * @property {string} [hidden]
		 * @property {boolean} [hoverable]
		 * @property {boolean} [arrowless]
		 * @property {boolean} [right]
		 */
		/** @type {Props} */
		let root = prop($$props, "root", 3, ""),
			section = prop($$props, "section", 19, () => ({})),
			items = prop($$props, "items", 19, () => []),
			hidden = prop($$props, "hidden", 3, ""),
			hoverable = prop($$props, "hoverable", 3, true),
			arrowless = prop($$props, "arrowless", 3, false),
			right = prop($$props, "right", 3, false);

		var fragment = comment();
		var node = first_child(fragment);

		{
			var consequent = ($$anchor) => {
				var div = root_2();
				var a = child(div);

				a.__click = [onClick, dispatch, section];

				var node_1 = child(a);

				Ui_item_content(node_1, {
					get item() {
						return section();
					}
				});

				reset(a);

				var div_1 = sibling(a, 2);

				each(div_1, 21, items, (item) => item.id, ($$anchor, item) => {
					Ui_item($$anchor, {
						get root() {
							return root();
						},
						get item() {
							return get$2(item);
						},
						$$events: {
							click($$arg) {
								bubble_event.call(this, $$props, $$arg);
							}
						}
					});
				});

				reset(div_1);
				reset(div);

				template_effect(() => {
					set_class(div, `navbar-item has-dropdown ${(hoverable() ? 'is-hoverable' : '') ?? ""} ${(hidden() ? `is-hidden-${hidden()}` : '') ?? ""} `);
					set_class(a, `navbar-link ${(arrowless() ? 'is-arrowless' : '') ?? ""}`);
					set_class(div_1, `navbar-dropdown ${(right() ? 'is-right' : '') ?? ""}`);
				});

				append($$anchor, div);
			};

			var alternate_1 = ($$anchor) => {
				var fragment_2 = comment();
				var node_2 = first_child(fragment_2);

				{
					var consequent_1 = ($$anchor) => {
						var a_1 = root_5();

						a_1.__click = [onClick, dispatch, section];

						var node_3 = child(a_1);

						Ui_item_content(node_3, {
							get item() {
								return section();
							}
						});

						reset(a_1);

						template_effect(() => {
							set_class(a_1, `navbar-item ${(hidden() ? `is-hidden-${hidden()}` : '') ?? ""} `);
							set_attribute(a_1, "href", `${root() ?? ""}${section().url ?? ""}`);
							set_attribute(a_1, "data-href", section().url);
						});

						append($$anchor, a_1);
					};

					var alternate = ($$anchor) => {
						var div_2 = root_6();

						div_2.__click = [onClick, dispatch, section];
						div_2.__keyup = [onClick, dispatch, section];

						var node_4 = child(div_2);

						Ui_item_content(node_4, {
							get item() {
								return section();
							}
						});

						reset(div_2);
						template_effect(() => set_class(div_2, `navbar-item ${(hidden() ? `is-hidden-${hidden()}` : '') ?? ""} `));
						append($$anchor, div_2);
					};

					if_block(
						node_2,
						($$render) => {
							if (section().url) $$render(consequent_1); else $$render(alternate, false);
						},
						true
					);
				}

				append($$anchor, fragment_2);
			};

			if_block(node, ($$render) => {
				if (items().length) $$render(consequent); else $$render(alternate_1, false);
			});
		}

		append($$anchor, fragment);
		pop();
	}

	delegate(["click", "keyup"]);

	function toggle(e, closed, dispatch) {
		e.preventDefault();
		closed(!closed());
		dispatch("toggle", { closed: closed() });
		return false;
	}

	var root = template(`<a href="" role="button" aria-label="menu" aria-expanded="false" data-target="navbar"><span aria-hidden="true"></span> <span aria-hidden="true"></span> <span aria-hidden="true"></span></a>`);

	function Ui_burger($$anchor, $$props) {
		push($$props, true);

		const COMPONENT_NAME = "top-navbar-burger";
		const dispatch = createEventDispatcher();

		function getStandartUpdateEventName() {
			return COMPONENT_NAME + ":update";
		}

		/**
		 * @typedef {Object} Props
		 * @property {any} [events]
		 * @property {any} [register]
		 * @property {boolean} [closed]
		 * @property {any} [onUpdate]
		 */
		/** @type {Props} */
		let events = prop($$props, "events", 31, () => proxy({})),
			register = prop($$props, "register", 19, () => notCommon$1.registerWidgetEvents.bind(notCommon$1)),
			closed = prop($$props, "closed", 15, true),
			onUpdate = prop($$props, "onUpdate", 3, (data) => {
				closed(data.closed);
			});

		onMount(() => {
			if (!notCommon$1.objHas(events(), getStandartUpdateEventName())) {
				events(events()[getStandartUpdateEventName()] = onUpdate(), true);
			}

			register()(events());
		});

		SideMenuState.subscribe((val) => {
			closed(!val.open);
			return val;
		});

		var a = root();

		a.__click = [toggle, closed, dispatch];
		template_effect(() => set_class(a, `navbar-burger ${(closed() ? '' : 'is-active') ?? ""}`));
		append($$anchor, a);
		pop();
	}

	delegate(["click"]);

	var root_1 = template(`<div class="navbar-brand"><!> <!> <!> <!></div> <div id="navbar"><div class="navbar-start"></div> <div class="navbar-end"></div></div>`, 1);

	function Ui_top($$anchor, $$props) {
		push($$props, true);

		const dispatch = createEventDispatcher();

		/**
		 * @typedef {Object} Props
		 * @property {any} [sections] - import { beforeUpdate } from "svelte";
		 * @property {any} [items]
		 * @property {string} [root]
		 * @property {any} [navigate]
		 * @property {boolean} [brand]
		 * @property {boolean} [showBurger]
		 * @property {boolean} [burgerControlsSidemenu]
		 */
		/** @type {Props} */
		let sections = prop($$props, "sections", 19, () => []),
			items = prop($$props, "items", 19, () => []),
			root = prop($$props, "root", 3, ""),
			navigate = prop($$props, "navigate", 3, null),
			brand = prop($$props, "brand", 3, false),
			showBurger = prop($$props, "showBurger", 3, true),
			burgerControlsSidemenu = prop($$props, "burgerControlsSidemenu", 3, true);

		let menuClosed = state(true);

		function onClick({ detail }) {
			let { event, element } = detail;

			if (Object.hasOwn(element, "action")) {
				return element.action(event, element);
			}

			event.preventDefault();

			if (typeof navigate() === "function") {
				navigate()({
					full: event.currentTarget.getAttribute("href"),
					short: event.currentTarget.dataset.href
				});
			}

			return false;
		}

		let sectionsItemsCount = {};
		let sectionsItems = {};

		/*
		beforeUpdate(() => {
		    for (let section of sections) {
		        sectionsItems[section.id] = items.filter(
		            (t) => t.section === section.id
		        );
		        sectionsItemsCount[section.id] = items.filter(
		            (t) => t.section === section.id
		        ).length;
		    }
		});
		*/
		function toggleBurger({ detail }) {
			if (burgerControlsSidemenu()) {
				notSideMenu.toggle();
			} else {
				dispatch("toggleBurger", detail);
				set(menuClosed, proxy(detail.closed));
			}
		}

		var fragment = root_1();
		var div = first_child(fragment);
		var node = child(div);

		{
			var consequent = ($$anchor) => {
				Ui_brand($$anchor, spread_props(brand));
			};

			if_block(node, ($$render) => {
				if (brand()) $$render(consequent);
			});
		}

		var node_1 = sibling(node, 2);

		each(node_1, 17, sections, (section) => section.id, ($$anchor, section) => {
			var fragment_2 = comment();
			var node_2 = first_child(fragment_2);

			{
				var consequent_1 = ($$anchor) => {
					Ui_item($$anchor, {
						hidden: "desktop",
						get item() {
							return get$2(section);
						},
						get root() {
							return root();
						},
						$$events: { click: onClick }
					});
				};

				if_block(node_2, ($$render) => {
					if (get$2(section).showOnTouch) $$render(consequent_1);
				});
			}

			append($$anchor, fragment_2);
		});

		var node_3 = sibling(node_1, 2);

		each(node_3, 17, items, (item) => item.id, ($$anchor, item) => {
			var fragment_4 = comment();
			var node_4 = first_child(fragment_4);

			{
				var consequent_2 = ($$anchor) => {
					Ui_item($$anchor, {
						hidden: "desktop",
						get item() {
							return get$2(item);
						},
						get root() {
							return root();
						},
						$$events: { click: onClick }
					});
				};

				if_block(node_4, ($$render) => {
					if (get$2(item).showOnTouch) $$render(consequent_2);
				});
			}

			append($$anchor, fragment_4);
		});

		var node_5 = sibling(node_3, 2);

		{
			var consequent_3 = ($$anchor) => {
				Ui_burger($$anchor, { $$events: { toggle: toggleBurger } });
			};

			if_block(node_5, ($$render) => {
				if (showBurger()) $$render(consequent_3);
			});
		}

		reset(div);

		var div_1 = sibling(div, 2);
		var div_2 = child(div_1);

		each(div_2, 21, items, index$d, ($$anchor, item) => {
			var fragment_7 = comment();
			var node_6 = first_child(fragment_7);

			{
				var consequent_4 = ($$anchor) => {
					Ui_item($$anchor, {
						hidden: "touch",
						get item() {
							return get$2(item);
						},
						$$events: { click: onClick }
					});
				};

				if_block(node_6, ($$render) => {
					if (get$2(item).place === "start") $$render(consequent_4);
				});
			}

			append($$anchor, fragment_7);
		});

		reset(div_2);

		var div_3 = sibling(div_2, 2);

		each(div_3, 21, sections, (section) => section.id, ($$anchor, section) => {
			var fragment_9 = comment();
			var node_7 = first_child(fragment_9);

			{
				var consequent_5 = ($$anchor) => {
					Ui_section($$anchor, {
						right: true,
						get hidden() {
							return get$2(section).hidden;
						},
						get root() {
							return root();
						},
						get section() {
							return get$2(section);
						},
						get items() {
							return sectionsItems[get$2(section).id];
						},
						$$events: { click: onClick }
					});
				};

				if_block(node_7, ($$render) => {
					if ((sectionsItemsCount[get$2(section).id] || get$2(section).indicator || get$2(section).tag) && get$2(section).place == "end") $$render(consequent_5);
				});
			}

			append($$anchor, fragment_9);
		});

		reset(div_3);
		reset(div_1);
		template_effect(() => set_class(div_1, `navbar-menu ${(get$2(menuClosed) ? '' : 'is-active') ?? ""}`));
		append($$anchor, fragment);
		pop();
	}

	var _notTopMenu;
	const TYPE = "top";
	let notTopMenu = /*#__PURE__*/function (_Menu) {
	  function notTopMenu() {
	    _classCallCheck(this, notTopMenu);
	    return _callSuper(this, notTopMenu, arguments);
	  }
	  _inherits(notTopMenu, _Menu);
	  return _createClass(notTopMenu, null, [{
	    key: "render",
	    value: function render(app) {
	      if (app) {
	        this.setApp(app);
	      }
	      this.prepareData();
	      if (!this.menu) {
	        let target = document.querySelector(this.getOptions().targetSelector);
	        if (!target) {
	          return;
	        }
	        this.menu = mount(Ui_top, {
	          target,
	          props: {
	            brand: this.getOptions().brand,
	            items: this.items,
	            sections: this.sections,
	            root: this.getOptions().root,
	            navigate: this.getOptions().navigate
	          }
	        });
	        this.interval = setInterval(this.updateMenuActiveItem.bind(this), 200);
	      }
	    }
	  }, {
	    key: "updateMenu",
	    value: function updateMenu(url) {
	      Array.from(document.querySelectorAll(this.getOptions().targetSelector + " aside.menu a")).forEach(function (item) {
	        if (item.href == url || url.href && url.href.indexOf(item.href) == 0) {
	          item.classList.add("is-active");
	        } else {
	          item.classList.remove("is-active");
	        }
	      });
	    }
	  }, {
	    key: "updateMenuActiveItem",
	    value: function updateMenuActiveItem() {
	      let url = window.location.toString(),
	        lastLocation = this.location;
	      if (lastLocation) {
	        if (url !== lastLocation) {
	          this.location = url;
	          this.updateMenu(url);
	        }
	      } else {
	        this.location = url;
	        this.updateMenu(url);
	      }
	    }
	  }, {
	    key: "toggle",
	    value: function toggle() {
	      let el = document.querySelector(this.getOptions().targetSelector);
	      el.classList.toggle("is-active");
	    }
	  }, {
	    key: "hide",
	    value: function hide() {
	      let el = document.querySelector(this.getOptions().targetSelector);
	      el.classList.remove("is-active");
	    }
	  }, {
	    key: "setBurgerState",
	    value: function setBurgerState(menuClosed) {
	      this.menu.$set({
	        menuClosed
	      });
	    }
	  }]);
	}(Menu);
	_notTopMenu = notTopMenu;
	_defineProperty(notTopMenu, "DEFAULT", {
	  section: "any",
	  sectionTitle: "Меню",
	  priority: 0,
	  //link, button, dropdown, component
	  type: "link",
	  place: "main"
	});
	_defineProperty(notTopMenu, "options", {
	  brand: false,
	  type: TYPE,
	  items: [],
	  sections: [],
	  targetSelector: `#${TYPE}-menu`,
	  root: "/",
	  directNavigation: false,
	  navigate: function (urls) {
	    _notTopMenu.hide();
	    if (!_notTopMenu.isDirectNavigation() && _notTopMenu.app) {
	      let func = _notTopMenu.app.getWorking("router");
	      if (func) {
	        return func.navigate(urls.short);
	      }
	    }
	    document.location.assign(urls.full);
	  }
	});

	const DEFAULT_TRASFORMER = function (res) {
	  // @ts-ignore
	  return Object.hasOwn(res, "status") && Object.hasOwn(res, "result") ? res.result : res;
	};

	var create_crud_action_ui_view = (function ({
	  ACTION,
	  TITLE,
	  UIConstructor,
	  dataProvider,
	  goBack
	}) {
	  return /*#__PURE__*/function () {
	    function _class() {
	      _classCallCheck(this, _class);
	    }
	    return _createClass(_class, null, [{
	      key: "run",
	      value: async function run(controller, params) {
	        try {
	          controller.setBreadcrumbs([{
	            title: `Просмотр "${TITLE}"`
	          }]);
	          await controller.preloadVariants(ACTION);
	          if (controller.ui[ACTION]) {
	            return;
	          } else {
	            controller.$destroyUI();
	          }
	          let data = {};
	          if (dataProvider) {
	            if (notCommon$1.isFunc(dataProvider)) {
	              if (notCommon$1.isAsync(dataProvider)) {
	                data = await dataProvider(params);
	              } else {
	                data = dataProvider(params);
	              }
	            } else {
	              data = {
	                ...dataProvider
	              };
	            }
	          }
	          const resultTransformer = controller.getOptions(`${ACTION}.transformer`, DEFAULT_TRASFORMER);
	          controller.ui[ACTION] = new UIConstructor({
	            target: controller.getContainerInnerElement(),
	            props: {
	              params,
	              ...resultTransformer(data)
	            }
	          });
	          controller.emit(`after:render:${ACTION}`);
	          if (goBack && notCommon$1.isFunc(goBack)) {
	            controller.ui[ACTION].on("reject", function () {
	              return goBack();
	            });
	          }
	        } catch (e) {
	          controller.report(e);
	          controller.showErrorMessage(e);
	        }
	      }
	    }]);
	  }();
	});

	const PRELOADABLE = ["create", "update", "list", "delete", "details"];
	let CRUDVariantsPreloader = /*#__PURE__*/function () {
	  function CRUDVariantsPreloader() {
	    _classCallCheck(this, CRUDVariantsPreloader);
	  }
	  return _createClass(CRUDVariantsPreloader, null, [{
	    key: "preload",
	    value: async function preload(controller, type = "list") {
	      try {
	        if (!PRELOADABLE.includes(type)) {
	          return;
	        }
	        let preload = controller.getOptions(`${type}.preload`, {});
	        if (Object.keys(preload).length == 0) {
	          preload = controller.getOptions(`preload`, {});
	        }
	        if (Object.keys(preload).length > 0) {
	          let libProps = Object.keys(preload);
	          let proms = [];
	          libProps.forEach(function (prop) {
	            let modelName = notCommon$1.lowerFirstLetter(preload[prop]);
	            let Model = controller.make[modelName]({});
	            proms.push(Model.$listAll());
	          });
	          let results = await Promise.all(proms);
	          for (let i = 0; i < libProps.length; i++) {
	            const propName = libProps[i];
	            if (results[i].status === "ok" && Array.isArray(results[i].result)) {
	              const resultsList = results[i].result;
	              const variants = resultsList.map(function (item) {
	                return {
	                  id: item._id,
	                  title: item.title
	                };
	              });
	              controller.setOptions(`variants.${type}.${propName}`, variants);
	            }
	          }
	        }
	        controller.log("preload finished");
	      } catch (e) {
	        controller.report(e);
	        controller.showErrorMessage(e);
	      }
	    }
	  }]);
	}();

	const DEFAULT_ACTION = "list";
	let notCRUDRouter = /*#__PURE__*/function () {
	  function notCRUDRouter() {
	    _classCallCheck(this, notCRUDRouter);
	  }
	  return _createClass(notCRUDRouter, null, [{
	    key: "extractActionName",
	    value: function extractActionName(controller, params) {
	      let actionName = DEFAULT_ACTION;
	      if (params.length === 1) {
	        if (params[0] === "create") {
	          actionName = "create";
	        } else if (controller.actionHandlerExists(params[0])) {
	          actionName = params[0];
	        } else {
	          actionName = "details";
	        }
	      } else if (params.length > 1) {
	        if (params[1] === "delete") {
	          actionName = "delete";
	        } else if (params[1] === "update") {
	          actionName = "update";
	        } else {
	          actionName = params[1];
	        }
	      }
	      return actionName;
	    }
	  }, {
	    key: "route",
	    value: function route(controller, params) {
	      try {
	        const actionName = notCRUDRouter.extractActionName(controller, params);
	        controller.setCurrentAction(actionName);
	        return controller.runAction(actionName, params);
	      } catch (e) {
	        controller.report(e);
	        controller.showErrorMessage(e);
	      }
	    }
	  }]);
	}();

	let CRUDMessage = /*#__PURE__*/function () {
	  function CRUDMessage() {
	    _classCallCheck(this, CRUDMessage);
	  }
	  return _createClass(CRUDMessage, null, [{
	    key: "error",
	    value: function error(controller, title, message) {
	      controller.setUI("__message__", new Ui_error({
	        target: controller.getContainerInnerElement(),
	        props: {
	          title,
	          message
	        }
	      }));
	    }
	  }, {
	    key: "success",
	    value: function success(controller, title, message) {
	      controller.setUI("__message__", new Ui_success({
	        target: controller.getContainerInnerElement(),
	        props: {
	          title,
	          message
	        }
	      }));
	    }
	  }]);
	}();

	const DEFAULT_BREADCRUMB_TAIL$2 = "Просмотр";

	/**
	 * Generic CRUD action class
	 * @class
	 */
	let CRUDGenericAction = /*#__PURE__*/function () {
	  function CRUDGenericAction() {
	    _classCallCheck(this, CRUDGenericAction);
	  }
	  return _createClass(CRUDGenericAction, null, [{
	    key: "NAVIGATION_DELAY",
	    get: function () {
	      return NAVIGATION_DELAY_DEFAULT;
	    }
	    /**
	     * Default breadcrumbs tail template string
	     * @returns {string}
	     */
	  }, {
	    key: "deafultBreadcrumbsTail",
	    get: function () {
	      return DEFAULT_BREADCRUMB_TAIL$2;
	    }

	    /**
	     * Libarary of breadcrumbs tails strings templates
	     * @returns {Object}
	     */
	  }, {
	    key: "breadcrumbsTails",
	    get: function () {
	      return {
	        preset: DEFAULT_BREADCRUMB_TAIL$2,
	        set: 'Просмотр, "{:title}"'
	      };
	    }

	    /**
	     * Returns template of breadcrumbs tail
	     * @param   {string}    name
	     * @returns {string}    template string
	     */
	  }, {
	    key: "getBreadcrumbsTail",
	    value: function getBreadcrumbsTail(name) {
	      if (!this.breadcrumbsTails) {
	        return "";
	      }
	      return notCommon$1.select(this.breadcrumbsTails, name, this.deafultBreadcrumbsTail);
	    }
	    /**
	     * @static {string} ACTION this controller action name, used in URI
	     */
	  }, {
	    key: "ACTION",
	    get: function () {
	      return "details";
	    }
	    /**
	     * @static {string} MODEL_ACTION    network model interface action name, used in API
	     */
	  }, {
	    key: "MODEL_ACTION_GET",
	    get: function () {
	      return "get";
	    }

	    /**
	     * @static {string} MODEL_ACTION    network model interface action name, used in API
	     */
	  }, {
	    key: "MODEL_ACTION_PUT",
	    get: function () {
	      return "get";
	    }

	    /**
	     * @static {object} UIConstructor    constructor of UI component
	     */
	  }, {
	    key: "UIConstructor",
	    get: function () {
	      return notForm;
	    }
	    /**
	     * @static {function}   TRANSFORMER     response.result transformation function if want to change it's structure
	     */
	  }, {
	    key: "TRANSFORMER",
	    get: function () {
	      return DEFAULT_TRASFORMER;
	    }
	    /**
	     * Returns name of model identificaiton field
	     * @param {object} controller instance of controller
	     * @returns {string}    default id field name is '_id'
	     */
	  }, {
	    key: "getIdField",
	    value: function getIdField(controller) {
	      return controller.getOptions(`${this.ACTION}.idField`, "_id");
	    }
	  }, {
	    key: "loadDataQuery",
	    value: function loadDataQuery(controller, params) {
	      const idField = this.getIdField(controller);
	      return {
	        [idField]: params[0]
	      };
	    }

	    /**
	     * Return Promise of API reponse
	     * @param {object} controller instance of controller
	     * @param {string[]} params     array of strings parsed from URI by router and passed to controller
	     * @returns {Promise}   API response {status:string, result:any, message:string, errors: {[fieldname]:[...errorMessages]}}
	     */
	  }, {
	    key: "loadData",
	    value: async function loadData(controller, params) {
	      const query = this.loadDataQuery(controller, params);
	      const actionName = this.getModelActionName(controller);
	      return await controller.getModel(query)[`$${actionName}`]();
	    }

	    /**
	     * Returns model API action name
	     * @param {object} controller instance of controller
	     * @returns {string}    network interface model action name, for API; default: this.MODEL_ACTION_GET
	     */
	  }, {
	    key: "getModelActionName",
	    value: function getModelActionName(controller) {
	      return controller.getOptions(`${this.ACTION}.actionName`, this.MODEL_ACTION_GET);
	    }

	    /**
	     * Sets breadcrumbs tail, without result details
	     * @param {object} controller instance of controller
	     * @param {string[]} params     list of route params
	     */
	  }, {
	    key: "presetBreadcrumbs",
	    value: function presetBreadcrumbs(controller, params) {
	      controller.setBreadcrumbs([{
	        title: this.getBreadcrumbsTail("preset"),
	        url: controller.getModelActionURL(params[0], false)
	      }]);
	    }
	  }, {
	    key: "getTitle",
	    value: function getTitle(contoller, params, response) {
	      return contoller.getItemTitle(response.result);
	    }

	    /**
	     * Sets breadcrumbs tail with response details, aka title of loaded item
	     * @param {object} controller   instance of controller
	     * @param {string[]} params     list of route params
	     * @param {object} response     API response in wrapper
	     * @param {object} response.result  API response result
	     */
	  }, {
	    key: "setBreadcrumbs",
	    value: function setBreadcrumbs(controller, params, response) {
	      const title = this.getTitle(controller, params, response);
	      const breadcrumbsTailTemplate = this.getBreadcrumbsTail("set");
	      controller.setBreadcrumbs([{
	        title: breadcrumbsTailTemplate ? notLocale$1.format(breadcrumbsTailTemplate, {
	          title
	        }) : title,
	        url: controller.getModelActionURL(params[0], false)
	      }]);
	    }

	    /**
	     * Checks response on success
	     * @param {object} response
	     * @param {string} response.status
	     * @returns {boolean}   true if response is bad
	     */
	  }, {
	    key: "isResponseBad",
	    value: function isResponseBad(response) {
	      return !response || response.status !== "ok";
	    }
	  }, {
	    key: "getValidators",
	    value: function getValidators(controller) {
	      return controller.getValidators && controller.getValidators() || controller.getOptions("Validators");
	    }

	    /**
	     * Creates object with all options needed to initialize UI component
	     * @param {object} controller   instance of controller
	     * @param {object} response     API reponse object
	     * @returns {object}    ui options object
	     */
	  }, {
	    key: "prepareUIOptions",
	    value: function prepareUIOptions(controller, response) {
	      const detailsActionName = this.getModelActionName(controller);
	      return {
	        options: {
	          target: controller.getContainerInnerElement(),
	          model: controller.getModelName(),
	          action: detailsActionName,
	          name: `${controller.getName()}.${this.ACTION}Form`,
	          fields: {
	            readonly: true
	          },
	          validators: this.getValidators(controller),
	          variants: controller.getOptions(`variants.${this.ACTION}`, {}),
	          masters: controller.getOptions(`${this.ACTION}.masters`, {}),
	          injected: controller.getOptions(`${this.ACTION}.injected`, {})
	        },
	        data: this.TRANSFORMER(response.result)
	      };
	    }

	    /**
	     * Returns instance of this action UI component from controller
	     * @param {object} controller   instance of controller
	     * @returns {object}    instance of UI component
	     */
	  }, {
	    key: "getUI",
	    value: function getUI(controller) {
	      return controller.getUI(this.ACTION);
	    }

	    /**
	     * Sets UI of this action in controller
	     * @param {object} controller   instance of controller
	     * @param {object} ui           instance of UI component
	     */
	  }, {
	    key: "setUI",
	    value: function setUI(controller, ui) {
	      controller.setUI(this.ACTION, ui);
	    }

	    /**
	     *  Sets via `.$set` method `loading` to `true`
	     *
	     * @static
	     * @param {import('../../controller.crud')} controller
	     * @memberof CRUDGenericAction
	     */
	  }, {
	    key: "setUILoading",
	    value: function setUILoading(controller) {
	      this.getUI(controller).$set({
	        loading: true
	      });
	    }

	    /**
	     *  Sets via `.$set` method `loading` to `false`
	     *
	     * @static
	     * @param {import('../../controller.crud')} controller
	     * @memberof CRUDGenericAction
	     */
	  }, {
	    key: "setUILoaded",
	    value: function setUILoaded(controller) {
	      this.getUI(controller).$set({
	        loading: false
	      });
	    }

	    /**
	     *  Sets via `.$set` method `error` to `message`
	     *
	     * @static
	     * @param {import('../../controller.crud')} controller
	     * @param   {Error} message     error message
	     * @memberof CRUDGenericAction
	     */
	  }, {
	    key: "setUIError",
	    value: function setUIError(controller, message) {
	      this.getUI(controller).$set({
	        error: message
	      });
	    }

	    /**
	     * Binds events to action UI
	     * @param {object} controller   instance of controller
	     * @param {string[]} params     list of route params
	     * @param {object} response     API response
	     */
	    // eslint-disable-next-line no-unused-vars
	  }, {
	    key: "bindUIEvents",
	    value: function bindUIEvents(controller, params, response) {
	      if (notCommon$1.isFunc(controller.goBack)) {
	        this.bindUIEvent(controller, "reject", function () {
	          return controller.goBack();
	        });
	      }
	    }

	    /**
	     * Bind event handler named event to UI. Checks different binder notation $on/on
	     * @param {object} controller   instance of controller
	     * @param {string} event        event name
	     * @param {function} callback   callback function on event
	     * @returns
	     */
	  }, {
	    key: "bindUIEvent",
	    value: function bindUIEvent(controller, event, callback) {
	      const ui = this.getUI(controller);
	      if (ui.$on) {
	        return ui.$on(event, callback);
	      }
	      if (ui.on) {
	        return ui.on(event, callback);
	      }
	    }

	    /**
	     * true, if UI of this action already exists,
	     * false, if UI of this action wasn't existed and other UIs were destoryed
	     * @param {object} controller   instance of controller
	     * @returns {boolean}   true if UI of this action exists, false if UI of other was destroyed
	     */
	  }, {
	    key: "isUIRendered",
	    value: function isUIRendered(controller) {
	      if (this.getUI(controller)) {
	        return true;
	      } else {
	        controller.$destroyUI();
	      }
	      return false;
	    }
	  }, {
	    key: "tweakUIOptions",
	    value: function tweakUIOptions(options) {
	      return options;
	    }
	  }, {
	    key: "createUI",
	    value: function createUI(uiComponent, controller, response) {
	      if (notCommon$1.isFunc(uiComponent)) {
	        return mount(uiComponent, this.tweakUIOptions(this.prepareUIOptions(controller, response)));
	      } else {
	        return new uiComponent(this.tweakUIOptions(this.prepareUIOptions(controller, response)));
	      }
	    }

	    /**
	     * Performing action preparation and renders UI
	     * @param {object} controller   instance of controller
	     * @param {string[]} params     list of route params
	     * @returns {Promise<undefined>}
	     */
	  }, {
	    key: "run",
	    value: async function run(controller, params) {
	      try {
	        //inform that we are starting
	        controller.emit(`before:render:${this.ACTION}`, params);
	        //if UI for this action exists exiting
	        if (this.isUIRendered(controller)) {
	          return;
	        }
	        //indicating that we are working
	        controller.renderLoadingScreen && controller.renderLoadingScreen();
	        //preloading form variants
	        await controller.preloadVariants(this.ACTION);
	        //setting initial state of breadcrumbs tail
	        this.presetBreadcrumbs(controller, params);
	        //loading data
	        const response = await this.loadData(controller, params);
	        //showing error message if response is 'bad'
	        if (this.isResponseBad(response)) {
	          return controller.showErrorMessage(response);
	        }
	        //updating breadcrumbs tail with more details from response
	        this.setBreadcrumbs(controller, params, response);
	        //creating action UI component
	        //eslint-disable-next-line no-unused-vars
	        const uiComponent = this.UIConstructor;
	        //eslint-disable-next-line no-unused-vars
	        const ui = this.createUI();
	        this.setUI(controller);
	        //bind events to UI
	        this.bindUIEvents(controller, params, response);
	        //inform that we are ready
	        controller.emit(`after:render:${this.ACTION}`, params, response);
	      } catch (e) {
	        //informing about exception
	        controller.emit(`exception:render:${this.ACTION}`, params, e);
	        //reporting exception
	        controller.report(e);
	        //showing error message
	        controller.showErrorMessage(e);
	      } finally {
	        controller.removeLoadingScreen && controller.removeLoadingScreen();
	      }
	    }
	  }, {
	    key: "goBackAfterDelay",
	    value: function goBackAfterDelay(controller) {
	      controller.goBack(this.NAVIGATION_DELAY);
	    }
	  }, {
	    key: "goBack",
	    value: function goBack(controller) {
	      controller.goBack(0);
	    }
	  }]);
	}();

	const ACTION$2 = "create";
	const DEFAULT_BREADCRUMB_TAIL$1 = "Создание";
	let CRUDGenericActionCreate = /*#__PURE__*/function (_CRUDGenericAction) {
	  function CRUDGenericActionCreate() {
	    _classCallCheck(this, CRUDGenericActionCreate);
	    return _callSuper(this, CRUDGenericActionCreate, arguments);
	  }
	  _inherits(CRUDGenericActionCreate, _CRUDGenericAction);
	  return _createClass(CRUDGenericActionCreate, null, [{
	    key: "deafultBreadcrumbsTail",
	    get: function () {
	      return DEFAULT_BREADCRUMB_TAIL$1;
	    }
	  }, {
	    key: "breadcrumbsTails",
	    get: function () {
	      return undefined;
	    }
	  }, {
	    key: "ACTION",
	    get: function () {
	      return ACTION$2;
	    }
	    /**
	     * @static {string} MODEL_ACTION    network model interface action name, used in API
	     */
	  }, {
	    key: "MODEL_ACTION_GET",
	    get: function () {
	      return ACTION$2;
	    }

	    /**
	     * @static {string} MODEL_ACTION    network model interface action name, used in API
	     */
	  }, {
	    key: "MODEL_ACTION_PUT",
	    get: function () {
	      return ACTION$2;
	    }

	    /**
	     *
	     * @param {import('../../controller.crud')} controller
	     * @param {any}                         [params]
	     * @returns {import('not-node/src/types').notAppResponse}
	     */
	    //eslint-disable-next-line no-unused-vars
	  }, {
	    key: "loadData",
	    value: function loadData(controller, params = {}) {
	      let defData = controller.createDefault();
	      if (defData.getData) {
	        defData = defData.getData();
	      }
	      return {
	        status: "ok",
	        result: defData
	      };
	    }
	  }, {
	    key: "getTitle",
	    value: function getTitle(contoller, params, response) {
	      return contoller.getItemTitle(response);
	    }
	  }, {
	    key: "prepareUIOptions",
	    value: function prepareUIOptions(controller, response) {
	      const actionName = this.getModelActionName(controller);
	      return {
	        options: {
	          target: controller.getContainerInnerElement(),
	          model: controller.getModelName(),
	          action: actionName,
	          name: `${controller.getName()}.${this.ACTION}Form`,
	          validators: this.getValidators(controller),
	          variants: controller.getOptions(`variants.${this.ACTION}`, {}),
	          masters: controller.getOptions(`${this.ACTION}.masters`, {})
	        },
	        data: this.TRANSFORMER(response)
	      };
	    }

	    /**
	     * Binds events to action UI
	     * @param {object} controller   instance of controller
	     * @param {string[]} params     list of route params
	     * @param {object} [response]     API response
	     */
	    //eslint-disable-next-line no-unused-vars
	  }, {
	    key: "bindUIEvents",
	    value: function bindUIEvents(controller, params, response) {
	      var _this = this;
	      if (notCommon$1.isFunc(controller.goBack)) {
	        this.bindUIEvent(controller, "reject", function () {
	          return _this.goBack(controller);
	        });
	      }
	      if (notCommon$1.isFunc(controller.onActionSubmit)) {
	        this.bindUIEvent(controller, "submit", async function (ev) {
	          const success = await controller.onActionSubmit(_this.ACTION, {
	            ..._this.loadDataQuery(controller, params),
	            ...ev.detail
	          });
	          if (success) {
	            _this.goBackAfterDelay(controller);
	          }
	        });
	      }
	    }
	  }]);
	}(CRUDGenericAction);

	let CRUDActionCreate = /*#__PURE__*/function (_CRUDGenericActionCre) {
	  function CRUDActionCreate() {
	    _classCallCheck(this, CRUDActionCreate);
	    return _callSuper(this, CRUDActionCreate, arguments);
	  }
	  _inherits(CRUDActionCreate, _CRUDGenericActionCre);
	  return _createClass(CRUDActionCreate);
	}(CRUDGenericActionCreate);

	/**
	 * Generic CRUD Details action class
	 * @class
	 */
	let CRUDGenericActionRead = /*#__PURE__*/function (_CRUDGenericAction) {
	  function CRUDGenericActionRead() {
	    _classCallCheck(this, CRUDGenericActionRead);
	    return _callSuper(this, CRUDGenericActionRead, arguments);
	  }
	  _inherits(CRUDGenericActionRead, _CRUDGenericAction);
	  return _createClass(CRUDGenericActionRead, null, [{
	    key: "tweakUIOptions",
	    value: function tweakUIOptions(options) {
	      options.options.ui = {
	        submit: {
	          enabled: false
	        }
	      };
	      return options;
	    }

	    /**
	     * Performing action preparation and renders UI
	     * @param {object} controller   instance of controller
	     * @param {string[]} params     list of route params
	     * @returns {Promise<undefined>}
	     */
	  }, {
	    key: "run",
	    value: async function run(controller, params) {
	      try {
	        //inform that we are starting
	        controller.emit(`before:render:${this.ACTION}`, params);
	        //if UI for this action exists exiting
	        if (this.isUIRendered(controller)) {
	          return;
	        }
	        //indicating that we are working
	        controller.renderLoadingScreen && controller.renderLoadingScreen();
	        //preloading form variants
	        await controller.preloadVariants(this.ACTION);
	        //setting initial state of breadcrumbs tail
	        this.presetBreadcrumbs(controller, params);
	        //loading data
	        const response = await this.loadData(controller, params);
	        //showing error message if response is 'bad'
	        if (this.isResponseBad(response)) {
	          return controller.showErrorMessage(response);
	        }
	        //updating breadcrumbs tail with more details from response
	        this.setBreadcrumbs(controller, params, response);
	        //creating action UI component
	        const uiComponent = this.UIConstructor;
	        this.setUI(controller, new uiComponent(this.tweakUIOptions(this.prepareUIOptions(controller, response))));
	        //bind events to UI
	        this.bindUIEvents(controller, params, response);
	        //inform that we are ready
	        controller.emit(`after:render:${this.ACTION}`, params, response);
	      } catch (e) {
	        //informing about exception
	        controller.emit(`exception:render:${this.ACTION}`, params, e);
	        //reporting exception
	        controller.report(e);
	        //showing error message
	        controller.showErrorMessage(e);
	      } finally {
	        controller.removeLoadingScreen && controller.removeLoadingScreen();
	      }
	    }
	  }]);
	}(CRUDGenericAction);

	/**
	 * CRUD action details
	 */
	let CRUDActionDetails = /*#__PURE__*/function (_CRUDGenericActionRea) {
	  function CRUDActionDetails() {
	    _classCallCheck(this, CRUDActionDetails);
	    return _callSuper(this, CRUDActionDetails, arguments);
	  }
	  _inherits(CRUDActionDetails, _CRUDGenericActionRea);
	  return _createClass(CRUDActionDetails);
	}(CRUDGenericActionRead);

	const DEFAULT_BREADCRUMB_TAIL = "Редактирование";
	/**
	 * Generic CRUD Update action class
	 * @class
	 */
	let CRUDGenericActionUpdate = /*#__PURE__*/function (_CRUDGenericAction) {
	  function CRUDGenericActionUpdate() {
	    _classCallCheck(this, CRUDGenericActionUpdate);
	    return _callSuper(this, CRUDGenericActionUpdate, arguments);
	  }
	  _inherits(CRUDGenericActionUpdate, _CRUDGenericAction);
	  return _createClass(CRUDGenericActionUpdate, null, [{
	    key: "deafultBreadcrumbsTail",
	    get:
	    /**
	     * Default breadcrumbs tail template string
	     * @returns {string}
	     */
	    function () {
	      return DEFAULT_BREADCRUMB_TAIL;
	    }

	    /**
	     * Libarary of breadcrumbs tails strings templates
	     * @returns {Object}
	     */
	  }, {
	    key: "breadcrumbsTails",
	    get: function () {
	      return {
	        preset: DEFAULT_BREADCRUMB_TAIL,
	        set: `${DEFAULT_BREADCRUMB_TAIL}: "{:title}"`
	      };
	    }

	    /**
	     * @static {string} ACTION this controller action name, used in URI
	     */
	  }, {
	    key: "ACTION",
	    get: function () {
	      return "update";
	    }

	    /**
	     * @static {string} MODEL_ACTION_GET    network model interface action name, used in API
	     */
	  }, {
	    key: "MODEL_ACTION_GET",
	    get: function () {
	      return "getRaw";
	    }

	    /**
	     * @static {string} MODEL_ACTION_PUT    network model interface action name, used in API
	     */
	  }, {
	    key: "MODEL_ACTION_PUT",
	    get: function () {
	      return "update";
	    }

	    /**
	     * Creates object with all options needed to initialize UI component
	     * @param {object} controller   instance of controller
	     * @param {object} response     API reponse object
	     * @returns {object}    ui options object
	     */
	  }, {
	    key: "prepareUIOptions",
	    value: function prepareUIOptions(controller, response) {
	      return {
	        options: {
	          target: controller.getContainerInnerElement(),
	          model: controller.getModelName(),
	          action: this.MODEL_ACTION_PUT,
	          //will be used to get form fields information from manifest
	          name: `${controller.getName()}.${this.ACTION}Form`,
	          validators: this.getValidators(controller),
	          variants: controller.getOptions(`variants.${this.ACTION}`, {}),
	          ui: controller.getOptions(`${this.ACTION}.ui`, {}),
	          fields: controller.getOptions(`${this.ACTION}.fields`, {}),
	          masters: controller.getOptions(`${this.ACTION}.masters`, {})
	        },
	        data: this.TRANSFORMER(notCommon$1.stripProxy(response.result))
	      };
	    }

	    /**
	     * Binds events to action UI
	     * @param {object} controller   instance of controller
	     * @param {string[]} params     list of route params
	     * @param {object} [response]     API response
	     */
	    // eslint-disable-next-line no-unused-vars
	  }, {
	    key: "bindUIEvents",
	    value: function bindUIEvents(controller, params, response) {
	      var _this = this;
	      if (notCommon$1.isFunc(controller.goBack)) {
	        this.bindUIEvent(controller, "reject", function () {
	          return _this.goBack(controller);
	        });
	      }
	      if (notCommon$1.isFunc(controller.onActionSubmit)) {
	        this.bindUIEvent(controller, "submit", async function (ev) {
	          const success = await controller.onActionSubmit(_this.ACTION, {
	            ..._this.loadDataQuery(controller, params),
	            ...ev.detail
	          });
	          if (success) {
	            _this.goBackAfterDelay(controller);
	          }
	        });
	      }
	    }

	    /**
	     * true, if UI of this action already exists,
	     * false, if UI of this action wasn't existed and other UIs were destoryed
	     * @param {object} controller   instance of controller
	     * @returns {boolean}   true if UI of this action exists, false if UI of other was destroyed
	     */
	  }, {
	    key: "isUIRendered",
	    value: function isUIRendered(controller) {
	      if (this.getUI(controller)) {
	        return true;
	      } else {
	        controller.$destroyUI();
	      }
	      return false;
	    }

	    /**
	     * Performing action preparation and renders UI
	     * @param {object} controller   instance of controller
	     * @param {string[]} params     list of route params
	     * @returns {Promise<undefined>}
	     */
	  }, {
	    key: "run",
	    value: async function run(controller, params) {
	      try {
	        //inform that we are starting
	        controller.emit(`before:render:${this.ACTION}`, [params]);
	        //if UI for this action exists exiting
	        if (this.isUIRendered(controller)) {
	          return;
	        }
	        //indicating that we are working
	        controller.renderLoadingScreen && controller.renderLoadingScreen();
	        //preloading form variants
	        await controller.preloadVariants(this.ACTION);
	        //setting initial state of breadcrumbs tail
	        this.presetBreadcrumbs(controller, params);
	        //loading data
	        const response = await this.loadData(controller, params);
	        //showing error message if response is 'bad'
	        if (this.isResponseBad(response)) {
	          return controller.showErrorMessage(response);
	        }
	        //updating breadcrumbs tail with more details from response
	        this.setBreadcrumbs(controller, params, response);
	        //creating action UI component
	        const uiComponent = this.UIConstructor;
	        this.setUI(controller, new uiComponent(this.tweakUIOptions(this.prepareUIOptions(controller, response))));
	        //bind events to UI
	        this.bindUIEvents(controller, params, response);
	        //inform that we are ready
	        controller.emit(`after:render:${this.ACTION}`, params);
	      } catch (e) {
	        //informing about exception
	        controller.emit(`exception:render:${this.ACTION}`, params, e);
	        //reporting exception
	        controller.report(e);
	        //showing error message
	        controller.showErrorMessage(e);
	      } finally {
	        controller.removeLoadingScreen && controller.removeLoadingScreen();
	      }
	    }
	  }]);
	}(CRUDGenericAction);

	/**
	 * CRUD action update
	 */
	let CRUDActionUpdate = /*#__PURE__*/function (_CRUDGenericActionUpd) {
	  function CRUDActionUpdate() {
	    _classCallCheck(this, CRUDActionUpdate);
	    return _callSuper(this, CRUDActionUpdate, arguments);
	  }
	  _inherits(CRUDActionUpdate, _CRUDGenericActionUpd);
	  return _createClass(CRUDActionUpdate);
	}(CRUDGenericActionUpdate);

	const ACTION$1 = "delete";
	const MODEL_ACTION = "delete";
	let CRUDActionDelete = /*#__PURE__*/function () {
	  function CRUDActionDelete() {
	    _classCallCheck(this, CRUDActionDelete);
	  }
	  return _createClass(CRUDActionDelete, null, [{
	    key: "run",
	    value: async function run(controller, params) {
	      try {
	        if (controller.ui[ACTION$1]) {
	          return;
	        } else {
	          controller.$destroyUI();
	        }
	        controller.ui[ACTION$1] = new notActionUI({
	          name: "CRUDDelete",
	          target: controller.getContainerInnerElement(),
	          options: {
	            loaderActive: true,
	            loaderStyle: "container",
	            loaderTitle: "not-node:crud_delete_action_waiting",
	            container: {
	              id: `crud-delete-action-${params[0]}`
	            }
	          }
	        });
	        controller.setBreadcrumbs([{
	          title: "Удаление",
	          url: controller.getModelActionURL(params[0], ACTION$1)
	        }]);
	        if (confirm("Удалить запись?")) {
	          const deleteActionName = controller.getOptions(`${ACTION$1}.actionName`, MODEL_ACTION);
	          const success = await controller.onActionSubmit(deleteActionName, {
	            _id: params[0]
	          });
	          if (success) {
	            controller.goList();
	          }
	          return;
	        }
	        controller.goList();
	      } catch (e) {
	        controller.report(e);
	        controller.showErrorMessage(e);
	      }
	    }
	  }]);
	}();

	const ACTION = "list";
	let CRUDActionList = /*#__PURE__*/function () {
	  function CRUDActionList() {
	    _classCallCheck(this, CRUDActionList);
	  }
	  return _createClass(CRUDActionList, null, [{
	    key: "tweakActionsList",
	    value: function tweakActionsList(controller, ACTIONS_LIST) {
	      if (controller.getOptions(`${ACTION}.createAction`, true)) {
	        ACTIONS_LIST.push({
	          title: "Создать",
	          action: function () {
	            return controller.goCreate();
	          }
	        });
	      }
	      return ACTIONS_LIST;
	    }
	  }, {
	    key: "tweakUIOptions",
	    value: function tweakUIOptions(options) {
	      return options;
	    }

	    /**
	     *
	     *
	     * @static
	     * @param {import('../controller.crud').default} controller
	     * @param {string} value
	     * @param {number} [delay=0]
	     * @param {Array<string>} [actions=["details", "update", "delete"]]
	     * @param {Array<object>} [prepend=[]]
	     * @param {Array<object>} [append=[]]
	     * @param {boolean} [onlyIcons=true]
	     * @return {Array<object>}
	     * @memberof CRUDActionList
	     */
	  }, {
	    key: "createActionsButtons",
	    value: function createActionsButtons(controller, value, delay = 0, actions = ["details", "update", "delete"], prepend = [], append = [], onlyIcons = true) {
	      const ACTIONS = {
	        details: {
	          action: function () {
	            return controller.goDetails(value, delay);
	          },
	          ...(onlyIcons ? {
	            icon: "circle-info"
	          } : {
	            title: "Подробнее"
	          }),
	          size: "small"
	        },
	        update: {
	          action: function () {
	            return controller.goUpdate(value, delay);
	          },
	          ...(onlyIcons ? {
	            icon: "edit"
	          } : {
	            title: "Изменить"
	          }),
	          color: "warning",
	          size: "small"
	        },
	        delete: {
	          action: function () {
	            return controller.goDelete(value, delay);
	          },
	          color: "danger",
	          ...(onlyIcons ? {
	            icon: "trash"
	          } : {
	            title: "Удалить"
	          }),
	          size: "small",
	          style: "outlined"
	        }
	      };
	      const actionsButtons = [...prepend];
	      if (Array.isArray(actions)) {
	        actions.forEach(function (actionName) {
	          return actionsButtons.push(ACTIONS[actionName]);
	        });
	      }
	      actionsButtons.push(...append);
	      return actionsButtons;
	    }
	  }, {
	    key: "run",
	    value: async function run(controller, params) {
	      try {
	        //indicating that we are working
	        controller.renderLoadingScreen && controller.renderLoadingScreen();
	        await controller.preloadVariants(ACTION);
	        controller.setBreadcrumbs([{
	          title: "Список",
	          url: controller.getModelURL()
	        }]);
	        if (controller.ui[ACTION]) {
	          return;
	        } else {
	          controller.$destroyUI();
	        }
	        controller.ui[ACTION] = new notTable(this.tweakUIOptions(CRUDActionList.prepareOptions(controller)));
	        controller.emit(`after:render:${ACTION}`, params, controller.ui[ACTION]);
	      } catch (e) {
	        //informing about exception
	        controller.emit(`exception:render:${ACTION}`, params, e);
	        controller.report(e);
	        controller.showErrorMessage(e);
	      } finally {
	        controller.removeLoadingScreen && controller.removeLoadingScreen();
	      }
	    }
	  }, {
	    key: "prepareOptions",
	    value: function prepareOptions(controller) {
	      const DEFAULT_OPTIONS_TABLE = {
	        interface: controller.getOptions(`${ACTION}.interface`, {
	          combined: true,
	          factory: controller.getInterface()
	        }),
	        fields: undefined,
	        showSelect: undefined,
	        getItemId: undefined,
	        idField: undefined,
	        preload: {},
	        filterUI: controller.getOptions(`${ACTION}.filterUI`),
	        pager: {
	          size: 50,
	          page: 0
	        },
	        sorter: {
	          id: -1
	        },
	        filter: undefined,
	        ui: undefined
	      };
	      //forming actions buttons list
	      let ACTIONS_LIST = [...controller.getOptions(`${ACTION}.actions`, [])];
	      ACTIONS_LIST = this.tweakActionsList(controller, ACTIONS_LIST);
	      //
	      const TABLE_OPTIONS = {
	        options: {
	          targetEl: controller.getContainerInnerElement(),
	          endless: false,
	          actions: ACTIONS_LIST
	        }
	      };
	      Object.keys(DEFAULT_OPTIONS_TABLE).forEach(function (key) {
	        let optVal = controller.getOptions(`${ACTION}.${key}`, DEFAULT_OPTIONS_TABLE[key]);
	        if (typeof optVal !== "undefined") {
	          TABLE_OPTIONS.options[key] = optVal;
	        }
	      });
	      return TABLE_OPTIONS;
	    }
	  }]);
	}();

	var CRUDActions = {
	  create: CRUDActionCreate,
	  details: CRUDActionDetails,
	  update: CRUDActionUpdate,
	  delete: CRUDActionDelete,
	  list: CRUDActionList
	};

	const BREADCRUMBS = [];
	const TITLE_FIELDS_PRIORITY = ["title", "label", "id", "name"];
	const LOADING_SCREEN_UI_NAME = "loading_screen";
	var _actions = /*#__PURE__*/new WeakMap();
	var _router = /*#__PURE__*/new WeakMap();
	var _preloader = /*#__PURE__*/new WeakMap();
	let notCRUD = /*#__PURE__*/function (_notController) {
	  function notCRUD(app, name, {
	    actions,
	    router,
	    preloader
	  } = {
	    actions: undefined,
	    router: undefined,
	    preloader: undefined
	  }) {
	    var _this;
	    _classCallCheck(this, notCRUD);
	    _this = _callSuper(this, notCRUD, [app, `CRUD.${name}`]);
	    _classPrivateFieldInitSpec(_this, _actions, {
	      ...CRUDActions
	    });
	    _classPrivateFieldInitSpec(_this, _router, notCRUDRouter);
	    _classPrivateFieldInitSpec(_this, _preloader, CRUDVariantsPreloader);
	    _defineProperty(_this, "TITLE_FIELDS_PRIORITY", TITLE_FIELDS_PRIORITY);
	    _defineProperty(_this, "TOP_CLASS", ["box"]);
	    _defineProperty(_this, "MAIN_CLASS", ["box"]);
	    _defineProperty(_this, "BOTTOM_CLASS", ["box"]);
	    _defineProperty(_this, "WS_CHECK_INTERVAL", 200);
	    if (actions) {
	      // @ts-ignore
	      _classPrivateFieldSet2(_actions, _this, {
	        ..._classPrivateFieldGet2(_actions, _this),
	        ...actions
	      });
	    }
	    if (router) {
	      _classPrivateFieldSet2(_router, _this, router);
	    }
	    if (preloader) {
	      _classPrivateFieldSet2(_preloader, _this, preloader);
	    }
	    _this.ui = {};
	    _this.els = {};
	    _this.setOptions("names", {
	      module: "",
	      plural: "plural",
	      single: "single"
	    });
	    _this.setOptions("containerSelector", _this.app?.getOptions("crud.containerSelector"));
	    _this.buildFrame();
	    return _possibleConstructorReturn(_this, _this);
	  }
	  _inherits(notCRUD, _notController);
	  return _createClass(notCRUD, [{
	    key: "setValidators",
	    value: function setValidators(validators) {
	      //not-module-name -> [not,module,name]
	      const ModuleNameParts = this.getModuleName().split("-");
	      //[not,module,name] -> ModuleName
	      const ModuleName = (ModuleNameParts[0] === "not" ? ModuleNameParts.splice(1) : ModuleNameParts).map(notCommon$1.capitalizeFirstLetter).join("");
	      const serviceName = `ns${ModuleName}Common`;
	      const CommonModuleService = this.app?.getService(serviceName);
	      this.setWorking("validators", CommonModuleService.augmentValidators(validators));
	    }
	  }, {
	    key: "getValidators",
	    value: function getValidators() {
	      return this.getWorking("validators");
	    }
	  }, {
	    key: "start",
	    value: function start() {
	      var _this2 = this;
	      let newHead = [];
	      if (this.getModuleName() && this.getOptions("names.module")) {
	        newHead.push({
	          title: this.getOptions("names.module"),
	          url: false
	        });
	      }
	      newHead.push({
	        title: this.getOptions("names.plural"),
	        url: this.getModelURL()
	      });
	      BREADCRUMBS.splice(0, BREADCRUMBS.length, ...newHead);
	      notBreadcrumbs.setHead(BREADCRUMBS).render({
	        root: "",
	        target: this.els.top,
	        navigate: function (url) {
	          return _this2.app?.getWorking("router").navigate(url);
	        }
	      });
	      this.route(this.getOptions("params"));
	    }
	  }, {
	    key: "startWhenWSClientReady",
	    value: function startWhenWSClientReady() {
	      var _this3 = this;
	      if (this.app?.getWSClient()) {
	        if (this.app?.getWSClient().isConnected()) {
	          this.start();
	        } else {
	          this.app.getWSClient().once("connected", this.startWhenWSClientReady.bind(this));
	        }
	      } else {
	        setTimeout(function () {
	          return _this3.startWhenWSClientReady();
	        }, this.WS_CHECK_INTERVAL);
	      }
	    }
	  }, {
	    key: "setBreadcrumbs",
	    value: function setBreadcrumbs(tail) {
	      notBreadcrumbs.setTail(tail).update();
	    }
	  }, {
	    key: "backToList",
	    value: function backToList() {
	      this.navigate(this.linkBackToList());
	    }
	  }, {
	    key: "linkBackToList",
	    value: function linkBackToList() {
	      return this.getModelURL();
	    }
	  }, {
	    key: "afterAction",
	    value: function afterAction(action = "list") {
	      let navBack = this.app?.getOptions("crud.navigateBackAfter", []);
	      if (navBack && Array.isArray(navBack) && navBack.indexOf(action) > -1) {
	        window.history.back();
	      } else {
	        this.backToList();
	      }
	    }
	  }, {
	    key: "buildFrame",
	    value: function buildFrame() {
	      var _this4 = this;
	      let el = document.querySelector(this.app?.getOptions("crud.containerSelector", "body"));
	      while (el.firstChild) {
	        el.removeChild(el.firstChild);
	      }
	      this.els.top = document.createElement("div");
	      this.els.top.id = "crud-top";
	      this.getFrameClasses().TOP_CLASS.forEach(function (name) {
	        return _this4.els.top.classList.add(name);
	      });
	      el.appendChild(this.els.top);
	      this.els.main = document.createElement("div");
	      this.els.main.id = "crud-main";
	      this.getFrameClasses().MAIN_CLASS.forEach(function (name) {
	        return _this4.els.main.classList.add(name);
	      });
	      el.appendChild(this.els.main);
	      this.els.bottom = document.createElement("div");
	      this.els.bottom.id = "crud-bottom";
	      this.getFrameClasses().BOTTOM_CLASS.forEach(function (name) {
	        return _this4.els.bottom.classList.add(name);
	      });
	      el.appendChild(this.els.bottom);
	    }
	  }, {
	    key: "getFrameClasses",
	    value: function getFrameClasses() {
	      return {
	        TOP_CLASS: this.TOP_CLASS,
	        MAIN_CLASS: this.MAIN_CLASS,
	        BOTTOM_CLASS: this.BOTTOM_CLASS
	      };
	    }
	  }, {
	    key: "getContainerTopElement",
	    value: function getContainerTopElement() {
	      return this.els.top;
	    }
	  }, {
	    key: "getContainerInnerElement",
	    value: function getContainerInnerElement() {
	      return this.els.main;
	    }
	  }, {
	    key: "getContainerBottomElement",
	    value: function getContainerBottomElement() {
	      return this.els.bottom;
	    }
	  }, {
	    key: "preloadVariants",
	    value: async function preloadVariants(type = "list") {
	      await _classPrivateFieldGet2(_preloader, this).preload(this, type);
	    }
	  }, {
	    key: "getTitleFromLib",
	    value: function getTitleFromLib(propName, id) {
	      const actionName = this.getCurrentAction();
	      this.debug && this.debug("notCRUD.getTitleFromLib is obsolete, use notCRUD.getPreloadedVariantTitle(actionName, propName, id)");
	      return this.getPreloadedVariantTitle(actionName, propName, id);
	    }
	  }, {
	    key: "getPreloadedVariants",
	    value: function getPreloadedVariants(actionName, propName) {
	      return this.getOptions(`variants.${actionName}.${propName}`, []);
	    }
	  }, {
	    key: "getPreloadedVariantTitle",
	    value: function getPreloadedVariantTitle(actionName, propName, id) {
	      const variants = this.getPreloadedVariants(actionName, propName);
	      const item = variants.find(function (item) {
	        return item.id === id;
	      });
	      if (item) {
	        return item.title;
	      } else {
	        return id;
	      }
	    }
	  }, {
	    key: "getItemTitle",
	    value: function getItemTitle(item) {
	      const fieldName = this.TITLE_FIELDS_PRIORITY.find(function (key) {
	        return notCommon$1.objHas(item, key);
	      });
	      if (fieldName) {
	        return item[fieldName];
	      } else {
	        return "";
	      }
	    }
	  }, {
	    key: "createDefault",
	    value: function createDefault() {
	      return this.getModel({}).toDefault();
	    }
	  }, {
	    key: "route",
	    value: function route(params = []) {
	      try {
	        return _classPrivateFieldGet2(_router, this).route(this, params);
	      } catch (e) {
	        this.report(e);
	        this.showErrorMessage(e);
	      }
	    }
	  }, {
	    key: "actionHandlerExists",
	    value: function actionHandlerExists(actionName) {
	      if (Object.keys(_classPrivateFieldGet2(_actions, this)).includes(actionName)) {
	        return true;
	      }
	      if (typeof this["run" + notCommon$1.capitalizeFirstLetter(actionName)] === "function") {
	        return true;
	      }
	      return false;
	    }
	  }, {
	    key: "runAction",
	    value: function runAction(actionName, params) {
	      if (Object.keys(_classPrivateFieldGet2(_actions, this)).includes(actionName)) {
	        return _classPrivateFieldGet2(_actions, this)[actionName].run(this, params);
	      } else if (typeof this["run" + notCommon$1.capitalizeFirstLetter(actionName)] === "function") {
	        return this["run" + notCommon$1.capitalizeFirstLetter(actionName)](params);
	      } else {
	        throw new Error(`No such action: ${actionName} in contoller ${this.getWorking("name")}`);
	      }
	    }

	    /**
	     *  Changes location to create page, after delay
	     *  @param {number|string} [delay=0] number for ms, or string if we use `delays` alises aka SHORT, NORMAL, LONG
	     */
	  }, {
	    key: "goCreate",
	    value: function goCreate(delay = 0) {
	      this.goAfterDelay(this.getModelActionURL("", "create"), delay);
	    }

	    /**
	     *  Changes location to document details page, after delay
	     *  @param {string}         id          target document id
	     *  @param {number|string}  [delay=0]   number for ms, or string if we use `delays` alises aka SHORT, NORMAL, LONG
	     */
	  }, {
	    key: "goDetails",
	    value: function goDetails(id, delay = 0) {
	      this.goAfterDelay(this.getModelActionURL(id, ""), delay);
	    }

	    /**
	     * Changes location to document update page, after delay
	     * @param {string}          id          target document id
	     *  @param {number|string}  [delay=0]   number for ms, or string if we use `delays` alises aka SHORT, NORMAL, LONG
	     */
	  }, {
	    key: "goUpdate",
	    value: function goUpdate(id, delay = 0) {
	      this.goAfterDelay(this.getModelActionURL(id, "update"), delay);
	    }

	    /**
	     *  Changes location to document delete page, after delay
	     *  @param {string}         id          target document id
	     *  @param {number|string}  [delay=0]   number for ms, or string if we use `delays` alises aka SHORT, NORMAL, LONG
	     */
	  }, {
	    key: "goDelete",
	    value: function goDelete(id, delay = 0) {
	      this.goAfterDelay(this.getModelActionURL(id, "delete"), delay);
	    }

	    /**
	     *  Changes location to documents list page, after delay
	     *  @param {number|string}  [delay=0]   number for ms, or string if we use `delays` alises aka SHORT, NORMAL, LONG
	     */
	  }, {
	    key: "goList",
	    value: function goList(delay = 0) {
	      this.goAfterDelay(this.getModelURL(), delay);
	    }

	    /**
	     *
	     * @param {string} url
	     * @param {number|string} delay
	     */
	  }, {
	    key: "goAfterDelay",
	    value: function goAfterDelay(url, delay = 0) {
	      var _this5 = this;
	      this.navigateWithDelay(url, delay, function () {
	        return _this5.$destroyUI();
	      });
	    }

	    /**
	     *  Changes location to documents list page, after delay
	     *  @param {number|string}  [delay=0]   number for ms, or string if we use `delays` alises aka SHORT, NORMAL, LONG
	     */
	  }, {
	    key: "goBack",
	    value: function goBack(delay = 0) {
	      this.goList(delay);
	    }
	  }, {
	    key: "onActionSubmit",
	    value: async function onActionSubmit(action, item) {
	      let state = true;
	      const actionUI = this.ui[action];
	      if (actionUI) {
	        try {
	          actionUI.setLoading();
	          let result = await this.getModel(item)[`$${action}`]();
	          state = actionUI.processResult(result);
	        } catch (e) {
	          state = actionUI.processResult(e);
	        } finally {
	          actionUI.resetLoading();
	          // eslint-disable-next-line no-unsafe-finally
	          return state;
	        }
	      } else {
	        throw new Error("Action UI doesnt exist");
	      }
	    }
	  }, {
	    key: "$destroyUI",
	    value: function $destroyUI() {
	      for (let name in this.ui) {
	        this.destroyUIByName(name);
	      }
	    }
	  }, {
	    key: "destroyUIByName",
	    value: function destroyUIByName(name) {
	      // @ts-ignore
	      if (Object.hasOwn(this.ui, name)) {
	        this.ui[name].$destroy && this.ui[name].$destroy();
	        this.ui[name].destroy && this.ui[name].destroy();
	        delete this.ui[name];
	      }
	    }
	  }, {
	    key: "showErrorMessage",
	    value: function showErrorMessage(res) {
	      this.error && this.error(res);
	      this.app && this.app.emit("error", {
	        title: "Произошла ошибка",
	        message: res.message ? res.message : UICommon$1.ERROR_DEFAULT
	      });
	      CRUDMessage.error(this, "Произошла ошибка", res.message ? res.message : UICommon$1.ERROR_DEFAULT);
	    }
	  }, {
	    key: "showSuccessMessage",
	    value: function showSuccessMessage(title, message) {
	      this.app && this.app.emit("success", {
	        title,
	        message
	      });
	      CRUDMessage.success(this, title, message);
	    }
	  }, {
	    key: "setUI",
	    value: function setUI(name, val, singleUI = true) {
	      if (singleUI) {
	        this.$destroyUI();
	      }
	      this.ui[name] = val;
	    }
	  }, {
	    key: "getUI",
	    value: function getUI(name) {
	      return this.ui[name];
	    }
	  }, {
	    key: "getActionUI",
	    value: function getActionUI() {
	      return this.ui[this.getCurrentAction()];
	    }
	  }, {
	    key: "renderLoadingScreen",
	    value: function renderLoadingScreen() {
	      this.setUI(LOADING_SCREEN_UI_NAME, this.createLoaderUI());
	    }
	  }, {
	    key: "removeLoadingScreen",
	    value: function removeLoadingScreen() {
	      this.destroyUIByName(LOADING_SCREEN_UI_NAME);
	    }
	  }, {
	    key: "createLoaderUI",
	    value: function createLoaderUI() {
	      return mount(Ui_loader, {
	        target: this.getContainerInnerElement(),
	        props: {
	          loading: true,
	          title: ""
	        }
	      });
	    }
	  }], [{
	    key: "LABELS",
	    get: function () {
	      return Object.freeze({
	        plural: `${this.MODULE_NAME}:${this.MODEL_NAME}_label_plural`,
	        single: `${this.MODULE_NAME}:${this.MODEL_NAME}_label_single`
	      });
	    }
	  }, {
	    key: "getMenu",
	    value: function getMenu(itemCustomProps = {}) {
	      return [{
	        section: this.MODULE_NAME,
	        title: this.LABELS.plural,
	        url: `/${notCommon$1.lowerFirstLetter(this.MODULE_NAME)}/${notCommon$1.lowerFirstLetter(this.MODEL_NAME)}`,
	        ...itemCustomProps
	      }];
	    }
	  }]);
	}(notController);
	_defineProperty(notCRUD, "ERROR_DEFAULT", UICommon$1.ERROR_DEFAULT);

	const ROUTE_LIST = "list";
	/**
	 * Runs controller action by name that gets from URI params
	 * @class
	 */
	let notCRUDPlainRouter = /*#__PURE__*/function () {
	  function notCRUDPlainRouter() {
	    _classCallCheck(this, notCRUDPlainRouter);
	  }
	  return _createClass(notCRUDPlainRouter, null, [{
	    key: "extractActionName",
	    value:
	    /**
	     * Returns first item from params or throws Error
	     * @param {string[]} params array of strings parsed from URI by route rules
	     * @returns {string}
	     */
	    function extractActionName(params) {
	      if (params.length > 0) {
	        return params[0];
	      }
	      return this.DEFAULT_ROUTE;
	    }

	    /**
	     * Runs controller action or throws
	     * @param {object} controller   instance of notController descendant
	     * @param {string[]} params
	     */
	  }, {
	    key: "route",
	    value: function route(controller, params) {
	      try {
	        const actionName = this.extractActionName(params);
	        controller.setCurrentAction(actionName);
	        return controller.runAction(actionName, params);
	      } catch (e) {
	        controller.report(e);
	        controller.showErrorMessage(e);
	      }
	    }
	  }]);
	}();
	_defineProperty(notCRUDPlainRouter, "DEFAULT_ROUTE", ROUTE_LIST);

	/**
	 * Runs controller action by name that gets from URI params
	 * @class
	 */
	let notCRUDRouterSwitch = /*#__PURE__*/function () {
	  function notCRUDRouterSwitch() {
	    _classCallCheck(this, notCRUDRouterSwitch);
	  }
	  return _createClass(notCRUDRouterSwitch, null, [{
	    key: "routesVariants",
	    get:
	    /**
	     * Variants of this action
	     */
	    function () {
	      return {
	        /**
	        routeName: Action
	         */
	      };
	    }

	    /**
	     * Returns true if variant name is valid
	     * @param {string} name    name of route variant
	     * @returns {boolean}
	     */
	  }, {
	    key: "isRouteVariantValid",
	    value: function isRouteVariantValid(name) {
	      return name !== "" && notCommon$1.objHas(this.routesVariants, name);
	    }

	    /**
	     * This function returns which of routes variant should be executed
	     * @param {object} controller   instance of notController descendant
	     * @param {string[]}    params  params passed to router
	     * @returns {Promise<string>}    name of route variant
	     */
	    // eslint-disable-next-line no-unused-vars
	  }, {
	    key: "determineRoute",
	    value: async function determineRoute(controller, params = []) {
	      return "";
	    }

	    /**
	     * Runs controller action or throws
	     * @param {object} controller   instance of notController descendant
	     * @param {string[]} params
	     */
	  }, {
	    key: "route",
	    value: async function route(controller, params) {
	      try {
	        const actionName = await this.determineRoute(controller, params);
	        if (this.isRouteVariantValid(actionName)) {
	          controller.setCurrentAction(actionName);
	          const routerAction = this.routesVariants[actionName];
	          if (notCommon$1.isAsync(routerAction.run)) {
	            await routerAction.run(controller, params);
	          } else {
	            routerAction.run(controller, params);
	          }
	        } else {
	          throw new Error(`No such action: ${actionName} in contoller ${controller.getWorking("name")}`);
	        }
	      } catch (e) {
	        controller.report(e);
	        controller.showErrorMessage(e);
	      }
	    }
	  }]);
	}();

	const emptyResult = function () {
	  return {
	    list: [],
	    count: 0,
	    page: 0,
	    pages: 0,
	    skip: 0
	  };
	};
	let notServiceModelSearch = /*#__PURE__*/function () {
	  function notServiceModelSearch(app, modelName) {
	    _classCallCheck(this, notServiceModelSearch);
	    this.modelName = modelName;
	    this.app = app;
	  }
	  return _createClass(notServiceModelSearch, [{
	    key: "destroy",
	    value: function destroy() {
	      delete this.app;
	    }
	  }, {
	    key: "getSearchRouteName",
	    value: function getSearchRouteName() {
	      return "listAndCount";
	    }
	  }, {
	    key: "getDataLoadRouteName",
	    value: function getDataLoadRouteName() {
	      return "get";
	    }
	  }, {
	    key: "transformSearchResult",
	    value: function transformSearchResult(result) {
	      var _this = this;
	      result.list = result.list.map(function (item) {
	        return {
	          _id: item._id,
	          id: item[`${_this.modelName}ID`],
	          title: item.name || item.title || item.label || item.username
	        };
	      });
	      return result;
	    }
	  }, {
	    key: "transformSelectedResult",
	    value: function transformSelectedResult(result) {
	      return {
	        _id: result._id,
	        [`${this.modelName}ID`]: result.id,
	        title: result.title
	      };
	    }
	  }, {
	    key: "searchByTerm",
	    value: async function searchByTerm(term) {
	      try {
	        if (term.value.length > 2) {
	          const model = this.app.getModel(this.modelName);
	          model.setSearch(term.value);
	          const response = await model[`$${this.getSearchRouteName()}`]();
	          if (response.status === "ok") {
	            return this.transformSearchResult(response.result);
	          } else {
	            return emptyResult();
	          }
	        } else {
	          return emptyResult();
	        }
	      } catch {
	        return emptyResult();
	      }
	    }
	  }, {
	    key: "openSelector",
	    value: function openSelector() {
	      var _this2 = this;
	      return new Promise(function (resolve, reject) {
	        try {
	          const el = mount(Ui_generic_selector, {
	            target: document.body,
	            props: {}
	          });
	          el.$on("termChange", async function ({
	            detail
	          }) {
	            const results = await _this2.searchByTerm(detail);
	            el.$set({
	              results
	            });
	          });
	          el.$on("next", function () {
	            console.log("next selector results");
	          });
	          el.$on("prev", function () {
	            console.log("prev selector results");
	          });
	          el.$on("reject", function () {
	            unmount(el);
	            reject();
	          });
	          el.$on("resolve", function ({
	            detail
	          }) {
	            unmount(el);
	            resolve(_this2.transformSelectedResult(detail));
	          });
	        } catch (e) {
	          _this2.app.error(e);
	          reject(e);
	        }
	      });
	    }
	  }, {
	    key: "loadData",
	    value: async function loadData(_id) {
	      try {
	        if (_id && _id.length > 10) {
	          const model = this.app.getModel(this.modelName, {
	            _id
	          });
	          const response = await model[`$${this.getDataLoadRouteName()}`]();
	          if (response.status === "ok") {
	            return response.result;
	          } else {
	            return null;
	          }
	        } else {
	          return null;
	        }
	      } catch (e) {
	        this.app.error(e);
	        return null;
	      }
	    }
	  }]);
	}();

	//import 'babel-polyfill/dist/polyfill';

	const ncCRUD = notCRUD; //legacy alias

	var Frame = /*#__PURE__*/Object.freeze({
		__proto__: null,
		COMPONENTS: COMPONENTS$1,
		FIELDS: FIELDS$1,
		UIForm: Form,
		VARIANTS: VARIANTS$1,
		createCRUDActionUIView: create_crud_action_ui_view,
		ncCRUD: ncCRUD,
		notAPI: index,
		notApp: notApp,
		notBase: notBase,
		notBreadcrumbs: notBreadcrumbs,
		notCRUD: notCRUD,
		notCRUDRouter: notCRUDRouter,
		notCRUDRouterPlain: notCRUDPlainRouter,
		notCRUDRouterSwitch: notCRUDRouterSwitch,
		notCommon: notCommon$1,
		notController: notController,
		notForm: notForm,
		notFormHelpers: FormHelpers,
		notFormRules: notFormRules,
		notFormSet: notFormSet,
		notFormUtils: notFormUtils$1,
		notInterface: notInterface,
		notPath: notPath,
		notRecord: notRecord,
		notRouter: notRouter$1,
		notServiceModelSearch: notServiceModelSearch,
		notSideMenu: notSideMenu,
		notStores: stores,
		notTable: notTable,
		notTopMenu: notTopMenu
	});

	const Locale = {
	  LOCALE,
	  say,
	  notLocale: notLocale$1
	};
	const UICommon = UICommon$1;
	const {
	  notCommon,
	  COMPONENTS,
	  FIELDS,
	  VARIANTS,
	  notFormUtils
	} = Frame;
	Object.keys(Elements).forEach(function (componentsSetName) {
	  Object.keys(Elements[componentsSetName]).forEach(function (componentName) {
	    notFormUtils$1.addComponent(componentName, Elements[componentsSetName][componentName]);
	  });
	});

	exports.COMPONENTS = COMPONENTS;
	exports.Elements = Elements;
	exports.FIELDS = FIELDS;
	exports.Frame = Frame;
	exports.LOCALE = LOCALE;
	exports.Locale = Locale;
	exports.UICommon = UICommon;
	exports.VARIANTS = VARIANTS;
	exports.notCommon = notCommon;
	exports.notFormUtils = notFormUtils;
	exports.notLocale = notLocale$1;
	exports.say = say;
	exports.svelte = indexClient;

	return exports;

})({});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm90QnVsbWEuanMiLCJzb3VyY2VzIjpbIi4uL25vZGVfbW9kdWxlcy9lc20tZW52L3RydWUuanMiLCIuLi9ub2RlX21vZHVsZXMvc3ZlbHRlL3NyYy9pbnRlcm5hbC9zaGFyZWQvdXRpbHMuanMiLCIuLi9ub2RlX21vZHVsZXMvc3ZlbHRlL3NyYy9pbnRlcm5hbC9jbGllbnQvY29uc3RhbnRzLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3N2ZWx0ZS9zcmMvaW50ZXJuYWwvY2xpZW50L3JlYWN0aXZpdHkvZXF1YWxpdHkuanMiLCIuLi9ub2RlX21vZHVsZXMvc3ZlbHRlL3NyYy9pbnRlcm5hbC9jbGllbnQvZXJyb3JzLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3N2ZWx0ZS9zcmMvaW50ZXJuYWwvZmxhZ3MvaW5kZXguanMiLCIuLi9ub2RlX21vZHVsZXMvc3ZlbHRlL3NyYy9jb25zdGFudHMuanMiLCIuLi9ub2RlX21vZHVsZXMvc3ZlbHRlL3NyYy9pbnRlcm5hbC9zaGFyZWQvd2FybmluZ3MuanMiLCIuLi9ub2RlX21vZHVsZXMvc3ZlbHRlL3NyYy9pbnRlcm5hbC9zaGFyZWQvY2xvbmUuanMiLCIuLi9ub2RlX21vZHVsZXMvc3ZlbHRlL3NyYy9pbnRlcm5hbC9jbGllbnQvZGV2L3RyYWNpbmcuanMiLCIuLi9ub2RlX21vZHVsZXMvc3ZlbHRlL3NyYy9pbnRlcm5hbC9jbGllbnQvcmVhY3Rpdml0eS9zb3VyY2VzLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3N2ZWx0ZS9zcmMvaW50ZXJuYWwvY2xpZW50L3dhcm5pbmdzLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3N2ZWx0ZS9zcmMvaW50ZXJuYWwvY2xpZW50L2RvbS9oeWRyYXRpb24uanMiLCIuLi9ub2RlX21vZHVsZXMvc3ZlbHRlL3NyYy9pbnRlcm5hbC9jbGllbnQvZGV2L293bmVyc2hpcC5qcyIsIi4uL25vZGVfbW9kdWxlcy9zdmVsdGUvc3JjL2ludGVybmFsL2NsaWVudC9wcm94eS5qcyIsIi4uL25vZGVfbW9kdWxlcy9zdmVsdGUvc3JjL2ludGVybmFsL2NsaWVudC9kZXYvZXF1YWxpdHkuanMiLCIuLi9ub2RlX21vZHVsZXMvc3ZlbHRlL3NyYy9pbnRlcm5hbC9jbGllbnQvZG9tL29wZXJhdGlvbnMuanMiLCIuLi9ub2RlX21vZHVsZXMvc3ZlbHRlL3NyYy9pbnRlcm5hbC9jbGllbnQvcmVhY3Rpdml0eS9kZXJpdmVkcy5qcyIsIi4uL25vZGVfbW9kdWxlcy9zdmVsdGUvc3JjL2ludGVybmFsL2NsaWVudC9yZWFjdGl2aXR5L2VmZmVjdHMuanMiLCIuLi9ub2RlX21vZHVsZXMvc3ZlbHRlL3NyYy9pbnRlcm5hbC9jbGllbnQvZG9tL3Rhc2suanMiLCIuLi9ub2RlX21vZHVsZXMvc3ZlbHRlL3NyYy9pbnRlcm5hbC9zaGFyZWQvZXJyb3JzLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3N2ZWx0ZS9zcmMvaW50ZXJuYWwvY2xpZW50L3J1bnRpbWUuanMiLCIuLi9ub2RlX21vZHVsZXMvc3ZlbHRlL3NyYy91dGlscy5qcyIsIi4uL25vZGVfbW9kdWxlcy9zdmVsdGUvc3JjL2ludGVybmFsL2NsaWVudC9kb20vZWxlbWVudHMvbWlzYy5qcyIsIi4uL25vZGVfbW9kdWxlcy9zdmVsdGUvc3JjL2ludGVybmFsL2NsaWVudC9kb20vZWxlbWVudHMvYmluZGluZ3Mvc2hhcmVkLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3N2ZWx0ZS9zcmMvaW50ZXJuYWwvY2xpZW50L2RvbS9lbGVtZW50cy9ldmVudHMuanMiLCIuLi9ub2RlX21vZHVsZXMvc3ZlbHRlL3NyYy9pbnRlcm5hbC9jbGllbnQvZG9tL3JlY29uY2lsZXIuanMiLCIuLi9ub2RlX21vZHVsZXMvc3ZlbHRlL3NyYy9pbnRlcm5hbC9jbGllbnQvZG9tL3RlbXBsYXRlLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3N2ZWx0ZS9zcmMvaW50ZXJuYWwvY2xpZW50L3JlbmRlci5qcyIsIi4uL25vZGVfbW9kdWxlcy9zdmVsdGUvc3JjL2ludGVybmFsL2NsaWVudC9kb20vYmxvY2tzL2lmLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3N2ZWx0ZS9zcmMvaW50ZXJuYWwvY2xpZW50L2RvbS9ibG9ja3MvZWFjaC5qcyIsIi4uL25vZGVfbW9kdWxlcy9zdmVsdGUvc3JjL2ludGVybmFsL2NsaWVudC9kb20vYmxvY2tzL2h0bWwuanMiLCIuLi9ub2RlX21vZHVsZXMvc3ZlbHRlL3NyYy9pbnRlcm5hbC9jbGllbnQvZG9tL2Jsb2Nrcy9zbG90LmpzIiwiLi4vbm9kZV9tb2R1bGVzL3N2ZWx0ZS9zcmMvaW50ZXJuYWwvY2xpZW50L2RvbS9ibG9ja3Mvc25pcHBldC5qcyIsIi4uL25vZGVfbW9kdWxlcy9zdmVsdGUvc3JjL2ludGVybmFsL2NsaWVudC9kb20vYmxvY2tzL3N2ZWx0ZS1jb21wb25lbnQuanMiLCIuLi9ub2RlX21vZHVsZXMvc3ZlbHRlL3NyYy9pbnRlcm5hbC9jbGllbnQvZG9tL2Jsb2Nrcy9zdmVsdGUtZWxlbWVudC5qcyIsIi4uL25vZGVfbW9kdWxlcy9zdmVsdGUvc3JjL2ludGVybmFsL2NsaWVudC9kb20vZWxlbWVudHMvYXR0cmlidXRlcy5qcyIsIi4uL25vZGVfbW9kdWxlcy9zdmVsdGUvc3JjL2ludGVybmFsL2NsaWVudC9kb20vZWxlbWVudHMvY2xhc3MuanMiLCIuLi9ub2RlX21vZHVsZXMvc3ZlbHRlL3NyYy9pbnRlcm5hbC9jbGllbnQvdGltaW5nLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3N2ZWx0ZS9zcmMvaW50ZXJuYWwvY2xpZW50L2xvb3AuanMiLCIuLi9ub2RlX21vZHVsZXMvc3ZlbHRlL3NyYy9pbnRlcm5hbC9jbGllbnQvZG9tL2VsZW1lbnRzL3RyYW5zaXRpb25zLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3N2ZWx0ZS9zcmMvaW50ZXJuYWwvY2xpZW50L2RvbS9lbGVtZW50cy9iaW5kaW5ncy9pbnB1dC5qcyIsIi4uL25vZGVfbW9kdWxlcy9zdmVsdGUvc3JjL2ludGVybmFsL2NsaWVudC9kb20vZWxlbWVudHMvYmluZGluZ3MvcHJvcHMuanMiLCIuLi9ub2RlX21vZHVsZXMvc3ZlbHRlL3NyYy9pbnRlcm5hbC9jbGllbnQvZG9tL2VsZW1lbnRzL2JpbmRpbmdzL3NlbGVjdC5qcyIsIi4uL25vZGVfbW9kdWxlcy9zdmVsdGUvc3JjL2ludGVybmFsL2NsaWVudC9kb20vZWxlbWVudHMvYmluZGluZ3MvdGhpcy5qcyIsIi4uL25vZGVfbW9kdWxlcy9zdmVsdGUvc3JjL2ludGVybmFsL2NsaWVudC9kb20vbGVnYWN5L2V2ZW50LW1vZGlmaWVycy5qcyIsIi4uL25vZGVfbW9kdWxlcy9zdmVsdGUvc3JjL2ludGVybmFsL2NsaWVudC9kb20vbGVnYWN5L2xpZmVjeWNsZS5qcyIsIi4uL25vZGVfbW9kdWxlcy9zdmVsdGUvc3JjL2ludGVybmFsL2NsaWVudC9kb20vbGVnYWN5L21pc2MuanMiLCIuLi9ub2RlX21vZHVsZXMvc3ZlbHRlL3NyYy9zdG9yZS91dGlscy5qcyIsIi4uL25vZGVfbW9kdWxlcy9zdmVsdGUvc3JjL2ludGVybmFsL2NsaWVudC9yZWFjdGl2aXR5L3N0b3JlLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3N2ZWx0ZS9zcmMvaW50ZXJuYWwvY2xpZW50L3JlYWN0aXZpdHkvcHJvcHMuanMiLCIuLi9ub2RlX21vZHVsZXMvc3ZlbHRlL3NyYy9sZWdhY3kvbGVnYWN5LWNsaWVudC5qcyIsIi4uL25vZGVfbW9kdWxlcy9zdmVsdGUvc3JjL2luZGV4LWNsaWVudC5qcyIsIi4uL25vZGVfbW9kdWxlcy9zdmVsdGUvc3JjL3ZlcnNpb24uanMiLCIuLi9ub2RlX21vZHVsZXMvc3ZlbHRlL3NyYy9pbnRlcm5hbC9kaXNjbG9zZS12ZXJzaW9uLmpzIiwiLi4vc3JjL2VsZW1lbnRzL2NvbW1vbi5qcyIsIi4uL3NyYy9lbGVtZW50cy9ibG9jay91aS5ibG9jay5zdmVsdGUiLCIuLi9zcmMvZWxlbWVudHMvYmxvY2svdWkuYmxvY2suaW5uZXIudmVydGljYWwuc3ZlbHRlIiwiLi4vc3JjL2VsZW1lbnRzL2Jsb2NrL3VpLmJveC5zdmVsdGUiLCIuLi9zcmMvZWxlbWVudHMvYmxvY2svdWkuY29udGVudC5zdmVsdGUiLCIuLi9ub2RlX21vZHVsZXMvc3ZlbHRlL3NyYy9zdG9yZS9zaGFyZWQvaW5kZXguanMiLCIuLi9zcmMvbG9jYWxlL3N0b3JlLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3dvbGZ5ODctZXZlbnRlbWl0dGVyL0V2ZW50RW1pdHRlci5qcyIsIi4uL25vZGVfbW9kdWxlcy9ub3QtcGF0aC9zcmMvaW5kZXguanMiLCIuLi9ub2RlX21vZHVsZXMvbm90LXBhdGgvaW5kZXguanMiLCIuLi9zcmMvZnJhbWUvY29tbW9uLmpzIiwiLi4vc3JjL2xvY2FsZS9ub3RMb2NhbGUuanMiLCIuLi9zcmMvbG9jYWxlL2luZGV4LmpzIiwiLi4vc3JjL2VsZW1lbnRzL3ZhcmlvdXMvdWkudGFnLnN2ZWx0ZSIsIi4uL3NyYy9lbGVtZW50cy92YXJpb3VzL3VpLmJvb2xlYW4uc3ZlbHRlIiwiLi4vc3JjL2VsZW1lbnRzL3ZhcmlvdXMvdWkuYm9vbGVhbi5sYWJlbGVkLnN2ZWx0ZSIsIi4uL3NyYy9lbGVtZW50cy92YXJpb3VzL3VpLmJvb2xlYW5zLnN2ZWx0ZSIsIi4uL3NyYy9lbGVtZW50cy92YXJpb3VzL3VpLmNlbnNvcmVkLnN2ZWx0ZSIsIi4uL3NyYy9lbGVtZW50cy92YXJpb3VzL3VpLmluZGljYXRvci5zdmVsdGUiLCIuLi9zcmMvZWxlbWVudHMvdmFyaW91cy91aS5sb2FkZXIuc3ZlbHRlIiwiLi4vc3JjL2VsZW1lbnRzL2lucHV0L3VpLnNlbGVjdC5vcHRpb24uc3ZlbHRlIiwiLi4vc3JjL2VsZW1lbnRzL2lucHV0L3VpLnNlbGVjdC5zdmVsdGUiLCIuLi9zcmMvZWxlbWVudHMvYnV0dG9uL3VpLmJ1dHRvbi5zdmVsdGUiLCIuLi9zcmMvZWxlbWVudHMvYnV0dG9uL3VpLmJ1dHRvbnMuc3ZlbHRlIiwiLi4vc3JjL2VsZW1lbnRzL2J1dHRvbi91aS5idXR0b25zLnJvdy5zdmVsdGUiLCIuLi9zcmMvZWxlbWVudHMvYnV0dG9uL3VpLmJ1dHRvbi5zd2l0Y2guc3ZlbHRlIiwiLi4vc3JjL2VsZW1lbnRzL2J1dHRvbi91aS5idXR0b25zLnN3aXRjaGVycy5zdmVsdGUiLCIuLi9zcmMvZnJhbWUvY29uc3QuanMiLCIuLi9zcmMvZWxlbWVudHMvdmFyaW91cy91aS5zZWxlY3QuZnJvbS5tb2RlbC5vbi5kZW1hbmQuaW5saW5lLnN2ZWx0ZSIsIi4uL3NyYy9lbGVtZW50cy92YXJpb3VzL3VpLnNlbGVjdC5mcm9tLm1vZGVsLndpdGguc2VhcmNoLm1vZGFsLnN2ZWx0ZSIsIi4uL3NyYy9lbGVtZW50cy92YXJpb3VzL3VpLnByb2dyZXNzLnN2ZWx0ZSIsIi4uL3NyYy9lbGVtZW50cy92YXJpb3VzL3VpLnNob3cub25lLmZyb20ubGlzdC5zdmVsdGUiLCIuLi9zcmMvZWxlbWVudHMvdmFyaW91cy91aS50YWcudmFsdWUuc3ZlbHRlIiwiLi4vc3JjL2VsZW1lbnRzL3ZhcmlvdXMvdWkudGl0bGUuc3ZlbHRlIiwiLi4vc3JjL2VsZW1lbnRzL3ZhcmlvdXMvdWkuZXJyb3JzLmxpc3Quc3ZlbHRlIiwiLi4vc3JjL2VsZW1lbnRzL3ZhcmlvdXMvdWkudXNlci5jYXJkLnN2ZWx0ZSIsIi4uL3NyYy9lbGVtZW50cy9pbnB1dC91aS50ZXh0ZmllbGQuc3ZlbHRlIiwiLi4vc3JjL2VsZW1lbnRzL3ZhcmlvdXMvdWkuc2ltcGxlLnNlYXJjaC5pbnB1dC5zdmVsdGUiLCIuLi9zcmMvZWxlbWVudHMvZm9ybS91aS5mb3JtLmlucHV0LmVycm9ycy5zdmVsdGUiLCIuLi9zcmMvZWxlbWVudHMvaW5wdXQvdWkubGFiZWwuc3ZlbHRlIiwiLi4vc3JjL2VsZW1lbnRzL2ljb24vdWkuaWNvbi5idXR0b24ud2l0aC50YWcuc3ZlbHRlIiwiLi4vc3JjL2VsZW1lbnRzL2ljb24vdWkuaWNvbi5mbG9hdGluZy5zdmVsdGUiLCIuLi9zcmMvZWxlbWVudHMvaWNvbi91aS5pY29uLmZvbnQuc3ZlbHRlIiwiLi4vc3JjL2VsZW1lbnRzL2ljb24vdWkuaWNvbi5zdmVsdGUiLCIuLi9zcmMvZWxlbWVudHMvZm9ybS91aS52YWxpZGF0ZWQuaWNvbi5zdmVsdGUiLCIuLi9zcmMvZWxlbWVudHMvZm9ybS91aS5mb3JtLmlucHV0LnN2ZWx0ZSIsIi4uL3NyYy9lbGVtZW50cy9pbnB1dC91aS5jb250cm9sLnN2ZWx0ZSIsIi4uL3NyYy9lbGVtZW50cy9mb3JtL3VpLmZvcm0uY29udHJvbC5zdmVsdGUiLCIuLi9zcmMvZWxlbWVudHMvaW1hZ2UvdWkuaW1hZ2Uuc3ZlbHRlIiwiLi4vc3JjL2VsZW1lbnRzL2ltYWdlL3VpLmltYWdlcy5zdmVsdGUiLCIuLi9ub2RlX21vZHVsZXMvc3ZlbHRlL3NyYy9pbnRlcm5hbC9mbGFncy9sZWdhY3kuanMiLCIuLi9ub2RlX21vZHVsZXMvc3ZlbHRlL3NyYy9lYXNpbmcvaW5kZXguanMiLCIuLi9ub2RlX21vZHVsZXMvc3ZlbHRlL3NyYy9hbmltYXRlL2luZGV4LmpzIiwiLi4vbm9kZV9tb2R1bGVzL3N2ZWx0ZS9zcmMvdHJhbnNpdGlvbi9pbmRleC5qcyIsIi4uL25vZGVfbW9kdWxlcy9zaW1wbGUtc3ZlbHRlLWF1dG9jb21wbGV0ZS9zcmMvU2ltcGxlQXV0b2NvbXBsZXRlLnN2ZWx0ZSIsIi4uL3NyYy9lbGVtZW50cy9pbnB1dC91aS5hdXRvY29tcGxldGUuc3ZlbHRlIiwiLi4vc3JjL2VsZW1lbnRzL2lucHV0L3VpLmRhdGUuc3ZlbHRlIiwiLi4vc3JjL2VsZW1lbnRzL2lucHV0L3VpLmRhdGV0aW1lLmluLnR6LnN2ZWx0ZSIsIi4uL3NyYy9lbGVtZW50cy9pbnB1dC91aS5lbWFpbC5zdmVsdGUiLCIuLi9zcmMvZWxlbWVudHMvaW5wdXQvdWkuaGlkZGVuLnN2ZWx0ZSIsIi4uL3NyYy9lbGVtZW50cy9pbnB1dC91aS50ZXh0YXJlYS5zdmVsdGUiLCIuLi9zcmMvZWxlbWVudHMvaW5wdXQvdWkuanNvbi5hcmVhLnN2ZWx0ZSIsIi4uL3NyYy9mcmFtZS9saWIuanMiLCIuLi9zcmMvZnJhbWUvTElCLmpzIiwiLi4vc3JjL2VsZW1lbnRzL2xpc3QvdWkubGlzdC5lbXB0eS5wbGFjZWhvbGRlci5zdmVsdGUiLCIuLi9zcmMvZWxlbWVudHMvbGluay91aS5saW5rLnN2ZWx0ZSIsIi4uL3NyYy9lbGVtZW50cy9saW5rL3VpLmxpbmtzLnN2ZWx0ZSIsIi4uL3NyYy9lbGVtZW50cy9saXN0L3VpLmxpc3QuaXRlbS5zdmVsdGUiLCIuLi9zcmMvZWxlbWVudHMvbGlzdC91aS5saXN0LmJsb2NrLnN2ZWx0ZSIsIi4uL3NyYy9lbGVtZW50cy9saXN0L3VpLmxpc3Quc3ZlbHRlIiwiLi4vc3JjL2VsZW1lbnRzL2lucHV0L3VpLmxpc3Qub2YubW9kZWxzLnN2ZWx0ZSIsIi4uL3NyYy9lbGVtZW50cy9sYXlvdXQvdWkuY29sdW1uLnN2ZWx0ZSIsIi4uL3NyYy9lbGVtZW50cy9sYXlvdXQvdWkuY29sdW1ucy5zdmVsdGUiLCIuLi9zcmMvZWxlbWVudHMvbGF5b3V0L3VpLmNvbnRhaW5lci5zdmVsdGUiLCIuLi9zcmMvZWxlbWVudHMvbGF5b3V0L3VpLmZvb3Rlci5zdmVsdGUiLCIuLi9zcmMvZWxlbWVudHMvbGF5b3V0L3VpLnNlY3Rpb24uc3ZlbHRlIiwiLi4vc3JjL2VsZW1lbnRzL2xheW91dC91aS5sZXZlbC5pdGVtLnN2ZWx0ZSIsIi4uL3NyYy9lbGVtZW50cy9pbnB1dC91aS5udW1iZXIuc3ZlbHRlIiwiLi4vc3JjL2VsZW1lbnRzL2lucHV0L3VpLm5hbWVkLm51bWJlcnMubGlzdC5zdmVsdGUiLCIuLi9zcmMvZWxlbWVudHMvaW5wdXQvdWkucGFzc3dvcmQuc3ZlbHRlIiwiLi4vc3JjL2VsZW1lbnRzL2lucHV0L3VpLnJhZGlvLmJ1dHRvbnMuc3ZlbHRlIiwiLi4vc3JjL2VsZW1lbnRzL2lucHV0L3VpLnJhbmdlLnN2ZWx0ZSIsIi4uL3NyYy9lbGVtZW50cy9pbnB1dC91aS5zZWxlY3QuZnJvbS5tb2RlbC5zdmVsdGUiLCIuLi9zcmMvZWxlbWVudHMvaW5wdXQvdWkuc3dpdGNoLnN2ZWx0ZSIsIi4uL3NyYy9lbGVtZW50cy9pbnB1dC91aS5zd2l0Y2gubGlzdC5zdmVsdGUiLCIuLi9zcmMvZWxlbWVudHMvaW5wdXQvdWkudGFnLnNlbGVjdC5zdmVsdGUiLCIuLi9zcmMvZWxlbWVudHMvaW5wdXQvdWkudGVsZXBob25lLnN2ZWx0ZSIsIi4uL3NyYy9lbGVtZW50cy9saXN0L2VuZGxlc3MvdWkuZW5kbGVzcy5saXN0Lm5hdmlnYXRpb24uc3ZlbHRlIiwiLi4vc3JjL2VsZW1lbnRzL2xpc3QvZW5kbGVzcy91aS5lbmRsZXNzLmxpc3Quc2ltcGxlLml0ZW0uc3ZlbHRlIiwiLi4vc3JjL2VsZW1lbnRzL2xpc3QvZW5kbGVzcy91aS5lbmRsZXNzLmxpc3Quc3ZlbHRlIiwiLi4vc3JjL2VsZW1lbnRzL2xpc3QvdWkubGlzdC5zZWxlY3Quc3ZlbHRlIiwiLi4vc3JjL2VsZW1lbnRzL2xpc3QvdWkubGlzdC5zZWxlY3Qud2l0aC5ncm91cHMuc3ZlbHRlIiwiLi4vc3JjL2VsZW1lbnRzL2xpc3QvdWkubGlzdC5zZWxlY3QuYnV0dG9ucy53aXRoLmdyb3Vwcy5zdmVsdGUiLCIuLi9zcmMvZWxlbWVudHMvbW9kYWwvdWkub3ZlcmxheS5zdmVsdGUiLCIuLi9zcmMvZWxlbWVudHMvbW9kYWwvdWkubW9kYWwuc3ZlbHRlIiwiLi4vc3JjL2VsZW1lbnRzL21vZGFsL3VpLmdlbmVyaWMuc2VsZWN0b3Iuc3ZlbHRlIiwiLi4vc3JjL2VsZW1lbnRzL25vdGlmaWNhdGlvbi91aS5lcnJvci5zdmVsdGUiLCIuLi9zcmMvZWxlbWVudHMvbm90aWZpY2F0aW9uL3VpLnN1Y2Nlc3Muc3ZlbHRlIiwiLi4vc3JjL2VsZW1lbnRzL25vdGlmaWNhdGlvbi91aS5jb29raWUubm90aWZpY2F0aW9uLnN2ZWx0ZSIsIi4uL3NyYy9lbGVtZW50cy9pbmRleC5qcyIsIi4uL3NyYy9mcmFtZS9iYXNlLmpzIiwiLi4vc3JjL2ZyYW1lL3JvdXRlci5qcyIsIi4uL3NyYy9mcmFtZS9hcGkvcXVldWUuanMiLCIuLi9zcmMvZnJhbWUvYXBpL29wdGlvbnMuanMiLCIuLi9zcmMvZnJhbWUvYXBpL2Nvbm5lY3Rpb24uanMiLCIuLi9zcmMvZnJhbWUvc3RvcmVzLmpzIiwiLi4vc3JjL2ZyYW1lL29wdGlvbnMuanMiLCIuLi9zcmMvZnJhbWUvaW50ZXJmYWNlLmpzIiwiLi4vc3JjL2ZyYW1lL3JlY29yZC5qcyIsIi4uL3NyYy9mcmFtZS9hcHAuanMiLCIuLi9zcmMvZnJhbWUvY29udHJvbGxlci5qcyIsIi4uL3NyYy9mcmFtZS9jb21wb25lbnRzL3RhYmxlL3N0b3Jlcy5qcyIsIi4uL3NyYy9mcmFtZS9jb21wb25lbnRzL3RhYmxlL2NvbnRyb2xzL3VpLnN3aXRjaC5zdmVsdGUiLCIuLi9zcmMvZnJhbWUvY29tcG9uZW50cy90YWJsZS9jb250cm9scy91aS50YWdzLnN2ZWx0ZSIsIi4uL3NyYy9mcmFtZS9jb21wb25lbnRzL3RhYmxlL25vdFRhYmxlQ2VsbC5zdmVsdGUiLCIuLi9zcmMvZnJhbWUvY29tcG9uZW50cy90YWJsZS9ub3RUYWJsZVJvdy5zdmVsdGUiLCIuLi9zcmMvZnJhbWUvY29tcG9uZW50cy90YWJsZS9ub3RUYWJsZS5zdmVsdGUiLCIuLi9zcmMvZnJhbWUvY29tcG9uZW50cy90YWJsZS9ub3RUYWJsZS5qcyIsIi4uL3NyYy9mcmFtZS9jb21wb25lbnRzL2FjdGlvbi91aS5hY3Rpb24uY29udGFpbmVyLnN2ZWx0ZSIsIi4uL3NyYy9mcmFtZS9jb21wb25lbnRzL2FjdGlvbi9hY3Rpb24udWkuanMiLCIuLi9zcmMvZnJhbWUvY29tcG9uZW50cy9mb3JtL3V0aWxzLmpzIiwiLi4vc3JjL2ZyYW1lL2NvbXBvbmVudHMvZm9ybS9mb3JtLmhlbHBlcnMuanMiLCIuLi9ub2RlX21vZHVsZXMvbm90LXZhbGlkYXRpb24vc3JjL3Jlc3VsdC5qcyIsIi4uL25vZGVfbW9kdWxlcy9ub3QtZXJyb3Ivc3JjL2Vycm9yLm5vZGUuY2pzIiwiLi4vbm9kZV9tb2R1bGVzL25vdC1lcnJvci9zcmMvdmFsaWRhdGlvbi5lcnJvci5ub2RlLmNqcyIsIi4uL25vZGVfbW9kdWxlcy9ub3QtdmFsaWRhdGlvbi9zcmMvY29tbW9uLmpzIiwiLi4vbm9kZV9tb2R1bGVzL25vdC12YWxpZGF0aW9uL3NyYy9zZXNzaW9uLmpzIiwiLi4vbm9kZV9tb2R1bGVzL25vdC12YWxpZGF0aW9uL3NyYy9ydW5uZXIudXRpbHMuanMiLCIuLi9ub2RlX21vZHVsZXMvbm90LXZhbGlkYXRpb24vc3JjL3J1bm5lci5qcyIsIi4uL25vZGVfbW9kdWxlcy9ub3QtdmFsaWRhdGlvbi9zcmMvYnVpbGRlci51dGlscy5qcyIsIi4uL25vZGVfbW9kdWxlcy9ub3QtdmFsaWRhdGlvbi9zcmMvYnVpbGRlci5qcyIsIi4uL25vZGVfbW9kdWxlcy9ub3QtdmFsaWRhdGlvbi9zcmMvaW5kZXguanMiLCIuLi9zcmMvZnJhbWUvY29tcG9uZW50cy9mb3JtL2ZpZWxkLnN2ZWx0ZSIsIi4uL3NyYy9mcmFtZS9jb21wb25lbnRzL2Zvcm0vZm9ybS5zdmVsdGUiLCIuLi9zcmMvZnJhbWUvY29tcG9uZW50cy9mb3JtL2Zvcm0ucnVsZXMuanMiLCIuLi9zcmMvZnJhbWUvY29tcG9uZW50cy9mb3JtL2Zvcm0uanMiLCIuLi9zcmMvZnJhbWUvY29tcG9uZW50cy9mb3JtL2Zvcm0uc2V0LnN2ZWx0ZSIsIi4uL3NyYy9mcmFtZS9jb21wb25lbnRzL2Zvcm0vZm9ybS5zZXQuanMiLCIuLi9zcmMvZnJhbWUvY29tcG9uZW50cy9icmVhZGNydW1icy91aS5icmVhZGNydW1icy5zdmVsdGUiLCIuLi9zcmMvZnJhbWUvY29tcG9uZW50cy9icmVhZGNydW1icy9icmVhZGNydW1icy5qcyIsIi4uL3NyYy9mcmFtZS9jb21wb25lbnRzL2JyZWFkY3J1bWJzL2luZGV4LmpzIiwiLi4vc3JjL2ZyYW1lL2NvbXBvbmVudHMvbmF2aWdhdGlvbi9tZW51LmpzIiwiLi4vc3JjL2ZyYW1lL2NvbXBvbmVudHMvbmF2aWdhdGlvbi9zaWRlL3VpLml0ZW0ud2l0aG91dC5jaGlsZHJlbi5zdmVsdGUiLCIuLi9zcmMvZnJhbWUvY29tcG9uZW50cy9uYXZpZ2F0aW9uL3NpZGUvdWkudHJpZ2dlci5zdmVsdGUiLCIuLi9zcmMvZnJhbWUvY29tcG9uZW50cy9uYXZpZ2F0aW9uL3NpZGUvdWkuaXRlbS5sYWJlbC5zdmVsdGUiLCIuLi9zcmMvZnJhbWUvY29tcG9uZW50cy9uYXZpZ2F0aW9uL3NpZGUvdWkuaXRlbXMuc3ZlbHRlIiwiLi4vc3JjL2ZyYW1lL2NvbXBvbmVudHMvbmF2aWdhdGlvbi9zaWRlL3VpLnNlY3Rpb24uc3ZlbHRlIiwiLi4vc3JjL2ZyYW1lL2NvbXBvbmVudHMvbmF2aWdhdGlvbi9zaWRlL3VpLnNpZGUubWVudS5zdmVsdGUiLCIuLi9zcmMvZnJhbWUvY29tcG9uZW50cy9uYXZpZ2F0aW9uL3NpZGUvc3RvcmUuanMiLCIuLi9zcmMvZnJhbWUvY29tcG9uZW50cy9uYXZpZ2F0aW9uL3NpZGUvaW5kZXguanMiLCIuLi9zcmMvZnJhbWUvY29tcG9uZW50cy9uYXZpZ2F0aW9uL3RvcC91aS5icmFuZC5zdmVsdGUiLCIuLi9zcmMvZnJhbWUvY29tcG9uZW50cy9uYXZpZ2F0aW9uL3RvcC91aS5pdGVtLmNvbnRlbnQuc3ZlbHRlIiwiLi4vc3JjL2ZyYW1lL2NvbXBvbmVudHMvbmF2aWdhdGlvbi90b3AvdWkuaXRlbS5zdmVsdGUiLCIuLi9zcmMvZnJhbWUvY29tcG9uZW50cy9uYXZpZ2F0aW9uL3RvcC91aS5zZWN0aW9uLnN2ZWx0ZSIsIi4uL3NyYy9mcmFtZS9jb21wb25lbnRzL25hdmlnYXRpb24vdG9wL3VpLmJ1cmdlci5zdmVsdGUiLCIuLi9zcmMvZnJhbWUvY29tcG9uZW50cy9uYXZpZ2F0aW9uL3RvcC91aS50b3Auc3ZlbHRlIiwiLi4vc3JjL2ZyYW1lL2NvbXBvbmVudHMvbmF2aWdhdGlvbi90b3AvaW5kZXguanMiLCIuLi9zcmMvZnJhbWUvY3J1ZC9jb25zdC5qcyIsIi4uL3NyYy9mcmFtZS9jcnVkL2NyZWF0ZS5jcnVkLmFjdGlvbi51aS52aWV3LmpzIiwiLi4vc3JjL2ZyYW1lL2NydWQvdmFyaWFudHMucHJlbG9hZGVyLmpzIiwiLi4vc3JjL2ZyYW1lL2NydWQvcm91dGVyLmpzIiwiLi4vc3JjL2ZyYW1lL2NydWQvbWVzc2FnZS5qcyIsIi4uL3NyYy9mcmFtZS9jcnVkL2FjdGlvbnMvZ2VuZXJpYy9hY3Rpb24uanMiLCIuLi9zcmMvZnJhbWUvY3J1ZC9hY3Rpb25zL2dlbmVyaWMvY3JlYXRlLmpzIiwiLi4vc3JjL2ZyYW1lL2NydWQvYWN0aW9ucy9jcmVhdGUuanMiLCIuLi9zcmMvZnJhbWUvY3J1ZC9hY3Rpb25zL2dlbmVyaWMvcmVhZC5qcyIsIi4uL3NyYy9mcmFtZS9jcnVkL2FjdGlvbnMvZGV0YWlscy5qcyIsIi4uL3NyYy9mcmFtZS9jcnVkL2FjdGlvbnMvZ2VuZXJpYy91cGRhdGUuanMiLCIuLi9zcmMvZnJhbWUvY3J1ZC9hY3Rpb25zL3VwZGF0ZS5qcyIsIi4uL3NyYy9mcmFtZS9jcnVkL2FjdGlvbnMvZGVsZXRlLmpzIiwiLi4vc3JjL2ZyYW1lL2NydWQvYWN0aW9ucy9saXN0LmpzIiwiLi4vc3JjL2ZyYW1lL2NydWQvYWN0aW9ucy9pbmRleC5qcyIsIi4uL3NyYy9mcmFtZS9jcnVkL2NvbnRyb2xsZXIuY3J1ZC5qcyIsIi4uL3NyYy9mcmFtZS9jcnVkL3JvdXRlci5wbGFpbi5qcyIsIi4uL3NyYy9mcmFtZS9jcnVkL3JvdXRlci5zd2l0Y2guanMiLCIuLi9zcmMvZnJhbWUvY3J1ZC9zZWFyY2guc2VydmljZS5qcyIsIi4uL3NyYy9mcmFtZS9pbmRleC5qcyIsIi4uL3NyYy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCB0cnVlO1xuIiwiLy8gU3RvcmUgdGhlIHJlZmVyZW5jZXMgdG8gZ2xvYmFscyBpbiBjYXNlIHNvbWVvbmUgdHJpZXMgdG8gbW9ua2V5IHBhdGNoIHRoZXNlLCBjYXVzaW5nIHRoZSBiZWxvd1xuLy8gdG8gZGUtb3B0ICh0aGlzIG9jY3VycyBvZnRlbiB3aGVuIHVzaW5nIHBvcHVsYXIgZXh0ZW5zaW9ucykuXG5leHBvcnQgdmFyIGlzX2FycmF5ID0gQXJyYXkuaXNBcnJheTtcbmV4cG9ydCB2YXIgYXJyYXlfZnJvbSA9IEFycmF5LmZyb207XG5leHBvcnQgdmFyIG9iamVjdF9rZXlzID0gT2JqZWN0LmtleXM7XG5leHBvcnQgdmFyIGRlZmluZV9wcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbmV4cG9ydCB2YXIgZ2V0X2Rlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuZXhwb3J0IHZhciBnZXRfZGVzY3JpcHRvcnMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycztcbmV4cG9ydCB2YXIgb2JqZWN0X3Byb3RvdHlwZSA9IE9iamVjdC5wcm90b3R5cGU7XG5leHBvcnQgdmFyIGFycmF5X3Byb3RvdHlwZSA9IEFycmF5LnByb3RvdHlwZTtcbmV4cG9ydCB2YXIgZ2V0X3Byb3RvdHlwZV9vZiA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcblxuLyoqXG4gKiBAcGFyYW0ge2FueX0gdGhpbmdcbiAqIEByZXR1cm5zIHt0aGluZyBpcyBGdW5jdGlvbn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzX2Z1bmN0aW9uKHRoaW5nKSB7XG5cdHJldHVybiB0eXBlb2YgdGhpbmcgPT09ICdmdW5jdGlvbic7XG59XG5cbmV4cG9ydCBjb25zdCBub29wID0gKCkgPT4ge307XG5cbi8vIEFkYXB0ZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vdGhlbi9pcy1wcm9taXNlL2Jsb2IvbWFzdGVyL2luZGV4LmpzXG4vLyBEaXN0cmlidXRlZCB1bmRlciBNSVQgTGljZW5zZSBodHRwczovL2dpdGh1Yi5jb20vdGhlbi9pcy1wcm9taXNlL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcblxuLyoqXG4gKiBAdGVtcGxhdGUgW1Q9YW55XVxuICogQHBhcmFtIHthbnl9IHZhbHVlXG4gKiBAcmV0dXJucyB7dmFsdWUgaXMgUHJvbWlzZUxpa2U8VD59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc19wcm9taXNlKHZhbHVlKSB7XG5cdHJldHVybiB0eXBlb2YgdmFsdWU/LnRoZW4gPT09ICdmdW5jdGlvbic7XG59XG5cbi8qKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJ1bihmbikge1xuXHRyZXR1cm4gZm4oKTtcbn1cblxuLyoqIEBwYXJhbSB7QXJyYXk8KCkgPT4gdm9pZD59IGFyciAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJ1bl9hbGwoYXJyKSB7XG5cdGZvciAodmFyIGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG5cdFx0YXJyW2ldKCk7XG5cdH1cbn1cblxuLyoqXG4gKiBUT0RPIHJlcGxhY2Ugd2l0aCBQcm9taXNlLndpdGhSZXNvbHZlcnMgb25jZSBzdXBwb3J0ZWQgd2lkZWx5IGVub3VnaFxuICogQHRlbXBsYXRlIFRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlZmVycmVkKCkge1xuXHQvKiogQHR5cGUgeyh2YWx1ZTogVCkgPT4gdm9pZH0gKi9cblx0dmFyIHJlc29sdmU7XG5cblx0LyoqIEB0eXBlIHsocmVhc29uOiBhbnkpID0+IHZvaWR9ICovXG5cdHZhciByZWplY3Q7XG5cblx0LyoqIEB0eXBlIHtQcm9taXNlPFQ+fSAqL1xuXHR2YXIgcHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXMsIHJlaikgPT4ge1xuXHRcdHJlc29sdmUgPSByZXM7XG5cdFx0cmVqZWN0ID0gcmVqO1xuXHR9KTtcblxuXHQvLyBAdHMtZXhwZWN0LWVycm9yXG5cdHJldHVybiB7IHByb21pc2UsIHJlc29sdmUsIHJlamVjdCB9O1xufVxuXG4vKipcbiAqIEB0ZW1wbGF0ZSBWXG4gKiBAcGFyYW0ge1Z9IHZhbHVlXG4gKiBAcGFyYW0ge1YgfCAoKCkgPT4gVil9IGZhbGxiYWNrXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtsYXp5XVxuICogQHJldHVybnMge1Z9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmYWxsYmFjayh2YWx1ZSwgZmFsbGJhY2ssIGxhenkgPSBmYWxzZSkge1xuXHRyZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZFxuXHRcdD8gbGF6eVxuXHRcdFx0PyAvKiogQHR5cGUgeygpID0+IFZ9ICovIChmYWxsYmFjaykoKVxuXHRcdFx0OiAvKiogQHR5cGUge1Z9ICovIChmYWxsYmFjaylcblx0XHQ6IHZhbHVlO1xufVxuIiwiZXhwb3J0IGNvbnN0IERFUklWRUQgPSAxIDw8IDE7XG5leHBvcnQgY29uc3QgRUZGRUNUID0gMSA8PCAyO1xuZXhwb3J0IGNvbnN0IFJFTkRFUl9FRkZFQ1QgPSAxIDw8IDM7XG5leHBvcnQgY29uc3QgQkxPQ0tfRUZGRUNUID0gMSA8PCA0O1xuZXhwb3J0IGNvbnN0IEJSQU5DSF9FRkZFQ1QgPSAxIDw8IDU7XG5leHBvcnQgY29uc3QgUk9PVF9FRkZFQ1QgPSAxIDw8IDY7XG5leHBvcnQgY29uc3QgQk9VTkRBUllfRUZGRUNUID0gMSA8PCA3O1xuZXhwb3J0IGNvbnN0IFVOT1dORUQgPSAxIDw8IDg7XG5leHBvcnQgY29uc3QgRElTQ09OTkVDVEVEID0gMSA8PCA5O1xuZXhwb3J0IGNvbnN0IENMRUFOID0gMSA8PCAxMDtcbmV4cG9ydCBjb25zdCBESVJUWSA9IDEgPDwgMTE7XG5leHBvcnQgY29uc3QgTUFZQkVfRElSVFkgPSAxIDw8IDEyO1xuZXhwb3J0IGNvbnN0IElORVJUID0gMSA8PCAxMztcbmV4cG9ydCBjb25zdCBERVNUUk9ZRUQgPSAxIDw8IDE0O1xuZXhwb3J0IGNvbnN0IEVGRkVDVF9SQU4gPSAxIDw8IDE1O1xuLyoqICdUcmFuc3BhcmVudCcgZWZmZWN0cyBkbyBub3QgY3JlYXRlIGEgdHJhbnNpdGlvbiBib3VuZGFyeSAqL1xuZXhwb3J0IGNvbnN0IEVGRkVDVF9UUkFOU1BBUkVOVCA9IDEgPDwgMTY7XG4vKiogU3ZlbHRlIDQgbGVnYWN5IG1vZGUgcHJvcHMgbmVlZCB0byBiZSBoYW5kbGVkIHdpdGggZGVyaXZlZHMgYW5kIGJlIHJlY29nbml6ZWQgZWxzZXdoZXJlLCBoZW5jZSB0aGUgZGVkaWNhdGVkIGZsYWcgKi9cbmV4cG9ydCBjb25zdCBMRUdBQ1lfREVSSVZFRF9QUk9QID0gMSA8PCAxNztcbmV4cG9ydCBjb25zdCBJTlNQRUNUX0VGRkVDVCA9IDEgPDwgMTg7XG5leHBvcnQgY29uc3QgSEVBRF9FRkZFQ1QgPSAxIDw8IDE5O1xuZXhwb3J0IGNvbnN0IEVGRkVDVF9IQVNfREVSSVZFRCA9IDEgPDwgMjA7XG5cbmV4cG9ydCBjb25zdCBTVEFURV9TWU1CT0wgPSBTeW1ib2woJyRzdGF0ZScpO1xuZXhwb3J0IGNvbnN0IFNUQVRFX1NZTUJPTF9NRVRBREFUQSA9IFN5bWJvbCgnJHN0YXRlIG1ldGFkYXRhJyk7XG5leHBvcnQgY29uc3QgTEVHQUNZX1BST1BTID0gU3ltYm9sKCdsZWdhY3kgcHJvcHMnKTtcbmV4cG9ydCBjb25zdCBMT0FESU5HX0FUVFJfU1lNQk9MID0gU3ltYm9sKCcnKTtcbiIsIi8qKiBAaW1wb3J0IHsgRXF1YWxzIH0gZnJvbSAnI2NsaWVudCcgKi9cbi8qKiBAdHlwZSB7RXF1YWxzfSAqL1xuZXhwb3J0IGZ1bmN0aW9uIGVxdWFscyh2YWx1ZSkge1xuXHRyZXR1cm4gdmFsdWUgPT09IHRoaXMudjtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3Vua25vd259IGFcbiAqIEBwYXJhbSB7dW5rbm93bn0gYlxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzYWZlX25vdF9lcXVhbChhLCBiKSB7XG5cdHJldHVybiBhICE9IGFcblx0XHQ/IGIgPT0gYlxuXHRcdDogYSAhPT0gYiB8fCAoYSAhPT0gbnVsbCAmJiB0eXBlb2YgYSA9PT0gJ29iamVjdCcpIHx8IHR5cGVvZiBhID09PSAnZnVuY3Rpb24nO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7dW5rbm93bn0gYVxuICogQHBhcmFtIHt1bmtub3dufSBiXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG5vdF9lcXVhbChhLCBiKSB7XG5cdHJldHVybiBhICE9PSBiO1xufVxuXG4vKiogQHR5cGUge0VxdWFsc30gKi9cbmV4cG9ydCBmdW5jdGlvbiBzYWZlX2VxdWFscyh2YWx1ZSkge1xuXHRyZXR1cm4gIXNhZmVfbm90X2VxdWFsKHZhbHVlLCB0aGlzLnYpO1xufVxuIiwiLyogVGhpcyBmaWxlIGlzIGdlbmVyYXRlZCBieSBzY3JpcHRzL3Byb2Nlc3MtbWVzc2FnZXMvaW5kZXguanMuIERvIG5vdCBlZGl0ISAqL1xuXG5pbXBvcnQgeyBERVYgfSBmcm9tICdlc20tZW52JztcblxuLyoqXG4gKiBVc2luZyBgYmluZDp2YWx1ZWAgdG9nZXRoZXIgd2l0aCBhIGNoZWNrYm94IGlucHV0IGlzIG5vdCBhbGxvd2VkLiBVc2UgYGJpbmQ6Y2hlY2tlZGAgaW5zdGVhZFxuICogQHJldHVybnMge25ldmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gYmluZF9pbnZhbGlkX2NoZWNrYm94X3ZhbHVlKCkge1xuXHRpZiAoREVWKSB7XG5cdFx0Y29uc3QgZXJyb3IgPSBuZXcgRXJyb3IoYGJpbmRfaW52YWxpZF9jaGVja2JveF92YWx1ZVxcblVzaW5nIFxcYGJpbmQ6dmFsdWVcXGAgdG9nZXRoZXIgd2l0aCBhIGNoZWNrYm94IGlucHV0IGlzIG5vdCBhbGxvd2VkLiBVc2UgXFxgYmluZDpjaGVja2VkXFxgIGluc3RlYWRcXG5odHRwczovL3N2ZWx0ZS5kZXYvZS9iaW5kX2ludmFsaWRfY2hlY2tib3hfdmFsdWVgKTtcblxuXHRcdGVycm9yLm5hbWUgPSAnU3ZlbHRlIGVycm9yJztcblx0XHR0aHJvdyBlcnJvcjtcblx0fSBlbHNlIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoYGh0dHBzOi8vc3ZlbHRlLmRldi9lL2JpbmRfaW52YWxpZF9jaGVja2JveF92YWx1ZWApO1xuXHR9XG59XG5cbi8qKlxuICogQ29tcG9uZW50ICVjb21wb25lbnQlIGhhcyBhbiBleHBvcnQgbmFtZWQgYCVrZXklYCB0aGF0IGEgY29uc3VtZXIgY29tcG9uZW50IGlzIHRyeWluZyB0byBhY2Nlc3MgdXNpbmcgYGJpbmQ6JWtleSVgLCB3aGljaCBpcyBkaXNhbGxvd2VkLiBJbnN0ZWFkLCB1c2UgYGJpbmQ6dGhpc2AgKGUuZy4gYDwlbmFtZSUgYmluZDp0aGlzPXtjb21wb25lbnR9IC8+YCkgYW5kIHRoZW4gYWNjZXNzIHRoZSBwcm9wZXJ0eSBvbiB0aGUgYm91bmQgY29tcG9uZW50IGluc3RhbmNlIChlLmcuIGBjb21wb25lbnQuJWtleSVgKVxuICogQHBhcmFtIHtzdHJpbmd9IGNvbXBvbmVudFxuICogQHBhcmFtIHtzdHJpbmd9IGtleVxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAqIEByZXR1cm5zIHtuZXZlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGJpbmRfaW52YWxpZF9leHBvcnQoY29tcG9uZW50LCBrZXksIG5hbWUpIHtcblx0aWYgKERFVikge1xuXHRcdGNvbnN0IGVycm9yID0gbmV3IEVycm9yKGBiaW5kX2ludmFsaWRfZXhwb3J0XFxuQ29tcG9uZW50ICR7Y29tcG9uZW50fSBoYXMgYW4gZXhwb3J0IG5hbWVkIFxcYCR7a2V5fVxcYCB0aGF0IGEgY29uc3VtZXIgY29tcG9uZW50IGlzIHRyeWluZyB0byBhY2Nlc3MgdXNpbmcgXFxgYmluZDoke2tleX1cXGAsIHdoaWNoIGlzIGRpc2FsbG93ZWQuIEluc3RlYWQsIHVzZSBcXGBiaW5kOnRoaXNcXGAgKGUuZy4gXFxgPCR7bmFtZX0gYmluZDp0aGlzPXtjb21wb25lbnR9IC8+XFxgKSBhbmQgdGhlbiBhY2Nlc3MgdGhlIHByb3BlcnR5IG9uIHRoZSBib3VuZCBjb21wb25lbnQgaW5zdGFuY2UgKGUuZy4gXFxgY29tcG9uZW50LiR7a2V5fVxcYClcXG5odHRwczovL3N2ZWx0ZS5kZXYvZS9iaW5kX2ludmFsaWRfZXhwb3J0YCk7XG5cblx0XHRlcnJvci5uYW1lID0gJ1N2ZWx0ZSBlcnJvcic7XG5cdFx0dGhyb3cgZXJyb3I7XG5cdH0gZWxzZSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKGBodHRwczovL3N2ZWx0ZS5kZXYvZS9iaW5kX2ludmFsaWRfZXhwb3J0YCk7XG5cdH1cbn1cblxuLyoqXG4gKiBBIGNvbXBvbmVudCBpcyBhdHRlbXB0aW5nIHRvIGJpbmQgdG8gYSBub24tYmluZGFibGUgcHJvcGVydHkgYCVrZXklYCBiZWxvbmdpbmcgdG8gJWNvbXBvbmVudCUgKGkuZS4gYDwlbmFtZSUgYmluZDola2V5JT17Li4ufT5gKS4gVG8gbWFyayBhIHByb3BlcnR5IGFzIGJpbmRhYmxlOiBgbGV0IHsgJWtleSUgPSAkYmluZGFibGUoKSB9ID0gJHByb3BzKClgXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5XG4gKiBAcGFyYW0ge3N0cmluZ30gY29tcG9uZW50XG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICogQHJldHVybnMge25ldmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gYmluZF9ub3RfYmluZGFibGUoa2V5LCBjb21wb25lbnQsIG5hbWUpIHtcblx0aWYgKERFVikge1xuXHRcdGNvbnN0IGVycm9yID0gbmV3IEVycm9yKGBiaW5kX25vdF9iaW5kYWJsZVxcbkEgY29tcG9uZW50IGlzIGF0dGVtcHRpbmcgdG8gYmluZCB0byBhIG5vbi1iaW5kYWJsZSBwcm9wZXJ0eSBcXGAke2tleX1cXGAgYmVsb25naW5nIHRvICR7Y29tcG9uZW50fSAoaS5lLiBcXGA8JHtuYW1lfSBiaW5kOiR7a2V5fT17Li4ufT5cXGApLiBUbyBtYXJrIGEgcHJvcGVydHkgYXMgYmluZGFibGU6IFxcYGxldCB7ICR7a2V5fSA9ICRiaW5kYWJsZSgpIH0gPSAkcHJvcHMoKVxcYFxcbmh0dHBzOi8vc3ZlbHRlLmRldi9lL2JpbmRfbm90X2JpbmRhYmxlYCk7XG5cblx0XHRlcnJvci5uYW1lID0gJ1N2ZWx0ZSBlcnJvcic7XG5cdFx0dGhyb3cgZXJyb3I7XG5cdH0gZWxzZSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKGBodHRwczovL3N2ZWx0ZS5kZXYvZS9iaW5kX25vdF9iaW5kYWJsZWApO1xuXHR9XG59XG5cbi8qKlxuICogJXBhcmVudCUgY2FsbGVkIGAlbWV0aG9kJWAgb24gYW4gaW5zdGFuY2Ugb2YgJWNvbXBvbmVudCUsIHdoaWNoIGlzIG5vIGxvbmdlciB2YWxpZCBpbiBTdmVsdGUgNS4gU2VlIGh0dHBzOi8vc3ZlbHRlLmRldi9kb2NzL3N2ZWx0ZS92NS1taWdyYXRpb24tZ3VpZGUjQ29tcG9uZW50cy1hcmUtbm8tbG9uZ2VyLWNsYXNzZXMgZm9yIG1vcmUgaW5mb3JtYXRpb25cbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXJlbnRcbiAqIEBwYXJhbSB7c3RyaW5nfSBtZXRob2RcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb21wb25lbnRcbiAqIEByZXR1cm5zIHtuZXZlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbXBvbmVudF9hcGlfY2hhbmdlZChwYXJlbnQsIG1ldGhvZCwgY29tcG9uZW50KSB7XG5cdGlmIChERVYpIHtcblx0XHRjb25zdCBlcnJvciA9IG5ldyBFcnJvcihgY29tcG9uZW50X2FwaV9jaGFuZ2VkXFxuJHtwYXJlbnR9IGNhbGxlZCBcXGAke21ldGhvZH1cXGAgb24gYW4gaW5zdGFuY2Ugb2YgJHtjb21wb25lbnR9LCB3aGljaCBpcyBubyBsb25nZXIgdmFsaWQgaW4gU3ZlbHRlIDUuIFNlZSBodHRwczovL3N2ZWx0ZS5kZXYvZG9jcy9zdmVsdGUvdjUtbWlncmF0aW9uLWd1aWRlI0NvbXBvbmVudHMtYXJlLW5vLWxvbmdlci1jbGFzc2VzIGZvciBtb3JlIGluZm9ybWF0aW9uXFxuaHR0cHM6Ly9zdmVsdGUuZGV2L2UvY29tcG9uZW50X2FwaV9jaGFuZ2VkYCk7XG5cblx0XHRlcnJvci5uYW1lID0gJ1N2ZWx0ZSBlcnJvcic7XG5cdFx0dGhyb3cgZXJyb3I7XG5cdH0gZWxzZSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKGBodHRwczovL3N2ZWx0ZS5kZXYvZS9jb21wb25lbnRfYXBpX2NoYW5nZWRgKTtcblx0fVxufVxuXG4vKipcbiAqIEF0dGVtcHRlZCB0byBpbnN0YW50aWF0ZSAlY29tcG9uZW50JSB3aXRoIGBuZXcgJW5hbWUlYCwgd2hpY2ggaXMgbm8gbG9uZ2VyIHZhbGlkIGluIFN2ZWx0ZSA1LiBJZiB0aGlzIGNvbXBvbmVudCBpcyBub3QgdW5kZXIgeW91ciBjb250cm9sLCBzZXQgdGhlIGBjb21wYXRpYmlsaXR5LmNvbXBvbmVudEFwaWAgY29tcGlsZXIgb3B0aW9uIHRvIGA0YCB0byBrZWVwIGl0IHdvcmtpbmcuIFNlZSBodHRwczovL3N2ZWx0ZS5kZXYvZG9jcy9zdmVsdGUvdjUtbWlncmF0aW9uLWd1aWRlI0NvbXBvbmVudHMtYXJlLW5vLWxvbmdlci1jbGFzc2VzIGZvciBtb3JlIGluZm9ybWF0aW9uXG4gKiBAcGFyYW0ge3N0cmluZ30gY29tcG9uZW50XG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICogQHJldHVybnMge25ldmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gY29tcG9uZW50X2FwaV9pbnZhbGlkX25ldyhjb21wb25lbnQsIG5hbWUpIHtcblx0aWYgKERFVikge1xuXHRcdGNvbnN0IGVycm9yID0gbmV3IEVycm9yKGBjb21wb25lbnRfYXBpX2ludmFsaWRfbmV3XFxuQXR0ZW1wdGVkIHRvIGluc3RhbnRpYXRlICR7Y29tcG9uZW50fSB3aXRoIFxcYG5ldyAke25hbWV9XFxgLCB3aGljaCBpcyBubyBsb25nZXIgdmFsaWQgaW4gU3ZlbHRlIDUuIElmIHRoaXMgY29tcG9uZW50IGlzIG5vdCB1bmRlciB5b3VyIGNvbnRyb2wsIHNldCB0aGUgXFxgY29tcGF0aWJpbGl0eS5jb21wb25lbnRBcGlcXGAgY29tcGlsZXIgb3B0aW9uIHRvIFxcYDRcXGAgdG8ga2VlcCBpdCB3b3JraW5nLiBTZWUgaHR0cHM6Ly9zdmVsdGUuZGV2L2RvY3Mvc3ZlbHRlL3Y1LW1pZ3JhdGlvbi1ndWlkZSNDb21wb25lbnRzLWFyZS1uby1sb25nZXItY2xhc3NlcyBmb3IgbW9yZSBpbmZvcm1hdGlvblxcbmh0dHBzOi8vc3ZlbHRlLmRldi9lL2NvbXBvbmVudF9hcGlfaW52YWxpZF9uZXdgKTtcblxuXHRcdGVycm9yLm5hbWUgPSAnU3ZlbHRlIGVycm9yJztcblx0XHR0aHJvdyBlcnJvcjtcblx0fSBlbHNlIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoYGh0dHBzOi8vc3ZlbHRlLmRldi9lL2NvbXBvbmVudF9hcGlfaW52YWxpZF9uZXdgKTtcblx0fVxufVxuXG4vKipcbiAqIEEgZGVyaXZlZCB2YWx1ZSBjYW5ub3QgcmVmZXJlbmNlIGl0c2VsZiByZWN1cnNpdmVseVxuICogQHJldHVybnMge25ldmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVyaXZlZF9yZWZlcmVuY2VzX3NlbGYoKSB7XG5cdGlmIChERVYpIHtcblx0XHRjb25zdCBlcnJvciA9IG5ldyBFcnJvcihgZGVyaXZlZF9yZWZlcmVuY2VzX3NlbGZcXG5BIGRlcml2ZWQgdmFsdWUgY2Fubm90IHJlZmVyZW5jZSBpdHNlbGYgcmVjdXJzaXZlbHlcXG5odHRwczovL3N2ZWx0ZS5kZXYvZS9kZXJpdmVkX3JlZmVyZW5jZXNfc2VsZmApO1xuXG5cdFx0ZXJyb3IubmFtZSA9ICdTdmVsdGUgZXJyb3InO1xuXHRcdHRocm93IGVycm9yO1xuXHR9IGVsc2Uge1xuXHRcdHRocm93IG5ldyBFcnJvcihgaHR0cHM6Ly9zdmVsdGUuZGV2L2UvZGVyaXZlZF9yZWZlcmVuY2VzX3NlbGZgKTtcblx0fVxufVxuXG4vKipcbiAqIEtleWVkIGVhY2ggYmxvY2sgaGFzIGR1cGxpY2F0ZSBrZXkgYCV2YWx1ZSVgIGF0IGluZGV4ZXMgJWElIGFuZCAlYiVcbiAqIEBwYXJhbSB7c3RyaW5nfSBhXG4gKiBAcGFyYW0ge3N0cmluZ30gYlxuICogQHBhcmFtIHtzdHJpbmcgfCB1bmRlZmluZWQgfCBudWxsfSBbdmFsdWVdXG4gKiBAcmV0dXJucyB7bmV2ZXJ9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBlYWNoX2tleV9kdXBsaWNhdGUoYSwgYiwgdmFsdWUpIHtcblx0aWYgKERFVikge1xuXHRcdGNvbnN0IGVycm9yID0gbmV3IEVycm9yKGBlYWNoX2tleV9kdXBsaWNhdGVcXG4ke3ZhbHVlID8gYEtleWVkIGVhY2ggYmxvY2sgaGFzIGR1cGxpY2F0ZSBrZXkgXFxgJHt2YWx1ZX1cXGAgYXQgaW5kZXhlcyAke2F9IGFuZCAke2J9YCA6IGBLZXllZCBlYWNoIGJsb2NrIGhhcyBkdXBsaWNhdGUga2V5IGF0IGluZGV4ZXMgJHthfSBhbmQgJHtifWB9XFxuaHR0cHM6Ly9zdmVsdGUuZGV2L2UvZWFjaF9rZXlfZHVwbGljYXRlYCk7XG5cblx0XHRlcnJvci5uYW1lID0gJ1N2ZWx0ZSBlcnJvcic7XG5cdFx0dGhyb3cgZXJyb3I7XG5cdH0gZWxzZSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKGBodHRwczovL3N2ZWx0ZS5kZXYvZS9lYWNoX2tleV9kdXBsaWNhdGVgKTtcblx0fVxufVxuXG4vKipcbiAqIGAlcnVuZSVgIGNhbm5vdCBiZSB1c2VkIGluc2lkZSBhbiBlZmZlY3QgY2xlYW51cCBmdW5jdGlvblxuICogQHBhcmFtIHtzdHJpbmd9IHJ1bmVcbiAqIEByZXR1cm5zIHtuZXZlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGVmZmVjdF9pbl90ZWFyZG93bihydW5lKSB7XG5cdGlmIChERVYpIHtcblx0XHRjb25zdCBlcnJvciA9IG5ldyBFcnJvcihgZWZmZWN0X2luX3RlYXJkb3duXFxuXFxgJHtydW5lfVxcYCBjYW5ub3QgYmUgdXNlZCBpbnNpZGUgYW4gZWZmZWN0IGNsZWFudXAgZnVuY3Rpb25cXG5odHRwczovL3N2ZWx0ZS5kZXYvZS9lZmZlY3RfaW5fdGVhcmRvd25gKTtcblxuXHRcdGVycm9yLm5hbWUgPSAnU3ZlbHRlIGVycm9yJztcblx0XHR0aHJvdyBlcnJvcjtcblx0fSBlbHNlIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoYGh0dHBzOi8vc3ZlbHRlLmRldi9lL2VmZmVjdF9pbl90ZWFyZG93bmApO1xuXHR9XG59XG5cbi8qKlxuICogRWZmZWN0IGNhbm5vdCBiZSBjcmVhdGVkIGluc2lkZSBhIGAkZGVyaXZlZGAgdmFsdWUgdGhhdCB3YXMgbm90IGl0c2VsZiBjcmVhdGVkIGluc2lkZSBhbiBlZmZlY3RcbiAqIEByZXR1cm5zIHtuZXZlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGVmZmVjdF9pbl91bm93bmVkX2Rlcml2ZWQoKSB7XG5cdGlmIChERVYpIHtcblx0XHRjb25zdCBlcnJvciA9IG5ldyBFcnJvcihgZWZmZWN0X2luX3Vub3duZWRfZGVyaXZlZFxcbkVmZmVjdCBjYW5ub3QgYmUgY3JlYXRlZCBpbnNpZGUgYSBcXGAkZGVyaXZlZFxcYCB2YWx1ZSB0aGF0IHdhcyBub3QgaXRzZWxmIGNyZWF0ZWQgaW5zaWRlIGFuIGVmZmVjdFxcbmh0dHBzOi8vc3ZlbHRlLmRldi9lL2VmZmVjdF9pbl91bm93bmVkX2Rlcml2ZWRgKTtcblxuXHRcdGVycm9yLm5hbWUgPSAnU3ZlbHRlIGVycm9yJztcblx0XHR0aHJvdyBlcnJvcjtcblx0fSBlbHNlIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoYGh0dHBzOi8vc3ZlbHRlLmRldi9lL2VmZmVjdF9pbl91bm93bmVkX2Rlcml2ZWRgKTtcblx0fVxufVxuXG4vKipcbiAqIGAlcnVuZSVgIGNhbiBvbmx5IGJlIHVzZWQgaW5zaWRlIGFuIGVmZmVjdCAoZS5nLiBkdXJpbmcgY29tcG9uZW50IGluaXRpYWxpc2F0aW9uKVxuICogQHBhcmFtIHtzdHJpbmd9IHJ1bmVcbiAqIEByZXR1cm5zIHtuZXZlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGVmZmVjdF9vcnBoYW4ocnVuZSkge1xuXHRpZiAoREVWKSB7XG5cdFx0Y29uc3QgZXJyb3IgPSBuZXcgRXJyb3IoYGVmZmVjdF9vcnBoYW5cXG5cXGAke3J1bmV9XFxgIGNhbiBvbmx5IGJlIHVzZWQgaW5zaWRlIGFuIGVmZmVjdCAoZS5nLiBkdXJpbmcgY29tcG9uZW50IGluaXRpYWxpc2F0aW9uKVxcbmh0dHBzOi8vc3ZlbHRlLmRldi9lL2VmZmVjdF9vcnBoYW5gKTtcblxuXHRcdGVycm9yLm5hbWUgPSAnU3ZlbHRlIGVycm9yJztcblx0XHR0aHJvdyBlcnJvcjtcblx0fSBlbHNlIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoYGh0dHBzOi8vc3ZlbHRlLmRldi9lL2VmZmVjdF9vcnBoYW5gKTtcblx0fVxufVxuXG4vKipcbiAqIE1heGltdW0gdXBkYXRlIGRlcHRoIGV4Y2VlZGVkLiBUaGlzIGNhbiBoYXBwZW4gd2hlbiBhIHJlYWN0aXZlIGJsb2NrIG9yIGVmZmVjdCByZXBlYXRlZGx5IHNldHMgYSBuZXcgdmFsdWUuIFN2ZWx0ZSBsaW1pdHMgdGhlIG51bWJlciBvZiBuZXN0ZWQgdXBkYXRlcyB0byBwcmV2ZW50IGluZmluaXRlIGxvb3BzXG4gKiBAcmV0dXJucyB7bmV2ZXJ9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBlZmZlY3RfdXBkYXRlX2RlcHRoX2V4Y2VlZGVkKCkge1xuXHRpZiAoREVWKSB7XG5cdFx0Y29uc3QgZXJyb3IgPSBuZXcgRXJyb3IoYGVmZmVjdF91cGRhdGVfZGVwdGhfZXhjZWVkZWRcXG5NYXhpbXVtIHVwZGF0ZSBkZXB0aCBleGNlZWRlZC4gVGhpcyBjYW4gaGFwcGVuIHdoZW4gYSByZWFjdGl2ZSBibG9jayBvciBlZmZlY3QgcmVwZWF0ZWRseSBzZXRzIGEgbmV3IHZhbHVlLiBTdmVsdGUgbGltaXRzIHRoZSBudW1iZXIgb2YgbmVzdGVkIHVwZGF0ZXMgdG8gcHJldmVudCBpbmZpbml0ZSBsb29wc1xcbmh0dHBzOi8vc3ZlbHRlLmRldi9lL2VmZmVjdF91cGRhdGVfZGVwdGhfZXhjZWVkZWRgKTtcblxuXHRcdGVycm9yLm5hbWUgPSAnU3ZlbHRlIGVycm9yJztcblx0XHR0aHJvdyBlcnJvcjtcblx0fSBlbHNlIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoYGh0dHBzOi8vc3ZlbHRlLmRldi9lL2VmZmVjdF91cGRhdGVfZGVwdGhfZXhjZWVkZWRgKTtcblx0fVxufVxuXG4vKipcbiAqIEZhaWxlZCB0byBoeWRyYXRlIHRoZSBhcHBsaWNhdGlvblxuICogQHJldHVybnMge25ldmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gaHlkcmF0aW9uX2ZhaWxlZCgpIHtcblx0aWYgKERFVikge1xuXHRcdGNvbnN0IGVycm9yID0gbmV3IEVycm9yKGBoeWRyYXRpb25fZmFpbGVkXFxuRmFpbGVkIHRvIGh5ZHJhdGUgdGhlIGFwcGxpY2F0aW9uXFxuaHR0cHM6Ly9zdmVsdGUuZGV2L2UvaHlkcmF0aW9uX2ZhaWxlZGApO1xuXG5cdFx0ZXJyb3IubmFtZSA9ICdTdmVsdGUgZXJyb3InO1xuXHRcdHRocm93IGVycm9yO1xuXHR9IGVsc2Uge1xuXHRcdHRocm93IG5ldyBFcnJvcihgaHR0cHM6Ly9zdmVsdGUuZGV2L2UvaHlkcmF0aW9uX2ZhaWxlZGApO1xuXHR9XG59XG5cbi8qKlxuICogQ291bGQgbm90IGB7QHJlbmRlcn1gIHNuaXBwZXQgZHVlIHRvIHRoZSBleHByZXNzaW9uIGJlaW5nIGBudWxsYCBvciBgdW5kZWZpbmVkYC4gQ29uc2lkZXIgdXNpbmcgb3B0aW9uYWwgY2hhaW5pbmcgYHtAcmVuZGVyIHNuaXBwZXQ/LigpfWBcbiAqIEByZXR1cm5zIHtuZXZlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGludmFsaWRfc25pcHBldCgpIHtcblx0aWYgKERFVikge1xuXHRcdGNvbnN0IGVycm9yID0gbmV3IEVycm9yKGBpbnZhbGlkX3NuaXBwZXRcXG5Db3VsZCBub3QgXFxge0ByZW5kZXJ9XFxgIHNuaXBwZXQgZHVlIHRvIHRoZSBleHByZXNzaW9uIGJlaW5nIFxcYG51bGxcXGAgb3IgXFxgdW5kZWZpbmVkXFxgLiBDb25zaWRlciB1c2luZyBvcHRpb25hbCBjaGFpbmluZyBcXGB7QHJlbmRlciBzbmlwcGV0Py4oKX1cXGBcXG5odHRwczovL3N2ZWx0ZS5kZXYvZS9pbnZhbGlkX3NuaXBwZXRgKTtcblxuXHRcdGVycm9yLm5hbWUgPSAnU3ZlbHRlIGVycm9yJztcblx0XHR0aHJvdyBlcnJvcjtcblx0fSBlbHNlIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoYGh0dHBzOi8vc3ZlbHRlLmRldi9lL2ludmFsaWRfc25pcHBldGApO1xuXHR9XG59XG5cbi8qKlxuICogYCVuYW1lJSguLi4pYCBjYW5ub3QgYmUgdXNlZCBpbiBydW5lcyBtb2RlXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICogQHJldHVybnMge25ldmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gbGlmZWN5Y2xlX2xlZ2FjeV9vbmx5KG5hbWUpIHtcblx0aWYgKERFVikge1xuXHRcdGNvbnN0IGVycm9yID0gbmV3IEVycm9yKGBsaWZlY3ljbGVfbGVnYWN5X29ubHlcXG5cXGAke25hbWV9KC4uLilcXGAgY2Fubm90IGJlIHVzZWQgaW4gcnVuZXMgbW9kZVxcbmh0dHBzOi8vc3ZlbHRlLmRldi9lL2xpZmVjeWNsZV9sZWdhY3lfb25seWApO1xuXG5cdFx0ZXJyb3IubmFtZSA9ICdTdmVsdGUgZXJyb3InO1xuXHRcdHRocm93IGVycm9yO1xuXHR9IGVsc2Uge1xuXHRcdHRocm93IG5ldyBFcnJvcihgaHR0cHM6Ly9zdmVsdGUuZGV2L2UvbGlmZWN5Y2xlX2xlZ2FjeV9vbmx5YCk7XG5cdH1cbn1cblxuLyoqXG4gKiBDYW5ub3QgZG8gYGJpbmQ6JWtleSU9e3VuZGVmaW5lZH1gIHdoZW4gYCVrZXklYCBoYXMgYSBmYWxsYmFjayB2YWx1ZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleVxuICogQHJldHVybnMge25ldmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gcHJvcHNfaW52YWxpZF92YWx1ZShrZXkpIHtcblx0aWYgKERFVikge1xuXHRcdGNvbnN0IGVycm9yID0gbmV3IEVycm9yKGBwcm9wc19pbnZhbGlkX3ZhbHVlXFxuQ2Fubm90IGRvIFxcYGJpbmQ6JHtrZXl9PXt1bmRlZmluZWR9XFxgIHdoZW4gXFxgJHtrZXl9XFxgIGhhcyBhIGZhbGxiYWNrIHZhbHVlXFxuaHR0cHM6Ly9zdmVsdGUuZGV2L2UvcHJvcHNfaW52YWxpZF92YWx1ZWApO1xuXG5cdFx0ZXJyb3IubmFtZSA9ICdTdmVsdGUgZXJyb3InO1xuXHRcdHRocm93IGVycm9yO1xuXHR9IGVsc2Uge1xuXHRcdHRocm93IG5ldyBFcnJvcihgaHR0cHM6Ly9zdmVsdGUuZGV2L2UvcHJvcHNfaW52YWxpZF92YWx1ZWApO1xuXHR9XG59XG5cbi8qKlxuICogUmVzdCBlbGVtZW50IHByb3BlcnRpZXMgb2YgYCRwcm9wcygpYCBzdWNoIGFzIGAlcHJvcGVydHklYCBhcmUgcmVhZG9ubHlcbiAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wZXJ0eVxuICogQHJldHVybnMge25ldmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gcHJvcHNfcmVzdF9yZWFkb25seShwcm9wZXJ0eSkge1xuXHRpZiAoREVWKSB7XG5cdFx0Y29uc3QgZXJyb3IgPSBuZXcgRXJyb3IoYHByb3BzX3Jlc3RfcmVhZG9ubHlcXG5SZXN0IGVsZW1lbnQgcHJvcGVydGllcyBvZiBcXGAkcHJvcHMoKVxcYCBzdWNoIGFzIFxcYCR7cHJvcGVydHl9XFxgIGFyZSByZWFkb25seVxcbmh0dHBzOi8vc3ZlbHRlLmRldi9lL3Byb3BzX3Jlc3RfcmVhZG9ubHlgKTtcblxuXHRcdGVycm9yLm5hbWUgPSAnU3ZlbHRlIGVycm9yJztcblx0XHR0aHJvdyBlcnJvcjtcblx0fSBlbHNlIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoYGh0dHBzOi8vc3ZlbHRlLmRldi9lL3Byb3BzX3Jlc3RfcmVhZG9ubHlgKTtcblx0fVxufVxuXG4vKipcbiAqIFRoZSBgJXJ1bmUlYCBydW5lIGlzIG9ubHkgYXZhaWxhYmxlIGluc2lkZSBgLnN2ZWx0ZWAgYW5kIGAuc3ZlbHRlLmpzL3RzYCBmaWxlc1xuICogQHBhcmFtIHtzdHJpbmd9IHJ1bmVcbiAqIEByZXR1cm5zIHtuZXZlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJ1bmVfb3V0c2lkZV9zdmVsdGUocnVuZSkge1xuXHRpZiAoREVWKSB7XG5cdFx0Y29uc3QgZXJyb3IgPSBuZXcgRXJyb3IoYHJ1bmVfb3V0c2lkZV9zdmVsdGVcXG5UaGUgXFxgJHtydW5lfVxcYCBydW5lIGlzIG9ubHkgYXZhaWxhYmxlIGluc2lkZSBcXGAuc3ZlbHRlXFxgIGFuZCBcXGAuc3ZlbHRlLmpzL3RzXFxgIGZpbGVzXFxuaHR0cHM6Ly9zdmVsdGUuZGV2L2UvcnVuZV9vdXRzaWRlX3N2ZWx0ZWApO1xuXG5cdFx0ZXJyb3IubmFtZSA9ICdTdmVsdGUgZXJyb3InO1xuXHRcdHRocm93IGVycm9yO1xuXHR9IGVsc2Uge1xuXHRcdHRocm93IG5ldyBFcnJvcihgaHR0cHM6Ly9zdmVsdGUuZGV2L2UvcnVuZV9vdXRzaWRlX3N2ZWx0ZWApO1xuXHR9XG59XG5cbi8qKlxuICogUHJvcGVydHkgZGVzY3JpcHRvcnMgZGVmaW5lZCBvbiBgJHN0YXRlYCBvYmplY3RzIG11c3QgY29udGFpbiBgdmFsdWVgIGFuZCBhbHdheXMgYmUgYGVudW1lcmFibGVgLCBgY29uZmlndXJhYmxlYCBhbmQgYHdyaXRhYmxlYC5cbiAqIEByZXR1cm5zIHtuZXZlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN0YXRlX2Rlc2NyaXB0b3JzX2ZpeGVkKCkge1xuXHRpZiAoREVWKSB7XG5cdFx0Y29uc3QgZXJyb3IgPSBuZXcgRXJyb3IoYHN0YXRlX2Rlc2NyaXB0b3JzX2ZpeGVkXFxuUHJvcGVydHkgZGVzY3JpcHRvcnMgZGVmaW5lZCBvbiBcXGAkc3RhdGVcXGAgb2JqZWN0cyBtdXN0IGNvbnRhaW4gXFxgdmFsdWVcXGAgYW5kIGFsd2F5cyBiZSBcXGBlbnVtZXJhYmxlXFxgLCBcXGBjb25maWd1cmFibGVcXGAgYW5kIFxcYHdyaXRhYmxlXFxgLlxcbmh0dHBzOi8vc3ZlbHRlLmRldi9lL3N0YXRlX2Rlc2NyaXB0b3JzX2ZpeGVkYCk7XG5cblx0XHRlcnJvci5uYW1lID0gJ1N2ZWx0ZSBlcnJvcic7XG5cdFx0dGhyb3cgZXJyb3I7XG5cdH0gZWxzZSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKGBodHRwczovL3N2ZWx0ZS5kZXYvZS9zdGF0ZV9kZXNjcmlwdG9yc19maXhlZGApO1xuXHR9XG59XG5cbi8qKlxuICogQ2Fubm90IHNldCBwcm90b3R5cGUgb2YgYCRzdGF0ZWAgb2JqZWN0XG4gKiBAcmV0dXJucyB7bmV2ZXJ9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzdGF0ZV9wcm90b3R5cGVfZml4ZWQoKSB7XG5cdGlmIChERVYpIHtcblx0XHRjb25zdCBlcnJvciA9IG5ldyBFcnJvcihgc3RhdGVfcHJvdG90eXBlX2ZpeGVkXFxuQ2Fubm90IHNldCBwcm90b3R5cGUgb2YgXFxgJHN0YXRlXFxgIG9iamVjdFxcbmh0dHBzOi8vc3ZlbHRlLmRldi9lL3N0YXRlX3Byb3RvdHlwZV9maXhlZGApO1xuXG5cdFx0ZXJyb3IubmFtZSA9ICdTdmVsdGUgZXJyb3InO1xuXHRcdHRocm93IGVycm9yO1xuXHR9IGVsc2Uge1xuXHRcdHRocm93IG5ldyBFcnJvcihgaHR0cHM6Ly9zdmVsdGUuZGV2L2Uvc3RhdGVfcHJvdG90eXBlX2ZpeGVkYCk7XG5cdH1cbn1cblxuLyoqXG4gKiBSZWFkaW5nIHN0YXRlIHRoYXQgd2FzIGNyZWF0ZWQgaW5zaWRlIHRoZSBzYW1lIGRlcml2ZWQgaXMgZm9yYmlkZGVuLiBDb25zaWRlciB1c2luZyBgdW50cmFja2AgdG8gcmVhZCBsb2NhbGx5IGNyZWF0ZWQgc3RhdGVcbiAqIEByZXR1cm5zIHtuZXZlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN0YXRlX3Vuc2FmZV9sb2NhbF9yZWFkKCkge1xuXHRpZiAoREVWKSB7XG5cdFx0Y29uc3QgZXJyb3IgPSBuZXcgRXJyb3IoYHN0YXRlX3Vuc2FmZV9sb2NhbF9yZWFkXFxuUmVhZGluZyBzdGF0ZSB0aGF0IHdhcyBjcmVhdGVkIGluc2lkZSB0aGUgc2FtZSBkZXJpdmVkIGlzIGZvcmJpZGRlbi4gQ29uc2lkZXIgdXNpbmcgXFxgdW50cmFja1xcYCB0byByZWFkIGxvY2FsbHkgY3JlYXRlZCBzdGF0ZVxcbmh0dHBzOi8vc3ZlbHRlLmRldi9lL3N0YXRlX3Vuc2FmZV9sb2NhbF9yZWFkYCk7XG5cblx0XHRlcnJvci5uYW1lID0gJ1N2ZWx0ZSBlcnJvcic7XG5cdFx0dGhyb3cgZXJyb3I7XG5cdH0gZWxzZSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKGBodHRwczovL3N2ZWx0ZS5kZXYvZS9zdGF0ZV91bnNhZmVfbG9jYWxfcmVhZGApO1xuXHR9XG59XG5cbi8qKlxuICogVXBkYXRpbmcgc3RhdGUgaW5zaWRlIGEgZGVyaXZlZCBvciBhIHRlbXBsYXRlIGV4cHJlc3Npb24gaXMgZm9yYmlkZGVuLiBJZiB0aGUgdmFsdWUgc2hvdWxkIG5vdCBiZSByZWFjdGl2ZSwgZGVjbGFyZSBpdCB3aXRob3V0IGAkc3RhdGVgXG4gKiBAcmV0dXJucyB7bmV2ZXJ9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzdGF0ZV91bnNhZmVfbXV0YXRpb24oKSB7XG5cdGlmIChERVYpIHtcblx0XHRjb25zdCBlcnJvciA9IG5ldyBFcnJvcihgc3RhdGVfdW5zYWZlX211dGF0aW9uXFxuVXBkYXRpbmcgc3RhdGUgaW5zaWRlIGEgZGVyaXZlZCBvciBhIHRlbXBsYXRlIGV4cHJlc3Npb24gaXMgZm9yYmlkZGVuLiBJZiB0aGUgdmFsdWUgc2hvdWxkIG5vdCBiZSByZWFjdGl2ZSwgZGVjbGFyZSBpdCB3aXRob3V0IFxcYCRzdGF0ZVxcYFxcbmh0dHBzOi8vc3ZlbHRlLmRldi9lL3N0YXRlX3Vuc2FmZV9tdXRhdGlvbmApO1xuXG5cdFx0ZXJyb3IubmFtZSA9ICdTdmVsdGUgZXJyb3InO1xuXHRcdHRocm93IGVycm9yO1xuXHR9IGVsc2Uge1xuXHRcdHRocm93IG5ldyBFcnJvcihgaHR0cHM6Ly9zdmVsdGUuZGV2L2Uvc3RhdGVfdW5zYWZlX211dGF0aW9uYCk7XG5cdH1cbn0iLCJleHBvcnQgbGV0IGxlZ2FjeV9tb2RlX2ZsYWcgPSBmYWxzZTtcblxuZXhwb3J0IGZ1bmN0aW9uIGVuYWJsZV9sZWdhY3lfbW9kZV9mbGFnKCkge1xuXHRsZWdhY3lfbW9kZV9mbGFnID0gdHJ1ZTtcbn1cbiIsImV4cG9ydCBjb25zdCBFQUNIX0lURU1fUkVBQ1RJVkUgPSAxO1xuZXhwb3J0IGNvbnN0IEVBQ0hfSU5ERVhfUkVBQ1RJVkUgPSAxIDw8IDE7XG4vKiogU2VlIEVhY2hCbG9jayBpbnRlcmZhY2UgbWV0YWRhdGEuaXNfY29udHJvbGxlZCBmb3IgYW4gZXhwbGFuYXRpb24gd2hhdCB0aGlzIGlzICovXG5leHBvcnQgY29uc3QgRUFDSF9JU19DT05UUk9MTEVEID0gMSA8PCAyO1xuZXhwb3J0IGNvbnN0IEVBQ0hfSVNfQU5JTUFURUQgPSAxIDw8IDM7XG5leHBvcnQgY29uc3QgRUFDSF9JVEVNX0lNTVVUQUJMRSA9IDEgPDwgNDtcblxuZXhwb3J0IGNvbnN0IFBST1BTX0lTX0lNTVVUQUJMRSA9IDE7XG5leHBvcnQgY29uc3QgUFJPUFNfSVNfUlVORVMgPSAxIDw8IDE7XG5leHBvcnQgY29uc3QgUFJPUFNfSVNfVVBEQVRFRCA9IDEgPDwgMjtcbmV4cG9ydCBjb25zdCBQUk9QU19JU19CSU5EQUJMRSA9IDEgPDwgMztcbmV4cG9ydCBjb25zdCBQUk9QU19JU19MQVpZX0lOSVRJQUwgPSAxIDw8IDQ7XG5cbmV4cG9ydCBjb25zdCBUUkFOU0lUSU9OX0lOID0gMTtcbmV4cG9ydCBjb25zdCBUUkFOU0lUSU9OX09VVCA9IDEgPDwgMTtcbmV4cG9ydCBjb25zdCBUUkFOU0lUSU9OX0dMT0JBTCA9IDEgPDwgMjtcblxuZXhwb3J0IGNvbnN0IFRFTVBMQVRFX0ZSQUdNRU5UID0gMTtcbmV4cG9ydCBjb25zdCBURU1QTEFURV9VU0VfSU1QT1JUX05PREUgPSAxIDw8IDE7XG5cbmV4cG9ydCBjb25zdCBIWURSQVRJT05fU1RBUlQgPSAnWyc7XG4vKiogdXNlZCB0byBpbmRpY2F0ZSB0aGF0IGFuIGB7OmVsc2V9Li4uYCBibG9jayB3YXMgcmVuZGVyZWQgKi9cbmV4cG9ydCBjb25zdCBIWURSQVRJT05fU1RBUlRfRUxTRSA9ICdbISc7XG5leHBvcnQgY29uc3QgSFlEUkFUSU9OX0VORCA9ICddJztcbmV4cG9ydCBjb25zdCBIWURSQVRJT05fRVJST1IgPSB7fTtcblxuZXhwb3J0IGNvbnN0IEVMRU1FTlRfSVNfTkFNRVNQQUNFRCA9IDE7XG5leHBvcnQgY29uc3QgRUxFTUVOVF9QUkVTRVJWRV9BVFRSSUJVVEVfQ0FTRSA9IDEgPDwgMTtcblxuZXhwb3J0IGNvbnN0IFVOSU5JVElBTElaRUQgPSBTeW1ib2woKTtcblxuLy8gRGV2LXRpbWUgY29tcG9uZW50IHByb3BlcnRpZXNcbmV4cG9ydCBjb25zdCBGSUxFTkFNRSA9IFN5bWJvbCgnZmlsZW5hbWUnKTtcbmV4cG9ydCBjb25zdCBITVIgPSBTeW1ib2woJ2htcicpO1xuXG5leHBvcnQgY29uc3QgTkFNRVNQQUNFX1NWRyA9ICdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Zyc7XG5leHBvcnQgY29uc3QgTkFNRVNQQUNFX01BVEhNTCA9ICdodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MJztcblxuLy8gd2UgdXNlIGEgbGlzdCBvZiBpZ25vcmFibGUgcnVudGltZSB3YXJuaW5ncyBiZWNhdXNlIG5vdCBldmVyeSBydW50aW1lIHdhcm5pbmdcbi8vIGNhbiBiZSBpZ25vcmVkIGFuZCB3ZSB3YW50IHRvIGtlZXAgdGhlIHZhbGlkYXRpb24gZm9yIHN2ZWx0ZS1pZ25vcmUgaW4gcGxhY2VcbmV4cG9ydCBjb25zdCBJR05PUkFCTEVfUlVOVElNRV9XQVJOSU5HUyA9IC8qKiBAdHlwZSB7Y29uc3R9ICovIChbXG5cdCdzdGF0ZV9zbmFwc2hvdF91bmNsb25lYWJsZScsXG5cdCdiaW5kaW5nX3Byb3BlcnR5X25vbl9yZWFjdGl2ZScsXG5cdCdoeWRyYXRpb25fYXR0cmlidXRlX2NoYW5nZWQnLFxuXHQnaHlkcmF0aW9uX2h0bWxfY2hhbmdlZCcsXG5cdCdvd25lcnNoaXBfaW52YWxpZF9iaW5kaW5nJyxcblx0J293bmVyc2hpcF9pbnZhbGlkX211dGF0aW9uJ1xuXSk7XG5cbi8qKlxuICogV2hpdGVzcGFjZSBpbnNpZGUgb25lIG9mIHRoZXNlIGVsZW1lbnRzIHdpbGwgbm90IHJlc3VsdCBpblxuICogYSB3aGl0ZXNwYWNlIG5vZGUgYmVpbmcgY3JlYXRlZCBpbiBhbnkgY2lyY3Vtc3RhbmNlcy4gKFRoaXNcbiAqIGxpc3QgaXMgYWxtb3N0IGNlcnRhaW5seSB2ZXJ5IGluY29tcGxldGUpXG4gKiBUT0RPIHRoaXMgaXMgY3VycmVudGx5IHVudXNlZFxuICovXG5leHBvcnQgY29uc3QgRUxFTUVOVFNfV0lUSE9VVF9URVhUID0gWydhdWRpbycsICdkYXRhbGlzdCcsICdkbCcsICdvcHRncm91cCcsICdzZWxlY3QnLCAndmlkZW8nXTtcbiIsIi8qIFRoaXMgZmlsZSBpcyBnZW5lcmF0ZWQgYnkgc2NyaXB0cy9wcm9jZXNzLW1lc3NhZ2VzL2luZGV4LmpzLiBEbyBub3QgZWRpdCEgKi9cblxuaW1wb3J0IHsgREVWIH0gZnJvbSAnZXNtLWVudic7XG5cbnZhciBib2xkID0gJ2ZvbnQtd2VpZ2h0OiBib2xkJztcbnZhciBub3JtYWwgPSAnZm9udC13ZWlnaHQ6IG5vcm1hbCc7XG5cbi8qKlxuICogYDxzdmVsdGU6ZWxlbWVudCB0aGlzPVwiJXRhZyVcIj5gIGlzIGEgdm9pZCBlbGVtZW50IOKAlCBpdCBjYW5ub3QgaGF2ZSBjb250ZW50XG4gKiBAcGFyYW0ge3N0cmluZ30gdGFnXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkeW5hbWljX3ZvaWRfZWxlbWVudF9jb250ZW50KHRhZykge1xuXHRpZiAoREVWKSB7XG5cdFx0Y29uc29sZS53YXJuKGAlY1tzdmVsdGVdIGR5bmFtaWNfdm9pZF9lbGVtZW50X2NvbnRlbnRcXG4lY1xcYDxzdmVsdGU6ZWxlbWVudCB0aGlzPVwiJHt0YWd9XCI+XFxgIGlzIGEgdm9pZCBlbGVtZW50IOKAlCBpdCBjYW5ub3QgaGF2ZSBjb250ZW50XFxuaHR0cHM6Ly9zdmVsdGUuZGV2L2UvZHluYW1pY192b2lkX2VsZW1lbnRfY29udGVudGAsIGJvbGQsIG5vcm1hbCk7XG5cdH0gZWxzZSB7XG5cdFx0Y29uc29sZS53YXJuKGBodHRwczovL3N2ZWx0ZS5kZXYvZS9keW5hbWljX3ZvaWRfZWxlbWVudF9jb250ZW50YCk7XG5cdH1cbn1cblxuLyoqXG4gKiBUaGUgZm9sbG93aW5nIHByb3BlcnRpZXMgY2Fubm90IGJlIGNsb25lZCB3aXRoIGAkc3RhdGUuc25hcHNob3RgIOKAlCB0aGUgcmV0dXJuIHZhbHVlIGNvbnRhaW5zIHRoZSBvcmlnaW5hbHM6XG4gKiBcbiAqICVwcm9wZXJ0aWVzJVxuICogQHBhcmFtIHtzdHJpbmcgfCB1bmRlZmluZWQgfCBudWxsfSBbcHJvcGVydGllc11cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN0YXRlX3NuYXBzaG90X3VuY2xvbmVhYmxlKHByb3BlcnRpZXMpIHtcblx0aWYgKERFVikge1xuXHRcdGNvbnNvbGUud2FybihgJWNbc3ZlbHRlXSBzdGF0ZV9zbmFwc2hvdF91bmNsb25lYWJsZVxcbiVjJHtwcm9wZXJ0aWVzXG5cdFx0XHQ/IGBUaGUgZm9sbG93aW5nIHByb3BlcnRpZXMgY2Fubm90IGJlIGNsb25lZCB3aXRoIFxcYCRzdGF0ZS5zbmFwc2hvdFxcYCDigJQgdGhlIHJldHVybiB2YWx1ZSBjb250YWlucyB0aGUgb3JpZ2luYWxzOlxuXG4ke3Byb3BlcnRpZXN9YFxuXHRcdFx0OiBcIlZhbHVlIGNhbm5vdCBiZSBjbG9uZWQgd2l0aCBgJHN0YXRlLnNuYXBzaG90YCDigJQgdGhlIG9yaWdpbmFsIHZhbHVlIHdhcyByZXR1cm5lZFwifVxcbmh0dHBzOi8vc3ZlbHRlLmRldi9lL3N0YXRlX3NuYXBzaG90X3VuY2xvbmVhYmxlYCwgYm9sZCwgbm9ybWFsKTtcblx0fSBlbHNlIHtcblx0XHRjb25zb2xlLndhcm4oYGh0dHBzOi8vc3ZlbHRlLmRldi9lL3N0YXRlX3NuYXBzaG90X3VuY2xvbmVhYmxlYCk7XG5cdH1cbn0iLCIvKiogQGltcG9ydCB7IFNuYXBzaG90IH0gZnJvbSAnLi90eXBlcycgKi9cbmltcG9ydCB7IERFViB9IGZyb20gJ2VzbS1lbnYnO1xuaW1wb3J0ICogYXMgdyBmcm9tICcuL3dhcm5pbmdzLmpzJztcbmltcG9ydCB7IGdldF9wcm90b3R5cGVfb2YsIGlzX2FycmF5LCBvYmplY3RfcHJvdG90eXBlIH0gZnJvbSAnLi91dGlscy5qcyc7XG5cbi8qKlxuICogSW4gZGV2LCB3ZSBrZWVwIHRyYWNrIG9mIHdoaWNoIHByb3BlcnRpZXMgY291bGQgbm90IGJlIGNsb25lZC4gSW4gcHJvZFxuICogd2UgZG9uJ3QgYm90aGVyLCBidXQgd2Uga2VlcCBhIGR1bW15IGFycmF5IGFyb3VuZCBzbyB0aGF0IHRoZVxuICogc2lnbmF0dXJlIHN0YXlzIHRoZSBzYW1lXG4gKiBAdHlwZSB7c3RyaW5nW119XG4gKi9cbmNvbnN0IGVtcHR5ID0gW107XG5cbi8qKlxuICogQHRlbXBsYXRlIFRcbiAqIEBwYXJhbSB7VH0gdmFsdWVcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW3NraXBfd2FybmluZ11cbiAqIEByZXR1cm5zIHtTbmFwc2hvdDxUPn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNuYXBzaG90KHZhbHVlLCBza2lwX3dhcm5pbmcgPSBmYWxzZSkge1xuXHRpZiAoREVWICYmICFza2lwX3dhcm5pbmcpIHtcblx0XHQvKiogQHR5cGUge3N0cmluZ1tdfSAqL1xuXHRcdGNvbnN0IHBhdGhzID0gW107XG5cblx0XHRjb25zdCBjb3B5ID0gY2xvbmUodmFsdWUsIG5ldyBNYXAoKSwgJycsIHBhdGhzKTtcblx0XHRpZiAocGF0aHMubGVuZ3RoID09PSAxICYmIHBhdGhzWzBdID09PSAnJykge1xuXHRcdFx0Ly8gdmFsdWUgY291bGQgbm90IGJlIGNsb25lZFxuXHRcdFx0dy5zdGF0ZV9zbmFwc2hvdF91bmNsb25lYWJsZSgpO1xuXHRcdH0gZWxzZSBpZiAocGF0aHMubGVuZ3RoID4gMCkge1xuXHRcdFx0Ly8gc29tZSBwcm9wZXJ0aWVzIGNvdWxkIG5vdCBiZSBjbG9uZWRcblx0XHRcdGNvbnN0IHNsaWNlID0gcGF0aHMubGVuZ3RoID4gMTAgPyBwYXRocy5zbGljZSgwLCA3KSA6IHBhdGhzLnNsaWNlKDAsIDEwKTtcblx0XHRcdGNvbnN0IGV4Y2VzcyA9IHBhdGhzLmxlbmd0aCAtIHNsaWNlLmxlbmd0aDtcblxuXHRcdFx0bGV0IHVuY2xvbmVkID0gc2xpY2UubWFwKChwYXRoKSA9PiBgLSA8dmFsdWU+JHtwYXRofWApLmpvaW4oJ1xcbicpO1xuXHRcdFx0aWYgKGV4Y2VzcyA+IDApIHVuY2xvbmVkICs9IGBcXG4tIC4uLmFuZCAke2V4Y2Vzc30gbW9yZWA7XG5cblx0XHRcdHcuc3RhdGVfc25hcHNob3RfdW5jbG9uZWFibGUodW5jbG9uZWQpO1xuXHRcdH1cblxuXHRcdHJldHVybiBjb3B5O1xuXHR9XG5cblx0cmV0dXJuIGNsb25lKHZhbHVlLCBuZXcgTWFwKCksICcnLCBlbXB0eSk7XG59XG5cbi8qKlxuICogQHRlbXBsYXRlIFRcbiAqIEBwYXJhbSB7VH0gdmFsdWVcbiAqIEBwYXJhbSB7TWFwPFQsIFNuYXBzaG90PFQ+Pn0gY2xvbmVkXG4gKiBAcGFyYW0ge3N0cmluZ30gcGF0aFxuICogQHBhcmFtIHtzdHJpbmdbXX0gcGF0aHNcbiAqIEBwYXJhbSB7bnVsbCB8IFR9IG9yaWdpbmFsIFRoZSBvcmlnaW5hbCB2YWx1ZSwgaWYgYHZhbHVlYCB3YXMgcHJvZHVjZWQgZnJvbSBhIGB0b0pTT05gIGNhbGxcbiAqIEByZXR1cm5zIHtTbmFwc2hvdDxUPn1cbiAqL1xuZnVuY3Rpb24gY2xvbmUodmFsdWUsIGNsb25lZCwgcGF0aCwgcGF0aHMsIG9yaWdpbmFsID0gbnVsbCkge1xuXHRpZiAodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAhPT0gbnVsbCkge1xuXHRcdHZhciB1bndyYXBwZWQgPSBjbG9uZWQuZ2V0KHZhbHVlKTtcblx0XHRpZiAodW53cmFwcGVkICE9PSB1bmRlZmluZWQpIHJldHVybiB1bndyYXBwZWQ7XG5cblx0XHRpZiAodmFsdWUgaW5zdGFuY2VvZiBNYXApIHJldHVybiAvKiogQHR5cGUge1NuYXBzaG90PFQ+fSAqLyAobmV3IE1hcCh2YWx1ZSkpO1xuXHRcdGlmICh2YWx1ZSBpbnN0YW5jZW9mIFNldCkgcmV0dXJuIC8qKiBAdHlwZSB7U25hcHNob3Q8VD59ICovIChuZXcgU2V0KHZhbHVlKSk7XG5cblx0XHRpZiAoaXNfYXJyYXkodmFsdWUpKSB7XG5cdFx0XHR2YXIgY29weSA9IC8qKiBAdHlwZSB7U25hcHNob3Q8YW55Pn0gKi8gKEFycmF5KHZhbHVlLmxlbmd0aCkpO1xuXHRcdFx0Y2xvbmVkLnNldCh2YWx1ZSwgY29weSk7XG5cblx0XHRcdGlmIChvcmlnaW5hbCAhPT0gbnVsbCkge1xuXHRcdFx0XHRjbG9uZWQuc2V0KG9yaWdpbmFsLCBjb3B5KTtcblx0XHRcdH1cblxuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCB2YWx1ZS5sZW5ndGg7IGkgKz0gMSkge1xuXHRcdFx0XHR2YXIgZWxlbWVudCA9IHZhbHVlW2ldO1xuXHRcdFx0XHRpZiAoaSBpbiB2YWx1ZSkge1xuXHRcdFx0XHRcdGNvcHlbaV0gPSBjbG9uZShlbGVtZW50LCBjbG9uZWQsIERFViA/IGAke3BhdGh9WyR7aX1dYCA6IHBhdGgsIHBhdGhzKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gY29weTtcblx0XHR9XG5cblx0XHRpZiAoZ2V0X3Byb3RvdHlwZV9vZih2YWx1ZSkgPT09IG9iamVjdF9wcm90b3R5cGUpIHtcblx0XHRcdC8qKiBAdHlwZSB7U25hcHNob3Q8YW55Pn0gKi9cblx0XHRcdGNvcHkgPSB7fTtcblx0XHRcdGNsb25lZC5zZXQodmFsdWUsIGNvcHkpO1xuXG5cdFx0XHRpZiAob3JpZ2luYWwgIT09IG51bGwpIHtcblx0XHRcdFx0Y2xvbmVkLnNldChvcmlnaW5hbCwgY29weSk7XG5cdFx0XHR9XG5cblx0XHRcdGZvciAodmFyIGtleSBpbiB2YWx1ZSkge1xuXHRcdFx0XHQvLyBAdHMtZXhwZWN0LWVycm9yXG5cdFx0XHRcdGNvcHlba2V5XSA9IGNsb25lKHZhbHVlW2tleV0sIGNsb25lZCwgREVWID8gYCR7cGF0aH0uJHtrZXl9YCA6IHBhdGgsIHBhdGhzKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGNvcHk7XG5cdFx0fVxuXG5cdFx0aWYgKHZhbHVlIGluc3RhbmNlb2YgRGF0ZSkge1xuXHRcdFx0cmV0dXJuIC8qKiBAdHlwZSB7U25hcHNob3Q8VD59ICovIChzdHJ1Y3R1cmVkQ2xvbmUodmFsdWUpKTtcblx0XHR9XG5cblx0XHRpZiAodHlwZW9mICgvKiogQHR5cGUge1QgJiB7IHRvSlNPTj86IGFueSB9IH0gKi8gKHZhbHVlKS50b0pTT04pID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0XHRyZXR1cm4gY2xvbmUoXG5cdFx0XHRcdC8qKiBAdHlwZSB7VCAmIHsgdG9KU09OKCk6IGFueSB9IH0gKi8gKHZhbHVlKS50b0pTT04oKSxcblx0XHRcdFx0Y2xvbmVkLFxuXHRcdFx0XHRERVYgPyBgJHtwYXRofS50b0pTT04oKWAgOiBwYXRoLFxuXHRcdFx0XHRwYXRocyxcblx0XHRcdFx0Ly8gQXNzb2NpYXRlIHRoZSBpbnN0YW5jZSB3aXRoIHRoZSB0b0pTT04gY2xvbmVcblx0XHRcdFx0dmFsdWVcblx0XHRcdCk7XG5cdFx0fVxuXHR9XG5cblx0aWYgKHZhbHVlIGluc3RhbmNlb2YgRXZlbnRUYXJnZXQpIHtcblx0XHQvLyBjYW4ndCBiZSBjbG9uZWRcblx0XHRyZXR1cm4gLyoqIEB0eXBlIHtTbmFwc2hvdDxUPn0gKi8gKHZhbHVlKTtcblx0fVxuXG5cdHRyeSB7XG5cdFx0cmV0dXJuIC8qKiBAdHlwZSB7U25hcHNob3Q8VD59ICovIChzdHJ1Y3R1cmVkQ2xvbmUodmFsdWUpKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdGlmIChERVYpIHtcblx0XHRcdHBhdGhzLnB1c2gocGF0aCk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIC8qKiBAdHlwZSB7U25hcHNob3Q8VD59ICovICh2YWx1ZSk7XG5cdH1cbn1cbiIsIi8qKiBAaW1wb3J0IHsgRGVyaXZlZCwgUmVhY3Rpb24sIFNpZ25hbCwgVmFsdWUgfSBmcm9tICcjY2xpZW50JyAqL1xuaW1wb3J0IHsgVU5JTklUSUFMSVpFRCB9IGZyb20gJy4uLy4uLy4uL2NvbnN0YW50cy5qcyc7XG5pbXBvcnQgeyBzbmFwc2hvdCB9IGZyb20gJy4uLy4uL3NoYXJlZC9jbG9uZS5qcyc7XG5pbXBvcnQgeyBkZWZpbmVfcHJvcGVydHkgfSBmcm9tICcuLi8uLi9zaGFyZWQvdXRpbHMuanMnO1xuaW1wb3J0IHsgREVSSVZFRCwgU1RBVEVfU1lNQk9MIH0gZnJvbSAnLi4vY29uc3RhbnRzLmpzJztcbmltcG9ydCB7IGVmZmVjdF90cmFja2luZyB9IGZyb20gJy4uL3JlYWN0aXZpdHkvZWZmZWN0cy5qcyc7XG5pbXBvcnQgeyBhY3RpdmVfcmVhY3Rpb24sIGNhcHR1cmVkX3NpZ25hbHMsIHNldF9jYXB0dXJlZF9zaWduYWxzLCB1bnRyYWNrIH0gZnJvbSAnLi4vcnVudGltZS5qcyc7XG5cbi8qKiBAdHlwZSB7IGFueSB9ICovXG5leHBvcnQgbGV0IHRyYWNpbmdfZXhwcmVzc2lvbnMgPSBudWxsO1xuXG4vKipcbiAqIEBwYXJhbSB7IFZhbHVlIH0gc2lnbmFsXG4gKiBAcGFyYW0geyB7IHJlYWQ6IEVycm9yW10gfSB9IFtlbnRyeV1cbiAqL1xuZnVuY3Rpb24gbG9nX2VudHJ5KHNpZ25hbCwgZW50cnkpIHtcblx0Y29uc3QgZGVidWcgPSBzaWduYWwuZGVidWc7XG5cdGNvbnN0IHZhbHVlID0gc2lnbmFsLnY7XG5cblx0aWYgKHZhbHVlID09PSBVTklOSVRJQUxJWkVEKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0aWYgKGRlYnVnKSB7XG5cdFx0dmFyIHByZXZpb3VzX2NhcHR1cmVkX3NpZ25hbHMgPSBjYXB0dXJlZF9zaWduYWxzO1xuXHRcdHZhciBjYXB0dXJlZCA9IG5ldyBTZXQoKTtcblx0XHRzZXRfY2FwdHVyZWRfc2lnbmFscyhjYXB0dXJlZCk7XG5cdFx0dHJ5IHtcblx0XHRcdHVudHJhY2soKCkgPT4ge1xuXHRcdFx0XHRkZWJ1ZygpO1xuXHRcdFx0fSk7XG5cdFx0fSBmaW5hbGx5IHtcblx0XHRcdHNldF9jYXB0dXJlZF9zaWduYWxzKHByZXZpb3VzX2NhcHR1cmVkX3NpZ25hbHMpO1xuXHRcdH1cblx0XHRpZiAoY2FwdHVyZWQuc2l6ZSA+IDApIHtcblx0XHRcdGZvciAoY29uc3QgZGVwIG9mIGNhcHR1cmVkKSB7XG5cdFx0XHRcdGxvZ19lbnRyeShkZXApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0fVxuXG5cdGNvbnN0IHR5cGUgPSAoc2lnbmFsLmYgJiBERVJJVkVEKSAhPT0gMCA/ICckZGVyaXZlZCcgOiAnJHN0YXRlJztcblx0Y29uc3QgY3VycmVudF9yZWFjdGlvbiA9IC8qKiBAdHlwZSB7UmVhY3Rpb259ICovIChhY3RpdmVfcmVhY3Rpb24pO1xuXHRjb25zdCBzdGF0dXMgPVxuXHRcdHNpZ25hbC52ZXJzaW9uID4gY3VycmVudF9yZWFjdGlvbi52ZXJzaW9uIHx8IGN1cnJlbnRfcmVhY3Rpb24udmVyc2lvbiA9PT0gMCA/ICdkaXJ0eScgOiAnY2xlYW4nO1xuXG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG5cdGNvbnNvbGUuZ3JvdXBDb2xsYXBzZWQoXG5cdFx0YCVjJHt0eXBlfWAsXG5cdFx0c3RhdHVzICE9PSAnY2xlYW4nXG5cdFx0XHQ/ICdjb2xvcjogQ29ybmZsb3dlckJsdWU7IGZvbnQtd2VpZ2h0OiBib2xkJ1xuXHRcdFx0OiAnY29sb3I6IGdyZXk7IGZvbnQtd2VpZ2h0OiBib2xkJyxcblx0XHR0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIFNUQVRFX1NZTUJPTCBpbiB2YWx1ZSA/IHNuYXBzaG90KHZhbHVlLCB0cnVlKSA6IHZhbHVlXG5cdCk7XG5cblx0aWYgKHR5cGUgPT09ICckZGVyaXZlZCcpIHtcblx0XHRjb25zdCBkZXBzID0gbmV3IFNldCgvKiogQHR5cGUge0Rlcml2ZWR9ICovIChzaWduYWwpLmRlcHMpO1xuXHRcdGZvciAoY29uc3QgZGVwIG9mIGRlcHMpIHtcblx0XHRcdGxvZ19lbnRyeShkZXApO1xuXHRcdH1cblx0fVxuXG5cdGlmIChzaWduYWwuY3JlYXRlZCkge1xuXHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG5cdFx0Y29uc29sZS5sb2coc2lnbmFsLmNyZWF0ZWQpO1xuXHR9XG5cblx0aWYgKHNpZ25hbC51cGRhdGVkKSB7XG5cdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcblx0XHRjb25zb2xlLmxvZyhzaWduYWwudXBkYXRlZCk7XG5cdH1cblxuXHRjb25zdCByZWFkID0gZW50cnk/LnJlYWQ7XG5cblx0aWYgKHJlYWQgJiYgcmVhZC5sZW5ndGggPiAwKSB7XG5cdFx0Zm9yICh2YXIgc3RhY2sgb2YgcmVhZCkge1xuXHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcblx0XHRcdGNvbnNvbGUubG9nKHN0YWNrKTtcblx0XHR9XG5cdH1cblxuXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuXHRjb25zb2xlLmdyb3VwRW5kKCk7XG59XG5cbi8qKlxuICogQHRlbXBsYXRlIFRcbiAqIEBwYXJhbSB7KCkgPT4gc3RyaW5nfSBsYWJlbFxuICogQHBhcmFtIHsoKSA9PiBUfSBmblxuICovXG5leHBvcnQgZnVuY3Rpb24gdHJhY2UobGFiZWwsIGZuKSB7XG5cdHZhciBwcmV2aW91c2x5X3RyYWNpbmdfZXhwcmVzc2lvbnMgPSB0cmFjaW5nX2V4cHJlc3Npb25zO1xuXHR0cnkge1xuXHRcdHRyYWNpbmdfZXhwcmVzc2lvbnMgPSB7IGVudHJpZXM6IG5ldyBNYXAoKSwgcmVhY3Rpb246IGFjdGl2ZV9yZWFjdGlvbiB9O1xuXG5cdFx0dmFyIHN0YXJ0ID0gcGVyZm9ybWFuY2Uubm93KCk7XG5cdFx0dmFyIHZhbHVlID0gZm4oKTtcblx0XHR2YXIgdGltZSA9IChwZXJmb3JtYW5jZS5ub3coKSAtIHN0YXJ0KS50b0ZpeGVkKDIpO1xuXG5cdFx0aWYgKCFlZmZlY3RfdHJhY2tpbmcoKSkge1xuXHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcblx0XHRcdGNvbnNvbGUubG9nKGAke2xhYmVsKCl9ICVjcmFuIG91dHNpZGUgb2YgYW4gZWZmZWN0ICgke3RpbWV9bXMpYCwgJ2NvbG9yOiBncmV5Jyk7XG5cdFx0fSBlbHNlIGlmICh0cmFjaW5nX2V4cHJlc3Npb25zLmVudHJpZXMuc2l6ZSA9PT0gMCkge1xuXHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcblx0XHRcdGNvbnNvbGUubG9nKGAke2xhYmVsKCl9ICVjbm8gcmVhY3RpdmUgZGVwZW5kZW5jaWVzICgke3RpbWV9bXMpYCwgJ2NvbG9yOiBncmV5Jyk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG5cdFx0XHRjb25zb2xlLmdyb3VwKGAke2xhYmVsKCl9ICVjKCR7dGltZX1tcylgLCAnY29sb3I6IGdyZXknKTtcblxuXHRcdFx0dmFyIGVudHJpZXMgPSB0cmFjaW5nX2V4cHJlc3Npb25zLmVudHJpZXM7XG5cblx0XHRcdHRyYWNpbmdfZXhwcmVzc2lvbnMgPSBudWxsO1xuXG5cdFx0XHRmb3IgKGNvbnN0IFtzaWduYWwsIGVudHJ5XSBvZiBlbnRyaWVzKSB7XG5cdFx0XHRcdGxvZ19lbnRyeShzaWduYWwsIGVudHJ5KTtcblx0XHRcdH1cblx0XHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG5cdFx0XHRjb25zb2xlLmdyb3VwRW5kKCk7XG5cdFx0fVxuXG5cdFx0aWYgKHByZXZpb3VzbHlfdHJhY2luZ19leHByZXNzaW9ucyAhPT0gbnVsbCkge1xuXHRcdFx0Zm9yIChjb25zdCBbc2lnbmFsLCBlbnRyeV0gb2YgdHJhY2luZ19leHByZXNzaW9ucy5lbnRyaWVzKSB7XG5cdFx0XHRcdHZhciBwcmV2X2VudHJ5ID0gcHJldmlvdXNseV90cmFjaW5nX2V4cHJlc3Npb25zLmdldChzaWduYWwpO1xuXG5cdFx0XHRcdGlmIChwcmV2X2VudHJ5ID09PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0XHRwcmV2aW91c2x5X3RyYWNpbmdfZXhwcmVzc2lvbnMuc2V0KHNpZ25hbCwgZW50cnkpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHByZXZfZW50cnkucmVhZC5wdXNoKC4uLmVudHJ5LnJlYWQpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHZhbHVlO1xuXHR9IGZpbmFsbHkge1xuXHRcdHRyYWNpbmdfZXhwcmVzc2lvbnMgPSBwcmV2aW91c2x5X3RyYWNpbmdfZXhwcmVzc2lvbnM7XG5cdH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gbGFiZWxcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldF9zdGFjayhsYWJlbCkge1xuXHRsZXQgZXJyb3IgPSBFcnJvcigpO1xuXHRjb25zdCBzdGFjayA9IGVycm9yLnN0YWNrO1xuXG5cdGlmIChzdGFjaykge1xuXHRcdGNvbnN0IGxpbmVzID0gc3RhY2suc3BsaXQoJ1xcbicpO1xuXHRcdGNvbnN0IG5ld19saW5lcyA9IFsnXFxuJ107XG5cblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IGxpbmVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRjb25zdCBsaW5lID0gbGluZXNbaV07XG5cblx0XHRcdGlmIChsaW5lID09PSAnRXJyb3InKSB7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXHRcdFx0aWYgKGxpbmUuaW5jbHVkZXMoJ3ZhbGlkYXRlX2VhY2hfa2V5cycpKSB7XG5cdFx0XHRcdHJldHVybiBudWxsO1xuXHRcdFx0fVxuXHRcdFx0aWYgKGxpbmUuaW5jbHVkZXMoJ3N2ZWx0ZS9zcmMvaW50ZXJuYWwnKSkge1xuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblx0XHRcdG5ld19saW5lcy5wdXNoKGxpbmUpO1xuXHRcdH1cblxuXHRcdGlmIChuZXdfbGluZXMubGVuZ3RoID09PSAxKSB7XG5cdFx0XHRyZXR1cm4gbnVsbDtcblx0XHR9XG5cblx0XHRkZWZpbmVfcHJvcGVydHkoZXJyb3IsICdzdGFjaycsIHtcblx0XHRcdHZhbHVlOiBuZXdfbGluZXMuam9pbignXFxuJylcblx0XHR9KTtcblxuXHRcdGRlZmluZV9wcm9wZXJ0eShlcnJvciwgJ25hbWUnLCB7XG5cdFx0XHQvLyAnRXJyb3InIHN1ZmZpeCBpcyByZXF1aXJlZCBmb3Igc3RhY2sgdHJhY2VzIHRvIGJlIHJlbmRlcmVkIHByb3Blcmx5XG5cdFx0XHR2YWx1ZTogYCR7bGFiZWx9RXJyb3JgXG5cdFx0fSk7XG5cdH1cblx0cmV0dXJuIGVycm9yO1xufVxuIiwiLyoqIEBpbXBvcnQgeyBEZXJpdmVkLCBFZmZlY3QsIFJlYWN0aW9uLCBTb3VyY2UsIFZhbHVlIH0gZnJvbSAnI2NsaWVudCcgKi9cbmltcG9ydCB7IERFViB9IGZyb20gJ2VzbS1lbnYnO1xuaW1wb3J0IHtcblx0Y29tcG9uZW50X2NvbnRleHQsXG5cdGFjdGl2ZV9yZWFjdGlvbixcblx0bmV3X2RlcHMsXG5cdGFjdGl2ZV9lZmZlY3QsXG5cdHVudHJhY2tlZF93cml0ZXMsXG5cdGdldCxcblx0aXNfcnVuZXMsXG5cdHNjaGVkdWxlX2VmZmVjdCxcblx0c2V0X3VudHJhY2tlZF93cml0ZXMsXG5cdHNldF9zaWduYWxfc3RhdHVzLFxuXHR1bnRyYWNrLFxuXHRpbmNyZW1lbnRfdmVyc2lvbixcblx0dXBkYXRlX2VmZmVjdCxcblx0ZGVyaXZlZF9zb3VyY2VzLFxuXHRzZXRfZGVyaXZlZF9zb3VyY2VzLFxuXHRjaGVja19kaXJ0aW5lc3MsXG5cdHNldF9pc19mbHVzaGluZ19lZmZlY3QsXG5cdGlzX2ZsdXNoaW5nX2VmZmVjdFxufSBmcm9tICcuLi9ydW50aW1lLmpzJztcbmltcG9ydCB7IGVxdWFscywgc2FmZV9lcXVhbHMgfSBmcm9tICcuL2VxdWFsaXR5LmpzJztcbmltcG9ydCB7XG5cdENMRUFOLFxuXHRERVJJVkVELFxuXHRESVJUWSxcblx0QlJBTkNIX0VGRkVDVCxcblx0SU5TUEVDVF9FRkZFQ1QsXG5cdFVOT1dORUQsXG5cdE1BWUJFX0RJUlRZLFxuXHRCTE9DS19FRkZFQ1Rcbn0gZnJvbSAnLi4vY29uc3RhbnRzLmpzJztcbmltcG9ydCAqIGFzIGUgZnJvbSAnLi4vZXJyb3JzLmpzJztcbmltcG9ydCB7IGxlZ2FjeV9tb2RlX2ZsYWcgfSBmcm9tICcuLi8uLi9mbGFncy9pbmRleC5qcyc7XG5pbXBvcnQgeyBnZXRfc3RhY2sgfSBmcm9tICcuLi9kZXYvdHJhY2luZy5qcyc7XG5cbmV4cG9ydCBsZXQgaW5zcGVjdF9lZmZlY3RzID0gbmV3IFNldCgpO1xuXG4vKipcbiAqIEBwYXJhbSB7U2V0PGFueT59IHZcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldF9pbnNwZWN0X2VmZmVjdHModikge1xuXHRpbnNwZWN0X2VmZmVjdHMgPSB2O1xufVxuXG4vKipcbiAqIEB0ZW1wbGF0ZSBWXG4gKiBAcGFyYW0ge1Z9IHZcbiAqIEBwYXJhbSB7RXJyb3IgfCBudWxsfSBbc3RhY2tdXG4gKiBAcmV0dXJucyB7U291cmNlPFY+fVxuICovXG5leHBvcnQgZnVuY3Rpb24gc291cmNlKHYsIHN0YWNrKSB7XG5cdC8qKiBAdHlwZSB7VmFsdWV9ICovXG5cdHZhciBzaWduYWwgPSB7XG5cdFx0ZjogMCwgLy8gVE9ETyBpZGVhbGx5IHdlIGNvdWxkIHNraXAgdGhpcyBhbHRvZ2V0aGVyLCBidXQgaXQgY2F1c2VzIHR5cGUgZXJyb3JzXG5cdFx0dixcblx0XHRyZWFjdGlvbnM6IG51bGwsXG5cdFx0ZXF1YWxzLFxuXHRcdHZlcnNpb246IDBcblx0fTtcblxuXHRpZiAoREVWKSB7XG5cdFx0c2lnbmFsLmNyZWF0ZWQgPSBzdGFjayA/PyBnZXRfc3RhY2soJ0NyZWF0ZWRBdCcpO1xuXHRcdHNpZ25hbC5kZWJ1ZyA9IG51bGw7XG5cdH1cblxuXHRyZXR1cm4gc2lnbmFsO1xufVxuXG4vKipcbiAqIEB0ZW1wbGF0ZSBWXG4gKiBAcGFyYW0ge1Z9IHZcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN0YXRlKHYpIHtcblx0cmV0dXJuIHB1c2hfZGVyaXZlZF9zb3VyY2Uoc291cmNlKHYpKTtcbn1cblxuLyoqXG4gKiBAdGVtcGxhdGUgVlxuICogQHBhcmFtIHtWfSBpbml0aWFsX3ZhbHVlXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtpbW11dGFibGVdXG4gKiBAcmV0dXJucyB7U291cmNlPFY+fVxuICovXG4vKiNfX05PX1NJREVfRUZGRUNUU19fKi9cbmV4cG9ydCBmdW5jdGlvbiBtdXRhYmxlX3NvdXJjZShpbml0aWFsX3ZhbHVlLCBpbW11dGFibGUgPSBmYWxzZSkge1xuXHRjb25zdCBzID0gc291cmNlKGluaXRpYWxfdmFsdWUpO1xuXHRpZiAoIWltbXV0YWJsZSkge1xuXHRcdHMuZXF1YWxzID0gc2FmZV9lcXVhbHM7XG5cdH1cblxuXHQvLyBiaW5kIHRoZSBzaWduYWwgdG8gdGhlIGNvbXBvbmVudCBjb250ZXh0LCBpbiBjYXNlIHdlIG5lZWQgdG9cblx0Ly8gdHJhY2sgdXBkYXRlcyB0byB0cmlnZ2VyIGJlZm9yZVVwZGF0ZS9hZnRlclVwZGF0ZSBjYWxsYmFja3Ncblx0aWYgKGxlZ2FjeV9tb2RlX2ZsYWcgJiYgY29tcG9uZW50X2NvbnRleHQgIT09IG51bGwgJiYgY29tcG9uZW50X2NvbnRleHQubCAhPT0gbnVsbCkge1xuXHRcdChjb21wb25lbnRfY29udGV4dC5sLnMgPz89IFtdKS5wdXNoKHMpO1xuXHR9XG5cblx0cmV0dXJuIHM7XG59XG5cbi8qKlxuICogQHRlbXBsYXRlIFZcbiAqIEBwYXJhbSB7Vn0gdlxuICogQHBhcmFtIHtib29sZWFufSBbaW1tdXRhYmxlXVxuICogQHJldHVybnMge1NvdXJjZTxWPn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG11dGFibGVfc3RhdGUodiwgaW1tdXRhYmxlID0gZmFsc2UpIHtcblx0cmV0dXJuIHB1c2hfZGVyaXZlZF9zb3VyY2UobXV0YWJsZV9zb3VyY2UodiwgaW1tdXRhYmxlKSk7XG59XG5cbi8qKlxuICogQHRlbXBsYXRlIFZcbiAqIEBwYXJhbSB7U291cmNlPFY+fSBzb3VyY2VcbiAqL1xuLyojX19OT19TSURFX0VGRkVDVFNfXyovXG5mdW5jdGlvbiBwdXNoX2Rlcml2ZWRfc291cmNlKHNvdXJjZSkge1xuXHRpZiAoYWN0aXZlX3JlYWN0aW9uICE9PSBudWxsICYmIChhY3RpdmVfcmVhY3Rpb24uZiAmIERFUklWRUQpICE9PSAwKSB7XG5cdFx0aWYgKGRlcml2ZWRfc291cmNlcyA9PT0gbnVsbCkge1xuXHRcdFx0c2V0X2Rlcml2ZWRfc291cmNlcyhbc291cmNlXSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGRlcml2ZWRfc291cmNlcy5wdXNoKHNvdXJjZSk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHNvdXJjZTtcbn1cblxuLyoqXG4gKiBAdGVtcGxhdGUgVlxuICogQHBhcmFtIHtWYWx1ZTxWPn0gc291cmNlXG4gKiBAcGFyYW0ge1Z9IHZhbHVlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtdXRhdGUoc291cmNlLCB2YWx1ZSkge1xuXHRzZXQoXG5cdFx0c291cmNlLFxuXHRcdHVudHJhY2soKCkgPT4gZ2V0KHNvdXJjZSkpXG5cdCk7XG5cdHJldHVybiB2YWx1ZTtcbn1cblxuLyoqXG4gKiBAdGVtcGxhdGUgVlxuICogQHBhcmFtIHtTb3VyY2U8Vj59IHNvdXJjZVxuICogQHBhcmFtIHtWfSB2YWx1ZVxuICogQHJldHVybnMge1Z9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXQoc291cmNlLCB2YWx1ZSkge1xuXHRpZiAoXG5cdFx0YWN0aXZlX3JlYWN0aW9uICE9PSBudWxsICYmXG5cdFx0aXNfcnVuZXMoKSAmJlxuXHRcdChhY3RpdmVfcmVhY3Rpb24uZiAmIChERVJJVkVEIHwgQkxPQ0tfRUZGRUNUKSkgIT09IDAgJiZcblx0XHQvLyBJZiB0aGUgc291cmNlIHdhcyBjcmVhdGVkIGxvY2FsbHkgd2l0aGluIHRoZSBjdXJyZW50IGRlcml2ZWQsIHRoZW5cblx0XHQvLyB3ZSBhbGxvdyB0aGUgbXV0YXRpb24uXG5cdFx0KGRlcml2ZWRfc291cmNlcyA9PT0gbnVsbCB8fCAhZGVyaXZlZF9zb3VyY2VzLmluY2x1ZGVzKHNvdXJjZSkpXG5cdCkge1xuXHRcdGUuc3RhdGVfdW5zYWZlX211dGF0aW9uKCk7XG5cdH1cblxuXHRyZXR1cm4gaW50ZXJuYWxfc2V0KHNvdXJjZSwgdmFsdWUpO1xufVxuXG4vKipcbiAqIEB0ZW1wbGF0ZSBWXG4gKiBAcGFyYW0ge1NvdXJjZTxWPn0gc291cmNlXG4gKiBAcGFyYW0ge1Z9IHZhbHVlXG4gKiBAcmV0dXJucyB7Vn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGludGVybmFsX3NldChzb3VyY2UsIHZhbHVlKSB7XG5cdGlmICghc291cmNlLmVxdWFscyh2YWx1ZSkpIHtcblx0XHRzb3VyY2UudiA9IHZhbHVlO1xuXHRcdHNvdXJjZS52ZXJzaW9uID0gaW5jcmVtZW50X3ZlcnNpb24oKTtcblxuXHRcdGlmIChERVYpIHtcblx0XHRcdHNvdXJjZS51cGRhdGVkID0gZ2V0X3N0YWNrKCdVcGRhdGVkQXQnKTtcblx0XHR9XG5cblx0XHRtYXJrX3JlYWN0aW9ucyhzb3VyY2UsIERJUlRZKTtcblxuXHRcdC8vIElmIHRoZSBjdXJyZW50IHNpZ25hbCBpcyBydW5uaW5nIGZvciB0aGUgZmlyc3QgdGltZSwgaXQgd29uJ3QgaGF2ZSBhbnlcblx0XHQvLyByZWFjdGlvbnMgYXMgd2Ugb25seSBhbGxvY2F0ZSBhbmQgYXNzaWduIHRoZSByZWFjdGlvbnMgYWZ0ZXIgdGhlIHNpZ25hbFxuXHRcdC8vIGhhcyBmdWxseSBleGVjdXRlZC4gU28gaW4gdGhlIGNhc2Ugb2YgZW5zdXJpbmcgaXQgcmVnaXN0ZXJzIHRoZSByZWFjdGlvblxuXHRcdC8vIHByb3Blcmx5IGZvciBpdHNlbGYsIHdlIG5lZWQgdG8gZW5zdXJlIHRoZSBjdXJyZW50IGVmZmVjdCBhY3R1YWxseSBnZXRzXG5cdFx0Ly8gc2NoZWR1bGVkLiBpLmU6IGAkZWZmZWN0KCgpID0+IHgrKylgXG5cdFx0aWYgKFxuXHRcdFx0aXNfcnVuZXMoKSAmJlxuXHRcdFx0YWN0aXZlX2VmZmVjdCAhPT0gbnVsbCAmJlxuXHRcdFx0KGFjdGl2ZV9lZmZlY3QuZiAmIENMRUFOKSAhPT0gMCAmJlxuXHRcdFx0KGFjdGl2ZV9lZmZlY3QuZiAmIEJSQU5DSF9FRkZFQ1QpID09PSAwXG5cdFx0KSB7XG5cdFx0XHRpZiAobmV3X2RlcHMgIT09IG51bGwgJiYgbmV3X2RlcHMuaW5jbHVkZXMoc291cmNlKSkge1xuXHRcdFx0XHRzZXRfc2lnbmFsX3N0YXR1cyhhY3RpdmVfZWZmZWN0LCBESVJUWSk7XG5cdFx0XHRcdHNjaGVkdWxlX2VmZmVjdChhY3RpdmVfZWZmZWN0KTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGlmICh1bnRyYWNrZWRfd3JpdGVzID09PSBudWxsKSB7XG5cdFx0XHRcdFx0c2V0X3VudHJhY2tlZF93cml0ZXMoW3NvdXJjZV0pO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHVudHJhY2tlZF93cml0ZXMucHVzaChzb3VyY2UpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKERFViAmJiBpbnNwZWN0X2VmZmVjdHMuc2l6ZSA+IDApIHtcblx0XHRcdGNvbnN0IGluc3BlY3RzID0gQXJyYXkuZnJvbShpbnNwZWN0X2VmZmVjdHMpO1xuXHRcdFx0dmFyIHByZXZpb3VzbHlfZmx1c2hpbmdfZWZmZWN0ID0gaXNfZmx1c2hpbmdfZWZmZWN0O1xuXHRcdFx0c2V0X2lzX2ZsdXNoaW5nX2VmZmVjdCh0cnVlKTtcblx0XHRcdHRyeSB7XG5cdFx0XHRcdGZvciAoY29uc3QgZWZmZWN0IG9mIGluc3BlY3RzKSB7XG5cdFx0XHRcdFx0Ly8gTWFyayBjbGVhbiBpbnNwZWN0LWVmZmVjdHMgYXMgbWF5YmUgZGlydHkgYW5kIHRoZW4gY2hlY2sgdGhlaXIgZGlydGluZXNzXG5cdFx0XHRcdFx0Ly8gaW5zdGVhZCBvZiBqdXN0IHVwZGF0aW5nIHRoZSBlZmZlY3RzIC0gdGhpcyB3YXkgd2UgYXZvaWQgb3ZlcmZpcmluZy5cblx0XHRcdFx0XHRpZiAoKGVmZmVjdC5mICYgQ0xFQU4pICE9PSAwKSB7XG5cdFx0XHRcdFx0XHRzZXRfc2lnbmFsX3N0YXR1cyhlZmZlY3QsIE1BWUJFX0RJUlRZKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKGNoZWNrX2RpcnRpbmVzcyhlZmZlY3QpKSB7XG5cdFx0XHRcdFx0XHR1cGRhdGVfZWZmZWN0KGVmZmVjdCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9IGZpbmFsbHkge1xuXHRcdFx0XHRzZXRfaXNfZmx1c2hpbmdfZWZmZWN0KHByZXZpb3VzbHlfZmx1c2hpbmdfZWZmZWN0KTtcblx0XHRcdH1cblx0XHRcdGluc3BlY3RfZWZmZWN0cy5jbGVhcigpO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiB2YWx1ZTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge1ZhbHVlfSBzaWduYWxcbiAqIEBwYXJhbSB7bnVtYmVyfSBzdGF0dXMgc2hvdWxkIGJlIERJUlRZIG9yIE1BWUJFX0RJUlRZXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZnVuY3Rpb24gbWFya19yZWFjdGlvbnMoc2lnbmFsLCBzdGF0dXMpIHtcblx0dmFyIHJlYWN0aW9ucyA9IHNpZ25hbC5yZWFjdGlvbnM7XG5cdGlmIChyZWFjdGlvbnMgPT09IG51bGwpIHJldHVybjtcblxuXHR2YXIgcnVuZXMgPSBpc19ydW5lcygpO1xuXHR2YXIgbGVuZ3RoID0gcmVhY3Rpb25zLmxlbmd0aDtcblxuXHRmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG5cdFx0dmFyIHJlYWN0aW9uID0gcmVhY3Rpb25zW2ldO1xuXHRcdHZhciBmbGFncyA9IHJlYWN0aW9uLmY7XG5cblx0XHQvLyBTa2lwIGFueSBlZmZlY3RzIHRoYXQgYXJlIGFscmVhZHkgZGlydHlcblx0XHRpZiAoKGZsYWdzICYgRElSVFkpICE9PSAwKSBjb250aW51ZTtcblxuXHRcdC8vIEluIGxlZ2FjeSBtb2RlLCBza2lwIHRoZSBjdXJyZW50IGVmZmVjdCB0byBwcmV2ZW50IGluZmluaXRlIGxvb3BzXG5cdFx0aWYgKCFydW5lcyAmJiByZWFjdGlvbiA9PT0gYWN0aXZlX2VmZmVjdCkgY29udGludWU7XG5cblx0XHQvLyBJbnNwZWN0IGVmZmVjdHMgbmVlZCB0byBydW4gaW1tZWRpYXRlbHksIHNvIHRoYXQgdGhlIHN0YWNrIHRyYWNlIG1ha2VzIHNlbnNlXG5cdFx0aWYgKERFViAmJiAoZmxhZ3MgJiBJTlNQRUNUX0VGRkVDVCkgIT09IDApIHtcblx0XHRcdGluc3BlY3RfZWZmZWN0cy5hZGQocmVhY3Rpb24pO1xuXHRcdFx0Y29udGludWU7XG5cdFx0fVxuXG5cdFx0c2V0X3NpZ25hbF9zdGF0dXMocmVhY3Rpb24sIHN0YXR1cyk7XG5cblx0XHQvLyBJZiB0aGUgc2lnbmFsIGEpIHdhcyBwcmV2aW91c2x5IGNsZWFuIG9yIGIpIGlzIGFuIHVub3duZWQgZGVyaXZlZCwgdGhlbiBtYXJrIGl0XG5cdFx0aWYgKChmbGFncyAmIChDTEVBTiB8IFVOT1dORUQpKSAhPT0gMCkge1xuXHRcdFx0aWYgKChmbGFncyAmIERFUklWRUQpICE9PSAwKSB7XG5cdFx0XHRcdG1hcmtfcmVhY3Rpb25zKC8qKiBAdHlwZSB7RGVyaXZlZH0gKi8gKHJlYWN0aW9uKSwgTUFZQkVfRElSVFkpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0c2NoZWR1bGVfZWZmZWN0KC8qKiBAdHlwZSB7RWZmZWN0fSAqLyAocmVhY3Rpb24pKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cbn1cbiIsIi8qIFRoaXMgZmlsZSBpcyBnZW5lcmF0ZWQgYnkgc2NyaXB0cy9wcm9jZXNzLW1lc3NhZ2VzL2luZGV4LmpzLiBEbyBub3QgZWRpdCEgKi9cblxuaW1wb3J0IHsgREVWIH0gZnJvbSAnZXNtLWVudic7XG5cbnZhciBib2xkID0gJ2ZvbnQtd2VpZ2h0OiBib2xkJztcbnZhciBub3JtYWwgPSAnZm9udC13ZWlnaHQ6IG5vcm1hbCc7XG5cbi8qKlxuICogQXNzaWdubWVudCB0byBgJXByb3BlcnR5JWAgcHJvcGVydHkgKCVsb2NhdGlvbiUpIHdpbGwgZXZhbHVhdGUgdG8gdGhlIHJpZ2h0LWhhbmQgc2lkZSwgbm90IHRoZSB2YWx1ZSBvZiBgJXByb3BlcnR5JWAgZm9sbG93aW5nIHRoZSBhc3NpZ25tZW50LiBUaGlzIG1heSByZXN1bHQgaW4gdW5leHBlY3RlZCBiZWhhdmlvdXIuXG4gKiBAcGFyYW0ge3N0cmluZ30gcHJvcGVydHlcbiAqIEBwYXJhbSB7c3RyaW5nfSBsb2NhdGlvblxuICovXG5leHBvcnQgZnVuY3Rpb24gYXNzaWdubWVudF92YWx1ZV9zdGFsZShwcm9wZXJ0eSwgbG9jYXRpb24pIHtcblx0aWYgKERFVikge1xuXHRcdGNvbnNvbGUud2FybihgJWNbc3ZlbHRlXSBhc3NpZ25tZW50X3ZhbHVlX3N0YWxlXFxuJWNBc3NpZ25tZW50IHRvIFxcYCR7cHJvcGVydHl9XFxgIHByb3BlcnR5ICgke2xvY2F0aW9ufSkgd2lsbCBldmFsdWF0ZSB0byB0aGUgcmlnaHQtaGFuZCBzaWRlLCBub3QgdGhlIHZhbHVlIG9mIFxcYCR7cHJvcGVydHl9XFxgIGZvbGxvd2luZyB0aGUgYXNzaWdubWVudC4gVGhpcyBtYXkgcmVzdWx0IGluIHVuZXhwZWN0ZWQgYmVoYXZpb3VyLlxcbmh0dHBzOi8vc3ZlbHRlLmRldi9lL2Fzc2lnbm1lbnRfdmFsdWVfc3RhbGVgLCBib2xkLCBub3JtYWwpO1xuXHR9IGVsc2Uge1xuXHRcdGNvbnNvbGUud2FybihgaHR0cHM6Ly9zdmVsdGUuZGV2L2UvYXNzaWdubWVudF92YWx1ZV9zdGFsZWApO1xuXHR9XG59XG5cbi8qKlxuICogYCViaW5kaW5nJWAgKCVsb2NhdGlvbiUpIGlzIGJpbmRpbmcgdG8gYSBub24tcmVhY3RpdmUgcHJvcGVydHlcbiAqIEBwYXJhbSB7c3RyaW5nfSBiaW5kaW5nXG4gKiBAcGFyYW0ge3N0cmluZyB8IHVuZGVmaW5lZCB8IG51bGx9IFtsb2NhdGlvbl1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGJpbmRpbmdfcHJvcGVydHlfbm9uX3JlYWN0aXZlKGJpbmRpbmcsIGxvY2F0aW9uKSB7XG5cdGlmIChERVYpIHtcblx0XHRjb25zb2xlLndhcm4oYCVjW3N2ZWx0ZV0gYmluZGluZ19wcm9wZXJ0eV9ub25fcmVhY3RpdmVcXG4lYyR7bG9jYXRpb24gPyBgXFxgJHtiaW5kaW5nfVxcYCAoJHtsb2NhdGlvbn0pIGlzIGJpbmRpbmcgdG8gYSBub24tcmVhY3RpdmUgcHJvcGVydHlgIDogYFxcYCR7YmluZGluZ31cXGAgaXMgYmluZGluZyB0byBhIG5vbi1yZWFjdGl2ZSBwcm9wZXJ0eWB9XFxuaHR0cHM6Ly9zdmVsdGUuZGV2L2UvYmluZGluZ19wcm9wZXJ0eV9ub25fcmVhY3RpdmVgLCBib2xkLCBub3JtYWwpO1xuXHR9IGVsc2Uge1xuXHRcdGNvbnNvbGUud2FybihgaHR0cHM6Ly9zdmVsdGUuZGV2L2UvYmluZGluZ19wcm9wZXJ0eV9ub25fcmVhY3RpdmVgKTtcblx0fVxufVxuXG4vKipcbiAqIFlvdXIgYGNvbnNvbGUuJW1ldGhvZCVgIGNvbnRhaW5lZCBgJHN0YXRlYCBwcm94aWVzLiBDb25zaWRlciB1c2luZyBgJGluc3BlY3QoLi4uKWAgb3IgYCRzdGF0ZS5zbmFwc2hvdCguLi4pYCBpbnN0ZWFkXG4gKiBAcGFyYW0ge3N0cmluZ30gbWV0aG9kXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb25zb2xlX2xvZ19zdGF0ZShtZXRob2QpIHtcblx0aWYgKERFVikge1xuXHRcdGNvbnNvbGUud2FybihgJWNbc3ZlbHRlXSBjb25zb2xlX2xvZ19zdGF0ZVxcbiVjWW91ciBcXGBjb25zb2xlLiR7bWV0aG9kfVxcYCBjb250YWluZWQgXFxgJHN0YXRlXFxgIHByb3hpZXMuIENvbnNpZGVyIHVzaW5nIFxcYCRpbnNwZWN0KC4uLilcXGAgb3IgXFxgJHN0YXRlLnNuYXBzaG90KC4uLilcXGAgaW5zdGVhZFxcbmh0dHBzOi8vc3ZlbHRlLmRldi9lL2NvbnNvbGVfbG9nX3N0YXRlYCwgYm9sZCwgbm9ybWFsKTtcblx0fSBlbHNlIHtcblx0XHRjb25zb2xlLndhcm4oYGh0dHBzOi8vc3ZlbHRlLmRldi9lL2NvbnNvbGVfbG9nX3N0YXRlYCk7XG5cdH1cbn1cblxuLyoqXG4gKiAlaGFuZGxlciUgc2hvdWxkIGJlIGEgZnVuY3Rpb24uIERpZCB5b3UgbWVhbiB0byAlc3VnZ2VzdGlvbiU/XG4gKiBAcGFyYW0ge3N0cmluZ30gaGFuZGxlclxuICogQHBhcmFtIHtzdHJpbmd9IHN1Z2dlc3Rpb25cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGV2ZW50X2hhbmRsZXJfaW52YWxpZChoYW5kbGVyLCBzdWdnZXN0aW9uKSB7XG5cdGlmIChERVYpIHtcblx0XHRjb25zb2xlLndhcm4oYCVjW3N2ZWx0ZV0gZXZlbnRfaGFuZGxlcl9pbnZhbGlkXFxuJWMke2hhbmRsZXJ9IHNob3VsZCBiZSBhIGZ1bmN0aW9uLiBEaWQgeW91IG1lYW4gdG8gJHtzdWdnZXN0aW9ufT9cXG5odHRwczovL3N2ZWx0ZS5kZXYvZS9ldmVudF9oYW5kbGVyX2ludmFsaWRgLCBib2xkLCBub3JtYWwpO1xuXHR9IGVsc2Uge1xuXHRcdGNvbnNvbGUud2FybihgaHR0cHM6Ly9zdmVsdGUuZGV2L2UvZXZlbnRfaGFuZGxlcl9pbnZhbGlkYCk7XG5cdH1cbn1cblxuLyoqXG4gKiBUaGUgYCVhdHRyaWJ1dGUlYCBhdHRyaWJ1dGUgb24gYCVodG1sJWAgY2hhbmdlZCBpdHMgdmFsdWUgYmV0d2VlbiBzZXJ2ZXIgYW5kIGNsaWVudCByZW5kZXJzLiBUaGUgY2xpZW50IHZhbHVlLCBgJXZhbHVlJWAsIHdpbGwgYmUgaWdub3JlZCBpbiBmYXZvdXIgb2YgdGhlIHNlcnZlciB2YWx1ZVxuICogQHBhcmFtIHtzdHJpbmd9IGF0dHJpYnV0ZVxuICogQHBhcmFtIHtzdHJpbmd9IGh0bWxcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICovXG5leHBvcnQgZnVuY3Rpb24gaHlkcmF0aW9uX2F0dHJpYnV0ZV9jaGFuZ2VkKGF0dHJpYnV0ZSwgaHRtbCwgdmFsdWUpIHtcblx0aWYgKERFVikge1xuXHRcdGNvbnNvbGUud2FybihgJWNbc3ZlbHRlXSBoeWRyYXRpb25fYXR0cmlidXRlX2NoYW5nZWRcXG4lY1RoZSBcXGAke2F0dHJpYnV0ZX1cXGAgYXR0cmlidXRlIG9uIFxcYCR7aHRtbH1cXGAgY2hhbmdlZCBpdHMgdmFsdWUgYmV0d2VlbiBzZXJ2ZXIgYW5kIGNsaWVudCByZW5kZXJzLiBUaGUgY2xpZW50IHZhbHVlLCBcXGAke3ZhbHVlfVxcYCwgd2lsbCBiZSBpZ25vcmVkIGluIGZhdm91ciBvZiB0aGUgc2VydmVyIHZhbHVlXFxuaHR0cHM6Ly9zdmVsdGUuZGV2L2UvaHlkcmF0aW9uX2F0dHJpYnV0ZV9jaGFuZ2VkYCwgYm9sZCwgbm9ybWFsKTtcblx0fSBlbHNlIHtcblx0XHRjb25zb2xlLndhcm4oYGh0dHBzOi8vc3ZlbHRlLmRldi9lL2h5ZHJhdGlvbl9hdHRyaWJ1dGVfY2hhbmdlZGApO1xuXHR9XG59XG5cbi8qKlxuICogVGhlIHZhbHVlIG9mIGFuIGB7QGh0bWwgLi4ufWAgYmxvY2sgJWxvY2F0aW9uJSBjaGFuZ2VkIGJldHdlZW4gc2VydmVyIGFuZCBjbGllbnQgcmVuZGVycy4gVGhlIGNsaWVudCB2YWx1ZSB3aWxsIGJlIGlnbm9yZWQgaW4gZmF2b3VyIG9mIHRoZSBzZXJ2ZXIgdmFsdWVcbiAqIEBwYXJhbSB7c3RyaW5nIHwgdW5kZWZpbmVkIHwgbnVsbH0gW2xvY2F0aW9uXVxuICovXG5leHBvcnQgZnVuY3Rpb24gaHlkcmF0aW9uX2h0bWxfY2hhbmdlZChsb2NhdGlvbikge1xuXHRpZiAoREVWKSB7XG5cdFx0Y29uc29sZS53YXJuKGAlY1tzdmVsdGVdIGh5ZHJhdGlvbl9odG1sX2NoYW5nZWRcXG4lYyR7bG9jYXRpb24gPyBgVGhlIHZhbHVlIG9mIGFuIFxcYHtAaHRtbCAuLi59XFxgIGJsb2NrICR7bG9jYXRpb259IGNoYW5nZWQgYmV0d2VlbiBzZXJ2ZXIgYW5kIGNsaWVudCByZW5kZXJzLiBUaGUgY2xpZW50IHZhbHVlIHdpbGwgYmUgaWdub3JlZCBpbiBmYXZvdXIgb2YgdGhlIHNlcnZlciB2YWx1ZWAgOiBcIlRoZSB2YWx1ZSBvZiBhbiBge0BodG1sIC4uLn1gIGJsb2NrIGNoYW5nZWQgYmV0d2VlbiBzZXJ2ZXIgYW5kIGNsaWVudCByZW5kZXJzLiBUaGUgY2xpZW50IHZhbHVlIHdpbGwgYmUgaWdub3JlZCBpbiBmYXZvdXIgb2YgdGhlIHNlcnZlciB2YWx1ZVwifVxcbmh0dHBzOi8vc3ZlbHRlLmRldi9lL2h5ZHJhdGlvbl9odG1sX2NoYW5nZWRgLCBib2xkLCBub3JtYWwpO1xuXHR9IGVsc2Uge1xuXHRcdGNvbnNvbGUud2FybihgaHR0cHM6Ly9zdmVsdGUuZGV2L2UvaHlkcmF0aW9uX2h0bWxfY2hhbmdlZGApO1xuXHR9XG59XG5cbi8qKlxuICogSHlkcmF0aW9uIGZhaWxlZCBiZWNhdXNlIHRoZSBpbml0aWFsIFVJIGRvZXMgbm90IG1hdGNoIHdoYXQgd2FzIHJlbmRlcmVkIG9uIHRoZSBzZXJ2ZXIuIFRoZSBlcnJvciBvY2N1cnJlZCBuZWFyICVsb2NhdGlvbiVcbiAqIEBwYXJhbSB7c3RyaW5nIHwgdW5kZWZpbmVkIHwgbnVsbH0gW2xvY2F0aW9uXVxuICovXG5leHBvcnQgZnVuY3Rpb24gaHlkcmF0aW9uX21pc21hdGNoKGxvY2F0aW9uKSB7XG5cdGlmIChERVYpIHtcblx0XHRjb25zb2xlLndhcm4oYCVjW3N2ZWx0ZV0gaHlkcmF0aW9uX21pc21hdGNoXFxuJWMke2xvY2F0aW9uID8gYEh5ZHJhdGlvbiBmYWlsZWQgYmVjYXVzZSB0aGUgaW5pdGlhbCBVSSBkb2VzIG5vdCBtYXRjaCB3aGF0IHdhcyByZW5kZXJlZCBvbiB0aGUgc2VydmVyLiBUaGUgZXJyb3Igb2NjdXJyZWQgbmVhciAke2xvY2F0aW9ufWAgOiBcIkh5ZHJhdGlvbiBmYWlsZWQgYmVjYXVzZSB0aGUgaW5pdGlhbCBVSSBkb2VzIG5vdCBtYXRjaCB3aGF0IHdhcyByZW5kZXJlZCBvbiB0aGUgc2VydmVyXCJ9XFxuaHR0cHM6Ly9zdmVsdGUuZGV2L2UvaHlkcmF0aW9uX21pc21hdGNoYCwgYm9sZCwgbm9ybWFsKTtcblx0fSBlbHNlIHtcblx0XHRjb25zb2xlLndhcm4oYGh0dHBzOi8vc3ZlbHRlLmRldi9lL2h5ZHJhdGlvbl9taXNtYXRjaGApO1xuXHR9XG59XG5cbi8qKlxuICogVGhlIGByZW5kZXJgIGZ1bmN0aW9uIHBhc3NlZCB0byBgY3JlYXRlUmF3U25pcHBldGAgc2hvdWxkIHJldHVybiBIVE1MIGZvciBhIHNpbmdsZSBlbGVtZW50XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpbnZhbGlkX3Jhd19zbmlwcGV0X3JlbmRlcigpIHtcblx0aWYgKERFVikge1xuXHRcdGNvbnNvbGUud2FybihgJWNbc3ZlbHRlXSBpbnZhbGlkX3Jhd19zbmlwcGV0X3JlbmRlclxcbiVjVGhlIFxcYHJlbmRlclxcYCBmdW5jdGlvbiBwYXNzZWQgdG8gXFxgY3JlYXRlUmF3U25pcHBldFxcYCBzaG91bGQgcmV0dXJuIEhUTUwgZm9yIGEgc2luZ2xlIGVsZW1lbnRcXG5odHRwczovL3N2ZWx0ZS5kZXYvZS9pbnZhbGlkX3Jhd19zbmlwcGV0X3JlbmRlcmAsIGJvbGQsIG5vcm1hbCk7XG5cdH0gZWxzZSB7XG5cdFx0Y29uc29sZS53YXJuKGBodHRwczovL3N2ZWx0ZS5kZXYvZS9pbnZhbGlkX3Jhd19zbmlwcGV0X3JlbmRlcmApO1xuXHR9XG59XG5cbi8qKlxuICogRGV0ZWN0ZWQgYSBtaWdyYXRlZCBgJDpgIHJlYWN0aXZlIGJsb2NrIGluIGAlZmlsZW5hbWUlYCB0aGF0IGJvdGggYWNjZXNzZXMgYW5kIHVwZGF0ZXMgdGhlIHNhbWUgcmVhY3RpdmUgdmFsdWUuIFRoaXMgbWF5IGNhdXNlIHJlY3Vyc2l2ZSB1cGRhdGVzIHdoZW4gY29udmVydGVkIHRvIGFuIGAkZWZmZWN0YC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBmaWxlbmFtZVxuICovXG5leHBvcnQgZnVuY3Rpb24gbGVnYWN5X3JlY3Vyc2l2ZV9yZWFjdGl2ZV9ibG9jayhmaWxlbmFtZSkge1xuXHRpZiAoREVWKSB7XG5cdFx0Y29uc29sZS53YXJuKGAlY1tzdmVsdGVdIGxlZ2FjeV9yZWN1cnNpdmVfcmVhY3RpdmVfYmxvY2tcXG4lY0RldGVjdGVkIGEgbWlncmF0ZWQgXFxgJDpcXGAgcmVhY3RpdmUgYmxvY2sgaW4gXFxgJHtmaWxlbmFtZX1cXGAgdGhhdCBib3RoIGFjY2Vzc2VzIGFuZCB1cGRhdGVzIHRoZSBzYW1lIHJlYWN0aXZlIHZhbHVlLiBUaGlzIG1heSBjYXVzZSByZWN1cnNpdmUgdXBkYXRlcyB3aGVuIGNvbnZlcnRlZCB0byBhbiBcXGAkZWZmZWN0XFxgLlxcbmh0dHBzOi8vc3ZlbHRlLmRldi9lL2xlZ2FjeV9yZWN1cnNpdmVfcmVhY3RpdmVfYmxvY2tgLCBib2xkLCBub3JtYWwpO1xuXHR9IGVsc2Uge1xuXHRcdGNvbnNvbGUud2FybihgaHR0cHM6Ly9zdmVsdGUuZGV2L2UvbGVnYWN5X3JlY3Vyc2l2ZV9yZWFjdGl2ZV9ibG9ja2ApO1xuXHR9XG59XG5cbi8qKlxuICogVHJpZWQgdG8gdW5tb3VudCBhIGNvbXBvbmVudCB0aGF0IHdhcyBub3QgbW91bnRlZFxuICovXG5leHBvcnQgZnVuY3Rpb24gbGlmZWN5Y2xlX2RvdWJsZV91bm1vdW50KCkge1xuXHRpZiAoREVWKSB7XG5cdFx0Y29uc29sZS53YXJuKGAlY1tzdmVsdGVdIGxpZmVjeWNsZV9kb3VibGVfdW5tb3VudFxcbiVjVHJpZWQgdG8gdW5tb3VudCBhIGNvbXBvbmVudCB0aGF0IHdhcyBub3QgbW91bnRlZFxcbmh0dHBzOi8vc3ZlbHRlLmRldi9lL2xpZmVjeWNsZV9kb3VibGVfdW5tb3VudGAsIGJvbGQsIG5vcm1hbCk7XG5cdH0gZWxzZSB7XG5cdFx0Y29uc29sZS53YXJuKGBodHRwczovL3N2ZWx0ZS5kZXYvZS9saWZlY3ljbGVfZG91YmxlX3VubW91bnRgKTtcblx0fVxufVxuXG4vKipcbiAqICVwYXJlbnQlIHBhc3NlZCBhIHZhbHVlIHRvICVjaGlsZCUgd2l0aCBgYmluZDpgLCBidXQgdGhlIHZhbHVlIGlzIG93bmVkIGJ5ICVvd25lciUuIENvbnNpZGVyIGNyZWF0aW5nIGEgYmluZGluZyBiZXR3ZWVuICVvd25lciUgYW5kICVwYXJlbnQlXG4gKiBAcGFyYW0ge3N0cmluZ30gcGFyZW50XG4gKiBAcGFyYW0ge3N0cmluZ30gY2hpbGRcbiAqIEBwYXJhbSB7c3RyaW5nfSBvd25lclxuICovXG5leHBvcnQgZnVuY3Rpb24gb3duZXJzaGlwX2ludmFsaWRfYmluZGluZyhwYXJlbnQsIGNoaWxkLCBvd25lcikge1xuXHRpZiAoREVWKSB7XG5cdFx0Y29uc29sZS53YXJuKGAlY1tzdmVsdGVdIG93bmVyc2hpcF9pbnZhbGlkX2JpbmRpbmdcXG4lYyR7cGFyZW50fSBwYXNzZWQgYSB2YWx1ZSB0byAke2NoaWxkfSB3aXRoIFxcYGJpbmQ6XFxgLCBidXQgdGhlIHZhbHVlIGlzIG93bmVkIGJ5ICR7b3duZXJ9LiBDb25zaWRlciBjcmVhdGluZyBhIGJpbmRpbmcgYmV0d2VlbiAke293bmVyfSBhbmQgJHtwYXJlbnR9XFxuaHR0cHM6Ly9zdmVsdGUuZGV2L2Uvb3duZXJzaGlwX2ludmFsaWRfYmluZGluZ2AsIGJvbGQsIG5vcm1hbCk7XG5cdH0gZWxzZSB7XG5cdFx0Y29uc29sZS53YXJuKGBodHRwczovL3N2ZWx0ZS5kZXYvZS9vd25lcnNoaXBfaW52YWxpZF9iaW5kaW5nYCk7XG5cdH1cbn1cblxuLyoqXG4gKiAlY29tcG9uZW50JSBtdXRhdGVkIGEgdmFsdWUgb3duZWQgYnkgJW93bmVyJS4gVGhpcyBpcyBzdHJvbmdseSBkaXNjb3VyYWdlZC4gQ29uc2lkZXIgcGFzc2luZyB2YWx1ZXMgdG8gY2hpbGQgY29tcG9uZW50cyB3aXRoIGBiaW5kOmAsIG9yIHVzZSBhIGNhbGxiYWNrIGluc3RlYWRcbiAqIEBwYXJhbSB7c3RyaW5nIHwgdW5kZWZpbmVkIHwgbnVsbH0gW2NvbXBvbmVudF1cbiAqIEBwYXJhbSB7c3RyaW5nIHwgdW5kZWZpbmVkIHwgbnVsbH0gW293bmVyXVxuICovXG5leHBvcnQgZnVuY3Rpb24gb3duZXJzaGlwX2ludmFsaWRfbXV0YXRpb24oY29tcG9uZW50LCBvd25lcikge1xuXHRpZiAoREVWKSB7XG5cdFx0Y29uc29sZS53YXJuKGAlY1tzdmVsdGVdIG93bmVyc2hpcF9pbnZhbGlkX211dGF0aW9uXFxuJWMke2NvbXBvbmVudCA/IGAke2NvbXBvbmVudH0gbXV0YXRlZCBhIHZhbHVlIG93bmVkIGJ5ICR7b3duZXJ9LiBUaGlzIGlzIHN0cm9uZ2x5IGRpc2NvdXJhZ2VkLiBDb25zaWRlciBwYXNzaW5nIHZhbHVlcyB0byBjaGlsZCBjb21wb25lbnRzIHdpdGggXFxgYmluZDpcXGAsIG9yIHVzZSBhIGNhbGxiYWNrIGluc3RlYWRgIDogXCJNdXRhdGluZyBhIHZhbHVlIG91dHNpZGUgdGhlIGNvbXBvbmVudCB0aGF0IGNyZWF0ZWQgaXQgaXMgc3Ryb25nbHkgZGlzY291cmFnZWQuIENvbnNpZGVyIHBhc3NpbmcgdmFsdWVzIHRvIGNoaWxkIGNvbXBvbmVudHMgd2l0aCBgYmluZDpgLCBvciB1c2UgYSBjYWxsYmFjayBpbnN0ZWFkXCJ9XFxuaHR0cHM6Ly9zdmVsdGUuZGV2L2Uvb3duZXJzaGlwX2ludmFsaWRfbXV0YXRpb25gLCBib2xkLCBub3JtYWwpO1xuXHR9IGVsc2Uge1xuXHRcdGNvbnNvbGUud2FybihgaHR0cHM6Ly9zdmVsdGUuZGV2L2Uvb3duZXJzaGlwX2ludmFsaWRfbXV0YXRpb25gKTtcblx0fVxufVxuXG4vKipcbiAqIFJlYWN0aXZlIGAkc3RhdGUoLi4uKWAgcHJveGllcyBhbmQgdGhlIHZhbHVlcyB0aGV5IHByb3h5IGhhdmUgZGlmZmVyZW50IGlkZW50aXRpZXMuIEJlY2F1c2Ugb2YgdGhpcywgY29tcGFyaXNvbnMgd2l0aCBgJW9wZXJhdG9yJWAgd2lsbCBwcm9kdWNlIHVuZXhwZWN0ZWQgcmVzdWx0c1xuICogQHBhcmFtIHtzdHJpbmd9IG9wZXJhdG9yXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzdGF0ZV9wcm94eV9lcXVhbGl0eV9taXNtYXRjaChvcGVyYXRvcikge1xuXHRpZiAoREVWKSB7XG5cdFx0Y29uc29sZS53YXJuKGAlY1tzdmVsdGVdIHN0YXRlX3Byb3h5X2VxdWFsaXR5X21pc21hdGNoXFxuJWNSZWFjdGl2ZSBcXGAkc3RhdGUoLi4uKVxcYCBwcm94aWVzIGFuZCB0aGUgdmFsdWVzIHRoZXkgcHJveHkgaGF2ZSBkaWZmZXJlbnQgaWRlbnRpdGllcy4gQmVjYXVzZSBvZiB0aGlzLCBjb21wYXJpc29ucyB3aXRoIFxcYCR7b3BlcmF0b3J9XFxgIHdpbGwgcHJvZHVjZSB1bmV4cGVjdGVkIHJlc3VsdHNcXG5odHRwczovL3N2ZWx0ZS5kZXYvZS9zdGF0ZV9wcm94eV9lcXVhbGl0eV9taXNtYXRjaGAsIGJvbGQsIG5vcm1hbCk7XG5cdH0gZWxzZSB7XG5cdFx0Y29uc29sZS53YXJuKGBodHRwczovL3N2ZWx0ZS5kZXYvZS9zdGF0ZV9wcm94eV9lcXVhbGl0eV9taXNtYXRjaGApO1xuXHR9XG59IiwiLyoqIEBpbXBvcnQgeyBUZW1wbGF0ZU5vZGUgfSBmcm9tICcjY2xpZW50JyAqL1xuXG5pbXBvcnQge1xuXHRIWURSQVRJT05fRU5ELFxuXHRIWURSQVRJT05fRVJST1IsXG5cdEhZRFJBVElPTl9TVEFSVCxcblx0SFlEUkFUSU9OX1NUQVJUX0VMU0Vcbn0gZnJvbSAnLi4vLi4vLi4vY29uc3RhbnRzLmpzJztcbmltcG9ydCAqIGFzIHcgZnJvbSAnLi4vd2FybmluZ3MuanMnO1xuaW1wb3J0IHsgZ2V0X25leHRfc2libGluZyB9IGZyb20gJy4vb3BlcmF0aW9ucy5qcyc7XG5cbi8qKlxuICogVXNlIHRoaXMgdmFyaWFibGUgdG8gZ3VhcmQgZXZlcnl0aGluZyByZWxhdGVkIHRvIGh5ZHJhdGlvbiBjb2RlIHNvIGl0IGNhbiBiZSB0cmVlc2hha2VuIG91dFxuICogaWYgdGhlIHVzZXIgZG9lc24ndCB1c2UgdGhlIGBoeWRyYXRlYCBtZXRob2QgYW5kIHRoZXNlIGNvZGUgcGF0aHMgYXJlIHRoZXJlZm9yZSBub3QgbmVlZGVkLlxuICovXG5leHBvcnQgbGV0IGh5ZHJhdGluZyA9IGZhbHNlO1xuXG4vKiogQHBhcmFtIHtib29sZWFufSB2YWx1ZSAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldF9oeWRyYXRpbmcodmFsdWUpIHtcblx0aHlkcmF0aW5nID0gdmFsdWU7XG59XG5cbi8qKlxuICogVGhlIG5vZGUgdGhhdCBpcyBjdXJyZW50bHkgYmVpbmcgaHlkcmF0ZWQuIFRoaXMgc3RhcnRzIG91dCBhcyB0aGUgZmlyc3Qgbm9kZSBpbnNpZGUgdGhlIG9wZW5pbmdcbiAqIDwhLS1bLS0+IGNvbW1lbnQsIGFuZCB1cGRhdGVzIGVhY2ggdGltZSBhIGNvbXBvbmVudCBjYWxscyBgJC5jaGlsZCguLi4pYCBvciBgJC5zaWJsaW5nKC4uLilgLlxuICogV2hlbiBlbnRlcmluZyBhIGJsb2NrIChlLmcuIGB7I2lmIC4uLn1gKSwgYGh5ZHJhdGVfbm9kZWAgaXMgdGhlIGJsb2NrIG9wZW5pbmcgY29tbWVudDsgYnkgdGhlXG4gKiB0aW1lIHdlIGxlYXZlIHRoZSBibG9jayBpdCBpcyB0aGUgY2xvc2luZyBjb21tZW50LCB3aGljaCBzZXJ2ZXMgYXMgdGhlIGJsb2NrJ3MgYW5jaG9yLlxuICogQHR5cGUge1RlbXBsYXRlTm9kZX1cbiAqL1xuZXhwb3J0IGxldCBoeWRyYXRlX25vZGU7XG5cbi8qKiBAcGFyYW0ge1RlbXBsYXRlTm9kZX0gbm9kZSAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldF9oeWRyYXRlX25vZGUobm9kZSkge1xuXHRpZiAobm9kZSA9PT0gbnVsbCkge1xuXHRcdHcuaHlkcmF0aW9uX21pc21hdGNoKCk7XG5cdFx0dGhyb3cgSFlEUkFUSU9OX0VSUk9SO1xuXHR9XG5cblx0cmV0dXJuIChoeWRyYXRlX25vZGUgPSBub2RlKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGh5ZHJhdGVfbmV4dCgpIHtcblx0cmV0dXJuIHNldF9oeWRyYXRlX25vZGUoLyoqIEB0eXBlIHtUZW1wbGF0ZU5vZGV9ICovIChnZXRfbmV4dF9zaWJsaW5nKGh5ZHJhdGVfbm9kZSkpKTtcbn1cblxuLyoqIEBwYXJhbSB7VGVtcGxhdGVOb2RlfSBub2RlICovXG5leHBvcnQgZnVuY3Rpb24gcmVzZXQobm9kZSkge1xuXHRpZiAoIWh5ZHJhdGluZykgcmV0dXJuO1xuXG5cdC8vIElmIHRoZSBub2RlIGhhcyByZW1haW5pbmcgc2libGluZ3MsIHNvbWV0aGluZyBoYXMgZ29uZSB3cm9uZ1xuXHRpZiAoZ2V0X25leHRfc2libGluZyhoeWRyYXRlX25vZGUpICE9PSBudWxsKSB7XG5cdFx0dy5oeWRyYXRpb25fbWlzbWF0Y2goKTtcblx0XHR0aHJvdyBIWURSQVRJT05fRVJST1I7XG5cdH1cblxuXHRoeWRyYXRlX25vZGUgPSBub2RlO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7SFRNTFRlbXBsYXRlRWxlbWVudH0gdGVtcGxhdGVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGh5ZHJhdGVfdGVtcGxhdGUodGVtcGxhdGUpIHtcblx0aWYgKGh5ZHJhdGluZykge1xuXHRcdC8vIEB0cy1leHBlY3QtZXJyb3IgVGVtcGxhdGVOb2RlIGRvZXNuJ3QgaW5jbHVkZSBEb2N1bWVudEZyYWdtZW50LCBidXQgaXQncyBhY3R1YWxseSBmaW5lXG5cdFx0aHlkcmF0ZV9ub2RlID0gdGVtcGxhdGUuY29udGVudDtcblx0fVxufVxuXG5leHBvcnQgZnVuY3Rpb24gbmV4dChjb3VudCA9IDEpIHtcblx0aWYgKGh5ZHJhdGluZykge1xuXHRcdHZhciBpID0gY291bnQ7XG5cdFx0dmFyIG5vZGUgPSBoeWRyYXRlX25vZGU7XG5cblx0XHR3aGlsZSAoaS0tKSB7XG5cdFx0XHRub2RlID0gLyoqIEB0eXBlIHtUZW1wbGF0ZU5vZGV9ICovIChnZXRfbmV4dF9zaWJsaW5nKG5vZGUpKTtcblx0XHR9XG5cblx0XHRoeWRyYXRlX25vZGUgPSBub2RlO1xuXHR9XG59XG5cbi8qKlxuICogUmVtb3ZlcyBhbGwgbm9kZXMgc3RhcnRpbmcgYXQgYGh5ZHJhdGVfbm9kZWAgdXAgdW50aWwgdGhlIG5leHQgaHlkcmF0aW9uIGVuZCBjb21tZW50XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVfbm9kZXMoKSB7XG5cdHZhciBkZXB0aCA9IDA7XG5cdHZhciBub2RlID0gaHlkcmF0ZV9ub2RlO1xuXG5cdHdoaWxlICh0cnVlKSB7XG5cdFx0aWYgKG5vZGUubm9kZVR5cGUgPT09IDgpIHtcblx0XHRcdHZhciBkYXRhID0gLyoqIEB0eXBlIHtDb21tZW50fSAqLyAobm9kZSkuZGF0YTtcblxuXHRcdFx0aWYgKGRhdGEgPT09IEhZRFJBVElPTl9FTkQpIHtcblx0XHRcdFx0aWYgKGRlcHRoID09PSAwKSByZXR1cm4gbm9kZTtcblx0XHRcdFx0ZGVwdGggLT0gMTtcblx0XHRcdH0gZWxzZSBpZiAoZGF0YSA9PT0gSFlEUkFUSU9OX1NUQVJUIHx8IGRhdGEgPT09IEhZRFJBVElPTl9TVEFSVF9FTFNFKSB7XG5cdFx0XHRcdGRlcHRoICs9IDE7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0dmFyIG5leHQgPSAvKiogQHR5cGUge1RlbXBsYXRlTm9kZX0gKi8gKGdldF9uZXh0X3NpYmxpbmcobm9kZSkpO1xuXHRcdG5vZGUucmVtb3ZlKCk7XG5cdFx0bm9kZSA9IG5leHQ7XG5cdH1cbn1cbiIsIi8qKiBAaW1wb3J0IHsgUHJveHlNZXRhZGF0YSB9IGZyb20gJyNjbGllbnQnICovXG4vKiogQHR5cGVkZWYge3sgZmlsZTogc3RyaW5nLCBsaW5lOiBudW1iZXIsIGNvbHVtbjogbnVtYmVyIH19IExvY2F0aW9uICovXG5cbmltcG9ydCB7IFNUQVRFX1NZTUJPTF9NRVRBREFUQSB9IGZyb20gJy4uL2NvbnN0YW50cy5qcyc7XG5pbXBvcnQgeyByZW5kZXJfZWZmZWN0LCB1c2VyX3ByZV9lZmZlY3QgfSBmcm9tICcuLi9yZWFjdGl2aXR5L2VmZmVjdHMuanMnO1xuaW1wb3J0IHsgZGV2X2N1cnJlbnRfY29tcG9uZW50X2Z1bmN0aW9uIH0gZnJvbSAnLi4vcnVudGltZS5qcyc7XG5pbXBvcnQgeyBnZXRfcHJvdG90eXBlX29mIH0gZnJvbSAnLi4vLi4vc2hhcmVkL3V0aWxzLmpzJztcbmltcG9ydCAqIGFzIHcgZnJvbSAnLi4vd2FybmluZ3MuanMnO1xuaW1wb3J0IHsgRklMRU5BTUUgfSBmcm9tICcuLi8uLi8uLi9jb25zdGFudHMuanMnO1xuXG4vKiogQHR5cGUge1JlY29yZDxzdHJpbmcsIEFycmF5PHsgc3RhcnQ6IExvY2F0aW9uLCBlbmQ6IExvY2F0aW9uLCBjb21wb25lbnQ6IEZ1bmN0aW9uIH0+Pn0gKi9cbmNvbnN0IGJvdW5kYXJpZXMgPSB7fTtcblxuY29uc3QgY2hyb21lX3BhdHRlcm4gPSAvYXQgKD86LisgXFwoKT8oLispOihcXGQrKTooXFxkKylcXCk/JC87XG5jb25zdCBmaXJlZm94X3BhdHRlcm4gPSAvQCguKyk6KFxcZCspOihcXGQrKSQvO1xuXG5mdW5jdGlvbiBnZXRfc3RhY2soKSB7XG5cdGNvbnN0IHN0YWNrID0gbmV3IEVycm9yKCkuc3RhY2s7XG5cdGlmICghc3RhY2spIHJldHVybiBudWxsO1xuXG5cdGNvbnN0IGVudHJpZXMgPSBbXTtcblxuXHRmb3IgKGNvbnN0IGxpbmUgb2Ygc3RhY2suc3BsaXQoJ1xcbicpKSB7XG5cdFx0bGV0IG1hdGNoID0gY2hyb21lX3BhdHRlcm4uZXhlYyhsaW5lKSA/PyBmaXJlZm94X3BhdHRlcm4uZXhlYyhsaW5lKTtcblxuXHRcdGlmIChtYXRjaCkge1xuXHRcdFx0ZW50cmllcy5wdXNoKHtcblx0XHRcdFx0ZmlsZTogbWF0Y2hbMV0sXG5cdFx0XHRcdGxpbmU6ICttYXRjaFsyXSxcblx0XHRcdFx0Y29sdW1uOiArbWF0Y2hbM11cblx0XHRcdH0pO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBlbnRyaWVzO1xufVxuXG4vKipcbiAqIERldGVybWluZXMgd2hpY2ggYC5zdmVsdGVgIGNvbXBvbmVudCBpcyByZXNwb25zaWJsZSBmb3IgYSBnaXZlbiBzdGF0ZSBjaGFuZ2VcbiAqIEByZXR1cm5zIHtGdW5jdGlvbiB8IG51bGx9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRfY29tcG9uZW50KCkge1xuXHQvLyBmaXJzdCA0IGxpbmVzIGFyZSBzdmVsdGUgaW50ZXJuYWxzOyBhZGp1c3QgdGhpcyBudW1iZXIgaWYgd2UgY2hhbmdlIHRoZSBpbnRlcm5hbCBjYWxsIHN0YWNrXG5cdGNvbnN0IHN0YWNrID0gZ2V0X3N0YWNrKCk/LnNsaWNlKDQpO1xuXHRpZiAoIXN0YWNrKSByZXR1cm4gbnVsbDtcblxuXHRmb3IgKGxldCBpID0gMDsgaSA8IHN0YWNrLmxlbmd0aDsgaSsrKSB7XG5cdFx0Y29uc3QgZW50cnkgPSBzdGFja1tpXTtcblx0XHRjb25zdCBtb2R1bGVzID0gYm91bmRhcmllc1tlbnRyeS5maWxlXTtcblx0XHRpZiAoIW1vZHVsZXMpIHtcblx0XHRcdC8vIElmIHRoZSBmaXJzdCBlbnRyeSBpcyBub3QgYSBjb21wb25lbnQsIHRoYXQgbWVhbnMgdGhlIG1vZGlmaWNhdGlvbiB2ZXJ5IGxpa2VseSBoYXBwZW5lZFxuXHRcdFx0Ly8gd2l0aGluIGEgLnN2ZWx0ZS5qcyBmaWxlLCBwb3NzaWJseSB0cmlnZ2VyZWQgYnkgYSBjb21wb25lbnQuIFNpbmNlIHRoZXNlIGZpbGVzIGFyZSBub3QgcGFydFxuXHRcdFx0Ly8gb2YgdGhlIGJvbmRhcmllcy9jb21wb25lbnQgY29udGV4dCBoZXVyaXN0aWMsIHdlIG5lZWQgdG8gYmFpbCBpbiB0aGlzIGNhc2UsIGVsc2Ugd2Ugd291bGRcblx0XHRcdC8vIGhhdmUgZmFsc2UgcG9zaXRpdmVzIHdoZW4gdGhlIC5zdmVsdGUudHMgZmlsZSBwcm92aWRlcyBhIHN0YXRlIGNyZWF0b3IgZnVuY3Rpb24sIGVuY2Fwc3VsYXRpbmdcblx0XHRcdC8vIHRoZSBzdGF0ZSBhbmQgaXRzIG11dGF0aW9ucywgYW5kIGlzIGJlaW5nIGNhbGxlZCBmcm9tIGEgY29tcG9uZW50IG90aGVyIHRoYW4gdGhlIG9uZSB3aG9cblx0XHRcdC8vIGNhbGxlZCB0aGUgc3RhdGUgY3JlYXRvciBmdW5jdGlvbi5cblx0XHRcdGlmIChpID09PSAwKSByZXR1cm4gbnVsbDtcblx0XHRcdGNvbnRpbnVlO1xuXHRcdH1cblxuXHRcdGZvciAoY29uc3QgbW9kdWxlIG9mIG1vZHVsZXMpIHtcblx0XHRcdGlmIChtb2R1bGUuZW5kID09IG51bGwpIHtcblx0XHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0XHR9XG5cdFx0XHRpZiAobW9kdWxlLnN0YXJ0LmxpbmUgPCBlbnRyeS5saW5lICYmIG1vZHVsZS5lbmQubGluZSA+IGVudHJ5LmxpbmUpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5jb21wb25lbnQ7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIG51bGw7XG59XG5cbmV4cG9ydCBjb25zdCBBRERfT1dORVIgPSBTeW1ib2woJ0FERF9PV05FUicpO1xuXG4vKipcbiAqIFRvZ2V0aGVyIHdpdGggYG1hcmtfbW9kdWxlX2VuZGAsIHRoaXMgZnVuY3Rpb24gZXN0YWJsaXNoZXMgdGhlIGJvdW5kYXJpZXMgb2YgYSBgLnN2ZWx0ZWAgZmlsZSxcbiAqIHN1Y2ggdGhhdCBzdWJzZXF1ZW50IGNhbGxzIHRvIGBnZXRfY29tcG9uZW50YCBjYW4gdGVsbCB1cyB3aGljaCBjb21wb25lbnQgaXMgcmVzcG9uc2libGVcbiAqIGZvciBhIGdpdmVuIHN0YXRlIGNoYW5nZVxuICovXG5leHBvcnQgZnVuY3Rpb24gbWFya19tb2R1bGVfc3RhcnQoKSB7XG5cdGNvbnN0IHN0YXJ0ID0gZ2V0X3N0YWNrKCk/LlsyXTtcblxuXHRpZiAoc3RhcnQpIHtcblx0XHQoYm91bmRhcmllc1tzdGFydC5maWxlXSA/Pz0gW10pLnB1c2goe1xuXHRcdFx0c3RhcnQsXG5cdFx0XHQvLyBAdHMtZXhwZWN0LWVycm9yXG5cdFx0XHRlbmQ6IG51bGwsXG5cdFx0XHQvLyBAdHMtZXhwZWN0LWVycm9yIHdlIGFkZCB0aGUgY29tcG9uZW50IGF0IHRoZSBlbmQsIHNpbmNlIEhNUiB3aWxsIG92ZXJ3cml0ZSB0aGUgZnVuY3Rpb25cblx0XHRcdGNvbXBvbmVudDogbnVsbFxuXHRcdH0pO1xuXHR9XG59XG5cbi8qKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY29tcG9uZW50XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtYXJrX21vZHVsZV9lbmQoY29tcG9uZW50KSB7XG5cdGNvbnN0IGVuZCA9IGdldF9zdGFjaygpPy5bMl07XG5cblx0aWYgKGVuZCkge1xuXHRcdGNvbnN0IGJvdW5kYXJpZXNfZmlsZSA9IGJvdW5kYXJpZXNbZW5kLmZpbGVdO1xuXHRcdGNvbnN0IGJvdW5kYXJ5ID0gYm91bmRhcmllc19maWxlW2JvdW5kYXJpZXNfZmlsZS5sZW5ndGggLSAxXTtcblxuXHRcdGJvdW5kYXJ5LmVuZCA9IGVuZDtcblx0XHRib3VuZGFyeS5jb21wb25lbnQgPSBjb21wb25lbnQ7XG5cdH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge2FueX0gb2JqZWN0XG4gKiBAcGFyYW0ge2FueX0gb3duZXJcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2dsb2JhbF1cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW3NraXBfd2FybmluZ11cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFkZF9vd25lcihvYmplY3QsIG93bmVyLCBnbG9iYWwgPSBmYWxzZSwgc2tpcF93YXJuaW5nID0gZmFsc2UpIHtcblx0aWYgKG9iamVjdCAmJiAhZ2xvYmFsKSB7XG5cdFx0Y29uc3QgY29tcG9uZW50ID0gZGV2X2N1cnJlbnRfY29tcG9uZW50X2Z1bmN0aW9uO1xuXHRcdGNvbnN0IG1ldGFkYXRhID0gb2JqZWN0W1NUQVRFX1NZTUJPTF9NRVRBREFUQV07XG5cdFx0aWYgKG1ldGFkYXRhICYmICFoYXNfb3duZXIobWV0YWRhdGEsIGNvbXBvbmVudCkpIHtcblx0XHRcdGxldCBvcmlnaW5hbCA9IGdldF9vd25lcihtZXRhZGF0YSk7XG5cblx0XHRcdGlmIChvd25lcltGSUxFTkFNRV0gIT09IGNvbXBvbmVudFtGSUxFTkFNRV0gJiYgIXNraXBfd2FybmluZykge1xuXHRcdFx0XHR3Lm93bmVyc2hpcF9pbnZhbGlkX2JpbmRpbmcoY29tcG9uZW50W0ZJTEVOQU1FXSwgb3duZXJbRklMRU5BTUVdLCBvcmlnaW5hbFtGSUxFTkFNRV0pO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGFkZF9vd25lcl90b19vYmplY3Qob2JqZWN0LCBvd25lciwgbmV3IFNldCgpKTtcbn1cblxuLyoqXG4gKiBAcGFyYW0geygpID0+IHVua25vd259IGdldF9vYmplY3RcbiAqIEBwYXJhbSB7YW55fSBDb21wb25lbnRcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW3NraXBfd2FybmluZ11cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFkZF9vd25lcl9lZmZlY3QoZ2V0X29iamVjdCwgQ29tcG9uZW50LCBza2lwX3dhcm5pbmcgPSBmYWxzZSkge1xuXHR1c2VyX3ByZV9lZmZlY3QoKCkgPT4ge1xuXHRcdGFkZF9vd25lcihnZXRfb2JqZWN0KCksIENvbXBvbmVudCwgZmFsc2UsIHNraXBfd2FybmluZyk7XG5cdH0pO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7UHJveHlNZXRhZGF0YSB8IG51bGx9IGZyb21cbiAqIEBwYXJhbSB7UHJveHlNZXRhZGF0YX0gdG9cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHdpZGVuX293bmVyc2hpcChmcm9tLCB0bykge1xuXHRpZiAodG8ub3duZXJzID09PSBudWxsKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0d2hpbGUgKGZyb20pIHtcblx0XHRpZiAoZnJvbS5vd25lcnMgPT09IG51bGwpIHtcblx0XHRcdHRvLm93bmVycyA9IG51bGw7XG5cdFx0XHRicmVhaztcblx0XHR9XG5cblx0XHRmb3IgKGNvbnN0IG93bmVyIG9mIGZyb20ub3duZXJzKSB7XG5cdFx0XHR0by5vd25lcnMuYWRkKG93bmVyKTtcblx0XHR9XG5cblx0XHRmcm9tID0gZnJvbS5wYXJlbnQ7XG5cdH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge2FueX0gb2JqZWN0XG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBvd25lclxuICogQHBhcmFtIHtTZXQ8YW55Pn0gc2VlblxuICovXG5mdW5jdGlvbiBhZGRfb3duZXJfdG9fb2JqZWN0KG9iamVjdCwgb3duZXIsIHNlZW4pIHtcblx0Y29uc3QgbWV0YWRhdGEgPSAvKiogQHR5cGUge1Byb3h5TWV0YWRhdGF9ICovIChvYmplY3Q/LltTVEFURV9TWU1CT0xfTUVUQURBVEFdKTtcblxuXHRpZiAobWV0YWRhdGEpIHtcblx0XHQvLyB0aGlzIGlzIGEgc3RhdGUgcHJveHksIGFkZCBvd25lciBkaXJlY3RseSwgaWYgbm90IGdsb2JhbGx5IHNoYXJlZFxuXHRcdGlmICgnb3duZXJzJyBpbiBtZXRhZGF0YSAmJiBtZXRhZGF0YS5vd25lcnMgIT0gbnVsbCkge1xuXHRcdFx0bWV0YWRhdGEub3duZXJzLmFkZChvd25lcik7XG5cdFx0fVxuXHR9IGVsc2UgaWYgKG9iamVjdCAmJiB0eXBlb2Ygb2JqZWN0ID09PSAnb2JqZWN0Jykge1xuXHRcdGlmIChzZWVuLmhhcyhvYmplY3QpKSByZXR1cm47XG5cdFx0c2Vlbi5hZGQob2JqZWN0KTtcblx0XHRpZiAoQUREX09XTkVSIGluIG9iamVjdCAmJiBvYmplY3RbQUREX09XTkVSXSkge1xuXHRcdFx0Ly8gdGhpcyBpcyBhIGNsYXNzIHdpdGggc3RhdGUgZmllbGRzLiB3ZSBwdXQgdGhpcyBpbiBhIHJlbmRlciBlZmZlY3Rcblx0XHRcdC8vIHNvIHRoYXQgaWYgc3RhdGUgaXMgcmVwbGFjZWQgKGUuZy4gYGluc3RhbmNlLm5hbWUgPSB7IGZpcnN0LCBsYXN0IH1gKVxuXHRcdFx0Ly8gdGhlIG5ldyBzdGF0ZSBpcyBhbHNvIGNvLW93bmVkIGJ5IHRoZSBjYWxsZXIgb2YgYGdldENvbnRleHRgXG5cdFx0XHRyZW5kZXJfZWZmZWN0KCgpID0+IHtcblx0XHRcdFx0b2JqZWN0W0FERF9PV05FUl0ob3duZXIpO1xuXHRcdFx0fSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHZhciBwcm90byA9IGdldF9wcm90b3R5cGVfb2Yob2JqZWN0KTtcblxuXHRcdFx0aWYgKHByb3RvID09PSBPYmplY3QucHJvdG90eXBlKSB7XG5cdFx0XHRcdC8vIHJlY3Vyc2UgdW50aWwgd2UgZmluZCBhIHN0YXRlIHByb3h5XG5cdFx0XHRcdGZvciAoY29uc3Qga2V5IGluIG9iamVjdCkge1xuXHRcdFx0XHRcdGFkZF9vd25lcl90b19vYmplY3Qob2JqZWN0W2tleV0sIG93bmVyLCBzZWVuKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIGlmIChwcm90byA9PT0gQXJyYXkucHJvdG90eXBlKSB7XG5cdFx0XHRcdC8vIHJlY3Vyc2UgdW50aWwgd2UgZmluZCBhIHN0YXRlIHByb3h5XG5cdFx0XHRcdGZvciAobGV0IGkgPSAwOyBpIDwgb2JqZWN0Lmxlbmd0aDsgaSArPSAxKSB7XG5cdFx0XHRcdFx0YWRkX293bmVyX3RvX29iamVjdChvYmplY3RbaV0sIG93bmVyLCBzZWVuKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxufVxuXG4vKipcbiAqIEBwYXJhbSB7UHJveHlNZXRhZGF0YX0gbWV0YWRhdGFcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNvbXBvbmVudFxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGhhc19vd25lcihtZXRhZGF0YSwgY29tcG9uZW50KSB7XG5cdGlmIChtZXRhZGF0YS5vd25lcnMgPT09IG51bGwpIHtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXG5cdHJldHVybiAoXG5cdFx0bWV0YWRhdGEub3duZXJzLmhhcyhjb21wb25lbnQpIHx8XG5cdFx0KG1ldGFkYXRhLnBhcmVudCAhPT0gbnVsbCAmJiBoYXNfb3duZXIobWV0YWRhdGEucGFyZW50LCBjb21wb25lbnQpKVxuXHQpO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7UHJveHlNZXRhZGF0YX0gbWV0YWRhdGFcbiAqIEByZXR1cm5zIHthbnl9XG4gKi9cbmZ1bmN0aW9uIGdldF9vd25lcihtZXRhZGF0YSkge1xuXHRyZXR1cm4gKFxuXHRcdG1ldGFkYXRhPy5vd25lcnM/LnZhbHVlcygpLm5leHQoKS52YWx1ZSA/P1xuXHRcdGdldF9vd25lcigvKiogQHR5cGUge1Byb3h5TWV0YWRhdGF9ICovIChtZXRhZGF0YS5wYXJlbnQpKVxuXHQpO1xufVxuXG5sZXQgc2tpcCA9IGZhbHNlO1xuXG4vKipcbiAqIEBwYXJhbSB7KCkgPT4gYW55fSBmblxuICovXG5leHBvcnQgZnVuY3Rpb24gc2tpcF9vd25lcnNoaXBfdmFsaWRhdGlvbihmbikge1xuXHRza2lwID0gdHJ1ZTtcblx0Zm4oKTtcblx0c2tpcCA9IGZhbHNlO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7UHJveHlNZXRhZGF0YX0gbWV0YWRhdGFcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNoZWNrX293bmVyc2hpcChtZXRhZGF0YSkge1xuXHRpZiAoc2tpcCkgcmV0dXJuO1xuXG5cdGNvbnN0IGNvbXBvbmVudCA9IGdldF9jb21wb25lbnQoKTtcblxuXHRpZiAoY29tcG9uZW50ICYmICFoYXNfb3duZXIobWV0YWRhdGEsIGNvbXBvbmVudCkpIHtcblx0XHRsZXQgb3JpZ2luYWwgPSBnZXRfb3duZXIobWV0YWRhdGEpO1xuXG5cdFx0Ly8gQHRzLWV4cGVjdC1lcnJvclxuXHRcdGlmIChvcmlnaW5hbFtGSUxFTkFNRV0gIT09IGNvbXBvbmVudFtGSUxFTkFNRV0pIHtcblx0XHRcdC8vIEB0cy1leHBlY3QtZXJyb3Jcblx0XHRcdHcub3duZXJzaGlwX2ludmFsaWRfbXV0YXRpb24oY29tcG9uZW50W0ZJTEVOQU1FXSwgb3JpZ2luYWxbRklMRU5BTUVdKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dy5vd25lcnNoaXBfaW52YWxpZF9tdXRhdGlvbigpO1xuXHRcdH1cblx0fVxufVxuIiwiLyoqIEBpbXBvcnQgeyBQcm94eU1ldGFkYXRhLCBQcm94eVN0YXRlT2JqZWN0LCBTb3VyY2UgfSBmcm9tICcjY2xpZW50JyAqL1xuaW1wb3J0IHsgREVWIH0gZnJvbSAnZXNtLWVudic7XG5pbXBvcnQgeyBnZXQsIGNvbXBvbmVudF9jb250ZXh0LCBhY3RpdmVfZWZmZWN0IH0gZnJvbSAnLi9ydW50aW1lLmpzJztcbmltcG9ydCB7XG5cdGFycmF5X3Byb3RvdHlwZSxcblx0Z2V0X2Rlc2NyaXB0b3IsXG5cdGdldF9wcm90b3R5cGVfb2YsXG5cdGlzX2FycmF5LFxuXHRvYmplY3RfcHJvdG90eXBlXG59IGZyb20gJy4uL3NoYXJlZC91dGlscy5qcyc7XG5pbXBvcnQgeyBjaGVja19vd25lcnNoaXAsIHdpZGVuX293bmVyc2hpcCB9IGZyb20gJy4vZGV2L293bmVyc2hpcC5qcyc7XG5pbXBvcnQgeyBzb3VyY2UsIHNldCB9IGZyb20gJy4vcmVhY3Rpdml0eS9zb3VyY2VzLmpzJztcbmltcG9ydCB7IFNUQVRFX1NZTUJPTCwgU1RBVEVfU1lNQk9MX01FVEFEQVRBIH0gZnJvbSAnLi9jb25zdGFudHMuanMnO1xuaW1wb3J0IHsgVU5JTklUSUFMSVpFRCB9IGZyb20gJy4uLy4uL2NvbnN0YW50cy5qcyc7XG5pbXBvcnQgKiBhcyBlIGZyb20gJy4vZXJyb3JzLmpzJztcbmltcG9ydCB7IGdldF9zdGFjayB9IGZyb20gJy4vZGV2L3RyYWNpbmcuanMnO1xuXG4vKipcbiAqIEB0ZW1wbGF0ZSBUXG4gKiBAcGFyYW0ge1R9IHZhbHVlXG4gKiBAcGFyYW0ge1Byb3h5TWV0YWRhdGEgfCBudWxsfSBbcGFyZW50XVxuICogQHBhcmFtIHtTb3VyY2U8VD59IFtwcmV2XSBkZXYgbW9kZSBvbmx5XG4gKiBAcmV0dXJucyB7VH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHByb3h5KHZhbHVlLCBwYXJlbnQgPSBudWxsLCBwcmV2KSB7XG5cdC8qKiBAdHlwZSB7RXJyb3IgfCBudWxsfSAqL1xuXHR2YXIgc3RhY2sgPSBudWxsO1xuXHRpZiAoREVWKSB7XG5cdFx0c3RhY2sgPSBnZXRfc3RhY2soJ0NyZWF0ZWRBdCcpO1xuXHR9XG5cdC8vIGlmIG5vbi1wcm94eWFibGUsIG9yIGlzIGFscmVhZHkgYSBwcm94eSwgcmV0dXJuIGB2YWx1ZWBcblx0aWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ29iamVjdCcgfHwgdmFsdWUgPT09IG51bGwgfHwgU1RBVEVfU1lNQk9MIGluIHZhbHVlKSB7XG5cdFx0cmV0dXJuIHZhbHVlO1xuXHR9XG5cblx0Y29uc3QgcHJvdG90eXBlID0gZ2V0X3Byb3RvdHlwZV9vZih2YWx1ZSk7XG5cblx0aWYgKHByb3RvdHlwZSAhPT0gb2JqZWN0X3Byb3RvdHlwZSAmJiBwcm90b3R5cGUgIT09IGFycmF5X3Byb3RvdHlwZSkge1xuXHRcdHJldHVybiB2YWx1ZTtcblx0fVxuXG5cdC8qKiBAdHlwZSB7TWFwPGFueSwgU291cmNlPGFueT4+fSAqL1xuXHR2YXIgc291cmNlcyA9IG5ldyBNYXAoKTtcblx0dmFyIGlzX3Byb3hpZWRfYXJyYXkgPSBpc19hcnJheSh2YWx1ZSk7XG5cdHZhciB2ZXJzaW9uID0gc291cmNlKDApO1xuXG5cdGlmIChpc19wcm94aWVkX2FycmF5KSB7XG5cdFx0Ly8gV2UgbmVlZCB0byBjcmVhdGUgdGhlIGxlbmd0aCBzb3VyY2UgZWFnZXJseSB0byBlbnN1cmUgdGhhdFxuXHRcdC8vIG11dGF0aW9ucyB0byB0aGUgYXJyYXkgYXJlIHByb3Blcmx5IHN5bmNlZCB3aXRoIG91ciBwcm94eVxuXHRcdHNvdXJjZXMuc2V0KCdsZW5ndGgnLCBzb3VyY2UoLyoqIEB0eXBlIHthbnlbXX0gKi8gKHZhbHVlKS5sZW5ndGgsIHN0YWNrKSk7XG5cdH1cblxuXHQvKiogQHR5cGUge1Byb3h5TWV0YWRhdGF9ICovXG5cdHZhciBtZXRhZGF0YTtcblxuXHRpZiAoREVWKSB7XG5cdFx0bWV0YWRhdGEgPSB7XG5cdFx0XHRwYXJlbnQsXG5cdFx0XHRvd25lcnM6IG51bGxcblx0XHR9O1xuXG5cdFx0aWYgKHByZXYpIHtcblx0XHRcdC8vIFJldXNlIG93bmVycyBmcm9tIHByZXZpb3VzIHN0YXRlOyBuZWNlc3NhcnkgYmVjYXVzZSByZWFzc2lnbm1lbnQgaXMgbm90IGd1YXJhbnRlZWQgdG8gaGF2ZSBjb3JyZWN0IGNvbXBvbmVudCBjb250ZXh0LlxuXHRcdFx0Ly8gSWYgbm8gcHJldmlvdXMgcHJveHkgZXhpc3RzIHdlIHBsYXkgaXQgc2FmZSBhbmQgYXNzdW1lIG93bmVybGVzcyBzdGF0ZVxuXHRcdFx0Ly8gQHRzLWV4cGVjdC1lcnJvclxuXHRcdFx0Y29uc3QgcHJldl9vd25lcnMgPSBwcmV2LnY/LltTVEFURV9TWU1CT0xfTUVUQURBVEFdPy5vd25lcnM7XG5cdFx0XHRtZXRhZGF0YS5vd25lcnMgPSBwcmV2X293bmVycyA/IG5ldyBTZXQocHJldl9vd25lcnMpIDogbnVsbDtcblx0XHR9IGVsc2Uge1xuXHRcdFx0bWV0YWRhdGEub3duZXJzID1cblx0XHRcdFx0cGFyZW50ID09PSBudWxsXG5cdFx0XHRcdFx0PyBjb21wb25lbnRfY29udGV4dCAhPT0gbnVsbFxuXHRcdFx0XHRcdFx0PyBuZXcgU2V0KFtjb21wb25lbnRfY29udGV4dC5mdW5jdGlvbl0pXG5cdFx0XHRcdFx0XHQ6IG51bGxcblx0XHRcdFx0XHQ6IG5ldyBTZXQoKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gbmV3IFByb3h5KC8qKiBAdHlwZSB7YW55fSAqLyAodmFsdWUpLCB7XG5cdFx0ZGVmaW5lUHJvcGVydHkoXywgcHJvcCwgZGVzY3JpcHRvcikge1xuXHRcdFx0aWYgKFxuXHRcdFx0XHQhKCd2YWx1ZScgaW4gZGVzY3JpcHRvcikgfHxcblx0XHRcdFx0ZGVzY3JpcHRvci5jb25maWd1cmFibGUgPT09IGZhbHNlIHx8XG5cdFx0XHRcdGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9PT0gZmFsc2UgfHxcblx0XHRcdFx0ZGVzY3JpcHRvci53cml0YWJsZSA9PT0gZmFsc2Vcblx0XHRcdCkge1xuXHRcdFx0XHQvLyB3ZSBkaXNhbGxvdyBub24tYmFzaWMgZGVzY3JpcHRvcnMsIGJlY2F1c2UgdW5sZXNzIHRoZXkgYXJlIGFwcGxpZWQgdG8gdGhlXG5cdFx0XHRcdC8vIHRhcmdldCBvYmplY3Qg4oCUIHdoaWNoIHdlIGF2b2lkLCBzbyB0aGF0IHN0YXRlIGNhbiBiZSBmb3JrZWQg4oCUIHdlIHdpbGwgcnVuXG5cdFx0XHRcdC8vIGFmb3VsIG9mIHRoZSB2YXJpb3VzIGludmFyaWFudHNcblx0XHRcdFx0Ly8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvUHJveHkvUHJveHkvZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yI2ludmFyaWFudHNcblx0XHRcdFx0ZS5zdGF0ZV9kZXNjcmlwdG9yc19maXhlZCgpO1xuXHRcdFx0fVxuXG5cdFx0XHR2YXIgcyA9IHNvdXJjZXMuZ2V0KHByb3ApO1xuXG5cdFx0XHRpZiAocyA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdHMgPSBzb3VyY2UoZGVzY3JpcHRvci52YWx1ZSwgc3RhY2spO1xuXHRcdFx0XHRzb3VyY2VzLnNldChwcm9wLCBzKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHNldChzLCBwcm94eShkZXNjcmlwdG9yLnZhbHVlLCBtZXRhZGF0YSkpO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9LFxuXG5cdFx0ZGVsZXRlUHJvcGVydHkodGFyZ2V0LCBwcm9wKSB7XG5cdFx0XHR2YXIgcyA9IHNvdXJjZXMuZ2V0KHByb3ApO1xuXG5cdFx0XHRpZiAocyA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdGlmIChwcm9wIGluIHRhcmdldCkge1xuXHRcdFx0XHRcdHNvdXJjZXMuc2V0KHByb3AsIHNvdXJjZShVTklOSVRJQUxJWkVELCBzdGFjaykpO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHQvLyBXaGVuIHdvcmtpbmcgd2l0aCBhcnJheXMsIHdlIG5lZWQgdG8gYWxzbyBlbnN1cmUgd2UgdXBkYXRlIHRoZSBsZW5ndGggd2hlbiByZW1vdmluZ1xuXHRcdFx0XHQvLyBhbiBpbmRleGVkIHByb3BlcnR5XG5cdFx0XHRcdGlmIChpc19wcm94aWVkX2FycmF5ICYmIHR5cGVvZiBwcm9wID09PSAnc3RyaW5nJykge1xuXHRcdFx0XHRcdHZhciBscyA9IC8qKiBAdHlwZSB7U291cmNlPG51bWJlcj59ICovIChzb3VyY2VzLmdldCgnbGVuZ3RoJykpO1xuXHRcdFx0XHRcdHZhciBuID0gTnVtYmVyKHByb3ApO1xuXG5cdFx0XHRcdFx0aWYgKE51bWJlci5pc0ludGVnZXIobikgJiYgbiA8IGxzLnYpIHtcblx0XHRcdFx0XHRcdHNldChscywgbik7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHNldChzLCBVTklOSVRJQUxJWkVEKTtcblx0XHRcdFx0dXBkYXRlX3ZlcnNpb24odmVyc2lvbik7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH0sXG5cblx0XHRnZXQodGFyZ2V0LCBwcm9wLCByZWNlaXZlcikge1xuXHRcdFx0aWYgKERFViAmJiBwcm9wID09PSBTVEFURV9TWU1CT0xfTUVUQURBVEEpIHtcblx0XHRcdFx0cmV0dXJuIG1ldGFkYXRhO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAocHJvcCA9PT0gU1RBVEVfU1lNQk9MKSB7XG5cdFx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHRcdH1cblxuXHRcdFx0dmFyIHMgPSBzb3VyY2VzLmdldChwcm9wKTtcblx0XHRcdHZhciBleGlzdHMgPSBwcm9wIGluIHRhcmdldDtcblxuXHRcdFx0Ly8gY3JlYXRlIGEgc291cmNlLCBidXQgb25seSBpZiBpdCdzIGFuIG93biBwcm9wZXJ0eSBhbmQgbm90IGEgcHJvdG90eXBlIHByb3BlcnR5XG5cdFx0XHRpZiAocyA9PT0gdW5kZWZpbmVkICYmICghZXhpc3RzIHx8IGdldF9kZXNjcmlwdG9yKHRhcmdldCwgcHJvcCk/LndyaXRhYmxlKSkge1xuXHRcdFx0XHRzID0gc291cmNlKHByb3h5KGV4aXN0cyA/IHRhcmdldFtwcm9wXSA6IFVOSU5JVElBTElaRUQsIG1ldGFkYXRhKSwgc3RhY2spO1xuXHRcdFx0XHRzb3VyY2VzLnNldChwcm9wLCBzKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKHMgIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHR2YXIgdiA9IGdldChzKTtcblxuXHRcdFx0XHQvLyBJbiBjYXNlIG9mIHNvbWV0aGluZyBsaWtlIGBmb28gPSBiYXIubWFwKC4uLilgLCBmb28gd291bGQgaGF2ZSBvd25lcnNoaXBcblx0XHRcdFx0Ly8gb2YgdGhlIGFycmF5IGl0c2VsZiwgd2hpbGUgdGhlIGluZGl2aWR1YWwgaXRlbXMgd291bGQgaGF2ZSBvd25lcnNoaXBcblx0XHRcdFx0Ly8gb2YgdGhlIGNvbXBvbmVudCB0aGF0IGNyZWF0ZWQgYmFyLiBUaGF0IG1lYW5zIGlmIHdlIGxhdGVyIGRvIGBmb29bMF0uYmF6ID0gNDJgLFxuXHRcdFx0XHQvLyB3ZSBjb3VsZCBnZXQgYSBmYWxzZS1wb3NpdGl2ZSBvd25lcnNoaXAgdmlvbGF0aW9uLCBzaW5jZSB0aGUgdHdvIHByb3hpZXNcblx0XHRcdFx0Ly8gYXJlIG5vdCBjb25uZWN0ZWQgdG8gZWFjaCBvdGhlciB2aWEgdGhlIHBhcmVudCBtZXRhZGF0YSByZWxhdGlvbnNoaXAuXG5cdFx0XHRcdC8vIEZvciB0aGlzIHJlYXNvbiwgd2UgbmVlZCB0byB3aWRlbiB0aGUgb3duZXJzaGlwIG9mIHRoZSBjaGlsZHJlblxuXHRcdFx0XHQvLyB1cG9uIGFjY2VzcyB3aGVuIHdlIGRldGVjdCB0aGV5IGFyZSBub3QgY29ubmVjdGVkLlxuXHRcdFx0XHRpZiAoREVWKSB7XG5cdFx0XHRcdFx0LyoqIEB0eXBlIHtQcm94eU1ldGFkYXRhIHwgdW5kZWZpbmVkfSAqL1xuXHRcdFx0XHRcdHZhciBwcm9wX21ldGFkYXRhID0gdj8uW1NUQVRFX1NZTUJPTF9NRVRBREFUQV07XG5cdFx0XHRcdFx0aWYgKHByb3BfbWV0YWRhdGEgJiYgcHJvcF9tZXRhZGF0YT8ucGFyZW50ICE9PSBtZXRhZGF0YSkge1xuXHRcdFx0XHRcdFx0d2lkZW5fb3duZXJzaGlwKG1ldGFkYXRhLCBwcm9wX21ldGFkYXRhKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gdiA9PT0gVU5JTklUSUFMSVpFRCA/IHVuZGVmaW5lZCA6IHY7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBSZWZsZWN0LmdldCh0YXJnZXQsIHByb3AsIHJlY2VpdmVyKTtcblx0XHR9LFxuXG5cdFx0Z2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwgcHJvcCkge1xuXHRcdFx0dmFyIGRlc2NyaXB0b3IgPSBSZWZsZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIHByb3ApO1xuXG5cdFx0XHRpZiAoZGVzY3JpcHRvciAmJiAndmFsdWUnIGluIGRlc2NyaXB0b3IpIHtcblx0XHRcdFx0dmFyIHMgPSBzb3VyY2VzLmdldChwcm9wKTtcblx0XHRcdFx0aWYgKHMpIGRlc2NyaXB0b3IudmFsdWUgPSBnZXQocyk7XG5cdFx0XHR9IGVsc2UgaWYgKGRlc2NyaXB0b3IgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHR2YXIgc291cmNlID0gc291cmNlcy5nZXQocHJvcCk7XG5cdFx0XHRcdHZhciB2YWx1ZSA9IHNvdXJjZT8udjtcblxuXHRcdFx0XHRpZiAoc291cmNlICE9PSB1bmRlZmluZWQgJiYgdmFsdWUgIT09IFVOSU5JVElBTElaRUQpIHtcblx0XHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblx0XHRcdFx0XHRcdHZhbHVlLFxuXHRcdFx0XHRcdFx0d3JpdGFibGU6IHRydWVcblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBkZXNjcmlwdG9yO1xuXHRcdH0sXG5cblx0XHRoYXModGFyZ2V0LCBwcm9wKSB7XG5cdFx0XHRpZiAoREVWICYmIHByb3AgPT09IFNUQVRFX1NZTUJPTF9NRVRBREFUQSkge1xuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKHByb3AgPT09IFNUQVRFX1NZTUJPTCkge1xuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH1cblxuXHRcdFx0dmFyIHMgPSBzb3VyY2VzLmdldChwcm9wKTtcblx0XHRcdHZhciBoYXMgPSAocyAhPT0gdW5kZWZpbmVkICYmIHMudiAhPT0gVU5JTklUSUFMSVpFRCkgfHwgUmVmbGVjdC5oYXModGFyZ2V0LCBwcm9wKTtcblxuXHRcdFx0aWYgKFxuXHRcdFx0XHRzICE9PSB1bmRlZmluZWQgfHxcblx0XHRcdFx0KGFjdGl2ZV9lZmZlY3QgIT09IG51bGwgJiYgKCFoYXMgfHwgZ2V0X2Rlc2NyaXB0b3IodGFyZ2V0LCBwcm9wKT8ud3JpdGFibGUpKVxuXHRcdFx0KSB7XG5cdFx0XHRcdGlmIChzID09PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0XHRzID0gc291cmNlKGhhcyA/IHByb3h5KHRhcmdldFtwcm9wXSwgbWV0YWRhdGEpIDogVU5JTklUSUFMSVpFRCwgc3RhY2spO1xuXHRcdFx0XHRcdHNvdXJjZXMuc2V0KHByb3AsIHMpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0dmFyIHZhbHVlID0gZ2V0KHMpO1xuXHRcdFx0XHRpZiAodmFsdWUgPT09IFVOSU5JVElBTElaRUQpIHtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGhhcztcblx0XHR9LFxuXG5cdFx0c2V0KHRhcmdldCwgcHJvcCwgdmFsdWUsIHJlY2VpdmVyKSB7XG5cdFx0XHR2YXIgcyA9IHNvdXJjZXMuZ2V0KHByb3ApO1xuXHRcdFx0dmFyIGhhcyA9IHByb3AgaW4gdGFyZ2V0O1xuXG5cdFx0XHQvLyB2YXJpYWJsZS5sZW5ndGggPSB2YWx1ZSAtPiBjbGVhciBhbGwgc2lnbmFscyB3aXRoIGluZGV4ID49IHZhbHVlXG5cdFx0XHRpZiAoaXNfcHJveGllZF9hcnJheSAmJiBwcm9wID09PSAnbGVuZ3RoJykge1xuXHRcdFx0XHRmb3IgKHZhciBpID0gdmFsdWU7IGkgPCAvKiogQHR5cGUge1NvdXJjZTxudW1iZXI+fSAqLyAocykudjsgaSArPSAxKSB7XG5cdFx0XHRcdFx0dmFyIG90aGVyX3MgPSBzb3VyY2VzLmdldChpICsgJycpO1xuXHRcdFx0XHRcdGlmIChvdGhlcl9zICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0XHRcdHNldChvdGhlcl9zLCBVTklOSVRJQUxJWkVEKTtcblx0XHRcdFx0XHR9IGVsc2UgaWYgKGkgaW4gdGFyZ2V0KSB7XG5cdFx0XHRcdFx0XHQvLyBJZiB0aGUgaXRlbSBleGlzdHMgaW4gdGhlIG9yaWdpbmFsLCB3ZSBuZWVkIHRvIGNyZWF0ZSBhIHVuaW5pdGlhbGl6ZWQgc291cmNlLFxuXHRcdFx0XHRcdFx0Ly8gZWxzZSBhIGxhdGVyIHJlYWQgb2YgdGhlIHByb3BlcnR5IHdvdWxkIHJlc3VsdCBpbiBhIHNvdXJjZSBiZWluZyBjcmVhdGVkIHdpdGhcblx0XHRcdFx0XHRcdC8vIHRoZSB2YWx1ZSBvZiB0aGUgb3JpZ2luYWwgaXRlbSBhdCB0aGF0IGluZGV4LlxuXHRcdFx0XHRcdFx0b3RoZXJfcyA9IHNvdXJjZShVTklOSVRJQUxJWkVELCBzdGFjayk7XG5cdFx0XHRcdFx0XHRzb3VyY2VzLnNldChpICsgJycsIG90aGVyX3MpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiB3ZSBoYXZlbid0IHlldCBjcmVhdGVkIGEgc291cmNlIGZvciB0aGlzIHByb3BlcnR5LCB3ZSBuZWVkIHRvIGVuc3VyZVxuXHRcdFx0Ly8gd2UgZG8gc28gb3RoZXJ3aXNlIGlmIHdlIHJlYWQgaXQgbGF0ZXIsIHRoZW4gdGhlIHdyaXRlIHdvbid0IGJlIHRyYWNrZWQgYW5kXG5cdFx0XHQvLyB0aGUgaGV1cmlzdGljcyBvZiBlZmZlY3RzIHdpbGwgYmUgZGlmZmVyZW50IHZzIGlmIHdlIGhhZCByZWFkIHRoZSBwcm94aWVkXG5cdFx0XHQvLyBvYmplY3QgcHJvcGVydHkgYmVmb3JlIHdyaXRpbmcgdG8gdGhhdCBwcm9wZXJ0eS5cblx0XHRcdGlmIChzID09PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0aWYgKCFoYXMgfHwgZ2V0X2Rlc2NyaXB0b3IodGFyZ2V0LCBwcm9wKT8ud3JpdGFibGUpIHtcblx0XHRcdFx0XHRzID0gc291cmNlKHVuZGVmaW5lZCwgc3RhY2spO1xuXHRcdFx0XHRcdHNldChzLCBwcm94eSh2YWx1ZSwgbWV0YWRhdGEpKTtcblx0XHRcdFx0XHRzb3VyY2VzLnNldChwcm9wLCBzKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aGFzID0gcy52ICE9PSBVTklOSVRJQUxJWkVEO1xuXHRcdFx0XHRzZXQocywgcHJveHkodmFsdWUsIG1ldGFkYXRhKSk7XG5cdFx0XHR9XG5cblx0XHRcdGlmIChERVYpIHtcblx0XHRcdFx0LyoqIEB0eXBlIHtQcm94eU1ldGFkYXRhIHwgdW5kZWZpbmVkfSAqL1xuXHRcdFx0XHR2YXIgcHJvcF9tZXRhZGF0YSA9IHZhbHVlPy5bU1RBVEVfU1lNQk9MX01FVEFEQVRBXTtcblx0XHRcdFx0aWYgKHByb3BfbWV0YWRhdGEgJiYgcHJvcF9tZXRhZGF0YT8ucGFyZW50ICE9PSBtZXRhZGF0YSkge1xuXHRcdFx0XHRcdHdpZGVuX293bmVyc2hpcChtZXRhZGF0YSwgcHJvcF9tZXRhZGF0YSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0Y2hlY2tfb3duZXJzaGlwKG1ldGFkYXRhKTtcblx0XHRcdH1cblxuXHRcdFx0dmFyIGRlc2NyaXB0b3IgPSBSZWZsZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIHByb3ApO1xuXG5cdFx0XHQvLyBTZXQgdGhlIG5ldyB2YWx1ZSBiZWZvcmUgdXBkYXRpbmcgYW55IHNpZ25hbHMgc28gdGhhdCBhbnkgbGlzdGVuZXJzIGdldCB0aGUgbmV3IHZhbHVlXG5cdFx0XHRpZiAoZGVzY3JpcHRvcj8uc2V0KSB7XG5cdFx0XHRcdGRlc2NyaXB0b3Iuc2V0LmNhbGwocmVjZWl2ZXIsIHZhbHVlKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCFoYXMpIHtcblx0XHRcdFx0Ly8gSWYgd2UgaGF2ZSBtdXRhdGVkIGFuIGFycmF5IGRpcmVjdGx5LCB3ZSBtaWdodCBuZWVkIHRvXG5cdFx0XHRcdC8vIHNpZ25hbCB0aGF0IGxlbmd0aCBoYXMgYWxzbyBjaGFuZ2VkLiBEbyBpdCBiZWZvcmUgdXBkYXRpbmcgbWV0YWRhdGFcblx0XHRcdFx0Ly8gdG8gZW5zdXJlIHRoYXQgaXRlcmF0aW5nIG92ZXIgdGhlIGFycmF5IGFzIGEgcmVzdWx0IG9mIGEgbWV0YWRhdGEgdXBkYXRlXG5cdFx0XHRcdC8vIHdpbGwgbm90IGNhdXNlIHRoZSBsZW5ndGggdG8gYmUgb3V0IG9mIHN5bmMuXG5cdFx0XHRcdGlmIChpc19wcm94aWVkX2FycmF5ICYmIHR5cGVvZiBwcm9wID09PSAnc3RyaW5nJykge1xuXHRcdFx0XHRcdHZhciBscyA9IC8qKiBAdHlwZSB7U291cmNlPG51bWJlcj59ICovIChzb3VyY2VzLmdldCgnbGVuZ3RoJykpO1xuXHRcdFx0XHRcdHZhciBuID0gTnVtYmVyKHByb3ApO1xuXG5cdFx0XHRcdFx0aWYgKE51bWJlci5pc0ludGVnZXIobikgJiYgbiA+PSBscy52KSB7XG5cdFx0XHRcdFx0XHRzZXQobHMsIG4gKyAxKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHR1cGRhdGVfdmVyc2lvbih2ZXJzaW9uKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fSxcblxuXHRcdG93bktleXModGFyZ2V0KSB7XG5cdFx0XHRnZXQodmVyc2lvbik7XG5cblx0XHRcdHZhciBvd25fa2V5cyA9IFJlZmxlY3Qub3duS2V5cyh0YXJnZXQpLmZpbHRlcigoa2V5KSA9PiB7XG5cdFx0XHRcdHZhciBzb3VyY2UgPSBzb3VyY2VzLmdldChrZXkpO1xuXHRcdFx0XHRyZXR1cm4gc291cmNlID09PSB1bmRlZmluZWQgfHwgc291cmNlLnYgIT09IFVOSU5JVElBTElaRUQ7XG5cdFx0XHR9KTtcblxuXHRcdFx0Zm9yICh2YXIgW2tleSwgc291cmNlXSBvZiBzb3VyY2VzKSB7XG5cdFx0XHRcdGlmIChzb3VyY2UudiAhPT0gVU5JTklUSUFMSVpFRCAmJiAhKGtleSBpbiB0YXJnZXQpKSB7XG5cdFx0XHRcdFx0b3duX2tleXMucHVzaChrZXkpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBvd25fa2V5cztcblx0XHR9LFxuXG5cdFx0c2V0UHJvdG90eXBlT2YoKSB7XG5cdFx0XHRlLnN0YXRlX3Byb3RvdHlwZV9maXhlZCgpO1xuXHRcdH1cblx0fSk7XG59XG5cbi8qKlxuICogQHBhcmFtIHtTb3VyY2U8bnVtYmVyPn0gc2lnbmFsXG4gKiBAcGFyYW0gezEgfCAtMX0gW2RdXG4gKi9cbmZ1bmN0aW9uIHVwZGF0ZV92ZXJzaW9uKHNpZ25hbCwgZCA9IDEpIHtcblx0c2V0KHNpZ25hbCwgc2lnbmFsLnYgKyBkKTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge2FueX0gdmFsdWVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldF9wcm94aWVkX3ZhbHVlKHZhbHVlKSB7XG5cdGlmICh2YWx1ZSAhPT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIFNUQVRFX1NZTUJPTCBpbiB2YWx1ZSkge1xuXHRcdHJldHVybiB2YWx1ZVtTVEFURV9TWU1CT0xdO1xuXHR9XG5cblx0cmV0dXJuIHZhbHVlO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7YW55fSBhXG4gKiBAcGFyYW0ge2FueX0gYlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXMoYSwgYikge1xuXHRyZXR1cm4gT2JqZWN0LmlzKGdldF9wcm94aWVkX3ZhbHVlKGEpLCBnZXRfcHJveGllZF92YWx1ZShiKSk7XG59XG4iLCJpbXBvcnQgKiBhcyB3IGZyb20gJy4uL3dhcm5pbmdzLmpzJztcbmltcG9ydCB7IGdldF9wcm94aWVkX3ZhbHVlIH0gZnJvbSAnLi4vcHJveHkuanMnO1xuXG5leHBvcnQgZnVuY3Rpb24gaW5pdF9hcnJheV9wcm90b3R5cGVfd2FybmluZ3MoKSB7XG5cdGNvbnN0IGFycmF5X3Byb3RvdHlwZSA9IEFycmF5LnByb3RvdHlwZTtcblx0Ly8gVGhlIFJFUEwgZW5kcyB1cCBoZXJlIG92ZXIgYW5kIG92ZXIsIGFuZCB0aGlzIHByZXZlbnRzIGl0IGZyb20gYWRkaW5nIG1vcmUgYW5kIG1vcmUgcGF0Y2hlc1xuXHQvLyBvZiB0aGUgc2FtZSBraW5kIHRvIHRoZSBwcm90b3R5cGUsIHdoaWNoIHdvdWxkIHNsb3cgZG93biBldmVyeXRoaW5nIG92ZXIgdGltZS5cblx0Ly8gQHRzLWV4cGVjdC1lcnJvclxuXHRjb25zdCBjbGVhbnVwID0gQXJyYXkuX19zdmVsdGVfY2xlYW51cDtcblx0aWYgKGNsZWFudXApIHtcblx0XHRjbGVhbnVwKCk7XG5cdH1cblxuXHRjb25zdCB7IGluZGV4T2YsIGxhc3RJbmRleE9mLCBpbmNsdWRlcyB9ID0gYXJyYXlfcHJvdG90eXBlO1xuXG5cdGFycmF5X3Byb3RvdHlwZS5pbmRleE9mID0gZnVuY3Rpb24gKGl0ZW0sIGZyb21faW5kZXgpIHtcblx0XHRjb25zdCBpbmRleCA9IGluZGV4T2YuY2FsbCh0aGlzLCBpdGVtLCBmcm9tX2luZGV4KTtcblxuXHRcdGlmIChpbmRleCA9PT0gLTEpIHtcblx0XHRcdGNvbnN0IHRlc3QgPSBpbmRleE9mLmNhbGwoZ2V0X3Byb3hpZWRfdmFsdWUodGhpcyksIGdldF9wcm94aWVkX3ZhbHVlKGl0ZW0pLCBmcm9tX2luZGV4KTtcblxuXHRcdFx0aWYgKHRlc3QgIT09IC0xKSB7XG5cdFx0XHRcdHcuc3RhdGVfcHJveHlfZXF1YWxpdHlfbWlzbWF0Y2goJ2FycmF5LmluZGV4T2YoLi4uKScpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBpbmRleDtcblx0fTtcblxuXHRhcnJheV9wcm90b3R5cGUubGFzdEluZGV4T2YgPSBmdW5jdGlvbiAoaXRlbSwgZnJvbV9pbmRleCkge1xuXHRcdC8vIHdlIG5lZWQgdG8gc3BlY2lmeSB0aGlzLmxlbmd0aCAtIDEgYmVjYXVzZSBpdCdzIHByb2JhYmx5IHVzaW5nIHNvbWV0aGluZyBsaWtlXG5cdFx0Ly8gYGFyZ3VtZW50c2AgaW5zaWRlIHNvIHBhc3NpbmcgdW5kZWZpbmVkIGlzIGRpZmZlcmVudCBmcm9tIG5vdCBwYXNzaW5nIGFueXRoaW5nXG5cdFx0Y29uc3QgaW5kZXggPSBsYXN0SW5kZXhPZi5jYWxsKHRoaXMsIGl0ZW0sIGZyb21faW5kZXggPz8gdGhpcy5sZW5ndGggLSAxKTtcblxuXHRcdGlmIChpbmRleCA9PT0gLTEpIHtcblx0XHRcdC8vIHdlIG5lZWQgdG8gc3BlY2lmeSB0aGlzLmxlbmd0aCAtIDEgYmVjYXVzZSBpdCdzIHByb2JhYmx5IHVzaW5nIHNvbWV0aGluZyBsaWtlXG5cdFx0XHQvLyBgYXJndW1lbnRzYCBpbnNpZGUgc28gcGFzc2luZyB1bmRlZmluZWQgaXMgZGlmZmVyZW50IGZyb20gbm90IHBhc3NpbmcgYW55dGhpbmdcblx0XHRcdGNvbnN0IHRlc3QgPSBsYXN0SW5kZXhPZi5jYWxsKFxuXHRcdFx0XHRnZXRfcHJveGllZF92YWx1ZSh0aGlzKSxcblx0XHRcdFx0Z2V0X3Byb3hpZWRfdmFsdWUoaXRlbSksXG5cdFx0XHRcdGZyb21faW5kZXggPz8gdGhpcy5sZW5ndGggLSAxXG5cdFx0XHQpO1xuXG5cdFx0XHRpZiAodGVzdCAhPT0gLTEpIHtcblx0XHRcdFx0dy5zdGF0ZV9wcm94eV9lcXVhbGl0eV9taXNtYXRjaCgnYXJyYXkubGFzdEluZGV4T2YoLi4uKScpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBpbmRleDtcblx0fTtcblxuXHRhcnJheV9wcm90b3R5cGUuaW5jbHVkZXMgPSBmdW5jdGlvbiAoaXRlbSwgZnJvbV9pbmRleCkge1xuXHRcdGNvbnN0IGhhcyA9IGluY2x1ZGVzLmNhbGwodGhpcywgaXRlbSwgZnJvbV9pbmRleCk7XG5cblx0XHRpZiAoIWhhcykge1xuXHRcdFx0Y29uc3QgdGVzdCA9IGluY2x1ZGVzLmNhbGwoZ2V0X3Byb3hpZWRfdmFsdWUodGhpcyksIGdldF9wcm94aWVkX3ZhbHVlKGl0ZW0pLCBmcm9tX2luZGV4KTtcblxuXHRcdFx0aWYgKHRlc3QpIHtcblx0XHRcdFx0dy5zdGF0ZV9wcm94eV9lcXVhbGl0eV9taXNtYXRjaCgnYXJyYXkuaW5jbHVkZXMoLi4uKScpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBoYXM7XG5cdH07XG5cblx0Ly8gQHRzLWV4cGVjdC1lcnJvclxuXHRBcnJheS5fX3N2ZWx0ZV9jbGVhbnVwID0gKCkgPT4ge1xuXHRcdGFycmF5X3Byb3RvdHlwZS5pbmRleE9mID0gaW5kZXhPZjtcblx0XHRhcnJheV9wcm90b3R5cGUubGFzdEluZGV4T2YgPSBsYXN0SW5kZXhPZjtcblx0XHRhcnJheV9wcm90b3R5cGUuaW5jbHVkZXMgPSBpbmNsdWRlcztcblx0fTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge2FueX0gYVxuICogQHBhcmFtIHthbnl9IGJcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gZXF1YWxcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5leHBvcnQgZnVuY3Rpb24gc3RyaWN0X2VxdWFscyhhLCBiLCBlcXVhbCA9IHRydWUpIHtcblx0Ly8gdHJ5LWNhdGNoIG5lZWRlZCBiZWNhdXNlIHRoaXMgdHJpZXMgdG8gcmVhZCBwcm9wZXJ0aWVzIG9mIGBhYCBhbmQgYGJgLFxuXHQvLyB3aGljaCBjb3VsZCBiZSBkaXNhbGxvd2VkIGZvciBleGFtcGxlIGluIGEgc2VjdXJlIGNvbnRleHRcblx0dHJ5IHtcblx0XHRpZiAoKGEgPT09IGIpICE9PSAoZ2V0X3Byb3hpZWRfdmFsdWUoYSkgPT09IGdldF9wcm94aWVkX3ZhbHVlKGIpKSkge1xuXHRcdFx0dy5zdGF0ZV9wcm94eV9lcXVhbGl0eV9taXNtYXRjaChlcXVhbCA/ICc9PT0nIDogJyE9PScpO1xuXHRcdH1cblx0fSBjYXRjaCB7fVxuXG5cdHJldHVybiAoYSA9PT0gYikgPT09IGVxdWFsO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7YW55fSBhXG4gKiBAcGFyYW0ge2FueX0gYlxuICogQHBhcmFtIHtib29sZWFufSBlcXVhbFxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBlcXVhbHMoYSwgYiwgZXF1YWwgPSB0cnVlKSB7XG5cdGlmICgoYSA9PSBiKSAhPT0gKGdldF9wcm94aWVkX3ZhbHVlKGEpID09IGdldF9wcm94aWVkX3ZhbHVlKGIpKSkge1xuXHRcdHcuc3RhdGVfcHJveHlfZXF1YWxpdHlfbWlzbWF0Y2goZXF1YWwgPyAnPT0nIDogJyE9Jyk7XG5cdH1cblxuXHRyZXR1cm4gKGEgPT0gYikgPT09IGVxdWFsO1xufVxuIiwiLyoqIEBpbXBvcnQgeyBUZW1wbGF0ZU5vZGUgfSBmcm9tICcjY2xpZW50JyAqL1xuaW1wb3J0IHsgaHlkcmF0ZV9ub2RlLCBoeWRyYXRpbmcsIHNldF9oeWRyYXRlX25vZGUgfSBmcm9tICcuL2h5ZHJhdGlvbi5qcyc7XG5pbXBvcnQgeyBERVYgfSBmcm9tICdlc20tZW52JztcbmltcG9ydCB7IGluaXRfYXJyYXlfcHJvdG90eXBlX3dhcm5pbmdzIH0gZnJvbSAnLi4vZGV2L2VxdWFsaXR5LmpzJztcbmltcG9ydCB7IGdldF9kZXNjcmlwdG9yIH0gZnJvbSAnLi4vLi4vc2hhcmVkL3V0aWxzLmpzJztcblxuLy8gZXhwb3J0IHRoZXNlIGZvciByZWZlcmVuY2UgaW4gdGhlIGNvbXBpbGVkIGNvZGUsIG1ha2luZyBnbG9iYWwgbmFtZSBkZWR1cGxpY2F0aW9uIHVubmVjZXNzYXJ5XG4vKiogQHR5cGUge1dpbmRvd30gKi9cbmV4cG9ydCB2YXIgJHdpbmRvdztcblxuLyoqIEB0eXBlIHtEb2N1bWVudH0gKi9cbmV4cG9ydCB2YXIgJGRvY3VtZW50O1xuXG4vKiogQHR5cGUgeygpID0+IE5vZGUgfCBudWxsfSAqL1xudmFyIGZpcnN0X2NoaWxkX2dldHRlcjtcbi8qKiBAdHlwZSB7KCkgPT4gTm9kZSB8IG51bGx9ICovXG52YXIgbmV4dF9zaWJsaW5nX2dldHRlcjtcblxuLyoqXG4gKiBJbml0aWFsaXplIHRoZXNlIGxhemlseSB0byBhdm9pZCBpc3N1ZXMgd2hlbiB1c2luZyB0aGUgcnVudGltZSBpbiBhIHNlcnZlciBjb250ZXh0XG4gKiB3aGVyZSB0aGVzZSBnbG9iYWxzIGFyZSBub3QgYXZhaWxhYmxlIHdoaWxlIGF2b2lkaW5nIGEgc2VwYXJhdGUgc2VydmVyIGVudHJ5IHBvaW50XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpbml0X29wZXJhdGlvbnMoKSB7XG5cdGlmICgkd2luZG93ICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHQkd2luZG93ID0gd2luZG93O1xuXHQkZG9jdW1lbnQgPSBkb2N1bWVudDtcblxuXHR2YXIgZWxlbWVudF9wcm90b3R5cGUgPSBFbGVtZW50LnByb3RvdHlwZTtcblx0dmFyIG5vZGVfcHJvdG90eXBlID0gTm9kZS5wcm90b3R5cGU7XG5cblx0Ly8gQHRzLWlnbm9yZVxuXHRmaXJzdF9jaGlsZF9nZXR0ZXIgPSBnZXRfZGVzY3JpcHRvcihub2RlX3Byb3RvdHlwZSwgJ2ZpcnN0Q2hpbGQnKS5nZXQ7XG5cdC8vIEB0cy1pZ25vcmVcblx0bmV4dF9zaWJsaW5nX2dldHRlciA9IGdldF9kZXNjcmlwdG9yKG5vZGVfcHJvdG90eXBlLCAnbmV4dFNpYmxpbmcnKS5nZXQ7XG5cblx0Ly8gdGhlIGZvbGxvd2luZyBhc3NpZ25tZW50cyBpbXByb3ZlIHBlcmYgb2YgbG9va3VwcyBvbiBET00gbm9kZXNcblx0Ly8gQHRzLWV4cGVjdC1lcnJvclxuXHRlbGVtZW50X3Byb3RvdHlwZS5fX2NsaWNrID0gdW5kZWZpbmVkO1xuXHQvLyBAdHMtZXhwZWN0LWVycm9yXG5cdGVsZW1lbnRfcHJvdG90eXBlLl9fY2xhc3NOYW1lID0gJyc7XG5cdC8vIEB0cy1leHBlY3QtZXJyb3Jcblx0ZWxlbWVudF9wcm90b3R5cGUuX19hdHRyaWJ1dGVzID0gbnVsbDtcblx0Ly8gQHRzLWV4cGVjdC1lcnJvclxuXHRlbGVtZW50X3Byb3RvdHlwZS5fX3N0eWxlcyA9IG51bGw7XG5cdC8vIEB0cy1leHBlY3QtZXJyb3Jcblx0ZWxlbWVudF9wcm90b3R5cGUuX19lID0gdW5kZWZpbmVkO1xuXG5cdC8vIEB0cy1leHBlY3QtZXJyb3Jcblx0VGV4dC5wcm90b3R5cGUuX190ID0gdW5kZWZpbmVkO1xuXG5cdGlmIChERVYpIHtcblx0XHQvLyBAdHMtZXhwZWN0LWVycm9yXG5cdFx0ZWxlbWVudF9wcm90b3R5cGUuX19zdmVsdGVfbWV0YSA9IG51bGw7XG5cblx0XHRpbml0X2FycmF5X3Byb3RvdHlwZV93YXJuaW5ncygpO1xuXHR9XG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcmV0dXJucyB7VGV4dH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZV90ZXh0KHZhbHVlID0gJycpIHtcblx0cmV0dXJuIGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHZhbHVlKTtcbn1cblxuLyoqXG4gKiBAdGVtcGxhdGUge05vZGV9IE5cbiAqIEBwYXJhbSB7Tn0gbm9kZVxuICogQHJldHVybnMge05vZGUgfCBudWxsfVxuICovXG4vKkBfX05PX1NJREVfRUZGRUNUU19fKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRfZmlyc3RfY2hpbGQobm9kZSkge1xuXHRyZXR1cm4gZmlyc3RfY2hpbGRfZ2V0dGVyLmNhbGwobm9kZSk7XG59XG5cbi8qKlxuICogQHRlbXBsYXRlIHtOb2RlfSBOXG4gKiBAcGFyYW0ge059IG5vZGVcbiAqIEByZXR1cm5zIHtOb2RlIHwgbnVsbH1cbiAqL1xuLypAX19OT19TSURFX0VGRkVDVFNfXyovXG5leHBvcnQgZnVuY3Rpb24gZ2V0X25leHRfc2libGluZyhub2RlKSB7XG5cdHJldHVybiBuZXh0X3NpYmxpbmdfZ2V0dGVyLmNhbGwobm9kZSk7XG59XG5cbi8qKlxuICogRG9uJ3QgbWFyayB0aGlzIGFzIHNpZGUtZWZmZWN0LWZyZWUsIGh5ZHJhdGlvbiBuZWVkcyB0byB3YWxrIGFsbCBub2Rlc1xuICogQHRlbXBsYXRlIHtOb2RlfSBOXG4gKiBAcGFyYW0ge059IG5vZGVcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gaXNfdGV4dFxuICogQHJldHVybnMge05vZGUgfCBudWxsfVxuICovXG5leHBvcnQgZnVuY3Rpb24gY2hpbGQobm9kZSwgaXNfdGV4dCkge1xuXHRpZiAoIWh5ZHJhdGluZykge1xuXHRcdHJldHVybiBnZXRfZmlyc3RfY2hpbGQobm9kZSk7XG5cdH1cblxuXHR2YXIgY2hpbGQgPSAvKiogQHR5cGUge1RlbXBsYXRlTm9kZX0gKi8gKGdldF9maXJzdF9jaGlsZChoeWRyYXRlX25vZGUpKTtcblxuXHQvLyBDaGlsZCBjYW4gYmUgbnVsbCBpZiB3ZSBoYXZlIGFuIGVsZW1lbnQgd2l0aCBhIHNpbmdsZSBjaGlsZCwgbGlrZSBgPHA+e3RleHR9PC9wPmAsIHdoZXJlIGB0ZXh0YCBpcyBlbXB0eVxuXHRpZiAoY2hpbGQgPT09IG51bGwpIHtcblx0XHRjaGlsZCA9IGh5ZHJhdGVfbm9kZS5hcHBlbmRDaGlsZChjcmVhdGVfdGV4dCgpKTtcblx0fSBlbHNlIGlmIChpc190ZXh0ICYmIGNoaWxkLm5vZGVUeXBlICE9PSAzKSB7XG5cdFx0dmFyIHRleHQgPSBjcmVhdGVfdGV4dCgpO1xuXHRcdGNoaWxkPy5iZWZvcmUodGV4dCk7XG5cdFx0c2V0X2h5ZHJhdGVfbm9kZSh0ZXh0KTtcblx0XHRyZXR1cm4gdGV4dDtcblx0fVxuXG5cdHNldF9oeWRyYXRlX25vZGUoY2hpbGQpO1xuXHRyZXR1cm4gY2hpbGQ7XG59XG5cbi8qKlxuICogRG9uJ3QgbWFyayB0aGlzIGFzIHNpZGUtZWZmZWN0LWZyZWUsIGh5ZHJhdGlvbiBuZWVkcyB0byB3YWxrIGFsbCBub2Rlc1xuICogQHBhcmFtIHtEb2N1bWVudEZyYWdtZW50IHwgVGVtcGxhdGVOb2RlW119IGZyYWdtZW50XG4gKiBAcGFyYW0ge2Jvb2xlYW59IGlzX3RleHRcbiAqIEByZXR1cm5zIHtOb2RlIHwgbnVsbH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZpcnN0X2NoaWxkKGZyYWdtZW50LCBpc190ZXh0KSB7XG5cdGlmICghaHlkcmF0aW5nKSB7XG5cdFx0Ly8gd2hlbiBub3QgaHlkcmF0aW5nLCBgZnJhZ21lbnRgIGlzIGEgYERvY3VtZW50RnJhZ21lbnRgICh0aGUgcmVzdWx0IG9mIGNhbGxpbmcgYG9wZW5fZnJhZ2ApXG5cdFx0dmFyIGZpcnN0ID0gLyoqIEB0eXBlIHtEb2N1bWVudEZyYWdtZW50fSAqLyAoZ2V0X2ZpcnN0X2NoaWxkKC8qKiBAdHlwZSB7Tm9kZX0gKi8gKGZyYWdtZW50KSkpO1xuXG5cdFx0Ly8gVE9ETyBwcmV2ZW50IHVzZXIgY29tbWVudHMgd2l0aCB0aGUgZW1wdHkgc3RyaW5nIHdoZW4gcHJlc2VydmVDb21tZW50cyBpcyB0cnVlXG5cdFx0aWYgKGZpcnN0IGluc3RhbmNlb2YgQ29tbWVudCAmJiBmaXJzdC5kYXRhID09PSAnJykgcmV0dXJuIGdldF9uZXh0X3NpYmxpbmcoZmlyc3QpO1xuXG5cdFx0cmV0dXJuIGZpcnN0O1xuXHR9XG5cblx0Ly8gaWYgYW4ge2V4cHJlc3Npb259IGlzIGVtcHR5IGR1cmluZyBTU1IsIHRoZXJlIG1pZ2h0IGJlIG5vXG5cdC8vIHRleHQgbm9kZSB0byBoeWRyYXRlIOKAlCB3ZSBtdXN0IHRoZXJlZm9yZSBjcmVhdGUgb25lXG5cdGlmIChpc190ZXh0ICYmIGh5ZHJhdGVfbm9kZT8ubm9kZVR5cGUgIT09IDMpIHtcblx0XHR2YXIgdGV4dCA9IGNyZWF0ZV90ZXh0KCk7XG5cblx0XHRoeWRyYXRlX25vZGU/LmJlZm9yZSh0ZXh0KTtcblx0XHRzZXRfaHlkcmF0ZV9ub2RlKHRleHQpO1xuXHRcdHJldHVybiB0ZXh0O1xuXHR9XG5cblx0cmV0dXJuIGh5ZHJhdGVfbm9kZTtcbn1cblxuLyoqXG4gKiBEb24ndCBtYXJrIHRoaXMgYXMgc2lkZS1lZmZlY3QtZnJlZSwgaHlkcmF0aW9uIG5lZWRzIHRvIHdhbGsgYWxsIG5vZGVzXG4gKiBAcGFyYW0ge1RlbXBsYXRlTm9kZX0gbm9kZVxuICogQHBhcmFtIHtudW1iZXJ9IGNvdW50XG4gKiBAcGFyYW0ge2Jvb2xlYW59IGlzX3RleHRcbiAqIEByZXR1cm5zIHtOb2RlIHwgbnVsbH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNpYmxpbmcobm9kZSwgY291bnQgPSAxLCBpc190ZXh0ID0gZmFsc2UpIHtcblx0bGV0IG5leHRfc2libGluZyA9IGh5ZHJhdGluZyA/IGh5ZHJhdGVfbm9kZSA6IG5vZGU7XG5cdHZhciBsYXN0X3NpYmxpbmc7XG5cblx0d2hpbGUgKGNvdW50LS0pIHtcblx0XHRsYXN0X3NpYmxpbmcgPSBuZXh0X3NpYmxpbmc7XG5cdFx0bmV4dF9zaWJsaW5nID0gLyoqIEB0eXBlIHtUZW1wbGF0ZU5vZGV9ICovIChnZXRfbmV4dF9zaWJsaW5nKG5leHRfc2libGluZykpO1xuXHR9XG5cblx0aWYgKCFoeWRyYXRpbmcpIHtcblx0XHRyZXR1cm4gbmV4dF9zaWJsaW5nO1xuXHR9XG5cblx0dmFyIHR5cGUgPSBuZXh0X3NpYmxpbmc/Lm5vZGVUeXBlO1xuXG5cdC8vIGlmIGEgc2libGluZyB7ZXhwcmVzc2lvbn0gaXMgZW1wdHkgZHVyaW5nIFNTUiwgdGhlcmUgbWlnaHQgYmUgbm9cblx0Ly8gdGV4dCBub2RlIHRvIGh5ZHJhdGUg4oCUIHdlIG11c3QgdGhlcmVmb3JlIGNyZWF0ZSBvbmVcblx0aWYgKGlzX3RleHQgJiYgdHlwZSAhPT0gMykge1xuXHRcdHZhciB0ZXh0ID0gY3JlYXRlX3RleHQoKTtcblx0XHQvLyBJZiB0aGUgbmV4dCBzaWJsaW5nIGlzIGBudWxsYCBhbmQgd2UncmUgaGFuZGxpbmcgdGV4dCB0aGVuIGl0J3MgYmVjYXVzZVxuXHRcdC8vIHRoZSBTU1IgY29udGVudCB3YXMgZW1wdHkgZm9yIHRoZSB0ZXh0LCBzbyB3ZSBuZWVkIHRvIGdlbmVyYXRlIGEgbmV3IHRleHRcblx0XHQvLyBub2RlIGFuZCBpbnNlcnQgaXQgYWZ0ZXIgdGhlIGxhc3Qgc2libGluZ1xuXHRcdGlmIChuZXh0X3NpYmxpbmcgPT09IG51bGwpIHtcblx0XHRcdGxhc3Rfc2libGluZz8uYWZ0ZXIodGV4dCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdG5leHRfc2libGluZy5iZWZvcmUodGV4dCk7XG5cdFx0fVxuXHRcdHNldF9oeWRyYXRlX25vZGUodGV4dCk7XG5cdFx0cmV0dXJuIHRleHQ7XG5cdH1cblxuXHRzZXRfaHlkcmF0ZV9ub2RlKG5leHRfc2libGluZyk7XG5cdHJldHVybiAvKiogQHR5cGUge1RlbXBsYXRlTm9kZX0gKi8gKG5leHRfc2libGluZyk7XG59XG5cbi8qKlxuICogQHRlbXBsYXRlIHtOb2RlfSBOXG4gKiBAcGFyYW0ge059IG5vZGVcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5leHBvcnQgZnVuY3Rpb24gY2xlYXJfdGV4dF9jb250ZW50KG5vZGUpIHtcblx0bm9kZS50ZXh0Q29udGVudCA9ICcnO1xufVxuIiwiLyoqIEBpbXBvcnQgeyBEZXJpdmVkLCBFZmZlY3QgfSBmcm9tICcjY2xpZW50JyAqL1xuaW1wb3J0IHsgREVWIH0gZnJvbSAnZXNtLWVudic7XG5pbXBvcnQge1xuXHRDTEVBTixcblx0REVSSVZFRCxcblx0REVTVFJPWUVELFxuXHRESVJUWSxcblx0RUZGRUNUX0hBU19ERVJJVkVELFxuXHRNQVlCRV9ESVJUWSxcblx0VU5PV05FRFxufSBmcm9tICcuLi9jb25zdGFudHMuanMnO1xuaW1wb3J0IHtcblx0YWN0aXZlX3JlYWN0aW9uLFxuXHRhY3RpdmVfZWZmZWN0LFxuXHRyZW1vdmVfcmVhY3Rpb25zLFxuXHRzZXRfc2lnbmFsX3N0YXR1cyxcblx0c2tpcF9yZWFjdGlvbixcblx0dXBkYXRlX3JlYWN0aW9uLFxuXHRpbmNyZW1lbnRfdmVyc2lvbixcblx0c2V0X2FjdGl2ZV9lZmZlY3QsXG5cdGNvbXBvbmVudF9jb250ZXh0XG59IGZyb20gJy4uL3J1bnRpbWUuanMnO1xuaW1wb3J0IHsgZXF1YWxzLCBzYWZlX2VxdWFscyB9IGZyb20gJy4vZXF1YWxpdHkuanMnO1xuaW1wb3J0ICogYXMgZSBmcm9tICcuLi9lcnJvcnMuanMnO1xuaW1wb3J0IHsgZGVzdHJveV9lZmZlY3QgfSBmcm9tICcuL2VmZmVjdHMuanMnO1xuaW1wb3J0IHsgaW5zcGVjdF9lZmZlY3RzLCBzZXRfaW5zcGVjdF9lZmZlY3RzIH0gZnJvbSAnLi9zb3VyY2VzLmpzJztcbmltcG9ydCB7IGdldF9zdGFjayB9IGZyb20gJy4uL2Rldi90cmFjaW5nLmpzJztcblxuLyoqXG4gKiBAdGVtcGxhdGUgVlxuICogQHBhcmFtIHsoKSA9PiBWfSBmblxuICogQHJldHVybnMge0Rlcml2ZWQ8Vj59XG4gKi9cbi8qI19fTk9fU0lERV9FRkZFQ1RTX18qL1xuZXhwb3J0IGZ1bmN0aW9uIGRlcml2ZWQoZm4pIHtcblx0dmFyIGZsYWdzID0gREVSSVZFRCB8IERJUlRZO1xuXG5cdGlmIChhY3RpdmVfZWZmZWN0ID09PSBudWxsKSB7XG5cdFx0ZmxhZ3MgfD0gVU5PV05FRDtcblx0fSBlbHNlIHtcblx0XHQvLyBTaW5jZSBkZXJpdmVkcyBhcmUgZXZhbHVhdGVkIGxhemlseSwgYW55IGVmZmVjdHMgY3JlYXRlZCBpbnNpZGUgdGhlbSBhcmVcblx0XHQvLyBjcmVhdGVkIHRvbyBsYXRlIHRvIGVuc3VyZSB0aGF0IHRoZSBwYXJlbnQgZWZmZWN0IGlzIGFkZGVkIHRvIHRoZSB0cmVlXG5cdFx0YWN0aXZlX2VmZmVjdC5mIHw9IEVGRkVDVF9IQVNfREVSSVZFRDtcblx0fVxuXG5cdHZhciBwYXJlbnRfZGVyaXZlZCA9XG5cdFx0YWN0aXZlX3JlYWN0aW9uICE9PSBudWxsICYmIChhY3RpdmVfcmVhY3Rpb24uZiAmIERFUklWRUQpICE9PSAwXG5cdFx0XHQ/IC8qKiBAdHlwZSB7RGVyaXZlZH0gKi8gKGFjdGl2ZV9yZWFjdGlvbilcblx0XHRcdDogbnVsbDtcblxuXHQvKiogQHR5cGUge0Rlcml2ZWQ8Vj59ICovXG5cdGNvbnN0IHNpZ25hbCA9IHtcblx0XHRjaGlsZHJlbjogbnVsbCxcblx0XHRjdHg6IGNvbXBvbmVudF9jb250ZXh0LFxuXHRcdGRlcHM6IG51bGwsXG5cdFx0ZXF1YWxzLFxuXHRcdGY6IGZsYWdzLFxuXHRcdGZuLFxuXHRcdHJlYWN0aW9uczogbnVsbCxcblx0XHR2OiAvKiogQHR5cGUge1Z9ICovIChudWxsKSxcblx0XHR2ZXJzaW9uOiAwLFxuXHRcdHBhcmVudDogcGFyZW50X2Rlcml2ZWQgPz8gYWN0aXZlX2VmZmVjdFxuXHR9O1xuXG5cdGlmIChERVYpIHtcblx0XHRzaWduYWwuY3JlYXRlZCA9IGdldF9zdGFjaygnQ3JlYXRlZEF0Jyk7XG5cdH1cblxuXHRpZiAocGFyZW50X2Rlcml2ZWQgIT09IG51bGwpIHtcblx0XHQocGFyZW50X2Rlcml2ZWQuY2hpbGRyZW4gPz89IFtdKS5wdXNoKHNpZ25hbCk7XG5cdH1cblxuXHRyZXR1cm4gc2lnbmFsO1xufVxuXG4vKipcbiAqIEB0ZW1wbGF0ZSBWXG4gKiBAcGFyYW0geygpID0+IFZ9IGZuXG4gKiBAcmV0dXJucyB7RGVyaXZlZDxWPn1cbiAqL1xuLyojX19OT19TSURFX0VGRkVDVFNfXyovXG5leHBvcnQgZnVuY3Rpb24gZGVyaXZlZF9zYWZlX2VxdWFsKGZuKSB7XG5cdGNvbnN0IHNpZ25hbCA9IGRlcml2ZWQoZm4pO1xuXHRzaWduYWwuZXF1YWxzID0gc2FmZV9lcXVhbHM7XG5cdHJldHVybiBzaWduYWw7XG59XG5cbi8qKlxuICogQHBhcmFtIHtEZXJpdmVkfSBkZXJpdmVkXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZnVuY3Rpb24gZGVzdHJveV9kZXJpdmVkX2NoaWxkcmVuKGRlcml2ZWQpIHtcblx0dmFyIGNoaWxkcmVuID0gZGVyaXZlZC5jaGlsZHJlbjtcblxuXHRpZiAoY2hpbGRyZW4gIT09IG51bGwpIHtcblx0XHRkZXJpdmVkLmNoaWxkcmVuID0gbnVsbDtcblxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpICs9IDEpIHtcblx0XHRcdHZhciBjaGlsZCA9IGNoaWxkcmVuW2ldO1xuXHRcdFx0aWYgKChjaGlsZC5mICYgREVSSVZFRCkgIT09IDApIHtcblx0XHRcdFx0ZGVzdHJveV9kZXJpdmVkKC8qKiBAdHlwZSB7RGVyaXZlZH0gKi8gKGNoaWxkKSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkZXN0cm95X2VmZmVjdCgvKiogQHR5cGUge0VmZmVjdH0gKi8gKGNoaWxkKSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59XG5cbi8qKlxuICogVGhlIGN1cnJlbnRseSB1cGRhdGluZyBkZXJpdmVkcywgdXNlZCB0byBkZXRlY3QgaW5maW5pdGUgcmVjdXJzaW9uXG4gKiBpbiBkZXYgbW9kZSBhbmQgcHJvdmlkZSBhIG5pY2VyIGVycm9yIHRoYW4gJ3RvbyBtdWNoIHJlY3Vyc2lvbidcbiAqIEB0eXBlIHtEZXJpdmVkW119XG4gKi9cbmxldCBzdGFjayA9IFtdO1xuXG4vKipcbiAqIEBwYXJhbSB7RGVyaXZlZH0gZGVyaXZlZFxuICogQHJldHVybnMge0VmZmVjdCB8IG51bGx9XG4gKi9cbmZ1bmN0aW9uIGdldF9kZXJpdmVkX3BhcmVudF9lZmZlY3QoZGVyaXZlZCkge1xuXHR2YXIgcGFyZW50ID0gZGVyaXZlZC5wYXJlbnQ7XG5cdHdoaWxlIChwYXJlbnQgIT09IG51bGwpIHtcblx0XHRpZiAoKHBhcmVudC5mICYgREVSSVZFRCkgPT09IDApIHtcblx0XHRcdHJldHVybiAvKiogQHR5cGUge0VmZmVjdH0gKi8gKHBhcmVudCk7XG5cdFx0fVxuXHRcdHBhcmVudCA9IHBhcmVudC5wYXJlbnQ7XG5cdH1cblx0cmV0dXJuIG51bGw7XG59XG5cbi8qKlxuICogQHRlbXBsYXRlIFRcbiAqIEBwYXJhbSB7RGVyaXZlZH0gZGVyaXZlZFxuICogQHJldHVybnMge1R9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBleGVjdXRlX2Rlcml2ZWQoZGVyaXZlZCkge1xuXHR2YXIgdmFsdWU7XG5cdHZhciBwcmV2X2FjdGl2ZV9lZmZlY3QgPSBhY3RpdmVfZWZmZWN0O1xuXG5cdHNldF9hY3RpdmVfZWZmZWN0KGdldF9kZXJpdmVkX3BhcmVudF9lZmZlY3QoZGVyaXZlZCkpO1xuXG5cdGlmIChERVYpIHtcblx0XHRsZXQgcHJldl9pbnNwZWN0X2VmZmVjdHMgPSBpbnNwZWN0X2VmZmVjdHM7XG5cdFx0c2V0X2luc3BlY3RfZWZmZWN0cyhuZXcgU2V0KCkpO1xuXHRcdHRyeSB7XG5cdFx0XHRpZiAoc3RhY2suaW5jbHVkZXMoZGVyaXZlZCkpIHtcblx0XHRcdFx0ZS5kZXJpdmVkX3JlZmVyZW5jZXNfc2VsZigpO1xuXHRcdFx0fVxuXG5cdFx0XHRzdGFjay5wdXNoKGRlcml2ZWQpO1xuXG5cdFx0XHRkZXN0cm95X2Rlcml2ZWRfY2hpbGRyZW4oZGVyaXZlZCk7XG5cdFx0XHR2YWx1ZSA9IHVwZGF0ZV9yZWFjdGlvbihkZXJpdmVkKTtcblx0XHR9IGZpbmFsbHkge1xuXHRcdFx0c2V0X2FjdGl2ZV9lZmZlY3QocHJldl9hY3RpdmVfZWZmZWN0KTtcblx0XHRcdHNldF9pbnNwZWN0X2VmZmVjdHMocHJldl9pbnNwZWN0X2VmZmVjdHMpO1xuXHRcdFx0c3RhY2sucG9wKCk7XG5cdFx0fVxuXHR9IGVsc2Uge1xuXHRcdHRyeSB7XG5cdFx0XHRkZXN0cm95X2Rlcml2ZWRfY2hpbGRyZW4oZGVyaXZlZCk7XG5cdFx0XHR2YWx1ZSA9IHVwZGF0ZV9yZWFjdGlvbihkZXJpdmVkKTtcblx0XHR9IGZpbmFsbHkge1xuXHRcdFx0c2V0X2FjdGl2ZV9lZmZlY3QocHJldl9hY3RpdmVfZWZmZWN0KTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gdmFsdWU7XG59XG5cbi8qKlxuICogQHBhcmFtIHtEZXJpdmVkfSBkZXJpdmVkXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZV9kZXJpdmVkKGRlcml2ZWQpIHtcblx0dmFyIHZhbHVlID0gZXhlY3V0ZV9kZXJpdmVkKGRlcml2ZWQpO1xuXHR2YXIgc3RhdHVzID1cblx0XHQoc2tpcF9yZWFjdGlvbiB8fCAoZGVyaXZlZC5mICYgVU5PV05FRCkgIT09IDApICYmIGRlcml2ZWQuZGVwcyAhPT0gbnVsbCA/IE1BWUJFX0RJUlRZIDogQ0xFQU47XG5cblx0c2V0X3NpZ25hbF9zdGF0dXMoZGVyaXZlZCwgc3RhdHVzKTtcblxuXHRpZiAoIWRlcml2ZWQuZXF1YWxzKHZhbHVlKSkge1xuXHRcdGRlcml2ZWQudiA9IHZhbHVlO1xuXHRcdGRlcml2ZWQudmVyc2lvbiA9IGluY3JlbWVudF92ZXJzaW9uKCk7XG5cdH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge0Rlcml2ZWR9IGRlcml2ZWRcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVzdHJveV9kZXJpdmVkKGRlcml2ZWQpIHtcblx0ZGVzdHJveV9kZXJpdmVkX2NoaWxkcmVuKGRlcml2ZWQpO1xuXHRyZW1vdmVfcmVhY3Rpb25zKGRlcml2ZWQsIDApO1xuXHRzZXRfc2lnbmFsX3N0YXR1cyhkZXJpdmVkLCBERVNUUk9ZRUQpO1xuXG5cdGRlcml2ZWQudiA9IGRlcml2ZWQuY2hpbGRyZW4gPSBkZXJpdmVkLmRlcHMgPSBkZXJpdmVkLmN0eCA9IGRlcml2ZWQucmVhY3Rpb25zID0gbnVsbDtcbn1cbiIsIi8qKiBAaW1wb3J0IHsgQ29tcG9uZW50Q29udGV4dCwgQ29tcG9uZW50Q29udGV4dExlZ2FjeSwgRGVyaXZlZCwgRWZmZWN0LCBUZW1wbGF0ZU5vZGUsIFRyYW5zaXRpb25NYW5hZ2VyIH0gZnJvbSAnI2NsaWVudCcgKi9cbmltcG9ydCB7XG5cdGNoZWNrX2RpcnRpbmVzcyxcblx0Y29tcG9uZW50X2NvbnRleHQsXG5cdGFjdGl2ZV9lZmZlY3QsXG5cdGFjdGl2ZV9yZWFjdGlvbixcblx0ZGV2X2N1cnJlbnRfY29tcG9uZW50X2Z1bmN0aW9uLFxuXHR1cGRhdGVfZWZmZWN0LFxuXHRnZXQsXG5cdGlzX2Rlc3Ryb3lpbmdfZWZmZWN0LFxuXHRpc19mbHVzaGluZ19lZmZlY3QsXG5cdHJlbW92ZV9yZWFjdGlvbnMsXG5cdHNjaGVkdWxlX2VmZmVjdCxcblx0c2V0X2FjdGl2ZV9yZWFjdGlvbixcblx0c2V0X2lzX2Rlc3Ryb3lpbmdfZWZmZWN0LFxuXHRzZXRfaXNfZmx1c2hpbmdfZWZmZWN0LFxuXHRzZXRfc2lnbmFsX3N0YXR1cyxcblx0dW50cmFjayxcblx0c2tpcF9yZWFjdGlvblxufSBmcm9tICcuLi9ydW50aW1lLmpzJztcbmltcG9ydCB7XG5cdERJUlRZLFxuXHRCUkFOQ0hfRUZGRUNULFxuXHRSRU5ERVJfRUZGRUNULFxuXHRFRkZFQ1QsXG5cdERFU1RST1lFRCxcblx0SU5FUlQsXG5cdEVGRkVDVF9SQU4sXG5cdEJMT0NLX0VGRkVDVCxcblx0Uk9PVF9FRkZFQ1QsXG5cdEVGRkVDVF9UUkFOU1BBUkVOVCxcblx0REVSSVZFRCxcblx0VU5PV05FRCxcblx0Q0xFQU4sXG5cdElOU1BFQ1RfRUZGRUNULFxuXHRIRUFEX0VGRkVDVCxcblx0TUFZQkVfRElSVFksXG5cdEVGRkVDVF9IQVNfREVSSVZFRFxufSBmcm9tICcuLi9jb25zdGFudHMuanMnO1xuaW1wb3J0IHsgc2V0IH0gZnJvbSAnLi9zb3VyY2VzLmpzJztcbmltcG9ydCAqIGFzIGUgZnJvbSAnLi4vZXJyb3JzLmpzJztcbmltcG9ydCB7IERFViB9IGZyb20gJ2VzbS1lbnYnO1xuaW1wb3J0IHsgZGVmaW5lX3Byb3BlcnR5IH0gZnJvbSAnLi4vLi4vc2hhcmVkL3V0aWxzLmpzJztcbmltcG9ydCB7IGdldF9uZXh0X3NpYmxpbmcgfSBmcm9tICcuLi9kb20vb3BlcmF0aW9ucy5qcyc7XG5pbXBvcnQgeyBkZXN0cm95X2Rlcml2ZWQgfSBmcm9tICcuL2Rlcml2ZWRzLmpzJztcblxuLyoqXG4gKiBAcGFyYW0geyckZWZmZWN0JyB8ICckZWZmZWN0LnByZScgfCAnJGluc3BlY3QnfSBydW5lXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZV9lZmZlY3QocnVuZSkge1xuXHRpZiAoYWN0aXZlX2VmZmVjdCA9PT0gbnVsbCAmJiBhY3RpdmVfcmVhY3Rpb24gPT09IG51bGwpIHtcblx0XHRlLmVmZmVjdF9vcnBoYW4ocnVuZSk7XG5cdH1cblxuXHRpZiAoYWN0aXZlX3JlYWN0aW9uICE9PSBudWxsICYmIChhY3RpdmVfcmVhY3Rpb24uZiAmIFVOT1dORUQpICE9PSAwKSB7XG5cdFx0ZS5lZmZlY3RfaW5fdW5vd25lZF9kZXJpdmVkKCk7XG5cdH1cblxuXHRpZiAoaXNfZGVzdHJveWluZ19lZmZlY3QpIHtcblx0XHRlLmVmZmVjdF9pbl90ZWFyZG93bihydW5lKTtcblx0fVxufVxuXG4vKipcbiAqIEBwYXJhbSB7RWZmZWN0fSBlZmZlY3RcbiAqIEBwYXJhbSB7RWZmZWN0fSBwYXJlbnRfZWZmZWN0XG4gKi9cbmZ1bmN0aW9uIHB1c2hfZWZmZWN0KGVmZmVjdCwgcGFyZW50X2VmZmVjdCkge1xuXHR2YXIgcGFyZW50X2xhc3QgPSBwYXJlbnRfZWZmZWN0Lmxhc3Q7XG5cdGlmIChwYXJlbnRfbGFzdCA9PT0gbnVsbCkge1xuXHRcdHBhcmVudF9lZmZlY3QubGFzdCA9IHBhcmVudF9lZmZlY3QuZmlyc3QgPSBlZmZlY3Q7XG5cdH0gZWxzZSB7XG5cdFx0cGFyZW50X2xhc3QubmV4dCA9IGVmZmVjdDtcblx0XHRlZmZlY3QucHJldiA9IHBhcmVudF9sYXN0O1xuXHRcdHBhcmVudF9lZmZlY3QubGFzdCA9IGVmZmVjdDtcblx0fVxufVxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSB0eXBlXG4gKiBAcGFyYW0ge251bGwgfCAoKCkgPT4gdm9pZCB8ICgoKSA9PiB2b2lkKSl9IGZuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IHN5bmNcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gcHVzaFxuICogQHJldHVybnMge0VmZmVjdH1cbiAqL1xuZnVuY3Rpb24gY3JlYXRlX2VmZmVjdCh0eXBlLCBmbiwgc3luYywgcHVzaCA9IHRydWUpIHtcblx0dmFyIGlzX3Jvb3QgPSAodHlwZSAmIFJPT1RfRUZGRUNUKSAhPT0gMDtcblx0dmFyIHBhcmVudF9lZmZlY3QgPSBhY3RpdmVfZWZmZWN0O1xuXG5cdGlmIChERVYpIHtcblx0XHQvLyBFbnN1cmUgdGhlIHBhcmVudCBpcyBuZXZlciBhbiBpbnNwZWN0IGVmZmVjdFxuXHRcdHdoaWxlIChwYXJlbnRfZWZmZWN0ICE9PSBudWxsICYmIChwYXJlbnRfZWZmZWN0LmYgJiBJTlNQRUNUX0VGRkVDVCkgIT09IDApIHtcblx0XHRcdHBhcmVudF9lZmZlY3QgPSBwYXJlbnRfZWZmZWN0LnBhcmVudDtcblx0XHR9XG5cdH1cblxuXHQvKiogQHR5cGUge0VmZmVjdH0gKi9cblx0dmFyIGVmZmVjdCA9IHtcblx0XHRjdHg6IGNvbXBvbmVudF9jb250ZXh0LFxuXHRcdGRlcHM6IG51bGwsXG5cdFx0ZGVyaXZlZHM6IG51bGwsXG5cdFx0bm9kZXNfc3RhcnQ6IG51bGwsXG5cdFx0bm9kZXNfZW5kOiBudWxsLFxuXHRcdGY6IHR5cGUgfCBESVJUWSxcblx0XHRmaXJzdDogbnVsbCxcblx0XHRmbixcblx0XHRsYXN0OiBudWxsLFxuXHRcdG5leHQ6IG51bGwsXG5cdFx0cGFyZW50OiBpc19yb290ID8gbnVsbCA6IHBhcmVudF9lZmZlY3QsXG5cdFx0cHJldjogbnVsbCxcblx0XHR0ZWFyZG93bjogbnVsbCxcblx0XHR0cmFuc2l0aW9uczogbnVsbCxcblx0XHR2ZXJzaW9uOiAwXG5cdH07XG5cblx0aWYgKERFVikge1xuXHRcdGVmZmVjdC5jb21wb25lbnRfZnVuY3Rpb24gPSBkZXZfY3VycmVudF9jb21wb25lbnRfZnVuY3Rpb247XG5cdH1cblxuXHRpZiAoc3luYykge1xuXHRcdHZhciBwcmV2aW91c2x5X2ZsdXNoaW5nX2VmZmVjdCA9IGlzX2ZsdXNoaW5nX2VmZmVjdDtcblxuXHRcdHRyeSB7XG5cdFx0XHRzZXRfaXNfZmx1c2hpbmdfZWZmZWN0KHRydWUpO1xuXHRcdFx0dXBkYXRlX2VmZmVjdChlZmZlY3QpO1xuXHRcdFx0ZWZmZWN0LmYgfD0gRUZGRUNUX1JBTjtcblx0XHR9IGNhdGNoIChlKSB7XG5cdFx0XHRkZXN0cm95X2VmZmVjdChlZmZlY3QpO1xuXHRcdFx0dGhyb3cgZTtcblx0XHR9IGZpbmFsbHkge1xuXHRcdFx0c2V0X2lzX2ZsdXNoaW5nX2VmZmVjdChwcmV2aW91c2x5X2ZsdXNoaW5nX2VmZmVjdCk7XG5cdFx0fVxuXHR9IGVsc2UgaWYgKGZuICE9PSBudWxsKSB7XG5cdFx0c2NoZWR1bGVfZWZmZWN0KGVmZmVjdCk7XG5cdH1cblxuXHQvLyBpZiBhbiBlZmZlY3QgaGFzIG5vIGRlcGVuZGVuY2llcywgbm8gRE9NIGFuZCBubyB0ZWFyZG93biBmdW5jdGlvbixcblx0Ly8gZG9uJ3QgYm90aGVyIGFkZGluZyBpdCB0byB0aGUgZWZmZWN0IHRyZWVcblx0dmFyIGluZXJ0ID1cblx0XHRzeW5jICYmXG5cdFx0ZWZmZWN0LmRlcHMgPT09IG51bGwgJiZcblx0XHRlZmZlY3QuZmlyc3QgPT09IG51bGwgJiZcblx0XHRlZmZlY3Qubm9kZXNfc3RhcnQgPT09IG51bGwgJiZcblx0XHRlZmZlY3QudGVhcmRvd24gPT09IG51bGwgJiZcblx0XHQoZWZmZWN0LmYgJiBFRkZFQ1RfSEFTX0RFUklWRUQpID09PSAwO1xuXG5cdGlmICghaW5lcnQgJiYgIWlzX3Jvb3QgJiYgcHVzaCkge1xuXHRcdGlmIChwYXJlbnRfZWZmZWN0ICE9PSBudWxsKSB7XG5cdFx0XHRwdXNoX2VmZmVjdChlZmZlY3QsIHBhcmVudF9lZmZlY3QpO1xuXHRcdH1cblxuXHRcdC8vIGlmIHdlJ3JlIGluIGEgZGVyaXZlZCwgYWRkIHRoZSBlZmZlY3QgdGhlcmUgdG9vXG5cdFx0aWYgKGFjdGl2ZV9yZWFjdGlvbiAhPT0gbnVsbCAmJiAoYWN0aXZlX3JlYWN0aW9uLmYgJiBERVJJVkVEKSAhPT0gMCkge1xuXHRcdFx0dmFyIGRlcml2ZWQgPSAvKiogQHR5cGUge0Rlcml2ZWR9ICovIChhY3RpdmVfcmVhY3Rpb24pO1xuXHRcdFx0KGRlcml2ZWQuY2hpbGRyZW4gPz89IFtdKS5wdXNoKGVmZmVjdCk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGVmZmVjdDtcbn1cblxuLyoqXG4gKiBJbnRlcm5hbCByZXByZXNlbnRhdGlvbiBvZiBgJGVmZmVjdC50cmFja2luZygpYFxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBlZmZlY3RfdHJhY2tpbmcoKSB7XG5cdGlmIChhY3RpdmVfcmVhY3Rpb24gPT09IG51bGwpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHQvLyBJZiBpdCdzIHNraXBwZWQsIHRoYXQncyBiZWNhdXNlIHdlJ3JlIGluc2lkZSBhbiB1bm93bmVkXG5cdC8vIHRoYXQgaXMgbm90IGJlaW5nIHRyYWNrZWQgYnkgYW5vdGhlciByZWFjdGlvblxuXHRyZXR1cm4gIXNraXBfcmVhY3Rpb247XG59XG5cbi8qKlxuICogQHBhcmFtIHsoKSA9PiB2b2lkfSBmblxuICovXG5leHBvcnQgZnVuY3Rpb24gdGVhcmRvd24oZm4pIHtcblx0Y29uc3QgZWZmZWN0ID0gY3JlYXRlX2VmZmVjdChSRU5ERVJfRUZGRUNULCBudWxsLCBmYWxzZSk7XG5cdHNldF9zaWduYWxfc3RhdHVzKGVmZmVjdCwgQ0xFQU4pO1xuXHRlZmZlY3QudGVhcmRvd24gPSBmbjtcblx0cmV0dXJuIGVmZmVjdDtcbn1cblxuLyoqXG4gKiBJbnRlcm5hbCByZXByZXNlbnRhdGlvbiBvZiBgJGVmZmVjdCguLi4pYFxuICogQHBhcmFtIHsoKSA9PiB2b2lkIHwgKCgpID0+IHZvaWQpfSBmblxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlcl9lZmZlY3QoZm4pIHtcblx0dmFsaWRhdGVfZWZmZWN0KCckZWZmZWN0Jyk7XG5cblx0Ly8gTm9uLW5lc3RlZCBgJGVmZmVjdCguLi4pYCBpbiBhIGNvbXBvbmVudCBzaG91bGQgYmUgZGVmZXJyZWRcblx0Ly8gdW50aWwgdGhlIGNvbXBvbmVudCBpcyBtb3VudGVkXG5cdHZhciBkZWZlciA9XG5cdFx0YWN0aXZlX2VmZmVjdCAhPT0gbnVsbCAmJlxuXHRcdChhY3RpdmVfZWZmZWN0LmYgJiBCUkFOQ0hfRUZGRUNUKSAhPT0gMCAmJlxuXHRcdGNvbXBvbmVudF9jb250ZXh0ICE9PSBudWxsICYmXG5cdFx0IWNvbXBvbmVudF9jb250ZXh0Lm07XG5cblx0aWYgKERFVikge1xuXHRcdGRlZmluZV9wcm9wZXJ0eShmbiwgJ25hbWUnLCB7XG5cdFx0XHR2YWx1ZTogJyRlZmZlY3QnXG5cdFx0fSk7XG5cdH1cblxuXHRpZiAoZGVmZXIpIHtcblx0XHR2YXIgY29udGV4dCA9IC8qKiBAdHlwZSB7Q29tcG9uZW50Q29udGV4dH0gKi8gKGNvbXBvbmVudF9jb250ZXh0KTtcblx0XHQoY29udGV4dC5lID8/PSBbXSkucHVzaCh7XG5cdFx0XHRmbixcblx0XHRcdGVmZmVjdDogYWN0aXZlX2VmZmVjdCxcblx0XHRcdHJlYWN0aW9uOiBhY3RpdmVfcmVhY3Rpb25cblx0XHR9KTtcblx0fSBlbHNlIHtcblx0XHR2YXIgc2lnbmFsID0gZWZmZWN0KGZuKTtcblx0XHRyZXR1cm4gc2lnbmFsO1xuXHR9XG59XG5cbi8qKlxuICogSW50ZXJuYWwgcmVwcmVzZW50YXRpb24gb2YgYCRlZmZlY3QucHJlKC4uLilgXG4gKiBAcGFyYW0geygpID0+IHZvaWQgfCAoKCkgPT4gdm9pZCl9IGZuXG4gKiBAcmV0dXJucyB7RWZmZWN0fVxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlcl9wcmVfZWZmZWN0KGZuKSB7XG5cdHZhbGlkYXRlX2VmZmVjdCgnJGVmZmVjdC5wcmUnKTtcblx0aWYgKERFVikge1xuXHRcdGRlZmluZV9wcm9wZXJ0eShmbiwgJ25hbWUnLCB7XG5cdFx0XHR2YWx1ZTogJyRlZmZlY3QucHJlJ1xuXHRcdH0pO1xuXHR9XG5cdHJldHVybiByZW5kZXJfZWZmZWN0KGZuKTtcbn1cblxuLyoqIEBwYXJhbSB7KCkgPT4gdm9pZCB8ICgoKSA9PiB2b2lkKX0gZm4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpbnNwZWN0X2VmZmVjdChmbikge1xuXHRyZXR1cm4gY3JlYXRlX2VmZmVjdChJTlNQRUNUX0VGRkVDVCwgZm4sIHRydWUpO1xufVxuXG4vKipcbiAqIEludGVybmFsIHJlcHJlc2VudGF0aW9uIG9mIGAkZWZmZWN0LnJvb3QoLi4uKWBcbiAqIEBwYXJhbSB7KCkgPT4gdm9pZCB8ICgoKSA9PiB2b2lkKX0gZm5cbiAqIEByZXR1cm5zIHsoKSA9PiB2b2lkfVxuICovXG5leHBvcnQgZnVuY3Rpb24gZWZmZWN0X3Jvb3QoZm4pIHtcblx0Y29uc3QgZWZmZWN0ID0gY3JlYXRlX2VmZmVjdChST09UX0VGRkVDVCwgZm4sIHRydWUpO1xuXG5cdHJldHVybiAoKSA9PiB7XG5cdFx0ZGVzdHJveV9lZmZlY3QoZWZmZWN0KTtcblx0fTtcbn1cblxuLyoqXG4gKiBBbiBlZmZlY3Qgcm9vdCB3aG9zZSBjaGlsZHJlbiBjYW4gdHJhbnNpdGlvbiBvdXRcbiAqIEBwYXJhbSB7KCkgPT4gdm9pZH0gZm5cbiAqIEByZXR1cm5zIHsob3B0aW9ucz86IHsgb3V0cm8/OiBib29sZWFuIH0pID0+IFByb21pc2U8dm9pZD59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb21wb25lbnRfcm9vdChmbikge1xuXHRjb25zdCBlZmZlY3QgPSBjcmVhdGVfZWZmZWN0KFJPT1RfRUZGRUNULCBmbiwgdHJ1ZSk7XG5cblx0cmV0dXJuIChvcHRpb25zID0ge30pID0+IHtcblx0XHRyZXR1cm4gbmV3IFByb21pc2UoKGZ1bGZpbCkgPT4ge1xuXHRcdFx0aWYgKG9wdGlvbnMub3V0cm8pIHtcblx0XHRcdFx0cGF1c2VfZWZmZWN0KGVmZmVjdCwgKCkgPT4ge1xuXHRcdFx0XHRcdGRlc3Ryb3lfZWZmZWN0KGVmZmVjdCk7XG5cdFx0XHRcdFx0ZnVsZmlsKHVuZGVmaW5lZCk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZGVzdHJveV9lZmZlY3QoZWZmZWN0KTtcblx0XHRcdFx0ZnVsZmlsKHVuZGVmaW5lZCk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH07XG59XG5cbi8qKlxuICogQHBhcmFtIHsoKSA9PiB2b2lkIHwgKCgpID0+IHZvaWQpfSBmblxuICogQHJldHVybnMge0VmZmVjdH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGVmZmVjdChmbikge1xuXHRyZXR1cm4gY3JlYXRlX2VmZmVjdChFRkZFQ1QsIGZuLCBmYWxzZSk7XG59XG5cbi8qKlxuICogSW50ZXJuYWwgcmVwcmVzZW50YXRpb24gb2YgYCQ6IC4uYFxuICogQHBhcmFtIHsoKSA9PiBhbnl9IGRlcHNcbiAqIEBwYXJhbSB7KCkgPT4gdm9pZCB8ICgoKSA9PiB2b2lkKX0gZm5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGxlZ2FjeV9wcmVfZWZmZWN0KGRlcHMsIGZuKSB7XG5cdHZhciBjb250ZXh0ID0gLyoqIEB0eXBlIHtDb21wb25lbnRDb250ZXh0TGVnYWN5fSAqLyAoY29tcG9uZW50X2NvbnRleHQpO1xuXG5cdC8qKiBAdHlwZSB7eyBlZmZlY3Q6IG51bGwgfCBFZmZlY3QsIHJhbjogYm9vbGVhbiB9fSAqL1xuXHR2YXIgdG9rZW4gPSB7IGVmZmVjdDogbnVsbCwgcmFuOiBmYWxzZSB9O1xuXHRjb250ZXh0LmwucjEucHVzaCh0b2tlbik7XG5cblx0dG9rZW4uZWZmZWN0ID0gcmVuZGVyX2VmZmVjdCgoKSA9PiB7XG5cdFx0ZGVwcygpO1xuXG5cdFx0Ly8gSWYgdGhpcyBsZWdhY3kgcHJlIGVmZmVjdCBoYXMgYWxyZWFkeSBydW4gYmVmb3JlIHRoZSBlbmQgb2YgdGhlIHJlc2V0LCB0aGVuXG5cdFx0Ly8gYmFpbCBvdXQgdG8gZW11bGF0ZSB0aGUgc2FtZSBiZWhhdmlvci5cblx0XHRpZiAodG9rZW4ucmFuKSByZXR1cm47XG5cblx0XHR0b2tlbi5yYW4gPSB0cnVlO1xuXHRcdHNldChjb250ZXh0LmwucjIsIHRydWUpO1xuXHRcdHVudHJhY2soZm4pO1xuXHR9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGxlZ2FjeV9wcmVfZWZmZWN0X3Jlc2V0KCkge1xuXHR2YXIgY29udGV4dCA9IC8qKiBAdHlwZSB7Q29tcG9uZW50Q29udGV4dExlZ2FjeX0gKi8gKGNvbXBvbmVudF9jb250ZXh0KTtcblxuXHRyZW5kZXJfZWZmZWN0KCgpID0+IHtcblx0XHRpZiAoIWdldChjb250ZXh0LmwucjIpKSByZXR1cm47XG5cblx0XHQvLyBSdW4gZGlydHkgYCQ6YCBzdGF0ZW1lbnRzXG5cdFx0Zm9yICh2YXIgdG9rZW4gb2YgY29udGV4dC5sLnIxKSB7XG5cdFx0XHR2YXIgZWZmZWN0ID0gdG9rZW4uZWZmZWN0O1xuXG5cdFx0XHQvLyBJZiB0aGUgZWZmZWN0IGlzIENMRUFOLCB0aGVuIG1ha2UgaXQgTUFZQkVfRElSVFkuIFRoaXMgZW5zdXJlcyB3ZSB0cmF2ZXJzZSB0aHJvdWdoXG5cdFx0XHQvLyB0aGUgZWZmZWN0cyBkZXBlbmRlbmNpZXMgYW5kIGNvcnJlY3RseSBlbnN1cmUgZWFjaCBkZXBlbmRlbmN5IGlzIHVwLXRvLWRhdGUuXG5cdFx0XHRpZiAoKGVmZmVjdC5mICYgQ0xFQU4pICE9PSAwKSB7XG5cdFx0XHRcdHNldF9zaWduYWxfc3RhdHVzKGVmZmVjdCwgTUFZQkVfRElSVFkpO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoY2hlY2tfZGlydGluZXNzKGVmZmVjdCkpIHtcblx0XHRcdFx0dXBkYXRlX2VmZmVjdChlZmZlY3QpO1xuXHRcdFx0fVxuXG5cdFx0XHR0b2tlbi5yYW4gPSBmYWxzZTtcblx0XHR9XG5cblx0XHRjb250ZXh0LmwucjIudiA9IGZhbHNlOyAvLyBzZXQgZGlyZWN0bHkgdG8gYXZvaWQgcmVydW5uaW5nIHRoaXMgZWZmZWN0XG5cdH0pO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7KCkgPT4gdm9pZCB8ICgoKSA9PiB2b2lkKX0gZm5cbiAqIEByZXR1cm5zIHtFZmZlY3R9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZW5kZXJfZWZmZWN0KGZuKSB7XG5cdHJldHVybiBjcmVhdGVfZWZmZWN0KFJFTkRFUl9FRkZFQ1QsIGZuLCB0cnVlKTtcbn1cblxuLyoqXG4gKiBAcGFyYW0geygpID0+IHZvaWQgfCAoKCkgPT4gdm9pZCl9IGZuXG4gKiBAcmV0dXJucyB7RWZmZWN0fVxuICovXG5leHBvcnQgZnVuY3Rpb24gdGVtcGxhdGVfZWZmZWN0KGZuKSB7XG5cdGlmIChERVYpIHtcblx0XHRkZWZpbmVfcHJvcGVydHkoZm4sICduYW1lJywge1xuXHRcdFx0dmFsdWU6ICd7ZXhwcmVzc2lvbn0nXG5cdFx0fSk7XG5cdH1cblx0cmV0dXJuIGJsb2NrKGZuKTtcbn1cblxuLyoqXG4gKiBAcGFyYW0geygoKSA9PiB2b2lkKX0gZm5cbiAqIEBwYXJhbSB7bnVtYmVyfSBmbGFnc1xuICovXG5leHBvcnQgZnVuY3Rpb24gYmxvY2soZm4sIGZsYWdzID0gMCkge1xuXHRyZXR1cm4gY3JlYXRlX2VmZmVjdChSRU5ERVJfRUZGRUNUIHwgQkxPQ0tfRUZGRUNUIHwgZmxhZ3MsIGZuLCB0cnVlKTtcbn1cblxuLyoqXG4gKiBAcGFyYW0geygoKSA9PiB2b2lkKX0gZm5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW3B1c2hdXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBicmFuY2goZm4sIHB1c2ggPSB0cnVlKSB7XG5cdHJldHVybiBjcmVhdGVfZWZmZWN0KFJFTkRFUl9FRkZFQ1QgfCBCUkFOQ0hfRUZGRUNULCBmbiwgdHJ1ZSwgcHVzaCk7XG59XG5cbi8qKlxuICogQHBhcmFtIHtFZmZlY3R9IGVmZmVjdFxuICovXG5leHBvcnQgZnVuY3Rpb24gZXhlY3V0ZV9lZmZlY3RfdGVhcmRvd24oZWZmZWN0KSB7XG5cdHZhciB0ZWFyZG93biA9IGVmZmVjdC50ZWFyZG93bjtcblx0aWYgKHRlYXJkb3duICE9PSBudWxsKSB7XG5cdFx0Y29uc3QgcHJldmlvdXNseV9kZXN0cm95aW5nX2VmZmVjdCA9IGlzX2Rlc3Ryb3lpbmdfZWZmZWN0O1xuXHRcdGNvbnN0IHByZXZpb3VzX3JlYWN0aW9uID0gYWN0aXZlX3JlYWN0aW9uO1xuXHRcdHNldF9pc19kZXN0cm95aW5nX2VmZmVjdCh0cnVlKTtcblx0XHRzZXRfYWN0aXZlX3JlYWN0aW9uKG51bGwpO1xuXHRcdHRyeSB7XG5cdFx0XHR0ZWFyZG93bi5jYWxsKG51bGwpO1xuXHRcdH0gZmluYWxseSB7XG5cdFx0XHRzZXRfaXNfZGVzdHJveWluZ19lZmZlY3QocHJldmlvdXNseV9kZXN0cm95aW5nX2VmZmVjdCk7XG5cdFx0XHRzZXRfYWN0aXZlX3JlYWN0aW9uKHByZXZpb3VzX3JlYWN0aW9uKTtcblx0XHR9XG5cdH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge0VmZmVjdH0gc2lnbmFsXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlc3Ryb3lfZWZmZWN0X2Rlcml2ZWRzKHNpZ25hbCkge1xuXHR2YXIgZGVyaXZlZHMgPSBzaWduYWwuZGVyaXZlZHM7XG5cblx0aWYgKGRlcml2ZWRzICE9PSBudWxsKSB7XG5cdFx0c2lnbmFsLmRlcml2ZWRzID0gbnVsbDtcblxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgZGVyaXZlZHMubGVuZ3RoOyBpICs9IDEpIHtcblx0XHRcdGRlc3Ryb3lfZGVyaXZlZChkZXJpdmVkc1tpXSk7XG5cdFx0fVxuXHR9XG59XG5cbi8qKlxuICogQHBhcmFtIHtFZmZlY3R9IHNpZ25hbFxuICogQHBhcmFtIHtib29sZWFufSByZW1vdmVfZG9tXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlc3Ryb3lfZWZmZWN0X2NoaWxkcmVuKHNpZ25hbCwgcmVtb3ZlX2RvbSA9IGZhbHNlKSB7XG5cdHZhciBlZmZlY3QgPSBzaWduYWwuZmlyc3Q7XG5cdHNpZ25hbC5maXJzdCA9IHNpZ25hbC5sYXN0ID0gbnVsbDtcblxuXHR3aGlsZSAoZWZmZWN0ICE9PSBudWxsKSB7XG5cdFx0dmFyIG5leHQgPSBlZmZlY3QubmV4dDtcblx0XHRkZXN0cm95X2VmZmVjdChlZmZlY3QsIHJlbW92ZV9kb20pO1xuXHRcdGVmZmVjdCA9IG5leHQ7XG5cdH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge0VmZmVjdH0gc2lnbmFsXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlc3Ryb3lfYmxvY2tfZWZmZWN0X2NoaWxkcmVuKHNpZ25hbCkge1xuXHR2YXIgZWZmZWN0ID0gc2lnbmFsLmZpcnN0O1xuXG5cdHdoaWxlIChlZmZlY3QgIT09IG51bGwpIHtcblx0XHR2YXIgbmV4dCA9IGVmZmVjdC5uZXh0O1xuXHRcdGlmICgoZWZmZWN0LmYgJiBCUkFOQ0hfRUZGRUNUKSA9PT0gMCkge1xuXHRcdFx0ZGVzdHJveV9lZmZlY3QoZWZmZWN0KTtcblx0XHR9XG5cdFx0ZWZmZWN0ID0gbmV4dDtcblx0fVxufVxuXG4vKipcbiAqIEBwYXJhbSB7RWZmZWN0fSBlZmZlY3RcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW3JlbW92ZV9kb21dXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlc3Ryb3lfZWZmZWN0KGVmZmVjdCwgcmVtb3ZlX2RvbSA9IHRydWUpIHtcblx0dmFyIHJlbW92ZWQgPSBmYWxzZTtcblxuXHRpZiAoKHJlbW92ZV9kb20gfHwgKGVmZmVjdC5mICYgSEVBRF9FRkZFQ1QpICE9PSAwKSAmJiBlZmZlY3Qubm9kZXNfc3RhcnQgIT09IG51bGwpIHtcblx0XHQvKiogQHR5cGUge1RlbXBsYXRlTm9kZSB8IG51bGx9ICovXG5cdFx0dmFyIG5vZGUgPSBlZmZlY3Qubm9kZXNfc3RhcnQ7XG5cdFx0dmFyIGVuZCA9IGVmZmVjdC5ub2Rlc19lbmQ7XG5cblx0XHR3aGlsZSAobm9kZSAhPT0gbnVsbCkge1xuXHRcdFx0LyoqIEB0eXBlIHtUZW1wbGF0ZU5vZGUgfCBudWxsfSAqL1xuXHRcdFx0dmFyIG5leHQgPSBub2RlID09PSBlbmQgPyBudWxsIDogLyoqIEB0eXBlIHtUZW1wbGF0ZU5vZGV9ICovIChnZXRfbmV4dF9zaWJsaW5nKG5vZGUpKTtcblxuXHRcdFx0bm9kZS5yZW1vdmUoKTtcblx0XHRcdG5vZGUgPSBuZXh0O1xuXHRcdH1cblxuXHRcdHJlbW92ZWQgPSB0cnVlO1xuXHR9XG5cblx0ZGVzdHJveV9lZmZlY3RfY2hpbGRyZW4oZWZmZWN0LCByZW1vdmVfZG9tICYmICFyZW1vdmVkKTtcblx0ZGVzdHJveV9lZmZlY3RfZGVyaXZlZHMoZWZmZWN0KTtcblx0cmVtb3ZlX3JlYWN0aW9ucyhlZmZlY3QsIDApO1xuXHRzZXRfc2lnbmFsX3N0YXR1cyhlZmZlY3QsIERFU1RST1lFRCk7XG5cblx0dmFyIHRyYW5zaXRpb25zID0gZWZmZWN0LnRyYW5zaXRpb25zO1xuXG5cdGlmICh0cmFuc2l0aW9ucyAhPT0gbnVsbCkge1xuXHRcdGZvciAoY29uc3QgdHJhbnNpdGlvbiBvZiB0cmFuc2l0aW9ucykge1xuXHRcdFx0dHJhbnNpdGlvbi5zdG9wKCk7XG5cdFx0fVxuXHR9XG5cblx0ZXhlY3V0ZV9lZmZlY3RfdGVhcmRvd24oZWZmZWN0KTtcblxuXHR2YXIgcGFyZW50ID0gZWZmZWN0LnBhcmVudDtcblxuXHQvLyBJZiB0aGUgcGFyZW50IGRvZXNuJ3QgaGF2ZSBhbnkgY2hpbGRyZW4sIHRoZW4gc2tpcCB0aGlzIHdvcmsgYWx0b2dldGhlclxuXHRpZiAocGFyZW50ICE9PSBudWxsICYmIHBhcmVudC5maXJzdCAhPT0gbnVsbCkge1xuXHRcdHVubGlua19lZmZlY3QoZWZmZWN0KTtcblx0fVxuXG5cdGlmIChERVYpIHtcblx0XHRlZmZlY3QuY29tcG9uZW50X2Z1bmN0aW9uID0gbnVsbDtcblx0fVxuXG5cdC8vIGBmaXJzdGAgYW5kIGBjaGlsZGAgYXJlIG51bGxlZCBvdXQgaW4gZGVzdHJveV9lZmZlY3RfY2hpbGRyZW5cblx0Ly8gd2UgZG9uJ3QgbnVsbCBvdXQgYHBhcmVudGAgc28gdGhhdCBlcnJvciBwcm9wYWdhdGlvbiBjYW4gd29yayBjb3JyZWN0bHlcblx0ZWZmZWN0Lm5leHQgPVxuXHRcdGVmZmVjdC5wcmV2ID1cblx0XHRlZmZlY3QudGVhcmRvd24gPVxuXHRcdGVmZmVjdC5jdHggPVxuXHRcdGVmZmVjdC5kZXBzID1cblx0XHRlZmZlY3QuZm4gPVxuXHRcdGVmZmVjdC5ub2Rlc19zdGFydCA9XG5cdFx0ZWZmZWN0Lm5vZGVzX2VuZCA9XG5cdFx0XHRudWxsO1xufVxuXG4vKipcbiAqIERldGFjaCBhbiBlZmZlY3QgZnJvbSB0aGUgZWZmZWN0IHRyZWUsIGZyZWVpbmcgdXAgbWVtb3J5IGFuZFxuICogcmVkdWNpbmcgdGhlIGFtb3VudCBvZiB3b3JrIHRoYXQgaGFwcGVucyBvbiBzdWJzZXF1ZW50IHRyYXZlcnNhbHNcbiAqIEBwYXJhbSB7RWZmZWN0fSBlZmZlY3RcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVubGlua19lZmZlY3QoZWZmZWN0KSB7XG5cdHZhciBwYXJlbnQgPSBlZmZlY3QucGFyZW50O1xuXHR2YXIgcHJldiA9IGVmZmVjdC5wcmV2O1xuXHR2YXIgbmV4dCA9IGVmZmVjdC5uZXh0O1xuXG5cdGlmIChwcmV2ICE9PSBudWxsKSBwcmV2Lm5leHQgPSBuZXh0O1xuXHRpZiAobmV4dCAhPT0gbnVsbCkgbmV4dC5wcmV2ID0gcHJldjtcblxuXHRpZiAocGFyZW50ICE9PSBudWxsKSB7XG5cdFx0aWYgKHBhcmVudC5maXJzdCA9PT0gZWZmZWN0KSBwYXJlbnQuZmlyc3QgPSBuZXh0O1xuXHRcdGlmIChwYXJlbnQubGFzdCA9PT0gZWZmZWN0KSBwYXJlbnQubGFzdCA9IHByZXY7XG5cdH1cbn1cblxuLyoqXG4gKiBXaGVuIGEgYmxvY2sgZWZmZWN0IGlzIHJlbW92ZWQsIHdlIGRvbid0IGltbWVkaWF0ZWx5IGRlc3Ryb3kgaXQgb3IgeWFuayBpdFxuICogb3V0IG9mIHRoZSBET00sIGJlY2F1c2UgaXQgbWlnaHQgaGF2ZSB0cmFuc2l0aW9ucy4gSW5zdGVhZCwgd2UgJ3BhdXNlJyBpdC5cbiAqIEl0IHN0YXlzIGFyb3VuZCAoaW4gbWVtb3J5LCBhbmQgaW4gdGhlIERPTSkgdW50aWwgb3V0cm8gdHJhbnNpdGlvbnMgaGF2ZVxuICogY29tcGxldGVkLCBhbmQgaWYgdGhlIHN0YXRlIGNoYW5nZSBpcyByZXZlcnNlZCB0aGVuIHdlIF9yZXN1bWVfIGl0LlxuICogQSBwYXVzZWQgZWZmZWN0IGRvZXMgbm90IHVwZGF0ZSwgYW5kIHRoZSBET00gc3VidHJlZSBiZWNvbWVzIGluZXJ0LlxuICogQHBhcmFtIHtFZmZlY3R9IGVmZmVjdFxuICogQHBhcmFtIHsoKSA9PiB2b2lkfSBbY2FsbGJhY2tdXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXVzZV9lZmZlY3QoZWZmZWN0LCBjYWxsYmFjaykge1xuXHQvKiogQHR5cGUge1RyYW5zaXRpb25NYW5hZ2VyW119ICovXG5cdHZhciB0cmFuc2l0aW9ucyA9IFtdO1xuXG5cdHBhdXNlX2NoaWxkcmVuKGVmZmVjdCwgdHJhbnNpdGlvbnMsIHRydWUpO1xuXG5cdHJ1bl9vdXRfdHJhbnNpdGlvbnModHJhbnNpdGlvbnMsICgpID0+IHtcblx0XHRkZXN0cm95X2VmZmVjdChlZmZlY3QpO1xuXHRcdGlmIChjYWxsYmFjaykgY2FsbGJhY2soKTtcblx0fSk7XG59XG5cbi8qKlxuICogQHBhcmFtIHtUcmFuc2l0aW9uTWFuYWdlcltdfSB0cmFuc2l0aW9uc1xuICogQHBhcmFtIHsoKSA9PiB2b2lkfSBmblxuICovXG5leHBvcnQgZnVuY3Rpb24gcnVuX291dF90cmFuc2l0aW9ucyh0cmFuc2l0aW9ucywgZm4pIHtcblx0dmFyIHJlbWFpbmluZyA9IHRyYW5zaXRpb25zLmxlbmd0aDtcblx0aWYgKHJlbWFpbmluZyA+IDApIHtcblx0XHR2YXIgY2hlY2sgPSAoKSA9PiAtLXJlbWFpbmluZyB8fCBmbigpO1xuXHRcdGZvciAodmFyIHRyYW5zaXRpb24gb2YgdHJhbnNpdGlvbnMpIHtcblx0XHRcdHRyYW5zaXRpb24ub3V0KGNoZWNrKTtcblx0XHR9XG5cdH0gZWxzZSB7XG5cdFx0Zm4oKTtcblx0fVxufVxuXG4vKipcbiAqIEBwYXJhbSB7RWZmZWN0fSBlZmZlY3RcbiAqIEBwYXJhbSB7VHJhbnNpdGlvbk1hbmFnZXJbXX0gdHJhbnNpdGlvbnNcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gbG9jYWxcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhdXNlX2NoaWxkcmVuKGVmZmVjdCwgdHJhbnNpdGlvbnMsIGxvY2FsKSB7XG5cdGlmICgoZWZmZWN0LmYgJiBJTkVSVCkgIT09IDApIHJldHVybjtcblx0ZWZmZWN0LmYgXj0gSU5FUlQ7XG5cblx0aWYgKGVmZmVjdC50cmFuc2l0aW9ucyAhPT0gbnVsbCkge1xuXHRcdGZvciAoY29uc3QgdHJhbnNpdGlvbiBvZiBlZmZlY3QudHJhbnNpdGlvbnMpIHtcblx0XHRcdGlmICh0cmFuc2l0aW9uLmlzX2dsb2JhbCB8fCBsb2NhbCkge1xuXHRcdFx0XHR0cmFuc2l0aW9ucy5wdXNoKHRyYW5zaXRpb24pO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHZhciBjaGlsZCA9IGVmZmVjdC5maXJzdDtcblxuXHR3aGlsZSAoY2hpbGQgIT09IG51bGwpIHtcblx0XHR2YXIgc2libGluZyA9IGNoaWxkLm5leHQ7XG5cdFx0dmFyIHRyYW5zcGFyZW50ID0gKGNoaWxkLmYgJiBFRkZFQ1RfVFJBTlNQQVJFTlQpICE9PSAwIHx8IChjaGlsZC5mICYgQlJBTkNIX0VGRkVDVCkgIT09IDA7XG5cdFx0Ly8gVE9ETyB3ZSBkb24ndCBuZWVkIHRvIGNhbGwgcGF1c2VfY2hpbGRyZW4gcmVjdXJzaXZlbHkgd2l0aCBhIGxpbmtlZCBsaXN0IGluIHBsYWNlXG5cdFx0Ly8gaXQncyBzbGlnaHRseSBtb3JlIGludm9sdmVkIHRob3VnaCBhcyB3ZSBoYXZlIHRvIGFjY291bnQgZm9yIGB0cmFuc3BhcmVudGAgY2hhbmdpbmdcblx0XHQvLyB0aHJvdWdoIHRoZSB0cmVlLlxuXHRcdHBhdXNlX2NoaWxkcmVuKGNoaWxkLCB0cmFuc2l0aW9ucywgdHJhbnNwYXJlbnQgPyBsb2NhbCA6IGZhbHNlKTtcblx0XHRjaGlsZCA9IHNpYmxpbmc7XG5cdH1cbn1cblxuLyoqXG4gKiBUaGUgb3Bwb3NpdGUgb2YgYHBhdXNlX2VmZmVjdGAuIFdlIGNhbGwgdGhpcyBpZiAoZm9yIGV4YW1wbGUpXG4gKiBgeGAgYmVjb21lcyBmYWxzeSB0aGVuIHRydXRoeTogYHsjaWYgeH0uLi57L2lmfWBcbiAqIEBwYXJhbSB7RWZmZWN0fSBlZmZlY3RcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlc3VtZV9lZmZlY3QoZWZmZWN0KSB7XG5cdHJlc3VtZV9jaGlsZHJlbihlZmZlY3QsIHRydWUpO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7RWZmZWN0fSBlZmZlY3RcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gbG9jYWxcbiAqL1xuZnVuY3Rpb24gcmVzdW1lX2NoaWxkcmVuKGVmZmVjdCwgbG9jYWwpIHtcblx0aWYgKChlZmZlY3QuZiAmIElORVJUKSA9PT0gMCkgcmV0dXJuO1xuXG5cdC8vIElmIGEgZGVwZW5kZW5jeSBvZiB0aGlzIGVmZmVjdCBjaGFuZ2VkIHdoaWxlIGl0IHdhcyBwYXVzZWQsXG5cdC8vIGFwcGx5IHRoZSBjaGFuZ2Ugbm93XG5cdGlmIChjaGVja19kaXJ0aW5lc3MoZWZmZWN0KSkge1xuXHRcdHVwZGF0ZV9lZmZlY3QoZWZmZWN0KTtcblx0fVxuXG5cdC8vIEVuc3VyZSB3ZSB0b2dnbGUgdGhlIGZsYWcgYWZ0ZXIgcG9zc2libHkgdXBkYXRpbmcgdGhlIGVmZmVjdCBzbyB0aGF0XG5cdC8vIGVhY2ggYmxvY2sgbG9naWMgY2FuIGNvcnJlY3RseSBvcGVyYXRlIG9uIGluZXJ0IGl0ZW1zXG5cdGVmZmVjdC5mIF49IElORVJUO1xuXG5cdHZhciBjaGlsZCA9IGVmZmVjdC5maXJzdDtcblxuXHR3aGlsZSAoY2hpbGQgIT09IG51bGwpIHtcblx0XHR2YXIgc2libGluZyA9IGNoaWxkLm5leHQ7XG5cdFx0dmFyIHRyYW5zcGFyZW50ID0gKGNoaWxkLmYgJiBFRkZFQ1RfVFJBTlNQQVJFTlQpICE9PSAwIHx8IChjaGlsZC5mICYgQlJBTkNIX0VGRkVDVCkgIT09IDA7XG5cdFx0Ly8gVE9ETyB3ZSBkb24ndCBuZWVkIHRvIGNhbGwgcmVzdW1lX2NoaWxkcmVuIHJlY3Vyc2l2ZWx5IHdpdGggYSBsaW5rZWQgbGlzdCBpbiBwbGFjZVxuXHRcdC8vIGl0J3Mgc2xpZ2h0bHkgbW9yZSBpbnZvbHZlZCB0aG91Z2ggYXMgd2UgaGF2ZSB0byBhY2NvdW50IGZvciBgdHJhbnNwYXJlbnRgIGNoYW5naW5nXG5cdFx0Ly8gdGhyb3VnaCB0aGUgdHJlZS5cblx0XHRyZXN1bWVfY2hpbGRyZW4oY2hpbGQsIHRyYW5zcGFyZW50ID8gbG9jYWwgOiBmYWxzZSk7XG5cdFx0Y2hpbGQgPSBzaWJsaW5nO1xuXHR9XG5cblx0aWYgKGVmZmVjdC50cmFuc2l0aW9ucyAhPT0gbnVsbCkge1xuXHRcdGZvciAoY29uc3QgdHJhbnNpdGlvbiBvZiBlZmZlY3QudHJhbnNpdGlvbnMpIHtcblx0XHRcdGlmICh0cmFuc2l0aW9uLmlzX2dsb2JhbCB8fCBsb2NhbCkge1xuXHRcdFx0XHR0cmFuc2l0aW9uLmluKCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59XG4iLCJpbXBvcnQgeyBydW5fYWxsIH0gZnJvbSAnLi4vLi4vc2hhcmVkL3V0aWxzLmpzJztcblxuLy8gRmFsbGJhY2sgZm9yIHdoZW4gcmVxdWVzdElkbGVDYWxsYmFjayBpcyBub3QgYXZhaWxhYmxlXG5leHBvcnQgY29uc3QgcmVxdWVzdF9pZGxlX2NhbGxiYWNrID1cblx0dHlwZW9mIHJlcXVlc3RJZGxlQ2FsbGJhY2sgPT09ICd1bmRlZmluZWQnXG5cdFx0PyAoLyoqIEB0eXBlIHsoKSA9PiB2b2lkfSAqLyBjYikgPT4gc2V0VGltZW91dChjYiwgMSlcblx0XHQ6IHJlcXVlc3RJZGxlQ2FsbGJhY2s7XG5cbmxldCBpc19taWNyb190YXNrX3F1ZXVlZCA9IGZhbHNlO1xubGV0IGlzX2lkbGVfdGFza19xdWV1ZWQgPSBmYWxzZTtcblxuLyoqIEB0eXBlIHtBcnJheTwoKSA9PiB2b2lkPn0gKi9cbmxldCBjdXJyZW50X3F1ZXVlZF9taWNyb190YXNrcyA9IFtdO1xuLyoqIEB0eXBlIHtBcnJheTwoKSA9PiB2b2lkPn0gKi9cbmxldCBjdXJyZW50X3F1ZXVlZF9pZGxlX3Rhc2tzID0gW107XG5cbmZ1bmN0aW9uIHByb2Nlc3NfbWljcm9fdGFza3MoKSB7XG5cdGlzX21pY3JvX3Rhc2tfcXVldWVkID0gZmFsc2U7XG5cdGNvbnN0IHRhc2tzID0gY3VycmVudF9xdWV1ZWRfbWljcm9fdGFza3Muc2xpY2UoKTtcblx0Y3VycmVudF9xdWV1ZWRfbWljcm9fdGFza3MgPSBbXTtcblx0cnVuX2FsbCh0YXNrcyk7XG59XG5cbmZ1bmN0aW9uIHByb2Nlc3NfaWRsZV90YXNrcygpIHtcblx0aXNfaWRsZV90YXNrX3F1ZXVlZCA9IGZhbHNlO1xuXHRjb25zdCB0YXNrcyA9IGN1cnJlbnRfcXVldWVkX2lkbGVfdGFza3Muc2xpY2UoKTtcblx0Y3VycmVudF9xdWV1ZWRfaWRsZV90YXNrcyA9IFtdO1xuXHRydW5fYWxsKHRhc2tzKTtcbn1cblxuLyoqXG4gKiBAcGFyYW0geygpID0+IHZvaWR9IGZuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBxdWV1ZV9taWNyb190YXNrKGZuKSB7XG5cdGlmICghaXNfbWljcm9fdGFza19xdWV1ZWQpIHtcblx0XHRpc19taWNyb190YXNrX3F1ZXVlZCA9IHRydWU7XG5cdFx0cXVldWVNaWNyb3Rhc2socHJvY2Vzc19taWNyb190YXNrcyk7XG5cdH1cblx0Y3VycmVudF9xdWV1ZWRfbWljcm9fdGFza3MucHVzaChmbik7XG59XG5cbi8qKlxuICogQHBhcmFtIHsoKSA9PiB2b2lkfSBmblxuICovXG5leHBvcnQgZnVuY3Rpb24gcXVldWVfaWRsZV90YXNrKGZuKSB7XG5cdGlmICghaXNfaWRsZV90YXNrX3F1ZXVlZCkge1xuXHRcdGlzX2lkbGVfdGFza19xdWV1ZWQgPSB0cnVlO1xuXHRcdHJlcXVlc3RfaWRsZV9jYWxsYmFjayhwcm9jZXNzX2lkbGVfdGFza3MpO1xuXHR9XG5cdGN1cnJlbnRfcXVldWVkX2lkbGVfdGFza3MucHVzaChmbik7XG59XG5cbi8qKlxuICogU3luY2hyb25vdXNseSBydW4gYW55IHF1ZXVlZCB0YXNrcy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZsdXNoX3Rhc2tzKCkge1xuXHRpZiAoaXNfbWljcm9fdGFza19xdWV1ZWQpIHtcblx0XHRwcm9jZXNzX21pY3JvX3Rhc2tzKCk7XG5cdH1cblx0aWYgKGlzX2lkbGVfdGFza19xdWV1ZWQpIHtcblx0XHRwcm9jZXNzX2lkbGVfdGFza3MoKTtcblx0fVxufVxuIiwiLyogVGhpcyBmaWxlIGlzIGdlbmVyYXRlZCBieSBzY3JpcHRzL3Byb2Nlc3MtbWVzc2FnZXMvaW5kZXguanMuIERvIG5vdCBlZGl0ISAqL1xuXG5pbXBvcnQgeyBERVYgfSBmcm9tICdlc20tZW52JztcblxuLyoqXG4gKiBDYW5ub3QgdXNlIGB7QHJlbmRlciBjaGlsZHJlbiguLi4pfWAgaWYgdGhlIHBhcmVudCBjb21wb25lbnQgdXNlcyBgbGV0OmAgZGlyZWN0aXZlcy4gQ29uc2lkZXIgdXNpbmcgYSBuYW1lZCBzbmlwcGV0IGluc3RlYWRcbiAqIEByZXR1cm5zIHtuZXZlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGludmFsaWRfZGVmYXVsdF9zbmlwcGV0KCkge1xuXHRpZiAoREVWKSB7XG5cdFx0Y29uc3QgZXJyb3IgPSBuZXcgRXJyb3IoYGludmFsaWRfZGVmYXVsdF9zbmlwcGV0XFxuQ2Fubm90IHVzZSBcXGB7QHJlbmRlciBjaGlsZHJlbiguLi4pfVxcYCBpZiB0aGUgcGFyZW50IGNvbXBvbmVudCB1c2VzIFxcYGxldDpcXGAgZGlyZWN0aXZlcy4gQ29uc2lkZXIgdXNpbmcgYSBuYW1lZCBzbmlwcGV0IGluc3RlYWRcXG5odHRwczovL3N2ZWx0ZS5kZXYvZS9pbnZhbGlkX2RlZmF1bHRfc25pcHBldGApO1xuXG5cdFx0ZXJyb3IubmFtZSA9ICdTdmVsdGUgZXJyb3InO1xuXHRcdHRocm93IGVycm9yO1xuXHR9IGVsc2Uge1xuXHRcdHRocm93IG5ldyBFcnJvcihgaHR0cHM6Ly9zdmVsdGUuZGV2L2UvaW52YWxpZF9kZWZhdWx0X3NuaXBwZXRgKTtcblx0fVxufVxuXG4vKipcbiAqIGAlbmFtZSUoLi4uKWAgY2FuIG9ubHkgYmUgdXNlZCBkdXJpbmcgY29tcG9uZW50IGluaXRpYWxpc2F0aW9uXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICogQHJldHVybnMge25ldmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gbGlmZWN5Y2xlX291dHNpZGVfY29tcG9uZW50KG5hbWUpIHtcblx0aWYgKERFVikge1xuXHRcdGNvbnN0IGVycm9yID0gbmV3IEVycm9yKGBsaWZlY3ljbGVfb3V0c2lkZV9jb21wb25lbnRcXG5cXGAke25hbWV9KC4uLilcXGAgY2FuIG9ubHkgYmUgdXNlZCBkdXJpbmcgY29tcG9uZW50IGluaXRpYWxpc2F0aW9uXFxuaHR0cHM6Ly9zdmVsdGUuZGV2L2UvbGlmZWN5Y2xlX291dHNpZGVfY29tcG9uZW50YCk7XG5cblx0XHRlcnJvci5uYW1lID0gJ1N2ZWx0ZSBlcnJvcic7XG5cdFx0dGhyb3cgZXJyb3I7XG5cdH0gZWxzZSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKGBodHRwczovL3N2ZWx0ZS5kZXYvZS9saWZlY3ljbGVfb3V0c2lkZV9jb21wb25lbnRgKTtcblx0fVxufVxuXG4vKipcbiAqIGAlbmFtZSVgIGlzIG5vdCBhIHN0b3JlIHdpdGggYSBgc3Vic2NyaWJlYCBtZXRob2RcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gKiBAcmV0dXJucyB7bmV2ZXJ9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzdG9yZV9pbnZhbGlkX3NoYXBlKG5hbWUpIHtcblx0aWYgKERFVikge1xuXHRcdGNvbnN0IGVycm9yID0gbmV3IEVycm9yKGBzdG9yZV9pbnZhbGlkX3NoYXBlXFxuXFxgJHtuYW1lfVxcYCBpcyBub3QgYSBzdG9yZSB3aXRoIGEgXFxgc3Vic2NyaWJlXFxgIG1ldGhvZFxcbmh0dHBzOi8vc3ZlbHRlLmRldi9lL3N0b3JlX2ludmFsaWRfc2hhcGVgKTtcblxuXHRcdGVycm9yLm5hbWUgPSAnU3ZlbHRlIGVycm9yJztcblx0XHR0aHJvdyBlcnJvcjtcblx0fSBlbHNlIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoYGh0dHBzOi8vc3ZlbHRlLmRldi9lL3N0b3JlX2ludmFsaWRfc2hhcGVgKTtcblx0fVxufVxuXG4vKipcbiAqIFRoZSBgdGhpc2AgcHJvcCBvbiBgPHN2ZWx0ZTplbGVtZW50PmAgbXVzdCBiZSBhIHN0cmluZywgaWYgZGVmaW5lZFxuICogQHJldHVybnMge25ldmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gc3ZlbHRlX2VsZW1lbnRfaW52YWxpZF90aGlzX3ZhbHVlKCkge1xuXHRpZiAoREVWKSB7XG5cdFx0Y29uc3QgZXJyb3IgPSBuZXcgRXJyb3IoYHN2ZWx0ZV9lbGVtZW50X2ludmFsaWRfdGhpc192YWx1ZVxcblRoZSBcXGB0aGlzXFxgIHByb3Agb24gXFxgPHN2ZWx0ZTplbGVtZW50PlxcYCBtdXN0IGJlIGEgc3RyaW5nLCBpZiBkZWZpbmVkXFxuaHR0cHM6Ly9zdmVsdGUuZGV2L2Uvc3ZlbHRlX2VsZW1lbnRfaW52YWxpZF90aGlzX3ZhbHVlYCk7XG5cblx0XHRlcnJvci5uYW1lID0gJ1N2ZWx0ZSBlcnJvcic7XG5cdFx0dGhyb3cgZXJyb3I7XG5cdH0gZWxzZSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKGBodHRwczovL3N2ZWx0ZS5kZXYvZS9zdmVsdGVfZWxlbWVudF9pbnZhbGlkX3RoaXNfdmFsdWVgKTtcblx0fVxufSIsIi8qKiBAaW1wb3J0IHsgQ29tcG9uZW50Q29udGV4dCwgRGVyaXZlZCwgRWZmZWN0LCBSZWFjdGlvbiwgU2lnbmFsLCBTb3VyY2UsIFZhbHVlIH0gZnJvbSAnI2NsaWVudCcgKi9cbmltcG9ydCB7IERFViB9IGZyb20gJ2VzbS1lbnYnO1xuaW1wb3J0IHsgZGVmaW5lX3Byb3BlcnR5LCBnZXRfZGVzY3JpcHRvcnMsIGdldF9wcm90b3R5cGVfb2YgfSBmcm9tICcuLi9zaGFyZWQvdXRpbHMuanMnO1xuaW1wb3J0IHtcblx0ZGVzdHJveV9ibG9ja19lZmZlY3RfY2hpbGRyZW4sXG5cdGRlc3Ryb3lfZWZmZWN0X2NoaWxkcmVuLFxuXHRkZXN0cm95X2VmZmVjdF9kZXJpdmVkcyxcblx0ZWZmZWN0LFxuXHRleGVjdXRlX2VmZmVjdF90ZWFyZG93bixcblx0dW5saW5rX2VmZmVjdFxufSBmcm9tICcuL3JlYWN0aXZpdHkvZWZmZWN0cy5qcyc7XG5pbXBvcnQge1xuXHRFRkZFQ1QsXG5cdFJFTkRFUl9FRkZFQ1QsXG5cdERJUlRZLFxuXHRNQVlCRV9ESVJUWSxcblx0Q0xFQU4sXG5cdERFUklWRUQsXG5cdFVOT1dORUQsXG5cdERFU1RST1lFRCxcblx0SU5FUlQsXG5cdEJSQU5DSF9FRkZFQ1QsXG5cdFNUQVRFX1NZTUJPTCxcblx0QkxPQ0tfRUZGRUNULFxuXHRST09UX0VGRkVDVCxcblx0TEVHQUNZX0RFUklWRURfUFJPUCxcblx0RElTQ09OTkVDVEVELFxuXHRCT1VOREFSWV9FRkZFQ1Rcbn0gZnJvbSAnLi9jb25zdGFudHMuanMnO1xuaW1wb3J0IHsgZmx1c2hfdGFza3MgfSBmcm9tICcuL2RvbS90YXNrLmpzJztcbmltcG9ydCB7IGFkZF9vd25lciB9IGZyb20gJy4vZGV2L293bmVyc2hpcC5qcyc7XG5pbXBvcnQgeyBpbnRlcm5hbF9zZXQsIHNldCwgc291cmNlIH0gZnJvbSAnLi9yZWFjdGl2aXR5L3NvdXJjZXMuanMnO1xuaW1wb3J0IHsgZGVzdHJveV9kZXJpdmVkLCBleGVjdXRlX2Rlcml2ZWQsIHVwZGF0ZV9kZXJpdmVkIH0gZnJvbSAnLi9yZWFjdGl2aXR5L2Rlcml2ZWRzLmpzJztcbmltcG9ydCAqIGFzIGUgZnJvbSAnLi9lcnJvcnMuanMnO1xuaW1wb3J0IHsgbGlmZWN5Y2xlX291dHNpZGVfY29tcG9uZW50IH0gZnJvbSAnLi4vc2hhcmVkL2Vycm9ycy5qcyc7XG5pbXBvcnQgeyBGSUxFTkFNRSB9IGZyb20gJy4uLy4uL2NvbnN0YW50cy5qcyc7XG5pbXBvcnQgeyBsZWdhY3lfbW9kZV9mbGFnIH0gZnJvbSAnLi4vZmxhZ3MvaW5kZXguanMnO1xuaW1wb3J0IHsgdHJhY2luZ19leHByZXNzaW9ucywgZ2V0X3N0YWNrIH0gZnJvbSAnLi9kZXYvdHJhY2luZy5qcyc7XG5cbmNvbnN0IEZMVVNIX01JQ1JPVEFTSyA9IDA7XG5jb25zdCBGTFVTSF9TWU5DID0gMTtcbi8vIFVzZWQgZm9yIERFViB0aW1lIGVycm9yIGhhbmRsaW5nXG4vKiogQHBhcmFtIHtXZWFrU2V0PEVycm9yPn0gdmFsdWUgKi9cbmNvbnN0IGhhbmRsZWRfZXJyb3JzID0gbmV3IFdlYWtTZXQoKTtcbmV4cG9ydCBsZXQgaXNfdGhyb3dpbmdfZXJyb3IgPSBmYWxzZTtcblxuLy8gVXNlZCBmb3IgY29udHJvbGxpbmcgdGhlIGZsdXNoIG9mIGVmZmVjdHMuXG5sZXQgc2NoZWR1bGVyX21vZGUgPSBGTFVTSF9NSUNST1RBU0s7XG4vLyBVc2VkIGZvciBoYW5kbGluZyBzY2hlZHVsaW5nXG5sZXQgaXNfbWljcm9fdGFza19xdWV1ZWQgPSBmYWxzZTtcblxuLyoqIEB0eXBlIHtFZmZlY3QgfCBudWxsfSAqL1xubGV0IGxhc3Rfc2NoZWR1bGVkX2VmZmVjdCA9IG51bGw7XG5cbmV4cG9ydCBsZXQgaXNfZmx1c2hpbmdfZWZmZWN0ID0gZmFsc2U7XG5leHBvcnQgbGV0IGlzX2Rlc3Ryb3lpbmdfZWZmZWN0ID0gZmFsc2U7XG5cbi8qKiBAcGFyYW0ge2Jvb2xlYW59IHZhbHVlICovXG5leHBvcnQgZnVuY3Rpb24gc2V0X2lzX2ZsdXNoaW5nX2VmZmVjdCh2YWx1ZSkge1xuXHRpc19mbHVzaGluZ19lZmZlY3QgPSB2YWx1ZTtcbn1cblxuLyoqIEBwYXJhbSB7Ym9vbGVhbn0gdmFsdWUgKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXRfaXNfZGVzdHJveWluZ19lZmZlY3QodmFsdWUpIHtcblx0aXNfZGVzdHJveWluZ19lZmZlY3QgPSB2YWx1ZTtcbn1cblxuLy8gSGFuZGxlIGVmZmVjdCBxdWV1ZXNcblxuLyoqIEB0eXBlIHtFZmZlY3RbXX0gKi9cbmxldCBxdWV1ZWRfcm9vdF9lZmZlY3RzID0gW107XG5cbmxldCBmbHVzaF9jb3VudCA9IDA7XG4vKiogQHR5cGUge0VmZmVjdFtdfSBTdGFjayBvZiBlZmZlY3RzLCBkZXYgb25seSAqL1xubGV0IGRldl9lZmZlY3Rfc3RhY2sgPSBbXTtcbi8vIEhhbmRsZSBzaWduYWwgcmVhY3Rpdml0eSB0cmVlIGRlcGVuZGVuY2llcyBhbmQgcmVhY3Rpb25zXG5cbi8qKiBAdHlwZSB7bnVsbCB8IFJlYWN0aW9ufSAqL1xuZXhwb3J0IGxldCBhY3RpdmVfcmVhY3Rpb24gPSBudWxsO1xuXG4vKiogQHBhcmFtIHtudWxsIHwgUmVhY3Rpb259IHJlYWN0aW9uICovXG5leHBvcnQgZnVuY3Rpb24gc2V0X2FjdGl2ZV9yZWFjdGlvbihyZWFjdGlvbikge1xuXHRhY3RpdmVfcmVhY3Rpb24gPSByZWFjdGlvbjtcbn1cblxuLyoqIEB0eXBlIHtudWxsIHwgRWZmZWN0fSAqL1xuZXhwb3J0IGxldCBhY3RpdmVfZWZmZWN0ID0gbnVsbDtcblxuLyoqIEBwYXJhbSB7bnVsbCB8IEVmZmVjdH0gZWZmZWN0ICovXG5leHBvcnQgZnVuY3Rpb24gc2V0X2FjdGl2ZV9lZmZlY3QoZWZmZWN0KSB7XG5cdGFjdGl2ZV9lZmZlY3QgPSBlZmZlY3Q7XG59XG5cbi8qKlxuICogV2hlbiBzb3VyY2VzIGFyZSBjcmVhdGVkIHdpdGhpbiBhIGRlcml2ZWQsIHdlIHJlY29yZCB0aGVtIHNvIHRoYXQgd2UgY2FuIHNhZmVseSBhbGxvd1xuICogbG9jYWwgbXV0YXRpb25zIHRvIHRoZXNlIHNvdXJjZXMgd2l0aG91dCB0aGUgc2lkZS1lZmZlY3QgZXJyb3IgYmVpbmcgaW52b2tlZCB1bm5lY2Vzc2FyaWx5LlxuICogQHR5cGUge251bGwgfCBTb3VyY2VbXX1cbiAqL1xuZXhwb3J0IGxldCBkZXJpdmVkX3NvdXJjZXMgPSBudWxsO1xuXG4vKipcbiAqIEBwYXJhbSB7U291cmNlW10gfCBudWxsfSBzb3VyY2VzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXRfZGVyaXZlZF9zb3VyY2VzKHNvdXJjZXMpIHtcblx0ZGVyaXZlZF9zb3VyY2VzID0gc291cmNlcztcbn1cblxuLyoqXG4gKiBUaGUgZGVwZW5kZW5jaWVzIG9mIHRoZSByZWFjdGlvbiB0aGF0IGlzIGN1cnJlbnRseSBiZWluZyBleGVjdXRlZC4gSW4gbWFueSBjYXNlcyxcbiAqIHRoZSBkZXBlbmRlbmNpZXMgYXJlIHVuY2hhbmdlZCBiZXR3ZWVuIHJ1bnMsIGFuZCBzbyB0aGlzIHdpbGwgYmUgYG51bGxgIHVubGVzc1xuICogYW5kIHVudGlsIGEgbmV3IGRlcGVuZGVuY3kgaXMgYWNjZXNzZWQg4oCUIHdlIHRyYWNrIHRoaXMgdmlhIGBza2lwcGVkX2RlcHNgXG4gKiBAdHlwZSB7bnVsbCB8IFZhbHVlW119XG4gKi9cbmV4cG9ydCBsZXQgbmV3X2RlcHMgPSBudWxsO1xuXG5sZXQgc2tpcHBlZF9kZXBzID0gMDtcblxuLyoqXG4gKiBUcmFja3Mgd3JpdGVzIHRoYXQgdGhlIGVmZmVjdCBpdCdzIGV4ZWN1dGVkIGluIGRvZXNuJ3QgbGlzdGVuIHRvIHlldCxcbiAqIHNvIHRoYXQgdGhlIGRlcGVuZGVuY3kgY2FuIGJlIGFkZGVkIHRvIHRoZSBlZmZlY3QgbGF0ZXIgb24gaWYgaXQgdGhlbiByZWFkcyBpdFxuICogQHR5cGUge251bGwgfCBTb3VyY2VbXX1cbiAqL1xuZXhwb3J0IGxldCB1bnRyYWNrZWRfd3JpdGVzID0gbnVsbDtcblxuLyoqIEBwYXJhbSB7bnVsbCB8IFNvdXJjZVtdfSB2YWx1ZSAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldF91bnRyYWNrZWRfd3JpdGVzKHZhbHVlKSB7XG5cdHVudHJhY2tlZF93cml0ZXMgPSB2YWx1ZTtcbn1cblxuLyoqIEB0eXBlIHtudW1iZXJ9IFVzZWQgYnkgc291cmNlcyBhbmQgZGVyaXZlZHMgZm9yIGhhbmRsaW5nIHVwZGF0ZXMgdG8gdW5vd25lZCBkZXJpdmVkcyAqL1xubGV0IGN1cnJlbnRfdmVyc2lvbiA9IDA7XG5cbi8vIElmIHdlIGFyZSB3b3JraW5nIHdpdGggYSBnZXQoKSBjaGFpbiB0aGF0IGhhcyBubyBhY3RpdmUgY29udGFpbmVyLFxuLy8gdG8gcHJldmVudCBtZW1vcnkgbGVha3MsIHdlIHNraXAgYWRkaW5nIHRoZSByZWFjdGlvbi5cbmV4cG9ydCBsZXQgc2tpcF9yZWFjdGlvbiA9IGZhbHNlO1xuLy8gSGFuZGxlIGNvbGxlY3RpbmcgYWxsIHNpZ25hbHMgd2hpY2ggYXJlIHJlYWQgZHVyaW5nIGEgc3BlY2lmaWMgdGltZSBmcmFtZVxuLyoqIEB0eXBlIHtTZXQ8VmFsdWU+IHwgbnVsbH0gKi9cbmV4cG9ydCBsZXQgY2FwdHVyZWRfc2lnbmFscyA9IG51bGw7XG5cbi8qKiBAcGFyYW0ge1NldDxWYWx1ZT4gfCBudWxsfSB2YWx1ZSAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldF9jYXB0dXJlZF9zaWduYWxzKHZhbHVlKSB7XG5cdGNhcHR1cmVkX3NpZ25hbHMgPSB2YWx1ZTtcbn1cblxuLy8gSGFuZGxpbmcgcnVudGltZSBjb21wb25lbnQgY29udGV4dFxuLyoqIEB0eXBlIHtDb21wb25lbnRDb250ZXh0IHwgbnVsbH0gKi9cbmV4cG9ydCBsZXQgY29tcG9uZW50X2NvbnRleHQgPSBudWxsO1xuXG4vKiogQHBhcmFtIHtDb21wb25lbnRDb250ZXh0IHwgbnVsbH0gY29udGV4dCAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldF9jb21wb25lbnRfY29udGV4dChjb250ZXh0KSB7XG5cdGNvbXBvbmVudF9jb250ZXh0ID0gY29udGV4dDtcbn1cblxuLyoqXG4gKiBUaGUgY3VycmVudCBjb21wb25lbnQgZnVuY3Rpb24uIERpZmZlcmVudCBmcm9tIGN1cnJlbnQgY29tcG9uZW50IGNvbnRleHQ6XG4gKiBgYGBodG1sXG4gKiA8IS0tIEFwcC5zdmVsdGUgLS0+XG4gKiA8Rm9vPlxuICogICA8QmFyIC8+IDwhLS0gY29udGV4dCA9PSBGb28uc3ZlbHRlLCBmdW5jdGlvbiA9PSBBcHAuc3ZlbHRlIC0tPlxuICogPC9Gb28+XG4gKiBgYGBcbiAqIEB0eXBlIHtDb21wb25lbnRDb250ZXh0WydmdW5jdGlvbiddfVxuICovXG5leHBvcnQgbGV0IGRldl9jdXJyZW50X2NvbXBvbmVudF9mdW5jdGlvbiA9IG51bGw7XG5cbi8qKiBAcGFyYW0ge0NvbXBvbmVudENvbnRleHRbJ2Z1bmN0aW9uJ119IGZuICovXG5leHBvcnQgZnVuY3Rpb24gc2V0X2Rldl9jdXJyZW50X2NvbXBvbmVudF9mdW5jdGlvbihmbikge1xuXHRkZXZfY3VycmVudF9jb21wb25lbnRfZnVuY3Rpb24gPSBmbjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGluY3JlbWVudF92ZXJzaW9uKCkge1xuXHRyZXR1cm4gKytjdXJyZW50X3ZlcnNpb247XG59XG5cbi8qKiBAcmV0dXJucyB7Ym9vbGVhbn0gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc19ydW5lcygpIHtcblx0cmV0dXJuICFsZWdhY3lfbW9kZV9mbGFnIHx8IChjb21wb25lbnRfY29udGV4dCAhPT0gbnVsbCAmJiBjb21wb25lbnRfY29udGV4dC5sID09PSBudWxsKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgYSBkZXJpdmVkIG9yIGVmZmVjdCBpcyBkaXJ0eS5cbiAqIElmIGl0IGlzIE1BWUJFX0RJUlRZLCB3aWxsIHNldCB0aGUgc3RhdHVzIHRvIENMRUFOXG4gKiBAcGFyYW0ge1JlYWN0aW9ufSByZWFjdGlvblxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjaGVja19kaXJ0aW5lc3MocmVhY3Rpb24pIHtcblx0dmFyIGZsYWdzID0gcmVhY3Rpb24uZjtcblxuXHRpZiAoKGZsYWdzICYgRElSVFkpICE9PSAwKSB7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblxuXHRpZiAoKGZsYWdzICYgTUFZQkVfRElSVFkpICE9PSAwKSB7XG5cdFx0dmFyIGRlcGVuZGVuY2llcyA9IHJlYWN0aW9uLmRlcHM7XG5cdFx0dmFyIGlzX3Vub3duZWQgPSAoZmxhZ3MgJiBVTk9XTkVEKSAhPT0gMDtcblxuXHRcdGlmIChkZXBlbmRlbmNpZXMgIT09IG51bGwpIHtcblx0XHRcdHZhciBpO1xuXG5cdFx0XHRpZiAoKGZsYWdzICYgRElTQ09OTkVDVEVEKSAhPT0gMCkge1xuXHRcdFx0XHRmb3IgKGkgPSAwOyBpIDwgZGVwZW5kZW5jaWVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdFx0KGRlcGVuZGVuY2llc1tpXS5yZWFjdGlvbnMgPz89IFtdKS5wdXNoKHJlYWN0aW9uKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJlYWN0aW9uLmYgXj0gRElTQ09OTkVDVEVEO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3IgKGkgPSAwOyBpIDwgZGVwZW5kZW5jaWVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdHZhciBkZXBlbmRlbmN5ID0gZGVwZW5kZW5jaWVzW2ldO1xuXG5cdFx0XHRcdGlmIChjaGVja19kaXJ0aW5lc3MoLyoqIEB0eXBlIHtEZXJpdmVkfSAqLyAoZGVwZW5kZW5jeSkpKSB7XG5cdFx0XHRcdFx0dXBkYXRlX2Rlcml2ZWQoLyoqIEB0eXBlIHtEZXJpdmVkfSAqLyAoZGVwZW5kZW5jeSkpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gSWYgd2UgYXJlIHdvcmtpbmcgd2l0aCBhbiB1bm93bmVkIHNpZ25hbCBhcyBwYXJ0IG9mIGFuIGVmZmVjdCAoZHVlIHRvICFza2lwX3JlYWN0aW9uKVxuXHRcdFx0XHQvLyBhbmQgdGhlIHZlcnNpb24gaGFzbid0IGNoYW5nZWQsIHdlIHN0aWxsIG5lZWQgdG8gY2hlY2sgdGhhdCB0aGlzIHJlYWN0aW9uXG5cdFx0XHRcdC8vIGlzIGxpbmtlZCB0byB0aGUgZGVwZW5kZW5jeSBzb3VyY2Ug4oCTIG90aGVyd2lzZSBmdXR1cmUgdXBkYXRlcyB3aWxsIG5vdCBiZSBjYXVnaHQuXG5cdFx0XHRcdGlmIChcblx0XHRcdFx0XHRpc191bm93bmVkICYmXG5cdFx0XHRcdFx0YWN0aXZlX2VmZmVjdCAhPT0gbnVsbCAmJlxuXHRcdFx0XHRcdCFza2lwX3JlYWN0aW9uICYmXG5cdFx0XHRcdFx0IWRlcGVuZGVuY3k/LnJlYWN0aW9ucz8uaW5jbHVkZXMocmVhY3Rpb24pXG5cdFx0XHRcdCkge1xuXHRcdFx0XHRcdChkZXBlbmRlbmN5LnJlYWN0aW9ucyA/Pz0gW10pLnB1c2gocmVhY3Rpb24pO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKGRlcGVuZGVuY3kudmVyc2lvbiA+IHJlYWN0aW9uLnZlcnNpb24pIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFVub3duZWQgc2lnbmFscyBzaG91bGQgbmV2ZXIgYmUgbWFya2VkIGFzIGNsZWFuLlxuXHRcdGlmICghaXNfdW5vd25lZCkge1xuXHRcdFx0c2V0X3NpZ25hbF9zdGF0dXMocmVhY3Rpb24sIENMRUFOKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZmFsc2U7XG59XG5cbi8qKlxuICogQHBhcmFtIHt1bmtub3dufSBlcnJvclxuICogQHBhcmFtIHtFZmZlY3R9IGVmZmVjdFxuICovXG5mdW5jdGlvbiBwcm9wYWdhdGVfZXJyb3IoZXJyb3IsIGVmZmVjdCkge1xuXHQvKiogQHR5cGUge0VmZmVjdCB8IG51bGx9ICovXG5cdHZhciBjdXJyZW50ID0gZWZmZWN0O1xuXG5cdHdoaWxlIChjdXJyZW50ICE9PSBudWxsKSB7XG5cdFx0aWYgKChjdXJyZW50LmYgJiBCT1VOREFSWV9FRkZFQ1QpICE9PSAwKSB7XG5cdFx0XHR0cnkge1xuXHRcdFx0XHQvLyBAdHMtZXhwZWN0LWVycm9yXG5cdFx0XHRcdGN1cnJlbnQuZm4oZXJyb3IpO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9IGNhdGNoIHtcblx0XHRcdFx0Ly8gUmVtb3ZlIGJvdW5kYXJ5IGZsYWcgZnJvbSBlZmZlY3Rcblx0XHRcdFx0Y3VycmVudC5mIF49IEJPVU5EQVJZX0VGRkVDVDtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRjdXJyZW50ID0gY3VycmVudC5wYXJlbnQ7XG5cdH1cblxuXHRpc190aHJvd2luZ19lcnJvciA9IGZhbHNlO1xuXHR0aHJvdyBlcnJvcjtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0VmZmVjdH0gZWZmZWN0XG4gKi9cbmZ1bmN0aW9uIHNob3VsZF9yZXRocm93X2Vycm9yKGVmZmVjdCkge1xuXHRyZXR1cm4gKFxuXHRcdChlZmZlY3QuZiAmIERFU1RST1lFRCkgPT09IDAgJiZcblx0XHQoZWZmZWN0LnBhcmVudCA9PT0gbnVsbCB8fCAoZWZmZWN0LnBhcmVudC5mICYgQk9VTkRBUllfRUZGRUNUKSA9PT0gMClcblx0KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlc2V0X2lzX3Rocm93aW5nX2Vycm9yKCkge1xuXHRpc190aHJvd2luZ19lcnJvciA9IGZhbHNlO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7dW5rbm93bn0gZXJyb3JcbiAqIEBwYXJhbSB7RWZmZWN0fSBlZmZlY3RcbiAqIEBwYXJhbSB7RWZmZWN0IHwgbnVsbH0gcHJldmlvdXNfZWZmZWN0XG4gKiBAcGFyYW0ge0NvbXBvbmVudENvbnRleHQgfCBudWxsfSBjb21wb25lbnRfY29udGV4dFxuICovXG5leHBvcnQgZnVuY3Rpb24gaGFuZGxlX2Vycm9yKGVycm9yLCBlZmZlY3QsIHByZXZpb3VzX2VmZmVjdCwgY29tcG9uZW50X2NvbnRleHQpIHtcblx0aWYgKGlzX3Rocm93aW5nX2Vycm9yKSB7XG5cdFx0aWYgKHByZXZpb3VzX2VmZmVjdCA9PT0gbnVsbCkge1xuXHRcdFx0aXNfdGhyb3dpbmdfZXJyb3IgPSBmYWxzZTtcblx0XHR9XG5cblx0XHRpZiAoc2hvdWxkX3JldGhyb3dfZXJyb3IoZWZmZWN0KSkge1xuXHRcdFx0dGhyb3cgZXJyb3I7XG5cdFx0fVxuXG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0aWYgKHByZXZpb3VzX2VmZmVjdCAhPT0gbnVsbCkge1xuXHRcdGlzX3Rocm93aW5nX2Vycm9yID0gdHJ1ZTtcblx0fVxuXG5cdGlmIChcblx0XHQhREVWIHx8XG5cdFx0Y29tcG9uZW50X2NvbnRleHQgPT09IG51bGwgfHxcblx0XHQhKGVycm9yIGluc3RhbmNlb2YgRXJyb3IpIHx8XG5cdFx0aGFuZGxlZF9lcnJvcnMuaGFzKGVycm9yKVxuXHQpIHtcblx0XHRwcm9wYWdhdGVfZXJyb3IoZXJyb3IsIGVmZmVjdCk7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0aGFuZGxlZF9lcnJvcnMuYWRkKGVycm9yKTtcblxuXHRjb25zdCBjb21wb25lbnRfc3RhY2sgPSBbXTtcblxuXHRjb25zdCBlZmZlY3RfbmFtZSA9IGVmZmVjdC5mbj8ubmFtZTtcblxuXHRpZiAoZWZmZWN0X25hbWUpIHtcblx0XHRjb21wb25lbnRfc3RhY2sucHVzaChlZmZlY3RfbmFtZSk7XG5cdH1cblxuXHQvKiogQHR5cGUge0NvbXBvbmVudENvbnRleHQgfCBudWxsfSAqL1xuXHRsZXQgY3VycmVudF9jb250ZXh0ID0gY29tcG9uZW50X2NvbnRleHQ7XG5cblx0d2hpbGUgKGN1cnJlbnRfY29udGV4dCAhPT0gbnVsbCkge1xuXHRcdGlmIChERVYpIHtcblx0XHRcdC8qKiBAdHlwZSB7c3RyaW5nfSAqL1xuXHRcdFx0dmFyIGZpbGVuYW1lID0gY3VycmVudF9jb250ZXh0LmZ1bmN0aW9uPy5bRklMRU5BTUVdO1xuXG5cdFx0XHRpZiAoZmlsZW5hbWUpIHtcblx0XHRcdFx0Y29uc3QgZmlsZSA9IGZpbGVuYW1lLnNwbGl0KCcvJykucG9wKCk7XG5cdFx0XHRcdGNvbXBvbmVudF9zdGFjay5wdXNoKGZpbGUpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGN1cnJlbnRfY29udGV4dCA9IGN1cnJlbnRfY29udGV4dC5wO1xuXHR9XG5cblx0Y29uc3QgaW5kZW50ID0gL0ZpcmVmb3gvLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCkgPyAnICAnIDogJ1xcdCc7XG5cdGRlZmluZV9wcm9wZXJ0eShlcnJvciwgJ21lc3NhZ2UnLCB7XG5cdFx0dmFsdWU6IGVycm9yLm1lc3NhZ2UgKyBgXFxuJHtjb21wb25lbnRfc3RhY2subWFwKChuYW1lKSA9PiBgXFxuJHtpbmRlbnR9aW4gJHtuYW1lfWApLmpvaW4oJycpfVxcbmBcblx0fSk7XG5cdGRlZmluZV9wcm9wZXJ0eShlcnJvciwgJ2NvbXBvbmVudF9zdGFjaycsIHtcblx0XHR2YWx1ZTogY29tcG9uZW50X3N0YWNrXG5cdH0pO1xuXG5cdGNvbnN0IHN0YWNrID0gZXJyb3Iuc3RhY2s7XG5cblx0Ly8gRmlsdGVyIG91dCBpbnRlcm5hbCBmaWxlcyBmcm9tIGNhbGxzdGFja1xuXHRpZiAoc3RhY2spIHtcblx0XHRjb25zdCBsaW5lcyA9IHN0YWNrLnNwbGl0KCdcXG4nKTtcblx0XHRjb25zdCBuZXdfbGluZXMgPSBbXTtcblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IGxpbmVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRjb25zdCBsaW5lID0gbGluZXNbaV07XG5cdFx0XHRpZiAobGluZS5pbmNsdWRlcygnc3ZlbHRlL3NyYy9pbnRlcm5hbCcpKSB7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXHRcdFx0bmV3X2xpbmVzLnB1c2gobGluZSk7XG5cdFx0fVxuXHRcdGRlZmluZV9wcm9wZXJ0eShlcnJvciwgJ3N0YWNrJywge1xuXHRcdFx0dmFsdWU6IG5ld19saW5lcy5qb2luKCdcXG4nKVxuXHRcdH0pO1xuXHR9XG5cblx0cHJvcGFnYXRlX2Vycm9yKGVycm9yLCBlZmZlY3QpO1xuXG5cdGlmIChzaG91bGRfcmV0aHJvd19lcnJvcihlZmZlY3QpKSB7XG5cdFx0dGhyb3cgZXJyb3I7XG5cdH1cbn1cblxuLyoqXG4gKiBAdGVtcGxhdGUgVlxuICogQHBhcmFtIHtSZWFjdGlvbn0gcmVhY3Rpb25cbiAqIEByZXR1cm5zIHtWfVxuICovXG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlX3JlYWN0aW9uKHJlYWN0aW9uKSB7XG5cdHZhciBwcmV2aW91c19kZXBzID0gbmV3X2RlcHM7XG5cdHZhciBwcmV2aW91c19za2lwcGVkX2RlcHMgPSBza2lwcGVkX2RlcHM7XG5cdHZhciBwcmV2aW91c191bnRyYWNrZWRfd3JpdGVzID0gdW50cmFja2VkX3dyaXRlcztcblx0dmFyIHByZXZpb3VzX3JlYWN0aW9uID0gYWN0aXZlX3JlYWN0aW9uO1xuXHR2YXIgcHJldmlvdXNfc2tpcF9yZWFjdGlvbiA9IHNraXBfcmVhY3Rpb247XG5cdHZhciBwcmV2X2Rlcml2ZWRfc291cmNlcyA9IGRlcml2ZWRfc291cmNlcztcblx0dmFyIHByZXZpb3VzX2NvbXBvbmVudF9jb250ZXh0ID0gY29tcG9uZW50X2NvbnRleHQ7XG5cdHZhciBmbGFncyA9IHJlYWN0aW9uLmY7XG5cblx0bmV3X2RlcHMgPSAvKiogQHR5cGUge251bGwgfCBWYWx1ZVtdfSAqLyAobnVsbCk7XG5cdHNraXBwZWRfZGVwcyA9IDA7XG5cdHVudHJhY2tlZF93cml0ZXMgPSBudWxsO1xuXHRhY3RpdmVfcmVhY3Rpb24gPSAoZmxhZ3MgJiAoQlJBTkNIX0VGRkVDVCB8IFJPT1RfRUZGRUNUKSkgPT09IDAgPyByZWFjdGlvbiA6IG51bGw7XG5cdHNraXBfcmVhY3Rpb24gPSAhaXNfZmx1c2hpbmdfZWZmZWN0ICYmIChmbGFncyAmIFVOT1dORUQpICE9PSAwO1xuXHRkZXJpdmVkX3NvdXJjZXMgPSBudWxsO1xuXHRjb21wb25lbnRfY29udGV4dCA9IHJlYWN0aW9uLmN0eDtcblxuXHR0cnkge1xuXHRcdHZhciByZXN1bHQgPSAvKiogQHR5cGUge0Z1bmN0aW9ufSAqLyAoMCwgcmVhY3Rpb24uZm4pKCk7XG5cdFx0dmFyIGRlcHMgPSByZWFjdGlvbi5kZXBzO1xuXG5cdFx0aWYgKG5ld19kZXBzICE9PSBudWxsKSB7XG5cdFx0XHR2YXIgaTtcblxuXHRcdFx0cmVtb3ZlX3JlYWN0aW9ucyhyZWFjdGlvbiwgc2tpcHBlZF9kZXBzKTtcblxuXHRcdFx0aWYgKGRlcHMgIT09IG51bGwgJiYgc2tpcHBlZF9kZXBzID4gMCkge1xuXHRcdFx0XHRkZXBzLmxlbmd0aCA9IHNraXBwZWRfZGVwcyArIG5ld19kZXBzLmxlbmd0aDtcblx0XHRcdFx0Zm9yIChpID0gMDsgaSA8IG5ld19kZXBzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdFx0ZGVwc1tza2lwcGVkX2RlcHMgKyBpXSA9IG5ld19kZXBzW2ldO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZWFjdGlvbi5kZXBzID0gZGVwcyA9IG5ld19kZXBzO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIXNraXBfcmVhY3Rpb24pIHtcblx0XHRcdFx0Zm9yIChpID0gc2tpcHBlZF9kZXBzOyBpIDwgZGVwcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRcdChkZXBzW2ldLnJlYWN0aW9ucyA/Pz0gW10pLnB1c2gocmVhY3Rpb24pO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSBlbHNlIGlmIChkZXBzICE9PSBudWxsICYmIHNraXBwZWRfZGVwcyA8IGRlcHMubGVuZ3RoKSB7XG5cdFx0XHRyZW1vdmVfcmVhY3Rpb25zKHJlYWN0aW9uLCBza2lwcGVkX2RlcHMpO1xuXHRcdFx0ZGVwcy5sZW5ndGggPSBza2lwcGVkX2RlcHM7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHJlc3VsdDtcblx0fSBmaW5hbGx5IHtcblx0XHRuZXdfZGVwcyA9IHByZXZpb3VzX2RlcHM7XG5cdFx0c2tpcHBlZF9kZXBzID0gcHJldmlvdXNfc2tpcHBlZF9kZXBzO1xuXHRcdHVudHJhY2tlZF93cml0ZXMgPSBwcmV2aW91c191bnRyYWNrZWRfd3JpdGVzO1xuXHRcdGFjdGl2ZV9yZWFjdGlvbiA9IHByZXZpb3VzX3JlYWN0aW9uO1xuXHRcdHNraXBfcmVhY3Rpb24gPSBwcmV2aW91c19za2lwX3JlYWN0aW9uO1xuXHRcdGRlcml2ZWRfc291cmNlcyA9IHByZXZfZGVyaXZlZF9zb3VyY2VzO1xuXHRcdGNvbXBvbmVudF9jb250ZXh0ID0gcHJldmlvdXNfY29tcG9uZW50X2NvbnRleHQ7XG5cdH1cbn1cblxuLyoqXG4gKiBAdGVtcGxhdGUgVlxuICogQHBhcmFtIHtSZWFjdGlvbn0gc2lnbmFsXG4gKiBAcGFyYW0ge1ZhbHVlPFY+fSBkZXBlbmRlbmN5XG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZnVuY3Rpb24gcmVtb3ZlX3JlYWN0aW9uKHNpZ25hbCwgZGVwZW5kZW5jeSkge1xuXHRsZXQgcmVhY3Rpb25zID0gZGVwZW5kZW5jeS5yZWFjdGlvbnM7XG5cdGlmIChyZWFjdGlvbnMgIT09IG51bGwpIHtcblx0XHR2YXIgaW5kZXggPSByZWFjdGlvbnMuaW5kZXhPZihzaWduYWwpO1xuXHRcdGlmIChpbmRleCAhPT0gLTEpIHtcblx0XHRcdHZhciBuZXdfbGVuZ3RoID0gcmVhY3Rpb25zLmxlbmd0aCAtIDE7XG5cdFx0XHRpZiAobmV3X2xlbmd0aCA9PT0gMCkge1xuXHRcdFx0XHRyZWFjdGlvbnMgPSBkZXBlbmRlbmN5LnJlYWN0aW9ucyA9IG51bGw7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHQvLyBTd2FwIHdpdGggbGFzdCBlbGVtZW50IGFuZCB0aGVuIHJlbW92ZS5cblx0XHRcdFx0cmVhY3Rpb25zW2luZGV4XSA9IHJlYWN0aW9uc1tuZXdfbGVuZ3RoXTtcblx0XHRcdFx0cmVhY3Rpb25zLnBvcCgpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHQvLyBJZiB0aGUgZGVyaXZlZCBoYXMgbm8gcmVhY3Rpb25zLCB0aGVuIHdlIGNhbiBkaXNjb25uZWN0IGl0IGZyb20gdGhlIGdyYXBoLFxuXHQvLyBhbGxvd2luZyBpdCB0byBlaXRoZXIgcmVjb25uZWN0IGluIHRoZSBmdXR1cmUsIG9yIGJlIEdDJ2QgYnkgdGhlIFZNLlxuXHRpZiAoXG5cdFx0cmVhY3Rpb25zID09PSBudWxsICYmXG5cdFx0KGRlcGVuZGVuY3kuZiAmIERFUklWRUQpICE9PSAwICYmXG5cdFx0Ly8gRGVzdHJveWluZyBhIGNoaWxkIGVmZmVjdCB3aGlsZSB1cGRhdGluZyBhIHBhcmVudCBlZmZlY3QgY2FuIGNhdXNlIGEgZGVwZW5kZW5jeSB0byBhcHBlYXJcblx0XHQvLyB0byBiZSB1bnVzZWQsIHdoZW4gaW4gZmFjdCBpdCBpcyB1c2VkIGJ5IHRoZSBjdXJyZW50bHktdXBkYXRpbmcgcGFyZW50LiBDaGVja2luZyBgbmV3X2RlcHNgXG5cdFx0Ly8gYWxsb3dzIHVzIHRvIHNraXAgdGhlIGV4cGVuc2l2ZSB3b3JrIG9mIGRpc2Nvbm5lY3RpbmcgYW5kIGltbWVkaWF0ZWx5IHJlY29ubmVjdGluZyBpdFxuXHRcdChuZXdfZGVwcyA9PT0gbnVsbCB8fCAhbmV3X2RlcHMuaW5jbHVkZXMoZGVwZW5kZW5jeSkpXG5cdCkge1xuXHRcdHNldF9zaWduYWxfc3RhdHVzKGRlcGVuZGVuY3ksIE1BWUJFX0RJUlRZKTtcblx0XHQvLyBJZiB3ZSBhcmUgd29ya2luZyB3aXRoIGEgZGVyaXZlZCB0aGF0IGlzIG93bmVkIGJ5IGFuIGVmZmVjdCwgdGhlbiBtYXJrIGl0IGFzIGJlaW5nXG5cdFx0Ly8gZGlzY29ubmVjdGVkLlxuXHRcdGlmICgoZGVwZW5kZW5jeS5mICYgKFVOT1dORUQgfCBESVNDT05ORUNURUQpKSA9PT0gMCkge1xuXHRcdFx0ZGVwZW5kZW5jeS5mIF49IERJU0NPTk5FQ1RFRDtcblx0XHR9XG5cdFx0cmVtb3ZlX3JlYWN0aW9ucygvKiogQHR5cGUge0Rlcml2ZWR9ICoqLyAoZGVwZW5kZW5jeSksIDApO1xuXHR9XG59XG5cbi8qKlxuICogQHBhcmFtIHtSZWFjdGlvbn0gc2lnbmFsXG4gKiBAcGFyYW0ge251bWJlcn0gc3RhcnRfaW5kZXhcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlX3JlYWN0aW9ucyhzaWduYWwsIHN0YXJ0X2luZGV4KSB7XG5cdHZhciBkZXBlbmRlbmNpZXMgPSBzaWduYWwuZGVwcztcblx0aWYgKGRlcGVuZGVuY2llcyA9PT0gbnVsbCkgcmV0dXJuO1xuXG5cdGZvciAodmFyIGkgPSBzdGFydF9pbmRleDsgaSA8IGRlcGVuZGVuY2llcy5sZW5ndGg7IGkrKykge1xuXHRcdHJlbW92ZV9yZWFjdGlvbihzaWduYWwsIGRlcGVuZGVuY2llc1tpXSk7XG5cdH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge0VmZmVjdH0gZWZmZWN0XG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZV9lZmZlY3QoZWZmZWN0KSB7XG5cdHZhciBmbGFncyA9IGVmZmVjdC5mO1xuXG5cdGlmICgoZmxhZ3MgJiBERVNUUk9ZRUQpICE9PSAwKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0c2V0X3NpZ25hbF9zdGF0dXMoZWZmZWN0LCBDTEVBTik7XG5cblx0dmFyIHByZXZpb3VzX2VmZmVjdCA9IGFjdGl2ZV9lZmZlY3Q7XG5cdHZhciBwcmV2aW91c19jb21wb25lbnRfY29udGV4dCA9IGNvbXBvbmVudF9jb250ZXh0O1xuXG5cdGFjdGl2ZV9lZmZlY3QgPSBlZmZlY3Q7XG5cblx0aWYgKERFVikge1xuXHRcdHZhciBwcmV2aW91c19jb21wb25lbnRfZm4gPSBkZXZfY3VycmVudF9jb21wb25lbnRfZnVuY3Rpb247XG5cdFx0ZGV2X2N1cnJlbnRfY29tcG9uZW50X2Z1bmN0aW9uID0gZWZmZWN0LmNvbXBvbmVudF9mdW5jdGlvbjtcblx0fVxuXG5cdHRyeSB7XG5cdFx0aWYgKChmbGFncyAmIEJMT0NLX0VGRkVDVCkgIT09IDApIHtcblx0XHRcdGRlc3Ryb3lfYmxvY2tfZWZmZWN0X2NoaWxkcmVuKGVmZmVjdCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGRlc3Ryb3lfZWZmZWN0X2NoaWxkcmVuKGVmZmVjdCk7XG5cdFx0fVxuXHRcdGRlc3Ryb3lfZWZmZWN0X2Rlcml2ZWRzKGVmZmVjdCk7XG5cblx0XHRleGVjdXRlX2VmZmVjdF90ZWFyZG93bihlZmZlY3QpO1xuXHRcdHZhciB0ZWFyZG93biA9IHVwZGF0ZV9yZWFjdGlvbihlZmZlY3QpO1xuXHRcdGVmZmVjdC50ZWFyZG93biA9IHR5cGVvZiB0ZWFyZG93biA9PT0gJ2Z1bmN0aW9uJyA/IHRlYXJkb3duIDogbnVsbDtcblx0XHRlZmZlY3QudmVyc2lvbiA9IGN1cnJlbnRfdmVyc2lvbjtcblxuXHRcdGlmIChERVYpIHtcblx0XHRcdGRldl9lZmZlY3Rfc3RhY2sucHVzaChlZmZlY3QpO1xuXHRcdH1cblx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRoYW5kbGVfZXJyb3IoZXJyb3IsIGVmZmVjdCwgcHJldmlvdXNfZWZmZWN0LCBwcmV2aW91c19jb21wb25lbnRfY29udGV4dCB8fCBlZmZlY3QuY3R4KTtcblx0fSBmaW5hbGx5IHtcblx0XHRhY3RpdmVfZWZmZWN0ID0gcHJldmlvdXNfZWZmZWN0O1xuXG5cdFx0aWYgKERFVikge1xuXHRcdFx0ZGV2X2N1cnJlbnRfY29tcG9uZW50X2Z1bmN0aW9uID0gcHJldmlvdXNfY29tcG9uZW50X2ZuO1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBsb2dfZWZmZWN0X3N0YWNrKCkge1xuXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuXHRjb25zb2xlLmVycm9yKFxuXHRcdCdMYXN0IHRlbiBlZmZlY3RzIHdlcmU6ICcsXG5cdFx0ZGV2X2VmZmVjdF9zdGFjay5zbGljZSgtMTApLm1hcCgoZCkgPT4gZC5mbilcblx0KTtcblx0ZGV2X2VmZmVjdF9zdGFjayA9IFtdO1xufVxuXG5mdW5jdGlvbiBpbmZpbml0ZV9sb29wX2d1YXJkKCkge1xuXHRpZiAoZmx1c2hfY291bnQgPiAxMDAwKSB7XG5cdFx0Zmx1c2hfY291bnQgPSAwO1xuXHRcdHRyeSB7XG5cdFx0XHRlLmVmZmVjdF91cGRhdGVfZGVwdGhfZXhjZWVkZWQoKTtcblx0XHR9IGNhdGNoIChlcnJvcikge1xuXHRcdFx0aWYgKERFVikge1xuXHRcdFx0XHQvLyBzdGFjayBpcyBnYXJiYWdlLCBpZ25vcmUuIEluc3RlYWQgYWRkIGEgY29uc29sZS5lcnJvciBtZXNzYWdlLlxuXHRcdFx0XHRkZWZpbmVfcHJvcGVydHkoZXJyb3IsICdzdGFjaycsIHtcblx0XHRcdFx0XHR2YWx1ZTogJydcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cdFx0XHQvLyBUcnkgYW5kIGhhbmRsZSB0aGUgZXJyb3Igc28gaXQgY2FuIGJlIGNhdWdodCBhdCBhIGJvdW5kYXJ5LCB0aGF0J3Ncblx0XHRcdC8vIGlmIHRoZXJlJ3MgYW4gZWZmZWN0IGF2YWlsYWJsZSBmcm9tIHdoZW4gaXQgd2FzIGxhc3Qgc2NoZWR1bGVkXG5cdFx0XHRpZiAobGFzdF9zY2hlZHVsZWRfZWZmZWN0ICE9PSBudWxsKSB7XG5cdFx0XHRcdGlmIChERVYpIHtcblx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0aGFuZGxlX2Vycm9yKGVycm9yLCBsYXN0X3NjaGVkdWxlZF9lZmZlY3QsIG51bGwsIG51bGwpO1xuXHRcdFx0XHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdFx0XHRcdC8vIE9ubHkgbG9nIHRoZSBlZmZlY3Qgc3RhY2sgaWYgdGhlIGVycm9yIGlzIHJlLXRocm93blxuXHRcdFx0XHRcdFx0bG9nX2VmZmVjdF9zdGFjaygpO1xuXHRcdFx0XHRcdFx0dGhyb3cgZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0aGFuZGxlX2Vycm9yKGVycm9yLCBsYXN0X3NjaGVkdWxlZF9lZmZlY3QsIG51bGwsIG51bGwpO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRpZiAoREVWKSB7XG5cdFx0XHRcdFx0bG9nX2VmZmVjdF9zdGFjaygpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHRocm93IGVycm9yO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRmbHVzaF9jb3VudCsrO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7QXJyYXk8RWZmZWN0Pn0gcm9vdF9lZmZlY3RzXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZnVuY3Rpb24gZmx1c2hfcXVldWVkX3Jvb3RfZWZmZWN0cyhyb290X2VmZmVjdHMpIHtcblx0dmFyIGxlbmd0aCA9IHJvb3RfZWZmZWN0cy5sZW5ndGg7XG5cdGlmIChsZW5ndGggPT09IDApIHtcblx0XHRyZXR1cm47XG5cdH1cblx0aW5maW5pdGVfbG9vcF9ndWFyZCgpO1xuXG5cdHZhciBwcmV2aW91c2x5X2ZsdXNoaW5nX2VmZmVjdCA9IGlzX2ZsdXNoaW5nX2VmZmVjdDtcblx0aXNfZmx1c2hpbmdfZWZmZWN0ID0gdHJ1ZTtcblxuXHR0cnkge1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBlZmZlY3QgPSByb290X2VmZmVjdHNbaV07XG5cblx0XHRcdGlmICgoZWZmZWN0LmYgJiBDTEVBTikgPT09IDApIHtcblx0XHRcdFx0ZWZmZWN0LmYgXj0gQ0xFQU47XG5cdFx0XHR9XG5cblx0XHRcdC8qKiBAdHlwZSB7RWZmZWN0W119ICovXG5cdFx0XHR2YXIgY29sbGVjdGVkX2VmZmVjdHMgPSBbXTtcblxuXHRcdFx0cHJvY2Vzc19lZmZlY3RzKGVmZmVjdCwgY29sbGVjdGVkX2VmZmVjdHMpO1xuXHRcdFx0Zmx1c2hfcXVldWVkX2VmZmVjdHMoY29sbGVjdGVkX2VmZmVjdHMpO1xuXHRcdH1cblx0fSBmaW5hbGx5IHtcblx0XHRpc19mbHVzaGluZ19lZmZlY3QgPSBwcmV2aW91c2x5X2ZsdXNoaW5nX2VmZmVjdDtcblx0fVxufVxuXG4vKipcbiAqIEBwYXJhbSB7QXJyYXk8RWZmZWN0Pn0gZWZmZWN0c1xuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmZ1bmN0aW9uIGZsdXNoX3F1ZXVlZF9lZmZlY3RzKGVmZmVjdHMpIHtcblx0dmFyIGxlbmd0aCA9IGVmZmVjdHMubGVuZ3RoO1xuXHRpZiAobGVuZ3RoID09PSAwKSByZXR1cm47XG5cblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuXHRcdHZhciBlZmZlY3QgPSBlZmZlY3RzW2ldO1xuXG5cdFx0aWYgKChlZmZlY3QuZiAmIChERVNUUk9ZRUQgfCBJTkVSVCkpID09PSAwKSB7XG5cdFx0XHR0cnkge1xuXHRcdFx0XHRpZiAoY2hlY2tfZGlydGluZXNzKGVmZmVjdCkpIHtcblx0XHRcdFx0XHR1cGRhdGVfZWZmZWN0KGVmZmVjdCk7XG5cblx0XHRcdFx0XHQvLyBFZmZlY3RzIHdpdGggbm8gZGVwZW5kZW5jaWVzIG9yIHRlYXJkb3duIGRvIG5vdCBnZXQgYWRkZWQgdG8gdGhlIGVmZmVjdCB0cmVlLlxuXHRcdFx0XHRcdC8vIERlZmVycmVkIGVmZmVjdHMgKGUuZy4gYCRlZmZlY3QoLi4uKWApIF9hcmVfIGFkZGVkIHRvIHRoZSB0cmVlIGJlY2F1c2Ugd2Vcblx0XHRcdFx0XHQvLyBkb24ndCBrbm93IGlmIHdlIG5lZWQgdG8ga2VlcCB0aGVtIHVudGlsIHRoZXkgYXJlIGV4ZWN1dGVkLiBEb2luZyB0aGUgY2hlY2tcblx0XHRcdFx0XHQvLyBoZXJlIChyYXRoZXIgdGhhbiBpbiBgdXBkYXRlX2VmZmVjdGApIGFsbG93cyB1cyB0byBza2lwIHRoZSB3b3JrIGZvclxuXHRcdFx0XHRcdC8vIGltbWVkaWF0ZSBlZmZlY3RzLlxuXHRcdFx0XHRcdGlmIChlZmZlY3QuZGVwcyA9PT0gbnVsbCAmJiBlZmZlY3QuZmlyc3QgPT09IG51bGwgJiYgZWZmZWN0Lm5vZGVzX3N0YXJ0ID09PSBudWxsKSB7XG5cdFx0XHRcdFx0XHRpZiAoZWZmZWN0LnRlYXJkb3duID09PSBudWxsKSB7XG5cdFx0XHRcdFx0XHRcdC8vIHJlbW92ZSB0aGlzIGVmZmVjdCBmcm9tIHRoZSBncmFwaFxuXHRcdFx0XHRcdFx0XHR1bmxpbmtfZWZmZWN0KGVmZmVjdCk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHQvLyBrZWVwIHRoZSBlZmZlY3QgaW4gdGhlIGdyYXBoLCBidXQgZnJlZSB1cCBzb21lIG1lbW9yeVxuXHRcdFx0XHRcdFx0XHRlZmZlY3QuZm4gPSBudWxsO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRcdFx0aGFuZGxlX2Vycm9yKGVycm9yLCBlZmZlY3QsIG51bGwsIGVmZmVjdC5jdHgpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBwcm9jZXNzX2RlZmVycmVkKCkge1xuXHRpc19taWNyb190YXNrX3F1ZXVlZCA9IGZhbHNlO1xuXHRpZiAoZmx1c2hfY291bnQgPiAxMDAxKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cdGNvbnN0IHByZXZpb3VzX3F1ZXVlZF9yb290X2VmZmVjdHMgPSBxdWV1ZWRfcm9vdF9lZmZlY3RzO1xuXHRxdWV1ZWRfcm9vdF9lZmZlY3RzID0gW107XG5cdGZsdXNoX3F1ZXVlZF9yb290X2VmZmVjdHMocHJldmlvdXNfcXVldWVkX3Jvb3RfZWZmZWN0cyk7XG5cblx0aWYgKCFpc19taWNyb190YXNrX3F1ZXVlZCkge1xuXHRcdGZsdXNoX2NvdW50ID0gMDtcblx0XHRsYXN0X3NjaGVkdWxlZF9lZmZlY3QgPSBudWxsO1xuXHRcdGlmIChERVYpIHtcblx0XHRcdGRldl9lZmZlY3Rfc3RhY2sgPSBbXTtcblx0XHR9XG5cdH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge0VmZmVjdH0gc2lnbmFsXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNjaGVkdWxlX2VmZmVjdChzaWduYWwpIHtcblx0aWYgKHNjaGVkdWxlcl9tb2RlID09PSBGTFVTSF9NSUNST1RBU0spIHtcblx0XHRpZiAoIWlzX21pY3JvX3Rhc2tfcXVldWVkKSB7XG5cdFx0XHRpc19taWNyb190YXNrX3F1ZXVlZCA9IHRydWU7XG5cdFx0XHRxdWV1ZU1pY3JvdGFzayhwcm9jZXNzX2RlZmVycmVkKTtcblx0XHR9XG5cdH1cblxuXHRsYXN0X3NjaGVkdWxlZF9lZmZlY3QgPSBzaWduYWw7XG5cblx0dmFyIGVmZmVjdCA9IHNpZ25hbDtcblxuXHR3aGlsZSAoZWZmZWN0LnBhcmVudCAhPT0gbnVsbCkge1xuXHRcdGVmZmVjdCA9IGVmZmVjdC5wYXJlbnQ7XG5cdFx0dmFyIGZsYWdzID0gZWZmZWN0LmY7XG5cblx0XHRpZiAoKGZsYWdzICYgKFJPT1RfRUZGRUNUIHwgQlJBTkNIX0VGRkVDVCkpICE9PSAwKSB7XG5cdFx0XHRpZiAoKGZsYWdzICYgQ0xFQU4pID09PSAwKSByZXR1cm47XG5cdFx0XHRlZmZlY3QuZiBePSBDTEVBTjtcblx0XHR9XG5cdH1cblxuXHRxdWV1ZWRfcm9vdF9lZmZlY3RzLnB1c2goZWZmZWN0KTtcbn1cblxuLyoqXG4gKlxuICogVGhpcyBmdW5jdGlvbiBib3RoIHJ1bnMgcmVuZGVyIGVmZmVjdHMgYW5kIGNvbGxlY3RzIHVzZXIgZWZmZWN0cyBpbiB0b3BvbG9naWNhbCBvcmRlclxuICogZnJvbSB0aGUgc3RhcnRpbmcgZWZmZWN0IHBhc3NlZCBpbi4gRWZmZWN0cyB3aWxsIGJlIGNvbGxlY3RlZCB3aGVuIHRoZXkgbWF0Y2ggdGhlIGZpbHRlcmVkXG4gKiBiaXR3aXNlIGZsYWcgcGFzc2VkIGluIG9ubHkuIFRoZSBjb2xsZWN0ZWQgZWZmZWN0cyBhcnJheSB3aWxsIGJlIHBvcHVsYXRlZCB3aXRoIGFsbCB0aGUgdXNlclxuICogZWZmZWN0cyB0byBiZSBmbHVzaGVkLlxuICpcbiAqIEBwYXJhbSB7RWZmZWN0fSBlZmZlY3RcbiAqIEBwYXJhbSB7RWZmZWN0W119IGNvbGxlY3RlZF9lZmZlY3RzXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZnVuY3Rpb24gcHJvY2Vzc19lZmZlY3RzKGVmZmVjdCwgY29sbGVjdGVkX2VmZmVjdHMpIHtcblx0dmFyIGN1cnJlbnRfZWZmZWN0ID0gZWZmZWN0LmZpcnN0O1xuXHR2YXIgZWZmZWN0cyA9IFtdO1xuXG5cdG1haW5fbG9vcDogd2hpbGUgKGN1cnJlbnRfZWZmZWN0ICE9PSBudWxsKSB7XG5cdFx0dmFyIGZsYWdzID0gY3VycmVudF9lZmZlY3QuZjtcblx0XHR2YXIgaXNfYnJhbmNoID0gKGZsYWdzICYgQlJBTkNIX0VGRkVDVCkgIT09IDA7XG5cdFx0dmFyIGlzX3NraXBwYWJsZV9icmFuY2ggPSBpc19icmFuY2ggJiYgKGZsYWdzICYgQ0xFQU4pICE9PSAwO1xuXHRcdHZhciBzaWJsaW5nID0gY3VycmVudF9lZmZlY3QubmV4dDtcblxuXHRcdGlmICghaXNfc2tpcHBhYmxlX2JyYW5jaCAmJiAoZmxhZ3MgJiBJTkVSVCkgPT09IDApIHtcblx0XHRcdGlmICgoZmxhZ3MgJiBSRU5ERVJfRUZGRUNUKSAhPT0gMCkge1xuXHRcdFx0XHRpZiAoaXNfYnJhbmNoKSB7XG5cdFx0XHRcdFx0Y3VycmVudF9lZmZlY3QuZiBePSBDTEVBTjtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0aWYgKGNoZWNrX2RpcnRpbmVzcyhjdXJyZW50X2VmZmVjdCkpIHtcblx0XHRcdFx0XHRcdFx0dXBkYXRlX2VmZmVjdChjdXJyZW50X2VmZmVjdCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRcdFx0XHRcdGhhbmRsZV9lcnJvcihlcnJvciwgY3VycmVudF9lZmZlY3QsIG51bGwsIGN1cnJlbnRfZWZmZWN0LmN0eCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0dmFyIGNoaWxkID0gY3VycmVudF9lZmZlY3QuZmlyc3Q7XG5cblx0XHRcdFx0aWYgKGNoaWxkICE9PSBudWxsKSB7XG5cdFx0XHRcdFx0Y3VycmVudF9lZmZlY3QgPSBjaGlsZDtcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIGlmICgoZmxhZ3MgJiBFRkZFQ1QpICE9PSAwKSB7XG5cdFx0XHRcdGVmZmVjdHMucHVzaChjdXJyZW50X2VmZmVjdCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKHNpYmxpbmcgPT09IG51bGwpIHtcblx0XHRcdGxldCBwYXJlbnQgPSBjdXJyZW50X2VmZmVjdC5wYXJlbnQ7XG5cblx0XHRcdHdoaWxlIChwYXJlbnQgIT09IG51bGwpIHtcblx0XHRcdFx0aWYgKGVmZmVjdCA9PT0gcGFyZW50KSB7XG5cdFx0XHRcdFx0YnJlYWsgbWFpbl9sb29wO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHZhciBwYXJlbnRfc2libGluZyA9IHBhcmVudC5uZXh0O1xuXHRcdFx0XHRpZiAocGFyZW50X3NpYmxpbmcgIT09IG51bGwpIHtcblx0XHRcdFx0XHRjdXJyZW50X2VmZmVjdCA9IHBhcmVudF9zaWJsaW5nO1xuXHRcdFx0XHRcdGNvbnRpbnVlIG1haW5fbG9vcDtcblx0XHRcdFx0fVxuXHRcdFx0XHRwYXJlbnQgPSBwYXJlbnQucGFyZW50O1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGN1cnJlbnRfZWZmZWN0ID0gc2libGluZztcblx0fVxuXG5cdC8vIFdlIG1pZ2h0IGJlIGRlYWxpbmcgd2l0aCBtYW55IGVmZmVjdHMgaGVyZSwgZmFyIG1vcmUgdGhhbiBjYW4gYmUgc3ByZWFkIGludG9cblx0Ly8gYW4gYXJyYXkgcHVzaCBjYWxsIChjYWxsc3RhY2sgb3ZlcmZsb3cpLiBTbyBsZXQncyBkZWFsIHdpdGggZWFjaCBlZmZlY3QgaW4gYSBsb29wLlxuXHRmb3IgKHZhciBpID0gMDsgaSA8IGVmZmVjdHMubGVuZ3RoOyBpKyspIHtcblx0XHRjaGlsZCA9IGVmZmVjdHNbaV07XG5cdFx0Y29sbGVjdGVkX2VmZmVjdHMucHVzaChjaGlsZCk7XG5cdFx0cHJvY2Vzc19lZmZlY3RzKGNoaWxkLCBjb2xsZWN0ZWRfZWZmZWN0cyk7XG5cdH1cbn1cblxuLyoqXG4gKiBJbnRlcm5hbCB2ZXJzaW9uIG9mIGBmbHVzaFN5bmNgIHdpdGggdGhlIG9wdGlvbiB0byBub3QgZmx1c2ggcHJldmlvdXMgZWZmZWN0cy5cbiAqIFJldHVybnMgdGhlIHJlc3VsdCBvZiB0aGUgcGFzc2VkIGZ1bmN0aW9uLCBpZiBnaXZlbi5cbiAqIEBwYXJhbSB7KCkgPT4gYW55fSBbZm5dXG4gKiBAcmV0dXJucyB7YW55fVxuICovXG5leHBvcnQgZnVuY3Rpb24gZmx1c2hfc3luYyhmbikge1xuXHR2YXIgcHJldmlvdXNfc2NoZWR1bGVyX21vZGUgPSBzY2hlZHVsZXJfbW9kZTtcblx0dmFyIHByZXZpb3VzX3F1ZXVlZF9yb290X2VmZmVjdHMgPSBxdWV1ZWRfcm9vdF9lZmZlY3RzO1xuXG5cdHRyeSB7XG5cdFx0aW5maW5pdGVfbG9vcF9ndWFyZCgpO1xuXG5cdFx0LyoqIEB0eXBlIHtFZmZlY3RbXX0gKi9cblx0XHRjb25zdCByb290X2VmZmVjdHMgPSBbXTtcblxuXHRcdHNjaGVkdWxlcl9tb2RlID0gRkxVU0hfU1lOQztcblx0XHRxdWV1ZWRfcm9vdF9lZmZlY3RzID0gcm9vdF9lZmZlY3RzO1xuXHRcdGlzX21pY3JvX3Rhc2tfcXVldWVkID0gZmFsc2U7XG5cblx0XHRmbHVzaF9xdWV1ZWRfcm9vdF9lZmZlY3RzKHByZXZpb3VzX3F1ZXVlZF9yb290X2VmZmVjdHMpO1xuXG5cdFx0dmFyIHJlc3VsdCA9IGZuPy4oKTtcblxuXHRcdGZsdXNoX3Rhc2tzKCk7XG5cdFx0aWYgKHF1ZXVlZF9yb290X2VmZmVjdHMubGVuZ3RoID4gMCB8fCByb290X2VmZmVjdHMubGVuZ3RoID4gMCkge1xuXHRcdFx0Zmx1c2hfc3luYygpO1xuXHRcdH1cblxuXHRcdGZsdXNoX2NvdW50ID0gMDtcblx0XHRsYXN0X3NjaGVkdWxlZF9lZmZlY3QgPSBudWxsO1xuXHRcdGlmIChERVYpIHtcblx0XHRcdGRldl9lZmZlY3Rfc3RhY2sgPSBbXTtcblx0XHR9XG5cblx0XHRyZXR1cm4gcmVzdWx0O1xuXHR9IGZpbmFsbHkge1xuXHRcdHNjaGVkdWxlcl9tb2RlID0gcHJldmlvdXNfc2NoZWR1bGVyX21vZGU7XG5cdFx0cXVldWVkX3Jvb3RfZWZmZWN0cyA9IHByZXZpb3VzX3F1ZXVlZF9yb290X2VmZmVjdHM7XG5cdH1cbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIG9uY2UgYW55IHBlbmRpbmcgc3RhdGUgY2hhbmdlcyBoYXZlIGJlZW4gYXBwbGllZC5cbiAqIEByZXR1cm5zIHtQcm9taXNlPHZvaWQ+fVxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gdGljaygpIHtcblx0YXdhaXQgUHJvbWlzZS5yZXNvbHZlKCk7XG5cdC8vIEJ5IGNhbGxpbmcgZmx1c2hfc3luYyB3ZSBndWFyYW50ZWUgdGhhdCBhbnkgcGVuZGluZyBzdGF0ZSBjaGFuZ2VzIGFyZSBhcHBsaWVkIGFmdGVyIG9uZSB0aWNrLlxuXHQvLyBUT0RPIGxvb2sgaW50byB3aGV0aGVyIHdlIGNhbiBtYWtlIGZsdXNoaW5nIHN1YnNlcXVlbnQgdXBkYXRlcyBzeW5jaHJvbm91c2x5IGluIHRoZSBmdXR1cmUuXG5cdGZsdXNoX3N5bmMoKTtcbn1cblxuLyoqXG4gKiBAdGVtcGxhdGUgVlxuICogQHBhcmFtIHtWYWx1ZTxWPn0gc2lnbmFsXG4gKiBAcmV0dXJucyB7Vn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldChzaWduYWwpIHtcblx0dmFyIGZsYWdzID0gc2lnbmFsLmY7XG5cdHZhciBpc19kZXJpdmVkID0gKGZsYWdzICYgREVSSVZFRCkgIT09IDA7XG5cblx0Ly8gSWYgdGhlIGRlcml2ZWQgaXMgZGVzdHJveWVkLCBqdXN0IGV4ZWN1dGUgaXQgYWdhaW4gd2l0aG91dCByZXRhaW5pbmdcblx0Ly8gaXRzIG1lbW9pc2F0aW9uIHByb3BlcnRpZXMgYXMgdGhlIGRlcml2ZWQgaXMgc3RhbGVcblx0aWYgKGlzX2Rlcml2ZWQgJiYgKGZsYWdzICYgREVTVFJPWUVEKSAhPT0gMCkge1xuXHRcdHZhciB2YWx1ZSA9IGV4ZWN1dGVfZGVyaXZlZCgvKiogQHR5cGUge0Rlcml2ZWR9ICovIChzaWduYWwpKTtcblx0XHQvLyBFbnN1cmUgdGhlIGRlcml2ZWQgcmVtYWlucyBkZXN0cm95ZWRcblx0XHRkZXN0cm95X2Rlcml2ZWQoLyoqIEB0eXBlIHtEZXJpdmVkfSAqLyAoc2lnbmFsKSk7XG5cdFx0cmV0dXJuIHZhbHVlO1xuXHR9XG5cblx0aWYgKGNhcHR1cmVkX3NpZ25hbHMgIT09IG51bGwpIHtcblx0XHRjYXB0dXJlZF9zaWduYWxzLmFkZChzaWduYWwpO1xuXHR9XG5cblx0Ly8gUmVnaXN0ZXIgdGhlIGRlcGVuZGVuY3kgb24gdGhlIGN1cnJlbnQgcmVhY3Rpb24gc2lnbmFsLlxuXHRpZiAoYWN0aXZlX3JlYWN0aW9uICE9PSBudWxsKSB7XG5cdFx0aWYgKGRlcml2ZWRfc291cmNlcyAhPT0gbnVsbCAmJiBkZXJpdmVkX3NvdXJjZXMuaW5jbHVkZXMoc2lnbmFsKSkge1xuXHRcdFx0ZS5zdGF0ZV91bnNhZmVfbG9jYWxfcmVhZCgpO1xuXHRcdH1cblx0XHR2YXIgZGVwcyA9IGFjdGl2ZV9yZWFjdGlvbi5kZXBzO1xuXG5cdFx0Ly8gSWYgdGhlIHNpZ25hbCBpcyBhY2Nlc3NpbmcgdGhlIHNhbWUgZGVwZW5kZW5jaWVzIGluIHRoZSBzYW1lXG5cdFx0Ly8gb3JkZXIgYXMgaXQgZGlkIGxhc3QgdGltZSwgaW5jcmVtZW50IGBza2lwcGVkX2RlcHNgXG5cdFx0Ly8gcmF0aGVyIHRoYW4gdXBkYXRpbmcgYG5ld19kZXBzYCwgd2hpY2ggY3JlYXRlcyBHQyBjb3N0XG5cdFx0aWYgKG5ld19kZXBzID09PSBudWxsICYmIGRlcHMgIT09IG51bGwgJiYgZGVwc1tza2lwcGVkX2RlcHNdID09PSBzaWduYWwpIHtcblx0XHRcdHNraXBwZWRfZGVwcysrO1xuXHRcdH0gZWxzZSBpZiAobmV3X2RlcHMgPT09IG51bGwpIHtcblx0XHRcdG5ld19kZXBzID0gW3NpZ25hbF07XG5cdFx0fSBlbHNlIHtcblx0XHRcdG5ld19kZXBzLnB1c2goc2lnbmFsKTtcblx0XHR9XG5cblx0XHRpZiAoXG5cdFx0XHR1bnRyYWNrZWRfd3JpdGVzICE9PSBudWxsICYmXG5cdFx0XHRhY3RpdmVfZWZmZWN0ICE9PSBudWxsICYmXG5cdFx0XHQoYWN0aXZlX2VmZmVjdC5mICYgQ0xFQU4pICE9PSAwICYmXG5cdFx0XHQoYWN0aXZlX2VmZmVjdC5mICYgQlJBTkNIX0VGRkVDVCkgPT09IDAgJiZcblx0XHRcdHVudHJhY2tlZF93cml0ZXMuaW5jbHVkZXMoc2lnbmFsKVxuXHRcdCkge1xuXHRcdFx0c2V0X3NpZ25hbF9zdGF0dXMoYWN0aXZlX2VmZmVjdCwgRElSVFkpO1xuXHRcdFx0c2NoZWR1bGVfZWZmZWN0KGFjdGl2ZV9lZmZlY3QpO1xuXHRcdH1cblx0fSBlbHNlIGlmIChpc19kZXJpdmVkICYmIC8qKiBAdHlwZSB7RGVyaXZlZH0gKi8gKHNpZ25hbCkuZGVwcyA9PT0gbnVsbCkge1xuXHRcdHZhciBkZXJpdmVkID0gLyoqIEB0eXBlIHtEZXJpdmVkfSAqLyAoc2lnbmFsKTtcblx0XHR2YXIgcGFyZW50ID0gZGVyaXZlZC5wYXJlbnQ7XG5cdFx0dmFyIHRhcmdldCA9IGRlcml2ZWQ7XG5cblx0XHR3aGlsZSAocGFyZW50ICE9PSBudWxsKSB7XG5cdFx0XHQvLyBBdHRhY2ggdGhlIGRlcml2ZWQgdG8gdGhlIG5lYXJlc3QgcGFyZW50IGVmZmVjdCwgaWYgdGhlcmUgYXJlIGRlcml2ZWRzXG5cdFx0XHQvLyBpbiBiZXR3ZWVuIHRoZW4gd2UgYWxzbyBuZWVkIHRvIGF0dGFjaCB0aGVtIHRvb1xuXHRcdFx0aWYgKChwYXJlbnQuZiAmIERFUklWRUQpICE9PSAwKSB7XG5cdFx0XHRcdHZhciBwYXJlbnRfZGVyaXZlZCA9IC8qKiBAdHlwZSB7RGVyaXZlZH0gKi8gKHBhcmVudCk7XG5cblx0XHRcdFx0dGFyZ2V0ID0gcGFyZW50X2Rlcml2ZWQ7XG5cdFx0XHRcdHBhcmVudCA9IHBhcmVudF9kZXJpdmVkLnBhcmVudDtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHZhciBwYXJlbnRfZWZmZWN0ID0gLyoqIEB0eXBlIHtFZmZlY3R9ICovIChwYXJlbnQpO1xuXG5cdFx0XHRcdGlmICghcGFyZW50X2VmZmVjdC5kZXJpdmVkcz8uaW5jbHVkZXModGFyZ2V0KSkge1xuXHRcdFx0XHRcdChwYXJlbnRfZWZmZWN0LmRlcml2ZWRzID8/PSBbXSkucHVzaCh0YXJnZXQpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGlmIChpc19kZXJpdmVkKSB7XG5cdFx0ZGVyaXZlZCA9IC8qKiBAdHlwZSB7RGVyaXZlZH0gKi8gKHNpZ25hbCk7XG5cblx0XHRpZiAoY2hlY2tfZGlydGluZXNzKGRlcml2ZWQpKSB7XG5cdFx0XHR1cGRhdGVfZGVyaXZlZChkZXJpdmVkKTtcblx0XHR9XG5cdH1cblxuXHRpZiAoXG5cdFx0REVWICYmXG5cdFx0dHJhY2luZ19leHByZXNzaW9ucyAhPT0gbnVsbCAmJlxuXHRcdGFjdGl2ZV9yZWFjdGlvbiAhPT0gbnVsbCAmJlxuXHRcdHRyYWNpbmdfZXhwcmVzc2lvbnMucmVhY3Rpb24gPT09IGFjdGl2ZV9yZWFjdGlvblxuXHQpIHtcblx0XHQvLyBVc2VkIHdoZW4gbWFwcGluZyBzdGF0ZSBiZXR3ZWVuIHNwZWNpYWwgYmxvY2tzIGxpa2UgYGVhY2hgXG5cdFx0aWYgKHNpZ25hbC5kZWJ1Zykge1xuXHRcdFx0c2lnbmFsLmRlYnVnKCk7XG5cdFx0fSBlbHNlIGlmIChzaWduYWwuY3JlYXRlZCkge1xuXHRcdFx0dmFyIGVudHJ5ID0gdHJhY2luZ19leHByZXNzaW9ucy5lbnRyaWVzLmdldChzaWduYWwpO1xuXG5cdFx0XHRpZiAoZW50cnkgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRlbnRyeSA9IHsgcmVhZDogW10gfTtcblx0XHRcdFx0dHJhY2luZ19leHByZXNzaW9ucy5lbnRyaWVzLnNldChzaWduYWwsIGVudHJ5KTtcblx0XHRcdH1cblxuXHRcdFx0ZW50cnkucmVhZC5wdXNoKGdldF9zdGFjaygnVHJhY2VkQXQnKSk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHNpZ25hbC52O1xufVxuXG4vKipcbiAqIExpa2UgYGdldGAsIGJ1dCBjaGVja3MgZm9yIGB1bmRlZmluZWRgLiBVc2VkIGZvciBgdmFyYCBkZWNsYXJhdGlvbnMgYmVjYXVzZSB0aGV5IGNhbiBiZSBhY2Nlc3NlZCBiZWZvcmUgYmVpbmcgZGVjbGFyZWRcbiAqIEB0ZW1wbGF0ZSBWXG4gKiBAcGFyYW0ge1ZhbHVlPFY+IHwgdW5kZWZpbmVkfSBzaWduYWxcbiAqIEByZXR1cm5zIHtWIHwgdW5kZWZpbmVkfVxuICovXG5leHBvcnQgZnVuY3Rpb24gc2FmZV9nZXQoc2lnbmFsKSB7XG5cdHJldHVybiBzaWduYWwgJiYgZ2V0KHNpZ25hbCk7XG59XG5cbi8qKlxuICogQ2FwdHVyZSBhbiBhcnJheSBvZiBhbGwgdGhlIHNpZ25hbHMgdGhhdCBhcmUgcmVhZCB3aGVuIGBmbmAgaXMgY2FsbGVkXG4gKiBAdGVtcGxhdGUgVFxuICogQHBhcmFtIHsoKSA9PiBUfSBmblxuICovXG5leHBvcnQgZnVuY3Rpb24gY2FwdHVyZV9zaWduYWxzKGZuKSB7XG5cdHZhciBwcmV2aW91c19jYXB0dXJlZF9zaWduYWxzID0gY2FwdHVyZWRfc2lnbmFscztcblx0Y2FwdHVyZWRfc2lnbmFscyA9IG5ldyBTZXQoKTtcblxuXHR2YXIgY2FwdHVyZWQgPSBjYXB0dXJlZF9zaWduYWxzO1xuXHR2YXIgc2lnbmFsO1xuXG5cdHRyeSB7XG5cdFx0dW50cmFjayhmbik7XG5cdFx0aWYgKHByZXZpb3VzX2NhcHR1cmVkX3NpZ25hbHMgIT09IG51bGwpIHtcblx0XHRcdGZvciAoc2lnbmFsIG9mIGNhcHR1cmVkX3NpZ25hbHMpIHtcblx0XHRcdFx0cHJldmlvdXNfY2FwdHVyZWRfc2lnbmFscy5hZGQoc2lnbmFsKTtcblx0XHRcdH1cblx0XHR9XG5cdH0gZmluYWxseSB7XG5cdFx0Y2FwdHVyZWRfc2lnbmFscyA9IHByZXZpb3VzX2NhcHR1cmVkX3NpZ25hbHM7XG5cdH1cblxuXHRyZXR1cm4gY2FwdHVyZWQ7XG59XG5cbi8qKlxuICogSW52b2tlcyBhIGZ1bmN0aW9uIGFuZCBjYXB0dXJlcyBhbGwgc2lnbmFscyB0aGF0IGFyZSByZWFkIGR1cmluZyB0aGUgaW52b2NhdGlvbixcbiAqIHRoZW4gaW52YWxpZGF0ZXMgdGhlbS5cbiAqIEBwYXJhbSB7KCkgPT4gYW55fSBmblxuICovXG5leHBvcnQgZnVuY3Rpb24gaW52YWxpZGF0ZV9pbm5lcl9zaWduYWxzKGZuKSB7XG5cdHZhciBjYXB0dXJlZCA9IGNhcHR1cmVfc2lnbmFscygoKSA9PiB1bnRyYWNrKGZuKSk7XG5cblx0Zm9yICh2YXIgc2lnbmFsIG9mIGNhcHR1cmVkKSB7XG5cdFx0Ly8gR28gb25lIGxldmVsIHVwIGJlY2F1c2UgZGVyaXZlZCBzaWduYWxzIGNyZWF0ZWQgYXMgcGFydCBvZiBwcm9wcyBpbiBsZWdhY3kgbW9kZVxuXHRcdGlmICgoc2lnbmFsLmYgJiBMRUdBQ1lfREVSSVZFRF9QUk9QKSAhPT0gMCkge1xuXHRcdFx0Zm9yIChjb25zdCBkZXAgb2YgLyoqIEB0eXBlIHtEZXJpdmVkfSAqLyAoc2lnbmFsKS5kZXBzIHx8IFtdKSB7XG5cdFx0XHRcdGlmICgoZGVwLmYgJiBERVJJVkVEKSA9PT0gMCkge1xuXHRcdFx0XHRcdC8vIFVzZSBpbnRlcm5hbF9zZXQgaW5zdGVhZCBvZiBzZXQgaGVyZSBhbmQgYmVsb3cgdG8gYXZvaWQgbXV0YXRpb24gdmFsaWRhdGlvblxuXHRcdFx0XHRcdGludGVybmFsX3NldChkZXAsIGRlcC52KTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRpbnRlcm5hbF9zZXQoc2lnbmFsLCBzaWduYWwudik7XG5cdFx0fVxuXHR9XG59XG5cbi8qKlxuICogV2hlbiB1c2VkIGluc2lkZSBhIFtgJGRlcml2ZWRgXShodHRwczovL3N2ZWx0ZS5kZXYvZG9jcy9zdmVsdGUvJGRlcml2ZWQpIG9yIFtgJGVmZmVjdGBdKGh0dHBzOi8vc3ZlbHRlLmRldi9kb2NzL3N2ZWx0ZS8kZWZmZWN0KSxcbiAqIGFueSBzdGF0ZSByZWFkIGluc2lkZSBgZm5gIHdpbGwgbm90IGJlIHRyZWF0ZWQgYXMgYSBkZXBlbmRlbmN5LlxuICpcbiAqIGBgYHRzXG4gKiAkZWZmZWN0KCgpID0+IHtcbiAqICAgLy8gdGhpcyB3aWxsIHJ1biB3aGVuIGBkYXRhYCBjaGFuZ2VzLCBidXQgbm90IHdoZW4gYHRpbWVgIGNoYW5nZXNcbiAqICAgc2F2ZShkYXRhLCB7XG4gKiAgICAgdGltZXN0YW1wOiB1bnRyYWNrKCgpID0+IHRpbWUpXG4gKiAgIH0pO1xuICogfSk7XG4gKiBgYGBcbiAqIEB0ZW1wbGF0ZSBUXG4gKiBAcGFyYW0geygpID0+IFR9IGZuXG4gKiBAcmV0dXJucyB7VH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVudHJhY2soZm4pIHtcblx0Y29uc3QgcHJldmlvdXNfcmVhY3Rpb24gPSBhY3RpdmVfcmVhY3Rpb247XG5cdHRyeSB7XG5cdFx0YWN0aXZlX3JlYWN0aW9uID0gbnVsbDtcblx0XHRyZXR1cm4gZm4oKTtcblx0fSBmaW5hbGx5IHtcblx0XHRhY3RpdmVfcmVhY3Rpb24gPSBwcmV2aW91c19yZWFjdGlvbjtcblx0fVxufVxuXG5jb25zdCBTVEFUVVNfTUFTSyA9IH4oRElSVFkgfCBNQVlCRV9ESVJUWSB8IENMRUFOKTtcblxuLyoqXG4gKiBAcGFyYW0ge1NpZ25hbH0gc2lnbmFsXG4gKiBAcGFyYW0ge251bWJlcn0gc3RhdHVzXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldF9zaWduYWxfc3RhdHVzKHNpZ25hbCwgc3RhdHVzKSB7XG5cdHNpZ25hbC5mID0gKHNpZ25hbC5mICYgU1RBVFVTX01BU0spIHwgc3RhdHVzO1xufVxuXG4vKipcbiAqIFJldHJpZXZlcyB0aGUgY29udGV4dCB0aGF0IGJlbG9uZ3MgdG8gdGhlIGNsb3Nlc3QgcGFyZW50IGNvbXBvbmVudCB3aXRoIHRoZSBzcGVjaWZpZWQgYGtleWAuXG4gKiBNdXN0IGJlIGNhbGxlZCBkdXJpbmcgY29tcG9uZW50IGluaXRpYWxpc2F0aW9uLlxuICpcbiAqIEB0ZW1wbGF0ZSBUXG4gKiBAcGFyYW0ge2FueX0ga2V5XG4gKiBAcmV0dXJucyB7VH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldENvbnRleHQoa2V5KSB7XG5cdGNvbnN0IGNvbnRleHRfbWFwID0gZ2V0X29yX2luaXRfY29udGV4dF9tYXAoJ2dldENvbnRleHQnKTtcblx0Y29uc3QgcmVzdWx0ID0gLyoqIEB0eXBlIHtUfSAqLyAoY29udGV4dF9tYXAuZ2V0KGtleSkpO1xuXG5cdGlmIChERVYpIHtcblx0XHRjb25zdCBmbiA9IC8qKiBAdHlwZSB7Q29tcG9uZW50Q29udGV4dH0gKi8gKGNvbXBvbmVudF9jb250ZXh0KS5mdW5jdGlvbjtcblx0XHRpZiAoZm4pIHtcblx0XHRcdGFkZF9vd25lcihyZXN1bHQsIGZuLCB0cnVlKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIEFzc29jaWF0ZXMgYW4gYXJiaXRyYXJ5IGBjb250ZXh0YCBvYmplY3Qgd2l0aCB0aGUgY3VycmVudCBjb21wb25lbnQgYW5kIHRoZSBzcGVjaWZpZWQgYGtleWBcbiAqIGFuZCByZXR1cm5zIHRoYXQgb2JqZWN0LiBUaGUgY29udGV4dCBpcyB0aGVuIGF2YWlsYWJsZSB0byBjaGlsZHJlbiBvZiB0aGUgY29tcG9uZW50XG4gKiAoaW5jbHVkaW5nIHNsb3R0ZWQgY29udGVudCkgd2l0aCBgZ2V0Q29udGV4dGAuXG4gKlxuICogTGlrZSBsaWZlY3ljbGUgZnVuY3Rpb25zLCB0aGlzIG11c3QgYmUgY2FsbGVkIGR1cmluZyBjb21wb25lbnQgaW5pdGlhbGlzYXRpb24uXG4gKlxuICogQHRlbXBsYXRlIFRcbiAqIEBwYXJhbSB7YW55fSBrZXlcbiAqIEBwYXJhbSB7VH0gY29udGV4dFxuICogQHJldHVybnMge1R9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXRDb250ZXh0KGtleSwgY29udGV4dCkge1xuXHRjb25zdCBjb250ZXh0X21hcCA9IGdldF9vcl9pbml0X2NvbnRleHRfbWFwKCdzZXRDb250ZXh0Jyk7XG5cdGNvbnRleHRfbWFwLnNldChrZXksIGNvbnRleHQpO1xuXHRyZXR1cm4gY29udGV4dDtcbn1cblxuLyoqXG4gKiBDaGVja3Mgd2hldGhlciBhIGdpdmVuIGBrZXlgIGhhcyBiZWVuIHNldCBpbiB0aGUgY29udGV4dCBvZiBhIHBhcmVudCBjb21wb25lbnQuXG4gKiBNdXN0IGJlIGNhbGxlZCBkdXJpbmcgY29tcG9uZW50IGluaXRpYWxpc2F0aW9uLlxuICpcbiAqIEBwYXJhbSB7YW55fSBrZXlcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5leHBvcnQgZnVuY3Rpb24gaGFzQ29udGV4dChrZXkpIHtcblx0Y29uc3QgY29udGV4dF9tYXAgPSBnZXRfb3JfaW5pdF9jb250ZXh0X21hcCgnaGFzQ29udGV4dCcpO1xuXHRyZXR1cm4gY29udGV4dF9tYXAuaGFzKGtleSk7XG59XG5cbi8qKlxuICogUmV0cmlldmVzIHRoZSB3aG9sZSBjb250ZXh0IG1hcCB0aGF0IGJlbG9uZ3MgdG8gdGhlIGNsb3Nlc3QgcGFyZW50IGNvbXBvbmVudC5cbiAqIE11c3QgYmUgY2FsbGVkIGR1cmluZyBjb21wb25lbnQgaW5pdGlhbGlzYXRpb24uIFVzZWZ1bCwgZm9yIGV4YW1wbGUsIGlmIHlvdVxuICogcHJvZ3JhbW1hdGljYWxseSBjcmVhdGUgYSBjb21wb25lbnQgYW5kIHdhbnQgdG8gcGFzcyB0aGUgZXhpc3RpbmcgY29udGV4dCB0byBpdC5cbiAqXG4gKiBAdGVtcGxhdGUge01hcDxhbnksIGFueT59IFtUPU1hcDxhbnksIGFueT5dXG4gKiBAcmV0dXJucyB7VH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEFsbENvbnRleHRzKCkge1xuXHRjb25zdCBjb250ZXh0X21hcCA9IGdldF9vcl9pbml0X2NvbnRleHRfbWFwKCdnZXRBbGxDb250ZXh0cycpO1xuXG5cdGlmIChERVYpIHtcblx0XHRjb25zdCBmbiA9IGNvbXBvbmVudF9jb250ZXh0Py5mdW5jdGlvbjtcblx0XHRpZiAoZm4pIHtcblx0XHRcdGZvciAoY29uc3QgdmFsdWUgb2YgY29udGV4dF9tYXAudmFsdWVzKCkpIHtcblx0XHRcdFx0YWRkX293bmVyKHZhbHVlLCBmbiwgdHJ1ZSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIC8qKiBAdHlwZSB7VH0gKi8gKGNvbnRleHRfbWFwKTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICogQHJldHVybnMge01hcDx1bmtub3duLCB1bmtub3duPn1cbiAqL1xuZnVuY3Rpb24gZ2V0X29yX2luaXRfY29udGV4dF9tYXAobmFtZSkge1xuXHRpZiAoY29tcG9uZW50X2NvbnRleHQgPT09IG51bGwpIHtcblx0XHRsaWZlY3ljbGVfb3V0c2lkZV9jb21wb25lbnQobmFtZSk7XG5cdH1cblxuXHRyZXR1cm4gKGNvbXBvbmVudF9jb250ZXh0LmMgPz89IG5ldyBNYXAoZ2V0X3BhcmVudF9jb250ZXh0KGNvbXBvbmVudF9jb250ZXh0KSB8fCB1bmRlZmluZWQpKTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0NvbXBvbmVudENvbnRleHR9IGNvbXBvbmVudF9jb250ZXh0XG4gKiBAcmV0dXJucyB7TWFwPHVua25vd24sIHVua25vd24+IHwgbnVsbH1cbiAqL1xuZnVuY3Rpb24gZ2V0X3BhcmVudF9jb250ZXh0KGNvbXBvbmVudF9jb250ZXh0KSB7XG5cdGxldCBwYXJlbnQgPSBjb21wb25lbnRfY29udGV4dC5wO1xuXHR3aGlsZSAocGFyZW50ICE9PSBudWxsKSB7XG5cdFx0Y29uc3QgY29udGV4dF9tYXAgPSBwYXJlbnQuYztcblx0XHRpZiAoY29udGV4dF9tYXAgIT09IG51bGwpIHtcblx0XHRcdHJldHVybiBjb250ZXh0X21hcDtcblx0XHR9XG5cdFx0cGFyZW50ID0gcGFyZW50LnA7XG5cdH1cblx0cmV0dXJuIG51bGw7XG59XG5cbi8qKlxuICogQHRlbXBsYXRlIHtudW1iZXIgfCBiaWdpbnR9IFRcbiAqIEBwYXJhbSB7VmFsdWU8VD59IHNpZ25hbFxuICogQHBhcmFtIHsxIHwgLTF9IFtkXVxuICogQHJldHVybnMge1R9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGUoc2lnbmFsLCBkID0gMSkge1xuXHR2YXIgdmFsdWUgPSBnZXQoc2lnbmFsKTtcblx0dmFyIHJlc3VsdCA9IGQgPT09IDEgPyB2YWx1ZSsrIDogdmFsdWUtLTtcblxuXHRzZXQoc2lnbmFsLCB2YWx1ZSk7XG5cblx0Ly8gQHRzLWV4cGVjdC1lcnJvclxuXHRyZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIEB0ZW1wbGF0ZSB7bnVtYmVyIHwgYmlnaW50fSBUXG4gKiBAcGFyYW0ge1ZhbHVlPFQ+fSBzaWduYWxcbiAqIEBwYXJhbSB7MSB8IC0xfSBbZF1cbiAqIEByZXR1cm5zIHtUfVxuICovXG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlX3ByZShzaWduYWwsIGQgPSAxKSB7XG5cdHZhciB2YWx1ZSA9IGdldChzaWduYWwpO1xuXG5cdC8vIEB0cy1leHBlY3QtZXJyb3Jcblx0cmV0dXJuIHNldChzaWduYWwsIGQgPT09IDEgPyArK3ZhbHVlIDogLS12YWx1ZSk7XG59XG5cbi8qKlxuICogQHBhcmFtIHtSZWNvcmQ8c3RyaW5nLCB1bmtub3duPn0gb2JqXG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBrZXlzXG4gKiBAcmV0dXJucyB7UmVjb3JkPHN0cmluZywgdW5rbm93bj59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBleGNsdWRlX2Zyb21fb2JqZWN0KG9iaiwga2V5cykge1xuXHQvKiogQHR5cGUge1JlY29yZDxzdHJpbmcsIHVua25vd24+fSAqL1xuXHR2YXIgcmVzdWx0ID0ge307XG5cblx0Zm9yICh2YXIga2V5IGluIG9iaikge1xuXHRcdGlmICgha2V5cy5pbmNsdWRlcyhrZXkpKSB7XG5cdFx0XHRyZXN1bHRba2V5XSA9IG9ialtrZXldO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogQHBhcmFtIHtSZWNvcmQ8c3RyaW5nLCB1bmtub3duPn0gcHJvcHNcbiAqIEBwYXJhbSB7YW55fSBydW5lc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gW2ZuXVxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwdXNoKHByb3BzLCBydW5lcyA9IGZhbHNlLCBmbikge1xuXHRjb21wb25lbnRfY29udGV4dCA9IHtcblx0XHRwOiBjb21wb25lbnRfY29udGV4dCxcblx0XHRjOiBudWxsLFxuXHRcdGU6IG51bGwsXG5cdFx0bTogZmFsc2UsXG5cdFx0czogcHJvcHMsXG5cdFx0eDogbnVsbCxcblx0XHRsOiBudWxsXG5cdH07XG5cblx0aWYgKGxlZ2FjeV9tb2RlX2ZsYWcgJiYgIXJ1bmVzKSB7XG5cdFx0Y29tcG9uZW50X2NvbnRleHQubCA9IHtcblx0XHRcdHM6IG51bGwsXG5cdFx0XHR1OiBudWxsLFxuXHRcdFx0cjE6IFtdLFxuXHRcdFx0cjI6IHNvdXJjZShmYWxzZSlcblx0XHR9O1xuXHR9XG5cblx0aWYgKERFVikge1xuXHRcdC8vIGNvbXBvbmVudCBmdW5jdGlvblxuXHRcdGNvbXBvbmVudF9jb250ZXh0LmZ1bmN0aW9uID0gZm47XG5cdFx0ZGV2X2N1cnJlbnRfY29tcG9uZW50X2Z1bmN0aW9uID0gZm47XG5cdH1cbn1cblxuLyoqXG4gKiBAdGVtcGxhdGUge1JlY29yZDxzdHJpbmcsIGFueT59IFRcbiAqIEBwYXJhbSB7VH0gW2NvbXBvbmVudF1cbiAqIEByZXR1cm5zIHtUfVxuICovXG5leHBvcnQgZnVuY3Rpb24gcG9wKGNvbXBvbmVudCkge1xuXHRjb25zdCBjb250ZXh0X3N0YWNrX2l0ZW0gPSBjb21wb25lbnRfY29udGV4dDtcblx0aWYgKGNvbnRleHRfc3RhY2tfaXRlbSAhPT0gbnVsbCkge1xuXHRcdGlmIChjb21wb25lbnQgIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0Y29udGV4dF9zdGFja19pdGVtLnggPSBjb21wb25lbnQ7XG5cdFx0fVxuXHRcdGNvbnN0IGNvbXBvbmVudF9lZmZlY3RzID0gY29udGV4dF9zdGFja19pdGVtLmU7XG5cdFx0aWYgKGNvbXBvbmVudF9lZmZlY3RzICE9PSBudWxsKSB7XG5cdFx0XHR2YXIgcHJldmlvdXNfZWZmZWN0ID0gYWN0aXZlX2VmZmVjdDtcblx0XHRcdHZhciBwcmV2aW91c19yZWFjdGlvbiA9IGFjdGl2ZV9yZWFjdGlvbjtcblx0XHRcdGNvbnRleHRfc3RhY2tfaXRlbS5lID0gbnVsbDtcblx0XHRcdHRyeSB7XG5cdFx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgY29tcG9uZW50X2VmZmVjdHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0XHR2YXIgY29tcG9uZW50X2VmZmVjdCA9IGNvbXBvbmVudF9lZmZlY3RzW2ldO1xuXHRcdFx0XHRcdHNldF9hY3RpdmVfZWZmZWN0KGNvbXBvbmVudF9lZmZlY3QuZWZmZWN0KTtcblx0XHRcdFx0XHRzZXRfYWN0aXZlX3JlYWN0aW9uKGNvbXBvbmVudF9lZmZlY3QucmVhY3Rpb24pO1xuXHRcdFx0XHRcdGVmZmVjdChjb21wb25lbnRfZWZmZWN0LmZuKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBmaW5hbGx5IHtcblx0XHRcdFx0c2V0X2FjdGl2ZV9lZmZlY3QocHJldmlvdXNfZWZmZWN0KTtcblx0XHRcdFx0c2V0X2FjdGl2ZV9yZWFjdGlvbihwcmV2aW91c19yZWFjdGlvbik7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGNvbXBvbmVudF9jb250ZXh0ID0gY29udGV4dF9zdGFja19pdGVtLnA7XG5cdFx0aWYgKERFVikge1xuXHRcdFx0ZGV2X2N1cnJlbnRfY29tcG9uZW50X2Z1bmN0aW9uID0gY29udGV4dF9zdGFja19pdGVtLnA/LmZ1bmN0aW9uID8/IG51bGw7XG5cdFx0fVxuXHRcdGNvbnRleHRfc3RhY2tfaXRlbS5tID0gdHJ1ZTtcblx0fVxuXHQvLyBNaWNyby1vcHRpbWl6YXRpb246IERvbid0IHNldCAuYSBhYm92ZSB0byB0aGUgZW1wdHkgb2JqZWN0XG5cdC8vIHNvIGl0IGNhbiBiZSBnYXJiYWdlLWNvbGxlY3RlZCB3aGVuIHRoZSByZXR1cm4gaGVyZSBpcyB1bnVzZWRcblx0cmV0dXJuIGNvbXBvbmVudCB8fCAvKiogQHR5cGUge1R9ICovICh7fSk7XG59XG5cbi8qKlxuICogUG9zc2libHkgdHJhdmVyc2UgYW4gb2JqZWN0IGFuZCByZWFkIGFsbCBpdHMgcHJvcGVydGllcyBzbyB0aGF0IHRoZXkncmUgYWxsIHJlYWN0aXZlIGluIGNhc2UgdGhpcyBpcyBgJHN0YXRlYC5cbiAqIERvZXMgb25seSBjaGVjayBmaXJzdCBsZXZlbCBvZiBhbiBvYmplY3QgZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnMgKGhldXJpc3RpYyBzaG91bGQgYmUgZ29vZCBmb3IgOTklIG9mIGFsbCBjYXNlcykuXG4gKiBAcGFyYW0ge2FueX0gdmFsdWVcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVlcF9yZWFkX3N0YXRlKHZhbHVlKSB7XG5cdGlmICh0eXBlb2YgdmFsdWUgIT09ICdvYmplY3QnIHx8ICF2YWx1ZSB8fCB2YWx1ZSBpbnN0YW5jZW9mIEV2ZW50VGFyZ2V0KSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0aWYgKFNUQVRFX1NZTUJPTCBpbiB2YWx1ZSkge1xuXHRcdGRlZXBfcmVhZCh2YWx1ZSk7XG5cdH0gZWxzZSBpZiAoIUFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG5cdFx0Zm9yIChsZXQga2V5IGluIHZhbHVlKSB7XG5cdFx0XHRjb25zdCBwcm9wID0gdmFsdWVba2V5XTtcblx0XHRcdGlmICh0eXBlb2YgcHJvcCA9PT0gJ29iamVjdCcgJiYgcHJvcCAmJiBTVEFURV9TWU1CT0wgaW4gcHJvcCkge1xuXHRcdFx0XHRkZWVwX3JlYWQocHJvcCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59XG5cbi8qKlxuICogRGVlcGx5IHRyYXZlcnNlIGFuIG9iamVjdCBhbmQgcmVhZCBhbGwgaXRzIHByb3BlcnRpZXNcbiAqIHNvIHRoYXQgdGhleSdyZSBhbGwgcmVhY3RpdmUgaW4gY2FzZSB0aGlzIGlzIGAkc3RhdGVgXG4gKiBAcGFyYW0ge2FueX0gdmFsdWVcbiAqIEBwYXJhbSB7U2V0PGFueT59IHZpc2l0ZWRcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVlcF9yZWFkKHZhbHVlLCB2aXNpdGVkID0gbmV3IFNldCgpKSB7XG5cdGlmIChcblx0XHR0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmXG5cdFx0dmFsdWUgIT09IG51bGwgJiZcblx0XHQvLyBXZSBkb24ndCB3YW50IHRvIHRyYXZlcnNlIERPTSBlbGVtZW50c1xuXHRcdCEodmFsdWUgaW5zdGFuY2VvZiBFdmVudFRhcmdldCkgJiZcblx0XHQhdmlzaXRlZC5oYXModmFsdWUpXG5cdCkge1xuXHRcdHZpc2l0ZWQuYWRkKHZhbHVlKTtcblx0XHQvLyBXaGVuIHdvcmtpbmcgd2l0aCBhIHBvc3NpYmxlIFN2ZWx0ZURhdGUsIHRoaXNcblx0XHQvLyB3aWxsIGVuc3VyZSB3ZSBjYXB0dXJlIGNoYW5nZXMgdG8gaXQuXG5cdFx0aWYgKHZhbHVlIGluc3RhbmNlb2YgRGF0ZSkge1xuXHRcdFx0dmFsdWUuZ2V0VGltZSgpO1xuXHRcdH1cblx0XHRmb3IgKGxldCBrZXkgaW4gdmFsdWUpIHtcblx0XHRcdHRyeSB7XG5cdFx0XHRcdGRlZXBfcmVhZCh2YWx1ZVtrZXldLCB2aXNpdGVkKTtcblx0XHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdFx0Ly8gY29udGludWVcblx0XHRcdH1cblx0XHR9XG5cdFx0Y29uc3QgcHJvdG8gPSBnZXRfcHJvdG90eXBlX29mKHZhbHVlKTtcblx0XHRpZiAoXG5cdFx0XHRwcm90byAhPT0gT2JqZWN0LnByb3RvdHlwZSAmJlxuXHRcdFx0cHJvdG8gIT09IEFycmF5LnByb3RvdHlwZSAmJlxuXHRcdFx0cHJvdG8gIT09IE1hcC5wcm90b3R5cGUgJiZcblx0XHRcdHByb3RvICE9PSBTZXQucHJvdG90eXBlICYmXG5cdFx0XHRwcm90byAhPT0gRGF0ZS5wcm90b3R5cGVcblx0XHQpIHtcblx0XHRcdGNvbnN0IGRlc2NyaXB0b3JzID0gZ2V0X2Rlc2NyaXB0b3JzKHByb3RvKTtcblx0XHRcdGZvciAobGV0IGtleSBpbiBkZXNjcmlwdG9ycykge1xuXHRcdFx0XHRjb25zdCBnZXQgPSBkZXNjcmlwdG9yc1trZXldLmdldDtcblx0XHRcdFx0aWYgKGdldCkge1xuXHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRnZXQuY2FsbCh2YWx1ZSk7XG5cdFx0XHRcdFx0fSBjYXRjaCAoZSkge1xuXHRcdFx0XHRcdFx0Ly8gY29udGludWVcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cbn1cblxuaWYgKERFVikge1xuXHQvKipcblx0ICogQHBhcmFtIHtzdHJpbmd9IHJ1bmVcblx0ICovXG5cdGZ1bmN0aW9uIHRocm93X3J1bmVfZXJyb3IocnVuZSkge1xuXHRcdGlmICghKHJ1bmUgaW4gZ2xvYmFsVGhpcykpIHtcblx0XHRcdC8vIFRPRE8gaWYgcGVvcGxlIHN0YXJ0IGFkanVzdGluZyB0aGUgXCJ0aGlzIGNhbiBjb250YWluIHJ1bmVzXCIgY29uZmlnIHRocm91Z2ggdi1wLXMgbW9yZSwgYWRqdXN0IHRoaXMgbWVzc2FnZVxuXHRcdFx0LyoqIEB0eXBlIHthbnl9ICovXG5cdFx0XHRsZXQgdmFsdWU7IC8vIGxldCdzIGhvcGUgbm9vbmUgbW9kaWZpZXMgdGhpcyBnbG9iYWwsIGJ1dCBiZWx0cyBhbmQgYnJhY2VzXG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZ2xvYmFsVGhpcywgcnVuZSwge1xuXHRcdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0XHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBnZXR0ZXItcmV0dXJuXG5cdFx0XHRcdGdldDogKCkgPT4ge1xuXHRcdFx0XHRcdGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0ZS5ydW5lX291dHNpZGVfc3ZlbHRlKHJ1bmUpO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRzZXQ6ICh2KSA9PiB7XG5cdFx0XHRcdFx0dmFsdWUgPSB2O1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9XG5cdH1cblxuXHR0aHJvd19ydW5lX2Vycm9yKCckc3RhdGUnKTtcblx0dGhyb3dfcnVuZV9lcnJvcignJGVmZmVjdCcpO1xuXHR0aHJvd19ydW5lX2Vycm9yKCckZGVyaXZlZCcpO1xuXHR0aHJvd19ydW5lX2Vycm9yKCckaW5zcGVjdCcpO1xuXHR0aHJvd19ydW5lX2Vycm9yKCckcHJvcHMnKTtcblx0dGhyb3dfcnVuZV9lcnJvcignJGJpbmRhYmxlJyk7XG59XG4iLCJjb25zdCByZWdleF9yZXR1cm5fY2hhcmFjdGVycyA9IC9cXHIvZztcblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gaGFzaChzdHIpIHtcblx0c3RyID0gc3RyLnJlcGxhY2UocmVnZXhfcmV0dXJuX2NoYXJhY3RlcnMsICcnKTtcblx0bGV0IGhhc2ggPSA1MzgxO1xuXHRsZXQgaSA9IHN0ci5sZW5ndGg7XG5cblx0d2hpbGUgKGktLSkgaGFzaCA9ICgoaGFzaCA8PCA1KSAtIGhhc2gpIF4gc3RyLmNoYXJDb2RlQXQoaSk7XG5cdHJldHVybiAoaGFzaCA+Pj4gMCkudG9TdHJpbmcoMzYpO1xufVxuXG5jb25zdCBWT0lEX0VMRU1FTlRfTkFNRVMgPSBbXG5cdCdhcmVhJyxcblx0J2Jhc2UnLFxuXHQnYnInLFxuXHQnY29sJyxcblx0J2NvbW1hbmQnLFxuXHQnZW1iZWQnLFxuXHQnaHInLFxuXHQnaW1nJyxcblx0J2lucHV0Jyxcblx0J2tleWdlbicsXG5cdCdsaW5rJyxcblx0J21ldGEnLFxuXHQncGFyYW0nLFxuXHQnc291cmNlJyxcblx0J3RyYWNrJyxcblx0J3dicidcbl07XG5cbi8qKlxuICogUmV0dXJucyBgdHJ1ZWAgaWYgYG5hbWVgIGlzIG9mIGEgdm9pZCBlbGVtZW50XG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNfdm9pZChuYW1lKSB7XG5cdHJldHVybiBWT0lEX0VMRU1FTlRfTkFNRVMuaW5jbHVkZXMobmFtZSkgfHwgbmFtZS50b0xvd2VyQ2FzZSgpID09PSAnIWRvY3R5cGUnO1xufVxuXG5jb25zdCBSRVNFUlZFRF9XT1JEUyA9IFtcblx0J2FyZ3VtZW50cycsXG5cdCdhd2FpdCcsXG5cdCdicmVhaycsXG5cdCdjYXNlJyxcblx0J2NhdGNoJyxcblx0J2NsYXNzJyxcblx0J2NvbnN0Jyxcblx0J2NvbnRpbnVlJyxcblx0J2RlYnVnZ2VyJyxcblx0J2RlZmF1bHQnLFxuXHQnZGVsZXRlJyxcblx0J2RvJyxcblx0J2Vsc2UnLFxuXHQnZW51bScsXG5cdCdldmFsJyxcblx0J2V4cG9ydCcsXG5cdCdleHRlbmRzJyxcblx0J2ZhbHNlJyxcblx0J2ZpbmFsbHknLFxuXHQnZm9yJyxcblx0J2Z1bmN0aW9uJyxcblx0J2lmJyxcblx0J2ltcGxlbWVudHMnLFxuXHQnaW1wb3J0Jyxcblx0J2luJyxcblx0J2luc3RhbmNlb2YnLFxuXHQnaW50ZXJmYWNlJyxcblx0J2xldCcsXG5cdCduZXcnLFxuXHQnbnVsbCcsXG5cdCdwYWNrYWdlJyxcblx0J3ByaXZhdGUnLFxuXHQncHJvdGVjdGVkJyxcblx0J3B1YmxpYycsXG5cdCdyZXR1cm4nLFxuXHQnc3RhdGljJyxcblx0J3N1cGVyJyxcblx0J3N3aXRjaCcsXG5cdCd0aGlzJyxcblx0J3Rocm93Jyxcblx0J3RydWUnLFxuXHQndHJ5Jyxcblx0J3R5cGVvZicsXG5cdCd2YXInLFxuXHQndm9pZCcsXG5cdCd3aGlsZScsXG5cdCd3aXRoJyxcblx0J3lpZWxkJ1xuXTtcblxuLyoqXG4gKiBSZXR1cm5zIGB0cnVlYCBpZiBgd29yZGAgaXMgYSByZXNlcnZlZCBKYXZhU2NyaXB0IGtleXdvcmRcbiAqIEBwYXJhbSB7c3RyaW5nfSB3b3JkXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc19yZXNlcnZlZCh3b3JkKSB7XG5cdHJldHVybiBSRVNFUlZFRF9XT1JEUy5pbmNsdWRlcyh3b3JkKTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNfY2FwdHVyZV9ldmVudChuYW1lKSB7XG5cdHJldHVybiBuYW1lLmVuZHNXaXRoKCdjYXB0dXJlJykgJiYgbmFtZSAhPT0gJ2dvdHBvaW50ZXJjYXB0dXJlJyAmJiBuYW1lICE9PSAnbG9zdHBvaW50ZXJjYXB0dXJlJztcbn1cblxuLyoqIExpc3Qgb2YgRWxlbWVudCBldmVudHMgdGhhdCB3aWxsIGJlIGRlbGVnYXRlZCAqL1xuY29uc3QgREVMRUdBVEVEX0VWRU5UUyA9IFtcblx0J2JlZm9yZWlucHV0Jyxcblx0J2NsaWNrJyxcblx0J2NoYW5nZScsXG5cdCdkYmxjbGljaycsXG5cdCdjb250ZXh0bWVudScsXG5cdCdmb2N1c2luJyxcblx0J2ZvY3Vzb3V0Jyxcblx0J2lucHV0Jyxcblx0J2tleWRvd24nLFxuXHQna2V5dXAnLFxuXHQnbW91c2Vkb3duJyxcblx0J21vdXNlbW92ZScsXG5cdCdtb3VzZW91dCcsXG5cdCdtb3VzZW92ZXInLFxuXHQnbW91c2V1cCcsXG5cdCdwb2ludGVyZG93bicsXG5cdCdwb2ludGVybW92ZScsXG5cdCdwb2ludGVyb3V0Jyxcblx0J3BvaW50ZXJvdmVyJyxcblx0J3BvaW50ZXJ1cCcsXG5cdCd0b3VjaGVuZCcsXG5cdCd0b3VjaG1vdmUnLFxuXHQndG91Y2hzdGFydCdcbl07XG5cbi8qKlxuICogUmV0dXJucyBgdHJ1ZWAgaWYgYGV2ZW50X25hbWVgIGlzIGEgZGVsZWdhdGVkIGV2ZW50XG4gKiBAcGFyYW0ge3N0cmluZ30gZXZlbnRfbmFtZVxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNfZGVsZWdhdGVkKGV2ZW50X25hbWUpIHtcblx0cmV0dXJuIERFTEVHQVRFRF9FVkVOVFMuaW5jbHVkZXMoZXZlbnRfbmFtZSk7XG59XG5cbi8qKlxuICogQXR0cmlidXRlcyB0aGF0IGFyZSBib29sZWFuLCBpLmUuIHRoZXkgYXJlIHByZXNlbnQgb3Igbm90IHByZXNlbnQuXG4gKi9cbmNvbnN0IERPTV9CT09MRUFOX0FUVFJJQlVURVMgPSBbXG5cdCdhbGxvd2Z1bGxzY3JlZW4nLFxuXHQnYXN5bmMnLFxuXHQnYXV0b2ZvY3VzJyxcblx0J2F1dG9wbGF5Jyxcblx0J2NoZWNrZWQnLFxuXHQnY29udHJvbHMnLFxuXHQnZGVmYXVsdCcsXG5cdCdkaXNhYmxlZCcsXG5cdCdmb3Jtbm92YWxpZGF0ZScsXG5cdCdoaWRkZW4nLFxuXHQnaW5kZXRlcm1pbmF0ZScsXG5cdCdpc21hcCcsXG5cdCdsb29wJyxcblx0J211bHRpcGxlJyxcblx0J211dGVkJyxcblx0J25vbW9kdWxlJyxcblx0J25vdmFsaWRhdGUnLFxuXHQnb3BlbicsXG5cdCdwbGF5c2lubGluZScsXG5cdCdyZWFkb25seScsXG5cdCdyZXF1aXJlZCcsXG5cdCdyZXZlcnNlZCcsXG5cdCdzZWFtbGVzcycsXG5cdCdzZWxlY3RlZCcsXG5cdCd3ZWJraXRkaXJlY3RvcnknXG5dO1xuXG4vKipcbiAqIFJldHVybnMgYHRydWVgIGlmIGBuYW1lYCBpcyBhIGJvb2xlYW4gYXR0cmlidXRlXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNfYm9vbGVhbl9hdHRyaWJ1dGUobmFtZSkge1xuXHRyZXR1cm4gRE9NX0JPT0xFQU5fQVRUUklCVVRFUy5pbmNsdWRlcyhuYW1lKTtcbn1cblxuLyoqXG4gKiBAdHlwZSB7UmVjb3JkPHN0cmluZywgc3RyaW5nPn1cbiAqIExpc3Qgb2YgYXR0cmlidXRlIG5hbWVzIHRoYXQgc2hvdWxkIGJlIGFsaWFzZWQgdG8gdGhlaXIgcHJvcGVydHkgbmFtZXNcbiAqIGJlY2F1c2UgdGhleSBiZWhhdmUgZGlmZmVyZW50bHkgYmV0d2VlbiBzZXR0aW5nIHRoZW0gYXMgYW4gYXR0cmlidXRlIGFuZFxuICogc2V0dGluZyB0aGVtIGFzIGEgcHJvcGVydHkuXG4gKi9cbmNvbnN0IEFUVFJJQlVURV9BTElBU0VTID0ge1xuXHQvLyBubyBgY2xhc3M6ICdjbGFzc05hbWUnYCBiZWNhdXNlIHdlIGhhbmRsZSB0aGF0IHNlcGFyYXRlbHlcblx0Zm9ybW5vdmFsaWRhdGU6ICdmb3JtTm9WYWxpZGF0ZScsXG5cdGlzbWFwOiAnaXNNYXAnLFxuXHRub21vZHVsZTogJ25vTW9kdWxlJyxcblx0cGxheXNpbmxpbmU6ICdwbGF5c0lubGluZScsXG5cdHJlYWRvbmx5OiAncmVhZE9ubHknLFxuXHRkZWZhdWx0dmFsdWU6ICdkZWZhdWx0VmFsdWUnLFxuXHRkZWZhdWx0Y2hlY2tlZDogJ2RlZmF1bHRDaGVja2VkJyxcblx0c3Jjb2JqZWN0OiAnc3JjT2JqZWN0J1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICovXG5leHBvcnQgZnVuY3Rpb24gbm9ybWFsaXplX2F0dHJpYnV0ZShuYW1lKSB7XG5cdG5hbWUgPSBuYW1lLnRvTG93ZXJDYXNlKCk7XG5cdHJldHVybiBBVFRSSUJVVEVfQUxJQVNFU1tuYW1lXSA/PyBuYW1lO1xufVxuXG5jb25zdCBET01fUFJPUEVSVElFUyA9IFtcblx0Li4uRE9NX0JPT0xFQU5fQVRUUklCVVRFUyxcblx0J2Zvcm1Ob1ZhbGlkYXRlJyxcblx0J2lzTWFwJyxcblx0J25vTW9kdWxlJyxcblx0J3BsYXlzSW5saW5lJyxcblx0J3JlYWRPbmx5Jyxcblx0J3ZhbHVlJyxcblx0J2luZXJ0Jyxcblx0J3ZvbHVtZScsXG5cdCdkZWZhdWx0VmFsdWUnLFxuXHQnZGVmYXVsdENoZWNrZWQnLFxuXHQnc3JjT2JqZWN0J1xuXTtcblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNfZG9tX3Byb3BlcnR5KG5hbWUpIHtcblx0cmV0dXJuIERPTV9QUk9QRVJUSUVTLmluY2x1ZGVzKG5hbWUpO1xufVxuXG5jb25zdCBOT05fU1RBVElDX1BST1BFUlRJRVMgPSBbJ2F1dG9mb2N1cycsICdtdXRlZCcsICdkZWZhdWx0VmFsdWUnLCAnZGVmYXVsdENoZWNrZWQnXTtcblxuLyoqXG4gKiBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZ2l2ZW4gYXR0cmlidXRlIGNhbm5vdCBiZSBzZXQgdGhyb3VnaCB0aGUgdGVtcGxhdGVcbiAqIHN0cmluZywgaS5lLiBuZWVkcyBzb21lIGtpbmQgb2YgSmF2YVNjcmlwdCBoYW5kbGluZyB0byB3b3JrLlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNhbm5vdF9iZV9zZXRfc3RhdGljYWxseShuYW1lKSB7XG5cdHJldHVybiBOT05fU1RBVElDX1BST1BFUlRJRVMuaW5jbHVkZXMobmFtZSk7XG59XG5cbi8qKlxuICogU3Vic2V0IG9mIGRlbGVnYXRlZCBldmVudHMgd2hpY2ggc2hvdWxkIGJlIHBhc3NpdmUgYnkgZGVmYXVsdC5cbiAqIFRoZXNlIHR3byBhcmUgYWxyZWFkeSBwYXNzaXZlIHZpYSBicm93c2VyIGRlZmF1bHRzIG9uIHdpbmRvdywgZG9jdW1lbnQgYW5kIGJvZHkuXG4gKiBCdXQgc2luY2VcbiAqIC0gd2UncmUgZGVsZWdhdGluZyB0aGVtXG4gKiAtIHRoZXkgaGFwcGVuIG9mdGVuXG4gKiAtIHRoZXkgYXBwbHkgdG8gbW9iaWxlIHdoaWNoIGlzIGdlbmVyYWxseSBsZXNzIHBlcmZvcm1hbnRcbiAqIHdlJ3JlIG1hcmtpbmcgdGhlbSBhcyBwYXNzaXZlIGJ5IGRlZmF1bHQgZm9yIG90aGVyIGVsZW1lbnRzLCB0b28uXG4gKi9cbmNvbnN0IFBBU1NJVkVfRVZFTlRTID0gWyd0b3VjaHN0YXJ0JywgJ3RvdWNobW92ZSddO1xuXG4vKipcbiAqIFJldHVybnMgYHRydWVgIGlmIGBuYW1lYCBpcyBhIHBhc3NpdmUgZXZlbnRcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc19wYXNzaXZlX2V2ZW50KG5hbWUpIHtcblx0cmV0dXJuIFBBU1NJVkVfRVZFTlRTLmluY2x1ZGVzKG5hbWUpO1xufVxuXG5jb25zdCBDT05URU5UX0VESVRBQkxFX0JJTkRJTkdTID0gWyd0ZXh0Q29udGVudCcsICdpbm5lckhUTUwnLCAnaW5uZXJUZXh0J107XG5cbi8qKiBAcGFyYW0ge3N0cmluZ30gbmFtZSAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzX2NvbnRlbnRfZWRpdGFibGVfYmluZGluZyhuYW1lKSB7XG5cdHJldHVybiBDT05URU5UX0VESVRBQkxFX0JJTkRJTkdTLmluY2x1ZGVzKG5hbWUpO1xufVxuXG5jb25zdCBMT0FEX0VSUk9SX0VMRU1FTlRTID0gW1xuXHQnYm9keScsXG5cdCdlbWJlZCcsXG5cdCdpZnJhbWUnLFxuXHQnaW1nJyxcblx0J2xpbmsnLFxuXHQnb2JqZWN0Jyxcblx0J3NjcmlwdCcsXG5cdCdzdHlsZScsXG5cdCd0cmFjaydcbl07XG5cbi8qKlxuICogUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVsZW1lbnQgZW1pdHMgYGxvYWRgIGFuZCBgZXJyb3JgIGV2ZW50c1xuICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzX2xvYWRfZXJyb3JfZWxlbWVudChuYW1lKSB7XG5cdHJldHVybiBMT0FEX0VSUk9SX0VMRU1FTlRTLmluY2x1ZGVzKG5hbWUpO1xufVxuXG5jb25zdCBTVkdfRUxFTUVOVFMgPSBbXG5cdCdhbHRHbHlwaCcsXG5cdCdhbHRHbHlwaERlZicsXG5cdCdhbHRHbHlwaEl0ZW0nLFxuXHQnYW5pbWF0ZScsXG5cdCdhbmltYXRlQ29sb3InLFxuXHQnYW5pbWF0ZU1vdGlvbicsXG5cdCdhbmltYXRlVHJhbnNmb3JtJyxcblx0J2NpcmNsZScsXG5cdCdjbGlwUGF0aCcsXG5cdCdjb2xvci1wcm9maWxlJyxcblx0J2N1cnNvcicsXG5cdCdkZWZzJyxcblx0J2Rlc2MnLFxuXHQnZGlzY2FyZCcsXG5cdCdlbGxpcHNlJyxcblx0J2ZlQmxlbmQnLFxuXHQnZmVDb2xvck1hdHJpeCcsXG5cdCdmZUNvbXBvbmVudFRyYW5zZmVyJyxcblx0J2ZlQ29tcG9zaXRlJyxcblx0J2ZlQ29udm9sdmVNYXRyaXgnLFxuXHQnZmVEaWZmdXNlTGlnaHRpbmcnLFxuXHQnZmVEaXNwbGFjZW1lbnRNYXAnLFxuXHQnZmVEaXN0YW50TGlnaHQnLFxuXHQnZmVEcm9wU2hhZG93Jyxcblx0J2ZlRmxvb2QnLFxuXHQnZmVGdW5jQScsXG5cdCdmZUZ1bmNCJyxcblx0J2ZlRnVuY0cnLFxuXHQnZmVGdW5jUicsXG5cdCdmZUdhdXNzaWFuQmx1cicsXG5cdCdmZUltYWdlJyxcblx0J2ZlTWVyZ2UnLFxuXHQnZmVNZXJnZU5vZGUnLFxuXHQnZmVNb3JwaG9sb2d5Jyxcblx0J2ZlT2Zmc2V0Jyxcblx0J2ZlUG9pbnRMaWdodCcsXG5cdCdmZVNwZWN1bGFyTGlnaHRpbmcnLFxuXHQnZmVTcG90TGlnaHQnLFxuXHQnZmVUaWxlJyxcblx0J2ZlVHVyYnVsZW5jZScsXG5cdCdmaWx0ZXInLFxuXHQnZm9udCcsXG5cdCdmb250LWZhY2UnLFxuXHQnZm9udC1mYWNlLWZvcm1hdCcsXG5cdCdmb250LWZhY2UtbmFtZScsXG5cdCdmb250LWZhY2Utc3JjJyxcblx0J2ZvbnQtZmFjZS11cmknLFxuXHQnZm9yZWlnbk9iamVjdCcsXG5cdCdnJyxcblx0J2dseXBoJyxcblx0J2dseXBoUmVmJyxcblx0J2hhdGNoJyxcblx0J2hhdGNocGF0aCcsXG5cdCdoa2VybicsXG5cdCdpbWFnZScsXG5cdCdsaW5lJyxcblx0J2xpbmVhckdyYWRpZW50Jyxcblx0J21hcmtlcicsXG5cdCdtYXNrJyxcblx0J21lc2gnLFxuXHQnbWVzaGdyYWRpZW50Jyxcblx0J21lc2hwYXRjaCcsXG5cdCdtZXNocm93Jyxcblx0J21ldGFkYXRhJyxcblx0J21pc3NpbmctZ2x5cGgnLFxuXHQnbXBhdGgnLFxuXHQncGF0aCcsXG5cdCdwYXR0ZXJuJyxcblx0J3BvbHlnb24nLFxuXHQncG9seWxpbmUnLFxuXHQncmFkaWFsR3JhZGllbnQnLFxuXHQncmVjdCcsXG5cdCdzZXQnLFxuXHQnc29saWRjb2xvcicsXG5cdCdzdG9wJyxcblx0J3N2ZycsXG5cdCdzd2l0Y2gnLFxuXHQnc3ltYm9sJyxcblx0J3RleHQnLFxuXHQndGV4dFBhdGgnLFxuXHQndHJlZicsXG5cdCd0c3BhbicsXG5cdCd1bmtub3duJyxcblx0J3VzZScsXG5cdCd2aWV3Jyxcblx0J3ZrZXJuJ1xuXTtcblxuLyoqIEBwYXJhbSB7c3RyaW5nfSBuYW1lICovXG5leHBvcnQgZnVuY3Rpb24gaXNfc3ZnKG5hbWUpIHtcblx0cmV0dXJuIFNWR19FTEVNRU5UUy5pbmNsdWRlcyhuYW1lKTtcbn1cblxuY29uc3QgTUFUSE1MX0VMRU1FTlRTID0gW1xuXHQnYW5ub3RhdGlvbicsXG5cdCdhbm5vdGF0aW9uLXhtbCcsXG5cdCdtYWN0aW9uJyxcblx0J21hdGgnLFxuXHQnbWVycm9yJyxcblx0J21mcmFjJyxcblx0J21pJyxcblx0J21tdWx0aXNjcmlwdHMnLFxuXHQnbW4nLFxuXHQnbW8nLFxuXHQnbW92ZXInLFxuXHQnbXBhZGRlZCcsXG5cdCdtcGhhbnRvbScsXG5cdCdtcHJlc2NyaXB0cycsXG5cdCdtcm9vdCcsXG5cdCdtcm93Jyxcblx0J21zJyxcblx0J21zcGFjZScsXG5cdCdtc3FydCcsXG5cdCdtc3R5bGUnLFxuXHQnbXN1YicsXG5cdCdtc3Vic3VwJyxcblx0J21zdXAnLFxuXHQnbXRhYmxlJyxcblx0J210ZCcsXG5cdCdtdGV4dCcsXG5cdCdtdHInLFxuXHQnbXVuZGVyJyxcblx0J211bmRlcm92ZXInLFxuXHQnc2VtYW50aWNzJ1xuXTtcblxuLyoqIEBwYXJhbSB7c3RyaW5nfSBuYW1lICovXG5leHBvcnQgZnVuY3Rpb24gaXNfbWF0aG1sKG5hbWUpIHtcblx0cmV0dXJuIE1BVEhNTF9FTEVNRU5UUy5pbmNsdWRlcyhuYW1lKTtcbn1cblxuY29uc3QgUlVORVMgPSAvKiogQHR5cGUge2NvbnN0fSAqLyAoW1xuXHQnJHN0YXRlJyxcblx0JyRzdGF0ZS5yYXcnLFxuXHQnJHN0YXRlLnNuYXBzaG90Jyxcblx0JyRwcm9wcycsXG5cdCckYmluZGFibGUnLFxuXHQnJGRlcml2ZWQnLFxuXHQnJGRlcml2ZWQuYnknLFxuXHQnJGVmZmVjdCcsXG5cdCckZWZmZWN0LnByZScsXG5cdCckZWZmZWN0LnRyYWNraW5nJyxcblx0JyRlZmZlY3Qucm9vdCcsXG5cdCckaW5zcGVjdCcsXG5cdCckaW5zcGVjdCgpLndpdGgnLFxuXHQnJGluc3BlY3QudHJhY2UnLFxuXHQnJGhvc3QnXG5dKTtcblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICogQHJldHVybnMge25hbWUgaXMgUlVORVNbbnVtYmVyXX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzX3J1bmUobmFtZSkge1xuXHRyZXR1cm4gUlVORVMuaW5jbHVkZXMoLyoqIEB0eXBlIHtSVU5FU1tudW1iZXJdfSAqLyAobmFtZSkpO1xufVxuXG4vKiogTGlzdCBvZiBlbGVtZW50cyB0aGF0IHJlcXVpcmUgcmF3IGNvbnRlbnRzIGFuZCBzaG91bGQgbm90IGhhdmUgU1NSIGNvbW1lbnRzIHB1dCBpbiB0aGVtICovXG5jb25zdCBSQVdfVEVYVF9FTEVNRU5UUyA9IC8qKiBAdHlwZSB7Y29uc3R9ICovIChbJ3RleHRhcmVhJywgJ3NjcmlwdCcsICdzdHlsZScsICd0aXRsZSddKTtcblxuLyoqIEBwYXJhbSB7c3RyaW5nfSBuYW1lICovXG5leHBvcnQgZnVuY3Rpb24gaXNfcmF3X3RleHRfZWxlbWVudChuYW1lKSB7XG5cdHJldHVybiBSQVdfVEVYVF9FTEVNRU5UUy5pbmNsdWRlcygvKiogQHR5cGUge1JBV19URVhUX0VMRU1FTlRTW251bWJlcl19ICovIChuYW1lKSk7XG59XG5cbi8qKlxuICogUHJldmVudCBkZXZ0b29scyB0cnlpbmcgdG8gbWFrZSBgbG9jYXRpb25gIGEgY2xpY2thYmxlIGxpbmsgYnkgaW5zZXJ0aW5nIGEgemVyby13aWR0aCBzcGFjZVxuICogQHBhcmFtIHtzdHJpbmcgfCB1bmRlZmluZWR9IGxvY2F0aW9uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzYW5pdGl6ZV9sb2NhdGlvbihsb2NhdGlvbikge1xuXHRyZXR1cm4gbG9jYXRpb24/LnJlcGxhY2UoL1xcLy9nLCAnL1xcdTIwMGInKTtcbn1cbiIsImltcG9ydCB7IGh5ZHJhdGluZyB9IGZyb20gJy4uL2h5ZHJhdGlvbi5qcyc7XG5pbXBvcnQgeyBjbGVhcl90ZXh0X2NvbnRlbnQsIGdldF9maXJzdF9jaGlsZCB9IGZyb20gJy4uL29wZXJhdGlvbnMuanMnO1xuaW1wb3J0IHsgcXVldWVfbWljcm9fdGFzayB9IGZyb20gJy4uL3Rhc2suanMnO1xuXG4vKipcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGRvbVxuICogQHBhcmFtIHtib29sZWFufSB2YWx1ZVxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhdXRvZm9jdXMoZG9tLCB2YWx1ZSkge1xuXHRpZiAodmFsdWUpIHtcblx0XHRjb25zdCBib2R5ID0gZG9jdW1lbnQuYm9keTtcblx0XHRkb20uYXV0b2ZvY3VzID0gdHJ1ZTtcblxuXHRcdHF1ZXVlX21pY3JvX3Rhc2soKCkgPT4ge1xuXHRcdFx0aWYgKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgPT09IGJvZHkpIHtcblx0XHRcdFx0ZG9tLmZvY3VzKCk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH1cbn1cblxuLyoqXG4gKiBUaGUgY2hpbGQgb2YgYSB0ZXh0YXJlYSBhY3R1YWxseSBjb3JyZXNwb25kcyB0byB0aGUgZGVmYXVsdFZhbHVlIHByb3BlcnR5LCBzbyB3ZSBuZWVkXG4gKiB0byByZW1vdmUgaXQgdXBvbiBoeWRyYXRpb24gdG8gYXZvaWQgYSBidWcgd2hlbiBzb21lb25lIHJlc2V0cyB0aGUgZm9ybSB2YWx1ZS5cbiAqIEBwYXJhbSB7SFRNTFRleHRBcmVhRWxlbWVudH0gZG9tXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZV90ZXh0YXJlYV9jaGlsZChkb20pIHtcblx0aWYgKGh5ZHJhdGluZyAmJiBnZXRfZmlyc3RfY2hpbGQoZG9tKSAhPT0gbnVsbCkge1xuXHRcdGNsZWFyX3RleHRfY29udGVudChkb20pO1xuXHR9XG59XG5cbmxldCBsaXN0ZW5pbmdfdG9fZm9ybV9yZXNldCA9IGZhbHNlO1xuXG5leHBvcnQgZnVuY3Rpb24gYWRkX2Zvcm1fcmVzZXRfbGlzdGVuZXIoKSB7XG5cdGlmICghbGlzdGVuaW5nX3RvX2Zvcm1fcmVzZXQpIHtcblx0XHRsaXN0ZW5pbmdfdG9fZm9ybV9yZXNldCA9IHRydWU7XG5cdFx0ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcblx0XHRcdCdyZXNldCcsXG5cdFx0XHQoZXZ0KSA9PiB7XG5cdFx0XHRcdC8vIE5lZWRzIHRvIGhhcHBlbiBvbmUgdGljayBsYXRlciBvciBlbHNlIHRoZSBkb20gcHJvcGVydGllcyBvZiB0aGUgZm9ybVxuXHRcdFx0XHQvLyBlbGVtZW50cyBoYXZlIG5vdCB1cGRhdGVkIHRvIHRoZWlyIHJlc2V0IHZhbHVlcyB5ZXRcblx0XHRcdFx0UHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKSA9PiB7XG5cdFx0XHRcdFx0aWYgKCFldnQuZGVmYXVsdFByZXZlbnRlZCkge1xuXHRcdFx0XHRcdFx0Zm9yIChjb25zdCBlIG9mIC8qKkB0eXBlIHtIVE1MRm9ybUVsZW1lbnR9ICovIChldnQudGFyZ2V0KS5lbGVtZW50cykge1xuXHRcdFx0XHRcdFx0XHQvLyBAdHMtZXhwZWN0LWVycm9yXG5cdFx0XHRcdFx0XHRcdGUuX19vbl9yPy4oKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pO1xuXHRcdFx0fSxcblx0XHRcdC8vIEluIHRoZSBjYXB0dXJlIHBoYXNlIHRvIGd1YXJhbnRlZSB3ZSBnZXQgbm90aWNlZCBvZiBpdCAobm8gcG9zc2libGl0eSBvZiBzdG9wUHJvcGFnYXRpb24pXG5cdFx0XHR7IGNhcHR1cmU6IHRydWUgfVxuXHRcdCk7XG5cdH1cbn1cbiIsImltcG9ydCB7IHRlYXJkb3duIH0gZnJvbSAnLi4vLi4vLi4vcmVhY3Rpdml0eS9lZmZlY3RzLmpzJztcbmltcG9ydCB7XG5cdGFjdGl2ZV9lZmZlY3QsXG5cdGFjdGl2ZV9yZWFjdGlvbixcblx0c2V0X2FjdGl2ZV9lZmZlY3QsXG5cdHNldF9hY3RpdmVfcmVhY3Rpb25cbn0gZnJvbSAnLi4vLi4vLi4vcnVudGltZS5qcyc7XG5pbXBvcnQgeyBhZGRfZm9ybV9yZXNldF9saXN0ZW5lciB9IGZyb20gJy4uL21pc2MuanMnO1xuXG4vKipcbiAqIEZpcmVzIHRoZSBoYW5kbGVyIG9uY2UgaW1tZWRpYXRlbHkgKHVubGVzcyBjb3JyZXNwb25kaW5nIGFyZyBpcyBzZXQgdG8gYGZhbHNlYCksXG4gKiB0aGVuIGxpc3RlbnMgdG8gdGhlIGdpdmVuIGV2ZW50cyB1bnRpbCB0aGUgcmVuZGVyIGVmZmVjdCBjb250ZXh0IGlzIGRlc3Ryb3llZFxuICogQHBhcmFtIHtFdmVudFRhcmdldH0gdGFyZ2V0XG4gKiBAcGFyYW0ge0FycmF5PHN0cmluZz59IGV2ZW50c1xuICogQHBhcmFtIHsoZXZlbnQ/OiBFdmVudCkgPT4gdm9pZH0gaGFuZGxlclxuICogQHBhcmFtIHthbnl9IGNhbGxfaGFuZGxlcl9pbW1lZGlhdGVseVxuICovXG5leHBvcnQgZnVuY3Rpb24gbGlzdGVuKHRhcmdldCwgZXZlbnRzLCBoYW5kbGVyLCBjYWxsX2hhbmRsZXJfaW1tZWRpYXRlbHkgPSB0cnVlKSB7XG5cdGlmIChjYWxsX2hhbmRsZXJfaW1tZWRpYXRlbHkpIHtcblx0XHRoYW5kbGVyKCk7XG5cdH1cblxuXHRmb3IgKHZhciBuYW1lIG9mIGV2ZW50cykge1xuXHRcdHRhcmdldC5hZGRFdmVudExpc3RlbmVyKG5hbWUsIGhhbmRsZXIpO1xuXHR9XG5cblx0dGVhcmRvd24oKCkgPT4ge1xuXHRcdGZvciAodmFyIG5hbWUgb2YgZXZlbnRzKSB7XG5cdFx0XHR0YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcihuYW1lLCBoYW5kbGVyKTtcblx0XHR9XG5cdH0pO1xufVxuXG4vKipcbiAqIEB0ZW1wbGF0ZSBUXG4gKiBAcGFyYW0geygpID0+IFR9IGZuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB3aXRob3V0X3JlYWN0aXZlX2NvbnRleHQoZm4pIHtcblx0dmFyIHByZXZpb3VzX3JlYWN0aW9uID0gYWN0aXZlX3JlYWN0aW9uO1xuXHR2YXIgcHJldmlvdXNfZWZmZWN0ID0gYWN0aXZlX2VmZmVjdDtcblx0c2V0X2FjdGl2ZV9yZWFjdGlvbihudWxsKTtcblx0c2V0X2FjdGl2ZV9lZmZlY3QobnVsbCk7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIGZuKCk7XG5cdH0gZmluYWxseSB7XG5cdFx0c2V0X2FjdGl2ZV9yZWFjdGlvbihwcmV2aW91c19yZWFjdGlvbik7XG5cdFx0c2V0X2FjdGl2ZV9lZmZlY3QocHJldmlvdXNfZWZmZWN0KTtcblx0fVxufVxuXG4vKipcbiAqIExpc3RlbiB0byB0aGUgZ2l2ZW4gZXZlbnQsIGFuZCB0aGVuIGluc3RhbnRpYXRlIGEgZ2xvYmFsIGZvcm0gcmVzZXQgbGlzdGVuZXIgaWYgbm90IGFscmVhZHkgZG9uZSxcbiAqIHRvIG5vdGlmeSBhbGwgYmluZGluZ3Mgd2hlbiB0aGUgZm9ybSBpcyByZXNldFxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWxlbWVudFxuICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50XG4gKiBAcGFyYW0geyhpc19yZXNldD86IHRydWUpID0+IHZvaWR9IGhhbmRsZXJcbiAqIEBwYXJhbSB7KGlzX3Jlc2V0PzogdHJ1ZSkgPT4gdm9pZH0gW29uX3Jlc2V0XVxuICovXG5leHBvcnQgZnVuY3Rpb24gbGlzdGVuX3RvX2V2ZW50X2FuZF9yZXNldF9ldmVudChlbGVtZW50LCBldmVudCwgaGFuZGxlciwgb25fcmVzZXQgPSBoYW5kbGVyKSB7XG5cdGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgKCkgPT4gd2l0aG91dF9yZWFjdGl2ZV9jb250ZXh0KGhhbmRsZXIpKTtcblx0Ly8gQHRzLWV4cGVjdC1lcnJvclxuXHRjb25zdCBwcmV2ID0gZWxlbWVudC5fX29uX3I7XG5cdGlmIChwcmV2KSB7XG5cdFx0Ly8gc3BlY2lhbCBjYXNlIGZvciBjaGVja2JveCB0aGF0IGNhbiBoYXZlIG11bHRpcGxlIGJpbmRzIChncm91cCAmIGNoZWNrZWQpXG5cdFx0Ly8gQHRzLWV4cGVjdC1lcnJvclxuXHRcdGVsZW1lbnQuX19vbl9yID0gKCkgPT4ge1xuXHRcdFx0cHJldigpO1xuXHRcdFx0b25fcmVzZXQodHJ1ZSk7XG5cdFx0fTtcblx0fSBlbHNlIHtcblx0XHQvLyBAdHMtZXhwZWN0LWVycm9yXG5cdFx0ZWxlbWVudC5fX29uX3IgPSAoKSA9PiBvbl9yZXNldCh0cnVlKTtcblx0fVxuXG5cdGFkZF9mb3JtX3Jlc2V0X2xpc3RlbmVyKCk7XG59XG4iLCIvKiogQGltcG9ydCB7IExvY2F0aW9uIH0gZnJvbSAnbG9jYXRlLWNoYXJhY3RlcicgKi9cbmltcG9ydCB7IHRlYXJkb3duIH0gZnJvbSAnLi4vLi4vcmVhY3Rpdml0eS9lZmZlY3RzLmpzJztcbmltcG9ydCB7IGRlZmluZV9wcm9wZXJ0eSwgaXNfYXJyYXkgfSBmcm9tICcuLi8uLi8uLi9zaGFyZWQvdXRpbHMuanMnO1xuaW1wb3J0IHsgaHlkcmF0aW5nIH0gZnJvbSAnLi4vaHlkcmF0aW9uLmpzJztcbmltcG9ydCB7IHF1ZXVlX21pY3JvX3Rhc2sgfSBmcm9tICcuLi90YXNrLmpzJztcbmltcG9ydCB7IEZJTEVOQU1FIH0gZnJvbSAnLi4vLi4vLi4vLi4vY29uc3RhbnRzLmpzJztcbmltcG9ydCAqIGFzIHcgZnJvbSAnLi4vLi4vd2FybmluZ3MuanMnO1xuaW1wb3J0IHtcblx0YWN0aXZlX2VmZmVjdCxcblx0YWN0aXZlX3JlYWN0aW9uLFxuXHRzZXRfYWN0aXZlX2VmZmVjdCxcblx0c2V0X2FjdGl2ZV9yZWFjdGlvblxufSBmcm9tICcuLi8uLi9ydW50aW1lLmpzJztcbmltcG9ydCB7IHdpdGhvdXRfcmVhY3RpdmVfY29udGV4dCB9IGZyb20gJy4vYmluZGluZ3Mvc2hhcmVkLmpzJztcblxuLyoqIEB0eXBlIHtTZXQ8c3RyaW5nPn0gKi9cbmV4cG9ydCBjb25zdCBhbGxfcmVnaXN0ZXJlZF9ldmVudHMgPSBuZXcgU2V0KCk7XG5cbi8qKiBAdHlwZSB7U2V0PChldmVudHM6IEFycmF5PHN0cmluZz4pID0+IHZvaWQ+fSAqL1xuZXhwb3J0IGNvbnN0IHJvb3RfZXZlbnRfaGFuZGxlcyA9IG5ldyBTZXQoKTtcblxuLyoqXG4gKiBTU1IgYWRkcyBvbmxvYWQgYW5kIG9uZXJyb3IgYXR0cmlidXRlcyB0byBjYXRjaCB0aG9zZSBldmVudHMgYmVmb3JlIHRoZSBoeWRyYXRpb24uXG4gKiBUaGlzIGZ1bmN0aW9uIGRldGVjdHMgdGhvc2UgY2FzZXMsIHJlbW92ZXMgdGhlIGF0dHJpYnV0ZXMgYW5kIHJlcGxheXMgdGhlIGV2ZW50cy5cbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGRvbVxuICovXG5leHBvcnQgZnVuY3Rpb24gcmVwbGF5X2V2ZW50cyhkb20pIHtcblx0aWYgKCFoeWRyYXRpbmcpIHJldHVybjtcblxuXHRpZiAoZG9tLm9ubG9hZCkge1xuXHRcdGRvbS5yZW1vdmVBdHRyaWJ1dGUoJ29ubG9hZCcpO1xuXHR9XG5cdGlmIChkb20ub25lcnJvcikge1xuXHRcdGRvbS5yZW1vdmVBdHRyaWJ1dGUoJ29uZXJyb3InKTtcblx0fVxuXHQvLyBAdHMtZXhwZWN0LWVycm9yXG5cdGNvbnN0IGV2ZW50ID0gZG9tLl9fZTtcblx0aWYgKGV2ZW50ICE9PSB1bmRlZmluZWQpIHtcblx0XHQvLyBAdHMtZXhwZWN0LWVycm9yXG5cdFx0ZG9tLl9fZSA9IHVuZGVmaW5lZDtcblx0XHRxdWV1ZU1pY3JvdGFzaygoKSA9PiB7XG5cdFx0XHRpZiAoZG9tLmlzQ29ubmVjdGVkKSB7XG5cdFx0XHRcdGRvbS5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcblx0XHRcdH1cblx0XHR9KTtcblx0fVxufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBldmVudF9uYW1lXG4gKiBAcGFyYW0ge0V2ZW50VGFyZ2V0fSBkb21cbiAqIEBwYXJhbSB7RXZlbnRMaXN0ZW5lcn0gaGFuZGxlclxuICogQHBhcmFtIHtBZGRFdmVudExpc3RlbmVyT3B0aW9uc30gb3B0aW9uc1xuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlX2V2ZW50KGV2ZW50X25hbWUsIGRvbSwgaGFuZGxlciwgb3B0aW9ucykge1xuXHQvKipcblx0ICogQHRoaXMge0V2ZW50VGFyZ2V0fVxuXHQgKi9cblx0ZnVuY3Rpb24gdGFyZ2V0X2hhbmRsZXIoLyoqIEB0eXBlIHtFdmVudH0gKi8gZXZlbnQpIHtcblx0XHRpZiAoIW9wdGlvbnMuY2FwdHVyZSkge1xuXHRcdFx0Ly8gT25seSBjYWxsIGluIHRoZSBidWJibGUgcGhhc2UsIGVsc2UgZGVsZWdhdGVkIGV2ZW50cyB3b3VsZCBiZSBjYWxsZWQgYmVmb3JlIHRoZSBjYXB0dXJpbmcgZXZlbnRzXG5cdFx0XHRoYW5kbGVfZXZlbnRfcHJvcGFnYXRpb24uY2FsbChkb20sIGV2ZW50KTtcblx0XHR9XG5cdFx0aWYgKCFldmVudC5jYW5jZWxCdWJibGUpIHtcblx0XHRcdHJldHVybiB3aXRob3V0X3JlYWN0aXZlX2NvbnRleHQoKCkgPT4ge1xuXHRcdFx0XHRyZXR1cm4gaGFuZGxlci5jYWxsKHRoaXMsIGV2ZW50KTtcblx0XHRcdH0pO1xuXHRcdH1cblx0fVxuXG5cdC8vIENocm9tZSBoYXMgYSBidWcgd2hlcmUgcG9pbnRlciBldmVudHMgZG9uJ3Qgd29yayB3aGVuIGF0dGFjaGVkIHRvIGEgRE9NIGVsZW1lbnQgdGhhdCBoYXMgYmVlbiBjbG9uZWRcblx0Ly8gd2l0aCBjbG9uZU5vZGUoKSBhbmQgdGhlIERPTSBlbGVtZW50IGlzIGRpc2Nvbm5lY3RlZCBmcm9tIHRoZSBkb2N1bWVudC4gVG8gZW5zdXJlIHRoZSBldmVudCB3b3Jrcywgd2Vcblx0Ly8gZGVmZXIgdGhlIGF0dGFjaG1lbnQgdGlsbCBhZnRlciBpdCdzIGJlZW4gYXBwZW5kZWQgdG8gdGhlIGRvY3VtZW50LiBUT0RPOiByZW1vdmUgdGhpcyBvbmNlIENocm9tZSBmaXhlc1xuXHQvLyB0aGlzIGJ1Zy4gVGhlIHNhbWUgYXBwbGllcyB0byB3aGVlbCBldmVudHMgYW5kIHRvdWNoIGV2ZW50cy5cblx0aWYgKFxuXHRcdGV2ZW50X25hbWUuc3RhcnRzV2l0aCgncG9pbnRlcicpIHx8XG5cdFx0ZXZlbnRfbmFtZS5zdGFydHNXaXRoKCd0b3VjaCcpIHx8XG5cdFx0ZXZlbnRfbmFtZSA9PT0gJ3doZWVsJ1xuXHQpIHtcblx0XHRxdWV1ZV9taWNyb190YXNrKCgpID0+IHtcblx0XHRcdGRvbS5hZGRFdmVudExpc3RlbmVyKGV2ZW50X25hbWUsIHRhcmdldF9oYW5kbGVyLCBvcHRpb25zKTtcblx0XHR9KTtcblx0fSBlbHNlIHtcblx0XHRkb20uYWRkRXZlbnRMaXN0ZW5lcihldmVudF9uYW1lLCB0YXJnZXRfaGFuZGxlciwgb3B0aW9ucyk7XG5cdH1cblxuXHRyZXR1cm4gdGFyZ2V0X2hhbmRsZXI7XG59XG5cbi8qKlxuICogQXR0YWNoZXMgYW4gZXZlbnQgaGFuZGxlciB0byBhbiBlbGVtZW50IGFuZCByZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCByZW1vdmVzIHRoZSBoYW5kbGVyLiBVc2luZyB0aGlzXG4gKiByYXRoZXIgdGhhbiBgYWRkRXZlbnRMaXN0ZW5lcmAgd2lsbCBwcmVzZXJ2ZSB0aGUgY29ycmVjdCBvcmRlciByZWxhdGl2ZSB0byBoYW5kbGVycyBhZGRlZCBkZWNsYXJhdGl2ZWx5XG4gKiAod2l0aCBhdHRyaWJ1dGVzIGxpa2UgYG9uY2xpY2tgKSwgd2hpY2ggdXNlIGV2ZW50IGRlbGVnYXRpb24gZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnNcbiAqXG4gKiBAcGFyYW0ge0V2ZW50VGFyZ2V0fSBlbGVtZW50XG4gKiBAcGFyYW0ge3N0cmluZ30gdHlwZVxuICogQHBhcmFtIHtFdmVudExpc3RlbmVyfSBoYW5kbGVyXG4gKiBAcGFyYW0ge0FkZEV2ZW50TGlzdGVuZXJPcHRpb25zfSBbb3B0aW9uc11cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG9uKGVsZW1lbnQsIHR5cGUsIGhhbmRsZXIsIG9wdGlvbnMgPSB7fSkge1xuXHR2YXIgdGFyZ2V0X2hhbmRsZXIgPSBjcmVhdGVfZXZlbnQodHlwZSwgZWxlbWVudCwgaGFuZGxlciwgb3B0aW9ucyk7XG5cblx0cmV0dXJuICgpID0+IHtcblx0XHRlbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIodHlwZSwgdGFyZ2V0X2hhbmRsZXIsIG9wdGlvbnMpO1xuXHR9O1xufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBldmVudF9uYW1lXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGRvbVxuICogQHBhcmFtIHtFdmVudExpc3RlbmVyfSBoYW5kbGVyXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGNhcHR1cmVcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW3Bhc3NpdmVdXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGV2ZW50KGV2ZW50X25hbWUsIGRvbSwgaGFuZGxlciwgY2FwdHVyZSwgcGFzc2l2ZSkge1xuXHR2YXIgb3B0aW9ucyA9IHsgY2FwdHVyZSwgcGFzc2l2ZSB9O1xuXHR2YXIgdGFyZ2V0X2hhbmRsZXIgPSBjcmVhdGVfZXZlbnQoZXZlbnRfbmFtZSwgZG9tLCBoYW5kbGVyLCBvcHRpb25zKTtcblxuXHQvLyBAdHMtaWdub3JlXG5cdGlmIChkb20gPT09IGRvY3VtZW50LmJvZHkgfHwgZG9tID09PSB3aW5kb3cgfHwgZG9tID09PSBkb2N1bWVudCkge1xuXHRcdHRlYXJkb3duKCgpID0+IHtcblx0XHRcdGRvbS5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50X25hbWUsIHRhcmdldF9oYW5kbGVyLCBvcHRpb25zKTtcblx0XHR9KTtcblx0fVxufVxuXG4vKipcbiAqIEBwYXJhbSB7QXJyYXk8c3RyaW5nPn0gZXZlbnRzXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlbGVnYXRlKGV2ZW50cykge1xuXHRmb3IgKHZhciBpID0gMDsgaSA8IGV2ZW50cy5sZW5ndGg7IGkrKykge1xuXHRcdGFsbF9yZWdpc3RlcmVkX2V2ZW50cy5hZGQoZXZlbnRzW2ldKTtcblx0fVxuXG5cdGZvciAodmFyIGZuIG9mIHJvb3RfZXZlbnRfaGFuZGxlcykge1xuXHRcdGZuKGV2ZW50cyk7XG5cdH1cbn1cblxuLyoqXG4gKiBAdGhpcyB7RXZlbnRUYXJnZXR9XG4gKiBAcGFyYW0ge0V2ZW50fSBldmVudFxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBoYW5kbGVfZXZlbnRfcHJvcGFnYXRpb24oZXZlbnQpIHtcblx0dmFyIGhhbmRsZXJfZWxlbWVudCA9IHRoaXM7XG5cdHZhciBvd25lcl9kb2N1bWVudCA9IC8qKiBAdHlwZSB7Tm9kZX0gKi8gKGhhbmRsZXJfZWxlbWVudCkub3duZXJEb2N1bWVudDtcblx0dmFyIGV2ZW50X25hbWUgPSBldmVudC50eXBlO1xuXHR2YXIgcGF0aCA9IGV2ZW50LmNvbXBvc2VkUGF0aD8uKCkgfHwgW107XG5cdHZhciBjdXJyZW50X3RhcmdldCA9IC8qKiBAdHlwZSB7bnVsbCB8IEVsZW1lbnR9ICovIChwYXRoWzBdIHx8IGV2ZW50LnRhcmdldCk7XG5cblx0Ly8gY29tcG9zZWRQYXRoIGNvbnRhaW5zIGxpc3Qgb2Ygbm9kZXMgdGhlIGV2ZW50IGhhcyBwcm9wYWdhdGVkIHRocm91Z2guXG5cdC8vIFdlIGNoZWNrIF9fcm9vdCB0byBza2lwIGFsbCBub2RlcyBiZWxvdyBpdCBpbiBjYXNlIHRoaXMgaXMgYVxuXHQvLyBwYXJlbnQgb2YgdGhlIF9fcm9vdCBub2RlLCB3aGljaCBpbmRpY2F0ZXMgdGhhdCB0aGVyZSdzIG5lc3RlZFxuXHQvLyBtb3VudGVkIGFwcHMuIEluIHRoaXMgY2FzZSB3ZSBkb24ndCB3YW50IHRvIHRyaWdnZXIgZXZlbnRzIG11bHRpcGxlIHRpbWVzLlxuXHR2YXIgcGF0aF9pZHggPSAwO1xuXG5cdC8vIEB0cy1leHBlY3QtZXJyb3IgaXMgYWRkZWQgYmVsb3dcblx0dmFyIGhhbmRsZWRfYXQgPSBldmVudC5fX3Jvb3Q7XG5cblx0aWYgKGhhbmRsZWRfYXQpIHtcblx0XHR2YXIgYXRfaWR4ID0gcGF0aC5pbmRleE9mKGhhbmRsZWRfYXQpO1xuXHRcdGlmIChcblx0XHRcdGF0X2lkeCAhPT0gLTEgJiZcblx0XHRcdChoYW5kbGVyX2VsZW1lbnQgPT09IGRvY3VtZW50IHx8IGhhbmRsZXJfZWxlbWVudCA9PT0gLyoqIEB0eXBlIHthbnl9ICovICh3aW5kb3cpKVxuXHRcdCkge1xuXHRcdFx0Ly8gVGhpcyBpcyB0aGUgZmFsbGJhY2sgZG9jdW1lbnQgbGlzdGVuZXIgb3IgYSB3aW5kb3cgbGlzdGVuZXIsIGJ1dCB0aGUgZXZlbnQgd2FzIGFscmVhZHkgaGFuZGxlZFxuXHRcdFx0Ly8gLT4gaWdub3JlLCBidXQgc2V0IGhhbmRsZV9hdCB0byBkb2N1bWVudC93aW5kb3cgc28gdGhhdCB3ZSdyZSByZXNldHRpbmcgdGhlIGV2ZW50XG5cdFx0XHQvLyBjaGFpbiBpbiBjYXNlIHNvbWVvbmUgbWFudWFsbHkgZGlzcGF0Y2hlcyB0aGUgc2FtZSBldmVudCBvYmplY3QgYWdhaW4uXG5cdFx0XHQvLyBAdHMtZXhwZWN0LWVycm9yXG5cdFx0XHRldmVudC5fX3Jvb3QgPSBoYW5kbGVyX2VsZW1lbnQ7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gV2UncmUgZGVsaWJlcmF0ZWx5IG5vdCBza2lwcGluZyBpZiB0aGUgaW5kZXggaXMgaGlnaGVyLCBiZWNhdXNlXG5cdFx0Ly8gc29tZW9uZSBjb3VsZCBjcmVhdGUgYW4gZXZlbnQgcHJvZ3JhbW1hdGljYWxseSBhbmQgZW1pdCBpdCBtdWx0aXBsZSB0aW1lcyxcblx0XHQvLyBpbiB3aGljaCBjYXNlIHdlIHdhbnQgdG8gaGFuZGxlIHRoZSB3aG9sZSBwcm9wYWdhdGlvbiBjaGFpbiBwcm9wZXJseSBlYWNoIHRpbWUuXG5cdFx0Ly8gKHRoaXMgd2lsbCBvbmx5IGJlIGEgZmFsc2UgbmVnYXRpdmUgaWYgdGhlIGV2ZW50IGlzIGRpc3BhdGNoZWQgbXVsdGlwbGUgdGltZXMgYW5kXG5cdFx0Ly8gdGhlIGZhbGxiYWNrIGRvY3VtZW50IGxpc3RlbmVyIGlzbid0IHJlYWNoZWQgaW4gYmV0d2VlbiwgYnV0IHRoYXQncyBzdXBlciByYXJlKVxuXHRcdHZhciBoYW5kbGVyX2lkeCA9IHBhdGguaW5kZXhPZihoYW5kbGVyX2VsZW1lbnQpO1xuXHRcdGlmIChoYW5kbGVyX2lkeCA9PT0gLTEpIHtcblx0XHRcdC8vIGhhbmRsZV9pZHggY2FuIHRoZW9yZXRpY2FsbHkgYmUgLTEgKGhhcHBlbmVkIGluIHNvbWUgSlNET00gdGVzdGluZyBzY2VuYXJpb3Mgd2l0aCBhbiBldmVudCBsaXN0ZW5lciBvbiB0aGUgd2luZG93IG9iamVjdClcblx0XHRcdC8vIHNvIGd1YXJkIGFnYWluc3QgdGhhdCwgdG9vLCBhbmQgYXNzdW1lIHRoYXQgZXZlcnl0aGluZyB3YXMgaGFuZGxlZCBhdCB0aGlzIHBvaW50LlxuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmIChhdF9pZHggPD0gaGFuZGxlcl9pZHgpIHtcblx0XHRcdHBhdGhfaWR4ID0gYXRfaWR4O1xuXHRcdH1cblx0fVxuXG5cdGN1cnJlbnRfdGFyZ2V0ID0gLyoqIEB0eXBlIHtFbGVtZW50fSAqLyAocGF0aFtwYXRoX2lkeF0gfHwgZXZlbnQudGFyZ2V0KTtcblx0Ly8gdGhlcmUgY2FuIG9ubHkgYmUgb25lIGRlbGVnYXRlZCBldmVudCBwZXIgZWxlbWVudCwgYW5kIHdlIGVpdGhlciBhbHJlYWR5IGhhbmRsZWQgdGhlIGN1cnJlbnQgdGFyZ2V0LFxuXHQvLyBvciB0aGlzIGlzIHRoZSB2ZXJ5IGZpcnN0IHRhcmdldCBpbiB0aGUgY2hhaW4gd2hpY2ggaGFzIGEgbm9uLWRlbGVnYXRlZCBsaXN0ZW5lciwgaW4gd2hpY2ggY2FzZSBpdCdzIHNhZmVcblx0Ly8gdG8gaGFuZGxlIGEgcG9zc2libGUgZGVsZWdhdGVkIGV2ZW50IG9uIGl0IGxhdGVyICh0aHJvdWdoIHRoZSByb290IGRlbGVnYXRpb24gbGlzdGVuZXIgZm9yIGV4YW1wbGUpLlxuXHRpZiAoY3VycmVudF90YXJnZXQgPT09IGhhbmRsZXJfZWxlbWVudCkgcmV0dXJuO1xuXG5cdC8vIFByb3h5IGN1cnJlbnRUYXJnZXQgdG8gY29ycmVjdCB0YXJnZXRcblx0ZGVmaW5lX3Byb3BlcnR5KGV2ZW50LCAnY3VycmVudFRhcmdldCcsIHtcblx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0Z2V0KCkge1xuXHRcdFx0cmV0dXJuIGN1cnJlbnRfdGFyZ2V0IHx8IG93bmVyX2RvY3VtZW50O1xuXHRcdH1cblx0fSk7XG5cblx0Ly8gVGhpcyBzdGFydGVkIGJlY2F1c2Ugb2YgQ2hyb21pdW0gaXNzdWUgaHR0cHM6Ly9jaHJvbWVzdGF0dXMuY29tL2ZlYXR1cmUvNTEyODY5NjgyMzU0NTg1Nixcblx0Ly8gd2hlcmUgcmVtb3ZhbCBvciBtb3Zpbmcgb2Ygb2YgdGhlIERPTSBjYW4gY2F1c2Ugc3luYyBgYmx1cmAgZXZlbnRzIHRvIGZpcmUsIHdoaWNoIGNhbiBjYXVzZSBsb2dpY1xuXHQvLyB0byBydW4gaW5zaWRlIHRoZSBjdXJyZW50IGBhY3RpdmVfcmVhY3Rpb25gLCB3aGljaCBpc24ndCB3aGF0IHdlIHdhbnQgYXQgYWxsLiBIb3dldmVyLCBvbiByZWZsZWN0aW9uLFxuXHQvLyBpdCdzIHByb2JhYmx5IGJlc3QgdGhhdCBhbGwgZXZlbnQgaGFuZGxlZCBieSBTdmVsdGUgaGF2ZSB0aGlzIGJlaGF2aW91ciwgYXMgd2UgZG9uJ3QgcmVhbGx5IHdhbnRcblx0Ly8gYW4gZXZlbnQgaGFuZGxlciB0byBydW4gaW4gdGhlIGNvbnRleHQgb2YgYW5vdGhlciByZWFjdGlvbiBvciBlZmZlY3QuXG5cdHZhciBwcmV2aW91c19yZWFjdGlvbiA9IGFjdGl2ZV9yZWFjdGlvbjtcblx0dmFyIHByZXZpb3VzX2VmZmVjdCA9IGFjdGl2ZV9lZmZlY3Q7XG5cdHNldF9hY3RpdmVfcmVhY3Rpb24obnVsbCk7XG5cdHNldF9hY3RpdmVfZWZmZWN0KG51bGwpO1xuXG5cdHRyeSB7XG5cdFx0LyoqXG5cdFx0ICogQHR5cGUge3Vua25vd259XG5cdFx0ICovXG5cdFx0dmFyIHRocm93X2Vycm9yO1xuXHRcdC8qKlxuXHRcdCAqIEB0eXBlIHt1bmtub3duW119XG5cdFx0ICovXG5cdFx0dmFyIG90aGVyX2Vycm9ycyA9IFtdO1xuXG5cdFx0d2hpbGUgKGN1cnJlbnRfdGFyZ2V0ICE9PSBudWxsKSB7XG5cdFx0XHQvKiogQHR5cGUge251bGwgfCBFbGVtZW50fSAqL1xuXHRcdFx0dmFyIHBhcmVudF9lbGVtZW50ID1cblx0XHRcdFx0Y3VycmVudF90YXJnZXQuYXNzaWduZWRTbG90IHx8XG5cdFx0XHRcdGN1cnJlbnRfdGFyZ2V0LnBhcmVudE5vZGUgfHxcblx0XHRcdFx0LyoqIEB0eXBlIHthbnl9ICovIChjdXJyZW50X3RhcmdldCkuaG9zdCB8fFxuXHRcdFx0XHRudWxsO1xuXG5cdFx0XHR0cnkge1xuXHRcdFx0XHQvLyBAdHMtZXhwZWN0LWVycm9yXG5cdFx0XHRcdHZhciBkZWxlZ2F0ZWQgPSBjdXJyZW50X3RhcmdldFsnX18nICsgZXZlbnRfbmFtZV07XG5cblx0XHRcdFx0aWYgKGRlbGVnYXRlZCAhPT0gdW5kZWZpbmVkICYmICEoLyoqIEB0eXBlIHthbnl9ICovIChjdXJyZW50X3RhcmdldCkuZGlzYWJsZWQpKSB7XG5cdFx0XHRcdFx0aWYgKGlzX2FycmF5KGRlbGVnYXRlZCkpIHtcblx0XHRcdFx0XHRcdHZhciBbZm4sIC4uLmRhdGFdID0gZGVsZWdhdGVkO1xuXHRcdFx0XHRcdFx0Zm4uYXBwbHkoY3VycmVudF90YXJnZXQsIFtldmVudCwgLi4uZGF0YV0pO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRkZWxlZ2F0ZWQuY2FsbChjdXJyZW50X3RhcmdldCwgZXZlbnQpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRcdFx0aWYgKHRocm93X2Vycm9yKSB7XG5cdFx0XHRcdFx0b3RoZXJfZXJyb3JzLnB1c2goZXJyb3IpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHRocm93X2Vycm9yID0gZXJyb3I7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGlmIChldmVudC5jYW5jZWxCdWJibGUgfHwgcGFyZW50X2VsZW1lbnQgPT09IGhhbmRsZXJfZWxlbWVudCB8fCBwYXJlbnRfZWxlbWVudCA9PT0gbnVsbCkge1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHRcdGN1cnJlbnRfdGFyZ2V0ID0gcGFyZW50X2VsZW1lbnQ7XG5cdFx0fVxuXG5cdFx0aWYgKHRocm93X2Vycm9yKSB7XG5cdFx0XHRmb3IgKGxldCBlcnJvciBvZiBvdGhlcl9lcnJvcnMpIHtcblx0XHRcdFx0Ly8gVGhyb3cgdGhlIHJlc3Qgb2YgdGhlIGVycm9ycywgb25lLWJ5LW9uZSBvbiBhIG1pY3JvdGFza1xuXHRcdFx0XHRxdWV1ZU1pY3JvdGFzaygoKSA9PiB7XG5cdFx0XHRcdFx0dGhyb3cgZXJyb3I7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXHRcdFx0dGhyb3cgdGhyb3dfZXJyb3I7XG5cdFx0fVxuXHR9IGZpbmFsbHkge1xuXHRcdC8vIEB0cy1leHBlY3QtZXJyb3IgaXMgdXNlZCBhYm92ZVxuXHRcdGV2ZW50Ll9fcm9vdCA9IGhhbmRsZXJfZWxlbWVudDtcblx0XHQvLyBAdHMtaWdub3JlIHJlbW92ZSBwcm94eSBvbiBjdXJyZW50VGFyZ2V0XG5cdFx0ZGVsZXRlIGV2ZW50LmN1cnJlbnRUYXJnZXQ7XG5cdFx0c2V0X2FjdGl2ZV9yZWFjdGlvbihwcmV2aW91c19yZWFjdGlvbik7XG5cdFx0c2V0X2FjdGl2ZV9lZmZlY3QocHJldmlvdXNfZWZmZWN0KTtcblx0fVxufVxuXG4vKipcbiAqIEluIGRldiwgd2FybiBpZiBhbiBldmVudCBoYW5kbGVyIGlzIG5vdCBhIGZ1bmN0aW9uLCBhcyBpdCBtZWFucyB0aGVcbiAqIHVzZXIgcHJvYmFibHkgY2FsbGVkIHRoZSBoYW5kbGVyIG9yIGZvcmdvdCB0byBhZGQgYSBgKCkgPT5gXG4gKiBAcGFyYW0geygpID0+IChldmVudDogRXZlbnQsIC4uLmFyZ3M6IGFueSkgPT4gdm9pZH0gdGh1bmtcbiAqIEBwYXJhbSB7RXZlbnRUYXJnZXR9IGVsZW1lbnRcbiAqIEBwYXJhbSB7W0V2ZW50LCAuLi5hbnldfSBhcmdzXG4gKiBAcGFyYW0ge2FueX0gY29tcG9uZW50XG4gKiBAcGFyYW0ge1tudW1iZXIsIG51bWJlcl19IFtsb2NdXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtyZW1vdmVfcGFyZW5zXVxuICovXG5leHBvcnQgZnVuY3Rpb24gYXBwbHkoXG5cdHRodW5rLFxuXHRlbGVtZW50LFxuXHRhcmdzLFxuXHRjb21wb25lbnQsXG5cdGxvYyxcblx0aGFzX3NpZGVfZWZmZWN0cyA9IGZhbHNlLFxuXHRyZW1vdmVfcGFyZW5zID0gZmFsc2Vcbikge1xuXHRsZXQgaGFuZGxlcjtcblx0bGV0IGVycm9yO1xuXG5cdHRyeSB7XG5cdFx0aGFuZGxlciA9IHRodW5rKCk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRlcnJvciA9IGU7XG5cdH1cblxuXHRpZiAodHlwZW9mIGhhbmRsZXIgPT09ICdmdW5jdGlvbicpIHtcblx0XHRoYW5kbGVyLmFwcGx5KGVsZW1lbnQsIGFyZ3MpO1xuXHR9IGVsc2UgaWYgKGhhc19zaWRlX2VmZmVjdHMgfHwgaGFuZGxlciAhPSBudWxsIHx8IGVycm9yKSB7XG5cdFx0Y29uc3QgZmlsZW5hbWUgPSBjb21wb25lbnQ/LltGSUxFTkFNRV07XG5cdFx0Y29uc3QgbG9jYXRpb24gPSBsb2MgPyBgIGF0ICR7ZmlsZW5hbWV9OiR7bG9jWzBdfToke2xvY1sxXX1gIDogYCBpbiAke2ZpbGVuYW1lfWA7XG5cblx0XHRjb25zdCBldmVudF9uYW1lID0gYXJnc1swXS50eXBlO1xuXHRcdGNvbnN0IGRlc2NyaXB0aW9uID0gYFxcYCR7ZXZlbnRfbmFtZX1cXGAgaGFuZGxlciR7bG9jYXRpb259YDtcblx0XHRjb25zdCBzdWdnZXN0aW9uID0gcmVtb3ZlX3BhcmVucyA/ICdyZW1vdmUgdGhlIHRyYWlsaW5nIGAoKWAnIDogJ2FkZCBhIGxlYWRpbmcgYCgpID0+YCc7XG5cblx0XHR3LmV2ZW50X2hhbmRsZXJfaW52YWxpZChkZXNjcmlwdGlvbiwgc3VnZ2VzdGlvbik7XG5cblx0XHRpZiAoZXJyb3IpIHtcblx0XHRcdHRocm93IGVycm9yO1xuXHRcdH1cblx0fVxufVxuIiwiLyoqIEBwYXJhbSB7c3RyaW5nfSBodG1sICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlX2ZyYWdtZW50X2Zyb21faHRtbChodG1sKSB7XG5cdHZhciBlbGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGVtcGxhdGUnKTtcblx0ZWxlbS5pbm5lckhUTUwgPSBodG1sO1xuXHRyZXR1cm4gZWxlbS5jb250ZW50O1xufVxuIiwiLyoqIEBpbXBvcnQgeyBFZmZlY3QsIFRlbXBsYXRlTm9kZSB9IGZyb20gJyNjbGllbnQnICovXG5pbXBvcnQgeyBoeWRyYXRlX25leHQsIGh5ZHJhdGVfbm9kZSwgaHlkcmF0aW5nLCBzZXRfaHlkcmF0ZV9ub2RlIH0gZnJvbSAnLi9oeWRyYXRpb24uanMnO1xuaW1wb3J0IHsgY3JlYXRlX3RleHQsIGdldF9maXJzdF9jaGlsZCB9IGZyb20gJy4vb3BlcmF0aW9ucy5qcyc7XG5pbXBvcnQgeyBjcmVhdGVfZnJhZ21lbnRfZnJvbV9odG1sIH0gZnJvbSAnLi9yZWNvbmNpbGVyLmpzJztcbmltcG9ydCB7IGFjdGl2ZV9lZmZlY3QgfSBmcm9tICcuLi9ydW50aW1lLmpzJztcbmltcG9ydCB7IFRFTVBMQVRFX0ZSQUdNRU5ULCBURU1QTEFURV9VU0VfSU1QT1JUX05PREUgfSBmcm9tICcuLi8uLi8uLi9jb25zdGFudHMuanMnO1xuXG4vKipcbiAqIEBwYXJhbSB7VGVtcGxhdGVOb2RlfSBzdGFydFxuICogQHBhcmFtIHtUZW1wbGF0ZU5vZGUgfCBudWxsfSBlbmRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFzc2lnbl9ub2RlcyhzdGFydCwgZW5kKSB7XG5cdHZhciBlZmZlY3QgPSAvKiogQHR5cGUge0VmZmVjdH0gKi8gKGFjdGl2ZV9lZmZlY3QpO1xuXHRpZiAoZWZmZWN0Lm5vZGVzX3N0YXJ0ID09PSBudWxsKSB7XG5cdFx0ZWZmZWN0Lm5vZGVzX3N0YXJ0ID0gc3RhcnQ7XG5cdFx0ZWZmZWN0Lm5vZGVzX2VuZCA9IGVuZDtcblx0fVxufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb250ZW50XG4gKiBAcGFyYW0ge251bWJlcn0gZmxhZ3NcbiAqIEByZXR1cm5zIHsoKSA9PiBOb2RlIHwgTm9kZVtdfVxuICovXG4vKiNfX05PX1NJREVfRUZGRUNUU19fKi9cbmV4cG9ydCBmdW5jdGlvbiB0ZW1wbGF0ZShjb250ZW50LCBmbGFncykge1xuXHR2YXIgaXNfZnJhZ21lbnQgPSAoZmxhZ3MgJiBURU1QTEFURV9GUkFHTUVOVCkgIT09IDA7XG5cdHZhciB1c2VfaW1wb3J0X25vZGUgPSAoZmxhZ3MgJiBURU1QTEFURV9VU0VfSU1QT1JUX05PREUpICE9PSAwO1xuXG5cdC8qKiBAdHlwZSB7Tm9kZX0gKi9cblx0dmFyIG5vZGU7XG5cblx0LyoqXG5cdCAqIFdoZXRoZXIgb3Igbm90IHRoZSBmaXJzdCBpdGVtIGlzIGEgdGV4dC9lbGVtZW50IG5vZGUuIElmIG5vdCwgd2UgbmVlZCB0b1xuXHQgKiBjcmVhdGUgYW4gYWRkaXRpb25hbCBjb21tZW50IG5vZGUgdG8gYWN0IGFzIGBlZmZlY3Qubm9kZXMuc3RhcnRgXG5cdCAqL1xuXHR2YXIgaGFzX3N0YXJ0ID0gIWNvbnRlbnQuc3RhcnRzV2l0aCgnPCE+Jyk7XG5cblx0cmV0dXJuICgpID0+IHtcblx0XHRpZiAoaHlkcmF0aW5nKSB7XG5cdFx0XHRhc3NpZ25fbm9kZXMoaHlkcmF0ZV9ub2RlLCBudWxsKTtcblx0XHRcdHJldHVybiBoeWRyYXRlX25vZGU7XG5cdFx0fVxuXG5cdFx0aWYgKG5vZGUgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0bm9kZSA9IGNyZWF0ZV9mcmFnbWVudF9mcm9tX2h0bWwoaGFzX3N0YXJ0ID8gY29udGVudCA6ICc8IT4nICsgY29udGVudCk7XG5cdFx0XHRpZiAoIWlzX2ZyYWdtZW50KSBub2RlID0gLyoqIEB0eXBlIHtOb2RlfSAqLyAoZ2V0X2ZpcnN0X2NoaWxkKG5vZGUpKTtcblx0XHR9XG5cblx0XHR2YXIgY2xvbmUgPSAvKiogQHR5cGUge1RlbXBsYXRlTm9kZX0gKi8gKFxuXHRcdFx0dXNlX2ltcG9ydF9ub2RlID8gZG9jdW1lbnQuaW1wb3J0Tm9kZShub2RlLCB0cnVlKSA6IG5vZGUuY2xvbmVOb2RlKHRydWUpXG5cdFx0KTtcblxuXHRcdGlmIChpc19mcmFnbWVudCkge1xuXHRcdFx0dmFyIHN0YXJ0ID0gLyoqIEB0eXBlIHtUZW1wbGF0ZU5vZGV9ICovIChnZXRfZmlyc3RfY2hpbGQoY2xvbmUpKTtcblx0XHRcdHZhciBlbmQgPSAvKiogQHR5cGUge1RlbXBsYXRlTm9kZX0gKi8gKGNsb25lLmxhc3RDaGlsZCk7XG5cblx0XHRcdGFzc2lnbl9ub2RlcyhzdGFydCwgZW5kKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0YXNzaWduX25vZGVzKGNsb25lLCBjbG9uZSk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGNsb25lO1xuXHR9O1xufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb250ZW50XG4gKiBAcGFyYW0ge251bWJlcn0gZmxhZ3NcbiAqIEByZXR1cm5zIHsoKSA9PiBOb2RlIHwgTm9kZVtdfVxuICovXG4vKiNfX05PX1NJREVfRUZGRUNUU19fKi9cbmV4cG9ydCBmdW5jdGlvbiB0ZW1wbGF0ZV93aXRoX3NjcmlwdChjb250ZW50LCBmbGFncykge1xuXHR2YXIgZm4gPSB0ZW1wbGF0ZShjb250ZW50LCBmbGFncyk7XG5cdHJldHVybiAoKSA9PiBydW5fc2NyaXB0cygvKiogQHR5cGUge0VsZW1lbnQgfCBEb2N1bWVudEZyYWdtZW50fSAqLyAoZm4oKSkpO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb250ZW50XG4gKiBAcGFyYW0ge251bWJlcn0gZmxhZ3NcbiAqIEBwYXJhbSB7J3N2ZycgfCAnbWF0aCd9IG5zXG4gKiBAcmV0dXJucyB7KCkgPT4gTm9kZSB8IE5vZGVbXX1cbiAqL1xuLyojX19OT19TSURFX0VGRkVDVFNfXyovXG5leHBvcnQgZnVuY3Rpb24gbnNfdGVtcGxhdGUoY29udGVudCwgZmxhZ3MsIG5zID0gJ3N2ZycpIHtcblx0LyoqXG5cdCAqIFdoZXRoZXIgb3Igbm90IHRoZSBmaXJzdCBpdGVtIGlzIGEgdGV4dC9lbGVtZW50IG5vZGUuIElmIG5vdCwgd2UgbmVlZCB0b1xuXHQgKiBjcmVhdGUgYW4gYWRkaXRpb25hbCBjb21tZW50IG5vZGUgdG8gYWN0IGFzIGBlZmZlY3Qubm9kZXMuc3RhcnRgXG5cdCAqL1xuXHR2YXIgaGFzX3N0YXJ0ID0gIWNvbnRlbnQuc3RhcnRzV2l0aCgnPCE+Jyk7XG5cblx0dmFyIGlzX2ZyYWdtZW50ID0gKGZsYWdzICYgVEVNUExBVEVfRlJBR01FTlQpICE9PSAwO1xuXHR2YXIgd3JhcHBlZCA9IGA8JHtuc30+JHtoYXNfc3RhcnQgPyBjb250ZW50IDogJzwhPicgKyBjb250ZW50fTwvJHtuc30+YDtcblxuXHQvKiogQHR5cGUge0VsZW1lbnQgfCBEb2N1bWVudEZyYWdtZW50fSAqL1xuXHR2YXIgbm9kZTtcblxuXHRyZXR1cm4gKCkgPT4ge1xuXHRcdGlmIChoeWRyYXRpbmcpIHtcblx0XHRcdGFzc2lnbl9ub2RlcyhoeWRyYXRlX25vZGUsIG51bGwpO1xuXHRcdFx0cmV0dXJuIGh5ZHJhdGVfbm9kZTtcblx0XHR9XG5cblx0XHRpZiAoIW5vZGUpIHtcblx0XHRcdHZhciBmcmFnbWVudCA9IC8qKiBAdHlwZSB7RG9jdW1lbnRGcmFnbWVudH0gKi8gKGNyZWF0ZV9mcmFnbWVudF9mcm9tX2h0bWwod3JhcHBlZCkpO1xuXHRcdFx0dmFyIHJvb3QgPSAvKiogQHR5cGUge0VsZW1lbnR9ICovIChnZXRfZmlyc3RfY2hpbGQoZnJhZ21lbnQpKTtcblxuXHRcdFx0aWYgKGlzX2ZyYWdtZW50KSB7XG5cdFx0XHRcdG5vZGUgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7XG5cdFx0XHRcdHdoaWxlIChnZXRfZmlyc3RfY2hpbGQocm9vdCkpIHtcblx0XHRcdFx0XHRub2RlLmFwcGVuZENoaWxkKC8qKiBAdHlwZSB7Tm9kZX0gKi8gKGdldF9maXJzdF9jaGlsZChyb290KSkpO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRub2RlID0gLyoqIEB0eXBlIHtFbGVtZW50fSAqLyAoZ2V0X2ZpcnN0X2NoaWxkKHJvb3QpKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHR2YXIgY2xvbmUgPSAvKiogQHR5cGUge1RlbXBsYXRlTm9kZX0gKi8gKG5vZGUuY2xvbmVOb2RlKHRydWUpKTtcblxuXHRcdGlmIChpc19mcmFnbWVudCkge1xuXHRcdFx0dmFyIHN0YXJ0ID0gLyoqIEB0eXBlIHtUZW1wbGF0ZU5vZGV9ICovIChnZXRfZmlyc3RfY2hpbGQoY2xvbmUpKTtcblx0XHRcdHZhciBlbmQgPSAvKiogQHR5cGUge1RlbXBsYXRlTm9kZX0gKi8gKGNsb25lLmxhc3RDaGlsZCk7XG5cblx0XHRcdGFzc2lnbl9ub2RlcyhzdGFydCwgZW5kKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0YXNzaWduX25vZGVzKGNsb25lLCBjbG9uZSk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGNsb25lO1xuXHR9O1xufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb250ZW50XG4gKiBAcGFyYW0ge251bWJlcn0gZmxhZ3NcbiAqIEByZXR1cm5zIHsoKSA9PiBOb2RlIHwgTm9kZVtdfVxuICovXG4vKiNfX05PX1NJREVfRUZGRUNUU19fKi9cbmV4cG9ydCBmdW5jdGlvbiBzdmdfdGVtcGxhdGVfd2l0aF9zY3JpcHQoY29udGVudCwgZmxhZ3MpIHtcblx0dmFyIGZuID0gbnNfdGVtcGxhdGUoY29udGVudCwgZmxhZ3MpO1xuXHRyZXR1cm4gKCkgPT4gcnVuX3NjcmlwdHMoLyoqIEB0eXBlIHtFbGVtZW50IHwgRG9jdW1lbnRGcmFnbWVudH0gKi8gKGZuKCkpKTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gY29udGVudFxuICogQHBhcmFtIHtudW1iZXJ9IGZsYWdzXG4gKiBAcmV0dXJucyB7KCkgPT4gTm9kZSB8IE5vZGVbXX1cbiAqL1xuLyojX19OT19TSURFX0VGRkVDVFNfXyovXG5leHBvcnQgZnVuY3Rpb24gbWF0aG1sX3RlbXBsYXRlKGNvbnRlbnQsIGZsYWdzKSB7XG5cdHJldHVybiBuc190ZW1wbGF0ZShjb250ZW50LCBmbGFncywgJ21hdGgnKTtcbn1cblxuLyoqXG4gKiBDcmVhdGluZyBhIGRvY3VtZW50IGZyYWdtZW50IGZyb20gSFRNTCB0aGF0IGNvbnRhaW5zIHNjcmlwdCB0YWdzIHdpbGwgbm90IGV4ZWN1dGVcbiAqIHRoZSBzY3JpcHRzLiBXZSBuZWVkIHRvIHJlcGxhY2UgdGhlIHNjcmlwdCB0YWdzIHdpdGggbmV3IG9uZXMgc28gdGhhdCB0aGV5IGFyZSBleGVjdXRlZC5cbiAqIEBwYXJhbSB7RWxlbWVudCB8IERvY3VtZW50RnJhZ21lbnR9IG5vZGVcbiAqIEByZXR1cm5zIHtOb2RlIHwgTm9kZVtdfVxuICovXG5mdW5jdGlvbiBydW5fc2NyaXB0cyhub2RlKSB7XG5cdC8vIHNjcmlwdHMgd2VyZSBTU1InZCwgaW4gd2hpY2ggY2FzZSB0aGV5IHdpbGwgcnVuXG5cdGlmIChoeWRyYXRpbmcpIHJldHVybiBub2RlO1xuXG5cdGNvbnN0IGlzX2ZyYWdtZW50ID0gbm9kZS5ub2RlVHlwZSA9PT0gMTE7XG5cdGNvbnN0IHNjcmlwdHMgPVxuXHRcdC8qKiBAdHlwZSB7SFRNTEVsZW1lbnR9ICovIChub2RlKS50YWdOYW1lID09PSAnU0NSSVBUJ1xuXHRcdFx0PyBbLyoqIEB0eXBlIHtIVE1MU2NyaXB0RWxlbWVudH0gKi8gKG5vZGUpXVxuXHRcdFx0OiBub2RlLnF1ZXJ5U2VsZWN0b3JBbGwoJ3NjcmlwdCcpO1xuXHRjb25zdCBlZmZlY3QgPSAvKiogQHR5cGUge0VmZmVjdH0gKi8gKGFjdGl2ZV9lZmZlY3QpO1xuXG5cdGZvciAoY29uc3Qgc2NyaXB0IG9mIHNjcmlwdHMpIHtcblx0XHRjb25zdCBjbG9uZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xuXHRcdGZvciAodmFyIGF0dHJpYnV0ZSBvZiBzY3JpcHQuYXR0cmlidXRlcykge1xuXHRcdFx0Y2xvbmUuc2V0QXR0cmlidXRlKGF0dHJpYnV0ZS5uYW1lLCBhdHRyaWJ1dGUudmFsdWUpO1xuXHRcdH1cblxuXHRcdGNsb25lLnRleHRDb250ZW50ID0gc2NyaXB0LnRleHRDb250ZW50O1xuXG5cdFx0Ly8gVGhlIHNjcmlwdCBoYXMgY2hhbmdlZCAtIGlmIGl0J3MgYXQgdGhlIGVkZ2VzLCB0aGUgZWZmZWN0IG5vdyBwb2ludHMgYXQgZGVhZCBub2Rlc1xuXHRcdGlmIChpc19mcmFnbWVudCA/IG5vZGUuZmlyc3RDaGlsZCA9PT0gc2NyaXB0IDogbm9kZSA9PT0gc2NyaXB0KSB7XG5cdFx0XHRlZmZlY3Qubm9kZXNfc3RhcnQgPSBjbG9uZTtcblx0XHR9XG5cdFx0aWYgKGlzX2ZyYWdtZW50ID8gbm9kZS5sYXN0Q2hpbGQgPT09IHNjcmlwdCA6IG5vZGUgPT09IHNjcmlwdCkge1xuXHRcdFx0ZWZmZWN0Lm5vZGVzX2VuZCA9IGNsb25lO1xuXHRcdH1cblxuXHRcdHNjcmlwdC5yZXBsYWNlV2l0aChjbG9uZSk7XG5cdH1cblx0cmV0dXJuIG5vZGU7XG59XG5cbi8qKlxuICogRG9uJ3QgbWFyayB0aGlzIGFzIHNpZGUtZWZmZWN0LWZyZWUsIGh5ZHJhdGlvbiBuZWVkcyB0byB3YWxrIGFsbCBub2Rlc1xuICogQHBhcmFtIHthbnl9IHZhbHVlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0ZXh0KHZhbHVlID0gJycpIHtcblx0aWYgKCFoeWRyYXRpbmcpIHtcblx0XHR2YXIgdCA9IGNyZWF0ZV90ZXh0KHZhbHVlICsgJycpO1xuXHRcdGFzc2lnbl9ub2Rlcyh0LCB0KTtcblx0XHRyZXR1cm4gdDtcblx0fVxuXG5cdHZhciBub2RlID0gaHlkcmF0ZV9ub2RlO1xuXG5cdGlmIChub2RlLm5vZGVUeXBlICE9PSAzKSB7XG5cdFx0Ly8gaWYgYW4ge2V4cHJlc3Npb259IGlzIGVtcHR5IGR1cmluZyBTU1IsIHdlIG5lZWQgdG8gaW5zZXJ0IGFuIGVtcHR5IHRleHQgbm9kZVxuXHRcdG5vZGUuYmVmb3JlKChub2RlID0gY3JlYXRlX3RleHQoKSkpO1xuXHRcdHNldF9oeWRyYXRlX25vZGUobm9kZSk7XG5cdH1cblxuXHRhc3NpZ25fbm9kZXMobm9kZSwgbm9kZSk7XG5cdHJldHVybiBub2RlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY29tbWVudCgpIHtcblx0Ly8gd2UncmUgbm90IGRlbGVnYXRpbmcgdG8gYHRlbXBsYXRlYCBoZXJlIGZvciBwZXJmb3JtYW5jZSByZWFzb25zXG5cdGlmIChoeWRyYXRpbmcpIHtcblx0XHRhc3NpZ25fbm9kZXMoaHlkcmF0ZV9ub2RlLCBudWxsKTtcblx0XHRyZXR1cm4gaHlkcmF0ZV9ub2RlO1xuXHR9XG5cblx0dmFyIGZyYWcgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7XG5cdHZhciBzdGFydCA9IGRvY3VtZW50LmNyZWF0ZUNvbW1lbnQoJycpO1xuXHR2YXIgYW5jaG9yID0gY3JlYXRlX3RleHQoKTtcblx0ZnJhZy5hcHBlbmQoc3RhcnQsIGFuY2hvcik7XG5cblx0YXNzaWduX25vZGVzKHN0YXJ0LCBhbmNob3IpO1xuXG5cdHJldHVybiBmcmFnO1xufVxuXG4vKipcbiAqIEFzc2lnbiB0aGUgY3JlYXRlZCAob3IgaW4gaHlkcmF0aW9uIG1vZGUsIHRyYXZlcnNlZCkgZG9tIGVsZW1lbnRzIHRvIHRoZSBjdXJyZW50IGJsb2NrXG4gKiBhbmQgaW5zZXJ0IHRoZSBlbGVtZW50cyBpbnRvIHRoZSBkb20gKGluIGNsaWVudCBtb2RlKS5cbiAqIEBwYXJhbSB7VGV4dCB8IENvbW1lbnQgfCBFbGVtZW50fSBhbmNob3JcbiAqIEBwYXJhbSB7RG9jdW1lbnRGcmFnbWVudCB8IEVsZW1lbnR9IGRvbVxuICovXG5leHBvcnQgZnVuY3Rpb24gYXBwZW5kKGFuY2hvciwgZG9tKSB7XG5cdGlmIChoeWRyYXRpbmcpIHtcblx0XHQvKiogQHR5cGUge0VmZmVjdH0gKi8gKGFjdGl2ZV9lZmZlY3QpLm5vZGVzX2VuZCA9IGh5ZHJhdGVfbm9kZTtcblx0XHRoeWRyYXRlX25leHQoKTtcblx0XHRyZXR1cm47XG5cdH1cblxuXHRpZiAoYW5jaG9yID09PSBudWxsKSB7XG5cdFx0Ly8gZWRnZSBjYXNlIOKAlCB2b2lkIGA8c3ZlbHRlOmVsZW1lbnQ+YCB3aXRoIGNvbnRlbnRcblx0XHRyZXR1cm47XG5cdH1cblxuXHRhbmNob3IuYmVmb3JlKC8qKiBAdHlwZSB7Tm9kZX0gKi8gKGRvbSkpO1xufVxuIiwiLyoqIEBpbXBvcnQgeyBDb21wb25lbnRDb250ZXh0LCBFZmZlY3QsIFRlbXBsYXRlTm9kZSB9IGZyb20gJyNjbGllbnQnICovXG4vKiogQGltcG9ydCB7IENvbXBvbmVudCwgQ29tcG9uZW50VHlwZSwgU3ZlbHRlQ29tcG9uZW50LCBNb3VudE9wdGlvbnMgfSBmcm9tICcuLi8uLi9pbmRleC5qcycgKi9cbmltcG9ydCB7IERFViB9IGZyb20gJ2VzbS1lbnYnO1xuaW1wb3J0IHtcblx0Y2xlYXJfdGV4dF9jb250ZW50LFxuXHRjcmVhdGVfdGV4dCxcblx0Z2V0X2ZpcnN0X2NoaWxkLFxuXHRnZXRfbmV4dF9zaWJsaW5nLFxuXHRpbml0X29wZXJhdGlvbnNcbn0gZnJvbSAnLi9kb20vb3BlcmF0aW9ucy5qcyc7XG5pbXBvcnQgeyBIWURSQVRJT05fRU5ELCBIWURSQVRJT05fRVJST1IsIEhZRFJBVElPTl9TVEFSVCB9IGZyb20gJy4uLy4uL2NvbnN0YW50cy5qcyc7XG5pbXBvcnQgeyBwdXNoLCBwb3AsIGNvbXBvbmVudF9jb250ZXh0LCBhY3RpdmVfZWZmZWN0IH0gZnJvbSAnLi9ydW50aW1lLmpzJztcbmltcG9ydCB7IGNvbXBvbmVudF9yb290LCBicmFuY2ggfSBmcm9tICcuL3JlYWN0aXZpdHkvZWZmZWN0cy5qcyc7XG5pbXBvcnQge1xuXHRoeWRyYXRlX25leHQsXG5cdGh5ZHJhdGVfbm9kZSxcblx0aHlkcmF0aW5nLFxuXHRzZXRfaHlkcmF0ZV9ub2RlLFxuXHRzZXRfaHlkcmF0aW5nXG59IGZyb20gJy4vZG9tL2h5ZHJhdGlvbi5qcyc7XG5pbXBvcnQgeyBhcnJheV9mcm9tIH0gZnJvbSAnLi4vc2hhcmVkL3V0aWxzLmpzJztcbmltcG9ydCB7XG5cdGFsbF9yZWdpc3RlcmVkX2V2ZW50cyxcblx0aGFuZGxlX2V2ZW50X3Byb3BhZ2F0aW9uLFxuXHRyb290X2V2ZW50X2hhbmRsZXNcbn0gZnJvbSAnLi9kb20vZWxlbWVudHMvZXZlbnRzLmpzJztcbmltcG9ydCB7IHJlc2V0X2hlYWRfYW5jaG9yIH0gZnJvbSAnLi9kb20vYmxvY2tzL3N2ZWx0ZS1oZWFkLmpzJztcbmltcG9ydCAqIGFzIHcgZnJvbSAnLi93YXJuaW5ncy5qcyc7XG5pbXBvcnQgKiBhcyBlIGZyb20gJy4vZXJyb3JzLmpzJztcbmltcG9ydCB7IGFzc2lnbl9ub2RlcyB9IGZyb20gJy4vZG9tL3RlbXBsYXRlLmpzJztcbmltcG9ydCB7IGlzX3Bhc3NpdmVfZXZlbnQgfSBmcm9tICcuLi8uLi91dGlscy5qcyc7XG5cbi8qKlxuICogVGhpcyBpcyBub3JtYWxseSB0cnVlIOKAlCBibG9jayBlZmZlY3RzIHNob3VsZCBydW4gdGhlaXIgaW50cm8gdHJhbnNpdGlvbnMg4oCUXG4gKiBidXQgaXMgZmFsc2UgZHVyaW5nIGh5ZHJhdGlvbiAodW5sZXNzIGBvcHRpb25zLmludHJvYCBpcyBgdHJ1ZWApIGFuZFxuICogd2hlbiBjcmVhdGluZyB0aGUgY2hpbGRyZW4gb2YgYSBgPHN2ZWx0ZTplbGVtZW50PmAgdGhhdCBqdXN0IGNoYW5nZWQgdGFnXG4gKi9cbmV4cG9ydCBsZXQgc2hvdWxkX2ludHJvID0gdHJ1ZTtcblxuLyoqIEBwYXJhbSB7Ym9vbGVhbn0gdmFsdWUgKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXRfc2hvdWxkX2ludHJvKHZhbHVlKSB7XG5cdHNob3VsZF9pbnRybyA9IHZhbHVlO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7RWxlbWVudH0gdGV4dFxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldF90ZXh0KHRleHQsIHZhbHVlKSB7XG5cdC8vIEZvciBvYmplY3RzLCB3ZSBhcHBseSBzdHJpbmcgY29lcmNpb24gKHdoaWNoIG1pZ2h0IG1ha2UgdGhpbmdzIGxpa2UgJHN0YXRlIGFycmF5IHJlZmVyZW5jZXMgaW4gdGhlIHRlbXBsYXRlIHJlYWN0aXZlKSBiZWZvcmUgZGlmZmluZ1xuXHR2YXIgc3RyID0gdmFsdWUgPT0gbnVsbCA/ICcnIDogdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyA/IHZhbHVlICsgJycgOiB2YWx1ZTtcblx0Ly8gQHRzLWV4cGVjdC1lcnJvclxuXHRpZiAoc3RyICE9PSAodGV4dC5fX3QgPz89IHRleHQubm9kZVZhbHVlKSkge1xuXHRcdC8vIEB0cy1leHBlY3QtZXJyb3Jcblx0XHR0ZXh0Ll9fdCA9IHN0cjtcblx0XHR0ZXh0Lm5vZGVWYWx1ZSA9IHN0ciA9PSBudWxsID8gJycgOiBzdHIgKyAnJztcblx0fVxufVxuXG4vKipcbiAqIE1vdW50cyBhIGNvbXBvbmVudCB0byB0aGUgZ2l2ZW4gdGFyZ2V0IGFuZCByZXR1cm5zIHRoZSBleHBvcnRzIGFuZCBwb3RlbnRpYWxseSB0aGUgcHJvcHMgKGlmIGNvbXBpbGVkIHdpdGggYGFjY2Vzc29yczogdHJ1ZWApIG9mIHRoZSBjb21wb25lbnQuXG4gKiBUcmFuc2l0aW9ucyB3aWxsIHBsYXkgZHVyaW5nIHRoZSBpbml0aWFsIHJlbmRlciB1bmxlc3MgdGhlIGBpbnRyb2Agb3B0aW9uIGlzIHNldCB0byBgZmFsc2VgLlxuICpcbiAqIEB0ZW1wbGF0ZSB7UmVjb3JkPHN0cmluZywgYW55Pn0gUHJvcHNcbiAqIEB0ZW1wbGF0ZSB7UmVjb3JkPHN0cmluZywgYW55Pn0gRXhwb3J0c1xuICogQHBhcmFtIHtDb21wb25lbnRUeXBlPFN2ZWx0ZUNvbXBvbmVudDxQcm9wcz4+IHwgQ29tcG9uZW50PFByb3BzLCBFeHBvcnRzLCBhbnk+fSBjb21wb25lbnRcbiAqIEBwYXJhbSB7TW91bnRPcHRpb25zPFByb3BzPn0gb3B0aW9uc1xuICogQHJldHVybnMge0V4cG9ydHN9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtb3VudChjb21wb25lbnQsIG9wdGlvbnMpIHtcblx0cmV0dXJuIF9tb3VudChjb21wb25lbnQsIG9wdGlvbnMpO1xufVxuXG4vKipcbiAqIEh5ZHJhdGVzIGEgY29tcG9uZW50IG9uIHRoZSBnaXZlbiB0YXJnZXQgYW5kIHJldHVybnMgdGhlIGV4cG9ydHMgYW5kIHBvdGVudGlhbGx5IHRoZSBwcm9wcyAoaWYgY29tcGlsZWQgd2l0aCBgYWNjZXNzb3JzOiB0cnVlYCkgb2YgdGhlIGNvbXBvbmVudFxuICpcbiAqIEB0ZW1wbGF0ZSB7UmVjb3JkPHN0cmluZywgYW55Pn0gUHJvcHNcbiAqIEB0ZW1wbGF0ZSB7UmVjb3JkPHN0cmluZywgYW55Pn0gRXhwb3J0c1xuICogQHBhcmFtIHtDb21wb25lbnRUeXBlPFN2ZWx0ZUNvbXBvbmVudDxQcm9wcz4+IHwgQ29tcG9uZW50PFByb3BzLCBFeHBvcnRzLCBhbnk+fSBjb21wb25lbnRcbiAqIEBwYXJhbSB7e30gZXh0ZW5kcyBQcm9wcyA/IHtcbiAqIFx0XHR0YXJnZXQ6IERvY3VtZW50IHwgRWxlbWVudCB8IFNoYWRvd1Jvb3Q7XG4gKiBcdFx0cHJvcHM/OiBQcm9wcztcbiAqIFx0XHRldmVudHM/OiBSZWNvcmQ8c3RyaW5nLCAoZTogYW55KSA9PiBhbnk+O1xuICogIFx0Y29udGV4dD86IE1hcDxhbnksIGFueT47XG4gKiBcdFx0aW50cm8/OiBib29sZWFuO1xuICogXHRcdHJlY292ZXI/OiBib29sZWFuO1xuICogXHR9IDoge1xuICogXHRcdHRhcmdldDogRG9jdW1lbnQgfCBFbGVtZW50IHwgU2hhZG93Um9vdDtcbiAqIFx0XHRwcm9wczogUHJvcHM7XG4gKiBcdFx0ZXZlbnRzPzogUmVjb3JkPHN0cmluZywgKGU6IGFueSkgPT4gYW55PjtcbiAqICBcdGNvbnRleHQ/OiBNYXA8YW55LCBhbnk+O1xuICogXHRcdGludHJvPzogYm9vbGVhbjtcbiAqIFx0XHRyZWNvdmVyPzogYm9vbGVhbjtcbiAqIFx0fX0gb3B0aW9uc1xuICogQHJldHVybnMge0V4cG9ydHN9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBoeWRyYXRlKGNvbXBvbmVudCwgb3B0aW9ucykge1xuXHRpbml0X29wZXJhdGlvbnMoKTtcblx0b3B0aW9ucy5pbnRybyA9IG9wdGlvbnMuaW50cm8gPz8gZmFsc2U7XG5cdGNvbnN0IHRhcmdldCA9IG9wdGlvbnMudGFyZ2V0O1xuXHRjb25zdCB3YXNfaHlkcmF0aW5nID0gaHlkcmF0aW5nO1xuXHRjb25zdCBwcmV2aW91c19oeWRyYXRlX25vZGUgPSBoeWRyYXRlX25vZGU7XG5cblx0dHJ5IHtcblx0XHR2YXIgYW5jaG9yID0gLyoqIEB0eXBlIHtUZW1wbGF0ZU5vZGV9ICovIChnZXRfZmlyc3RfY2hpbGQodGFyZ2V0KSk7XG5cdFx0d2hpbGUgKFxuXHRcdFx0YW5jaG9yICYmXG5cdFx0XHQoYW5jaG9yLm5vZGVUeXBlICE9PSA4IHx8IC8qKiBAdHlwZSB7Q29tbWVudH0gKi8gKGFuY2hvcikuZGF0YSAhPT0gSFlEUkFUSU9OX1NUQVJUKVxuXHRcdCkge1xuXHRcdFx0YW5jaG9yID0gLyoqIEB0eXBlIHtUZW1wbGF0ZU5vZGV9ICovIChnZXRfbmV4dF9zaWJsaW5nKGFuY2hvcikpO1xuXHRcdH1cblxuXHRcdGlmICghYW5jaG9yKSB7XG5cdFx0XHR0aHJvdyBIWURSQVRJT05fRVJST1I7XG5cdFx0fVxuXG5cdFx0c2V0X2h5ZHJhdGluZyh0cnVlKTtcblx0XHRzZXRfaHlkcmF0ZV9ub2RlKC8qKiBAdHlwZSB7Q29tbWVudH0gKi8gKGFuY2hvcikpO1xuXHRcdGh5ZHJhdGVfbmV4dCgpO1xuXG5cdFx0Y29uc3QgaW5zdGFuY2UgPSBfbW91bnQoY29tcG9uZW50LCB7IC4uLm9wdGlvbnMsIGFuY2hvciB9KTtcblxuXHRcdGlmIChcblx0XHRcdGh5ZHJhdGVfbm9kZSA9PT0gbnVsbCB8fFxuXHRcdFx0aHlkcmF0ZV9ub2RlLm5vZGVUeXBlICE9PSA4IHx8XG5cdFx0XHQvKiogQHR5cGUge0NvbW1lbnR9ICovIChoeWRyYXRlX25vZGUpLmRhdGEgIT09IEhZRFJBVElPTl9FTkRcblx0XHQpIHtcblx0XHRcdHcuaHlkcmF0aW9uX21pc21hdGNoKCk7XG5cdFx0XHR0aHJvdyBIWURSQVRJT05fRVJST1I7XG5cdFx0fVxuXG5cdFx0c2V0X2h5ZHJhdGluZyhmYWxzZSk7XG5cblx0XHRyZXR1cm4gLyoqICBAdHlwZSB7RXhwb3J0c30gKi8gKGluc3RhbmNlKTtcblx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRpZiAoZXJyb3IgPT09IEhZRFJBVElPTl9FUlJPUikge1xuXHRcdFx0aWYgKG9wdGlvbnMucmVjb3ZlciA9PT0gZmFsc2UpIHtcblx0XHRcdFx0ZS5oeWRyYXRpb25fZmFpbGVkKCk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIGFuIGVycm9yIG9jY3VyZWQgYWJvdmUsIHRoZSBvcGVyYXRpb25zIG1pZ2h0IG5vdCB5ZXQgaGF2ZSBiZWVuIGluaXRpYWxpc2VkLlxuXHRcdFx0aW5pdF9vcGVyYXRpb25zKCk7XG5cdFx0XHRjbGVhcl90ZXh0X2NvbnRlbnQodGFyZ2V0KTtcblxuXHRcdFx0c2V0X2h5ZHJhdGluZyhmYWxzZSk7XG5cdFx0XHRyZXR1cm4gbW91bnQoY29tcG9uZW50LCBvcHRpb25zKTtcblx0XHR9XG5cblx0XHR0aHJvdyBlcnJvcjtcblx0fSBmaW5hbGx5IHtcblx0XHRzZXRfaHlkcmF0aW5nKHdhc19oeWRyYXRpbmcpO1xuXHRcdHNldF9oeWRyYXRlX25vZGUocHJldmlvdXNfaHlkcmF0ZV9ub2RlKTtcblx0XHRyZXNldF9oZWFkX2FuY2hvcigpO1xuXHR9XG59XG5cbi8qKiBAdHlwZSB7TWFwPHN0cmluZywgbnVtYmVyPn0gKi9cbmNvbnN0IGRvY3VtZW50X2xpc3RlbmVycyA9IG5ldyBNYXAoKTtcblxuLyoqXG4gKiBAdGVtcGxhdGUge1JlY29yZDxzdHJpbmcsIGFueT59IEV4cG9ydHNcbiAqIEBwYXJhbSB7Q29tcG9uZW50VHlwZTxTdmVsdGVDb21wb25lbnQ8YW55Pj4gfCBDb21wb25lbnQ8YW55Pn0gQ29tcG9uZW50XG4gKiBAcGFyYW0ge01vdW50T3B0aW9uc30gb3B0aW9uc1xuICogQHJldHVybnMge0V4cG9ydHN9XG4gKi9cbmZ1bmN0aW9uIF9tb3VudChDb21wb25lbnQsIHsgdGFyZ2V0LCBhbmNob3IsIHByb3BzID0ge30sIGV2ZW50cywgY29udGV4dCwgaW50cm8gPSB0cnVlIH0pIHtcblx0aW5pdF9vcGVyYXRpb25zKCk7XG5cblx0dmFyIHJlZ2lzdGVyZWRfZXZlbnRzID0gbmV3IFNldCgpO1xuXG5cdC8qKiBAcGFyYW0ge0FycmF5PHN0cmluZz59IGV2ZW50cyAqL1xuXHR2YXIgZXZlbnRfaGFuZGxlID0gKGV2ZW50cykgPT4ge1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgZXZlbnRzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgZXZlbnRfbmFtZSA9IGV2ZW50c1tpXTtcblxuXHRcdFx0aWYgKHJlZ2lzdGVyZWRfZXZlbnRzLmhhcyhldmVudF9uYW1lKSkgY29udGludWU7XG5cdFx0XHRyZWdpc3RlcmVkX2V2ZW50cy5hZGQoZXZlbnRfbmFtZSk7XG5cblx0XHRcdHZhciBwYXNzaXZlID0gaXNfcGFzc2l2ZV9ldmVudChldmVudF9uYW1lKTtcblxuXHRcdFx0Ly8gQWRkIHRoZSBldmVudCBsaXN0ZW5lciB0byBib3RoIHRoZSBjb250YWluZXIgYW5kIHRoZSBkb2N1bWVudC5cblx0XHRcdC8vIFRoZSBjb250YWluZXIgbGlzdGVuZXIgZW5zdXJlcyB3ZSBjYXRjaCBldmVudHMgZnJvbSB3aXRoaW4gaW4gY2FzZVxuXHRcdFx0Ly8gdGhlIG91dGVyIGNvbnRlbnQgc3RvcHMgcHJvcGFnYXRpb24gb2YgdGhlIGV2ZW50LlxuXHRcdFx0dGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnRfbmFtZSwgaGFuZGxlX2V2ZW50X3Byb3BhZ2F0aW9uLCB7IHBhc3NpdmUgfSk7XG5cblx0XHRcdHZhciBuID0gZG9jdW1lbnRfbGlzdGVuZXJzLmdldChldmVudF9uYW1lKTtcblxuXHRcdFx0aWYgKG4gPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHQvLyBUaGUgZG9jdW1lbnQgbGlzdGVuZXIgZW5zdXJlcyB3ZSBjYXRjaCBldmVudHMgdGhhdCBvcmlnaW5hdGUgZnJvbSBlbGVtZW50cyB0aGF0IHdlcmVcblx0XHRcdFx0Ly8gbWFudWFsbHkgbW92ZWQgb3V0c2lkZSBvZiB0aGUgY29udGFpbmVyIChlLmcuIHZpYSBtYW51YWwgcG9ydGFscykuXG5cdFx0XHRcdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnRfbmFtZSwgaGFuZGxlX2V2ZW50X3Byb3BhZ2F0aW9uLCB7IHBhc3NpdmUgfSk7XG5cdFx0XHRcdGRvY3VtZW50X2xpc3RlbmVycy5zZXQoZXZlbnRfbmFtZSwgMSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkb2N1bWVudF9saXN0ZW5lcnMuc2V0KGV2ZW50X25hbWUsIG4gKyAxKTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cblx0ZXZlbnRfaGFuZGxlKGFycmF5X2Zyb20oYWxsX3JlZ2lzdGVyZWRfZXZlbnRzKSk7XG5cdHJvb3RfZXZlbnRfaGFuZGxlcy5hZGQoZXZlbnRfaGFuZGxlKTtcblxuXHQvKiogQHR5cGUge0V4cG9ydHN9ICovXG5cdC8vIEB0cy1leHBlY3QtZXJyb3Igd2lsbCBiZSBkZWZpbmVkIGJlY2F1c2UgdGhlIHJlbmRlciBlZmZlY3QgcnVucyBzeW5jaHJvbm91c2x5XG5cdHZhciBjb21wb25lbnQgPSB1bmRlZmluZWQ7XG5cblx0dmFyIHVubW91bnQgPSBjb21wb25lbnRfcm9vdCgoKSA9PiB7XG5cdFx0dmFyIGFuY2hvcl9ub2RlID0gYW5jaG9yID8/IHRhcmdldC5hcHBlbmRDaGlsZChjcmVhdGVfdGV4dCgpKTtcblxuXHRcdGJyYW5jaCgoKSA9PiB7XG5cdFx0XHRpZiAoY29udGV4dCkge1xuXHRcdFx0XHRwdXNoKHt9KTtcblx0XHRcdFx0dmFyIGN0eCA9IC8qKiBAdHlwZSB7Q29tcG9uZW50Q29udGV4dH0gKi8gKGNvbXBvbmVudF9jb250ZXh0KTtcblx0XHRcdFx0Y3R4LmMgPSBjb250ZXh0O1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoZXZlbnRzKSB7XG5cdFx0XHRcdC8vIFdlIGNhbid0IHNwcmVhZCB0aGUgb2JqZWN0IG9yIGVsc2Ugd2UnZCBsb3NlIHRoZSBzdGF0ZSBwcm94eSBzdHVmZiwgaWYgaXQgaXMgb25lXG5cdFx0XHRcdC8qKiBAdHlwZSB7YW55fSAqLyAocHJvcHMpLiQkZXZlbnRzID0gZXZlbnRzO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoaHlkcmF0aW5nKSB7XG5cdFx0XHRcdGFzc2lnbl9ub2RlcygvKiogQHR5cGUge1RlbXBsYXRlTm9kZX0gKi8gKGFuY2hvcl9ub2RlKSwgbnVsbCk7XG5cdFx0XHR9XG5cblx0XHRcdHNob3VsZF9pbnRybyA9IGludHJvO1xuXHRcdFx0Ly8gQHRzLWV4cGVjdC1lcnJvciB0aGUgcHVibGljIHR5cGluZ3MgYXJlIG5vdCB3aGF0IHRoZSBhY3R1YWwgZnVuY3Rpb24gbG9va3MgbGlrZVxuXHRcdFx0Y29tcG9uZW50ID0gQ29tcG9uZW50KGFuY2hvcl9ub2RlLCBwcm9wcykgfHwge307XG5cdFx0XHRzaG91bGRfaW50cm8gPSB0cnVlO1xuXG5cdFx0XHRpZiAoaHlkcmF0aW5nKSB7XG5cdFx0XHRcdC8qKiBAdHlwZSB7RWZmZWN0fSAqLyAoYWN0aXZlX2VmZmVjdCkubm9kZXNfZW5kID0gaHlkcmF0ZV9ub2RlO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoY29udGV4dCkge1xuXHRcdFx0XHRwb3AoKTtcblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdHJldHVybiAoKSA9PiB7XG5cdFx0XHRmb3IgKHZhciBldmVudF9uYW1lIG9mIHJlZ2lzdGVyZWRfZXZlbnRzKSB7XG5cdFx0XHRcdHRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50X25hbWUsIGhhbmRsZV9ldmVudF9wcm9wYWdhdGlvbik7XG5cblx0XHRcdFx0dmFyIG4gPSAvKiogQHR5cGUge251bWJlcn0gKi8gKGRvY3VtZW50X2xpc3RlbmVycy5nZXQoZXZlbnRfbmFtZSkpO1xuXG5cdFx0XHRcdGlmICgtLW4gPT09IDApIHtcblx0XHRcdFx0XHRkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50X25hbWUsIGhhbmRsZV9ldmVudF9wcm9wYWdhdGlvbik7XG5cdFx0XHRcdFx0ZG9jdW1lbnRfbGlzdGVuZXJzLmRlbGV0ZShldmVudF9uYW1lKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRkb2N1bWVudF9saXN0ZW5lcnMuc2V0KGV2ZW50X25hbWUsIG4pO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHJvb3RfZXZlbnRfaGFuZGxlcy5kZWxldGUoZXZlbnRfaGFuZGxlKTtcblxuXHRcdFx0aWYgKGFuY2hvcl9ub2RlICE9PSBhbmNob3IpIHtcblx0XHRcdFx0YW5jaG9yX25vZGUucGFyZW50Tm9kZT8ucmVtb3ZlQ2hpbGQoYW5jaG9yX25vZGUpO1xuXHRcdFx0fVxuXHRcdH07XG5cdH0pO1xuXG5cdG1vdW50ZWRfY29tcG9uZW50cy5zZXQoY29tcG9uZW50LCB1bm1vdW50KTtcblx0cmV0dXJuIGNvbXBvbmVudDtcbn1cblxuLyoqXG4gKiBSZWZlcmVuY2VzIG9mIHRoZSBjb21wb25lbnRzIHRoYXQgd2VyZSBtb3VudGVkIG9yIGh5ZHJhdGVkLlxuICogVXNlcyBhIGBXZWFrTWFwYCB0byBhdm9pZCBtZW1vcnkgbGVha3MuXG4gKi9cbmxldCBtb3VudGVkX2NvbXBvbmVudHMgPSBuZXcgV2Vha01hcCgpO1xuXG4vKipcbiAqIFVubW91bnRzIGEgY29tcG9uZW50IHRoYXQgd2FzIHByZXZpb3VzbHkgbW91bnRlZCB1c2luZyBgbW91bnRgIG9yIGBoeWRyYXRlYC5cbiAqXG4gKiBTaW5jZSA1LjEzLjAsIGlmIGBvcHRpb25zLm91dHJvYCBpcyBgdHJ1ZWAsIFt0cmFuc2l0aW9uc10oaHR0cHM6Ly9zdmVsdGUuZGV2L2RvY3Mvc3ZlbHRlL3RyYW5zaXRpb24pIHdpbGwgcGxheSBiZWZvcmUgdGhlIGNvbXBvbmVudCBpcyByZW1vdmVkIGZyb20gdGhlIERPTS5cbiAqXG4gKiBSZXR1cm5zIGEgYFByb21pc2VgIHRoYXQgcmVzb2x2ZXMgYWZ0ZXIgdHJhbnNpdGlvbnMgaGF2ZSBjb21wbGV0ZWQgaWYgYG9wdGlvbnMub3V0cm9gIGlzIHRydWUsIG9yIGltbWVkaWF0ZWx5IG90aGVyd2lzZSAocHJpb3IgdG8gNS4xMy4wLCByZXR1cm5zIGB2b2lkYCkuXG4gKlxuICogYGBganNcbiAqIGltcG9ydCB7IG1vdW50LCB1bm1vdW50IH0gZnJvbSAnc3ZlbHRlJztcbiAqIGltcG9ydCBBcHAgZnJvbSAnLi9BcHAuc3ZlbHRlJztcbiAqXG4gKiBjb25zdCBhcHAgPSBtb3VudChBcHAsIHsgdGFyZ2V0OiBkb2N1bWVudC5ib2R5IH0pO1xuICpcbiAqIC8vIGxhdGVyLi4uXG4gKiB1bm1vdW50KGFwcCwgeyBvdXRybzogdHJ1ZSB9KTtcbiAqIGBgYFxuICogQHBhcmFtIHtSZWNvcmQ8c3RyaW5nLCBhbnk+fSBjb21wb25lbnRcbiAqIEBwYXJhbSB7eyBvdXRybz86IGJvb2xlYW4gfX0gW29wdGlvbnNdXG4gKiBAcmV0dXJucyB7UHJvbWlzZTx2b2lkPn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVubW91bnQoY29tcG9uZW50LCBvcHRpb25zKSB7XG5cdGNvbnN0IGZuID0gbW91bnRlZF9jb21wb25lbnRzLmdldChjb21wb25lbnQpO1xuXG5cdGlmIChmbikge1xuXHRcdG1vdW50ZWRfY29tcG9uZW50cy5kZWxldGUoY29tcG9uZW50KTtcblx0XHRyZXR1cm4gZm4ob3B0aW9ucyk7XG5cdH1cblxuXHRpZiAoREVWKSB7XG5cdFx0dy5saWZlY3ljbGVfZG91YmxlX3VubW91bnQoKTtcblx0fVxuXG5cdHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbn1cbiIsIi8qKiBAaW1wb3J0IHsgRWZmZWN0LCBUZW1wbGF0ZU5vZGUgfSBmcm9tICcjY2xpZW50JyAqL1xuaW1wb3J0IHsgRUZGRUNUX1RSQU5TUEFSRU5UIH0gZnJvbSAnLi4vLi4vY29uc3RhbnRzLmpzJztcbmltcG9ydCB7XG5cdGh5ZHJhdGVfbmV4dCxcblx0aHlkcmF0ZV9ub2RlLFxuXHRoeWRyYXRpbmcsXG5cdHJlbW92ZV9ub2Rlcyxcblx0c2V0X2h5ZHJhdGVfbm9kZSxcblx0c2V0X2h5ZHJhdGluZ1xufSBmcm9tICcuLi9oeWRyYXRpb24uanMnO1xuaW1wb3J0IHsgYmxvY2ssIGJyYW5jaCwgcGF1c2VfZWZmZWN0LCByZXN1bWVfZWZmZWN0IH0gZnJvbSAnLi4vLi4vcmVhY3Rpdml0eS9lZmZlY3RzLmpzJztcbmltcG9ydCB7IEhZRFJBVElPTl9TVEFSVF9FTFNFLCBVTklOSVRJQUxJWkVEIH0gZnJvbSAnLi4vLi4vLi4vLi4vY29uc3RhbnRzLmpzJztcblxuLyoqXG4gKiBAcGFyYW0ge1RlbXBsYXRlTm9kZX0gbm9kZVxuICogQHBhcmFtIHsoYnJhbmNoOiAoZm46IChhbmNob3I6IE5vZGUpID0+IHZvaWQsIGZsYWc/OiBib29sZWFuKSA9PiB2b2lkKSA9PiB2b2lkfSBmblxuICogQHBhcmFtIHtib29sZWFufSBbZWxzZWlmXSBUcnVlIGlmIHRoaXMgaXMgYW4gYHs6ZWxzZSBpZiAuLi59YCBibG9jayByYXRoZXIgdGhhbiBhbiBgeyNpZiAuLi59YCwgYXMgdGhhdCBhZmZlY3RzIHdoaWNoIHRyYW5zaXRpb25zIGFyZSBjb25zaWRlcmVkICdsb2NhbCdcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5leHBvcnQgZnVuY3Rpb24gaWZfYmxvY2sobm9kZSwgZm4sIGVsc2VpZiA9IGZhbHNlKSB7XG5cdGlmIChoeWRyYXRpbmcpIHtcblx0XHRoeWRyYXRlX25leHQoKTtcblx0fVxuXG5cdHZhciBhbmNob3IgPSBub2RlO1xuXG5cdC8qKiBAdHlwZSB7RWZmZWN0IHwgbnVsbH0gKi9cblx0dmFyIGNvbnNlcXVlbnRfZWZmZWN0ID0gbnVsbDtcblxuXHQvKiogQHR5cGUge0VmZmVjdCB8IG51bGx9ICovXG5cdHZhciBhbHRlcm5hdGVfZWZmZWN0ID0gbnVsbDtcblxuXHQvKiogQHR5cGUge1VOSU5JVElBTElaRUQgfCBib29sZWFuIHwgbnVsbH0gKi9cblx0dmFyIGNvbmRpdGlvbiA9IFVOSU5JVElBTElaRUQ7XG5cblx0dmFyIGZsYWdzID0gZWxzZWlmID8gRUZGRUNUX1RSQU5TUEFSRU5UIDogMDtcblxuXHR2YXIgaGFzX2JyYW5jaCA9IGZhbHNlO1xuXG5cdGNvbnN0IHNldF9icmFuY2ggPSAoLyoqIEB0eXBlIHsoYW5jaG9yOiBOb2RlKSA9PiB2b2lkfSAqLyBmbiwgZmxhZyA9IHRydWUpID0+IHtcblx0XHRoYXNfYnJhbmNoID0gdHJ1ZTtcblx0XHR1cGRhdGVfYnJhbmNoKGZsYWcsIGZuKTtcblx0fTtcblxuXHRjb25zdCB1cGRhdGVfYnJhbmNoID0gKFxuXHRcdC8qKiBAdHlwZSB7Ym9vbGVhbiB8IG51bGx9ICovIG5ld19jb25kaXRpb24sXG5cdFx0LyoqIEB0eXBlIHtudWxsIHwgKChhbmNob3I6IE5vZGUpID0+IHZvaWQpfSAqLyBmblxuXHQpID0+IHtcblx0XHRpZiAoY29uZGl0aW9uID09PSAoY29uZGl0aW9uID0gbmV3X2NvbmRpdGlvbikpIHJldHVybjtcblxuXHRcdC8qKiBXaGV0aGVyIG9yIG5vdCB0aGVyZSB3YXMgYSBoeWRyYXRpb24gbWlzbWF0Y2guIE5lZWRzIHRvIGJlIGEgYGxldGAgb3IgZWxzZSBpdCBpc24ndCB0cmVlc2hha2VuIG91dCAqL1xuXHRcdGxldCBtaXNtYXRjaCA9IGZhbHNlO1xuXG5cdFx0aWYgKGh5ZHJhdGluZykge1xuXHRcdFx0Y29uc3QgaXNfZWxzZSA9IC8qKiBAdHlwZSB7Q29tbWVudH0gKi8gKGFuY2hvcikuZGF0YSA9PT0gSFlEUkFUSU9OX1NUQVJUX0VMU0U7XG5cblx0XHRcdGlmICghIWNvbmRpdGlvbiA9PT0gaXNfZWxzZSkge1xuXHRcdFx0XHQvLyBIeWRyYXRpb24gbWlzbWF0Y2g6IHJlbW92ZSBldmVyeXRoaW5nIGluc2lkZSB0aGUgYW5jaG9yIGFuZCBzdGFydCBmcmVzaC5cblx0XHRcdFx0Ly8gVGhpcyBjb3VsZCBoYXBwZW4gd2l0aCBgeyNpZiBicm93c2VyfS4uLnsvaWZ9YCwgZm9yIGV4YW1wbGVcblx0XHRcdFx0YW5jaG9yID0gcmVtb3ZlX25vZGVzKCk7XG5cblx0XHRcdFx0c2V0X2h5ZHJhdGVfbm9kZShhbmNob3IpO1xuXHRcdFx0XHRzZXRfaHlkcmF0aW5nKGZhbHNlKTtcblx0XHRcdFx0bWlzbWF0Y2ggPSB0cnVlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmIChjb25kaXRpb24pIHtcblx0XHRcdGlmIChjb25zZXF1ZW50X2VmZmVjdCkge1xuXHRcdFx0XHRyZXN1bWVfZWZmZWN0KGNvbnNlcXVlbnRfZWZmZWN0KTtcblx0XHRcdH0gZWxzZSBpZiAoZm4pIHtcblx0XHRcdFx0Y29uc2VxdWVudF9lZmZlY3QgPSBicmFuY2goKCkgPT4gZm4oYW5jaG9yKSk7XG5cdFx0XHR9XG5cblx0XHRcdGlmIChhbHRlcm5hdGVfZWZmZWN0KSB7XG5cdFx0XHRcdHBhdXNlX2VmZmVjdChhbHRlcm5hdGVfZWZmZWN0LCAoKSA9PiB7XG5cdFx0XHRcdFx0YWx0ZXJuYXRlX2VmZmVjdCA9IG51bGw7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRpZiAoYWx0ZXJuYXRlX2VmZmVjdCkge1xuXHRcdFx0XHRyZXN1bWVfZWZmZWN0KGFsdGVybmF0ZV9lZmZlY3QpO1xuXHRcdFx0fSBlbHNlIGlmIChmbikge1xuXHRcdFx0XHRhbHRlcm5hdGVfZWZmZWN0ID0gYnJhbmNoKCgpID0+IGZuKGFuY2hvcikpO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoY29uc2VxdWVudF9lZmZlY3QpIHtcblx0XHRcdFx0cGF1c2VfZWZmZWN0KGNvbnNlcXVlbnRfZWZmZWN0LCAoKSA9PiB7XG5cdFx0XHRcdFx0Y29uc2VxdWVudF9lZmZlY3QgPSBudWxsO1xuXHRcdFx0XHR9KTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAobWlzbWF0Y2gpIHtcblx0XHRcdC8vIGNvbnRpbnVlIGluIGh5ZHJhdGlvbiBtb2RlXG5cdFx0XHRzZXRfaHlkcmF0aW5nKHRydWUpO1xuXHRcdH1cblx0fTtcblxuXHRibG9jaygoKSA9PiB7XG5cdFx0aGFzX2JyYW5jaCA9IGZhbHNlO1xuXHRcdGZuKHNldF9icmFuY2gpO1xuXHRcdGlmICghaGFzX2JyYW5jaCkge1xuXHRcdFx0dXBkYXRlX2JyYW5jaChudWxsLCBudWxsKTtcblx0XHR9XG5cdH0sIGZsYWdzKTtcblxuXHRpZiAoaHlkcmF0aW5nKSB7XG5cdFx0YW5jaG9yID0gaHlkcmF0ZV9ub2RlO1xuXHR9XG59XG4iLCIvKiogQGltcG9ydCB7IEVhY2hJdGVtLCBFYWNoU3RhdGUsIEVmZmVjdCwgTWF5YmVTb3VyY2UsIFNvdXJjZSwgVGVtcGxhdGVOb2RlLCBUcmFuc2l0aW9uTWFuYWdlciwgVmFsdWUgfSBmcm9tICcjY2xpZW50JyAqL1xuaW1wb3J0IHtcblx0RUFDSF9JTkRFWF9SRUFDVElWRSxcblx0RUFDSF9JU19BTklNQVRFRCxcblx0RUFDSF9JU19DT05UUk9MTEVELFxuXHRFQUNIX0lURU1fSU1NVVRBQkxFLFxuXHRFQUNIX0lURU1fUkVBQ1RJVkUsXG5cdEhZRFJBVElPTl9FTkQsXG5cdEhZRFJBVElPTl9TVEFSVF9FTFNFXG59IGZyb20gJy4uLy4uLy4uLy4uL2NvbnN0YW50cy5qcyc7XG5pbXBvcnQge1xuXHRoeWRyYXRlX25leHQsXG5cdGh5ZHJhdGVfbm9kZSxcblx0aHlkcmF0aW5nLFxuXHRyZW1vdmVfbm9kZXMsXG5cdHNldF9oeWRyYXRlX25vZGUsXG5cdHNldF9oeWRyYXRpbmdcbn0gZnJvbSAnLi4vaHlkcmF0aW9uLmpzJztcbmltcG9ydCB7XG5cdGNsZWFyX3RleHRfY29udGVudCxcblx0Y3JlYXRlX3RleHQsXG5cdGdldF9maXJzdF9jaGlsZCxcblx0Z2V0X25leHRfc2libGluZ1xufSBmcm9tICcuLi9vcGVyYXRpb25zLmpzJztcbmltcG9ydCB7XG5cdGJsb2NrLFxuXHRicmFuY2gsXG5cdGRlc3Ryb3lfZWZmZWN0LFxuXHRydW5fb3V0X3RyYW5zaXRpb25zLFxuXHRwYXVzZV9jaGlsZHJlbixcblx0cGF1c2VfZWZmZWN0LFxuXHRyZXN1bWVfZWZmZWN0XG59IGZyb20gJy4uLy4uL3JlYWN0aXZpdHkvZWZmZWN0cy5qcyc7XG5pbXBvcnQgeyBzb3VyY2UsIG11dGFibGVfc291cmNlLCBpbnRlcm5hbF9zZXQgfSBmcm9tICcuLi8uLi9yZWFjdGl2aXR5L3NvdXJjZXMuanMnO1xuaW1wb3J0IHsgYXJyYXlfZnJvbSwgaXNfYXJyYXkgfSBmcm9tICcuLi8uLi8uLi9zaGFyZWQvdXRpbHMuanMnO1xuaW1wb3J0IHsgSU5FUlQgfSBmcm9tICcuLi8uLi9jb25zdGFudHMuanMnO1xuaW1wb3J0IHsgcXVldWVfbWljcm9fdGFzayB9IGZyb20gJy4uL3Rhc2suanMnO1xuaW1wb3J0IHsgYWN0aXZlX2VmZmVjdCwgYWN0aXZlX3JlYWN0aW9uIH0gZnJvbSAnLi4vLi4vcnVudGltZS5qcyc7XG5pbXBvcnQgeyBERVYgfSBmcm9tICdlc20tZW52JztcblxuLyoqXG4gKiBUaGUgcm93IG9mIGEga2V5ZWQgZWFjaCBibG9jayB0aGF0IGlzIGN1cnJlbnRseSB1cGRhdGluZy4gV2UgdHJhY2sgdGhpc1xuICogc28gdGhhdCBgYW5pbWF0ZTpgIGRpcmVjdGl2ZXMgaGF2ZSBzb21ldGhpbmcgdG8gYXR0YWNoIHRoZW1zZWx2ZXMgdG9cbiAqIEB0eXBlIHtFYWNoSXRlbSB8IG51bGx9XG4gKi9cbmV4cG9ydCBsZXQgY3VycmVudF9lYWNoX2l0ZW0gPSBudWxsO1xuXG4vKiogQHBhcmFtIHtFYWNoSXRlbSB8IG51bGx9IGl0ZW0gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXRfY3VycmVudF9lYWNoX2l0ZW0oaXRlbSkge1xuXHRjdXJyZW50X2VhY2hfaXRlbSA9IGl0ZW07XG59XG5cbi8qKlxuICogQHBhcmFtIHthbnl9IF9cbiAqIEBwYXJhbSB7bnVtYmVyfSBpXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpbmRleChfLCBpKSB7XG5cdHJldHVybiBpO1xufVxuXG4vKipcbiAqIFBhdXNlIG11bHRpcGxlIGVmZmVjdHMgc2ltdWx0YW5lb3VzbHksIGFuZCBjb29yZGluYXRlIHRoZWlyXG4gKiBzdWJzZXF1ZW50IGRlc3RydWN0aW9uLiBVc2VkIGluIGVhY2ggYmxvY2tzXG4gKiBAcGFyYW0ge0VhY2hTdGF0ZX0gc3RhdGVcbiAqIEBwYXJhbSB7RWFjaEl0ZW1bXX0gaXRlbXNcbiAqIEBwYXJhbSB7bnVsbCB8IE5vZGV9IGNvbnRyb2xsZWRfYW5jaG9yXG4gKiBAcGFyYW0ge01hcDxhbnksIEVhY2hJdGVtPn0gaXRlbXNfbWFwXG4gKi9cbmZ1bmN0aW9uIHBhdXNlX2VmZmVjdHMoc3RhdGUsIGl0ZW1zLCBjb250cm9sbGVkX2FuY2hvciwgaXRlbXNfbWFwKSB7XG5cdC8qKiBAdHlwZSB7VHJhbnNpdGlvbk1hbmFnZXJbXX0gKi9cblx0dmFyIHRyYW5zaXRpb25zID0gW107XG5cdHZhciBsZW5ndGggPSBpdGVtcy5sZW5ndGg7XG5cblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuXHRcdHBhdXNlX2NoaWxkcmVuKGl0ZW1zW2ldLmUsIHRyYW5zaXRpb25zLCB0cnVlKTtcblx0fVxuXG5cdHZhciBpc19jb250cm9sbGVkID0gbGVuZ3RoID4gMCAmJiB0cmFuc2l0aW9ucy5sZW5ndGggPT09IDAgJiYgY29udHJvbGxlZF9hbmNob3IgIT09IG51bGw7XG5cdC8vIElmIHdlIGhhdmUgYSBjb250cm9sbGVkIGFuY2hvciwgaXQgbWVhbnMgdGhhdCB0aGUgZWFjaCBibG9jayBpcyBpbnNpZGUgYSBzaW5nbGVcblx0Ly8gRE9NIGVsZW1lbnQsIHNvIHdlIGNhbiBhcHBseSBhIGZhc3QtcGF0aCBmb3IgY2xlYXJpbmcgdGhlIGNvbnRlbnRzIG9mIHRoZSBlbGVtZW50LlxuXHRpZiAoaXNfY29udHJvbGxlZCkge1xuXHRcdHZhciBwYXJlbnRfbm9kZSA9IC8qKiBAdHlwZSB7RWxlbWVudH0gKi8gKFxuXHRcdFx0LyoqIEB0eXBlIHtFbGVtZW50fSAqLyAoY29udHJvbGxlZF9hbmNob3IpLnBhcmVudE5vZGVcblx0XHQpO1xuXHRcdGNsZWFyX3RleHRfY29udGVudChwYXJlbnRfbm9kZSk7XG5cdFx0cGFyZW50X25vZGUuYXBwZW5kKC8qKiBAdHlwZSB7RWxlbWVudH0gKi8gKGNvbnRyb2xsZWRfYW5jaG9yKSk7XG5cdFx0aXRlbXNfbWFwLmNsZWFyKCk7XG5cdFx0bGluayhzdGF0ZSwgaXRlbXNbMF0ucHJldiwgaXRlbXNbbGVuZ3RoIC0gMV0ubmV4dCk7XG5cdH1cblxuXHRydW5fb3V0X3RyYW5zaXRpb25zKHRyYW5zaXRpb25zLCAoKSA9PiB7XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGl0ZW0gPSBpdGVtc1tpXTtcblx0XHRcdGlmICghaXNfY29udHJvbGxlZCkge1xuXHRcdFx0XHRpdGVtc19tYXAuZGVsZXRlKGl0ZW0uayk7XG5cdFx0XHRcdGxpbmsoc3RhdGUsIGl0ZW0ucHJldiwgaXRlbS5uZXh0KTtcblx0XHRcdH1cblx0XHRcdGRlc3Ryb3lfZWZmZWN0KGl0ZW0uZSwgIWlzX2NvbnRyb2xsZWQpO1xuXHRcdH1cblx0fSk7XG59XG5cbi8qKlxuICogQHRlbXBsYXRlIFZcbiAqIEBwYXJhbSB7RWxlbWVudCB8IENvbW1lbnR9IG5vZGUgVGhlIG5leHQgc2libGluZyBub2RlLCBvciB0aGUgcGFyZW50IG5vZGUgaWYgdGhpcyBpcyBhICdjb250cm9sbGVkJyBibG9ja1xuICogQHBhcmFtIHtudW1iZXJ9IGZsYWdzXG4gKiBAcGFyYW0geygpID0+IFZbXX0gZ2V0X2NvbGxlY3Rpb25cbiAqIEBwYXJhbSB7KHZhbHVlOiBWLCBpbmRleDogbnVtYmVyKSA9PiBhbnl9IGdldF9rZXlcbiAqIEBwYXJhbSB7KGFuY2hvcjogTm9kZSwgaXRlbTogTWF5YmVTb3VyY2U8Vj4sIGluZGV4OiBNYXliZVNvdXJjZTxudW1iZXI+KSA9PiB2b2lkfSByZW5kZXJfZm5cbiAqIEBwYXJhbSB7bnVsbCB8ICgoYW5jaG9yOiBOb2RlKSA9PiB2b2lkKX0gZmFsbGJhY2tfZm5cbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5leHBvcnQgZnVuY3Rpb24gZWFjaChub2RlLCBmbGFncywgZ2V0X2NvbGxlY3Rpb24sIGdldF9rZXksIHJlbmRlcl9mbiwgZmFsbGJhY2tfZm4gPSBudWxsKSB7XG5cdHZhciBhbmNob3IgPSBub2RlO1xuXG5cdC8qKiBAdHlwZSB7RWFjaFN0YXRlfSAqL1xuXHR2YXIgc3RhdGUgPSB7IGZsYWdzLCBpdGVtczogbmV3IE1hcCgpLCBmaXJzdDogbnVsbCB9O1xuXG5cdHZhciBpc19jb250cm9sbGVkID0gKGZsYWdzICYgRUFDSF9JU19DT05UUk9MTEVEKSAhPT0gMDtcblxuXHRpZiAoaXNfY29udHJvbGxlZCkge1xuXHRcdHZhciBwYXJlbnRfbm9kZSA9IC8qKiBAdHlwZSB7RWxlbWVudH0gKi8gKG5vZGUpO1xuXG5cdFx0YW5jaG9yID0gaHlkcmF0aW5nXG5cdFx0XHQ/IHNldF9oeWRyYXRlX25vZGUoLyoqIEB0eXBlIHtDb21tZW50IHwgVGV4dH0gKi8gKGdldF9maXJzdF9jaGlsZChwYXJlbnRfbm9kZSkpKVxuXHRcdFx0OiBwYXJlbnRfbm9kZS5hcHBlbmRDaGlsZChjcmVhdGVfdGV4dCgpKTtcblx0fVxuXG5cdGlmIChoeWRyYXRpbmcpIHtcblx0XHRoeWRyYXRlX25leHQoKTtcblx0fVxuXG5cdC8qKiBAdHlwZSB7RWZmZWN0IHwgbnVsbH0gKi9cblx0dmFyIGZhbGxiYWNrID0gbnVsbDtcblxuXHR2YXIgd2FzX2VtcHR5ID0gZmFsc2U7XG5cblx0YmxvY2soKCkgPT4ge1xuXHRcdHZhciBjb2xsZWN0aW9uID0gZ2V0X2NvbGxlY3Rpb24oKTtcblxuXHRcdHZhciBhcnJheSA9IGlzX2FycmF5KGNvbGxlY3Rpb24pXG5cdFx0XHQ/IGNvbGxlY3Rpb25cblx0XHRcdDogY29sbGVjdGlvbiA9PSBudWxsXG5cdFx0XHRcdD8gW11cblx0XHRcdFx0OiBhcnJheV9mcm9tKGNvbGxlY3Rpb24pO1xuXG5cdFx0dmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuXHRcdGlmICh3YXNfZW1wdHkgJiYgbGVuZ3RoID09PSAwKSB7XG5cdFx0XHQvLyBpZ25vcmUgdXBkYXRlcyBpZiB0aGUgYXJyYXkgaXMgZW1wdHksXG5cdFx0XHQvLyBhbmQgaXQgYWxyZWFkeSB3YXMgZW1wdHkgb24gcHJldmlvdXMgcnVuXG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdHdhc19lbXB0eSA9IGxlbmd0aCA9PT0gMDtcblxuXHRcdC8qKiBgdHJ1ZWAgaWYgdGhlcmUgd2FzIGEgaHlkcmF0aW9uIG1pc21hdGNoLiBOZWVkcyB0byBiZSBhIGBsZXRgIG9yIGVsc2UgaXQgaXNuJ3QgdHJlZXNoYWtlbiBvdXQgKi9cblx0XHRsZXQgbWlzbWF0Y2ggPSBmYWxzZTtcblxuXHRcdGlmIChoeWRyYXRpbmcpIHtcblx0XHRcdHZhciBpc19lbHNlID0gLyoqIEB0eXBlIHtDb21tZW50fSAqLyAoYW5jaG9yKS5kYXRhID09PSBIWURSQVRJT05fU1RBUlRfRUxTRTtcblxuXHRcdFx0aWYgKGlzX2Vsc2UgIT09IChsZW5ndGggPT09IDApKSB7XG5cdFx0XHRcdC8vIGh5ZHJhdGlvbiBtaXNtYXRjaCDigJQgcmVtb3ZlIHRoZSBzZXJ2ZXItcmVuZGVyZWQgRE9NIGFuZCBzdGFydCBvdmVyXG5cdFx0XHRcdGFuY2hvciA9IHJlbW92ZV9ub2RlcygpO1xuXG5cdFx0XHRcdHNldF9oeWRyYXRlX25vZGUoYW5jaG9yKTtcblx0XHRcdFx0c2V0X2h5ZHJhdGluZyhmYWxzZSk7XG5cdFx0XHRcdG1pc21hdGNoID0gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyB0aGlzIGlzIHNlcGFyYXRlIHRvIHRoZSBwcmV2aW91cyBibG9jayBiZWNhdXNlIGBoeWRyYXRpbmdgIG1pZ2h0IGNoYW5nZVxuXHRcdGlmIChoeWRyYXRpbmcpIHtcblx0XHRcdC8qKiBAdHlwZSB7RWFjaEl0ZW0gfCBudWxsfSAqL1xuXHRcdFx0dmFyIHByZXYgPSBudWxsO1xuXG5cdFx0XHQvKiogQHR5cGUge0VhY2hJdGVtfSAqL1xuXHRcdFx0dmFyIGl0ZW07XG5cblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0aWYgKFxuXHRcdFx0XHRcdGh5ZHJhdGVfbm9kZS5ub2RlVHlwZSA9PT0gOCAmJlxuXHRcdFx0XHRcdC8qKiBAdHlwZSB7Q29tbWVudH0gKi8gKGh5ZHJhdGVfbm9kZSkuZGF0YSA9PT0gSFlEUkFUSU9OX0VORFxuXHRcdFx0XHQpIHtcblx0XHRcdFx0XHQvLyBUaGUgc2VydmVyIHJlbmRlcmVkIGZld2VyIGl0ZW1zIHRoYW4gZXhwZWN0ZWQsXG5cdFx0XHRcdFx0Ly8gc28gYnJlYWsgb3V0IGFuZCBjb250aW51ZSBhcHBlbmRpbmcgbm9uLWh5ZHJhdGVkIGl0ZW1zXG5cdFx0XHRcdFx0YW5jaG9yID0gLyoqIEB0eXBlIHtDb21tZW50fSAqLyAoaHlkcmF0ZV9ub2RlKTtcblx0XHRcdFx0XHRtaXNtYXRjaCA9IHRydWU7XG5cdFx0XHRcdFx0c2V0X2h5ZHJhdGluZyhmYWxzZSk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHR2YXIgdmFsdWUgPSBhcnJheVtpXTtcblx0XHRcdFx0dmFyIGtleSA9IGdldF9rZXkodmFsdWUsIGkpO1xuXHRcdFx0XHRpdGVtID0gY3JlYXRlX2l0ZW0oXG5cdFx0XHRcdFx0aHlkcmF0ZV9ub2RlLFxuXHRcdFx0XHRcdHN0YXRlLFxuXHRcdFx0XHRcdHByZXYsXG5cdFx0XHRcdFx0bnVsbCxcblx0XHRcdFx0XHR2YWx1ZSxcblx0XHRcdFx0XHRrZXksXG5cdFx0XHRcdFx0aSxcblx0XHRcdFx0XHRyZW5kZXJfZm4sXG5cdFx0XHRcdFx0ZmxhZ3MsXG5cdFx0XHRcdFx0Z2V0X2NvbGxlY3Rpb25cblx0XHRcdFx0KTtcblx0XHRcdFx0c3RhdGUuaXRlbXMuc2V0KGtleSwgaXRlbSk7XG5cblx0XHRcdFx0cHJldiA9IGl0ZW07XG5cdFx0XHR9XG5cblx0XHRcdC8vIHJlbW92ZSBleGNlc3Mgbm9kZXNcblx0XHRcdGlmIChsZW5ndGggPiAwKSB7XG5cdFx0XHRcdHNldF9oeWRyYXRlX25vZGUocmVtb3ZlX25vZGVzKCkpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICghaHlkcmF0aW5nKSB7XG5cdFx0XHR2YXIgZWZmZWN0ID0gLyoqIEB0eXBlIHtFZmZlY3R9ICovIChhY3RpdmVfcmVhY3Rpb24pO1xuXHRcdFx0cmVjb25jaWxlKFxuXHRcdFx0XHRhcnJheSxcblx0XHRcdFx0c3RhdGUsXG5cdFx0XHRcdGFuY2hvcixcblx0XHRcdFx0cmVuZGVyX2ZuLFxuXHRcdFx0XHRmbGFncyxcblx0XHRcdFx0KGVmZmVjdC5mICYgSU5FUlQpICE9PSAwLFxuXHRcdFx0XHRnZXRfa2V5LFxuXHRcdFx0XHRnZXRfY29sbGVjdGlvblxuXHRcdFx0KTtcblx0XHR9XG5cblx0XHRpZiAoZmFsbGJhY2tfZm4gIT09IG51bGwpIHtcblx0XHRcdGlmIChsZW5ndGggPT09IDApIHtcblx0XHRcdFx0aWYgKGZhbGxiYWNrKSB7XG5cdFx0XHRcdFx0cmVzdW1lX2VmZmVjdChmYWxsYmFjayk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZmFsbGJhY2sgPSBicmFuY2goKCkgPT4gZmFsbGJhY2tfZm4oYW5jaG9yKSk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSBpZiAoZmFsbGJhY2sgIT09IG51bGwpIHtcblx0XHRcdFx0cGF1c2VfZWZmZWN0KGZhbGxiYWNrLCAoKSA9PiB7XG5cdFx0XHRcdFx0ZmFsbGJhY2sgPSBudWxsO1xuXHRcdFx0XHR9KTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAobWlzbWF0Y2gpIHtcblx0XHRcdC8vIGNvbnRpbnVlIGluIGh5ZHJhdGlvbiBtb2RlXG5cdFx0XHRzZXRfaHlkcmF0aW5nKHRydWUpO1xuXHRcdH1cblxuXHRcdC8vIFdoZW4gd2UgbW91bnQgdGhlIGVhY2ggYmxvY2sgZm9yIHRoZSBmaXJzdCB0aW1lLCB0aGUgY29sbGVjdGlvbiB3b24ndCBiZVxuXHRcdC8vIGNvbm5lY3RlZCB0byB0aGlzIGVmZmVjdCBhcyB0aGUgZWZmZWN0IGhhc24ndCBmaW5pc2hlZCBydW5uaW5nIHlldCBhbmQgaXRzIGRlcHNcblx0XHQvLyB3b24ndCBiZSBhc3NpZ25lZC4gSG93ZXZlciwgaXQncyBwb3NzaWJsZSB0aGF0IHdoZW4gcmVjb25jaWxpbmcgdGhlIGVhY2ggYmxvY2tcblx0XHQvLyB0aGF0IGEgbXV0YXRpb24gb2NjdXJyZWQgYW5kIGl0J3MgbWFkZSB0aGUgY29sbGVjdGlvbiBNQVlCRV9ESVJUWSwgc28gcmVhZGluZyB0aGVcblx0XHQvLyBjb2xsZWN0aW9uIGFnYWluIGNhbiBwcm92aWRlIGNvbnNpc3RlbmN5IHRvIHRoZSByZWFjdGl2ZSBncmFwaCBhZ2FpbiBhcyB0aGUgZGVyaXZlZHNcblx0XHQvLyB3aWxsIG5vdyBiZSBgQ0xFQU5gLlxuXHRcdGdldF9jb2xsZWN0aW9uKCk7XG5cdH0pO1xuXG5cdGlmIChoeWRyYXRpbmcpIHtcblx0XHRhbmNob3IgPSBoeWRyYXRlX25vZGU7XG5cdH1cbn1cblxuLyoqXG4gKiBBZGQsIHJlbW92ZSwgb3IgcmVvcmRlciBpdGVtcyBvdXRwdXQgYnkgYW4gZWFjaCBibG9jayBhcyBpdHMgaW5wdXQgY2hhbmdlc1xuICogQHRlbXBsYXRlIFZcbiAqIEBwYXJhbSB7QXJyYXk8Vj59IGFycmF5XG4gKiBAcGFyYW0ge0VhY2hTdGF0ZX0gc3RhdGVcbiAqIEBwYXJhbSB7RWxlbWVudCB8IENvbW1lbnQgfCBUZXh0fSBhbmNob3JcbiAqIEBwYXJhbSB7KGFuY2hvcjogTm9kZSwgaXRlbTogTWF5YmVTb3VyY2U8Vj4sIGluZGV4OiBudW1iZXIgfCBTb3VyY2U8bnVtYmVyPikgPT4gdm9pZH0gcmVuZGVyX2ZuXG4gKiBAcGFyYW0ge251bWJlcn0gZmxhZ3NcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gaXNfaW5lcnRcbiAqIEBwYXJhbSB7KHZhbHVlOiBWLCBpbmRleDogbnVtYmVyKSA9PiBhbnl9IGdldF9rZXlcbiAqIEBwYXJhbSB7KCkgPT4gVltdfSBnZXRfY29sbGVjdGlvblxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmZ1bmN0aW9uIHJlY29uY2lsZShhcnJheSwgc3RhdGUsIGFuY2hvciwgcmVuZGVyX2ZuLCBmbGFncywgaXNfaW5lcnQsIGdldF9rZXksIGdldF9jb2xsZWN0aW9uKSB7XG5cdHZhciBpc19hbmltYXRlZCA9IChmbGFncyAmIEVBQ0hfSVNfQU5JTUFURUQpICE9PSAwO1xuXHR2YXIgc2hvdWxkX3VwZGF0ZSA9IChmbGFncyAmIChFQUNIX0lURU1fUkVBQ1RJVkUgfCBFQUNIX0lOREVYX1JFQUNUSVZFKSkgIT09IDA7XG5cblx0dmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblx0dmFyIGl0ZW1zID0gc3RhdGUuaXRlbXM7XG5cdHZhciBmaXJzdCA9IHN0YXRlLmZpcnN0O1xuXHR2YXIgY3VycmVudCA9IGZpcnN0O1xuXG5cdC8qKiBAdHlwZSB7dW5kZWZpbmVkIHwgU2V0PEVhY2hJdGVtPn0gKi9cblx0dmFyIHNlZW47XG5cblx0LyoqIEB0eXBlIHtFYWNoSXRlbSB8IG51bGx9ICovXG5cdHZhciBwcmV2ID0gbnVsbDtcblxuXHQvKiogQHR5cGUge3VuZGVmaW5lZCB8IFNldDxFYWNoSXRlbT59ICovXG5cdHZhciB0b19hbmltYXRlO1xuXG5cdC8qKiBAdHlwZSB7RWFjaEl0ZW1bXX0gKi9cblx0dmFyIG1hdGNoZWQgPSBbXTtcblxuXHQvKiogQHR5cGUge0VhY2hJdGVtW119ICovXG5cdHZhciBzdGFzaGVkID0gW107XG5cblx0LyoqIEB0eXBlIHtWfSAqL1xuXHR2YXIgdmFsdWU7XG5cblx0LyoqIEB0eXBlIHthbnl9ICovXG5cdHZhciBrZXk7XG5cblx0LyoqIEB0eXBlIHtFYWNoSXRlbSB8IHVuZGVmaW5lZH0gKi9cblx0dmFyIGl0ZW07XG5cblx0LyoqIEB0eXBlIHtudW1iZXJ9ICovXG5cdHZhciBpO1xuXG5cdGlmIChpc19hbmltYXRlZCkge1xuXHRcdGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7IGkgKz0gMSkge1xuXHRcdFx0dmFsdWUgPSBhcnJheVtpXTtcblx0XHRcdGtleSA9IGdldF9rZXkodmFsdWUsIGkpO1xuXHRcdFx0aXRlbSA9IGl0ZW1zLmdldChrZXkpO1xuXG5cdFx0XHRpZiAoaXRlbSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdGl0ZW0uYT8ubWVhc3VyZSgpO1xuXHRcdFx0XHQodG9fYW5pbWF0ZSA/Pz0gbmV3IFNldCgpKS5hZGQoaXRlbSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Zm9yIChpID0gMDsgaSA8IGxlbmd0aDsgaSArPSAxKSB7XG5cdFx0dmFsdWUgPSBhcnJheVtpXTtcblx0XHRrZXkgPSBnZXRfa2V5KHZhbHVlLCBpKTtcblx0XHRpdGVtID0gaXRlbXMuZ2V0KGtleSk7XG5cblx0XHRpZiAoaXRlbSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHR2YXIgY2hpbGRfYW5jaG9yID0gY3VycmVudCA/IC8qKiBAdHlwZSB7VGVtcGxhdGVOb2RlfSAqLyAoY3VycmVudC5lLm5vZGVzX3N0YXJ0KSA6IGFuY2hvcjtcblxuXHRcdFx0cHJldiA9IGNyZWF0ZV9pdGVtKFxuXHRcdFx0XHRjaGlsZF9hbmNob3IsXG5cdFx0XHRcdHN0YXRlLFxuXHRcdFx0XHRwcmV2LFxuXHRcdFx0XHRwcmV2ID09PSBudWxsID8gc3RhdGUuZmlyc3QgOiBwcmV2Lm5leHQsXG5cdFx0XHRcdHZhbHVlLFxuXHRcdFx0XHRrZXksXG5cdFx0XHRcdGksXG5cdFx0XHRcdHJlbmRlcl9mbixcblx0XHRcdFx0ZmxhZ3MsXG5cdFx0XHRcdGdldF9jb2xsZWN0aW9uXG5cdFx0XHQpO1xuXG5cdFx0XHRpdGVtcy5zZXQoa2V5LCBwcmV2KTtcblxuXHRcdFx0bWF0Y2hlZCA9IFtdO1xuXHRcdFx0c3Rhc2hlZCA9IFtdO1xuXG5cdFx0XHRjdXJyZW50ID0gcHJldi5uZXh0O1xuXHRcdFx0Y29udGludWU7XG5cdFx0fVxuXG5cdFx0aWYgKHNob3VsZF91cGRhdGUpIHtcblx0XHRcdHVwZGF0ZV9pdGVtKGl0ZW0sIHZhbHVlLCBpLCBmbGFncyk7XG5cdFx0fVxuXG5cdFx0aWYgKChpdGVtLmUuZiAmIElORVJUKSAhPT0gMCkge1xuXHRcdFx0cmVzdW1lX2VmZmVjdChpdGVtLmUpO1xuXHRcdFx0aWYgKGlzX2FuaW1hdGVkKSB7XG5cdFx0XHRcdGl0ZW0uYT8udW5maXgoKTtcblx0XHRcdFx0KHRvX2FuaW1hdGUgPz89IG5ldyBTZXQoKSkuZGVsZXRlKGl0ZW0pO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmIChpdGVtICE9PSBjdXJyZW50KSB7XG5cdFx0XHRpZiAoc2VlbiAhPT0gdW5kZWZpbmVkICYmIHNlZW4uaGFzKGl0ZW0pKSB7XG5cdFx0XHRcdGlmIChtYXRjaGVkLmxlbmd0aCA8IHN0YXNoZWQubGVuZ3RoKSB7XG5cdFx0XHRcdFx0Ly8gbW9yZSBlZmZpY2llbnQgdG8gbW92ZSBsYXRlciBpdGVtcyB0byB0aGUgZnJvbnRcblx0XHRcdFx0XHR2YXIgc3RhcnQgPSBzdGFzaGVkWzBdO1xuXHRcdFx0XHRcdHZhciBqO1xuXG5cdFx0XHRcdFx0cHJldiA9IHN0YXJ0LnByZXY7XG5cblx0XHRcdFx0XHR2YXIgYSA9IG1hdGNoZWRbMF07XG5cdFx0XHRcdFx0dmFyIGIgPSBtYXRjaGVkW21hdGNoZWQubGVuZ3RoIC0gMV07XG5cblx0XHRcdFx0XHRmb3IgKGogPSAwOyBqIDwgbWF0Y2hlZC5sZW5ndGg7IGogKz0gMSkge1xuXHRcdFx0XHRcdFx0bW92ZShtYXRjaGVkW2pdLCBzdGFydCwgYW5jaG9yKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRmb3IgKGogPSAwOyBqIDwgc3Rhc2hlZC5sZW5ndGg7IGogKz0gMSkge1xuXHRcdFx0XHRcdFx0c2Vlbi5kZWxldGUoc3Rhc2hlZFtqXSk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0bGluayhzdGF0ZSwgYS5wcmV2LCBiLm5leHQpO1xuXHRcdFx0XHRcdGxpbmsoc3RhdGUsIHByZXYsIGEpO1xuXHRcdFx0XHRcdGxpbmsoc3RhdGUsIGIsIHN0YXJ0KTtcblxuXHRcdFx0XHRcdGN1cnJlbnQgPSBzdGFydDtcblx0XHRcdFx0XHRwcmV2ID0gYjtcblx0XHRcdFx0XHRpIC09IDE7XG5cblx0XHRcdFx0XHRtYXRjaGVkID0gW107XG5cdFx0XHRcdFx0c3Rhc2hlZCA9IFtdO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdC8vIG1vcmUgZWZmaWNpZW50IHRvIG1vdmUgZWFybGllciBpdGVtcyB0byB0aGUgYmFja1xuXHRcdFx0XHRcdHNlZW4uZGVsZXRlKGl0ZW0pO1xuXHRcdFx0XHRcdG1vdmUoaXRlbSwgY3VycmVudCwgYW5jaG9yKTtcblxuXHRcdFx0XHRcdGxpbmsoc3RhdGUsIGl0ZW0ucHJldiwgaXRlbS5uZXh0KTtcblx0XHRcdFx0XHRsaW5rKHN0YXRlLCBpdGVtLCBwcmV2ID09PSBudWxsID8gc3RhdGUuZmlyc3QgOiBwcmV2Lm5leHQpO1xuXHRcdFx0XHRcdGxpbmsoc3RhdGUsIHByZXYsIGl0ZW0pO1xuXG5cdFx0XHRcdFx0cHJldiA9IGl0ZW07XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0bWF0Y2hlZCA9IFtdO1xuXHRcdFx0c3Rhc2hlZCA9IFtdO1xuXG5cdFx0XHR3aGlsZSAoY3VycmVudCAhPT0gbnVsbCAmJiBjdXJyZW50LmsgIT09IGtleSkge1xuXHRcdFx0XHQvLyBJZiB0aGUgZWFjaCBibG9jayBpc24ndCBpbmVydCBhbmQgYW4gaXRlbSBoYXMgYW4gZWZmZWN0IHRoYXQgaXMgYWxyZWFkeSBpbmVydCxcblx0XHRcdFx0Ly8gc2tpcCBvdmVyIGFkZGluZyBpdCB0byBvdXIgc2VlbiBTZXQgYXMgdGhlIGl0ZW0gaXMgYWxyZWFkeSBiZWluZyBoYW5kbGVkXG5cdFx0XHRcdGlmIChpc19pbmVydCB8fCAoY3VycmVudC5lLmYgJiBJTkVSVCkgPT09IDApIHtcblx0XHRcdFx0XHQoc2VlbiA/Pz0gbmV3IFNldCgpKS5hZGQoY3VycmVudCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0c3Rhc2hlZC5wdXNoKGN1cnJlbnQpO1xuXHRcdFx0XHRjdXJyZW50ID0gY3VycmVudC5uZXh0O1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoY3VycmVudCA9PT0gbnVsbCkge1xuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0aXRlbSA9IGN1cnJlbnQ7XG5cdFx0fVxuXG5cdFx0bWF0Y2hlZC5wdXNoKGl0ZW0pO1xuXHRcdHByZXYgPSBpdGVtO1xuXHRcdGN1cnJlbnQgPSBpdGVtLm5leHQ7XG5cdH1cblxuXHRpZiAoY3VycmVudCAhPT0gbnVsbCB8fCBzZWVuICE9PSB1bmRlZmluZWQpIHtcblx0XHR2YXIgdG9fZGVzdHJveSA9IHNlZW4gPT09IHVuZGVmaW5lZCA/IFtdIDogYXJyYXlfZnJvbShzZWVuKTtcblxuXHRcdHdoaWxlIChjdXJyZW50ICE9PSBudWxsKSB7XG5cdFx0XHQvLyBJZiB0aGUgZWFjaCBibG9jayBpc24ndCBpbmVydCwgdGhlbiBpbmVydCBlZmZlY3RzIGFyZSBjdXJyZW50bHkgb3V0cm9pbmcgYW5kIHdpbGwgYmUgcmVtb3ZlZCBvbmNlIHRoZSB0cmFuc2l0aW9uIGlzIGZpbmlzaGVkXG5cdFx0XHRpZiAoaXNfaW5lcnQgfHwgKGN1cnJlbnQuZS5mICYgSU5FUlQpID09PSAwKSB7XG5cdFx0XHRcdHRvX2Rlc3Ryb3kucHVzaChjdXJyZW50KTtcblx0XHRcdH1cblx0XHRcdGN1cnJlbnQgPSBjdXJyZW50Lm5leHQ7XG5cdFx0fVxuXG5cdFx0dmFyIGRlc3Ryb3lfbGVuZ3RoID0gdG9fZGVzdHJveS5sZW5ndGg7XG5cblx0XHRpZiAoZGVzdHJveV9sZW5ndGggPiAwKSB7XG5cdFx0XHR2YXIgY29udHJvbGxlZF9hbmNob3IgPSAoZmxhZ3MgJiBFQUNIX0lTX0NPTlRST0xMRUQpICE9PSAwICYmIGxlbmd0aCA9PT0gMCA/IGFuY2hvciA6IG51bGw7XG5cblx0XHRcdGlmIChpc19hbmltYXRlZCkge1xuXHRcdFx0XHRmb3IgKGkgPSAwOyBpIDwgZGVzdHJveV9sZW5ndGg7IGkgKz0gMSkge1xuXHRcdFx0XHRcdHRvX2Rlc3Ryb3lbaV0uYT8ubWVhc3VyZSgpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Zm9yIChpID0gMDsgaSA8IGRlc3Ryb3lfbGVuZ3RoOyBpICs9IDEpIHtcblx0XHRcdFx0XHR0b19kZXN0cm95W2ldLmE/LmZpeCgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHBhdXNlX2VmZmVjdHMoc3RhdGUsIHRvX2Rlc3Ryb3ksIGNvbnRyb2xsZWRfYW5jaG9yLCBpdGVtcyk7XG5cdFx0fVxuXHR9XG5cblx0aWYgKGlzX2FuaW1hdGVkKSB7XG5cdFx0cXVldWVfbWljcm9fdGFzaygoKSA9PiB7XG5cdFx0XHRpZiAodG9fYW5pbWF0ZSA9PT0gdW5kZWZpbmVkKSByZXR1cm47XG5cdFx0XHRmb3IgKGl0ZW0gb2YgdG9fYW5pbWF0ZSkge1xuXHRcdFx0XHRpdGVtLmE/LmFwcGx5KCk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH1cblxuXHQvKiogQHR5cGUge0VmZmVjdH0gKi8gKGFjdGl2ZV9lZmZlY3QpLmZpcnN0ID0gc3RhdGUuZmlyc3QgJiYgc3RhdGUuZmlyc3QuZTtcblx0LyoqIEB0eXBlIHtFZmZlY3R9ICovIChhY3RpdmVfZWZmZWN0KS5sYXN0ID0gcHJldiAmJiBwcmV2LmU7XG59XG5cbi8qKlxuICogQHBhcmFtIHtFYWNoSXRlbX0gaXRlbVxuICogQHBhcmFtIHthbnl9IHZhbHVlXG4gKiBAcGFyYW0ge251bWJlcn0gaW5kZXhcbiAqIEBwYXJhbSB7bnVtYmVyfSB0eXBlXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZnVuY3Rpb24gdXBkYXRlX2l0ZW0oaXRlbSwgdmFsdWUsIGluZGV4LCB0eXBlKSB7XG5cdGlmICgodHlwZSAmIEVBQ0hfSVRFTV9SRUFDVElWRSkgIT09IDApIHtcblx0XHRpbnRlcm5hbF9zZXQoaXRlbS52LCB2YWx1ZSk7XG5cdH1cblxuXHRpZiAoKHR5cGUgJiBFQUNIX0lOREVYX1JFQUNUSVZFKSAhPT0gMCkge1xuXHRcdGludGVybmFsX3NldCgvKiogQHR5cGUge1ZhbHVlPG51bWJlcj59ICovIChpdGVtLmkpLCBpbmRleCk7XG5cdH0gZWxzZSB7XG5cdFx0aXRlbS5pID0gaW5kZXg7XG5cdH1cbn1cblxuLyoqXG4gKiBAdGVtcGxhdGUgVlxuICogQHBhcmFtIHtOb2RlfSBhbmNob3JcbiAqIEBwYXJhbSB7RWFjaFN0YXRlfSBzdGF0ZVxuICogQHBhcmFtIHtFYWNoSXRlbSB8IG51bGx9IHByZXZcbiAqIEBwYXJhbSB7RWFjaEl0ZW0gfCBudWxsfSBuZXh0XG4gKiBAcGFyYW0ge1Z9IHZhbHVlXG4gKiBAcGFyYW0ge3Vua25vd259IGtleVxuICogQHBhcmFtIHtudW1iZXJ9IGluZGV4XG4gKiBAcGFyYW0geyhhbmNob3I6IE5vZGUsIGl0ZW06IFYgfCBTb3VyY2U8Vj4sIGluZGV4OiBudW1iZXIgfCBWYWx1ZTxudW1iZXI+KSA9PiB2b2lkfSByZW5kZXJfZm5cbiAqIEBwYXJhbSB7bnVtYmVyfSBmbGFnc1xuICogQHBhcmFtIHsoKSA9PiBWW119IGdldF9jb2xsZWN0aW9uXG4gKiBAcmV0dXJucyB7RWFjaEl0ZW19XG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZV9pdGVtKFxuXHRhbmNob3IsXG5cdHN0YXRlLFxuXHRwcmV2LFxuXHRuZXh0LFxuXHR2YWx1ZSxcblx0a2V5LFxuXHRpbmRleCxcblx0cmVuZGVyX2ZuLFxuXHRmbGFncyxcblx0Z2V0X2NvbGxlY3Rpb25cbikge1xuXHR2YXIgcHJldmlvdXNfZWFjaF9pdGVtID0gY3VycmVudF9lYWNoX2l0ZW07XG5cdHZhciByZWFjdGl2ZSA9IChmbGFncyAmIEVBQ0hfSVRFTV9SRUFDVElWRSkgIT09IDA7XG5cdHZhciBtdXRhYmxlID0gKGZsYWdzICYgRUFDSF9JVEVNX0lNTVVUQUJMRSkgPT09IDA7XG5cblx0dmFyIHYgPSByZWFjdGl2ZSA/IChtdXRhYmxlID8gbXV0YWJsZV9zb3VyY2UodmFsdWUpIDogc291cmNlKHZhbHVlKSkgOiB2YWx1ZTtcblx0dmFyIGkgPSAoZmxhZ3MgJiBFQUNIX0lOREVYX1JFQUNUSVZFKSA9PT0gMCA/IGluZGV4IDogc291cmNlKGluZGV4KTtcblxuXHRpZiAoREVWICYmIHJlYWN0aXZlKSB7XG5cdFx0Ly8gRm9yIHRyYWNpbmcgcHVycG9zZXMsIHdlIG5lZWQgdG8gbGluayB0aGUgc291cmNlIHNpZ25hbCB3ZSBjcmVhdGUgd2l0aCB0aGVcblx0XHQvLyBjb2xsZWN0aW9uICsgaW5kZXggc28gdGhhdCB0cmFjaW5nIHdvcmtzIGFzIGludGVuZGVkXG5cdFx0LyoqIEB0eXBlIHtWYWx1ZX0gKi8gKHYpLmRlYnVnID0gKCkgPT4ge1xuXHRcdFx0dmFyIGNvbGxlY3Rpb25faW5kZXggPSB0eXBlb2YgaSA9PT0gJ251bWJlcicgPyBpbmRleCA6IGkudjtcblx0XHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLWV4cHJlc3Npb25zXG5cdFx0XHRnZXRfY29sbGVjdGlvbigpW2NvbGxlY3Rpb25faW5kZXhdO1xuXHRcdH07XG5cdH1cblxuXHQvKiogQHR5cGUge0VhY2hJdGVtfSAqL1xuXHR2YXIgaXRlbSA9IHtcblx0XHRpLFxuXHRcdHYsXG5cdFx0azoga2V5LFxuXHRcdGE6IG51bGwsXG5cdFx0Ly8gQHRzLWV4cGVjdC1lcnJvclxuXHRcdGU6IG51bGwsXG5cdFx0cHJldixcblx0XHRuZXh0XG5cdH07XG5cblx0Y3VycmVudF9lYWNoX2l0ZW0gPSBpdGVtO1xuXG5cdHRyeSB7XG5cdFx0aXRlbS5lID0gYnJhbmNoKCgpID0+IHJlbmRlcl9mbihhbmNob3IsIHYsIGkpLCBoeWRyYXRpbmcpO1xuXG5cdFx0aXRlbS5lLnByZXYgPSBwcmV2ICYmIHByZXYuZTtcblx0XHRpdGVtLmUubmV4dCA9IG5leHQgJiYgbmV4dC5lO1xuXG5cdFx0aWYgKHByZXYgPT09IG51bGwpIHtcblx0XHRcdHN0YXRlLmZpcnN0ID0gaXRlbTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cHJldi5uZXh0ID0gaXRlbTtcblx0XHRcdHByZXYuZS5uZXh0ID0gaXRlbS5lO1xuXHRcdH1cblxuXHRcdGlmIChuZXh0ICE9PSBudWxsKSB7XG5cdFx0XHRuZXh0LnByZXYgPSBpdGVtO1xuXHRcdFx0bmV4dC5lLnByZXYgPSBpdGVtLmU7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGl0ZW07XG5cdH0gZmluYWxseSB7XG5cdFx0Y3VycmVudF9lYWNoX2l0ZW0gPSBwcmV2aW91c19lYWNoX2l0ZW07XG5cdH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge0VhY2hJdGVtfSBpdGVtXG4gKiBAcGFyYW0ge0VhY2hJdGVtIHwgbnVsbH0gbmV4dFxuICogQHBhcmFtIHtUZXh0IHwgRWxlbWVudCB8IENvbW1lbnR9IGFuY2hvclxuICovXG5mdW5jdGlvbiBtb3ZlKGl0ZW0sIG5leHQsIGFuY2hvcikge1xuXHR2YXIgZW5kID0gaXRlbS5uZXh0ID8gLyoqIEB0eXBlIHtUZW1wbGF0ZU5vZGV9ICovIChpdGVtLm5leHQuZS5ub2Rlc19zdGFydCkgOiBhbmNob3I7XG5cblx0dmFyIGRlc3QgPSBuZXh0ID8gLyoqIEB0eXBlIHtUZW1wbGF0ZU5vZGV9ICovIChuZXh0LmUubm9kZXNfc3RhcnQpIDogYW5jaG9yO1xuXHR2YXIgbm9kZSA9IC8qKiBAdHlwZSB7VGVtcGxhdGVOb2RlfSAqLyAoaXRlbS5lLm5vZGVzX3N0YXJ0KTtcblxuXHR3aGlsZSAobm9kZSAhPT0gZW5kKSB7XG5cdFx0dmFyIG5leHRfbm9kZSA9IC8qKiBAdHlwZSB7VGVtcGxhdGVOb2RlfSAqLyAoZ2V0X25leHRfc2libGluZyhub2RlKSk7XG5cdFx0ZGVzdC5iZWZvcmUobm9kZSk7XG5cdFx0bm9kZSA9IG5leHRfbm9kZTtcblx0fVxufVxuXG4vKipcbiAqIEBwYXJhbSB7RWFjaFN0YXRlfSBzdGF0ZVxuICogQHBhcmFtIHtFYWNoSXRlbSB8IG51bGx9IHByZXZcbiAqIEBwYXJhbSB7RWFjaEl0ZW0gfCBudWxsfSBuZXh0XG4gKi9cbmZ1bmN0aW9uIGxpbmsoc3RhdGUsIHByZXYsIG5leHQpIHtcblx0aWYgKHByZXYgPT09IG51bGwpIHtcblx0XHRzdGF0ZS5maXJzdCA9IG5leHQ7XG5cdH0gZWxzZSB7XG5cdFx0cHJldi5uZXh0ID0gbmV4dDtcblx0XHRwcmV2LmUubmV4dCA9IG5leHQgJiYgbmV4dC5lO1xuXHR9XG5cblx0aWYgKG5leHQgIT09IG51bGwpIHtcblx0XHRuZXh0LnByZXYgPSBwcmV2O1xuXHRcdG5leHQuZS5wcmV2ID0gcHJldiAmJiBwcmV2LmU7XG5cdH1cbn1cbiIsIi8qKiBAaW1wb3J0IHsgRWZmZWN0LCBUZW1wbGF0ZU5vZGUgfSBmcm9tICcjY2xpZW50JyAqL1xuaW1wb3J0IHsgRklMRU5BTUUsIEhZRFJBVElPTl9FUlJPUiB9IGZyb20gJy4uLy4uLy4uLy4uL2NvbnN0YW50cy5qcyc7XG5pbXBvcnQgeyBibG9jaywgYnJhbmNoLCBkZXN0cm95X2VmZmVjdCB9IGZyb20gJy4uLy4uL3JlYWN0aXZpdHkvZWZmZWN0cy5qcyc7XG5pbXBvcnQgeyBoeWRyYXRlX25leHQsIGh5ZHJhdGVfbm9kZSwgaHlkcmF0aW5nLCBzZXRfaHlkcmF0ZV9ub2RlIH0gZnJvbSAnLi4vaHlkcmF0aW9uLmpzJztcbmltcG9ydCB7IGNyZWF0ZV9mcmFnbWVudF9mcm9tX2h0bWwgfSBmcm9tICcuLi9yZWNvbmNpbGVyLmpzJztcbmltcG9ydCB7IGFzc2lnbl9ub2RlcyB9IGZyb20gJy4uL3RlbXBsYXRlLmpzJztcbmltcG9ydCAqIGFzIHcgZnJvbSAnLi4vLi4vd2FybmluZ3MuanMnO1xuaW1wb3J0IHsgaGFzaCwgc2FuaXRpemVfbG9jYXRpb24gfSBmcm9tICcuLi8uLi8uLi8uLi91dGlscy5qcyc7XG5pbXBvcnQgeyBERVYgfSBmcm9tICdlc20tZW52JztcbmltcG9ydCB7IGRldl9jdXJyZW50X2NvbXBvbmVudF9mdW5jdGlvbiB9IGZyb20gJy4uLy4uL3J1bnRpbWUuanMnO1xuaW1wb3J0IHsgZ2V0X2ZpcnN0X2NoaWxkLCBnZXRfbmV4dF9zaWJsaW5nIH0gZnJvbSAnLi4vb3BlcmF0aW9ucy5qcyc7XG5cbi8qKlxuICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50XG4gKiBAcGFyYW0ge3N0cmluZyB8IG51bGx9IHNlcnZlcl9oYXNoXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqL1xuZnVuY3Rpb24gY2hlY2tfaGFzaChlbGVtZW50LCBzZXJ2ZXJfaGFzaCwgdmFsdWUpIHtcblx0aWYgKCFzZXJ2ZXJfaGFzaCB8fCBzZXJ2ZXJfaGFzaCA9PT0gaGFzaChTdHJpbmcodmFsdWUgPz8gJycpKSkgcmV0dXJuO1xuXG5cdGxldCBsb2NhdGlvbjtcblxuXHQvLyBAdHMtZXhwZWN0LWVycm9yXG5cdGNvbnN0IGxvYyA9IGVsZW1lbnQuX19zdmVsdGVfbWV0YT8ubG9jO1xuXHRpZiAobG9jKSB7XG5cdFx0bG9jYXRpb24gPSBgbmVhciAke2xvYy5maWxlfToke2xvYy5saW5lfToke2xvYy5jb2x1bW59YDtcblx0fSBlbHNlIGlmIChkZXZfY3VycmVudF9jb21wb25lbnRfZnVuY3Rpb24/LltGSUxFTkFNRV0pIHtcblx0XHRsb2NhdGlvbiA9IGBpbiAke2Rldl9jdXJyZW50X2NvbXBvbmVudF9mdW5jdGlvbltGSUxFTkFNRV19YDtcblx0fVxuXG5cdHcuaHlkcmF0aW9uX2h0bWxfY2hhbmdlZChzYW5pdGl6ZV9sb2NhdGlvbihsb2NhdGlvbikpO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7RWxlbWVudCB8IFRleHQgfCBDb21tZW50fSBub2RlXG4gKiBAcGFyYW0geygpID0+IHN0cmluZ30gZ2V0X3ZhbHVlXG4gKiBAcGFyYW0ge2Jvb2xlYW59IHN2Z1xuICogQHBhcmFtIHtib29sZWFufSBtYXRobWxcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW3NraXBfd2FybmluZ11cbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5leHBvcnQgZnVuY3Rpb24gaHRtbChub2RlLCBnZXRfdmFsdWUsIHN2ZywgbWF0aG1sLCBza2lwX3dhcm5pbmcpIHtcblx0dmFyIGFuY2hvciA9IG5vZGU7XG5cblx0dmFyIHZhbHVlID0gJyc7XG5cblx0LyoqIEB0eXBlIHtFZmZlY3QgfCB1bmRlZmluZWR9ICovXG5cdHZhciBlZmZlY3Q7XG5cblx0YmxvY2soKCkgPT4ge1xuXHRcdGlmICh2YWx1ZSA9PT0gKHZhbHVlID0gZ2V0X3ZhbHVlKCkgPz8gJycpKSB7XG5cdFx0XHRpZiAoaHlkcmF0aW5nKSB7XG5cdFx0XHRcdGh5ZHJhdGVfbmV4dCgpO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmIChlZmZlY3QgIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0ZGVzdHJveV9lZmZlY3QoZWZmZWN0KTtcblx0XHRcdGVmZmVjdCA9IHVuZGVmaW5lZDtcblx0XHR9XG5cblx0XHRpZiAodmFsdWUgPT09ICcnKSByZXR1cm47XG5cblx0XHRlZmZlY3QgPSBicmFuY2goKCkgPT4ge1xuXHRcdFx0aWYgKGh5ZHJhdGluZykge1xuXHRcdFx0XHQvLyBXZSdyZSBkZWxpYmVyYXRlbHkgbm90IHRyeWluZyB0byByZXBhaXIgbWlzbWF0Y2hlcyBiZXR3ZWVuIHNlcnZlciBhbmQgY2xpZW50LFxuXHRcdFx0XHQvLyBhcyBpdCdzIGNvc3RseSBhbmQgZXJyb3ItcHJvbmUgKGFuZCBpdCdzIGFuIGVkZ2UgY2FzZSB0byBoYXZlIGEgbWlzbWF0Y2ggYW55d2F5KVxuXHRcdFx0XHR2YXIgaGFzaCA9IC8qKiBAdHlwZSB7Q29tbWVudH0gKi8gKGh5ZHJhdGVfbm9kZSkuZGF0YTtcblx0XHRcdFx0dmFyIG5leHQgPSBoeWRyYXRlX25leHQoKTtcblx0XHRcdFx0dmFyIGxhc3QgPSBuZXh0O1xuXG5cdFx0XHRcdHdoaWxlIChcblx0XHRcdFx0XHRuZXh0ICE9PSBudWxsICYmXG5cdFx0XHRcdFx0KG5leHQubm9kZVR5cGUgIT09IDggfHwgLyoqIEB0eXBlIHtDb21tZW50fSAqLyAobmV4dCkuZGF0YSAhPT0gJycpXG5cdFx0XHRcdCkge1xuXHRcdFx0XHRcdGxhc3QgPSBuZXh0O1xuXHRcdFx0XHRcdG5leHQgPSAvKiogQHR5cGUge1RlbXBsYXRlTm9kZX0gKi8gKGdldF9uZXh0X3NpYmxpbmcobmV4dCkpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKG5leHQgPT09IG51bGwpIHtcblx0XHRcdFx0XHR3Lmh5ZHJhdGlvbl9taXNtYXRjaCgpO1xuXHRcdFx0XHRcdHRocm93IEhZRFJBVElPTl9FUlJPUjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChERVYgJiYgIXNraXBfd2FybmluZykge1xuXHRcdFx0XHRcdGNoZWNrX2hhc2goLyoqIEB0eXBlIHtFbGVtZW50fSAqLyAobmV4dC5wYXJlbnROb2RlKSwgaGFzaCwgdmFsdWUpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0YXNzaWduX25vZGVzKGh5ZHJhdGVfbm9kZSwgbGFzdCk7XG5cdFx0XHRcdGFuY2hvciA9IHNldF9oeWRyYXRlX25vZGUobmV4dCk7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0dmFyIGh0bWwgPSB2YWx1ZSArICcnO1xuXHRcdFx0aWYgKHN2ZykgaHRtbCA9IGA8c3ZnPiR7aHRtbH08L3N2Zz5gO1xuXHRcdFx0ZWxzZSBpZiAobWF0aG1sKSBodG1sID0gYDxtYXRoPiR7aHRtbH08L21hdGg+YDtcblxuXHRcdFx0Ly8gRG9uJ3QgdXNlIGNyZWF0ZV9mcmFnbWVudF93aXRoX3NjcmlwdF9mcm9tX2h0bWwgaGVyZSBiZWNhdXNlIHRoYXQgd291bGQgbWVhbiBzY3JpcHQgdGFncyBhcmUgZXhlY3V0ZWQuXG5cdFx0XHQvLyBAaHRtbCBpcyBiYXNpY2FsbHkgYC5pbm5lckhUTUwgPSAuLi5gIGFuZCB0aGF0IGRvZXNuJ3QgZXhlY3V0ZSBzY3JpcHRzIGVpdGhlciBkdWUgdG8gc2VjdXJpdHkgcmVhc29ucy5cblx0XHRcdC8qKiBAdHlwZSB7RG9jdW1lbnRGcmFnbWVudCB8IEVsZW1lbnR9ICovXG5cdFx0XHR2YXIgbm9kZSA9IGNyZWF0ZV9mcmFnbWVudF9mcm9tX2h0bWwoaHRtbCk7XG5cblx0XHRcdGlmIChzdmcgfHwgbWF0aG1sKSB7XG5cdFx0XHRcdG5vZGUgPSAvKiogQHR5cGUge0VsZW1lbnR9ICovIChnZXRfZmlyc3RfY2hpbGQobm9kZSkpO1xuXHRcdFx0fVxuXG5cdFx0XHRhc3NpZ25fbm9kZXMoXG5cdFx0XHRcdC8qKiBAdHlwZSB7VGVtcGxhdGVOb2RlfSAqLyAoZ2V0X2ZpcnN0X2NoaWxkKG5vZGUpKSxcblx0XHRcdFx0LyoqIEB0eXBlIHtUZW1wbGF0ZU5vZGV9ICovIChub2RlLmxhc3RDaGlsZClcblx0XHRcdCk7XG5cblx0XHRcdGlmIChzdmcgfHwgbWF0aG1sKSB7XG5cdFx0XHRcdHdoaWxlIChnZXRfZmlyc3RfY2hpbGQobm9kZSkpIHtcblx0XHRcdFx0XHRhbmNob3IuYmVmb3JlKC8qKiBAdHlwZSB7Tm9kZX0gKi8gKGdldF9maXJzdF9jaGlsZChub2RlKSkpO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRhbmNob3IuYmVmb3JlKG5vZGUpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9KTtcbn1cbiIsImltcG9ydCB7IGh5ZHJhdGVfbmV4dCwgaHlkcmF0aW5nIH0gZnJvbSAnLi4vaHlkcmF0aW9uLmpzJztcblxuLyoqXG4gKiBAcGFyYW0ge0NvbW1lbnR9IGFuY2hvclxuICogQHBhcmFtIHtSZWNvcmQ8c3RyaW5nLCBhbnk+fSAkJHByb3BzXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICogQHBhcmFtIHtSZWNvcmQ8c3RyaW5nLCB1bmtub3duPn0gc2xvdF9wcm9wc1xuICogQHBhcmFtIHtudWxsIHwgKChhbmNob3I6IENvbW1lbnQpID0+IHZvaWQpfSBmYWxsYmFja19mblxuICovXG5leHBvcnQgZnVuY3Rpb24gc2xvdChhbmNob3IsICQkcHJvcHMsIG5hbWUsIHNsb3RfcHJvcHMsIGZhbGxiYWNrX2ZuKSB7XG5cdGlmIChoeWRyYXRpbmcpIHtcblx0XHRoeWRyYXRlX25leHQoKTtcblx0fVxuXG5cdHZhciBzbG90X2ZuID0gJCRwcm9wcy4kJHNsb3RzPy5bbmFtZV07XG5cdC8vIEludGVyb3A6IENhbiB1c2Ugc25pcHBldHMgdG8gZmlsbCBzbG90c1xuXHR2YXIgaXNfaW50ZXJvcCA9IGZhbHNlO1xuXHRpZiAoc2xvdF9mbiA9PT0gdHJ1ZSkge1xuXHRcdHNsb3RfZm4gPSAkJHByb3BzW25hbWUgPT09ICdkZWZhdWx0JyA/ICdjaGlsZHJlbicgOiBuYW1lXTtcblx0XHRpc19pbnRlcm9wID0gdHJ1ZTtcblx0fVxuXG5cdGlmIChzbG90X2ZuID09PSB1bmRlZmluZWQpIHtcblx0XHRpZiAoZmFsbGJhY2tfZm4gIT09IG51bGwpIHtcblx0XHRcdGZhbGxiYWNrX2ZuKGFuY2hvcik7XG5cdFx0fVxuXHR9IGVsc2Uge1xuXHRcdHNsb3RfZm4oYW5jaG9yLCBpc19pbnRlcm9wID8gKCkgPT4gc2xvdF9wcm9wcyA6IHNsb3RfcHJvcHMpO1xuXHR9XG59XG5cbi8qKlxuICogQHBhcmFtIHtSZWNvcmQ8c3RyaW5nLCBhbnk+fSBwcm9wc1xuICogQHJldHVybnMge1JlY29yZDxzdHJpbmcsIGJvb2xlYW4+fVxuICovXG5leHBvcnQgZnVuY3Rpb24gc2FuaXRpemVfc2xvdHMocHJvcHMpIHtcblx0LyoqIEB0eXBlIHtSZWNvcmQ8c3RyaW5nLCBib29sZWFuPn0gKi9cblx0Y29uc3Qgc2FuaXRpemVkID0ge307XG5cdGlmIChwcm9wcy5jaGlsZHJlbikgc2FuaXRpemVkLmRlZmF1bHQgPSB0cnVlO1xuXHRmb3IgKGNvbnN0IGtleSBpbiBwcm9wcy4kJHNsb3RzKSB7XG5cdFx0c2FuaXRpemVkW2tleV0gPSB0cnVlO1xuXHR9XG5cdHJldHVybiBzYW5pdGl6ZWQ7XG59XG4iLCIvKiogQGltcG9ydCB7IFNuaXBwZXQgfSBmcm9tICdzdmVsdGUnICovXG4vKiogQGltcG9ydCB7IEVmZmVjdCwgVGVtcGxhdGVOb2RlIH0gZnJvbSAnI2NsaWVudCcgKi9cbi8qKiBAaW1wb3J0IHsgR2V0dGVycyB9IGZyb20gJyNzaGFyZWQnICovXG5pbXBvcnQgeyBFRkZFQ1RfVFJBTlNQQVJFTlQgfSBmcm9tICcuLi8uLi9jb25zdGFudHMuanMnO1xuaW1wb3J0IHsgYnJhbmNoLCBibG9jaywgZGVzdHJveV9lZmZlY3QsIHRlYXJkb3duIH0gZnJvbSAnLi4vLi4vcmVhY3Rpdml0eS9lZmZlY3RzLmpzJztcbmltcG9ydCB7XG5cdGRldl9jdXJyZW50X2NvbXBvbmVudF9mdW5jdGlvbixcblx0c2V0X2Rldl9jdXJyZW50X2NvbXBvbmVudF9mdW5jdGlvblxufSBmcm9tICcuLi8uLi9ydW50aW1lLmpzJztcbmltcG9ydCB7IGh5ZHJhdGVfbmV4dCwgaHlkcmF0ZV9ub2RlLCBoeWRyYXRpbmcgfSBmcm9tICcuLi9oeWRyYXRpb24uanMnO1xuaW1wb3J0IHsgY3JlYXRlX2ZyYWdtZW50X2Zyb21faHRtbCB9IGZyb20gJy4uL3JlY29uY2lsZXIuanMnO1xuaW1wb3J0IHsgYXNzaWduX25vZGVzIH0gZnJvbSAnLi4vdGVtcGxhdGUuanMnO1xuaW1wb3J0ICogYXMgdyBmcm9tICcuLi8uLi93YXJuaW5ncy5qcyc7XG5pbXBvcnQgKiBhcyBlIGZyb20gJy4uLy4uL2Vycm9ycy5qcyc7XG5pbXBvcnQgeyBERVYgfSBmcm9tICdlc20tZW52JztcbmltcG9ydCB7IGdldF9maXJzdF9jaGlsZCwgZ2V0X25leHRfc2libGluZyB9IGZyb20gJy4uL29wZXJhdGlvbnMuanMnO1xuaW1wb3J0IHsgbm9vcCB9IGZyb20gJy4uLy4uLy4uL3NoYXJlZC91dGlscy5qcyc7XG5cbi8qKlxuICogQHRlbXBsYXRlIHsobm9kZTogVGVtcGxhdGVOb2RlLCAuLi5hcmdzOiBhbnlbXSkgPT4gdm9pZH0gU25pcHBldEZuXG4gKiBAcGFyYW0ge1RlbXBsYXRlTm9kZX0gbm9kZVxuICogQHBhcmFtIHsoKSA9PiBTbmlwcGV0Rm4gfCBudWxsIHwgdW5kZWZpbmVkfSBnZXRfc25pcHBldFxuICogQHBhcmFtIHsoKCkgPT4gYW55KVtdfSBhcmdzXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNuaXBwZXQobm9kZSwgZ2V0X3NuaXBwZXQsIC4uLmFyZ3MpIHtcblx0dmFyIGFuY2hvciA9IG5vZGU7XG5cblx0LyoqIEB0eXBlIHtTbmlwcGV0Rm4gfCBudWxsIHwgdW5kZWZpbmVkfSAqL1xuXHQvLyBAdHMtaWdub3JlXG5cdHZhciBzbmlwcGV0ID0gbm9vcDtcblxuXHQvKiogQHR5cGUge0VmZmVjdCB8IG51bGx9ICovXG5cdHZhciBzbmlwcGV0X2VmZmVjdDtcblxuXHRibG9jaygoKSA9PiB7XG5cdFx0aWYgKHNuaXBwZXQgPT09IChzbmlwcGV0ID0gZ2V0X3NuaXBwZXQoKSkpIHJldHVybjtcblxuXHRcdGlmIChzbmlwcGV0X2VmZmVjdCkge1xuXHRcdFx0ZGVzdHJveV9lZmZlY3Qoc25pcHBldF9lZmZlY3QpO1xuXHRcdFx0c25pcHBldF9lZmZlY3QgPSBudWxsO1xuXHRcdH1cblxuXHRcdGlmIChERVYgJiYgc25pcHBldCA9PSBudWxsKSB7XG5cdFx0XHRlLmludmFsaWRfc25pcHBldCgpO1xuXHRcdH1cblxuXHRcdHNuaXBwZXRfZWZmZWN0ID0gYnJhbmNoKCgpID0+IC8qKiBAdHlwZSB7U25pcHBldEZufSAqLyAoc25pcHBldCkoYW5jaG9yLCAuLi5hcmdzKSk7XG5cdH0sIEVGRkVDVF9UUkFOU1BBUkVOVCk7XG5cblx0aWYgKGh5ZHJhdGluZykge1xuXHRcdGFuY2hvciA9IGh5ZHJhdGVfbm9kZTtcblx0fVxufVxuXG4vKipcbiAqIEluIGRldmVsb3BtZW50LCB3cmFwIHRoZSBzbmlwcGV0IGZ1bmN0aW9uIHNvIHRoYXQgaXQgcGFzc2VzIHZhbGlkYXRpb24sIGFuZCBzbyB0aGF0IHRoZVxuICogY29ycmVjdCBjb21wb25lbnQgY29udGV4dCBpcyBzZXQgZm9yIG93bmVyc2hpcCBjaGVja3NcbiAqIEBwYXJhbSB7YW55fSBjb21wb25lbnRcbiAqIEBwYXJhbSB7KG5vZGU6IFRlbXBsYXRlTm9kZSwgLi4uYXJnczogYW55W10pID0+IHZvaWR9IGZuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB3cmFwX3NuaXBwZXQoY29tcG9uZW50LCBmbikge1xuXHRyZXR1cm4gKC8qKiBAdHlwZSB7VGVtcGxhdGVOb2RlfSAqLyBub2RlLCAvKiogQHR5cGUge2FueVtdfSAqLyAuLi5hcmdzKSA9PiB7XG5cdFx0dmFyIHByZXZpb3VzX2NvbXBvbmVudF9mdW5jdGlvbiA9IGRldl9jdXJyZW50X2NvbXBvbmVudF9mdW5jdGlvbjtcblx0XHRzZXRfZGV2X2N1cnJlbnRfY29tcG9uZW50X2Z1bmN0aW9uKGNvbXBvbmVudCk7XG5cblx0XHR0cnkge1xuXHRcdFx0cmV0dXJuIGZuKG5vZGUsIC4uLmFyZ3MpO1xuXHRcdH0gZmluYWxseSB7XG5cdFx0XHRzZXRfZGV2X2N1cnJlbnRfY29tcG9uZW50X2Z1bmN0aW9uKHByZXZpb3VzX2NvbXBvbmVudF9mdW5jdGlvbik7XG5cdFx0fVxuXHR9O1xufVxuXG4vKipcbiAqIENyZWF0ZSBhIHNuaXBwZXQgcHJvZ3JhbW1hdGljYWxseVxuICogQHRlbXBsYXRlIHt1bmtub3duW119IFBhcmFtc1xuICogQHBhcmFtIHsoLi4ucGFyYW1zOiBHZXR0ZXJzPFBhcmFtcz4pID0+IHtcbiAqICAgcmVuZGVyOiAoKSA9PiBzdHJpbmdcbiAqICAgc2V0dXA/OiAoZWxlbWVudDogRWxlbWVudCkgPT4gdm9pZCB8ICgoKSA9PiB2b2lkKVxuICogfX0gZm5cbiAqIEByZXR1cm5zIHtTbmlwcGV0PFBhcmFtcz59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVSYXdTbmlwcGV0KGZuKSB7XG5cdC8vIEB0cy1leHBlY3QtZXJyb3IgdGhlIHR5cGVzIGFyZSBhIGxpZVxuXHRyZXR1cm4gKC8qKiBAdHlwZSB7VGVtcGxhdGVOb2RlfSAqLyBhbmNob3IsIC8qKiBAdHlwZSB7R2V0dGVyczxQYXJhbXM+fSAqLyAuLi5wYXJhbXMpID0+IHtcblx0XHR2YXIgc25pcHBldCA9IGZuKC4uLnBhcmFtcyk7XG5cblx0XHQvKiogQHR5cGUge0VsZW1lbnR9ICovXG5cdFx0dmFyIGVsZW1lbnQ7XG5cblx0XHRpZiAoaHlkcmF0aW5nKSB7XG5cdFx0XHRlbGVtZW50ID0gLyoqIEB0eXBlIHtFbGVtZW50fSAqLyAoaHlkcmF0ZV9ub2RlKTtcblx0XHRcdGh5ZHJhdGVfbmV4dCgpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR2YXIgaHRtbCA9IHNuaXBwZXQucmVuZGVyKCkudHJpbSgpO1xuXHRcdFx0dmFyIGZyYWdtZW50ID0gY3JlYXRlX2ZyYWdtZW50X2Zyb21faHRtbChodG1sKTtcblx0XHRcdGVsZW1lbnQgPSAvKiogQHR5cGUge0VsZW1lbnR9ICovIChnZXRfZmlyc3RfY2hpbGQoZnJhZ21lbnQpKTtcblxuXHRcdFx0aWYgKERFViAmJiAoZ2V0X25leHRfc2libGluZyhlbGVtZW50KSAhPT0gbnVsbCB8fCBlbGVtZW50Lm5vZGVUeXBlICE9PSAxKSkge1xuXHRcdFx0XHR3LmludmFsaWRfcmF3X3NuaXBwZXRfcmVuZGVyKCk7XG5cdFx0XHR9XG5cblx0XHRcdGFuY2hvci5iZWZvcmUoZWxlbWVudCk7XG5cdFx0fVxuXG5cdFx0Y29uc3QgcmVzdWx0ID0gc25pcHBldC5zZXR1cD8uKGVsZW1lbnQpO1xuXHRcdGFzc2lnbl9ub2RlcyhlbGVtZW50LCBlbGVtZW50KTtcblxuXHRcdGlmICh0eXBlb2YgcmVzdWx0ID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0XHR0ZWFyZG93bihyZXN1bHQpO1xuXHRcdH1cblx0fTtcbn1cbiIsIi8qKiBAaW1wb3J0IHsgVGVtcGxhdGVOb2RlLCBEb20sIEVmZmVjdCB9IGZyb20gJyNjbGllbnQnICovXG5pbXBvcnQgeyBFRkZFQ1RfVFJBTlNQQVJFTlQgfSBmcm9tICcuLi8uLi9jb25zdGFudHMuanMnO1xuaW1wb3J0IHsgYmxvY2ssIGJyYW5jaCwgcGF1c2VfZWZmZWN0IH0gZnJvbSAnLi4vLi4vcmVhY3Rpdml0eS9lZmZlY3RzLmpzJztcbmltcG9ydCB7IGh5ZHJhdGVfbmV4dCwgaHlkcmF0ZV9ub2RlLCBoeWRyYXRpbmcgfSBmcm9tICcuLi9oeWRyYXRpb24uanMnO1xuXG4vKipcbiAqIEB0ZW1wbGF0ZSBQXG4gKiBAdGVtcGxhdGUgeyhwcm9wczogUCkgPT4gdm9pZH0gQ1xuICogQHBhcmFtIHtUZW1wbGF0ZU5vZGV9IG5vZGVcbiAqIEBwYXJhbSB7KCkgPT4gQ30gZ2V0X2NvbXBvbmVudFxuICogQHBhcmFtIHsoYW5jaG9yOiBUZW1wbGF0ZU5vZGUsIGNvbXBvbmVudDogQykgPT4gRG9tIHwgdm9pZH0gcmVuZGVyX2ZuXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbXBvbmVudChub2RlLCBnZXRfY29tcG9uZW50LCByZW5kZXJfZm4pIHtcblx0aWYgKGh5ZHJhdGluZykge1xuXHRcdGh5ZHJhdGVfbmV4dCgpO1xuXHR9XG5cblx0dmFyIGFuY2hvciA9IG5vZGU7XG5cblx0LyoqIEB0eXBlIHtDfSAqL1xuXHR2YXIgY29tcG9uZW50O1xuXG5cdC8qKiBAdHlwZSB7RWZmZWN0IHwgbnVsbH0gKi9cblx0dmFyIGVmZmVjdDtcblxuXHRibG9jaygoKSA9PiB7XG5cdFx0aWYgKGNvbXBvbmVudCA9PT0gKGNvbXBvbmVudCA9IGdldF9jb21wb25lbnQoKSkpIHJldHVybjtcblxuXHRcdGlmIChlZmZlY3QpIHtcblx0XHRcdHBhdXNlX2VmZmVjdChlZmZlY3QpO1xuXHRcdFx0ZWZmZWN0ID0gbnVsbDtcblx0XHR9XG5cblx0XHRpZiAoY29tcG9uZW50KSB7XG5cdFx0XHRlZmZlY3QgPSBicmFuY2goKCkgPT4gcmVuZGVyX2ZuKGFuY2hvciwgY29tcG9uZW50KSk7XG5cdFx0fVxuXHR9LCBFRkZFQ1RfVFJBTlNQQVJFTlQpO1xuXG5cdGlmIChoeWRyYXRpbmcpIHtcblx0XHRhbmNob3IgPSBoeWRyYXRlX25vZGU7XG5cdH1cbn1cbiIsIi8qKiBAaW1wb3J0IHsgRWZmZWN0LCBUZW1wbGF0ZU5vZGUgfSBmcm9tICcjY2xpZW50JyAqL1xuaW1wb3J0IHsgRklMRU5BTUUsIE5BTUVTUEFDRV9TVkcgfSBmcm9tICcuLi8uLi8uLi8uLi9jb25zdGFudHMuanMnO1xuaW1wb3J0IHtcblx0aHlkcmF0ZV9uZXh0LFxuXHRoeWRyYXRlX25vZGUsXG5cdGh5ZHJhdGluZyxcblx0c2V0X2h5ZHJhdGVfbm9kZSxcblx0c2V0X2h5ZHJhdGluZ1xufSBmcm9tICcuLi9oeWRyYXRpb24uanMnO1xuaW1wb3J0IHsgY3JlYXRlX3RleHQsIGdldF9maXJzdF9jaGlsZCB9IGZyb20gJy4uL29wZXJhdGlvbnMuanMnO1xuaW1wb3J0IHtcblx0YmxvY2ssXG5cdGJyYW5jaCxcblx0ZGVzdHJveV9lZmZlY3QsXG5cdHBhdXNlX2VmZmVjdCxcblx0cmVzdW1lX2VmZmVjdFxufSBmcm9tICcuLi8uLi9yZWFjdGl2aXR5L2VmZmVjdHMuanMnO1xuaW1wb3J0IHsgc2V0X3Nob3VsZF9pbnRybyB9IGZyb20gJy4uLy4uL3JlbmRlci5qcyc7XG5pbXBvcnQgeyBjdXJyZW50X2VhY2hfaXRlbSwgc2V0X2N1cnJlbnRfZWFjaF9pdGVtIH0gZnJvbSAnLi9lYWNoLmpzJztcbmltcG9ydCB7IGNvbXBvbmVudF9jb250ZXh0LCBhY3RpdmVfZWZmZWN0IH0gZnJvbSAnLi4vLi4vcnVudGltZS5qcyc7XG5pbXBvcnQgeyBERVYgfSBmcm9tICdlc20tZW52JztcbmltcG9ydCB7IEVGRkVDVF9UUkFOU1BBUkVOVCB9IGZyb20gJy4uLy4uL2NvbnN0YW50cy5qcyc7XG5pbXBvcnQgeyBhc3NpZ25fbm9kZXMgfSBmcm9tICcuLi90ZW1wbGF0ZS5qcyc7XG5pbXBvcnQgeyBpc19yYXdfdGV4dF9lbGVtZW50IH0gZnJvbSAnLi4vLi4vLi4vLi4vdXRpbHMuanMnO1xuXG4vKipcbiAqIEBwYXJhbSB7Q29tbWVudCB8IEVsZW1lbnR9IG5vZGVcbiAqIEBwYXJhbSB7KCkgPT4gc3RyaW5nfSBnZXRfdGFnXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGlzX3N2Z1xuICogQHBhcmFtIHt1bmRlZmluZWQgfCAoKGVsZW1lbnQ6IEVsZW1lbnQsIGFuY2hvcjogTm9kZSB8IG51bGwpID0+IHZvaWQpfSByZW5kZXJfZm4sXG4gKiBAcGFyYW0ge3VuZGVmaW5lZCB8ICgoKSA9PiBzdHJpbmcpfSBnZXRfbmFtZXNwYWNlXG4gKiBAcGFyYW0ge3VuZGVmaW5lZCB8IFtudW1iZXIsIG51bWJlcl19IGxvY2F0aW9uXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGVsZW1lbnQobm9kZSwgZ2V0X3RhZywgaXNfc3ZnLCByZW5kZXJfZm4sIGdldF9uYW1lc3BhY2UsIGxvY2F0aW9uKSB7XG5cdGxldCB3YXNfaHlkcmF0aW5nID0gaHlkcmF0aW5nO1xuXG5cdGlmIChoeWRyYXRpbmcpIHtcblx0XHRoeWRyYXRlX25leHQoKTtcblx0fVxuXG5cdHZhciBmaWxlbmFtZSA9IERFViAmJiBsb2NhdGlvbiAmJiBjb21wb25lbnRfY29udGV4dD8uZnVuY3Rpb25bRklMRU5BTUVdO1xuXG5cdC8qKiBAdHlwZSB7c3RyaW5nIHwgbnVsbH0gKi9cblx0dmFyIHRhZztcblxuXHQvKiogQHR5cGUge3N0cmluZyB8IG51bGx9ICovXG5cdHZhciBjdXJyZW50X3RhZztcblxuXHQvKiogQHR5cGUge251bGwgfCBFbGVtZW50fSAqL1xuXHR2YXIgZWxlbWVudCA9IG51bGw7XG5cblx0aWYgKGh5ZHJhdGluZyAmJiBoeWRyYXRlX25vZGUubm9kZVR5cGUgPT09IDEpIHtcblx0XHRlbGVtZW50ID0gLyoqIEB0eXBlIHtFbGVtZW50fSAqLyAoaHlkcmF0ZV9ub2RlKTtcblx0XHRoeWRyYXRlX25leHQoKTtcblx0fVxuXG5cdHZhciBhbmNob3IgPSAvKiogQHR5cGUge1RlbXBsYXRlTm9kZX0gKi8gKGh5ZHJhdGluZyA/IGh5ZHJhdGVfbm9kZSA6IG5vZGUpO1xuXG5cdC8qKiBAdHlwZSB7RWZmZWN0IHwgbnVsbH0gKi9cblx0dmFyIGVmZmVjdDtcblxuXHQvKipcblx0ICogVGhlIGtleWVkIGB7I2VhY2ggLi4ufWAgaXRlbSBibG9jaywgaWYgYW55LCB0aGF0IHRoaXMgZWxlbWVudCBpcyBpbnNpZGUuXG5cdCAqIFdlIHRyYWNrIHRoaXMgc28gd2UgY2FuIHNldCBpdCB3aGVuIGNoYW5naW5nIHRoZSBlbGVtZW50LCBhbGxvd2luZyBhbnlcblx0ICogYGFuaW1hdGU6YCBkaXJlY3RpdmUgdG8gYmluZCBpdHNlbGYgdG8gdGhlIGNvcnJlY3QgYmxvY2tcblx0ICovXG5cdHZhciBlYWNoX2l0ZW1fYmxvY2sgPSBjdXJyZW50X2VhY2hfaXRlbTtcblxuXHRibG9jaygoKSA9PiB7XG5cdFx0Y29uc3QgbmV4dF90YWcgPSBnZXRfdGFnKCkgfHwgbnVsbDtcblx0XHR2YXIgbnMgPSBnZXRfbmFtZXNwYWNlID8gZ2V0X25hbWVzcGFjZSgpIDogaXNfc3ZnIHx8IG5leHRfdGFnID09PSAnc3ZnJyA/IE5BTUVTUEFDRV9TVkcgOiBudWxsO1xuXG5cdFx0Ly8gQXNzdW1wdGlvbjogTm9vbmUgY2hhbmdlcyB0aGUgbmFtZXNwYWNlIGJ1dCBub3QgdGhlIHRhZyAod2hhdCB3b3VsZCB0aGF0IGV2ZW4gbWVhbj8pXG5cdFx0aWYgKG5leHRfdGFnID09PSB0YWcpIHJldHVybjtcblxuXHRcdC8vIFNlZSBleHBsYW5hdGlvbiBvZiBgZWFjaF9pdGVtX2Jsb2NrYCBhYm92ZVxuXHRcdHZhciBwcmV2aW91c19lYWNoX2l0ZW0gPSBjdXJyZW50X2VhY2hfaXRlbTtcblx0XHRzZXRfY3VycmVudF9lYWNoX2l0ZW0oZWFjaF9pdGVtX2Jsb2NrKTtcblxuXHRcdGlmIChlZmZlY3QpIHtcblx0XHRcdGlmIChuZXh0X3RhZyA9PT0gbnVsbCkge1xuXHRcdFx0XHQvLyBzdGFydCBvdXRyb1xuXHRcdFx0XHRwYXVzZV9lZmZlY3QoZWZmZWN0LCAoKSA9PiB7XG5cdFx0XHRcdFx0ZWZmZWN0ID0gbnVsbDtcblx0XHRcdFx0XHRjdXJyZW50X3RhZyA9IG51bGw7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fSBlbHNlIGlmIChuZXh0X3RhZyA9PT0gY3VycmVudF90YWcpIHtcblx0XHRcdFx0Ly8gc2FtZSB0YWcgYXMgaXMgY3VycmVudGx5IHJlbmRlcmVkIOKAlCBhYm9ydCBvdXRyb1xuXHRcdFx0XHRyZXN1bWVfZWZmZWN0KGVmZmVjdCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHQvLyB0YWcgaXMgY2hhbmdpbmcg4oCUIGRlc3Ryb3kgaW1tZWRpYXRlbHksIHJlbmRlciBjb250ZW50cyB3aXRob3V0IGludHJvIHRyYW5zaXRpb25zXG5cdFx0XHRcdGRlc3Ryb3lfZWZmZWN0KGVmZmVjdCk7XG5cdFx0XHRcdHNldF9zaG91bGRfaW50cm8oZmFsc2UpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmIChuZXh0X3RhZyAmJiBuZXh0X3RhZyAhPT0gY3VycmVudF90YWcpIHtcblx0XHRcdGVmZmVjdCA9IGJyYW5jaCgoKSA9PiB7XG5cdFx0XHRcdGVsZW1lbnQgPSBoeWRyYXRpbmdcblx0XHRcdFx0XHQ/IC8qKiBAdHlwZSB7RWxlbWVudH0gKi8gKGVsZW1lbnQpXG5cdFx0XHRcdFx0OiBuc1xuXHRcdFx0XHRcdFx0PyBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMobnMsIG5leHRfdGFnKVxuXHRcdFx0XHRcdFx0OiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KG5leHRfdGFnKTtcblxuXHRcdFx0XHRpZiAoREVWICYmIGxvY2F0aW9uKSB7XG5cdFx0XHRcdFx0Ly8gQHRzLWV4cGVjdC1lcnJvclxuXHRcdFx0XHRcdGVsZW1lbnQuX19zdmVsdGVfbWV0YSA9IHtcblx0XHRcdFx0XHRcdGxvYzoge1xuXHRcdFx0XHRcdFx0XHRmaWxlOiBmaWxlbmFtZSxcblx0XHRcdFx0XHRcdFx0bGluZTogbG9jYXRpb25bMF0sXG5cdFx0XHRcdFx0XHRcdGNvbHVtbjogbG9jYXRpb25bMV1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0YXNzaWduX25vZGVzKGVsZW1lbnQsIGVsZW1lbnQpO1xuXG5cdFx0XHRcdGlmIChyZW5kZXJfZm4pIHtcblx0XHRcdFx0XHRpZiAoaHlkcmF0aW5nICYmIGlzX3Jhd190ZXh0X2VsZW1lbnQobmV4dF90YWcpKSB7XG5cdFx0XHRcdFx0XHQvLyBwcmV2ZW50IGh5ZHJhdGlvbiBnbGl0Y2hlc1xuXHRcdFx0XHRcdFx0ZWxlbWVudC5hcHBlbmQoZG9jdW1lbnQuY3JlYXRlQ29tbWVudCgnJykpO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIElmIGh5ZHJhdGluZywgdXNlIHRoZSBleGlzdGluZyBzc3IgY29tbWVudCBhcyB0aGUgYW5jaG9yIHNvIHRoYXQgdGhlXG5cdFx0XHRcdFx0Ly8gaW5uZXIgb3BlbiBhbmQgY2xvc2UgbWV0aG9kcyBjYW4gcGljayB1cCB0aGUgZXhpc3Rpbmcgbm9kZXMgY29ycmVjdGx5XG5cdFx0XHRcdFx0dmFyIGNoaWxkX2FuY2hvciA9IC8qKiBAdHlwZSB7VGVtcGxhdGVOb2RlfSAqLyAoXG5cdFx0XHRcdFx0XHRoeWRyYXRpbmcgPyBnZXRfZmlyc3RfY2hpbGQoZWxlbWVudCkgOiBlbGVtZW50LmFwcGVuZENoaWxkKGNyZWF0ZV90ZXh0KCkpXG5cdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdGlmIChoeWRyYXRpbmcpIHtcblx0XHRcdFx0XHRcdGlmIChjaGlsZF9hbmNob3IgPT09IG51bGwpIHtcblx0XHRcdFx0XHRcdFx0c2V0X2h5ZHJhdGluZyhmYWxzZSk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRzZXRfaHlkcmF0ZV9ub2RlKGNoaWxkX2FuY2hvcik7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gYGNoaWxkX2FuY2hvcmAgaXMgdW5kZWZpbmVkIGlmIHRoaXMgaXMgYSB2b2lkIGVsZW1lbnQsIGJ1dCB3ZSBzdGlsbFxuXHRcdFx0XHRcdC8vIG5lZWQgdG8gY2FsbCBgcmVuZGVyX2ZuYCBpbiBvcmRlciB0byBydW4gYWN0aW9ucyBldGMuIElmIHRoZSBlbGVtZW50XG5cdFx0XHRcdFx0Ly8gY29udGFpbnMgY2hpbGRyZW4sIGl0J3MgYSB1c2VyIGVycm9yICh3aGljaCBpcyB3YXJuZWQgb24gZWxzZXdoZXJlKVxuXHRcdFx0XHRcdC8vIGFuZCB0aGUgRE9NIHdpbGwgYmUgc2lsZW50bHkgZGlzY2FyZGVkXG5cdFx0XHRcdFx0cmVuZGVyX2ZuKGVsZW1lbnQsIGNoaWxkX2FuY2hvcik7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyB3ZSBkbyB0aGlzIGFmdGVyIGNhbGxpbmcgYHJlbmRlcl9mbmAgc28gdGhhdCBjaGlsZCBlZmZlY3RzIGRvbid0IG92ZXJyaWRlIGBub2Rlcy5lbmRgXG5cdFx0XHRcdC8qKiBAdHlwZSB7RWZmZWN0fSAqLyAoYWN0aXZlX2VmZmVjdCkubm9kZXNfZW5kID0gZWxlbWVudDtcblxuXHRcdFx0XHRhbmNob3IuYmVmb3JlKGVsZW1lbnQpO1xuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0dGFnID0gbmV4dF90YWc7XG5cdFx0aWYgKHRhZykgY3VycmVudF90YWcgPSB0YWc7XG5cdFx0c2V0X3Nob3VsZF9pbnRybyh0cnVlKTtcblxuXHRcdHNldF9jdXJyZW50X2VhY2hfaXRlbShwcmV2aW91c19lYWNoX2l0ZW0pO1xuXHR9LCBFRkZFQ1RfVFJBTlNQQVJFTlQpO1xuXG5cdGlmICh3YXNfaHlkcmF0aW5nKSB7XG5cdFx0c2V0X2h5ZHJhdGluZyh0cnVlKTtcblx0XHRzZXRfaHlkcmF0ZV9ub2RlKGFuY2hvcik7XG5cdH1cbn1cbiIsImltcG9ydCB7IERFViB9IGZyb20gJ2VzbS1lbnYnO1xuaW1wb3J0IHsgaHlkcmF0aW5nIH0gZnJvbSAnLi4vaHlkcmF0aW9uLmpzJztcbmltcG9ydCB7IGdldF9kZXNjcmlwdG9ycywgZ2V0X3Byb3RvdHlwZV9vZiB9IGZyb20gJy4uLy4uLy4uL3NoYXJlZC91dGlscy5qcyc7XG5pbXBvcnQgeyBjcmVhdGVfZXZlbnQsIGRlbGVnYXRlIH0gZnJvbSAnLi9ldmVudHMuanMnO1xuaW1wb3J0IHsgYWRkX2Zvcm1fcmVzZXRfbGlzdGVuZXIsIGF1dG9mb2N1cyB9IGZyb20gJy4vbWlzYy5qcyc7XG5pbXBvcnQgKiBhcyB3IGZyb20gJy4uLy4uL3dhcm5pbmdzLmpzJztcbmltcG9ydCB7IExPQURJTkdfQVRUUl9TWU1CT0wgfSBmcm9tICcuLi8uLi9jb25zdGFudHMuanMnO1xuaW1wb3J0IHsgcXVldWVfaWRsZV90YXNrIH0gZnJvbSAnLi4vdGFzay5qcyc7XG5pbXBvcnQgeyBpc19jYXB0dXJlX2V2ZW50LCBpc19kZWxlZ2F0ZWQsIG5vcm1hbGl6ZV9hdHRyaWJ1dGUgfSBmcm9tICcuLi8uLi8uLi8uLi91dGlscy5qcyc7XG5pbXBvcnQge1xuXHRhY3RpdmVfZWZmZWN0LFxuXHRhY3RpdmVfcmVhY3Rpb24sXG5cdHNldF9hY3RpdmVfZWZmZWN0LFxuXHRzZXRfYWN0aXZlX3JlYWN0aW9uXG59IGZyb20gJy4uLy4uL3J1bnRpbWUuanMnO1xuXG4vKipcbiAqIFRoZSB2YWx1ZS9jaGVja2VkIGF0dHJpYnV0ZSBpbiB0aGUgdGVtcGxhdGUgYWN0dWFsbHkgY29ycmVzcG9uZHMgdG8gdGhlIGRlZmF1bHRWYWx1ZSBwcm9wZXJ0eSwgc28gd2UgbmVlZFxuICogdG8gcmVtb3ZlIGl0IHVwb24gaHlkcmF0aW9uIHRvIGF2b2lkIGEgYnVnIHdoZW4gc29tZW9uZSByZXNldHMgdGhlIGZvcm0gdmFsdWUuXG4gKiBAcGFyYW0ge0hUTUxJbnB1dEVsZW1lbnR9IGlucHV0XG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZV9pbnB1dF9kZWZhdWx0cyhpbnB1dCkge1xuXHRpZiAoIWh5ZHJhdGluZykgcmV0dXJuO1xuXG5cdHZhciBhbHJlYWR5X3JlbW92ZWQgPSBmYWxzZTtcblxuXHQvLyBXZSB0cnkgYW5kIHJlbW92ZSB0aGUgZGVmYXVsdCBhdHRyaWJ1dGVzIGxhdGVyLCByYXRoZXIgdGhhbiBzeW5jIGR1cmluZyBoeWRyYXRpb24uXG5cdC8vIERvaW5nIGl0IHN5bmMgZHVyaW5nIGh5ZHJhdGlvbiBoYXMgYSBuZWdhdGl2ZSBpbXBhY3Qgb24gcGVyZm9ybWFuY2UsIGJ1dCBkZWZlcnJpbmcgdGhlXG5cdC8vIHdvcmsgaW4gYW4gaWRsZSB0YXNrIGFsbGV2aWF0ZXMgdGhpcyBncmVhdGx5LiBJZiBhIGZvcm0gcmVzZXQgZXZlbnQgY29tZXMgaW4gYmVmb3JlXG5cdC8vIHRoZSBpZGxlIGNhbGxiYWNrLCB0aGVuIHdlIGVuc3VyZSB0aGUgaW5wdXQgZGVmYXVsdHMgYXJlIGNsZWFyZWQganVzdCBiZWZvcmUuXG5cdHZhciByZW1vdmVfZGVmYXVsdHMgPSAoKSA9PiB7XG5cdFx0aWYgKGFscmVhZHlfcmVtb3ZlZCkgcmV0dXJuO1xuXHRcdGFscmVhZHlfcmVtb3ZlZCA9IHRydWU7XG5cblx0XHQvLyBSZW1vdmUgdGhlIGF0dHJpYnV0ZXMgYnV0IHByZXNlcnZlIHRoZSB2YWx1ZXNcblx0XHRpZiAoaW5wdXQuaGFzQXR0cmlidXRlKCd2YWx1ZScpKSB7XG5cdFx0XHR2YXIgdmFsdWUgPSBpbnB1dC52YWx1ZTtcblx0XHRcdHNldF9hdHRyaWJ1dGUoaW5wdXQsICd2YWx1ZScsIG51bGwpO1xuXHRcdFx0aW5wdXQudmFsdWUgPSB2YWx1ZTtcblx0XHR9XG5cblx0XHRpZiAoaW5wdXQuaGFzQXR0cmlidXRlKCdjaGVja2VkJykpIHtcblx0XHRcdHZhciBjaGVja2VkID0gaW5wdXQuY2hlY2tlZDtcblx0XHRcdHNldF9hdHRyaWJ1dGUoaW5wdXQsICdjaGVja2VkJywgbnVsbCk7XG5cdFx0XHRpbnB1dC5jaGVja2VkID0gY2hlY2tlZDtcblx0XHR9XG5cdH07XG5cblx0Ly8gQHRzLWV4cGVjdC1lcnJvclxuXHRpbnB1dC5fX29uX3IgPSByZW1vdmVfZGVmYXVsdHM7XG5cdHF1ZXVlX2lkbGVfdGFzayhyZW1vdmVfZGVmYXVsdHMpO1xuXHRhZGRfZm9ybV9yZXNldF9saXN0ZW5lcigpO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudFxuICogQHBhcmFtIHthbnl9IHZhbHVlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXRfdmFsdWUoZWxlbWVudCwgdmFsdWUpIHtcblx0Ly8gQHRzLWV4cGVjdC1lcnJvclxuXHR2YXIgYXR0cmlidXRlcyA9IChlbGVtZW50Ll9fYXR0cmlidXRlcyA/Pz0ge30pO1xuXG5cdGlmIChcblx0XHRhdHRyaWJ1dGVzLnZhbHVlID09PVxuXHRcdFx0KGF0dHJpYnV0ZXMudmFsdWUgPVxuXHRcdFx0XHQvLyB0cmVhdCBudWxsIGFuZCB1bmRlZmluZWQgdGhlIHNhbWUgZm9yIHRoZSBpbml0aWFsIHZhbHVlXG5cdFx0XHRcdHZhbHVlID8/IHVuZGVmaW5lZCkgfHxcblx0XHQvLyBAdHMtZXhwZWN0LWVycm9yXG5cdFx0Ly8gYHByb2dyZXNzYCBlbGVtZW50cyBhbHdheXMgbmVlZCB0aGVpciB2YWx1ZSBzZXQgd2hlbiBpdHMgYDBgXG5cdFx0KGVsZW1lbnQudmFsdWUgPT09IHZhbHVlICYmICh2YWx1ZSAhPT0gMCB8fCBlbGVtZW50Lm5vZGVOYW1lICE9PSAnUFJPR1JFU1MnKSlcblx0KSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Ly8gQHRzLWV4cGVjdC1lcnJvclxuXHRlbGVtZW50LnZhbHVlID0gdmFsdWU7XG59XG5cbi8qKlxuICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50XG4gKiBAcGFyYW0ge2Jvb2xlYW59IGNoZWNrZWRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldF9jaGVja2VkKGVsZW1lbnQsIGNoZWNrZWQpIHtcblx0Ly8gQHRzLWV4cGVjdC1lcnJvclxuXHR2YXIgYXR0cmlidXRlcyA9IChlbGVtZW50Ll9fYXR0cmlidXRlcyA/Pz0ge30pO1xuXG5cdGlmIChcblx0XHRhdHRyaWJ1dGVzLmNoZWNrZWQgPT09XG5cdFx0KGF0dHJpYnV0ZXMuY2hlY2tlZCA9XG5cdFx0XHQvLyB0cmVhdCBudWxsIGFuZCB1bmRlZmluZWQgdGhlIHNhbWUgZm9yIHRoZSBpbml0aWFsIHZhbHVlXG5cdFx0XHRjaGVja2VkID8/IHVuZGVmaW5lZClcblx0KSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Ly8gQHRzLWV4cGVjdC1lcnJvclxuXHRlbGVtZW50LmNoZWNrZWQgPSBjaGVja2VkO1xufVxuXG4vKipcbiAqIFNldHMgdGhlIGBzZWxlY3RlZGAgYXR0cmlidXRlIG9uIGFuIGBvcHRpb25gIGVsZW1lbnQuXG4gKiBOb3Qgc2V0IHRocm91Z2ggdGhlIHByb3BlcnR5IGJlY2F1c2UgdGhhdCBkb2Vzbid0IHJlZmxlY3QgdG8gdGhlIERPTSxcbiAqIHdoaWNoIG1lYW5zIGl0IHdvdWxkbid0IGJlIHRha2VuIGludG8gYWNjb3VudCB3aGVuIGEgZm9ybSBpcyByZXNldC5cbiAqIEBwYXJhbSB7SFRNTE9wdGlvbkVsZW1lbnR9IGVsZW1lbnRcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gc2VsZWN0ZWRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldF9zZWxlY3RlZChlbGVtZW50LCBzZWxlY3RlZCkge1xuXHRpZiAoc2VsZWN0ZWQpIHtcblx0XHQvLyBUaGUgc2VsZWN0ZWQgb3B0aW9uIGNvdWxkJ3ZlIGNoYW5nZWQgdmlhIHVzZXIgc2VsZWN0aW9uLCBhbmRcblx0XHQvLyBzZXR0aW5nIHRoZSB2YWx1ZSB3aXRob3V0IHRoaXMgY2hlY2sgd291bGQgc2V0IGl0IGJhY2suXG5cdFx0aWYgKCFlbGVtZW50Lmhhc0F0dHJpYnV0ZSgnc2VsZWN0ZWQnKSkge1xuXHRcdFx0ZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ3NlbGVjdGVkJywgJycpO1xuXHRcdH1cblx0fSBlbHNlIHtcblx0XHRlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSgnc2VsZWN0ZWQnKTtcblx0fVxufVxuXG4vKipcbiAqIEFwcGxpZXMgdGhlIGRlZmF1bHQgY2hlY2tlZCBwcm9wZXJ0eSB3aXRob3V0IGluZmx1ZW5jaW5nIHRoZSBjdXJyZW50IGNoZWNrZWQgcHJvcGVydHkuXG4gKiBAcGFyYW0ge0hUTUxJbnB1dEVsZW1lbnR9IGVsZW1lbnRcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gY2hlY2tlZFxuICovXG5leHBvcnQgZnVuY3Rpb24gc2V0X2RlZmF1bHRfY2hlY2tlZChlbGVtZW50LCBjaGVja2VkKSB7XG5cdGNvbnN0IGV4aXN0aW5nX3ZhbHVlID0gZWxlbWVudC5jaGVja2VkO1xuXHRlbGVtZW50LmRlZmF1bHRDaGVja2VkID0gY2hlY2tlZDtcblx0ZWxlbWVudC5jaGVja2VkID0gZXhpc3RpbmdfdmFsdWU7XG59XG5cbi8qKlxuICogQXBwbGllcyB0aGUgZGVmYXVsdCB2YWx1ZSBwcm9wZXJ0eSB3aXRob3V0IGluZmx1ZW5jaW5nIHRoZSBjdXJyZW50IHZhbHVlIHByb3BlcnR5LlxuICogQHBhcmFtIHtIVE1MSW5wdXRFbGVtZW50IHwgSFRNTFRleHRBcmVhRWxlbWVudH0gZWxlbWVudFxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXRfZGVmYXVsdF92YWx1ZShlbGVtZW50LCB2YWx1ZSkge1xuXHRjb25zdCBleGlzdGluZ192YWx1ZSA9IGVsZW1lbnQudmFsdWU7XG5cdGVsZW1lbnQuZGVmYXVsdFZhbHVlID0gdmFsdWU7XG5cdGVsZW1lbnQudmFsdWUgPSBleGlzdGluZ192YWx1ZTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnRcbiAqIEBwYXJhbSB7c3RyaW5nfSBhdHRyaWJ1dGVcbiAqIEBwYXJhbSB7c3RyaW5nIHwgbnVsbH0gdmFsdWVcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW3NraXBfd2FybmluZ11cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldF9hdHRyaWJ1dGUoZWxlbWVudCwgYXR0cmlidXRlLCB2YWx1ZSwgc2tpcF93YXJuaW5nKSB7XG5cdC8vIEB0cy1leHBlY3QtZXJyb3Jcblx0dmFyIGF0dHJpYnV0ZXMgPSAoZWxlbWVudC5fX2F0dHJpYnV0ZXMgPz89IHt9KTtcblxuXHRpZiAoaHlkcmF0aW5nKSB7XG5cdFx0YXR0cmlidXRlc1thdHRyaWJ1dGVdID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoYXR0cmlidXRlKTtcblxuXHRcdGlmIChcblx0XHRcdGF0dHJpYnV0ZSA9PT0gJ3NyYycgfHxcblx0XHRcdGF0dHJpYnV0ZSA9PT0gJ3NyY3NldCcgfHxcblx0XHRcdChhdHRyaWJ1dGUgPT09ICdocmVmJyAmJiBlbGVtZW50Lm5vZGVOYW1lID09PSAnTElOSycpXG5cdFx0KSB7XG5cdFx0XHRpZiAoIXNraXBfd2FybmluZykge1xuXHRcdFx0XHRjaGVja19zcmNfaW5fZGV2X2h5ZHJhdGlvbihlbGVtZW50LCBhdHRyaWJ1dGUsIHZhbHVlID8/ICcnKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgd2UgcmVzZXQgdGhlc2UgYXR0cmlidXRlcywgdGhleSB3b3VsZCByZXN1bHQgaW4gYW5vdGhlciBuZXR3b3JrIHJlcXVlc3QsIHdoaWNoIHdlIHdhbnQgdG8gYXZvaWQuXG5cdFx0XHQvLyBXZSBhc3N1bWUgdGhleSBhcmUgdGhlIHNhbWUgYmV0d2VlbiBjbGllbnQgYW5kIHNlcnZlciBhcyBjaGVja2luZyBpZiB0aGV5IGFyZSBlcXVhbCBpcyBleHBlbnNpdmVcblx0XHRcdC8vICh3ZSBjYW4ndCBqdXN0IGNvbXBhcmUgdGhlIHN0cmluZ3MgYXMgdGhleSBjYW4gYmUgZGlmZmVyZW50IGJldHdlZW4gY2xpZW50IGFuZCBzZXJ2ZXIgYnV0IHJlc3VsdCBpbiB0aGVcblx0XHRcdC8vIHNhbWUgdXJsLCBzbyB3ZSB3b3VsZCBuZWVkIHRvIGNyZWF0ZSBoaWRkZW4gYW5jaG9yIGVsZW1lbnRzIHRvIGNvbXBhcmUgdGhlbSlcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdH1cblxuXHRpZiAoYXR0cmlidXRlc1thdHRyaWJ1dGVdID09PSAoYXR0cmlidXRlc1thdHRyaWJ1dGVdID0gdmFsdWUpKSByZXR1cm47XG5cblx0aWYgKGF0dHJpYnV0ZSA9PT0gJ3N0eWxlJyAmJiAnX19zdHlsZXMnIGluIGVsZW1lbnQpIHtcblx0XHQvLyByZXNldCBzdHlsZXMgdG8gZm9yY2Ugc3R5bGU6IGRpcmVjdGl2ZSB0byB1cGRhdGVcblx0XHRlbGVtZW50Ll9fc3R5bGVzID0ge307XG5cdH1cblxuXHRpZiAoYXR0cmlidXRlID09PSAnbG9hZGluZycpIHtcblx0XHQvLyBAdHMtZXhwZWN0LWVycm9yXG5cdFx0ZWxlbWVudFtMT0FESU5HX0FUVFJfU1lNQk9MXSA9IHZhbHVlO1xuXHR9XG5cblx0aWYgKHZhbHVlID09IG51bGwpIHtcblx0XHRlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShhdHRyaWJ1dGUpO1xuXHR9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycgJiYgZ2V0X3NldHRlcnMoZWxlbWVudCkuaW5jbHVkZXMoYXR0cmlidXRlKSkge1xuXHRcdC8vIEB0cy1pZ25vcmVcblx0XHRlbGVtZW50W2F0dHJpYnV0ZV0gPSB2YWx1ZTtcblx0fSBlbHNlIHtcblx0XHRlbGVtZW50LnNldEF0dHJpYnV0ZShhdHRyaWJ1dGUsIHZhbHVlKTtcblx0fVxufVxuXG4vKipcbiAqIEBwYXJhbSB7RWxlbWVudH0gZG9tXG4gKiBAcGFyYW0ge3N0cmluZ30gYXR0cmlidXRlXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldF94bGlua19hdHRyaWJ1dGUoZG9tLCBhdHRyaWJ1dGUsIHZhbHVlKSB7XG5cdGRvbS5zZXRBdHRyaWJ1dGVOUygnaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluaycsIGF0dHJpYnV0ZSwgdmFsdWUpO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IG5vZGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wXG4gKiBAcGFyYW0ge2FueX0gdmFsdWVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldF9jdXN0b21fZWxlbWVudF9kYXRhKG5vZGUsIHByb3AsIHZhbHVlKSB7XG5cdC8vIFdlIG5lZWQgdG8gZW5zdXJlIHRoYXQgc2V0dGluZyBjdXN0b20gZWxlbWVudCBwcm9wcywgd2hpY2ggY2FuXG5cdC8vIGludm9rZSBsaWZlY3ljbGUgbWV0aG9kcyBvbiBvdGhlciBjdXN0b20gZWxlbWVudHMsIGRvZXMgbm90IGFsc29cblx0Ly8gYXNzb2NpYXRlIHRob3NlIGxpZmVjeWNsZSBtZXRob2RzIHdpdGggdGhlIGN1cnJlbnQgYWN0aXZlIHJlYWN0aW9uXG5cdC8vIG9yIGVmZmVjdFxuXHR2YXIgcHJldmlvdXNfcmVhY3Rpb24gPSBhY3RpdmVfcmVhY3Rpb247XG5cdHZhciBwcmV2aW91c19lZmZlY3QgPSBhY3RpdmVfZWZmZWN0O1xuXG5cdHNldF9hY3RpdmVfcmVhY3Rpb24obnVsbCk7XG5cdHNldF9hY3RpdmVfZWZmZWN0KG51bGwpO1xuXHR0cnkge1xuXHRcdGlmIChcblx0XHRcdC8vIERvbid0IGNvbXB1dGUgc2V0dGVycyBmb3IgY3VzdG9tIGVsZW1lbnRzIHdoaWxlIHRoZXkgYXJlbid0IHJlZ2lzdGVyZWQgeWV0LFxuXHRcdFx0Ly8gYmVjYXVzZSBkdXJpbmcgdGhlaXIgdXBncmFkZS9pbnN0YW50aWF0aW9uIHRoZXkgbWlnaHQgYWRkIG1vcmUgc2V0dGVycy5cblx0XHRcdC8vIEluc3RlYWQsIGZhbGwgYmFjayB0byBhIHNpbXBsZSBcImFuIG9iamVjdCwgdGhlbiBzZXQgYXMgcHJvcGVydHlcIiBoZXVyaXN0aWMuXG5cdFx0XHRzZXR0ZXJzX2NhY2hlLmhhcyhub2RlLm5vZGVOYW1lKSB8fCBjdXN0b21FbGVtZW50cy5nZXQobm9kZS50YWdOYW1lLnRvTG93ZXJDYXNlKCkpXG5cdFx0XHRcdD8gZ2V0X3NldHRlcnMobm9kZSkuaW5jbHVkZXMocHJvcClcblx0XHRcdFx0OiB2YWx1ZSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnXG5cdFx0KSB7XG5cdFx0XHQvLyBAdHMtZXhwZWN0LWVycm9yXG5cdFx0XHRub2RlW3Byb3BdID0gdmFsdWU7XG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIFdlIGRpZCBnZXR0ZXJzIGV0YyBjaGVja3MgYWxyZWFkeSwgc3RyaW5naWZ5IGJlZm9yZSBwYXNzaW5nIHRvIHNldF9hdHRyaWJ1dGVcblx0XHRcdC8vIHRvIGVuc3VyZSBpdCBkb2Vzbid0IGludm9rZSB0aGUgc2FtZSBsb2dpYyBhZ2FpbiwgYW5kIHBvdGVudGlhbGx5IHBvcHVsYXRpbmdcblx0XHRcdC8vIHRoZSBzZXR0ZXJzIGNhY2hlIHRvbyBlYXJseS5cblx0XHRcdHNldF9hdHRyaWJ1dGUobm9kZSwgcHJvcCwgdmFsdWUgPT0gbnVsbCA/IHZhbHVlIDogU3RyaW5nKHZhbHVlKSk7XG5cdFx0fVxuXHR9IGZpbmFsbHkge1xuXHRcdHNldF9hY3RpdmVfcmVhY3Rpb24ocHJldmlvdXNfcmVhY3Rpb24pO1xuXHRcdHNldF9hY3RpdmVfZWZmZWN0KHByZXZpb3VzX2VmZmVjdCk7XG5cdH1cbn1cblxuLyoqXG4gKiBTcHJlYWRzIGF0dHJpYnV0ZXMgb250byBhIERPTSBlbGVtZW50LCB0YWtpbmcgaW50byBhY2NvdW50IHRoZSBjdXJyZW50bHkgc2V0IGF0dHJpYnV0ZXNcbiAqIEBwYXJhbSB7RWxlbWVudCAmIEVsZW1lbnRDU1NJbmxpbmVTdHlsZX0gZWxlbWVudFxuICogQHBhcmFtIHtSZWNvcmQ8c3RyaW5nLCBhbnk+IHwgdW5kZWZpbmVkfSBwcmV2XG4gKiBAcGFyYW0ge1JlY29yZDxzdHJpbmcsIGFueT59IG5leHQgTmV3IGF0dHJpYnV0ZXMgLSB0aGlzIGZ1bmN0aW9uIG11dGF0ZXMgdGhpcyBvYmplY3RcbiAqIEBwYXJhbSB7c3RyaW5nfSBbY3NzX2hhc2hdXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtwcmVzZXJ2ZV9hdHRyaWJ1dGVfY2FzZV1cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzX2N1c3RvbV9lbGVtZW50XVxuICogQHBhcmFtIHtib29sZWFufSBbc2tpcF93YXJuaW5nXVxuICogQHJldHVybnMge1JlY29yZDxzdHJpbmcsIGFueT59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXRfYXR0cmlidXRlcyhcblx0ZWxlbWVudCxcblx0cHJldixcblx0bmV4dCxcblx0Y3NzX2hhc2gsXG5cdHByZXNlcnZlX2F0dHJpYnV0ZV9jYXNlID0gZmFsc2UsXG5cdGlzX2N1c3RvbV9lbGVtZW50ID0gZmFsc2UsXG5cdHNraXBfd2FybmluZyA9IGZhbHNlXG4pIHtcblx0dmFyIGN1cnJlbnQgPSBwcmV2IHx8IHt9O1xuXHR2YXIgaXNfb3B0aW9uX2VsZW1lbnQgPSBlbGVtZW50LnRhZ05hbWUgPT09ICdPUFRJT04nO1xuXG5cdGZvciAodmFyIGtleSBpbiBwcmV2KSB7XG5cdFx0aWYgKCEoa2V5IGluIG5leHQpKSB7XG5cdFx0XHRuZXh0W2tleV0gPSBudWxsO1xuXHRcdH1cblx0fVxuXG5cdGlmIChjc3NfaGFzaCAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0bmV4dC5jbGFzcyA9IG5leHQuY2xhc3MgPyBuZXh0LmNsYXNzICsgJyAnICsgY3NzX2hhc2ggOiBjc3NfaGFzaDtcblx0fVxuXG5cdHZhciBzZXR0ZXJzID0gZ2V0X3NldHRlcnMoZWxlbWVudCk7XG5cblx0Ly8gQHRzLWV4cGVjdC1lcnJvclxuXHR2YXIgYXR0cmlidXRlcyA9IC8qKiBAdHlwZSB7UmVjb3JkPHN0cmluZywgdW5rbm93bj59ICoqLyAoZWxlbWVudC5fX2F0dHJpYnV0ZXMgPz89IHt9KTtcblxuXHQvLyBzaW5jZSBrZXkgaXMgY2FwdHVyZWQgd2UgdXNlIGNvbnN0XG5cdGZvciAoY29uc3Qga2V5IGluIG5leHQpIHtcblx0XHQvLyBsZXQgaW5zdGVhZCBvZiB2YXIgYmVjYXVzZSByZWZlcmVuY2VkIGluIGEgY2xvc3VyZVxuXHRcdGxldCB2YWx1ZSA9IG5leHRba2V5XTtcblxuXHRcdC8vIFVwIGhlcmUgYmVjYXVzZSB3ZSB3YW50IHRvIGRvIHRoaXMgZm9yIHRoZSBpbml0aWFsIHZhbHVlLCB0b28sIGV2ZW4gaWYgaXQncyB1bmRlZmluZWQsXG5cdFx0Ly8gYW5kIHRoaXMgd291bGRuJ3QgYmUgcmVhY2hlZCBpbiBjYXNlIG9mIHVuZGVmaW5lZCBiZWNhdXNlIG9mIHRoZSBlcXVhbGl0eSBjaGVjayBiZWxvd1xuXHRcdGlmIChpc19vcHRpb25fZWxlbWVudCAmJiBrZXkgPT09ICd2YWx1ZScgJiYgdmFsdWUgPT0gbnVsbCkge1xuXHRcdFx0Ly8gVGhlIDxvcHRpb24+IGVsZW1lbnQgaXMgYSBzcGVjaWFsIGNhc2UgYmVjYXVzZSByZW1vdmluZyB0aGUgdmFsdWUgYXR0cmlidXRlIG1lYW5zXG5cdFx0XHQvLyB0aGUgdmFsdWUgaXMgc2V0IHRvIHRoZSB0ZXh0IGNvbnRlbnQgb2YgdGhlIG9wdGlvbiBlbGVtZW50LCBhbmQgc2V0dGluZyB0aGUgdmFsdWVcblx0XHRcdC8vIHRvIG51bGwgb3IgdW5kZWZpbmVkIG1lYW5zIHRoZSB2YWx1ZSBpcyBzZXQgdG8gdGhlIHN0cmluZyBcIm51bGxcIiBvciBcInVuZGVmaW5lZFwiLlxuXHRcdFx0Ly8gVG8gYWxpZ24gd2l0aCBob3cgd2UgaGFuZGxlIHRoaXMgY2FzZSBpbiBub24tc3ByZWFkLXNjZW5hcmlvcywgdGhpcyBsb2dpYyBpcyBuZWVkZWQuXG5cdFx0XHQvLyBUaGVyZSdzIGEgc3VwZXItZWRnZS1jYXNlIGJ1ZyBoZXJlIHRoYXQgaXMgbGVmdCBpbiBpbiBmYXZvciBvZiBzbWFsbGVyIGNvZGUgc2l6ZTpcblx0XHRcdC8vIEJlY2F1c2Ugb2YgdGhlIFwic2V0IG1pc3NpbmcgcHJvcHMgdG8gbnVsbFwiIGxvZ2ljIGFib3ZlLCB3ZSBjYW4ndCBkaWZmZXJlbnRpYXRlXG5cdFx0XHQvLyBiZXR3ZWVuIGEgbWlzc2luZyB2YWx1ZSBhbmQgYW4gZXhwbGljaXRseSBzZXQgdmFsdWUgb2YgbnVsbCBvciB1bmRlZmluZWQuIFRoYXQgbWVhbnNcblx0XHRcdC8vIHRoYXQgb25jZSBzZXQsIHRoZSB2YWx1ZSBhdHRyaWJ1dGUgb2YgYW4gPG9wdGlvbj4gZWxlbWVudCBjYW4ndCBiZSByZW1vdmVkLiBUaGlzIGlzXG5cdFx0XHQvLyBhIHZlcnkgcmFyZSBlZGdlIGNhc2UsIGFuZCByZW1vdmluZyB0aGUgYXR0cmlidXRlIGFsdG9nZXRoZXIgaXNuJ3QgcG9zc2libGUgZWl0aGVyXG5cdFx0XHQvLyBmb3IgdGhlIDxvcHRpb24gdmFsdWU9e3VuZGVmaW5lZH0+IGNhc2UsIHNvIHdlJ3JlIG5vdCBsb3NpbmcgYW55IGZ1bmN0aW9uYWxpdHkgaGVyZS5cblx0XHRcdC8vIEB0cy1pZ25vcmVcblx0XHRcdGVsZW1lbnQudmFsdWUgPSBlbGVtZW50Ll9fdmFsdWUgPSAnJztcblx0XHRcdGN1cnJlbnRba2V5XSA9IHZhbHVlO1xuXHRcdFx0Y29udGludWU7XG5cdFx0fVxuXG5cdFx0dmFyIHByZXZfdmFsdWUgPSBjdXJyZW50W2tleV07XG5cdFx0aWYgKHZhbHVlID09PSBwcmV2X3ZhbHVlKSBjb250aW51ZTtcblxuXHRcdGN1cnJlbnRba2V5XSA9IHZhbHVlO1xuXG5cdFx0dmFyIHByZWZpeCA9IGtleVswXSArIGtleVsxXTsgLy8gdGhpcyBpcyBmYXN0ZXIgdGhhbiBrZXkuc2xpY2UoMCwgMilcblx0XHRpZiAocHJlZml4ID09PSAnJCQnKSBjb250aW51ZTtcblxuXHRcdGlmIChwcmVmaXggPT09ICdvbicpIHtcblx0XHRcdC8qKiBAdHlwZSB7eyBjYXB0dXJlPzogdHJ1ZSB9fSAqL1xuXHRcdFx0Y29uc3Qgb3B0cyA9IHt9O1xuXHRcdFx0Y29uc3QgZXZlbnRfaGFuZGxlX2tleSA9ICckJCcgKyBrZXk7XG5cdFx0XHRsZXQgZXZlbnRfbmFtZSA9IGtleS5zbGljZSgyKTtcblx0XHRcdHZhciBkZWxlZ2F0ZWQgPSBpc19kZWxlZ2F0ZWQoZXZlbnRfbmFtZSk7XG5cblx0XHRcdGlmIChpc19jYXB0dXJlX2V2ZW50KGV2ZW50X25hbWUpKSB7XG5cdFx0XHRcdGV2ZW50X25hbWUgPSBldmVudF9uYW1lLnNsaWNlKDAsIC03KTtcblx0XHRcdFx0b3B0cy5jYXB0dXJlID0gdHJ1ZTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCFkZWxlZ2F0ZWQgJiYgcHJldl92YWx1ZSkge1xuXHRcdFx0XHQvLyBMaXN0ZW5pbmcgdG8gc2FtZSBldmVudCBidXQgZGlmZmVyZW50IGhhbmRsZXIgLT4gb3VyIGhhbmRsZSBmdW5jdGlvbiBiZWxvdyB0YWtlcyBjYXJlIG9mIHRoaXNcblx0XHRcdFx0Ly8gSWYgd2Ugd2VyZSB0byByZW1vdmUgYW5kIGFkZCBsaXN0ZW5lcnMgaW4gdGhpcyBjYXNlLCBpdCBjb3VsZCBoYXBwZW4gdGhhdCB0aGUgZXZlbnQgaXMgXCJzd2FsbG93ZWRcIlxuXHRcdFx0XHQvLyAodGhlIGJyb3dzZXIgc2VlbXMgdG8gbm90IGtub3cgeWV0IHRoYXQgYSBuZXcgb25lIGV4aXN0cyBub3cpIGFuZCBkb2Vzbid0IHJlYWNoIHRoZSBoYW5kbGVyXG5cdFx0XHRcdC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9zdmVsdGVqcy9zdmVsdGUvaXNzdWVzLzExOTAzXG5cdFx0XHRcdGlmICh2YWx1ZSAhPSBudWxsKSBjb250aW51ZTtcblxuXHRcdFx0XHRlbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnRfbmFtZSwgY3VycmVudFtldmVudF9oYW5kbGVfa2V5XSwgb3B0cyk7XG5cdFx0XHRcdGN1cnJlbnRbZXZlbnRfaGFuZGxlX2tleV0gPSBudWxsO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAodmFsdWUgIT0gbnVsbCkge1xuXHRcdFx0XHRpZiAoIWRlbGVnYXRlZCkge1xuXHRcdFx0XHRcdC8qKlxuXHRcdFx0XHRcdCAqIEB0aGlzIHthbnl9XG5cdFx0XHRcdFx0ICogQHBhcmFtIHtFdmVudH0gZXZ0XG5cdFx0XHRcdFx0ICovXG5cdFx0XHRcdFx0ZnVuY3Rpb24gaGFuZGxlKGV2dCkge1xuXHRcdFx0XHRcdFx0Y3VycmVudFtrZXldLmNhbGwodGhpcywgZXZ0KTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRjdXJyZW50W2V2ZW50X2hhbmRsZV9rZXldID0gY3JlYXRlX2V2ZW50KGV2ZW50X25hbWUsIGVsZW1lbnQsIGhhbmRsZSwgb3B0cyk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Ly8gQHRzLWlnbm9yZVxuXHRcdFx0XHRcdGVsZW1lbnRbYF9fJHtldmVudF9uYW1lfWBdID0gdmFsdWU7XG5cdFx0XHRcdFx0ZGVsZWdhdGUoW2V2ZW50X25hbWVdKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIGlmIChkZWxlZ2F0ZWQpIHtcblx0XHRcdFx0Ly8gQHRzLWlnbm9yZVxuXHRcdFx0XHRlbGVtZW50W2BfXyR7ZXZlbnRfbmFtZX1gXSA9IHVuZGVmaW5lZDtcblx0XHRcdH1cblx0XHR9IGVsc2UgaWYgKGtleSA9PT0gJ3N0eWxlJyAmJiB2YWx1ZSAhPSBudWxsKSB7XG5cdFx0XHRlbGVtZW50LnN0eWxlLmNzc1RleHQgPSB2YWx1ZSArICcnO1xuXHRcdH0gZWxzZSBpZiAoa2V5ID09PSAnYXV0b2ZvY3VzJykge1xuXHRcdFx0YXV0b2ZvY3VzKC8qKiBAdHlwZSB7SFRNTEVsZW1lbnR9ICovIChlbGVtZW50KSwgQm9vbGVhbih2YWx1ZSkpO1xuXHRcdH0gZWxzZSBpZiAoa2V5ID09PSAnX192YWx1ZScgfHwgKGtleSA9PT0gJ3ZhbHVlJyAmJiB2YWx1ZSAhPSBudWxsKSkge1xuXHRcdFx0Ly8gQHRzLWlnbm9yZVxuXHRcdFx0ZWxlbWVudC52YWx1ZSA9IGVsZW1lbnRba2V5XSA9IGVsZW1lbnQuX192YWx1ZSA9IHZhbHVlO1xuXHRcdH0gZWxzZSBpZiAoa2V5ID09PSAnc2VsZWN0ZWQnICYmIGlzX29wdGlvbl9lbGVtZW50KSB7XG5cdFx0XHRzZXRfc2VsZWN0ZWQoLyoqIEB0eXBlIHtIVE1MT3B0aW9uRWxlbWVudH0gKi8gKGVsZW1lbnQpLCB2YWx1ZSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHZhciBuYW1lID0ga2V5O1xuXHRcdFx0aWYgKCFwcmVzZXJ2ZV9hdHRyaWJ1dGVfY2FzZSkge1xuXHRcdFx0XHRuYW1lID0gbm9ybWFsaXplX2F0dHJpYnV0ZShuYW1lKTtcblx0XHRcdH1cblxuXHRcdFx0dmFyIGlzX2RlZmF1bHQgPSBuYW1lID09PSAnZGVmYXVsdFZhbHVlJyB8fCBuYW1lID09PSAnZGVmYXVsdENoZWNrZWQnO1xuXG5cdFx0XHRpZiAodmFsdWUgPT0gbnVsbCAmJiAhaXNfY3VzdG9tX2VsZW1lbnQgJiYgIWlzX2RlZmF1bHQpIHtcblx0XHRcdFx0YXR0cmlidXRlc1trZXldID0gbnVsbDtcblxuXHRcdFx0XHRpZiAobmFtZSA9PT0gJ3ZhbHVlJyB8fCBuYW1lID09PSAnY2hlY2tlZCcpIHtcblx0XHRcdFx0XHQvLyByZW1vdmluZyB2YWx1ZS9jaGVja2VkIGFsc28gcmVtb3ZlcyBkZWZhdWx0VmFsdWUvZGVmYXVsdENoZWNrZWQg4oCUIHByZXNlcnZlXG5cdFx0XHRcdFx0bGV0IGlucHV0ID0gLyoqIEB0eXBlIHtIVE1MSW5wdXRFbGVtZW50fSAqLyAoZWxlbWVudCk7XG5cblx0XHRcdFx0XHRpZiAobmFtZSA9PT0gJ3ZhbHVlJykge1xuXHRcdFx0XHRcdFx0bGV0IHByZXYgPSBpbnB1dC5kZWZhdWx0VmFsdWU7XG5cdFx0XHRcdFx0XHRpbnB1dC5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG5cdFx0XHRcdFx0XHRpbnB1dC5kZWZhdWx0VmFsdWUgPSBwcmV2O1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRsZXQgcHJldiA9IGlucHV0LmRlZmF1bHRDaGVja2VkO1xuXHRcdFx0XHRcdFx0aW5wdXQucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xuXHRcdFx0XHRcdFx0aW5wdXQuZGVmYXVsdENoZWNrZWQgPSBwcmV2O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShrZXkpO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2UgaWYgKFxuXHRcdFx0XHRpc19kZWZhdWx0IHx8XG5cdFx0XHRcdChzZXR0ZXJzLmluY2x1ZGVzKG5hbWUpICYmIChpc19jdXN0b21fZWxlbWVudCB8fCB0eXBlb2YgdmFsdWUgIT09ICdzdHJpbmcnKSlcblx0XHRcdCkge1xuXHRcdFx0XHQvLyBAdHMtaWdub3JlXG5cdFx0XHRcdGVsZW1lbnRbbmFtZV0gPSB2YWx1ZTtcblx0XHRcdH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlICE9PSAnZnVuY3Rpb24nKSB7XG5cdFx0XHRcdGlmIChoeWRyYXRpbmcgJiYgKG5hbWUgPT09ICdzcmMnIHx8IG5hbWUgPT09ICdocmVmJyB8fCBuYW1lID09PSAnc3Jjc2V0JykpIHtcblx0XHRcdFx0XHRpZiAoIXNraXBfd2FybmluZykgY2hlY2tfc3JjX2luX2Rldl9oeWRyYXRpb24oZWxlbWVudCwgbmFtZSwgdmFsdWUgPz8gJycpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHNldF9hdHRyaWJ1dGUoZWxlbWVudCwgbmFtZSwgdmFsdWUpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGlmIChrZXkgPT09ICdzdHlsZScgJiYgJ19fc3R5bGVzJyBpbiBlbGVtZW50KSB7XG5cdFx0XHQvLyByZXNldCBzdHlsZXMgdG8gZm9yY2Ugc3R5bGU6IGRpcmVjdGl2ZSB0byB1cGRhdGVcblx0XHRcdGVsZW1lbnQuX19zdHlsZXMgPSB7fTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gY3VycmVudDtcbn1cblxuLyoqIEB0eXBlIHtNYXA8c3RyaW5nLCBzdHJpbmdbXT59ICovXG52YXIgc2V0dGVyc19jYWNoZSA9IG5ldyBNYXAoKTtcblxuLyoqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudCAqL1xuZnVuY3Rpb24gZ2V0X3NldHRlcnMoZWxlbWVudCkge1xuXHR2YXIgc2V0dGVycyA9IHNldHRlcnNfY2FjaGUuZ2V0KGVsZW1lbnQubm9kZU5hbWUpO1xuXHRpZiAoc2V0dGVycykgcmV0dXJuIHNldHRlcnM7XG5cdHNldHRlcnNfY2FjaGUuc2V0KGVsZW1lbnQubm9kZU5hbWUsIChzZXR0ZXJzID0gW10pKTtcblxuXHR2YXIgZGVzY3JpcHRvcnM7XG5cdHZhciBwcm90byA9IGVsZW1lbnQ7IC8vIEluIHRoZSBjYXNlIG9mIGN1c3RvbSBlbGVtZW50cyB0aGVyZSBtaWdodCBiZSBzZXR0ZXJzIG9uIHRoZSBpbnN0YW5jZVxuXHR2YXIgZWxlbWVudF9wcm90byA9IEVsZW1lbnQucHJvdG90eXBlO1xuXG5cdC8vIFN0b3AgYXQgRWxlbWVudCwgZnJvbSB0aGVyZSBvbiB0aGVyZSdzIG9ubHkgdW5uZWNlc3Nhcnkgc2V0dGVycyB3ZSdyZSBub3QgaW50ZXJlc3RlZCBpblxuXHQvLyBEbyBub3QgdXNlIGNvbnRydWN0b3IubmFtZSBoZXJlIGFzIHRoYXQncyB1bnJlbGlhYmxlIGluIHNvbWUgYnJvd3NlciBlbnZpcm9ubWVudHNcblx0d2hpbGUgKGVsZW1lbnRfcHJvdG8gIT09IHByb3RvKSB7XG5cdFx0ZGVzY3JpcHRvcnMgPSBnZXRfZGVzY3JpcHRvcnMocHJvdG8pO1xuXG5cdFx0Zm9yICh2YXIga2V5IGluIGRlc2NyaXB0b3JzKSB7XG5cdFx0XHRpZiAoZGVzY3JpcHRvcnNba2V5XS5zZXQpIHtcblx0XHRcdFx0c2V0dGVycy5wdXNoKGtleSk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cHJvdG8gPSBnZXRfcHJvdG90eXBlX29mKHByb3RvKTtcblx0fVxuXG5cdHJldHVybiBzZXR0ZXJzO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7YW55fSBlbGVtZW50XG4gKiBAcGFyYW0ge3N0cmluZ30gYXR0cmlidXRlXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqL1xuZnVuY3Rpb24gY2hlY2tfc3JjX2luX2Rldl9oeWRyYXRpb24oZWxlbWVudCwgYXR0cmlidXRlLCB2YWx1ZSkge1xuXHRpZiAoIURFVikgcmV0dXJuO1xuXHRpZiAoYXR0cmlidXRlID09PSAnc3Jjc2V0JyAmJiBzcmNzZXRfdXJsX2VxdWFsKGVsZW1lbnQsIHZhbHVlKSkgcmV0dXJuO1xuXHRpZiAoc3JjX3VybF9lcXVhbChlbGVtZW50LmdldEF0dHJpYnV0ZShhdHRyaWJ1dGUpID8/ICcnLCB2YWx1ZSkpIHJldHVybjtcblxuXHR3Lmh5ZHJhdGlvbl9hdHRyaWJ1dGVfY2hhbmdlZChcblx0XHRhdHRyaWJ1dGUsXG5cdFx0ZWxlbWVudC5vdXRlckhUTUwucmVwbGFjZShlbGVtZW50LmlubmVySFRNTCwgZWxlbWVudC5pbm5lckhUTUwgJiYgJy4uLicpLFxuXHRcdFN0cmluZyh2YWx1ZSlcblx0KTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gZWxlbWVudF9zcmNcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmxcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBzcmNfdXJsX2VxdWFsKGVsZW1lbnRfc3JjLCB1cmwpIHtcblx0aWYgKGVsZW1lbnRfc3JjID09PSB1cmwpIHJldHVybiB0cnVlO1xuXHRyZXR1cm4gbmV3IFVSTChlbGVtZW50X3NyYywgZG9jdW1lbnQuYmFzZVVSSSkuaHJlZiA9PT0gbmV3IFVSTCh1cmwsIGRvY3VtZW50LmJhc2VVUkkpLmhyZWY7XG59XG5cbi8qKiBAcGFyYW0ge3N0cmluZ30gc3Jjc2V0ICovXG5mdW5jdGlvbiBzcGxpdF9zcmNzZXQoc3Jjc2V0KSB7XG5cdHJldHVybiBzcmNzZXQuc3BsaXQoJywnKS5tYXAoKHNyYykgPT4gc3JjLnRyaW0oKS5zcGxpdCgnICcpLmZpbHRlcihCb29sZWFuKSk7XG59XG5cbi8qKlxuICogQHBhcmFtIHtIVE1MU291cmNlRWxlbWVudCB8IEhUTUxJbWFnZUVsZW1lbnR9IGVsZW1lbnRcbiAqIEBwYXJhbSB7c3RyaW5nfSBzcmNzZXRcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBzcmNzZXRfdXJsX2VxdWFsKGVsZW1lbnQsIHNyY3NldCkge1xuXHR2YXIgZWxlbWVudF91cmxzID0gc3BsaXRfc3Jjc2V0KGVsZW1lbnQuc3Jjc2V0KTtcblx0dmFyIHVybHMgPSBzcGxpdF9zcmNzZXQoc3Jjc2V0KTtcblxuXHRyZXR1cm4gKFxuXHRcdHVybHMubGVuZ3RoID09PSBlbGVtZW50X3VybHMubGVuZ3RoICYmXG5cdFx0dXJscy5ldmVyeShcblx0XHRcdChbdXJsLCB3aWR0aF0sIGkpID0+XG5cdFx0XHRcdHdpZHRoID09PSBlbGVtZW50X3VybHNbaV1bMV0gJiZcblx0XHRcdFx0Ly8gV2UgbmVlZCB0byB0ZXN0IGJvdGggd2F5cyBiZWNhdXNlIFZpdGUgd2lsbCBjcmVhdGUgYW4gYSBmdWxsIFVSTCB3aXRoXG5cdFx0XHRcdC8vIGBuZXcgVVJMKGFzc2V0LCBpbXBvcnQubWV0YS51cmwpLmhyZWZgIGZvciB0aGUgY2xpZW50IHdoZW4gYGJhc2U6ICcuLydgLCBhbmQgdGhlXG5cdFx0XHRcdC8vIHJlbGF0aXZlIFVSTHMgaW5zaWRlIHNyY3NldCBhcmUgbm90IGF1dG9tYXRpY2FsbHkgcmVzb2x2ZWQgdG8gYWJzb2x1dGUgVVJMcyBieVxuXHRcdFx0XHQvLyBicm93c2VycyAoaW4gY29udHJhc3QgdG8gaW1nLnNyYykuIFRoaXMgbWVhbnMgYm90aCBTU1IgYW5kIERPTSBjb2RlIGNvdWxkXG5cdFx0XHRcdC8vIGNvbnRhaW4gcmVsYXRpdmUgb3IgYWJzb2x1dGUgVVJMcy5cblx0XHRcdFx0KHNyY191cmxfZXF1YWwoZWxlbWVudF91cmxzW2ldWzBdLCB1cmwpIHx8IHNyY191cmxfZXF1YWwodXJsLCBlbGVtZW50X3VybHNbaV1bMF0pKVxuXHRcdClcblx0KTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0hUTUxJbWFnZUVsZW1lbnR9IGVsZW1lbnRcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5leHBvcnQgZnVuY3Rpb24gaGFuZGxlX2xhenlfaW1nKGVsZW1lbnQpIHtcblx0Ly8gSWYgd2UncmUgdXNpbmcgYW4gaW1hZ2UgdGhhdCBoYXMgYSBsYXp5IGxvYWRpbmcgYXR0cmlidXRlLCB3ZSBuZWVkIHRvIGFwcGx5XG5cdC8vIHRoZSBsb2FkaW5nIGFuZCBzcmMgYWZ0ZXIgdGhlIGltZyBlbGVtZW50IGhhcyBiZWVuIGFwcGVuZGVkIHRvIHRoZSBkb2N1bWVudC5cblx0Ly8gT3RoZXJ3aXNlIHRoZSBsYXp5IGJlaGF2aW91ciB3aWxsIG5vdCB3b3JrIGR1ZSB0byBvdXIgY2xvbmVOb2RlIGhldXJpc3RpYyBmb3Jcblx0Ly8gdGVtcGxhdGVzLlxuXHRpZiAoIWh5ZHJhdGluZyAmJiBlbGVtZW50LmxvYWRpbmcgPT09ICdsYXp5Jykge1xuXHRcdHZhciBzcmMgPSBlbGVtZW50LnNyYztcblx0XHQvLyBAdHMtZXhwZWN0LWVycm9yXG5cdFx0ZWxlbWVudFtMT0FESU5HX0FUVFJfU1lNQk9MXSA9IG51bGw7XG5cdFx0ZWxlbWVudC5sb2FkaW5nID0gJ2VhZ2VyJztcblx0XHRlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSgnc3JjJyk7XG5cdFx0cmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcblx0XHRcdC8vIEB0cy1leHBlY3QtZXJyb3Jcblx0XHRcdGlmIChlbGVtZW50W0xPQURJTkdfQVRUUl9TWU1CT0xdICE9PSAnZWFnZXInKSB7XG5cdFx0XHRcdGVsZW1lbnQubG9hZGluZyA9ICdsYXp5Jztcblx0XHRcdH1cblx0XHRcdGVsZW1lbnQuc3JjID0gc3JjO1xuXHRcdH0pO1xuXHR9XG59XG4iLCJpbXBvcnQgeyBoeWRyYXRpbmcgfSBmcm9tICcuLi9oeWRyYXRpb24uanMnO1xuXG4vKipcbiAqIEBwYXJhbSB7U1ZHRWxlbWVudH0gZG9tXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5leHBvcnQgZnVuY3Rpb24gc2V0X3N2Z19jbGFzcyhkb20sIHZhbHVlKSB7XG5cdC8vIEB0cy1leHBlY3QtZXJyb3IgbmVlZCB0byBhZGQgX19jbGFzc05hbWUgdG8gcGF0Y2hlZCBwcm90b3R5cGVcblx0dmFyIHByZXZfY2xhc3NfbmFtZSA9IGRvbS5fX2NsYXNzTmFtZTtcblx0dmFyIG5leHRfY2xhc3NfbmFtZSA9IHRvX2NsYXNzKHZhbHVlKTtcblxuXHRpZiAoaHlkcmF0aW5nICYmIGRvbS5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykgPT09IG5leHRfY2xhc3NfbmFtZSkge1xuXHRcdC8vIEluIGNhc2Ugb2YgaHlkcmF0aW9uIGRvbid0IHJlc2V0IHRoZSBjbGFzcyBhcyBpdCdzIGFscmVhZHkgY29ycmVjdC5cblx0XHQvLyBAdHMtZXhwZWN0LWVycm9yIG5lZWQgdG8gYWRkIF9fY2xhc3NOYW1lIHRvIHBhdGNoZWQgcHJvdG90eXBlXG5cdFx0ZG9tLl9fY2xhc3NOYW1lID0gbmV4dF9jbGFzc19uYW1lO1xuXHR9IGVsc2UgaWYgKFxuXHRcdHByZXZfY2xhc3NfbmFtZSAhPT0gbmV4dF9jbGFzc19uYW1lIHx8XG5cdFx0KGh5ZHJhdGluZyAmJiBkb20uZ2V0QXR0cmlidXRlKCdjbGFzcycpICE9PSBuZXh0X2NsYXNzX25hbWUpXG5cdCkge1xuXHRcdGlmIChuZXh0X2NsYXNzX25hbWUgPT09ICcnKSB7XG5cdFx0XHRkb20ucmVtb3ZlQXR0cmlidXRlKCdjbGFzcycpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRkb20uc2V0QXR0cmlidXRlKCdjbGFzcycsIG5leHRfY2xhc3NfbmFtZSk7XG5cdFx0fVxuXG5cdFx0Ly8gQHRzLWV4cGVjdC1lcnJvciBuZWVkIHRvIGFkZCBfX2NsYXNzTmFtZSB0byBwYXRjaGVkIHByb3RvdHlwZVxuXHRcdGRvbS5fX2NsYXNzTmFtZSA9IG5leHRfY2xhc3NfbmFtZTtcblx0fVxufVxuXG4vKipcbiAqIEBwYXJhbSB7TWF0aE1MRWxlbWVudH0gZG9tXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5leHBvcnQgZnVuY3Rpb24gc2V0X21hdGhtbF9jbGFzcyhkb20sIHZhbHVlKSB7XG5cdC8vIEB0cy1leHBlY3QtZXJyb3IgbmVlZCB0byBhZGQgX19jbGFzc05hbWUgdG8gcGF0Y2hlZCBwcm90b3R5cGVcblx0dmFyIHByZXZfY2xhc3NfbmFtZSA9IGRvbS5fX2NsYXNzTmFtZTtcblx0dmFyIG5leHRfY2xhc3NfbmFtZSA9IHRvX2NsYXNzKHZhbHVlKTtcblxuXHRpZiAoaHlkcmF0aW5nICYmIGRvbS5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykgPT09IG5leHRfY2xhc3NfbmFtZSkge1xuXHRcdC8vIEluIGNhc2Ugb2YgaHlkcmF0aW9uIGRvbid0IHJlc2V0IHRoZSBjbGFzcyBhcyBpdCdzIGFscmVhZHkgY29ycmVjdC5cblx0XHQvLyBAdHMtZXhwZWN0LWVycm9yIG5lZWQgdG8gYWRkIF9fY2xhc3NOYW1lIHRvIHBhdGNoZWQgcHJvdG90eXBlXG5cdFx0ZG9tLl9fY2xhc3NOYW1lID0gbmV4dF9jbGFzc19uYW1lO1xuXHR9IGVsc2UgaWYgKFxuXHRcdHByZXZfY2xhc3NfbmFtZSAhPT0gbmV4dF9jbGFzc19uYW1lIHx8XG5cdFx0KGh5ZHJhdGluZyAmJiBkb20uZ2V0QXR0cmlidXRlKCdjbGFzcycpICE9PSBuZXh0X2NsYXNzX25hbWUpXG5cdCkge1xuXHRcdGlmIChuZXh0X2NsYXNzX25hbWUgPT09ICcnKSB7XG5cdFx0XHRkb20ucmVtb3ZlQXR0cmlidXRlKCdjbGFzcycpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRkb20uc2V0QXR0cmlidXRlKCdjbGFzcycsIG5leHRfY2xhc3NfbmFtZSk7XG5cdFx0fVxuXG5cdFx0Ly8gQHRzLWV4cGVjdC1lcnJvciBuZWVkIHRvIGFkZCBfX2NsYXNzTmFtZSB0byBwYXRjaGVkIHByb3RvdHlwZVxuXHRcdGRvbS5fX2NsYXNzTmFtZSA9IG5leHRfY2xhc3NfbmFtZTtcblx0fVxufVxuXG4vKipcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGRvbVxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldF9jbGFzcyhkb20sIHZhbHVlKSB7XG5cdC8vIEB0cy1leHBlY3QtZXJyb3IgbmVlZCB0byBhZGQgX19jbGFzc05hbWUgdG8gcGF0Y2hlZCBwcm90b3R5cGVcblx0dmFyIHByZXZfY2xhc3NfbmFtZSA9IGRvbS5fX2NsYXNzTmFtZTtcblx0dmFyIG5leHRfY2xhc3NfbmFtZSA9IHRvX2NsYXNzKHZhbHVlKTtcblxuXHRpZiAoaHlkcmF0aW5nICYmIGRvbS5jbGFzc05hbWUgPT09IG5leHRfY2xhc3NfbmFtZSkge1xuXHRcdC8vIEluIGNhc2Ugb2YgaHlkcmF0aW9uIGRvbid0IHJlc2V0IHRoZSBjbGFzcyBhcyBpdCdzIGFscmVhZHkgY29ycmVjdC5cblx0XHQvLyBAdHMtZXhwZWN0LWVycm9yIG5lZWQgdG8gYWRkIF9fY2xhc3NOYW1lIHRvIHBhdGNoZWQgcHJvdG90eXBlXG5cdFx0ZG9tLl9fY2xhc3NOYW1lID0gbmV4dF9jbGFzc19uYW1lO1xuXHR9IGVsc2UgaWYgKFxuXHRcdHByZXZfY2xhc3NfbmFtZSAhPT0gbmV4dF9jbGFzc19uYW1lIHx8XG5cdFx0KGh5ZHJhdGluZyAmJiBkb20uY2xhc3NOYW1lICE9PSBuZXh0X2NsYXNzX25hbWUpXG5cdCkge1xuXHRcdC8vIFJlbW92aW5nIHRoZSBhdHRyaWJ1dGUgd2hlbiB0aGUgdmFsdWUgaXMgb25seSBhbiBlbXB0eSBzdHJpbmcgY2F1c2VzXG5cdFx0Ly8gcGVmb3JtYW5jZSBpc3N1ZXMgdnMgc2ltcGx5IG1ha2luZyB0aGUgY2xhc3NOYW1lIGFuIGVtcHR5IHN0cmluZy4gU29cblx0XHQvLyB3ZSBzaG91bGQgb25seSByZW1vdmUgdGhlIGNsYXNzIGlmIHRoZSB0aGUgdmFsdWUgaXMgbnVsbGlzaC5cblx0XHRpZiAodmFsdWUgPT0gbnVsbCkge1xuXHRcdFx0ZG9tLnJlbW92ZUF0dHJpYnV0ZSgnY2xhc3MnKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZG9tLmNsYXNzTmFtZSA9IG5leHRfY2xhc3NfbmFtZTtcblx0XHR9XG5cblx0XHQvLyBAdHMtZXhwZWN0LWVycm9yIG5lZWQgdG8gYWRkIF9fY2xhc3NOYW1lIHRvIHBhdGNoZWQgcHJvdG90eXBlXG5cdFx0ZG9tLl9fY2xhc3NOYW1lID0gbmV4dF9jbGFzc19uYW1lO1xuXHR9XG59XG5cbi8qKlxuICogQHRlbXBsYXRlIFZcbiAqIEBwYXJhbSB7Vn0gdmFsdWVcbiAqIEByZXR1cm5zIHtzdHJpbmcgfCBWfVxuICovXG5mdW5jdGlvbiB0b19jbGFzcyh2YWx1ZSkge1xuXHRyZXR1cm4gdmFsdWUgPT0gbnVsbCA/ICcnIDogdmFsdWU7XG59XG5cbi8qKlxuICogQHBhcmFtIHtFbGVtZW50fSBkb21cbiAqIEBwYXJhbSB7c3RyaW5nfSBjbGFzc19uYW1lXG4gKiBAcGFyYW0ge2Jvb2xlYW59IHZhbHVlXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRvZ2dsZV9jbGFzcyhkb20sIGNsYXNzX25hbWUsIHZhbHVlKSB7XG5cdGlmICh2YWx1ZSkge1xuXHRcdGlmIChkb20uY2xhc3NMaXN0LmNvbnRhaW5zKGNsYXNzX25hbWUpKSByZXR1cm47XG5cdFx0ZG9tLmNsYXNzTGlzdC5hZGQoY2xhc3NfbmFtZSk7XG5cdH0gZWxzZSB7XG5cdFx0aWYgKCFkb20uY2xhc3NMaXN0LmNvbnRhaW5zKGNsYXNzX25hbWUpKSByZXR1cm47XG5cdFx0ZG9tLmNsYXNzTGlzdC5yZW1vdmUoY2xhc3NfbmFtZSk7XG5cdH1cbn1cbiIsIi8qKiBAaW1wb3J0IHsgUmFmIH0gZnJvbSAnI2NsaWVudCcgKi9cbmltcG9ydCB7IG5vb3AgfSBmcm9tICcuLi9zaGFyZWQvdXRpbHMuanMnO1xuXG5pbXBvcnQgeyBCUk9XU0VSIH0gZnJvbSAnZXNtLWVudic7XG5cbmNvbnN0IG5vdyA9IEJST1dTRVIgPyAoKSA9PiBwZXJmb3JtYW5jZS5ub3coKSA6ICgpID0+IERhdGUubm93KCk7XG5cbi8qKiBAdHlwZSB7UmFmfSAqL1xuZXhwb3J0IGNvbnN0IHJhZiA9IHtcblx0Ly8gZG9uJ3QgYWNjZXNzIHJlcXVlc3RBbmltYXRpb25GcmFtZSBlYWdlcmx5IG91dHNpZGUgbWV0aG9kXG5cdC8vIHRoaXMgYWxsb3dzIGJhc2ljIHRlc3Rpbmcgb2YgdXNlciBjb2RlIHdpdGhvdXQgSlNET01cblx0Ly8gYnVuZGVyIHdpbGwgZXZhbCBhbmQgcmVtb3ZlIHRlcm5hcnkgd2hlbiB0aGUgdXNlcidzIGFwcCBpcyBidWlsdFxuXHR0aWNrOiAvKiogQHBhcmFtIHthbnl9IF8gKi8gKF8pID0+IChCUk9XU0VSID8gcmVxdWVzdEFuaW1hdGlvbkZyYW1lIDogbm9vcCkoXyksXG5cdG5vdzogKCkgPT4gbm93KCksXG5cdHRhc2tzOiBuZXcgU2V0KClcbn07XG4iLCIvKiogQGltcG9ydCB7IFRhc2tDYWxsYmFjaywgVGFzaywgVGFza0VudHJ5IH0gZnJvbSAnI2NsaWVudCcgKi9cbmltcG9ydCB7IHJhZiB9IGZyb20gJy4vdGltaW5nLmpzJztcblxuLy8gVE9ETyBtb3ZlIHRoaXMgaW50byB0aW1pbmcuanMgd2hlcmUgaXQgcHJvYmFibHkgYmVsb25nc1xuXG4vKipcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5mdW5jdGlvbiBydW5fdGFza3MoKSB7XG5cdC8vIHVzZSBgcmFmLm5vdygpYCBpbnN0ZWFkIG9mIHRoZSBgcmVxdWVzdEFuaW1hdGlvbkZyYW1lYCBjYWxsYmFjayBhcmd1bWVudCwgYmVjYXVzZVxuXHQvLyBvdGhlcndpc2UgdGhpbmdzIGNhbiBnZXQgd29ua3kgaHR0cHM6Ly9naXRodWIuY29tL3N2ZWx0ZWpzL3N2ZWx0ZS9wdWxsLzE0NTQxXG5cdGNvbnN0IG5vdyA9IHJhZi5ub3coKTtcblxuXHRyYWYudGFza3MuZm9yRWFjaCgodGFzaykgPT4ge1xuXHRcdGlmICghdGFzay5jKG5vdykpIHtcblx0XHRcdHJhZi50YXNrcy5kZWxldGUodGFzayk7XG5cdFx0XHR0YXNrLmYoKTtcblx0XHR9XG5cdH0pO1xuXG5cdGlmIChyYWYudGFza3Muc2l6ZSAhPT0gMCkge1xuXHRcdHJhZi50aWNrKHJ1bl90YXNrcyk7XG5cdH1cbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IHRhc2sgdGhhdCBydW5zIG9uIGVhY2ggcmFmIGZyYW1lXG4gKiB1bnRpbCBpdCByZXR1cm5zIGEgZmFsc3kgdmFsdWUgb3IgaXMgYWJvcnRlZFxuICogQHBhcmFtIHtUYXNrQ2FsbGJhY2t9IGNhbGxiYWNrXG4gKiBAcmV0dXJucyB7VGFza31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGxvb3AoY2FsbGJhY2spIHtcblx0LyoqIEB0eXBlIHtUYXNrRW50cnl9ICovXG5cdGxldCB0YXNrO1xuXG5cdGlmIChyYWYudGFza3Muc2l6ZSA9PT0gMCkge1xuXHRcdHJhZi50aWNrKHJ1bl90YXNrcyk7XG5cdH1cblxuXHRyZXR1cm4ge1xuXHRcdHByb21pc2U6IG5ldyBQcm9taXNlKChmdWxmaWxsKSA9PiB7XG5cdFx0XHRyYWYudGFza3MuYWRkKCh0YXNrID0geyBjOiBjYWxsYmFjaywgZjogZnVsZmlsbCB9KSk7XG5cdFx0fSksXG5cdFx0YWJvcnQoKSB7XG5cdFx0XHRyYWYudGFza3MuZGVsZXRlKHRhc2spO1xuXHRcdH1cblx0fTtcbn1cbiIsIi8qKiBAaW1wb3J0IHsgQW5pbWF0ZUZuLCBBbmltYXRpb24sIEFuaW1hdGlvbkNvbmZpZywgRWFjaEl0ZW0sIEVmZmVjdCwgVHJhbnNpdGlvbkZuLCBUcmFuc2l0aW9uTWFuYWdlciB9IGZyb20gJyNjbGllbnQnICovXG5pbXBvcnQgeyBub29wLCBpc19mdW5jdGlvbiB9IGZyb20gJy4uLy4uLy4uL3NoYXJlZC91dGlscy5qcyc7XG5pbXBvcnQgeyBlZmZlY3QgfSBmcm9tICcuLi8uLi9yZWFjdGl2aXR5L2VmZmVjdHMuanMnO1xuaW1wb3J0IHtcblx0YWN0aXZlX2VmZmVjdCxcblx0YWN0aXZlX3JlYWN0aW9uLFxuXHRzZXRfYWN0aXZlX2VmZmVjdCxcblx0c2V0X2FjdGl2ZV9yZWFjdGlvbixcblx0dW50cmFja1xufSBmcm9tICcuLi8uLi9ydW50aW1lLmpzJztcbmltcG9ydCB7IGxvb3AgfSBmcm9tICcuLi8uLi9sb29wLmpzJztcbmltcG9ydCB7IHNob3VsZF9pbnRybyB9IGZyb20gJy4uLy4uL3JlbmRlci5qcyc7XG5pbXBvcnQgeyBjdXJyZW50X2VhY2hfaXRlbSB9IGZyb20gJy4uL2Jsb2Nrcy9lYWNoLmpzJztcbmltcG9ydCB7IFRSQU5TSVRJT05fR0xPQkFMLCBUUkFOU0lUSU9OX0lOLCBUUkFOU0lUSU9OX09VVCB9IGZyb20gJy4uLy4uLy4uLy4uL2NvbnN0YW50cy5qcyc7XG5pbXBvcnQgeyBCTE9DS19FRkZFQ1QsIEVGRkVDVF9SQU4sIEVGRkVDVF9UUkFOU1BBUkVOVCB9IGZyb20gJy4uLy4uL2NvbnN0YW50cy5qcyc7XG5pbXBvcnQgeyBxdWV1ZV9taWNyb190YXNrIH0gZnJvbSAnLi4vdGFzay5qcyc7XG5cbi8qKlxuICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50XG4gKiBAcGFyYW0geydpbnRyb3N0YXJ0JyB8ICdpbnRyb2VuZCcgfCAnb3V0cm9zdGFydCcgfCAnb3V0cm9lbmQnfSB0eXBlXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZnVuY3Rpb24gZGlzcGF0Y2hfZXZlbnQoZWxlbWVudCwgdHlwZSkge1xuXHRlbGVtZW50LmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KHR5cGUpKTtcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBhIHByb3BlcnR5IHRvIHRoZSBjYW1lbC1jYXNlIGZvcm1hdCBleHBlY3RlZCBieSBFbGVtZW50LmFuaW1hdGUoKSwgS2V5ZnJhbWVFZmZlY3QoKSwgYW5kIEtleWZyYW1lRWZmZWN0LnNldEtleWZyYW1lcygpLlxuICogQHBhcmFtIHtzdHJpbmd9IHN0eWxlXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBjc3NfcHJvcGVydHlfdG9fY2FtZWxjYXNlKHN0eWxlKSB7XG5cdC8vIGluIGNvbXBsaWFuY2Ugd2l0aCBzcGVjXG5cdGlmIChzdHlsZSA9PT0gJ2Zsb2F0JykgcmV0dXJuICdjc3NGbG9hdCc7XG5cdGlmIChzdHlsZSA9PT0gJ29mZnNldCcpIHJldHVybiAnY3NzT2Zmc2V0JztcblxuXHQvLyBkbyBub3QgcmVuYW1lIGN1c3RvbSBAcHJvcGVydGllc1xuXHRpZiAoc3R5bGUuc3RhcnRzV2l0aCgnLS0nKSkgcmV0dXJuIHN0eWxlO1xuXG5cdGNvbnN0IHBhcnRzID0gc3R5bGUuc3BsaXQoJy0nKTtcblx0aWYgKHBhcnRzLmxlbmd0aCA9PT0gMSkgcmV0dXJuIHBhcnRzWzBdO1xuXHRyZXR1cm4gKFxuXHRcdHBhcnRzWzBdICtcblx0XHRwYXJ0c1xuXHRcdFx0LnNsaWNlKDEpXG5cdFx0XHQubWFwKC8qKiBAcGFyYW0ge2FueX0gd29yZCAqLyAod29yZCkgPT4gd29yZFswXS50b1VwcGVyQ2FzZSgpICsgd29yZC5zbGljZSgxKSlcblx0XHRcdC5qb2luKCcnKVxuXHQpO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBjc3NcbiAqIEByZXR1cm5zIHtLZXlmcmFtZX1cbiAqL1xuZnVuY3Rpb24gY3NzX3RvX2tleWZyYW1lKGNzcykge1xuXHQvKiogQHR5cGUge0tleWZyYW1lfSAqL1xuXHRjb25zdCBrZXlmcmFtZSA9IHt9O1xuXHRjb25zdCBwYXJ0cyA9IGNzcy5zcGxpdCgnOycpO1xuXHRmb3IgKGNvbnN0IHBhcnQgb2YgcGFydHMpIHtcblx0XHRjb25zdCBbcHJvcGVydHksIHZhbHVlXSA9IHBhcnQuc3BsaXQoJzonKTtcblx0XHRpZiAoIXByb3BlcnR5IHx8IHZhbHVlID09PSB1bmRlZmluZWQpIGJyZWFrO1xuXG5cdFx0Y29uc3QgZm9ybWF0dGVkX3Byb3BlcnR5ID0gY3NzX3Byb3BlcnR5X3RvX2NhbWVsY2FzZShwcm9wZXJ0eS50cmltKCkpO1xuXHRcdGtleWZyYW1lW2Zvcm1hdHRlZF9wcm9wZXJ0eV0gPSB2YWx1ZS50cmltKCk7XG5cdH1cblx0cmV0dXJuIGtleWZyYW1lO1xufVxuXG4vKiogQHBhcmFtIHtudW1iZXJ9IHQgKi9cbmNvbnN0IGxpbmVhciA9ICh0KSA9PiB0O1xuXG4vKipcbiAqIENhbGxlZCBpbnNpZGUga2V5ZWQgYHsjZWFjaCAuLi59YCBibG9ja3MgKGFzIGAkLmFuaW1hdGlvbiguLi4pYCkuIFRoaXMgY3JlYXRlcyBhbiBhbmltYXRpb24gbWFuYWdlclxuICogYW5kIGF0dGFjaGVzIGl0IHRvIHRoZSBibG9jaywgc28gdGhhdCBtb3ZlcyBjYW4gYmUgYW5pbWF0ZWQgZm9sbG93aW5nIHJlY29uY2lsaWF0aW9uLlxuICogQHRlbXBsYXRlIFBcbiAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudFxuICogQHBhcmFtIHsoKSA9PiBBbmltYXRlRm48UCB8IHVuZGVmaW5lZD59IGdldF9mblxuICogQHBhcmFtIHsoKCkgPT4gUCkgfCBudWxsfSBnZXRfcGFyYW1zXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhbmltYXRpb24oZWxlbWVudCwgZ2V0X2ZuLCBnZXRfcGFyYW1zKSB7XG5cdHZhciBpdGVtID0gLyoqIEB0eXBlIHtFYWNoSXRlbX0gKi8gKGN1cnJlbnRfZWFjaF9pdGVtKTtcblxuXHQvKiogQHR5cGUge0RPTVJlY3R9ICovXG5cdHZhciBmcm9tO1xuXG5cdC8qKiBAdHlwZSB7RE9NUmVjdH0gKi9cblx0dmFyIHRvO1xuXG5cdC8qKiBAdHlwZSB7QW5pbWF0aW9uIHwgdW5kZWZpbmVkfSAqL1xuXHR2YXIgYW5pbWF0aW9uO1xuXG5cdC8qKiBAdHlwZSB7bnVsbCB8IHsgcG9zaXRpb246IHN0cmluZywgd2lkdGg6IHN0cmluZywgaGVpZ2h0OiBzdHJpbmcsIHRyYW5zZm9ybTogc3RyaW5nIH19ICovXG5cdHZhciBvcmlnaW5hbF9zdHlsZXMgPSBudWxsO1xuXG5cdGl0ZW0uYSA/Pz0ge1xuXHRcdGVsZW1lbnQsXG5cdFx0bWVhc3VyZSgpIHtcblx0XHRcdGZyb20gPSB0aGlzLmVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cdFx0fSxcblx0XHRhcHBseSgpIHtcblx0XHRcdGFuaW1hdGlvbj8uYWJvcnQoKTtcblxuXHRcdFx0dG8gPSB0aGlzLmVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cblx0XHRcdGlmIChcblx0XHRcdFx0ZnJvbS5sZWZ0ICE9PSB0by5sZWZ0IHx8XG5cdFx0XHRcdGZyb20ucmlnaHQgIT09IHRvLnJpZ2h0IHx8XG5cdFx0XHRcdGZyb20udG9wICE9PSB0by50b3AgfHxcblx0XHRcdFx0ZnJvbS5ib3R0b20gIT09IHRvLmJvdHRvbVxuXHRcdFx0KSB7XG5cdFx0XHRcdGNvbnN0IG9wdGlvbnMgPSBnZXRfZm4oKSh0aGlzLmVsZW1lbnQsIHsgZnJvbSwgdG8gfSwgZ2V0X3BhcmFtcz8uKCkpO1xuXG5cdFx0XHRcdGFuaW1hdGlvbiA9IGFuaW1hdGUodGhpcy5lbGVtZW50LCBvcHRpb25zLCB1bmRlZmluZWQsIDEsICgpID0+IHtcblx0XHRcdFx0XHRhbmltYXRpb24/LmFib3J0KCk7XG5cdFx0XHRcdFx0YW5pbWF0aW9uID0gdW5kZWZpbmVkO1xuXHRcdFx0XHR9KTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdGZpeCgpIHtcblx0XHRcdC8vIElmIGFuIGFuaW1hdGlvbiBpcyBhbHJlYWR5IHJ1bm5pbmcsIHRyYW5zZm9ybWluZyB0aGUgZWxlbWVudCBpcyBsaWtlbHkgdG8gZmFpbCxcblx0XHRcdC8vIGJlY2F1c2UgdGhlIHN0eWxlcyBhcHBsaWVkIGJ5IHRoZSBhbmltYXRpb24gdGFrZSBwcmVjZWRlbmNlLiBJbiB0aGUgY2FzZSBvZiBjcm9zc2ZhZGUsXG5cdFx0XHQvLyB0aGF0IG1lYW5zIHRoZSBgdHJhbnNsYXRlKC4uLilgIG9mIHRoZSBjcm9zc2ZhZGUgdHJhbnNpdGlvbiBvdmVycnVsZXMgdGhlIGB0cmFuc2xhdGUoLi4uKWBcblx0XHRcdC8vIHdlIHdvdWxkIGFwcGx5IGJlbG93LCBsZWFkaW5nIHRvIHRoZSBlbGVtZW50IGp1bXBpbmcgc29tZXdoZXJlIHRvIHRoZSB0b3AgbGVmdC5cblx0XHRcdGlmIChlbGVtZW50LmdldEFuaW1hdGlvbnMoKS5sZW5ndGgpIHJldHVybjtcblxuXHRcdFx0Ly8gSXQncyBpbXBvcnRhbnQgdG8gZGVzdHJ1Y3R1cmUgdGhlc2UgdG8gZ2V0IGZpeGVkIHZhbHVlcyAtIHRoZSBvYmplY3QgaXRzZWxmIGhhcyBnZXR0ZXJzLFxuXHRcdFx0Ly8gYW5kIGNoYW5naW5nIHRoZSBzdHlsZSB0byAnYWJzb2x1dGUnIGNhbiBmb3IgZXhhbXBsZSBpbmZsdWVuY2UgdGhlIHdpZHRoLlxuXHRcdFx0dmFyIHsgcG9zaXRpb24sIHdpZHRoLCBoZWlnaHQgfSA9IGdldENvbXB1dGVkU3R5bGUoZWxlbWVudCk7XG5cblx0XHRcdGlmIChwb3NpdGlvbiAhPT0gJ2Fic29sdXRlJyAmJiBwb3NpdGlvbiAhPT0gJ2ZpeGVkJykge1xuXHRcdFx0XHR2YXIgc3R5bGUgPSAvKiogQHR5cGUge0hUTUxFbGVtZW50IHwgU1ZHRWxlbWVudH0gKi8gKGVsZW1lbnQpLnN0eWxlO1xuXG5cdFx0XHRcdG9yaWdpbmFsX3N0eWxlcyA9IHtcblx0XHRcdFx0XHRwb3NpdGlvbjogc3R5bGUucG9zaXRpb24sXG5cdFx0XHRcdFx0d2lkdGg6IHN0eWxlLndpZHRoLFxuXHRcdFx0XHRcdGhlaWdodDogc3R5bGUuaGVpZ2h0LFxuXHRcdFx0XHRcdHRyYW5zZm9ybTogc3R5bGUudHJhbnNmb3JtXG5cdFx0XHRcdH07XG5cblx0XHRcdFx0c3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xuXHRcdFx0XHRzdHlsZS53aWR0aCA9IHdpZHRoO1xuXHRcdFx0XHRzdHlsZS5oZWlnaHQgPSBoZWlnaHQ7XG5cdFx0XHRcdHZhciB0byA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cblx0XHRcdFx0aWYgKGZyb20ubGVmdCAhPT0gdG8ubGVmdCB8fCBmcm9tLnRvcCAhPT0gdG8udG9wKSB7XG5cdFx0XHRcdFx0dmFyIHRyYW5zZm9ybSA9IGB0cmFuc2xhdGUoJHtmcm9tLmxlZnQgLSB0by5sZWZ0fXB4LCAke2Zyb20udG9wIC0gdG8udG9wfXB4KWA7XG5cdFx0XHRcdFx0c3R5bGUudHJhbnNmb3JtID0gc3R5bGUudHJhbnNmb3JtID8gYCR7c3R5bGUudHJhbnNmb3JtfSAke3RyYW5zZm9ybX1gIDogdHJhbnNmb3JtO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSxcblx0XHR1bmZpeCgpIHtcblx0XHRcdGlmIChvcmlnaW5hbF9zdHlsZXMpIHtcblx0XHRcdFx0dmFyIHN0eWxlID0gLyoqIEB0eXBlIHtIVE1MRWxlbWVudCB8IFNWR0VsZW1lbnR9ICovIChlbGVtZW50KS5zdHlsZTtcblxuXHRcdFx0XHRzdHlsZS5wb3NpdGlvbiA9IG9yaWdpbmFsX3N0eWxlcy5wb3NpdGlvbjtcblx0XHRcdFx0c3R5bGUud2lkdGggPSBvcmlnaW5hbF9zdHlsZXMud2lkdGg7XG5cdFx0XHRcdHN0eWxlLmhlaWdodCA9IG9yaWdpbmFsX3N0eWxlcy5oZWlnaHQ7XG5cdFx0XHRcdHN0eWxlLnRyYW5zZm9ybSA9IG9yaWdpbmFsX3N0eWxlcy50cmFuc2Zvcm07XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXG5cdC8vIGluIHRoZSBjYXNlIG9mIGEgYDxzdmVsdGU6ZWxlbWVudD5gLCBpdCdzIHBvc3NpYmxlIGZvciBgJC5hbmltYXRpb24oLi4uKWAgdG8gYmUgY2FsbGVkXG5cdC8vIHdoZW4gYW4gYW5pbWF0aW9uIG1hbmFnZXIgYWxyZWFkeSBleGlzdHMsIGlmIHRoZSB0YWcgY2hhbmdlcy4gaW4gdGhhdCBjYXNlLCB3ZSBuZWVkIHRvXG5cdC8vIHN3YXAgb3V0IHRoZSBlbGVtZW50IHJhdGhlciB0aGFuIGNyZWF0aW5nIGEgbmV3IG1hbmFnZXIsIGluIGNhc2UgaXQgaGFwcGVuZWQgYXQgdGhlIHNhbWVcblx0Ly8gbW9tZW50IGFzIGEgcmVjb25jaWxpYXRpb25cblx0aXRlbS5hLmVsZW1lbnQgPSBlbGVtZW50O1xufVxuXG4vKipcbiAqIENhbGxlZCBpbnNpZGUgYmxvY2sgZWZmZWN0cyBhcyBgJC50cmFuc2l0aW9uKC4uLilgLiBUaGlzIGNyZWF0ZXMgYSB0cmFuc2l0aW9uIG1hbmFnZXIgYW5kXG4gKiBhdHRhY2hlcyBpdCB0byB0aGUgY3VycmVudCBlZmZlY3Qg4oCUIGxhdGVyLCBpbnNpZGUgYHBhdXNlX2VmZmVjdGAgYW5kIGByZXN1bWVfZWZmZWN0YCwgd2VcbiAqIHVzZSB0aGlzIHRvIGNyZWF0ZSBgaW50cm9gIGFuZCBgb3V0cm9gIHRyYW5zaXRpb25zLlxuICogQHRlbXBsYXRlIFBcbiAqIEBwYXJhbSB7bnVtYmVyfSBmbGFnc1xuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWxlbWVudFxuICogQHBhcmFtIHsoKSA9PiBUcmFuc2l0aW9uRm48UCB8IHVuZGVmaW5lZD59IGdldF9mblxuICogQHBhcmFtIHsoKCkgPT4gUCkgfCBudWxsfSBnZXRfcGFyYW1zXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRyYW5zaXRpb24oZmxhZ3MsIGVsZW1lbnQsIGdldF9mbiwgZ2V0X3BhcmFtcykge1xuXHR2YXIgaXNfaW50cm8gPSAoZmxhZ3MgJiBUUkFOU0lUSU9OX0lOKSAhPT0gMDtcblx0dmFyIGlzX291dHJvID0gKGZsYWdzICYgVFJBTlNJVElPTl9PVVQpICE9PSAwO1xuXHR2YXIgaXNfYm90aCA9IGlzX2ludHJvICYmIGlzX291dHJvO1xuXHR2YXIgaXNfZ2xvYmFsID0gKGZsYWdzICYgVFJBTlNJVElPTl9HTE9CQUwpICE9PSAwO1xuXG5cdC8qKiBAdHlwZSB7J2luJyB8ICdvdXQnIHwgJ2JvdGgnfSAqL1xuXHR2YXIgZGlyZWN0aW9uID0gaXNfYm90aCA/ICdib3RoJyA6IGlzX2ludHJvID8gJ2luJyA6ICdvdXQnO1xuXG5cdC8qKiBAdHlwZSB7QW5pbWF0aW9uQ29uZmlnIHwgKChvcHRzOiB7IGRpcmVjdGlvbjogJ2luJyB8ICdvdXQnIH0pID0+IEFuaW1hdGlvbkNvbmZpZykgfCB1bmRlZmluZWR9ICovXG5cdHZhciBjdXJyZW50X29wdGlvbnM7XG5cblx0dmFyIGluZXJ0ID0gZWxlbWVudC5pbmVydDtcblxuXHQvKiogQHR5cGUge0FuaW1hdGlvbiB8IHVuZGVmaW5lZH0gKi9cblx0dmFyIGludHJvO1xuXG5cdC8qKiBAdHlwZSB7QW5pbWF0aW9uIHwgdW5kZWZpbmVkfSAqL1xuXHR2YXIgb3V0cm87XG5cblx0ZnVuY3Rpb24gZ2V0X29wdGlvbnMoKSB7XG5cdFx0dmFyIHByZXZpb3VzX3JlYWN0aW9uID0gYWN0aXZlX3JlYWN0aW9uO1xuXHRcdHZhciBwcmV2aW91c19lZmZlY3QgPSBhY3RpdmVfZWZmZWN0O1xuXHRcdHNldF9hY3RpdmVfcmVhY3Rpb24obnVsbCk7XG5cdFx0c2V0X2FjdGl2ZV9lZmZlY3QobnVsbCk7XG5cdFx0dHJ5IHtcblx0XHRcdC8vIElmIGEgdHJhbnNpdGlvbiBpcyBzdGlsbCBvbmdvaW5nLCB3ZSB1c2UgdGhlIGV4aXN0aW5nIG9wdGlvbnMgcmF0aGVyIHRoYW4gZ2VuZXJhdGluZ1xuXHRcdFx0Ly8gbmV3IG9uZXMuIFRoaXMgZW5zdXJlcyB0aGF0IHJldmVyc2libGUgdHJhbnNpdGlvbnMgcmV2ZXJzZSBzbW9vdGhseSwgcmF0aGVyIHRoYW5cblx0XHRcdC8vIGp1bXBpbmcgdG8gYSBuZXcgc3BvdCBiZWNhdXNlIChmb3IgZXhhbXBsZSkgYSBkaWZmZXJlbnQgYGR1cmF0aW9uYCB3YXMgdXNlZFxuXHRcdFx0cmV0dXJuIChjdXJyZW50X29wdGlvbnMgPz89IGdldF9mbigpKGVsZW1lbnQsIGdldF9wYXJhbXM/LigpID8/IC8qKiBAdHlwZSB7UH0gKi8gKHt9KSwge1xuXHRcdFx0XHRkaXJlY3Rpb25cblx0XHRcdH0pKTtcblx0XHR9IGZpbmFsbHkge1xuXHRcdFx0c2V0X2FjdGl2ZV9yZWFjdGlvbihwcmV2aW91c19yZWFjdGlvbik7XG5cdFx0XHRzZXRfYWN0aXZlX2VmZmVjdChwcmV2aW91c19lZmZlY3QpO1xuXHRcdH1cblx0fVxuXG5cdC8qKiBAdHlwZSB7VHJhbnNpdGlvbk1hbmFnZXJ9ICovXG5cdHZhciB0cmFuc2l0aW9uID0ge1xuXHRcdGlzX2dsb2JhbCxcblx0XHRpbigpIHtcblx0XHRcdGVsZW1lbnQuaW5lcnQgPSBpbmVydDtcblxuXHRcdFx0aWYgKCFpc19pbnRybykge1xuXHRcdFx0XHRvdXRybz8uYWJvcnQoKTtcblx0XHRcdFx0b3V0cm8/LnJlc2V0Py4oKTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIWlzX291dHJvKSB7XG5cdFx0XHRcdC8vIGlmIHdlIGludHJvIHRoZW4gb3V0cm8gdGhlbiBpbnRybyBhZ2Fpbiwgd2Ugd2FudCB0byBhYm9ydCB0aGUgZmlyc3QgaW50cm8sXG5cdFx0XHRcdC8vIGlmIGl0J3Mgbm90IGEgYmlkaXJlY3Rpb25hbCB0cmFuc2l0aW9uXG5cdFx0XHRcdGludHJvPy5hYm9ydCgpO1xuXHRcdFx0fVxuXG5cdFx0XHRkaXNwYXRjaF9ldmVudChlbGVtZW50LCAnaW50cm9zdGFydCcpO1xuXG5cdFx0XHRpbnRybyA9IGFuaW1hdGUoZWxlbWVudCwgZ2V0X29wdGlvbnMoKSwgb3V0cm8sIDEsICgpID0+IHtcblx0XHRcdFx0ZGlzcGF0Y2hfZXZlbnQoZWxlbWVudCwgJ2ludHJvZW5kJyk7XG5cblx0XHRcdFx0Ly8gRW5zdXJlIHdlIGNhbmNlbCB0aGUgYW5pbWF0aW9uIHRvIHByZXZlbnQgbGVha2luZ1xuXHRcdFx0XHRpbnRybz8uYWJvcnQoKTtcblx0XHRcdFx0aW50cm8gPSBjdXJyZW50X29wdGlvbnMgPSB1bmRlZmluZWQ7XG5cdFx0XHR9KTtcblx0XHR9LFxuXHRcdG91dChmbikge1xuXHRcdFx0aWYgKCFpc19vdXRybykge1xuXHRcdFx0XHRmbj8uKCk7XG5cdFx0XHRcdGN1cnJlbnRfb3B0aW9ucyA9IHVuZGVmaW5lZDtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRlbGVtZW50LmluZXJ0ID0gdHJ1ZTtcblxuXHRcdFx0ZGlzcGF0Y2hfZXZlbnQoZWxlbWVudCwgJ291dHJvc3RhcnQnKTtcblxuXHRcdFx0b3V0cm8gPSBhbmltYXRlKGVsZW1lbnQsIGdldF9vcHRpb25zKCksIGludHJvLCAwLCAoKSA9PiB7XG5cdFx0XHRcdGRpc3BhdGNoX2V2ZW50KGVsZW1lbnQsICdvdXRyb2VuZCcpO1xuXHRcdFx0XHRmbj8uKCk7XG5cdFx0XHR9KTtcblx0XHR9LFxuXHRcdHN0b3A6ICgpID0+IHtcblx0XHRcdGludHJvPy5hYm9ydCgpO1xuXHRcdFx0b3V0cm8/LmFib3J0KCk7XG5cdFx0fVxuXHR9O1xuXG5cdHZhciBlID0gLyoqIEB0eXBlIHtFZmZlY3R9ICovIChhY3RpdmVfZWZmZWN0KTtcblxuXHQoZS50cmFuc2l0aW9ucyA/Pz0gW10pLnB1c2godHJhbnNpdGlvbik7XG5cblx0Ly8gaWYgdGhpcyBpcyBhIGxvY2FsIHRyYW5zaXRpb24sIHdlIG9ubHkgd2FudCB0byBydW4gaXQgaWYgdGhlIHBhcmVudCAoYnJhbmNoKSBlZmZlY3Qnc1xuXHQvLyBwYXJlbnQgKGJsb2NrKSBlZmZlY3QgaXMgd2hlcmUgdGhlIHN0YXRlIGNoYW5nZSBoYXBwZW5lZC4gd2UgY2FuIGRldGVybWluZSB0aGF0IGJ5XG5cdC8vIGxvb2tpbmcgYXQgd2hldGhlciB0aGUgYmxvY2sgZWZmZWN0IGlzIGN1cnJlbnRseSBpbml0aWFsaXppbmdcblx0aWYgKGlzX2ludHJvICYmIHNob3VsZF9pbnRybykge1xuXHRcdHZhciBydW4gPSBpc19nbG9iYWw7XG5cblx0XHRpZiAoIXJ1bikge1xuXHRcdFx0dmFyIGJsb2NrID0gLyoqIEB0eXBlIHtFZmZlY3QgfCBudWxsfSAqLyAoZS5wYXJlbnQpO1xuXG5cdFx0XHQvLyBza2lwIG92ZXIgdHJhbnNwYXJlbnQgYmxvY2tzIChlLmcuIHNuaXBwZXRzLCBlbHNlLWlmIGJsb2Nrcylcblx0XHRcdHdoaWxlIChibG9jayAmJiAoYmxvY2suZiAmIEVGRkVDVF9UUkFOU1BBUkVOVCkgIT09IDApIHtcblx0XHRcdFx0d2hpbGUgKChibG9jayA9IGJsb2NrLnBhcmVudCkpIHtcblx0XHRcdFx0XHRpZiAoKGJsb2NrLmYgJiBCTE9DS19FRkZFQ1QpICE9PSAwKSBicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRydW4gPSAhYmxvY2sgfHwgKGJsb2NrLmYgJiBFRkZFQ1RfUkFOKSAhPT0gMDtcblx0XHR9XG5cblx0XHRpZiAocnVuKSB7XG5cdFx0XHRlZmZlY3QoKCkgPT4ge1xuXHRcdFx0XHR1bnRyYWNrKCgpID0+IHRyYW5zaXRpb24uaW4oKSk7XG5cdFx0XHR9KTtcblx0XHR9XG5cdH1cbn1cblxuLyoqXG4gKiBBbmltYXRlcyBhbiBlbGVtZW50LCBhY2NvcmRpbmcgdG8gdGhlIHByb3ZpZGVkIGNvbmZpZ3VyYXRpb25cbiAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudFxuICogQHBhcmFtIHtBbmltYXRpb25Db25maWcgfCAoKG9wdHM6IHsgZGlyZWN0aW9uOiAnaW4nIHwgJ291dCcgfSkgPT4gQW5pbWF0aW9uQ29uZmlnKX0gb3B0aW9uc1xuICogQHBhcmFtIHtBbmltYXRpb24gfCB1bmRlZmluZWR9IGNvdW50ZXJwYXJ0IFRoZSBjb3JyZXNwb25kaW5nIGludHJvL291dHJvIHRvIHRoaXMgb3V0cm8vaW50cm9cbiAqIEBwYXJhbSB7bnVtYmVyfSB0MiBUaGUgdGFyZ2V0IGB0YCB2YWx1ZSDigJQgYDFgIGZvciBpbnRybywgYDBgIGZvciBvdXRyb1xuICogQHBhcmFtIHsoKCkgPT4gdm9pZCl9IG9uX2ZpbmlzaCBDYWxsZWQgYWZ0ZXIgc3VjY2Vzc2Z1bGx5IGNvbXBsZXRpbmcgdGhlIGFuaW1hdGlvblxuICogQHJldHVybnMge0FuaW1hdGlvbn1cbiAqL1xuZnVuY3Rpb24gYW5pbWF0ZShlbGVtZW50LCBvcHRpb25zLCBjb3VudGVycGFydCwgdDIsIG9uX2ZpbmlzaCkge1xuXHR2YXIgaXNfaW50cm8gPSB0MiA9PT0gMTtcblxuXHRpZiAoaXNfZnVuY3Rpb24ob3B0aW9ucykpIHtcblx0XHQvLyBJbiB0aGUgY2FzZSBvZiBhIGRlZmVycmVkIHRyYW5zaXRpb24gKHN1Y2ggYXMgYGNyb3NzZmFkZWApLCBgb3B0aW9uYCB3aWxsIGJlXG5cdFx0Ly8gYSBmdW5jdGlvbiByYXRoZXIgdGhhbiBhbiBgQW5pbWF0aW9uQ29uZmlnYC4gV2UgbmVlZCB0byBjYWxsIHRoaXMgZnVuY3Rpb25cblx0XHQvLyBvbmNlIHRoZSBET00gaGFzIGJlZW4gdXBkYXRlZC4uLlxuXHRcdC8qKiBAdHlwZSB7QW5pbWF0aW9ufSAqL1xuXHRcdHZhciBhO1xuXHRcdHZhciBhYm9ydGVkID0gZmFsc2U7XG5cblx0XHRxdWV1ZV9taWNyb190YXNrKCgpID0+IHtcblx0XHRcdGlmIChhYm9ydGVkKSByZXR1cm47XG5cdFx0XHR2YXIgbyA9IG9wdGlvbnMoeyBkaXJlY3Rpb246IGlzX2ludHJvID8gJ2luJyA6ICdvdXQnIH0pO1xuXHRcdFx0YSA9IGFuaW1hdGUoZWxlbWVudCwgbywgY291bnRlcnBhcnQsIHQyLCBvbl9maW5pc2gpO1xuXHRcdH0pO1xuXG5cdFx0Ly8gLi4uYnV0IHdlIHdhbnQgdG8gZG8gc28gd2l0aG91dCB1c2luZyBgYXN5bmNgL2Bhd2FpdGAgZXZlcnl3aGVyZSwgc29cblx0XHQvLyB3ZSByZXR1cm4gYSBmYWNhZGUgdGhhdCBhbGxvd3MgZXZlcnl0aGluZyB0byByZW1haW4gc3luY2hyb25vdXNcblx0XHRyZXR1cm4ge1xuXHRcdFx0YWJvcnQ6ICgpID0+IHtcblx0XHRcdFx0YWJvcnRlZCA9IHRydWU7XG5cdFx0XHRcdGE/LmFib3J0KCk7XG5cdFx0XHR9LFxuXHRcdFx0ZGVhY3RpdmF0ZTogKCkgPT4gYS5kZWFjdGl2YXRlKCksXG5cdFx0XHRyZXNldDogKCkgPT4gYS5yZXNldCgpLFxuXHRcdFx0dDogKCkgPT4gYS50KClcblx0XHR9O1xuXHR9XG5cblx0Y291bnRlcnBhcnQ/LmRlYWN0aXZhdGUoKTtcblxuXHRpZiAoIW9wdGlvbnM/LmR1cmF0aW9uKSB7XG5cdFx0b25fZmluaXNoKCk7XG5cblx0XHRyZXR1cm4ge1xuXHRcdFx0YWJvcnQ6IG5vb3AsXG5cdFx0XHRkZWFjdGl2YXRlOiBub29wLFxuXHRcdFx0cmVzZXQ6IG5vb3AsXG5cdFx0XHR0OiAoKSA9PiB0MlxuXHRcdH07XG5cdH1cblxuXHRjb25zdCB7IGRlbGF5ID0gMCwgY3NzLCB0aWNrLCBlYXNpbmcgPSBsaW5lYXIgfSA9IG9wdGlvbnM7XG5cblx0dmFyIGtleWZyYW1lcyA9IFtdO1xuXG5cdGlmIChpc19pbnRybyAmJiBjb3VudGVycGFydCA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0aWYgKHRpY2spIHtcblx0XHRcdHRpY2soMCwgMSk7IC8vIFRPRE8gcHV0IGluIG5lc3RlZCBlZmZlY3QsIHRvIGF2b2lkIGludGVybGVhdmVkIHJlYWRzL3dyaXRlcz9cblx0XHR9XG5cblx0XHRpZiAoY3NzKSB7XG5cdFx0XHR2YXIgc3R5bGVzID0gY3NzX3RvX2tleWZyYW1lKGNzcygwLCAxKSk7XG5cdFx0XHRrZXlmcmFtZXMucHVzaChzdHlsZXMsIHN0eWxlcyk7XG5cdFx0fVxuXHR9XG5cblx0dmFyIGdldF90ID0gKCkgPT4gMSAtIHQyO1xuXG5cdC8vIGNyZWF0ZSBhIGR1bW15IGFuaW1hdGlvbiB0aGF0IGxhc3RzIGFzIGxvbmcgYXMgdGhlIGRlbGF5IChidXQgd2l0aCB3aGF0ZXZlciBkZXZ0b29sc1xuXHQvLyBtdWx0aXBsaWVyIGlzIGluIGVmZmVjdCkuIGluIHRoZSBjb21tb24gY2FzZSB0aGF0IGl0IGlzIGAwYCwgd2Uga2VlcCBpdCBhbnl3YXkgc28gdGhhdFxuXHQvLyB0aGUgQ1NTIGtleWZyYW1lcyBhcmVuJ3QgY3JlYXRlZCB1bnRpbCB0aGUgRE9NIGlzIHVwZGF0ZWRcblx0dmFyIGFuaW1hdGlvbiA9IGVsZW1lbnQuYW5pbWF0ZShrZXlmcmFtZXMsIHsgZHVyYXRpb246IGRlbGF5IH0pO1xuXG5cdGFuaW1hdGlvbi5vbmZpbmlzaCA9ICgpID0+IHtcblx0XHQvLyBmb3IgYmlkaXJlY3Rpb25hbCB0cmFuc2l0aW9ucywgd2Ugc3RhcnQgZnJvbSB0aGUgY3VycmVudCBwb3NpdGlvbixcblx0XHQvLyByYXRoZXIgdGhhbiBkb2luZyBhIGZ1bGwgaW50cm8vb3V0cm9cblx0XHR2YXIgdDEgPSBjb3VudGVycGFydD8udCgpID8/IDEgLSB0Mjtcblx0XHRjb3VudGVycGFydD8uYWJvcnQoKTtcblxuXHRcdHZhciBkZWx0YSA9IHQyIC0gdDE7XG5cdFx0dmFyIGR1cmF0aW9uID0gLyoqIEB0eXBlIHtudW1iZXJ9ICovIChvcHRpb25zLmR1cmF0aW9uKSAqIE1hdGguYWJzKGRlbHRhKTtcblx0XHR2YXIga2V5ZnJhbWVzID0gW107XG5cblx0XHRpZiAoZHVyYXRpb24gPiAwKSB7XG5cdFx0XHRpZiAoY3NzKSB7XG5cdFx0XHRcdHZhciBuID0gTWF0aC5jZWlsKGR1cmF0aW9uIC8gKDEwMDAgLyA2MCkpOyAvLyBgbmAgbXVzdCBiZSBhbiBpbnRlZ2VyLCBvciB3ZSByaXNrIG1pc3NpbmcgdGhlIGB0MmAgdmFsdWVcblxuXHRcdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8PSBuOyBpICs9IDEpIHtcblx0XHRcdFx0XHR2YXIgdCA9IHQxICsgZGVsdGEgKiBlYXNpbmcoaSAvIG4pO1xuXHRcdFx0XHRcdHZhciBzdHlsZXMgPSBjc3ModCwgMSAtIHQpO1xuXHRcdFx0XHRcdGtleWZyYW1lcy5wdXNoKGNzc190b19rZXlmcmFtZShzdHlsZXMpKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRnZXRfdCA9ICgpID0+IHtcblx0XHRcdFx0dmFyIHRpbWUgPSAvKiogQHR5cGUge251bWJlcn0gKi8gKFxuXHRcdFx0XHRcdC8qKiBAdHlwZSB7Z2xvYmFsVGhpcy5BbmltYXRpb259ICovIChhbmltYXRpb24pLmN1cnJlbnRUaW1lXG5cdFx0XHRcdCk7XG5cblx0XHRcdFx0cmV0dXJuIHQxICsgZGVsdGEgKiBlYXNpbmcodGltZSAvIGR1cmF0aW9uKTtcblx0XHRcdH07XG5cblx0XHRcdGlmICh0aWNrKSB7XG5cdFx0XHRcdGxvb3AoKCkgPT4ge1xuXHRcdFx0XHRcdGlmIChhbmltYXRpb24ucGxheVN0YXRlICE9PSAncnVubmluZycpIHJldHVybiBmYWxzZTtcblxuXHRcdFx0XHRcdHZhciB0ID0gZ2V0X3QoKTtcblx0XHRcdFx0XHR0aWNrKHQsIDEgLSB0KTtcblxuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHR9KTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRhbmltYXRpb24gPSBlbGVtZW50LmFuaW1hdGUoa2V5ZnJhbWVzLCB7IGR1cmF0aW9uLCBmaWxsOiAnZm9yd2FyZHMnIH0pO1xuXG5cdFx0YW5pbWF0aW9uLm9uZmluaXNoID0gKCkgPT4ge1xuXHRcdFx0Z2V0X3QgPSAoKSA9PiB0Mjtcblx0XHRcdHRpY2s/Lih0MiwgMSAtIHQyKTtcblx0XHRcdG9uX2ZpbmlzaCgpO1xuXHRcdH07XG5cdH07XG5cblx0cmV0dXJuIHtcblx0XHRhYm9ydDogKCkgPT4ge1xuXHRcdFx0aWYgKGFuaW1hdGlvbikge1xuXHRcdFx0XHRhbmltYXRpb24uY2FuY2VsKCk7XG5cdFx0XHRcdC8vIFRoaXMgcHJldmVudHMgbWVtb3J5IGxlYWtzIGluIENocm9taXVtXG5cdFx0XHRcdGFuaW1hdGlvbi5lZmZlY3QgPSBudWxsO1xuXHRcdFx0XHQvLyBUaGlzIHByZXZlbnRzIG9uZmluaXNoIHRvIGJlIGxhdW5jaGVkIGFmdGVyIGNhbmNlbCgpLFxuXHRcdFx0XHQvLyB3aGljaCBjYW4gaGFwcGVuIGluIHNvbWUgcmFyZSBjYXNlc1xuXHRcdFx0XHQvLyBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3N2ZWx0ZWpzL3N2ZWx0ZS9pc3N1ZXMvMTM2ODFcblx0XHRcdFx0YW5pbWF0aW9uLm9uZmluaXNoID0gbm9vcDtcblx0XHRcdH1cblx0XHR9LFxuXHRcdGRlYWN0aXZhdGU6ICgpID0+IHtcblx0XHRcdG9uX2ZpbmlzaCA9IG5vb3A7XG5cdFx0fSxcblx0XHRyZXNldDogKCkgPT4ge1xuXHRcdFx0aWYgKHQyID09PSAwKSB7XG5cdFx0XHRcdHRpY2s/LigxLCAwKTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdHQ6ICgpID0+IGdldF90KClcblx0fTtcbn1cbiIsImltcG9ydCB7IERFViB9IGZyb20gJ2VzbS1lbnYnO1xuaW1wb3J0IHsgcmVuZGVyX2VmZmVjdCwgdGVhcmRvd24gfSBmcm9tICcuLi8uLi8uLi9yZWFjdGl2aXR5L2VmZmVjdHMuanMnO1xuaW1wb3J0IHsgbGlzdGVuX3RvX2V2ZW50X2FuZF9yZXNldF9ldmVudCB9IGZyb20gJy4vc2hhcmVkLmpzJztcbmltcG9ydCAqIGFzIGUgZnJvbSAnLi4vLi4vLi4vZXJyb3JzLmpzJztcbmltcG9ydCB7IGlzIH0gZnJvbSAnLi4vLi4vLi4vcHJveHkuanMnO1xuaW1wb3J0IHsgcXVldWVfbWljcm9fdGFzayB9IGZyb20gJy4uLy4uL3Rhc2suanMnO1xuaW1wb3J0IHsgaHlkcmF0aW5nIH0gZnJvbSAnLi4vLi4vaHlkcmF0aW9uLmpzJztcbmltcG9ydCB7IGlzX3J1bmVzLCB1bnRyYWNrIH0gZnJvbSAnLi4vLi4vLi4vcnVudGltZS5qcyc7XG5cbi8qKlxuICogQHBhcmFtIHtIVE1MSW5wdXRFbGVtZW50fSBpbnB1dFxuICogQHBhcmFtIHsoKSA9PiB1bmtub3dufSBnZXRcbiAqIEBwYXJhbSB7KHZhbHVlOiB1bmtub3duKSA9PiB2b2lkfSBzZXRcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5leHBvcnQgZnVuY3Rpb24gYmluZF92YWx1ZShpbnB1dCwgZ2V0LCBzZXQgPSBnZXQpIHtcblx0dmFyIHJ1bmVzID0gaXNfcnVuZXMoKTtcblxuXHRsaXN0ZW5fdG9fZXZlbnRfYW5kX3Jlc2V0X2V2ZW50KGlucHV0LCAnaW5wdXQnLCAoaXNfcmVzZXQpID0+IHtcblx0XHRpZiAoREVWICYmIGlucHV0LnR5cGUgPT09ICdjaGVja2JveCcpIHtcblx0XHRcdC8vIFRPRE8gc2hvdWxkIHRoaXMgaGFwcGVuIGluIHByb2QgdG9vP1xuXHRcdFx0ZS5iaW5kX2ludmFsaWRfY2hlY2tib3hfdmFsdWUoKTtcblx0XHR9XG5cblx0XHQvKiogQHR5cGUge2FueX0gKi9cblx0XHR2YXIgdmFsdWUgPSBpc19yZXNldCA/IGlucHV0LmRlZmF1bHRWYWx1ZSA6IGlucHV0LnZhbHVlO1xuXHRcdHZhbHVlID0gaXNfbnVtYmVybGlrZV9pbnB1dChpbnB1dCkgPyB0b19udW1iZXIodmFsdWUpIDogdmFsdWU7XG5cdFx0c2V0KHZhbHVlKTtcblxuXHRcdC8vIEluIHJ1bmVzIG1vZGUsIHJlc3BlY3QgYW55IHZhbGlkYXRpb24gaW4gYWNjZXNzb3JzIChkb2Vzbid0IGFwcGx5IGluIGxlZ2FjeSBtb2RlLFxuXHRcdC8vIGJlY2F1c2Ugd2UgdXNlIG11dGFibGUgc3RhdGUgd2hpY2ggZW5zdXJlcyB0aGUgcmVuZGVyIGVmZmVjdCBhbHdheXMgcnVucylcblx0XHRpZiAocnVuZXMgJiYgdmFsdWUgIT09ICh2YWx1ZSA9IGdldCgpKSkge1xuXHRcdFx0dmFyIHN0YXJ0ID0gaW5wdXQuc2VsZWN0aW9uU3RhcnQ7XG5cdFx0XHR2YXIgZW5kID0gaW5wdXQuc2VsZWN0aW9uRW5kO1xuXG5cdFx0XHQvLyB0aGUgdmFsdWUgaXMgY29lcmNlZCBvbiBhc3NpZ25tZW50XG5cdFx0XHRpbnB1dC52YWx1ZSA9IHZhbHVlID8/ICcnO1xuXG5cdFx0XHQvLyBSZXN0b3JlIHNlbGVjdGlvblxuXHRcdFx0aWYgKGVuZCAhPT0gbnVsbCkge1xuXHRcdFx0XHRpbnB1dC5zZWxlY3Rpb25TdGFydCA9IHN0YXJ0O1xuXHRcdFx0XHRpbnB1dC5zZWxlY3Rpb25FbmQgPSBNYXRoLm1pbihlbmQsIGlucHV0LnZhbHVlLmxlbmd0aCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9KTtcblxuXHRpZiAoXG5cdFx0Ly8gSWYgd2UgYXJlIGh5ZHJhdGluZyBhbmQgdGhlIHZhbHVlIGhhcyBzaW5jZSBjaGFuZ2VkLFxuXHRcdC8vIHRoZW4gdXNlIHRoZSB1cGRhdGVkIHZhbHVlIGZyb20gdGhlIGlucHV0IGluc3RlYWQuXG5cdFx0KGh5ZHJhdGluZyAmJiBpbnB1dC5kZWZhdWx0VmFsdWUgIT09IGlucHV0LnZhbHVlKSB8fFxuXHRcdC8vIElmIGRlZmF1bHRWYWx1ZSBpcyBzZXQsIHRoZW4gdmFsdWUgPT0gZGVmYXVsdFZhbHVlXG5cdFx0Ly8gVE9ETyBTdmVsdGUgNjogcmVtb3ZlIGlucHV0LnZhbHVlIGNoZWNrIGFuZCBzZXQgdG8gZW1wdHkgc3RyaW5nP1xuXHRcdCh1bnRyYWNrKGdldCkgPT0gbnVsbCAmJiBpbnB1dC52YWx1ZSlcblx0KSB7XG5cdFx0c2V0KGlzX251bWJlcmxpa2VfaW5wdXQoaW5wdXQpID8gdG9fbnVtYmVyKGlucHV0LnZhbHVlKSA6IGlucHV0LnZhbHVlKTtcblx0fVxuXG5cdHJlbmRlcl9lZmZlY3QoKCkgPT4ge1xuXHRcdGlmIChERVYgJiYgaW5wdXQudHlwZSA9PT0gJ2NoZWNrYm94Jykge1xuXHRcdFx0Ly8gVE9ETyBzaG91bGQgdGhpcyBoYXBwZW4gaW4gcHJvZCB0b28/XG5cdFx0XHRlLmJpbmRfaW52YWxpZF9jaGVja2JveF92YWx1ZSgpO1xuXHRcdH1cblxuXHRcdHZhciB2YWx1ZSA9IGdldCgpO1xuXG5cdFx0aWYgKGlzX251bWJlcmxpa2VfaW5wdXQoaW5wdXQpICYmIHZhbHVlID09PSB0b19udW1iZXIoaW5wdXQudmFsdWUpKSB7XG5cdFx0XHQvLyBoYW5kbGVzIDAgdnMgMDAgY2FzZSAoc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9zdmVsdGVqcy9zdmVsdGUvaXNzdWVzLzk5NTkpXG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKGlucHV0LnR5cGUgPT09ICdkYXRlJyAmJiAhdmFsdWUgJiYgIWlucHV0LnZhbHVlKSB7XG5cdFx0XHQvLyBIYW5kbGVzIHRoZSBjYXNlIHdoZXJlIGEgdGVtcG9yYXJpbHkgaW52YWxpZCBkYXRlIGlzIHNldCAod2hpbGUgdHlwaW5nLCBmb3IgZXhhbXBsZSB3aXRoIGEgbGVhZGluZyAwIGZvciB0aGUgZGF5KVxuXHRcdFx0Ly8gYW5kIHByZXZlbnRzIHRoaXMgc3RhdGUgZnJvbSBjbGVhcmluZyB0aGUgb3RoZXIgcGFydHMgb2YgdGhlIGRhdGUgaW5wdXQgKHNlZSBodHRwczovL2dpdGh1Yi5jb20vc3ZlbHRlanMvc3ZlbHRlL2lzc3Vlcy83ODk3KVxuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIGRvbid0IHNldCB0aGUgdmFsdWUgb2YgdGhlIGlucHV0IGlmIGl0J3MgdGhlIHNhbWUgdG8gYWxsb3dcblx0XHQvLyBtaW5sZW5ndGggdG8gd29yayBwcm9wZXJseVxuXHRcdGlmICh2YWx1ZSAhPT0gaW5wdXQudmFsdWUpIHtcblx0XHRcdC8vIEB0cy1leHBlY3QtZXJyb3IgdGhlIHZhbHVlIGlzIGNvZXJjZWQgb24gYXNzaWdubWVudFxuXHRcdFx0aW5wdXQudmFsdWUgPSB2YWx1ZSA/PyAnJztcblx0XHR9XG5cdH0pO1xufVxuXG4vKiogQHR5cGUge1NldDxIVE1MSW5wdXRFbGVtZW50W10+fSAqL1xuY29uc3QgcGVuZGluZyA9IG5ldyBTZXQoKTtcblxuLyoqXG4gKiBAcGFyYW0ge0hUTUxJbnB1dEVsZW1lbnRbXX0gaW5wdXRzXG4gKiBAcGFyYW0ge251bGwgfCBbbnVtYmVyXX0gZ3JvdXBfaW5kZXhcbiAqIEBwYXJhbSB7SFRNTElucHV0RWxlbWVudH0gaW5wdXRcbiAqIEBwYXJhbSB7KCkgPT4gdW5rbm93bn0gZ2V0XG4gKiBAcGFyYW0geyh2YWx1ZTogdW5rbm93bikgPT4gdm9pZH0gc2V0XG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGJpbmRfZ3JvdXAoaW5wdXRzLCBncm91cF9pbmRleCwgaW5wdXQsIGdldCwgc2V0ID0gZ2V0KSB7XG5cdHZhciBpc19jaGVja2JveCA9IGlucHV0LmdldEF0dHJpYnV0ZSgndHlwZScpID09PSAnY2hlY2tib3gnO1xuXHR2YXIgYmluZGluZ19ncm91cCA9IGlucHV0cztcblxuXHQvLyBuZWVkcyB0byBiZSBsZXQgb3IgcmVsYXRlZCBjb2RlIGlzbid0IHRyZWVzaGFrZW4gb3V0IGlmIGl0J3MgYWx3YXlzIGZhbHNlXG5cdGxldCBoeWRyYXRpb25fbWlzbWF0Y2ggPSBmYWxzZTtcblxuXHRpZiAoZ3JvdXBfaW5kZXggIT09IG51bGwpIHtcblx0XHRmb3IgKHZhciBpbmRleCBvZiBncm91cF9pbmRleCkge1xuXHRcdFx0Ly8gQHRzLWV4cGVjdC1lcnJvclxuXHRcdFx0YmluZGluZ19ncm91cCA9IGJpbmRpbmdfZ3JvdXBbaW5kZXhdID8/PSBbXTtcblx0XHR9XG5cdH1cblxuXHRiaW5kaW5nX2dyb3VwLnB1c2goaW5wdXQpO1xuXG5cdGxpc3Rlbl90b19ldmVudF9hbmRfcmVzZXRfZXZlbnQoXG5cdFx0aW5wdXQsXG5cdFx0J2NoYW5nZScsXG5cdFx0KCkgPT4ge1xuXHRcdFx0Ly8gQHRzLWlnbm9yZVxuXHRcdFx0dmFyIHZhbHVlID0gaW5wdXQuX192YWx1ZTtcblxuXHRcdFx0aWYgKGlzX2NoZWNrYm94KSB7XG5cdFx0XHRcdHZhbHVlID0gZ2V0X2JpbmRpbmdfZ3JvdXBfdmFsdWUoYmluZGluZ19ncm91cCwgdmFsdWUsIGlucHV0LmNoZWNrZWQpO1xuXHRcdFx0fVxuXG5cdFx0XHRzZXQodmFsdWUpO1xuXHRcdH0sXG5cdFx0Ly8gVE9ETyBiZXR0ZXIgZGVmYXVsdCB2YWx1ZSBoYW5kbGluZ1xuXHRcdCgpID0+IHNldChpc19jaGVja2JveCA/IFtdIDogbnVsbClcblx0KTtcblxuXHRyZW5kZXJfZWZmZWN0KCgpID0+IHtcblx0XHR2YXIgdmFsdWUgPSBnZXQoKTtcblxuXHRcdC8vIElmIHdlIGFyZSBoeWRyYXRpbmcgYW5kIHRoZSB2YWx1ZSBoYXMgc2luY2UgY2hhbmdlZCwgdGhlbiB1c2UgdGhlIHVwZGF0ZSB2YWx1ZVxuXHRcdC8vIGZyb20gdGhlIGlucHV0IGluc3RlYWQuXG5cdFx0aWYgKGh5ZHJhdGluZyAmJiBpbnB1dC5kZWZhdWx0Q2hlY2tlZCAhPT0gaW5wdXQuY2hlY2tlZCkge1xuXHRcdFx0aHlkcmF0aW9uX21pc21hdGNoID0gdHJ1ZTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoaXNfY2hlY2tib3gpIHtcblx0XHRcdHZhbHVlID0gdmFsdWUgfHwgW107XG5cdFx0XHQvLyBAdHMtaWdub3JlXG5cdFx0XHRpbnB1dC5jaGVja2VkID0gdmFsdWUuaW5jbHVkZXMoaW5wdXQuX192YWx1ZSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIEB0cy1pZ25vcmVcblx0XHRcdGlucHV0LmNoZWNrZWQgPSBpcyhpbnB1dC5fX3ZhbHVlLCB2YWx1ZSk7XG5cdFx0fVxuXHR9KTtcblxuXHR0ZWFyZG93bigoKSA9PiB7XG5cdFx0dmFyIGluZGV4ID0gYmluZGluZ19ncm91cC5pbmRleE9mKGlucHV0KTtcblxuXHRcdGlmIChpbmRleCAhPT0gLTEpIHtcblx0XHRcdGJpbmRpbmdfZ3JvdXAuc3BsaWNlKGluZGV4LCAxKTtcblx0XHR9XG5cdH0pO1xuXG5cdGlmICghcGVuZGluZy5oYXMoYmluZGluZ19ncm91cCkpIHtcblx0XHRwZW5kaW5nLmFkZChiaW5kaW5nX2dyb3VwKTtcblxuXHRcdHF1ZXVlX21pY3JvX3Rhc2soKCkgPT4ge1xuXHRcdFx0Ly8gbmVjZXNzYXJ5IHRvIG1haW50YWluIGJpbmRpbmcgZ3JvdXAgb3JkZXIgaW4gYWxsIGluc2VydGlvbiBzY2VuYXJpb3Ncblx0XHRcdGJpbmRpbmdfZ3JvdXAuc29ydCgoYSwgYikgPT4gKGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oYikgPT09IDQgPyAtMSA6IDEpKTtcblx0XHRcdHBlbmRpbmcuZGVsZXRlKGJpbmRpbmdfZ3JvdXApO1xuXHRcdH0pO1xuXHR9XG5cblx0cXVldWVfbWljcm9fdGFzaygoKSA9PiB7XG5cdFx0aWYgKGh5ZHJhdGlvbl9taXNtYXRjaCkge1xuXHRcdFx0dmFyIHZhbHVlO1xuXG5cdFx0XHRpZiAoaXNfY2hlY2tib3gpIHtcblx0XHRcdFx0dmFsdWUgPSBnZXRfYmluZGluZ19ncm91cF92YWx1ZShiaW5kaW5nX2dyb3VwLCB2YWx1ZSwgaW5wdXQuY2hlY2tlZCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR2YXIgaHlkcmF0aW9uX2lucHV0ID0gYmluZGluZ19ncm91cC5maW5kKChpbnB1dCkgPT4gaW5wdXQuY2hlY2tlZCk7XG5cdFx0XHRcdC8vIEB0cy1pZ25vcmVcblx0XHRcdFx0dmFsdWUgPSBoeWRyYXRpb25faW5wdXQ/Ll9fdmFsdWU7XG5cdFx0XHR9XG5cblx0XHRcdHNldCh2YWx1ZSk7XG5cdFx0fVxuXHR9KTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0hUTUxJbnB1dEVsZW1lbnR9IGlucHV0XG4gKiBAcGFyYW0geygpID0+IHVua25vd259IGdldFxuICogQHBhcmFtIHsodmFsdWU6IHVua25vd24pID0+IHZvaWR9IHNldFxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBiaW5kX2NoZWNrZWQoaW5wdXQsIGdldCwgc2V0ID0gZ2V0KSB7XG5cdGxpc3Rlbl90b19ldmVudF9hbmRfcmVzZXRfZXZlbnQoaW5wdXQsICdjaGFuZ2UnLCAoaXNfcmVzZXQpID0+IHtcblx0XHR2YXIgdmFsdWUgPSBpc19yZXNldCA/IGlucHV0LmRlZmF1bHRDaGVja2VkIDogaW5wdXQuY2hlY2tlZDtcblx0XHRzZXQodmFsdWUpO1xuXHR9KTtcblxuXHRpZiAoXG5cdFx0Ly8gSWYgd2UgYXJlIGh5ZHJhdGluZyBhbmQgdGhlIHZhbHVlIGhhcyBzaW5jZSBjaGFuZ2VkLFxuXHRcdC8vIHRoZW4gdXNlIHRoZSB1cGRhdGUgdmFsdWUgZnJvbSB0aGUgaW5wdXQgaW5zdGVhZC5cblx0XHQoaHlkcmF0aW5nICYmIGlucHV0LmRlZmF1bHRDaGVja2VkICE9PSBpbnB1dC5jaGVja2VkKSB8fFxuXHRcdC8vIElmIGRlZmF1bHRDaGVja2VkIGlzIHNldCwgdGhlbiBjaGVja2VkID09IGRlZmF1bHRDaGVja2VkXG5cdFx0dW50cmFjayhnZXQpID09IG51bGxcblx0KSB7XG5cdFx0c2V0KGlucHV0LmNoZWNrZWQpO1xuXHR9XG5cblx0cmVuZGVyX2VmZmVjdCgoKSA9PiB7XG5cdFx0dmFyIHZhbHVlID0gZ2V0KCk7XG5cdFx0aW5wdXQuY2hlY2tlZCA9IEJvb2xlYW4odmFsdWUpO1xuXHR9KTtcbn1cblxuLyoqXG4gKiBAdGVtcGxhdGUgVlxuICogQHBhcmFtIHtBcnJheTxIVE1MSW5wdXRFbGVtZW50Pn0gZ3JvdXBcbiAqIEBwYXJhbSB7Vn0gX192YWx1ZVxuICogQHBhcmFtIHtib29sZWFufSBjaGVja2VkXG4gKiBAcmV0dXJucyB7VltdfVxuICovXG5mdW5jdGlvbiBnZXRfYmluZGluZ19ncm91cF92YWx1ZShncm91cCwgX192YWx1ZSwgY2hlY2tlZCkge1xuXHR2YXIgdmFsdWUgPSBuZXcgU2V0KCk7XG5cblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBncm91cC5sZW5ndGg7IGkgKz0gMSkge1xuXHRcdGlmIChncm91cFtpXS5jaGVja2VkKSB7XG5cdFx0XHQvLyBAdHMtaWdub3JlXG5cdFx0XHR2YWx1ZS5hZGQoZ3JvdXBbaV0uX192YWx1ZSk7XG5cdFx0fVxuXHR9XG5cblx0aWYgKCFjaGVja2VkKSB7XG5cdFx0dmFsdWUuZGVsZXRlKF9fdmFsdWUpO1xuXHR9XG5cblx0cmV0dXJuIEFycmF5LmZyb20odmFsdWUpO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7SFRNTElucHV0RWxlbWVudH0gaW5wdXRcbiAqL1xuZnVuY3Rpb24gaXNfbnVtYmVybGlrZV9pbnB1dChpbnB1dCkge1xuXHR2YXIgdHlwZSA9IGlucHV0LnR5cGU7XG5cdHJldHVybiB0eXBlID09PSAnbnVtYmVyJyB8fCB0eXBlID09PSAncmFuZ2UnO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICovXG5mdW5jdGlvbiB0b19udW1iZXIodmFsdWUpIHtcblx0cmV0dXJuIHZhbHVlID09PSAnJyA/IG51bGwgOiArdmFsdWU7XG59XG5cbi8qKlxuICogQHBhcmFtIHtIVE1MSW5wdXRFbGVtZW50fSBpbnB1dFxuICogQHBhcmFtIHsoKSA9PiBGaWxlTGlzdCB8IG51bGx9IGdldFxuICogQHBhcmFtIHsodmFsdWU6IEZpbGVMaXN0IHwgbnVsbCkgPT4gdm9pZH0gc2V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBiaW5kX2ZpbGVzKGlucHV0LCBnZXQsIHNldCA9IGdldCkge1xuXHRsaXN0ZW5fdG9fZXZlbnRfYW5kX3Jlc2V0X2V2ZW50KGlucHV0LCAnY2hhbmdlJywgKCkgPT4ge1xuXHRcdHNldChpbnB1dC5maWxlcyk7XG5cdH0pO1xuXG5cdHJlbmRlcl9lZmZlY3QoKCkgPT4ge1xuXHRcdGlucHV0LmZpbGVzID0gZ2V0KCk7XG5cdH0pO1xufVxuIiwiaW1wb3J0IHsgdGVhcmRvd24gfSBmcm9tICcuLi8uLi8uLi9yZWFjdGl2aXR5L2VmZmVjdHMuanMnO1xuaW1wb3J0IHsgZ2V0X2Rlc2NyaXB0b3IgfSBmcm9tICcuLi8uLi8uLi8uLi9zaGFyZWQvdXRpbHMuanMnO1xuXG4vKipcbiAqIE1ha2VzIGFuIGBleHBvcnRgZWQgKG5vbi1wcm9wKSB2YXJpYWJsZSBhdmFpbGFibGUgb24gdGhlIGAkJHByb3BzYCBvYmplY3RcbiAqIHNvIHRoYXQgY29uc3VtZXJzIGNhbiBkbyBgYmluZDp4YCBvbiB0aGUgY29tcG9uZW50LlxuICogQHRlbXBsYXRlIFZcbiAqIEBwYXJhbSB7UmVjb3JkPHN0cmluZywgdW5rbm93bj59IHByb3BzXG4gKiBAcGFyYW0ge3N0cmluZ30gcHJvcFxuICogQHBhcmFtIHtWfSB2YWx1ZVxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBiaW5kX3Byb3AocHJvcHMsIHByb3AsIHZhbHVlKSB7XG5cdHZhciBkZXNjID0gZ2V0X2Rlc2NyaXB0b3IocHJvcHMsIHByb3ApO1xuXG5cdGlmIChkZXNjICYmIGRlc2Muc2V0KSB7XG5cdFx0cHJvcHNbcHJvcF0gPSB2YWx1ZTtcblx0XHR0ZWFyZG93bigoKSA9PiB7XG5cdFx0XHRwcm9wc1twcm9wXSA9IG51bGw7XG5cdFx0fSk7XG5cdH1cbn1cbiIsImltcG9ydCB7IGVmZmVjdCB9IGZyb20gJy4uLy4uLy4uL3JlYWN0aXZpdHkvZWZmZWN0cy5qcyc7XG5pbXBvcnQgeyBsaXN0ZW5fdG9fZXZlbnRfYW5kX3Jlc2V0X2V2ZW50IH0gZnJvbSAnLi9zaGFyZWQuanMnO1xuaW1wb3J0IHsgdW50cmFjayB9IGZyb20gJy4uLy4uLy4uL3J1bnRpbWUuanMnO1xuaW1wb3J0IHsgaXMgfSBmcm9tICcuLi8uLi8uLi9wcm94eS5qcyc7XG5cbi8qKlxuICogU2VsZWN0cyB0aGUgY29ycmVjdCBvcHRpb24ocykgKGRlcGVuZGluZyBvbiB3aGV0aGVyIHRoaXMgaXMgYSBtdWx0aXBsZSBzZWxlY3QpXG4gKiBAdGVtcGxhdGUgVlxuICogQHBhcmFtIHtIVE1MU2VsZWN0RWxlbWVudH0gc2VsZWN0XG4gKiBAcGFyYW0ge1Z9IHZhbHVlXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFttb3VudGluZ11cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNlbGVjdF9vcHRpb24oc2VsZWN0LCB2YWx1ZSwgbW91bnRpbmcpIHtcblx0aWYgKHNlbGVjdC5tdWx0aXBsZSkge1xuXHRcdHJldHVybiBzZWxlY3Rfb3B0aW9ucyhzZWxlY3QsIHZhbHVlKTtcblx0fVxuXG5cdGZvciAodmFyIG9wdGlvbiBvZiBzZWxlY3Qub3B0aW9ucykge1xuXHRcdHZhciBvcHRpb25fdmFsdWUgPSBnZXRfb3B0aW9uX3ZhbHVlKG9wdGlvbik7XG5cdFx0aWYgKGlzKG9wdGlvbl92YWx1ZSwgdmFsdWUpKSB7XG5cdFx0XHRvcHRpb24uc2VsZWN0ZWQgPSB0cnVlO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0fVxuXG5cdGlmICghbW91bnRpbmcgfHwgdmFsdWUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHNlbGVjdC5zZWxlY3RlZEluZGV4ID0gLTE7IC8vIG5vIG9wdGlvbiBzaG91bGQgYmUgc2VsZWN0ZWRcblx0fVxufVxuXG4vKipcbiAqIFNlbGVjdHMgdGhlIGNvcnJlY3Qgb3B0aW9uKHMpIGlmIGB2YWx1ZWAgaXMgZ2l2ZW4sXG4gKiBhbmQgdGhlbiBzZXRzIHVwIGEgbXV0YXRpb24gb2JzZXJ2ZXIgdG8gc3luYyB0aGVcbiAqIGN1cnJlbnQgc2VsZWN0aW9uIHRvIHRoZSBkb20gd2hlbiBpdCBjaGFuZ2VzLiBTdWNoXG4gKiBjaGFuZ2VzIGNvdWxkIGZvciBleGFtcGxlIG9jY3VyIHdoZW4gb3B0aW9ucyBhcmVcbiAqIGluc2lkZSBhbiBgI2VhY2hgIGJsb2NrLlxuICogQHRlbXBsYXRlIFZcbiAqIEBwYXJhbSB7SFRNTFNlbGVjdEVsZW1lbnR9IHNlbGVjdFxuICogQHBhcmFtIHsoKSA9PiBWfSBbZ2V0X3ZhbHVlXVxuICovXG5leHBvcnQgZnVuY3Rpb24gaW5pdF9zZWxlY3Qoc2VsZWN0LCBnZXRfdmFsdWUpIHtcblx0bGV0IG1vdW50aW5nID0gdHJ1ZTtcblx0ZWZmZWN0KCgpID0+IHtcblx0XHRpZiAoZ2V0X3ZhbHVlKSB7XG5cdFx0XHRzZWxlY3Rfb3B0aW9uKHNlbGVjdCwgdW50cmFjayhnZXRfdmFsdWUpLCBtb3VudGluZyk7XG5cdFx0fVxuXHRcdG1vdW50aW5nID0gZmFsc2U7XG5cblx0XHR2YXIgb2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcigoKSA9PiB7XG5cdFx0XHQvLyBAdHMtaWdub3JlXG5cdFx0XHR2YXIgdmFsdWUgPSBzZWxlY3QuX192YWx1ZTtcblx0XHRcdHNlbGVjdF9vcHRpb24oc2VsZWN0LCB2YWx1ZSk7XG5cdFx0XHQvLyBEZWxpYmVyYXRlbHkgZG9uJ3QgdXBkYXRlIHRoZSBwb3RlbnRpYWwgYmluZGluZyB2YWx1ZSxcblx0XHRcdC8vIHRoZSBtb2RlbCBzaG91bGQgYmUgcHJlc2VydmVkIHVubGVzcyBleHBsaWNpdGx5IGNoYW5nZWRcblx0XHR9KTtcblxuXHRcdG9ic2VydmVyLm9ic2VydmUoc2VsZWN0LCB7XG5cdFx0XHQvLyBMaXN0ZW4gdG8gb3B0aW9uIGVsZW1lbnQgY2hhbmdlc1xuXHRcdFx0Y2hpbGRMaXN0OiB0cnVlLFxuXHRcdFx0c3VidHJlZTogdHJ1ZSwgLy8gYmVjYXVzZSBvZiA8b3B0Z3JvdXA+XG5cdFx0XHQvLyBMaXN0ZW4gdG8gb3B0aW9uIGVsZW1lbnQgdmFsdWUgYXR0cmlidXRlIGNoYW5nZXNcblx0XHRcdC8vIChkb2Vzbid0IGdldCBub3RpZmllZCBvZiBzZWxlY3QgdmFsdWUgY2hhbmdlcyxcblx0XHRcdC8vIGJlY2F1c2UgdGhhdCBwcm9wZXJ0eSBpcyBub3QgcmVmbGVjdGVkIGFzIGFuIGF0dHJpYnV0ZSlcblx0XHRcdGF0dHJpYnV0ZXM6IHRydWUsXG5cdFx0XHRhdHRyaWJ1dGVGaWx0ZXI6IFsndmFsdWUnXVxuXHRcdH0pO1xuXG5cdFx0cmV0dXJuICgpID0+IHtcblx0XHRcdG9ic2VydmVyLmRpc2Nvbm5lY3QoKTtcblx0XHR9O1xuXHR9KTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0hUTUxTZWxlY3RFbGVtZW50fSBzZWxlY3RcbiAqIEBwYXJhbSB7KCkgPT4gdW5rbm93bn0gZ2V0XG4gKiBAcGFyYW0geyh2YWx1ZTogdW5rbm93bikgPT4gdm9pZH0gc2V0XG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGJpbmRfc2VsZWN0X3ZhbHVlKHNlbGVjdCwgZ2V0LCBzZXQgPSBnZXQpIHtcblx0dmFyIG1vdW50aW5nID0gdHJ1ZTtcblxuXHRsaXN0ZW5fdG9fZXZlbnRfYW5kX3Jlc2V0X2V2ZW50KHNlbGVjdCwgJ2NoYW5nZScsIChpc19yZXNldCkgPT4ge1xuXHRcdHZhciBxdWVyeSA9IGlzX3Jlc2V0ID8gJ1tzZWxlY3RlZF0nIDogJzpjaGVja2VkJztcblx0XHQvKiogQHR5cGUge3Vua25vd259ICovXG5cdFx0dmFyIHZhbHVlO1xuXG5cdFx0aWYgKHNlbGVjdC5tdWx0aXBsZSkge1xuXHRcdFx0dmFsdWUgPSBbXS5tYXAuY2FsbChzZWxlY3QucXVlcnlTZWxlY3RvckFsbChxdWVyeSksIGdldF9vcHRpb25fdmFsdWUpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHQvKiogQHR5cGUge0hUTUxPcHRpb25FbGVtZW50IHwgbnVsbH0gKi9cblx0XHRcdHZhciBzZWxlY3RlZF9vcHRpb24gPVxuXHRcdFx0XHRzZWxlY3QucXVlcnlTZWxlY3RvcihxdWVyeSkgPz9cblx0XHRcdFx0Ly8gd2lsbCBmYWxsIGJhY2sgdG8gZmlyc3Qgbm9uLWRpc2FibGVkIG9wdGlvbiBpZiBubyBvcHRpb24gaXMgc2VsZWN0ZWRcblx0XHRcdFx0c2VsZWN0LnF1ZXJ5U2VsZWN0b3IoJ29wdGlvbjpub3QoW2Rpc2FibGVkXSknKTtcblx0XHRcdHZhbHVlID0gc2VsZWN0ZWRfb3B0aW9uICYmIGdldF9vcHRpb25fdmFsdWUoc2VsZWN0ZWRfb3B0aW9uKTtcblx0XHR9XG5cblx0XHRzZXQodmFsdWUpO1xuXHR9KTtcblxuXHQvLyBOZWVkcyB0byBiZSBhbiBlZmZlY3QsIG5vdCBhIHJlbmRlcl9lZmZlY3QsIHNvIHRoYXQgaW4gY2FzZSBvZiBlYWNoIGxvb3BzIHRoZSBsb2dpYyBydW5zIGFmdGVyIHRoZSBlYWNoIGJsb2NrIGhhcyB1cGRhdGVkXG5cdGVmZmVjdCgoKSA9PiB7XG5cdFx0dmFyIHZhbHVlID0gZ2V0KCk7XG5cdFx0c2VsZWN0X29wdGlvbihzZWxlY3QsIHZhbHVlLCBtb3VudGluZyk7XG5cblx0XHQvLyBNb3VudGluZyBhbmQgdmFsdWUgdW5kZWZpbmVkIC0+IHRha2Ugc2VsZWN0aW9uIGZyb20gZG9tXG5cdFx0aWYgKG1vdW50aW5nICYmIHZhbHVlID09PSB1bmRlZmluZWQpIHtcblx0XHRcdC8qKiBAdHlwZSB7SFRNTE9wdGlvbkVsZW1lbnQgfCBudWxsfSAqL1xuXHRcdFx0dmFyIHNlbGVjdGVkX29wdGlvbiA9IHNlbGVjdC5xdWVyeVNlbGVjdG9yKCc6Y2hlY2tlZCcpO1xuXHRcdFx0aWYgKHNlbGVjdGVkX29wdGlvbiAhPT0gbnVsbCkge1xuXHRcdFx0XHR2YWx1ZSA9IGdldF9vcHRpb25fdmFsdWUoc2VsZWN0ZWRfb3B0aW9uKTtcblx0XHRcdFx0c2V0KHZhbHVlKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBAdHMtaWdub3JlXG5cdFx0c2VsZWN0Ll9fdmFsdWUgPSB2YWx1ZTtcblx0XHRtb3VudGluZyA9IGZhbHNlO1xuXHR9KTtcblxuXHQvLyBkb24ndCBwYXNzIGdldF92YWx1ZSwgd2UgYWxyZWFkeSBpbml0aWFsaXplIGl0IGluIHRoZSBlZmZlY3QgYWJvdmVcblx0aW5pdF9zZWxlY3Qoc2VsZWN0KTtcbn1cblxuLyoqXG4gKiBAdGVtcGxhdGUgVlxuICogQHBhcmFtIHtIVE1MU2VsZWN0RWxlbWVudH0gc2VsZWN0XG4gKiBAcGFyYW0ge1Z9IHZhbHVlXG4gKi9cbmZ1bmN0aW9uIHNlbGVjdF9vcHRpb25zKHNlbGVjdCwgdmFsdWUpIHtcblx0Zm9yICh2YXIgb3B0aW9uIG9mIHNlbGVjdC5vcHRpb25zKSB7XG5cdFx0Ly8gQHRzLWlnbm9yZVxuXHRcdG9wdGlvbi5zZWxlY3RlZCA9IH52YWx1ZS5pbmRleE9mKGdldF9vcHRpb25fdmFsdWUob3B0aW9uKSk7XG5cdH1cbn1cblxuLyoqIEBwYXJhbSB7SFRNTE9wdGlvbkVsZW1lbnR9IG9wdGlvbiAqL1xuZnVuY3Rpb24gZ2V0X29wdGlvbl92YWx1ZShvcHRpb24pIHtcblx0Ly8gX192YWx1ZSBvbmx5IGV4aXN0cyBpZiB0aGUgPG9wdGlvbj4gaGFzIGEgdmFsdWUgYXR0cmlidXRlXG5cdGlmICgnX192YWx1ZScgaW4gb3B0aW9uKSB7XG5cdFx0cmV0dXJuIG9wdGlvbi5fX3ZhbHVlO1xuXHR9IGVsc2Uge1xuXHRcdHJldHVybiBvcHRpb24udmFsdWU7XG5cdH1cbn1cbiIsImltcG9ydCB7IFNUQVRFX1NZTUJPTCB9IGZyb20gJy4uLy4uLy4uL2NvbnN0YW50cy5qcyc7XG5pbXBvcnQgeyBlZmZlY3QsIHJlbmRlcl9lZmZlY3QgfSBmcm9tICcuLi8uLi8uLi9yZWFjdGl2aXR5L2VmZmVjdHMuanMnO1xuaW1wb3J0IHsgdW50cmFjayB9IGZyb20gJy4uLy4uLy4uL3J1bnRpbWUuanMnO1xuaW1wb3J0IHsgcXVldWVfbWljcm9fdGFzayB9IGZyb20gJy4uLy4uL3Rhc2suanMnO1xuXG4vKipcbiAqIEBwYXJhbSB7YW55fSBib3VuZF92YWx1ZVxuICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50X29yX2NvbXBvbmVudFxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGlzX2JvdW5kX3RoaXMoYm91bmRfdmFsdWUsIGVsZW1lbnRfb3JfY29tcG9uZW50KSB7XG5cdHJldHVybiAoXG5cdFx0Ym91bmRfdmFsdWUgPT09IGVsZW1lbnRfb3JfY29tcG9uZW50IHx8IGJvdW5kX3ZhbHVlPy5bU1RBVEVfU1lNQk9MXSA9PT0gZWxlbWVudF9vcl9jb21wb25lbnRcblx0KTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge2FueX0gZWxlbWVudF9vcl9jb21wb25lbnRcbiAqIEBwYXJhbSB7KHZhbHVlOiB1bmtub3duLCAuLi5wYXJ0czogdW5rbm93bltdKSA9PiB2b2lkfSB1cGRhdGVcbiAqIEBwYXJhbSB7KC4uLnBhcnRzOiB1bmtub3duW10pID0+IHVua25vd259IGdldF92YWx1ZVxuICogQHBhcmFtIHsoKSA9PiB1bmtub3duW119IFtnZXRfcGFydHNdIFNldCBpZiB0aGUgdGhpcyBiaW5kaW5nIGlzIHVzZWQgaW5zaWRlIGFuIGVhY2ggYmxvY2ssXG4gKiBcdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybnMgYWxsIHRoZSBwYXJ0cyBvZiB0aGUgZWFjaCBibG9jayBjb250ZXh0IHRoYXQgYXJlIHVzZWQgaW4gdGhlIGV4cHJlc3Npb25cbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5leHBvcnQgZnVuY3Rpb24gYmluZF90aGlzKGVsZW1lbnRfb3JfY29tcG9uZW50ID0ge30sIHVwZGF0ZSwgZ2V0X3ZhbHVlLCBnZXRfcGFydHMpIHtcblx0ZWZmZWN0KCgpID0+IHtcblx0XHQvKiogQHR5cGUge3Vua25vd25bXX0gKi9cblx0XHR2YXIgb2xkX3BhcnRzO1xuXG5cdFx0LyoqIEB0eXBlIHt1bmtub3duW119ICovXG5cdFx0dmFyIHBhcnRzO1xuXG5cdFx0cmVuZGVyX2VmZmVjdCgoKSA9PiB7XG5cdFx0XHRvbGRfcGFydHMgPSBwYXJ0cztcblx0XHRcdC8vIFdlIG9ubHkgdHJhY2sgY2hhbmdlcyB0byB0aGUgcGFydHMsIG5vdCB0aGUgdmFsdWUgaXRzZWxmIHRvIGF2b2lkIHVubmVjZXNzYXJ5IHJlcnVucy5cblx0XHRcdHBhcnRzID0gZ2V0X3BhcnRzPy4oKSB8fCBbXTtcblxuXHRcdFx0dW50cmFjaygoKSA9PiB7XG5cdFx0XHRcdGlmIChlbGVtZW50X29yX2NvbXBvbmVudCAhPT0gZ2V0X3ZhbHVlKC4uLnBhcnRzKSkge1xuXHRcdFx0XHRcdHVwZGF0ZShlbGVtZW50X29yX2NvbXBvbmVudCwgLi4ucGFydHMpO1xuXHRcdFx0XHRcdC8vIElmIHRoaXMgaXMgYW4gZWZmZWN0IHJlcnVuIChjYXVzZTogZWFjaCBibG9jayBjb250ZXh0IGNoYW5nZXMpLCB0aGVuIG51bGxmaXkgdGhlIGJpbmRpbmcgYXRcblx0XHRcdFx0XHQvLyB0aGUgcHJldmlvdXMgcG9zaXRpb24gaWYgaXQgaXNuJ3QgYWxyZWFkeSB0YWtlbiBvdmVyIGJ5IGEgZGlmZmVyZW50IGVmZmVjdC5cblx0XHRcdFx0XHRpZiAob2xkX3BhcnRzICYmIGlzX2JvdW5kX3RoaXMoZ2V0X3ZhbHVlKC4uLm9sZF9wYXJ0cyksIGVsZW1lbnRfb3JfY29tcG9uZW50KSkge1xuXHRcdFx0XHRcdFx0dXBkYXRlKG51bGwsIC4uLm9sZF9wYXJ0cyk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9KTtcblxuXHRcdHJldHVybiAoKSA9PiB7XG5cdFx0XHQvLyBXZSBjYW5ub3QgdXNlIGVmZmVjdHMgaW4gdGhlIHRlYXJkb3duIHBoYXNlLCB3ZSB3ZSB1c2UgYSBtaWNyb3Rhc2sgaW5zdGVhZC5cblx0XHRcdHF1ZXVlX21pY3JvX3Rhc2soKCkgPT4ge1xuXHRcdFx0XHRpZiAocGFydHMgJiYgaXNfYm91bmRfdGhpcyhnZXRfdmFsdWUoLi4ucGFydHMpLCBlbGVtZW50X29yX2NvbXBvbmVudCkpIHtcblx0XHRcdFx0XHR1cGRhdGUobnVsbCwgLi4ucGFydHMpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9O1xuXHR9KTtcblxuXHRyZXR1cm4gZWxlbWVudF9vcl9jb21wb25lbnQ7XG59XG4iLCIvKiogQGltcG9ydCB7IEFjdGlvblJldHVybiB9IGZyb20gJ3N2ZWx0ZS9hY3Rpb24nICovXG5pbXBvcnQgeyBub29wIH0gZnJvbSAnLi4vLi4vLi4vc2hhcmVkL3V0aWxzLmpzJztcbmltcG9ydCB7IHVzZXJfcHJlX2VmZmVjdCB9IGZyb20gJy4uLy4uL3JlYWN0aXZpdHkvZWZmZWN0cy5qcyc7XG5pbXBvcnQgeyBvbiB9IGZyb20gJy4uL2VsZW1lbnRzL2V2ZW50cy5qcyc7XG5cbi8qKlxuICogU3Vic3RpdHV0ZSBmb3IgdGhlIGB0cnVzdGVkYCBldmVudCBtb2RpZmllclxuICogQGRlcHJlY2F0ZWRcbiAqIEBwYXJhbSB7KGV2ZW50OiBFdmVudCwgLi4uYXJnczogQXJyYXk8dW5rbm93bj4pID0+IHZvaWR9IGZuXG4gKiBAcmV0dXJucyB7KGV2ZW50OiBFdmVudCwgLi4uYXJnczogdW5rbm93bltdKSA9PiB2b2lkfVxuICovXG5leHBvcnQgZnVuY3Rpb24gdHJ1c3RlZChmbikge1xuXHRyZXR1cm4gZnVuY3Rpb24gKC4uLmFyZ3MpIHtcblx0XHR2YXIgZXZlbnQgPSAvKiogQHR5cGUge0V2ZW50fSAqLyAoYXJnc1swXSk7XG5cdFx0aWYgKGV2ZW50LmlzVHJ1c3RlZCkge1xuXHRcdFx0Ly8gQHRzLWlnbm9yZVxuXHRcdFx0Zm4/LmFwcGx5KHRoaXMsIGFyZ3MpO1xuXHRcdH1cblx0fTtcbn1cblxuLyoqXG4gKiBTdWJzdGl0dXRlIGZvciB0aGUgYHNlbGZgIGV2ZW50IG1vZGlmaWVyXG4gKiBAZGVwcmVjYXRlZFxuICogQHBhcmFtIHsoZXZlbnQ6IEV2ZW50LCAuLi5hcmdzOiBBcnJheTx1bmtub3duPikgPT4gdm9pZH0gZm5cbiAqIEByZXR1cm5zIHsoZXZlbnQ6IEV2ZW50LCAuLi5hcmdzOiB1bmtub3duW10pID0+IHZvaWR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZWxmKGZuKSB7XG5cdHJldHVybiBmdW5jdGlvbiAoLi4uYXJncykge1xuXHRcdHZhciBldmVudCA9IC8qKiBAdHlwZSB7RXZlbnR9ICovIChhcmdzWzBdKTtcblx0XHQvLyBAdHMtaWdub3JlXG5cdFx0aWYgKGV2ZW50LnRhcmdldCA9PT0gdGhpcykge1xuXHRcdFx0Ly8gQHRzLWlnbm9yZVxuXHRcdFx0Zm4/LmFwcGx5KHRoaXMsIGFyZ3MpO1xuXHRcdH1cblx0fTtcbn1cblxuLyoqXG4gKiBTdWJzdGl0dXRlIGZvciB0aGUgYHN0b3BQcm9wYWdhdGlvbmAgZXZlbnQgbW9kaWZpZXJcbiAqIEBkZXByZWNhdGVkXG4gKiBAcGFyYW0geyhldmVudDogRXZlbnQsIC4uLmFyZ3M6IEFycmF5PHVua25vd24+KSA9PiB2b2lkfSBmblxuICogQHJldHVybnMgeyhldmVudDogRXZlbnQsIC4uLmFyZ3M6IHVua25vd25bXSkgPT4gdm9pZH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN0b3BQcm9wYWdhdGlvbihmbikge1xuXHRyZXR1cm4gZnVuY3Rpb24gKC4uLmFyZ3MpIHtcblx0XHR2YXIgZXZlbnQgPSAvKiogQHR5cGUge0V2ZW50fSAqLyAoYXJnc1swXSk7XG5cdFx0ZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0Ly8gQHRzLWlnbm9yZVxuXHRcdHJldHVybiBmbj8uYXBwbHkodGhpcywgYXJncyk7XG5cdH07XG59XG5cbi8qKlxuICogU3Vic3RpdHV0ZSBmb3IgdGhlIGBvbmNlYCBldmVudCBtb2RpZmllclxuICogQGRlcHJlY2F0ZWRcbiAqIEBwYXJhbSB7KGV2ZW50OiBFdmVudCwgLi4uYXJnczogQXJyYXk8dW5rbm93bj4pID0+IHZvaWR9IGZuXG4gKiBAcmV0dXJucyB7KGV2ZW50OiBFdmVudCwgLi4uYXJnczogdW5rbm93bltdKSA9PiB2b2lkfVxuICovXG5leHBvcnQgZnVuY3Rpb24gb25jZShmbikge1xuXHR2YXIgcmFuID0gZmFsc2U7XG5cblx0cmV0dXJuIGZ1bmN0aW9uICguLi5hcmdzKSB7XG5cdFx0aWYgKHJhbikgcmV0dXJuO1xuXHRcdHJhbiA9IHRydWU7XG5cblx0XHQvLyBAdHMtaWdub3JlXG5cdFx0cmV0dXJuIGZuPy5hcHBseSh0aGlzLCBhcmdzKTtcblx0fTtcbn1cblxuLyoqXG4gKiBTdWJzdGl0dXRlIGZvciB0aGUgYHN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbmAgZXZlbnQgbW9kaWZpZXJcbiAqIEBkZXByZWNhdGVkXG4gKiBAcGFyYW0geyhldmVudDogRXZlbnQsIC4uLmFyZ3M6IEFycmF5PHVua25vd24+KSA9PiB2b2lkfSBmblxuICogQHJldHVybnMgeyhldmVudDogRXZlbnQsIC4uLmFyZ3M6IHVua25vd25bXSkgPT4gdm9pZH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbihmbikge1xuXHRyZXR1cm4gZnVuY3Rpb24gKC4uLmFyZ3MpIHtcblx0XHR2YXIgZXZlbnQgPSAvKiogQHR5cGUge0V2ZW50fSAqLyAoYXJnc1swXSk7XG5cdFx0ZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG5cdFx0Ly8gQHRzLWlnbm9yZVxuXHRcdHJldHVybiBmbj8uYXBwbHkodGhpcywgYXJncyk7XG5cdH07XG59XG5cbi8qKlxuICogU3Vic3RpdHV0ZSBmb3IgdGhlIGBwcmV2ZW50RGVmYXVsdGAgZXZlbnQgbW9kaWZpZXJcbiAqIEBkZXByZWNhdGVkXG4gKiBAcGFyYW0geyhldmVudDogRXZlbnQsIC4uLmFyZ3M6IEFycmF5PHVua25vd24+KSA9PiB2b2lkfSBmblxuICogQHJldHVybnMgeyhldmVudDogRXZlbnQsIC4uLmFyZ3M6IHVua25vd25bXSkgPT4gdm9pZH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHByZXZlbnREZWZhdWx0KGZuKSB7XG5cdHJldHVybiBmdW5jdGlvbiAoLi4uYXJncykge1xuXHRcdHZhciBldmVudCA9IC8qKiBAdHlwZSB7RXZlbnR9ICovIChhcmdzWzBdKTtcblx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdC8vIEB0cy1pZ25vcmVcblx0XHRyZXR1cm4gZm4/LmFwcGx5KHRoaXMsIGFyZ3MpO1xuXHR9O1xufVxuXG4vKipcbiAqIFN1YnN0aXR1dGUgZm9yIHRoZSBgcGFzc2l2ZWAgZXZlbnQgbW9kaWZpZXIsIGltcGxlbWVudGVkIGFzIGFuIGFjdGlvblxuICogQGRlcHJlY2F0ZWRcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IG5vZGVcbiAqIEBwYXJhbSB7W2V2ZW50OiBzdHJpbmcsIGhhbmRsZXI6ICgpID0+IEV2ZW50TGlzdGVuZXJdfSBvcHRpb25zXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXNzaXZlKG5vZGUsIFtldmVudCwgaGFuZGxlcl0pIHtcblx0dXNlcl9wcmVfZWZmZWN0KCgpID0+IHtcblx0XHRyZXR1cm4gb24obm9kZSwgZXZlbnQsIGhhbmRsZXIoKSA/PyBub29wLCB7XG5cdFx0XHRwYXNzaXZlOiB0cnVlXG5cdFx0fSk7XG5cdH0pO1xufVxuXG4vKipcbiAqIFN1YnN0aXR1dGUgZm9yIHRoZSBgbm9ucGFzc2l2ZWAgZXZlbnQgbW9kaWZpZXIsIGltcGxlbWVudGVkIGFzIGFuIGFjdGlvblxuICogQGRlcHJlY2F0ZWRcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IG5vZGVcbiAqIEBwYXJhbSB7W2V2ZW50OiBzdHJpbmcsIGhhbmRsZXI6ICgpID0+IEV2ZW50TGlzdGVuZXJdfSBvcHRpb25zXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBub25wYXNzaXZlKG5vZGUsIFtldmVudCwgaGFuZGxlcl0pIHtcblx0dXNlcl9wcmVfZWZmZWN0KCgpID0+IHtcblx0XHRyZXR1cm4gb24obm9kZSwgZXZlbnQsIGhhbmRsZXIoKSA/PyBub29wLCB7XG5cdFx0XHRwYXNzaXZlOiBmYWxzZVxuXHRcdH0pO1xuXHR9KTtcbn1cbiIsIi8qKiBAaW1wb3J0IHsgQ29tcG9uZW50Q29udGV4dExlZ2FjeSB9IGZyb20gJyNjbGllbnQnICovXG5pbXBvcnQgeyBydW4sIHJ1bl9hbGwgfSBmcm9tICcuLi8uLi8uLi9zaGFyZWQvdXRpbHMuanMnO1xuaW1wb3J0IHsgZGVyaXZlZCB9IGZyb20gJy4uLy4uL3JlYWN0aXZpdHkvZGVyaXZlZHMuanMnO1xuaW1wb3J0IHsgdXNlcl9wcmVfZWZmZWN0LCB1c2VyX2VmZmVjdCB9IGZyb20gJy4uLy4uL3JlYWN0aXZpdHkvZWZmZWN0cy5qcyc7XG5pbXBvcnQgeyBjb21wb25lbnRfY29udGV4dCwgZGVlcF9yZWFkX3N0YXRlLCBnZXQsIHVudHJhY2sgfSBmcm9tICcuLi8uLi9ydW50aW1lLmpzJztcblxuLyoqXG4gKiBMZWdhY3ktbW9kZSBvbmx5OiBDYWxsIGBvbk1vdW50YCBjYWxsYmFja3MgYW5kIHNldCB1cCBgYmVmb3JlVXBkYXRlYC9gYWZ0ZXJVcGRhdGVgIGVmZmVjdHNcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2ltbXV0YWJsZV1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGluaXQoaW1tdXRhYmxlID0gZmFsc2UpIHtcblx0Y29uc3QgY29udGV4dCA9IC8qKiBAdHlwZSB7Q29tcG9uZW50Q29udGV4dExlZ2FjeX0gKi8gKGNvbXBvbmVudF9jb250ZXh0KTtcblxuXHRjb25zdCBjYWxsYmFja3MgPSBjb250ZXh0LmwudTtcblx0aWYgKCFjYWxsYmFja3MpIHJldHVybjtcblxuXHRsZXQgcHJvcHMgPSAoKSA9PiBkZWVwX3JlYWRfc3RhdGUoY29udGV4dC5zKTtcblxuXHRpZiAoaW1tdXRhYmxlKSB7XG5cdFx0bGV0IHZlcnNpb24gPSAwO1xuXHRcdGxldCBwcmV2ID0gLyoqIEB0eXBlIHtSZWNvcmQ8c3RyaW5nLCBhbnk+fSAqLyAoe30pO1xuXG5cdFx0Ly8gSW4gbGVnYWN5IGltbXV0YWJsZSBtb2RlLCBiZWZvcmUvYWZ0ZXJVcGRhdGUgb25seSBmaXJlIGlmIHRoZSBvYmplY3QgaWRlbnRpdHkgb2YgYSBwcm9wIGNoYW5nZXNcblx0XHRjb25zdCBkID0gZGVyaXZlZCgoKSA9PiB7XG5cdFx0XHRsZXQgY2hhbmdlZCA9IGZhbHNlO1xuXHRcdFx0Y29uc3QgcHJvcHMgPSBjb250ZXh0LnM7XG5cdFx0XHRmb3IgKGNvbnN0IGtleSBpbiBwcm9wcykge1xuXHRcdFx0XHRpZiAocHJvcHNba2V5XSAhPT0gcHJldltrZXldKSB7XG5cdFx0XHRcdFx0cHJldltrZXldID0gcHJvcHNba2V5XTtcblx0XHRcdFx0XHRjaGFuZ2VkID0gdHJ1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0aWYgKGNoYW5nZWQpIHZlcnNpb24rKztcblx0XHRcdHJldHVybiB2ZXJzaW9uO1xuXHRcdH0pO1xuXG5cdFx0cHJvcHMgPSAoKSA9PiBnZXQoZCk7XG5cdH1cblxuXHQvLyBiZWZvcmVVcGRhdGVcblx0aWYgKGNhbGxiYWNrcy5iLmxlbmd0aCkge1xuXHRcdHVzZXJfcHJlX2VmZmVjdCgoKSA9PiB7XG5cdFx0XHRvYnNlcnZlX2FsbChjb250ZXh0LCBwcm9wcyk7XG5cdFx0XHRydW5fYWxsKGNhbGxiYWNrcy5iKTtcblx0XHR9KTtcblx0fVxuXG5cdC8vIG9uTW91bnQgKG11c3QgcnVuIGJlZm9yZSBhZnRlclVwZGF0ZSlcblx0dXNlcl9lZmZlY3QoKCkgPT4ge1xuXHRcdGNvbnN0IGZucyA9IHVudHJhY2soKCkgPT4gY2FsbGJhY2tzLm0ubWFwKHJ1bikpO1xuXHRcdHJldHVybiAoKSA9PiB7XG5cdFx0XHRmb3IgKGNvbnN0IGZuIG9mIGZucykge1xuXHRcdFx0XHRpZiAodHlwZW9mIGZuID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0XHRcdFx0Zm4oKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH0pO1xuXG5cdC8vIGFmdGVyVXBkYXRlXG5cdGlmIChjYWxsYmFja3MuYS5sZW5ndGgpIHtcblx0XHR1c2VyX2VmZmVjdCgoKSA9PiB7XG5cdFx0XHRvYnNlcnZlX2FsbChjb250ZXh0LCBwcm9wcyk7XG5cdFx0XHRydW5fYWxsKGNhbGxiYWNrcy5hKTtcblx0XHR9KTtcblx0fVxufVxuXG4vKipcbiAqIEludm9rZSB0aGUgZ2V0dGVyIG9mIGFsbCBzaWduYWxzIGFzc29jaWF0ZWQgd2l0aCBhIGNvbXBvbmVudFxuICogc28gdGhleSBjYW4gYmUgcmVnaXN0ZXJlZCB0byB0aGUgZWZmZWN0IHRoaXMgZnVuY3Rpb24gaXMgY2FsbGVkIGluLlxuICogQHBhcmFtIHtDb21wb25lbnRDb250ZXh0TGVnYWN5fSBjb250ZXh0XG4gKiBAcGFyYW0geygoKSA9PiB2b2lkKX0gcHJvcHNcbiAqL1xuZnVuY3Rpb24gb2JzZXJ2ZV9hbGwoY29udGV4dCwgcHJvcHMpIHtcblx0aWYgKGNvbnRleHQubC5zKSB7XG5cdFx0Zm9yIChjb25zdCBzaWduYWwgb2YgY29udGV4dC5sLnMpIGdldChzaWduYWwpO1xuXHR9XG5cblx0cHJvcHMoKTtcbn1cbiIsImltcG9ydCB7IHNldCwgc291cmNlIH0gZnJvbSAnLi4vLi4vcmVhY3Rpdml0eS9zb3VyY2VzLmpzJztcbmltcG9ydCB7IGdldCB9IGZyb20gJy4uLy4uL3J1bnRpbWUuanMnO1xuaW1wb3J0IHsgaXNfYXJyYXkgfSBmcm9tICcuLi8uLi8uLi9zaGFyZWQvdXRpbHMuanMnO1xuXG4vKipcbiAqIFVuZGVyIHNvbWUgY2lyY3Vtc3RhbmNlcywgaW1wb3J0cyBtYXkgYmUgcmVhY3RpdmUgaW4gbGVnYWN5IG1vZGUuIEluIHRoYXQgY2FzZSxcbiAqIHRoZXkgc2hvdWxkIGJlIHVzaW5nIGByZWFjdGl2ZV9pbXBvcnRgIGFzIHBhcnQgb2YgdGhlIHRyYW5zZm9ybWF0aW9uXG4gKiBAcGFyYW0geygpID0+IGFueX0gZm5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlYWN0aXZlX2ltcG9ydChmbikge1xuXHR2YXIgcyA9IHNvdXJjZSgwKTtcblxuXHRyZXR1cm4gZnVuY3Rpb24gKCkge1xuXHRcdGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxKSB7XG5cdFx0XHRzZXQocywgZ2V0KHMpICsgMSk7XG5cdFx0XHRyZXR1cm4gYXJndW1lbnRzWzBdO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRnZXQocyk7XG5cdFx0XHRyZXR1cm4gZm4oKTtcblx0XHR9XG5cdH07XG59XG5cbi8qKlxuICogQHRoaXMge2FueX1cbiAqIEBwYXJhbSB7UmVjb3JkPHN0cmluZywgdW5rbm93bj59ICQkcHJvcHNcbiAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50XG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGJ1YmJsZV9ldmVudCgkJHByb3BzLCBldmVudCkge1xuXHR2YXIgZXZlbnRzID0gLyoqIEB0eXBlIHtSZWNvcmQ8c3RyaW5nLCBGdW5jdGlvbltdIHwgRnVuY3Rpb24+fSAqLyAoJCRwcm9wcy4kJGV2ZW50cyk/Lltcblx0XHRldmVudC50eXBlXG5cdF07XG5cblx0dmFyIGNhbGxiYWNrcyA9IGlzX2FycmF5KGV2ZW50cykgPyBldmVudHMuc2xpY2UoKSA6IGV2ZW50cyA9PSBudWxsID8gW10gOiBbZXZlbnRzXTtcblxuXHRmb3IgKHZhciBmbiBvZiBjYWxsYmFja3MpIHtcblx0XHQvLyBQcmVzZXJ2ZSBcInRoaXNcIiBjb250ZXh0XG5cdFx0Zm4uY2FsbCh0aGlzLCBldmVudCk7XG5cdH1cbn1cblxuLyoqXG4gKiBVc2VkIHRvIHNpbXVsYXRlIGAkb25gIG9uIGEgY29tcG9uZW50IGluc3RhbmNlIHdoZW4gYGNvbXBhdGliaWxpdHkuY29tcG9uZW50QXBpID09PSA0YFxuICogQHBhcmFtIHtSZWNvcmQ8c3RyaW5nLCBhbnk+fSAkJHByb3BzXG4gKiBAcGFyYW0ge3N0cmluZ30gZXZlbnRfbmFtZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZXZlbnRfY2FsbGJhY2tcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFkZF9sZWdhY3lfZXZlbnRfbGlzdGVuZXIoJCRwcm9wcywgZXZlbnRfbmFtZSwgZXZlbnRfY2FsbGJhY2spIHtcblx0JCRwcm9wcy4kJGV2ZW50cyB8fD0ge307XG5cdCQkcHJvcHMuJCRldmVudHNbZXZlbnRfbmFtZV0gfHw9IFtdO1xuXHQkJHByb3BzLiQkZXZlbnRzW2V2ZW50X25hbWVdLnB1c2goZXZlbnRfY2FsbGJhY2spO1xufVxuXG4vKipcbiAqIFVzZWQgdG8gc2ltdWxhdGUgYCRzZXRgIG9uIGEgY29tcG9uZW50IGluc3RhbmNlIHdoZW4gYGNvbXBhdGliaWxpdHkuY29tcG9uZW50QXBpID09PSA0YC5cbiAqIE5lZWRzIGNvbXBvbmVudCBhY2Nlc3NvcnMgc28gdGhhdCBpdCBjYW4gY2FsbCB0aGUgc2V0dGVyIG9mIHRoZSBwcm9wLiBUaGVyZWZvcmUgZG9lc24ndFxuICogd29yayBmb3IgdXBkYXRpbmcgcHJvcHMgaW4gYCQkcHJvcHNgIG9yIGAkJHJlc3RQcm9wc2AuXG4gKiBAdGhpcyB7UmVjb3JkPHN0cmluZywgYW55Pn1cbiAqIEBwYXJhbSB7UmVjb3JkPHN0cmluZywgYW55Pn0gJCRuZXdfcHJvcHNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZV9sZWdhY3lfcHJvcHMoJCRuZXdfcHJvcHMpIHtcblx0Zm9yICh2YXIga2V5IGluICQkbmV3X3Byb3BzKSB7XG5cdFx0aWYgKGtleSBpbiB0aGlzKSB7XG5cdFx0XHR0aGlzW2tleV0gPSAkJG5ld19wcm9wc1trZXldO1xuXHRcdH1cblx0fVxufVxuIiwiLyoqIEBpbXBvcnQgeyBSZWFkYWJsZSB9IGZyb20gJy4vcHVibGljJyAqL1xuaW1wb3J0IHsgdW50cmFjayB9IGZyb20gJy4uL2luZGV4LWNsaWVudC5qcyc7XG5pbXBvcnQgeyBub29wIH0gZnJvbSAnLi4vaW50ZXJuYWwvc2hhcmVkL3V0aWxzLmpzJztcblxuLyoqXG4gKiBAdGVtcGxhdGUgVFxuICogQHBhcmFtIHtSZWFkYWJsZTxUPiB8IG51bGwgfCB1bmRlZmluZWR9IHN0b3JlXG4gKiBAcGFyYW0geyh2YWx1ZTogVCkgPT4gdm9pZH0gcnVuXG4gKiBAcGFyYW0geyh2YWx1ZTogVCkgPT4gdm9pZH0gW2ludmFsaWRhdGVdXG4gKiBAcmV0dXJucyB7KCkgPT4gdm9pZH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN1YnNjcmliZV90b19zdG9yZShzdG9yZSwgcnVuLCBpbnZhbGlkYXRlKSB7XG5cdGlmIChzdG9yZSA9PSBudWxsKSB7XG5cdFx0Ly8gQHRzLWV4cGVjdC1lcnJvclxuXHRcdHJ1bih1bmRlZmluZWQpO1xuXG5cdFx0Ly8gQHRzLWV4cGVjdC1lcnJvclxuXHRcdGlmIChpbnZhbGlkYXRlKSBpbnZhbGlkYXRlKHVuZGVmaW5lZCk7XG5cblx0XHRyZXR1cm4gbm9vcDtcblx0fVxuXG5cdC8vIFN2ZWx0ZSBzdG9yZSB0YWtlcyBhIHByaXZhdGUgc2Vjb25kIGFyZ3VtZW50XG5cdC8vIFN0YXJ0U3RvcE5vdGlmaWVyIGNvdWxkIG11dGF0ZSBzdGF0ZSwgYW5kIHdlIHdhbnQgdG8gc2lsZW5jZSB0aGUgY29ycmVzcG9uZGluZyB2YWxpZGF0aW9uIGVycm9yXG5cdGNvbnN0IHVuc3ViID0gdW50cmFjaygoKSA9PlxuXHRcdHN0b3JlLnN1YnNjcmliZShcblx0XHRcdHJ1bixcblx0XHRcdC8vIEB0cy1leHBlY3QtZXJyb3Jcblx0XHRcdGludmFsaWRhdGVcblx0XHQpXG5cdCk7XG5cblx0Ly8gQWxzbyBzdXBwb3J0IFJ4SlNcblx0Ly8gQHRzLWV4cGVjdC1lcnJvciBUT0RPIGZpeCB0aGlzIGluIHRoZSB0eXBlcz9cblx0cmV0dXJuIHVuc3ViLnVuc3Vic2NyaWJlID8gKCkgPT4gdW5zdWIudW5zdWJzY3JpYmUoKSA6IHVuc3ViO1xufVxuIiwiLyoqIEBpbXBvcnQgeyBTdG9yZVJlZmVyZW5jZXNDb250YWluZXIgfSBmcm9tICcjY2xpZW50JyAqL1xuLyoqIEBpbXBvcnQgeyBTdG9yZSB9IGZyb20gJyNzaGFyZWQnICovXG5pbXBvcnQgeyBzdWJzY3JpYmVfdG9fc3RvcmUgfSBmcm9tICcuLi8uLi8uLi9zdG9yZS91dGlscy5qcyc7XG5pbXBvcnQgeyBub29wIH0gZnJvbSAnLi4vLi4vc2hhcmVkL3V0aWxzLmpzJztcbmltcG9ydCB7IGdldCB9IGZyb20gJy4uL3J1bnRpbWUuanMnO1xuaW1wb3J0IHsgdGVhcmRvd24gfSBmcm9tICcuL2VmZmVjdHMuanMnO1xuaW1wb3J0IHsgbXV0YWJsZV9zb3VyY2UsIHNldCB9IGZyb20gJy4vc291cmNlcy5qcyc7XG5cbi8qKlxuICogV2hldGhlciBvciBub3QgdGhlIHByb3AgY3VycmVudGx5IGJlaW5nIHJlYWQgaXMgYSBzdG9yZSBiaW5kaW5nLCBhcyBpblxuICogYDxDaGlsZCBiaW5kOng9eyR5fSAvPmAuIElmIGl0IGlzLCB3ZSB0cmVhdCB0aGUgcHJvcCBhcyBtdXRhYmxlIGV2ZW4gaW5cbiAqIHJ1bmVzIG1vZGUsIGFuZCBza2lwIGBiaW5kaW5nX3Byb3BlcnR5X25vbl9yZWFjdGl2ZWAgdmFsaWRhdGlvblxuICovXG5sZXQgaXNfc3RvcmVfYmluZGluZyA9IGZhbHNlO1xuXG4vKipcbiAqIEdldHMgdGhlIGN1cnJlbnQgdmFsdWUgb2YgYSBzdG9yZS4gSWYgdGhlIHN0b3JlIGlzbid0IHN1YnNjcmliZWQgdG8geWV0LCBpdCB3aWxsIGNyZWF0ZSBhIHByb3h5XG4gKiBzaWduYWwgdGhhdCB3aWxsIGJlIHVwZGF0ZWQgd2hlbiB0aGUgc3RvcmUgaXMuIFRoZSBzdG9yZSByZWZlcmVuY2VzIGNvbnRhaW5lciBpcyBuZWVkZWQgdG9cbiAqIHRyYWNrIHJlYXNzaWdubWVudHMgdG8gc3RvcmVzIGFuZCB0byB0cmFjayB0aGUgY29ycmVjdCBjb21wb25lbnQgY29udGV4dC5cbiAqIEB0ZW1wbGF0ZSBWXG4gKiBAcGFyYW0ge1N0b3JlPFY+IHwgbnVsbCB8IHVuZGVmaW5lZH0gc3RvcmVcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdG9yZV9uYW1lXG4gKiBAcGFyYW0ge1N0b3JlUmVmZXJlbmNlc0NvbnRhaW5lcn0gc3RvcmVzXG4gKiBAcmV0dXJucyB7Vn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN0b3JlX2dldChzdG9yZSwgc3RvcmVfbmFtZSwgc3RvcmVzKSB7XG5cdGNvbnN0IGVudHJ5ID0gKHN0b3Jlc1tzdG9yZV9uYW1lXSA/Pz0ge1xuXHRcdHN0b3JlOiBudWxsLFxuXHRcdHNvdXJjZTogbXV0YWJsZV9zb3VyY2UodW5kZWZpbmVkKSxcblx0XHR1bnN1YnNjcmliZTogbm9vcFxuXHR9KTtcblxuXHRpZiAoZW50cnkuc3RvcmUgIT09IHN0b3JlKSB7XG5cdFx0ZW50cnkudW5zdWJzY3JpYmUoKTtcblx0XHRlbnRyeS5zdG9yZSA9IHN0b3JlID8/IG51bGw7XG5cblx0XHRpZiAoc3RvcmUgPT0gbnVsbCkge1xuXHRcdFx0ZW50cnkuc291cmNlLnYgPSB1bmRlZmluZWQ7IC8vIHNlZSBzeW5jaHJvbm91cyBjYWxsYmFjayBjb21tZW50IGJlbG93XG5cdFx0XHRlbnRyeS51bnN1YnNjcmliZSA9IG5vb3A7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHZhciBpc19zeW5jaHJvbm91c19jYWxsYmFjayA9IHRydWU7XG5cblx0XHRcdGVudHJ5LnVuc3Vic2NyaWJlID0gc3Vic2NyaWJlX3RvX3N0b3JlKHN0b3JlLCAodikgPT4ge1xuXHRcdFx0XHRpZiAoaXNfc3luY2hyb25vdXNfY2FsbGJhY2spIHtcblx0XHRcdFx0XHQvLyBJZiB0aGUgZmlyc3QgdXBkYXRlcyB0byB0aGUgc3RvcmUgdmFsdWUgKHBvc3NpYmx5IG11bHRpcGxlIG9mIHRoZW0pIGFyZSBzeW5jaHJvbm91c2x5XG5cdFx0XHRcdFx0Ly8gaW5zaWRlIGEgZGVyaXZlZCwgd2Ugd2lsbCBoaXQgdGhlIGBzdGF0ZV91bnNhZmVfbXV0YXRpb25gIGVycm9yIGlmIHdlIGBzZXRgIHRoZSB2YWx1ZVxuXHRcdFx0XHRcdGVudHJ5LnNvdXJjZS52ID0gdjtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRzZXQoZW50cnkuc291cmNlLCB2KTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cblx0XHRcdGlzX3N5bmNocm9ub3VzX2NhbGxiYWNrID0gZmFsc2U7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGdldChlbnRyeS5zb3VyY2UpO1xufVxuXG4vKipcbiAqIFVuc3Vic2NyaWJlIGZyb20gYSBzdG9yZSBpZiBpdCdzIG5vdCB0aGUgc2FtZSBhcyB0aGUgb25lIGluIHRoZSBzdG9yZSByZWZlcmVuY2VzIGNvbnRhaW5lci5cbiAqIFdlIG5lZWQgdGhpcyBpbiBhZGRpdGlvbiB0byBgc3RvcmVfZ2V0YCBiZWNhdXNlIHNvbWVvbmUgY291bGQgdW5zdWJzY3JpYmUgZnJvbSBhIHN0b3JlIGJ1dFxuICogdGhlbiBuZXZlciBzdWJzY3JpYmUgdG8gdGhlIG5ldyBvbmUgKGlmIGFueSksIGNhdXNpbmcgdGhlIHN1YnNjcmlwdGlvbiB0byBzdGF5IG9wZW4gd3JvbmdmdWxseS5cbiAqIEBwYXJhbSB7U3RvcmU8YW55PiB8IG51bGwgfCB1bmRlZmluZWR9IHN0b3JlXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RvcmVfbmFtZVxuICogQHBhcmFtIHtTdG9yZVJlZmVyZW5jZXNDb250YWluZXJ9IHN0b3Jlc1xuICovXG5leHBvcnQgZnVuY3Rpb24gc3RvcmVfdW5zdWIoc3RvcmUsIHN0b3JlX25hbWUsIHN0b3Jlcykge1xuXHQvKiogQHR5cGUge1N0b3JlUmVmZXJlbmNlc0NvbnRhaW5lclsnJ10gfCB1bmRlZmluZWR9ICovXG5cdGxldCBlbnRyeSA9IHN0b3Jlc1tzdG9yZV9uYW1lXTtcblxuXHRpZiAoZW50cnkgJiYgZW50cnkuc3RvcmUgIT09IHN0b3JlKSB7XG5cdFx0Ly8gRG9uJ3QgcmVzZXQgc3RvcmUgeWV0LCBzbyB0aGF0IHN0b3JlX2dldCBhYm92ZSBjYW4gcmVzdWJzY3JpYmUgdG8gbmV3IHN0b3JlIGlmIG5lY2Vzc2FyeVxuXHRcdGVudHJ5LnVuc3Vic2NyaWJlKCk7XG5cdFx0ZW50cnkudW5zdWJzY3JpYmUgPSBub29wO1xuXHR9XG5cblx0cmV0dXJuIHN0b3JlO1xufVxuXG4vKipcbiAqIFNldHMgdGhlIG5ldyB2YWx1ZSBvZiBhIHN0b3JlIGFuZCByZXR1cm5zIHRoYXQgdmFsdWUuXG4gKiBAdGVtcGxhdGUgVlxuICogQHBhcmFtIHtTdG9yZTxWPn0gc3RvcmVcbiAqIEBwYXJhbSB7Vn0gdmFsdWVcbiAqIEByZXR1cm5zIHtWfVxuICovXG5leHBvcnQgZnVuY3Rpb24gc3RvcmVfc2V0KHN0b3JlLCB2YWx1ZSkge1xuXHRzdG9yZS5zZXQodmFsdWUpO1xuXHRyZXR1cm4gdmFsdWU7XG59XG5cbi8qKlxuICogQHBhcmFtIHtTdG9yZVJlZmVyZW5jZXNDb250YWluZXJ9IHN0b3Jlc1xuICogQHBhcmFtIHtzdHJpbmd9IHN0b3JlX25hbWVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGludmFsaWRhdGVfc3RvcmUoc3RvcmVzLCBzdG9yZV9uYW1lKSB7XG5cdHZhciBlbnRyeSA9IHN0b3Jlc1tzdG9yZV9uYW1lXTtcblx0aWYgKGVudHJ5LnN0b3JlICE9PSBudWxsKSB7XG5cdFx0c3RvcmVfc2V0KGVudHJ5LnN0b3JlLCBlbnRyeS5zb3VyY2Uudik7XG5cdH1cbn1cblxuLyoqXG4gKiBVbnN1YnNjcmliZXMgZnJvbSBhbGwgYXV0by1zdWJzY3JpYmVkIHN0b3JlcyBvbiBkZXN0cm95XG4gKiBAcmV0dXJucyB7U3RvcmVSZWZlcmVuY2VzQ29udGFpbmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gc2V0dXBfc3RvcmVzKCkge1xuXHQvKiogQHR5cGUge1N0b3JlUmVmZXJlbmNlc0NvbnRhaW5lcn0gKi9cblx0Y29uc3Qgc3RvcmVzID0ge307XG5cblx0dGVhcmRvd24oKCkgPT4ge1xuXHRcdGZvciAodmFyIHN0b3JlX25hbWUgaW4gc3RvcmVzKSB7XG5cdFx0XHRjb25zdCByZWYgPSBzdG9yZXNbc3RvcmVfbmFtZV07XG5cdFx0XHRyZWYudW5zdWJzY3JpYmUoKTtcblx0XHR9XG5cdH0pO1xuXG5cdHJldHVybiBzdG9yZXM7XG59XG5cbi8qKlxuICogVXBkYXRlcyBhIHN0b3JlIHdpdGggYSBuZXcgdmFsdWUuXG4gKiBAcGFyYW0ge1N0b3JlPFY+fSBzdG9yZSAgdGhlIHN0b3JlIHRvIHVwZGF0ZVxuICogQHBhcmFtIHthbnl9IGV4cHJlc3Npb24gIHRoZSBleHByZXNzaW9uIHRoYXQgbXV0YXRlcyB0aGUgc3RvcmVcbiAqIEBwYXJhbSB7Vn0gbmV3X3ZhbHVlICB0aGUgbmV3IHN0b3JlIHZhbHVlXG4gKiBAdGVtcGxhdGUgVlxuICovXG5leHBvcnQgZnVuY3Rpb24gc3RvcmVfbXV0YXRlKHN0b3JlLCBleHByZXNzaW9uLCBuZXdfdmFsdWUpIHtcblx0c3RvcmUuc2V0KG5ld192YWx1ZSk7XG5cdHJldHVybiBleHByZXNzaW9uO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7U3RvcmU8bnVtYmVyPn0gc3RvcmVcbiAqIEBwYXJhbSB7bnVtYmVyfSBzdG9yZV92YWx1ZVxuICogQHBhcmFtIHsxIHwgLTF9IFtkXVxuICogQHJldHVybnMge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZV9zdG9yZShzdG9yZSwgc3RvcmVfdmFsdWUsIGQgPSAxKSB7XG5cdHN0b3JlLnNldChzdG9yZV92YWx1ZSArIGQpO1xuXHRyZXR1cm4gc3RvcmVfdmFsdWU7XG59XG5cbi8qKlxuICogQHBhcmFtIHtTdG9yZTxudW1iZXI+fSBzdG9yZVxuICogQHBhcmFtIHtudW1iZXJ9IHN0b3JlX3ZhbHVlXG4gKiBAcGFyYW0gezEgfCAtMX0gW2RdXG4gKiBAcmV0dXJucyB7bnVtYmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlX3ByZV9zdG9yZShzdG9yZSwgc3RvcmVfdmFsdWUsIGQgPSAxKSB7XG5cdGNvbnN0IHZhbHVlID0gc3RvcmVfdmFsdWUgKyBkO1xuXHRzdG9yZS5zZXQodmFsdWUpO1xuXHRyZXR1cm4gdmFsdWU7XG59XG5cbi8qKlxuICogQ2FsbGVkIGluc2lkZSBwcm9wIGdldHRlcnMgdG8gY29tbXVuaWNhdGUgdGhhdCB0aGUgcHJvcCBpcyBhIHN0b3JlIGJpbmRpbmdcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1hcmtfc3RvcmVfYmluZGluZygpIHtcblx0aXNfc3RvcmVfYmluZGluZyA9IHRydWU7XG59XG5cbi8qKlxuICogUmV0dXJucyBhIHR1cGxlIHRoYXQgaW5kaWNhdGVzIHdoZXRoZXIgYGZuKClgIHJlYWRzIGEgcHJvcCB0aGF0IGlzIGEgc3RvcmUgYmluZGluZy5cbiAqIFVzZWQgdG8gcHJldmVudCBgYmluZGluZ19wcm9wZXJ0eV9ub25fcmVhY3RpdmVgIHZhbGlkYXRpb24gZmFsc2UgcG9zaXRpdmVzIGFuZFxuICogZW5zdXJlIHRoYXQgdGhlc2UgcHJvcHMgYXJlIHRyZWF0ZWQgYXMgbXV0YWJsZSBldmVuIGluIHJ1bmVzIG1vZGVcbiAqIEB0ZW1wbGF0ZSBUXG4gKiBAcGFyYW0geygpID0+IFR9IGZuXG4gKiBAcmV0dXJucyB7W1QsIGJvb2xlYW5dfVxuICovXG5leHBvcnQgZnVuY3Rpb24gY2FwdHVyZV9zdG9yZV9iaW5kaW5nKGZuKSB7XG5cdHZhciBwcmV2aW91c19pc19zdG9yZV9iaW5kaW5nID0gaXNfc3RvcmVfYmluZGluZztcblxuXHR0cnkge1xuXHRcdGlzX3N0b3JlX2JpbmRpbmcgPSBmYWxzZTtcblx0XHRyZXR1cm4gW2ZuKCksIGlzX3N0b3JlX2JpbmRpbmddO1xuXHR9IGZpbmFsbHkge1xuXHRcdGlzX3N0b3JlX2JpbmRpbmcgPSBwcmV2aW91c19pc19zdG9yZV9iaW5kaW5nO1xuXHR9XG59XG4iLCIvKiogQGltcG9ydCB7IFNvdXJjZSB9IGZyb20gJy4vdHlwZXMuanMnICovXG5pbXBvcnQgeyBERVYgfSBmcm9tICdlc20tZW52JztcbmltcG9ydCB7XG5cdFBST1BTX0lTX0JJTkRBQkxFLFxuXHRQUk9QU19JU19JTU1VVEFCTEUsXG5cdFBST1BTX0lTX0xBWllfSU5JVElBTCxcblx0UFJPUFNfSVNfUlVORVMsXG5cdFBST1BTX0lTX1VQREFURURcbn0gZnJvbSAnLi4vLi4vLi4vY29uc3RhbnRzLmpzJztcbmltcG9ydCB7IGdldF9kZXNjcmlwdG9yLCBpc19mdW5jdGlvbiB9IGZyb20gJy4uLy4uL3NoYXJlZC91dGlscy5qcyc7XG5pbXBvcnQgeyBtdXRhYmxlX3NvdXJjZSwgc2V0LCBzb3VyY2UgfSBmcm9tICcuL3NvdXJjZXMuanMnO1xuaW1wb3J0IHsgZGVyaXZlZCwgZGVyaXZlZF9zYWZlX2VxdWFsIH0gZnJvbSAnLi9kZXJpdmVkcy5qcyc7XG5pbXBvcnQge1xuXHRhY3RpdmVfZWZmZWN0LFxuXHRnZXQsXG5cdGNhcHR1cmVkX3NpZ25hbHMsXG5cdHNldF9hY3RpdmVfZWZmZWN0LFxuXHR1bnRyYWNrLFxuXHR1cGRhdGVcbn0gZnJvbSAnLi4vcnVudGltZS5qcyc7XG5pbXBvcnQgeyBzYWZlX2VxdWFscyB9IGZyb20gJy4vZXF1YWxpdHkuanMnO1xuaW1wb3J0ICogYXMgZSBmcm9tICcuLi9lcnJvcnMuanMnO1xuaW1wb3J0IHtcblx0QlJBTkNIX0VGRkVDVCxcblx0TEVHQUNZX0RFUklWRURfUFJPUCxcblx0TEVHQUNZX1BST1BTLFxuXHRST09UX0VGRkVDVCxcblx0U1RBVEVfU1lNQk9MXG59IGZyb20gJy4uL2NvbnN0YW50cy5qcyc7XG5pbXBvcnQgeyBwcm94eSB9IGZyb20gJy4uL3Byb3h5LmpzJztcbmltcG9ydCB7IGNhcHR1cmVfc3RvcmVfYmluZGluZyB9IGZyb20gJy4vc3RvcmUuanMnO1xuaW1wb3J0IHsgbGVnYWN5X21vZGVfZmxhZyB9IGZyb20gJy4uLy4uL2ZsYWdzL2luZGV4LmpzJztcblxuLyoqXG4gKiBAcGFyYW0geygodmFsdWU/OiBudW1iZXIpID0+IG51bWJlcil9IGZuXG4gKiBAcGFyYW0gezEgfCAtMX0gW2RdXG4gKiBAcmV0dXJucyB7bnVtYmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlX3Byb3AoZm4sIGQgPSAxKSB7XG5cdGNvbnN0IHZhbHVlID0gZm4oKTtcblx0Zm4odmFsdWUgKyBkKTtcblx0cmV0dXJuIHZhbHVlO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7KCh2YWx1ZT86IG51bWJlcikgPT4gbnVtYmVyKX0gZm5cbiAqIEBwYXJhbSB7MSB8IC0xfSBbZF1cbiAqIEByZXR1cm5zIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGVfcHJlX3Byb3AoZm4sIGQgPSAxKSB7XG5cdGNvbnN0IHZhbHVlID0gZm4oKSArIGQ7XG5cdGZuKHZhbHVlKTtcblx0cmV0dXJuIHZhbHVlO1xufVxuXG4vKipcbiAqIFRoZSBwcm94eSBoYW5kbGVyIGZvciByZXN0IHByb3BzIChpLmUuIGBjb25zdCB7IHgsIC4uLnJlc3QgfSA9ICRwcm9wcygpYCkuXG4gKiBJcyBwYXNzZWQgdGhlIGZ1bGwgYCQkcHJvcHNgIG9iamVjdCBhbmQgZXhjbHVkZXMgdGhlIG5hbWVkIHByb3BzLlxuICogQHR5cGUge1Byb3h5SGFuZGxlcjx7IHByb3BzOiBSZWNvcmQ8c3RyaW5nIHwgc3ltYm9sLCB1bmtub3duPiwgZXhjbHVkZTogQXJyYXk8c3RyaW5nIHwgc3ltYm9sPiwgbmFtZT86IHN0cmluZyB9Pn19XG4gKi9cbmNvbnN0IHJlc3RfcHJvcHNfaGFuZGxlciA9IHtcblx0Z2V0KHRhcmdldCwga2V5KSB7XG5cdFx0aWYgKHRhcmdldC5leGNsdWRlLmluY2x1ZGVzKGtleSkpIHJldHVybjtcblx0XHRyZXR1cm4gdGFyZ2V0LnByb3BzW2tleV07XG5cdH0sXG5cdHNldCh0YXJnZXQsIGtleSkge1xuXHRcdGlmIChERVYpIHtcblx0XHRcdC8vIFRPRE8gc2hvdWxkIHRoaXMgaGFwcGVuIGluIHByb2QgdG9vP1xuXHRcdFx0ZS5wcm9wc19yZXN0X3JlYWRvbmx5KGAke3RhcmdldC5uYW1lfS4ke1N0cmluZyhrZXkpfWApO1xuXHRcdH1cblxuXHRcdHJldHVybiBmYWxzZTtcblx0fSxcblx0Z2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSB7XG5cdFx0aWYgKHRhcmdldC5leGNsdWRlLmluY2x1ZGVzKGtleSkpIHJldHVybjtcblx0XHRpZiAoa2V5IGluIHRhcmdldC5wcm9wcykge1xuXHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXHRcdFx0XHR2YWx1ZTogdGFyZ2V0LnByb3BzW2tleV1cblx0XHRcdH07XG5cdFx0fVxuXHR9LFxuXHRoYXModGFyZ2V0LCBrZXkpIHtcblx0XHRpZiAodGFyZ2V0LmV4Y2x1ZGUuaW5jbHVkZXMoa2V5KSkgcmV0dXJuIGZhbHNlO1xuXHRcdHJldHVybiBrZXkgaW4gdGFyZ2V0LnByb3BzO1xuXHR9LFxuXHRvd25LZXlzKHRhcmdldCkge1xuXHRcdHJldHVybiBSZWZsZWN0Lm93bktleXModGFyZ2V0LnByb3BzKS5maWx0ZXIoKGtleSkgPT4gIXRhcmdldC5leGNsdWRlLmluY2x1ZGVzKGtleSkpO1xuXHR9XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7UmVjb3JkPHN0cmluZywgdW5rbm93bj59IHByb3BzXG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBleGNsdWRlXG4gKiBAcGFyYW0ge3N0cmluZ30gW25hbWVdXG4gKiBAcmV0dXJucyB7UmVjb3JkPHN0cmluZywgdW5rbm93bj59XG4gKi9cbi8qI19fTk9fU0lERV9FRkZFQ1RTX18qL1xuZXhwb3J0IGZ1bmN0aW9uIHJlc3RfcHJvcHMocHJvcHMsIGV4Y2x1ZGUsIG5hbWUpIHtcblx0cmV0dXJuIG5ldyBQcm94eShcblx0XHRERVYgPyB7IHByb3BzLCBleGNsdWRlLCBuYW1lLCBvdGhlcjoge30sIHRvX3Byb3h5OiBbXSB9IDogeyBwcm9wcywgZXhjbHVkZSB9LFxuXHRcdHJlc3RfcHJvcHNfaGFuZGxlclxuXHQpO1xufVxuXG4vKipcbiAqIFRoZSBwcm94eSBoYW5kbGVyIGZvciBsZWdhY3kgJCRyZXN0UHJvcHMgYW5kICQkcHJvcHNcbiAqIEB0eXBlIHtQcm94eUhhbmRsZXI8eyBwcm9wczogUmVjb3JkPHN0cmluZyB8IHN5bWJvbCwgdW5rbm93bj4sIGV4Y2x1ZGU6IEFycmF5PHN0cmluZyB8IHN5bWJvbD4sIHNwZWNpYWw6IFJlY29yZDxzdHJpbmcgfCBzeW1ib2wsICh2PzogdW5rbm93bikgPT4gdW5rbm93bj4sIHZlcnNpb246IFNvdXJjZTxudW1iZXI+IH0+fX1cbiAqL1xuY29uc3QgbGVnYWN5X3Jlc3RfcHJvcHNfaGFuZGxlciA9IHtcblx0Z2V0KHRhcmdldCwga2V5KSB7XG5cdFx0aWYgKHRhcmdldC5leGNsdWRlLmluY2x1ZGVzKGtleSkpIHJldHVybjtcblx0XHRnZXQodGFyZ2V0LnZlcnNpb24pO1xuXHRcdHJldHVybiBrZXkgaW4gdGFyZ2V0LnNwZWNpYWwgPyB0YXJnZXQuc3BlY2lhbFtrZXldKCkgOiB0YXJnZXQucHJvcHNba2V5XTtcblx0fSxcblx0c2V0KHRhcmdldCwga2V5LCB2YWx1ZSkge1xuXHRcdGlmICghKGtleSBpbiB0YXJnZXQuc3BlY2lhbCkpIHtcblx0XHRcdC8vIEhhbmRsZSBwcm9wcyB0aGF0IGNhbiB0ZW1wb3JhcmlseSBnZXQgb3V0IG9mIHN5bmMgd2l0aCB0aGUgcGFyZW50XG5cdFx0XHQvKiogQHR5cGUge1JlY29yZDxzdHJpbmcsICh2PzogdW5rbm93bikgPT4gdW5rbm93bj59ICovXG5cdFx0XHR0YXJnZXQuc3BlY2lhbFtrZXldID0gcHJvcChcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGdldCBba2V5XSgpIHtcblx0XHRcdFx0XHRcdHJldHVybiB0YXJnZXQucHJvcHNba2V5XTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0sXG5cdFx0XHRcdC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAoa2V5KSxcblx0XHRcdFx0UFJPUFNfSVNfVVBEQVRFRFxuXHRcdFx0KTtcblx0XHR9XG5cblx0XHR0YXJnZXQuc3BlY2lhbFtrZXldKHZhbHVlKTtcblx0XHR1cGRhdGUodGFyZ2V0LnZlcnNpb24pOyAvLyAkJHByb3BzIGlzIGNvYXJzZS1ncmFpbmVkOiB3aGVuICQkcHJvcHMueCBpcyB1cGRhdGVkLCB1c2FnZXMgb2YgJCRwcm9wcy55IGV0YyBhcmUgYWxzbyByZXJ1blxuXHRcdHJldHVybiB0cnVlO1xuXHR9LFxuXHRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIHtcblx0XHRpZiAodGFyZ2V0LmV4Y2x1ZGUuaW5jbHVkZXMoa2V5KSkgcmV0dXJuO1xuXHRcdGlmIChrZXkgaW4gdGFyZ2V0LnByb3BzKSB7XG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0XHRcdHZhbHVlOiB0YXJnZXQucHJvcHNba2V5XVxuXHRcdFx0fTtcblx0XHR9XG5cdH0sXG5cdGRlbGV0ZVByb3BlcnR5KHRhcmdldCwga2V5KSB7XG5cdFx0Ly8gU3ZlbHRlIDQgYWxsb3dlZCBmb3IgZGVsZXRpb25zIG9uICQkcmVzdFByb3BzXG5cdFx0aWYgKHRhcmdldC5leGNsdWRlLmluY2x1ZGVzKGtleSkpIHJldHVybiB0cnVlO1xuXHRcdHRhcmdldC5leGNsdWRlLnB1c2goa2V5KTtcblx0XHR1cGRhdGUodGFyZ2V0LnZlcnNpb24pO1xuXHRcdHJldHVybiB0cnVlO1xuXHR9LFxuXHRoYXModGFyZ2V0LCBrZXkpIHtcblx0XHRpZiAodGFyZ2V0LmV4Y2x1ZGUuaW5jbHVkZXMoa2V5KSkgcmV0dXJuIGZhbHNlO1xuXHRcdHJldHVybiBrZXkgaW4gdGFyZ2V0LnByb3BzO1xuXHR9LFxuXHRvd25LZXlzKHRhcmdldCkge1xuXHRcdHJldHVybiBSZWZsZWN0Lm93bktleXModGFyZ2V0LnByb3BzKS5maWx0ZXIoKGtleSkgPT4gIXRhcmdldC5leGNsdWRlLmluY2x1ZGVzKGtleSkpO1xuXHR9XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7UmVjb3JkPHN0cmluZywgdW5rbm93bj59IHByb3BzXG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBleGNsdWRlXG4gKiBAcmV0dXJucyB7UmVjb3JkPHN0cmluZywgdW5rbm93bj59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBsZWdhY3lfcmVzdF9wcm9wcyhwcm9wcywgZXhjbHVkZSkge1xuXHRyZXR1cm4gbmV3IFByb3h5KHsgcHJvcHMsIGV4Y2x1ZGUsIHNwZWNpYWw6IHt9LCB2ZXJzaW9uOiBzb3VyY2UoMCkgfSwgbGVnYWN5X3Jlc3RfcHJvcHNfaGFuZGxlcik7XG59XG5cbi8qKlxuICogVGhlIHByb3h5IGhhbmRsZXIgZm9yIHNwcmVhZCBwcm9wcy4gSGFuZGxlcyB0aGUgaW5jb21pbmcgYXJyYXkgb2YgcHJvcHNcbiAqIHRoYXQgbG9va3MgbGlrZSBgKCkgPT4geyBkeW5hbWljOiBwcm9wcyB9LCB7IHN0YXRpYzogcHJvcCB9LCAuLmAgYW5kIHdyYXBzXG4gKiB0aGVtIHNvIHRoYXQgdGhlIHdob2xlIHRoaW5nIGlzIHBhc3NlZCB0byB0aGUgY29tcG9uZW50IGFzIHRoZSBgJCRwcm9wc2AgYXJndW1lbnQuXG4gKiBAdGVtcGxhdGUge1JlY29yZDxzdHJpbmcgfCBzeW1ib2wsIHVua25vd24+fSBUXG4gKiBAdHlwZSB7UHJveHlIYW5kbGVyPHsgcHJvcHM6IEFycmF5PFQgfCAoKCkgPT4gVCk+IH0+fX1cbiAqL1xuY29uc3Qgc3ByZWFkX3Byb3BzX2hhbmRsZXIgPSB7XG5cdGdldCh0YXJnZXQsIGtleSkge1xuXHRcdGxldCBpID0gdGFyZ2V0LnByb3BzLmxlbmd0aDtcblx0XHR3aGlsZSAoaS0tKSB7XG5cdFx0XHRsZXQgcCA9IHRhcmdldC5wcm9wc1tpXTtcblx0XHRcdGlmIChpc19mdW5jdGlvbihwKSkgcCA9IHAoKTtcblx0XHRcdGlmICh0eXBlb2YgcCA9PT0gJ29iamVjdCcgJiYgcCAhPT0gbnVsbCAmJiBrZXkgaW4gcCkgcmV0dXJuIHBba2V5XTtcblx0XHR9XG5cdH0sXG5cdHNldCh0YXJnZXQsIGtleSwgdmFsdWUpIHtcblx0XHRsZXQgaSA9IHRhcmdldC5wcm9wcy5sZW5ndGg7XG5cdFx0d2hpbGUgKGktLSkge1xuXHRcdFx0bGV0IHAgPSB0YXJnZXQucHJvcHNbaV07XG5cdFx0XHRpZiAoaXNfZnVuY3Rpb24ocCkpIHAgPSBwKCk7XG5cdFx0XHRjb25zdCBkZXNjID0gZ2V0X2Rlc2NyaXB0b3IocCwga2V5KTtcblx0XHRcdGlmIChkZXNjICYmIGRlc2Muc2V0KSB7XG5cdFx0XHRcdGRlc2Muc2V0KHZhbHVlKTtcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiBmYWxzZTtcblx0fSxcblx0Z2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSB7XG5cdFx0bGV0IGkgPSB0YXJnZXQucHJvcHMubGVuZ3RoO1xuXHRcdHdoaWxlIChpLS0pIHtcblx0XHRcdGxldCBwID0gdGFyZ2V0LnByb3BzW2ldO1xuXHRcdFx0aWYgKGlzX2Z1bmN0aW9uKHApKSBwID0gcCgpO1xuXHRcdFx0aWYgKHR5cGVvZiBwID09PSAnb2JqZWN0JyAmJiBwICE9PSBudWxsICYmIGtleSBpbiBwKSB7XG5cdFx0XHRcdGNvbnN0IGRlc2NyaXB0b3IgPSBnZXRfZGVzY3JpcHRvcihwLCBrZXkpO1xuXHRcdFx0XHRpZiAoZGVzY3JpcHRvciAmJiAhZGVzY3JpcHRvci5jb25maWd1cmFibGUpIHtcblx0XHRcdFx0XHQvLyBQcmV2ZW50IGEgXCJOb24tY29uZmlndXJhYmlsaXR5IFJlcG9ydCBFcnJvclwiOiBUaGUgdGFyZ2V0IGlzIGFuIGFycmF5LCBpdCBkb2VzXG5cdFx0XHRcdFx0Ly8gbm90IGFjdHVhbGx5IGNvbnRhaW4gdGhpcyBwcm9wZXJ0eS4gSWYgaXQgaXMgbm93IGRlc2NyaWJlZCBhcyBub24tY29uZmlndXJhYmxlLFxuXHRcdFx0XHRcdC8vIHRoZSBwcm94eSB0aHJvd3MgYSB2YWxpZGF0aW9uIGVycm9yLiBTZXR0aW5nIGl0IHRvIHRydWUgYXZvaWRzIHRoYXQuXG5cdFx0XHRcdFx0ZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBkZXNjcmlwdG9yO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblx0aGFzKHRhcmdldCwga2V5KSB7XG5cdFx0Ly8gVG8gcHJldmVudCBhIGZhbHNlIHBvc2l0aXZlIGBpc19lbnRyeV9wcm9wc2AgaW4gdGhlIGBwcm9wYCBmdW5jdGlvblxuXHRcdGlmIChrZXkgPT09IFNUQVRFX1NZTUJPTCB8fCBrZXkgPT09IExFR0FDWV9QUk9QUykgcmV0dXJuIGZhbHNlO1xuXG5cdFx0Zm9yIChsZXQgcCBvZiB0YXJnZXQucHJvcHMpIHtcblx0XHRcdGlmIChpc19mdW5jdGlvbihwKSkgcCA9IHAoKTtcblx0XHRcdGlmIChwICE9IG51bGwgJiYga2V5IGluIHApIHJldHVybiB0cnVlO1xuXHRcdH1cblxuXHRcdHJldHVybiBmYWxzZTtcblx0fSxcblx0b3duS2V5cyh0YXJnZXQpIHtcblx0XHQvKiogQHR5cGUge0FycmF5PHN0cmluZyB8IHN5bWJvbD59ICovXG5cdFx0Y29uc3Qga2V5cyA9IFtdO1xuXG5cdFx0Zm9yIChsZXQgcCBvZiB0YXJnZXQucHJvcHMpIHtcblx0XHRcdGlmIChpc19mdW5jdGlvbihwKSkgcCA9IHAoKTtcblx0XHRcdGZvciAoY29uc3Qga2V5IGluIHApIHtcblx0XHRcdFx0aWYgKCFrZXlzLmluY2x1ZGVzKGtleSkpIGtleXMucHVzaChrZXkpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBrZXlzO1xuXHR9XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7QXJyYXk8UmVjb3JkPHN0cmluZywgdW5rbm93bj4gfCAoKCkgPT4gUmVjb3JkPHN0cmluZywgdW5rbm93bj4pPn0gcHJvcHNcbiAqIEByZXR1cm5zIHthbnl9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzcHJlYWRfcHJvcHMoLi4ucHJvcHMpIHtcblx0cmV0dXJuIG5ldyBQcm94eSh7IHByb3BzIH0sIHNwcmVhZF9wcm9wc19oYW5kbGVyKTtcbn1cblxuLyoqXG4gKiBAdGVtcGxhdGUgVFxuICogQHBhcmFtIHsoKSA9PiBUfSBmblxuICogQHJldHVybnMge1R9XG4gKi9cbmZ1bmN0aW9uIHdpdGhfcGFyZW50X2JyYW5jaChmbikge1xuXHR2YXIgZWZmZWN0ID0gYWN0aXZlX2VmZmVjdDtcblx0dmFyIHByZXZpb3VzX2VmZmVjdCA9IGFjdGl2ZV9lZmZlY3Q7XG5cblx0d2hpbGUgKGVmZmVjdCAhPT0gbnVsbCAmJiAoZWZmZWN0LmYgJiAoQlJBTkNIX0VGRkVDVCB8IFJPT1RfRUZGRUNUKSkgPT09IDApIHtcblx0XHRlZmZlY3QgPSBlZmZlY3QucGFyZW50O1xuXHR9XG5cdHRyeSB7XG5cdFx0c2V0X2FjdGl2ZV9lZmZlY3QoZWZmZWN0KTtcblx0XHRyZXR1cm4gZm4oKTtcblx0fSBmaW5hbGx5IHtcblx0XHRzZXRfYWN0aXZlX2VmZmVjdChwcmV2aW91c19lZmZlY3QpO1xuXHR9XG59XG5cbi8qKlxuICogVGhpcyBmdW5jdGlvbiBpcyByZXNwb25zaWJsZSBmb3Igc3luY2hyb25pemluZyBhIHBvc3NpYmx5IGJvdW5kIHByb3Agd2l0aCB0aGUgaW5uZXIgY29tcG9uZW50IHN0YXRlLlxuICogSXQgaXMgdXNlZCB3aGVuZXZlciB0aGUgY29tcGlsZXIgc2VlcyB0aGF0IHRoZSBjb21wb25lbnQgd3JpdGVzIHRvIHRoZSBwcm9wLCBvciB3aGVuIGl0IGhhcyBhIGRlZmF1bHQgcHJvcF92YWx1ZS5cbiAqIEB0ZW1wbGF0ZSBWXG4gKiBAcGFyYW0ge1JlY29yZDxzdHJpbmcsIHVua25vd24+fSBwcm9wc1xuICogQHBhcmFtIHtzdHJpbmd9IGtleVxuICogQHBhcmFtIHtudW1iZXJ9IGZsYWdzXG4gKiBAcGFyYW0ge1YgfCAoKCkgPT4gVil9IFtmYWxsYmFja11cbiAqIEByZXR1cm5zIHsoKCkgPT4gViB8ICgoYXJnOiBWKSA9PiBWKSB8ICgoYXJnOiBWLCBtdXRhdGlvbjogYm9vbGVhbikgPT4gVikpfVxuICovXG5leHBvcnQgZnVuY3Rpb24gcHJvcChwcm9wcywga2V5LCBmbGFncywgZmFsbGJhY2spIHtcblx0dmFyIGltbXV0YWJsZSA9IChmbGFncyAmIFBST1BTX0lTX0lNTVVUQUJMRSkgIT09IDA7XG5cdHZhciBydW5lcyA9ICFsZWdhY3lfbW9kZV9mbGFnIHx8IChmbGFncyAmIFBST1BTX0lTX1JVTkVTKSAhPT0gMDtcblx0dmFyIGJpbmRhYmxlID0gKGZsYWdzICYgUFJPUFNfSVNfQklOREFCTEUpICE9PSAwO1xuXHR2YXIgbGF6eSA9IChmbGFncyAmIFBST1BTX0lTX0xBWllfSU5JVElBTCkgIT09IDA7XG5cdHZhciBpc19zdG9yZV9zdWIgPSBmYWxzZTtcblx0dmFyIHByb3BfdmFsdWU7XG5cblx0aWYgKGJpbmRhYmxlKSB7XG5cdFx0W3Byb3BfdmFsdWUsIGlzX3N0b3JlX3N1Yl0gPSBjYXB0dXJlX3N0b3JlX2JpbmRpbmcoKCkgPT4gLyoqIEB0eXBlIHtWfSAqLyAocHJvcHNba2V5XSkpO1xuXHR9IGVsc2Uge1xuXHRcdHByb3BfdmFsdWUgPSAvKiogQHR5cGUge1Z9ICovIChwcm9wc1trZXldKTtcblx0fVxuXG5cdC8vIENhbiBiZSB0aGUgY2FzZSB3aGVuIHNvbWVvbmUgZG9lcyBgbW91bnQoQ29tcG9uZW50LCBwcm9wcylgIHdpdGggYGxldCBwcm9wcyA9ICRzdGF0ZSh7Li4ufSlgXG5cdC8vIG9yIGBjcmVhdGVDbGFzc0NvbXBvbmVudChDb21wb25lbnQsIHByb3BzKWBcblx0dmFyIGlzX2VudHJ5X3Byb3BzID0gU1RBVEVfU1lNQk9MIGluIHByb3BzIHx8IExFR0FDWV9QUk9QUyBpbiBwcm9wcztcblxuXHR2YXIgc2V0dGVyID1cblx0XHRnZXRfZGVzY3JpcHRvcihwcm9wcywga2V5KT8uc2V0ID8/XG5cdFx0KGlzX2VudHJ5X3Byb3BzICYmIGJpbmRhYmxlICYmIGtleSBpbiBwcm9wcyA/ICh2KSA9PiAocHJvcHNba2V5XSA9IHYpIDogdW5kZWZpbmVkKTtcblxuXHR2YXIgZmFsbGJhY2tfdmFsdWUgPSAvKiogQHR5cGUge1Z9ICovIChmYWxsYmFjayk7XG5cdHZhciBmYWxsYmFja19kaXJ0eSA9IHRydWU7XG5cdHZhciBmYWxsYmFja191c2VkID0gZmFsc2U7XG5cblx0dmFyIGdldF9mYWxsYmFjayA9ICgpID0+IHtcblx0XHRmYWxsYmFja191c2VkID0gdHJ1ZTtcblx0XHRpZiAoZmFsbGJhY2tfZGlydHkpIHtcblx0XHRcdGZhbGxiYWNrX2RpcnR5ID0gZmFsc2U7XG5cdFx0XHRpZiAobGF6eSkge1xuXHRcdFx0XHRmYWxsYmFja192YWx1ZSA9IHVudHJhY2soLyoqIEB0eXBlIHsoKSA9PiBWfSAqLyAoZmFsbGJhY2spKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGZhbGxiYWNrX3ZhbHVlID0gLyoqIEB0eXBlIHtWfSAqLyAoZmFsbGJhY2spO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBmYWxsYmFja192YWx1ZTtcblx0fTtcblxuXHRpZiAocHJvcF92YWx1ZSA9PT0gdW5kZWZpbmVkICYmIGZhbGxiYWNrICE9PSB1bmRlZmluZWQpIHtcblx0XHRpZiAoc2V0dGVyICYmIHJ1bmVzKSB7XG5cdFx0XHRlLnByb3BzX2ludmFsaWRfdmFsdWUoa2V5KTtcblx0XHR9XG5cblx0XHRwcm9wX3ZhbHVlID0gZ2V0X2ZhbGxiYWNrKCk7XG5cdFx0aWYgKHNldHRlcikgc2V0dGVyKHByb3BfdmFsdWUpO1xuXHR9XG5cblx0LyoqIEB0eXBlIHsoKSA9PiBWfSAqL1xuXHR2YXIgZ2V0dGVyO1xuXHRpZiAocnVuZXMpIHtcblx0XHRnZXR0ZXIgPSAoKSA9PiB7XG5cdFx0XHR2YXIgdmFsdWUgPSAvKiogQHR5cGUge1Z9ICovIChwcm9wc1trZXldKTtcblx0XHRcdGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSByZXR1cm4gZ2V0X2ZhbGxiYWNrKCk7XG5cdFx0XHRmYWxsYmFja19kaXJ0eSA9IHRydWU7XG5cdFx0XHRmYWxsYmFja191c2VkID0gZmFsc2U7XG5cdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0fTtcblx0fSBlbHNlIHtcblx0XHQvLyBTdmVsdGUgNCBkaWQgbm90IHRyaWdnZXIgdXBkYXRlcyB3aGVuIGEgcHJpbWl0aXZlIHZhbHVlIHdhcyB1cGRhdGVkIHRvIHRoZSBzYW1lIHZhbHVlLlxuXHRcdC8vIFJlcGxpY2F0ZSB0aGF0IGJlaGF2aW9yIHRocm91Z2ggdXNpbmcgYSBkZXJpdmVkXG5cdFx0dmFyIGRlcml2ZWRfZ2V0dGVyID0gd2l0aF9wYXJlbnRfYnJhbmNoKCgpID0+XG5cdFx0XHQoaW1tdXRhYmxlID8gZGVyaXZlZCA6IGRlcml2ZWRfc2FmZV9lcXVhbCkoKCkgPT4gLyoqIEB0eXBlIHtWfSAqLyAocHJvcHNba2V5XSkpXG5cdFx0KTtcblx0XHRkZXJpdmVkX2dldHRlci5mIHw9IExFR0FDWV9ERVJJVkVEX1BST1A7XG5cdFx0Z2V0dGVyID0gKCkgPT4ge1xuXHRcdFx0dmFyIHZhbHVlID0gZ2V0KGRlcml2ZWRfZ2V0dGVyKTtcblx0XHRcdGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSBmYWxsYmFja192YWx1ZSA9IC8qKiBAdHlwZSB7Vn0gKi8gKHVuZGVmaW5lZCk7XG5cdFx0XHRyZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/IGZhbGxiYWNrX3ZhbHVlIDogdmFsdWU7XG5cdFx0fTtcblx0fVxuXG5cdC8vIGVhc3kgbW9kZSDigJQgcHJvcCBpcyBuZXZlciB3cml0dGVuIHRvXG5cdGlmICgoZmxhZ3MgJiBQUk9QU19JU19VUERBVEVEKSA9PT0gMCkge1xuXHRcdHJldHVybiBnZXR0ZXI7XG5cdH1cblxuXHQvLyBpbnRlcm1lZGlhdGUgbW9kZSDigJQgcHJvcCBpcyB3cml0dGVuIHRvLCBidXQgdGhlIHBhcmVudCBjb21wb25lbnQgaGFkXG5cdC8vIGBiaW5kOmZvb2Agd2hpY2ggbWVhbnMgd2UgY2FuIGp1c3QgY2FsbCBgJCRwcm9wcy5mb28gPSB2YWx1ZWAgZGlyZWN0bHlcblx0aWYgKHNldHRlcikge1xuXHRcdHZhciBsZWdhY3lfcGFyZW50ID0gcHJvcHMuJCRsZWdhY3k7XG5cdFx0cmV0dXJuIGZ1bmN0aW9uICgvKiogQHR5cGUge2FueX0gKi8gdmFsdWUsIC8qKiBAdHlwZSB7Ym9vbGVhbn0gKi8gbXV0YXRpb24pIHtcblx0XHRcdGlmIChhcmd1bWVudHMubGVuZ3RoID4gMCkge1xuXHRcdFx0XHQvLyBXZSBkb24ndCB3YW50IHRvIG5vdGlmeSBpZiB0aGUgdmFsdWUgd2FzIG11dGF0ZWQgYW5kIHRoZSBwYXJlbnQgaXMgaW4gcnVuZXMgbW9kZS5cblx0XHRcdFx0Ly8gSW4gdGhhdCBjYXNlIHRoZSBzdGF0ZSBwcm94eSAoaWYgaXQgZXhpc3RzKSBzaG91bGQgdGFrZSBjYXJlIG9mIHRoZSBub3RpZmljYXRpb24uXG5cdFx0XHRcdC8vIElmIHRoZSBwYXJlbnQgaXMgbm90IGluIHJ1bmVzIG1vZGUsIHdlIG5lZWQgdG8gbm90aWZ5IG9uIG11dGF0aW9uLCB0b28sIHRoYXQgdGhlIHByb3Bcblx0XHRcdFx0Ly8gaGFzIGNoYW5nZWQgYmVjYXVzZSB0aGUgcGFyZW50IHdpbGwgbm90IGJlIGFibGUgdG8gZGV0ZWN0IHRoZSBjaGFuZ2Ugb3RoZXJ3aXNlLlxuXHRcdFx0XHRpZiAoIXJ1bmVzIHx8ICFtdXRhdGlvbiB8fCBsZWdhY3lfcGFyZW50IHx8IGlzX3N0b3JlX3N1Yikge1xuXHRcdFx0XHRcdC8qKiBAdHlwZSB7RnVuY3Rpb259ICovIChzZXR0ZXIpKG11dGF0aW9uID8gZ2V0dGVyKCkgOiB2YWx1ZSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmV0dXJuIGdldHRlcigpO1xuXHRcdFx0fVxuXHRcdH07XG5cdH1cblxuXHQvLyBoYXJkIG1vZGUuIHRoaXMgaXMgd2hlcmUgaXQgZ2V0cyB1Z2x5IOKAlCB0aGUgdmFsdWUgaW4gdGhlIGNoaWxkIHNob3VsZFxuXHQvLyBzeW5jaHJvbml6ZSB3aXRoIHRoZSBwYXJlbnQsIGJ1dCBpdCBzaG91bGQgYWxzbyBiZSBwb3NzaWJsZSB0byB0ZW1wb3JhcmlseVxuXHQvLyBzZXQgdGhlIHZhbHVlIHRvIHNvbWV0aGluZyBlbHNlIGxvY2FsbHkuXG5cdHZhciBmcm9tX2NoaWxkID0gZmFsc2U7XG5cdHZhciB3YXNfZnJvbV9jaGlsZCA9IGZhbHNlO1xuXG5cdC8vIFRoZSBkZXJpdmVkIHJldHVybnMgdGhlIGN1cnJlbnQgdmFsdWUuIFRoZSB1bmRlcmx5aW5nIG11dGFibGVcblx0Ly8gc291cmNlIGlzIHdyaXR0ZW4gdG8gZnJvbSB2YXJpb3VzIHBsYWNlcyB0byBwZXJzaXN0IHRoaXMgdmFsdWUuXG5cdHZhciBpbm5lcl9jdXJyZW50X3ZhbHVlID0gbXV0YWJsZV9zb3VyY2UocHJvcF92YWx1ZSk7XG5cdHZhciBjdXJyZW50X3ZhbHVlID0gd2l0aF9wYXJlbnRfYnJhbmNoKCgpID0+XG5cdFx0ZGVyaXZlZCgoKSA9PiB7XG5cdFx0XHR2YXIgcGFyZW50X3ZhbHVlID0gZ2V0dGVyKCk7XG5cdFx0XHR2YXIgY2hpbGRfdmFsdWUgPSBnZXQoaW5uZXJfY3VycmVudF92YWx1ZSk7XG5cblx0XHRcdGlmIChmcm9tX2NoaWxkKSB7XG5cdFx0XHRcdGZyb21fY2hpbGQgPSBmYWxzZTtcblx0XHRcdFx0d2FzX2Zyb21fY2hpbGQgPSB0cnVlO1xuXHRcdFx0XHRyZXR1cm4gY2hpbGRfdmFsdWU7XG5cdFx0XHR9XG5cblx0XHRcdHdhc19mcm9tX2NoaWxkID0gZmFsc2U7XG5cdFx0XHRyZXR1cm4gKGlubmVyX2N1cnJlbnRfdmFsdWUudiA9IHBhcmVudF92YWx1ZSk7XG5cdFx0fSlcblx0KTtcblxuXHRpZiAoIWltbXV0YWJsZSkgY3VycmVudF92YWx1ZS5lcXVhbHMgPSBzYWZlX2VxdWFscztcblxuXHRyZXR1cm4gZnVuY3Rpb24gKC8qKiBAdHlwZSB7YW55fSAqLyB2YWx1ZSwgLyoqIEB0eXBlIHtib29sZWFufSAqLyBtdXRhdGlvbikge1xuXHRcdC8vIGxlZ2FjeSBub25zZW5zZSDigJQgbmVlZCB0byBlbnN1cmUgdGhlIHNvdXJjZSBpcyBpbnZhbGlkYXRlZCB3aGVuIG5lY2Vzc2FyeVxuXHRcdC8vIGFsc28gbmVlZGVkIGZvciB3aGVuIGhhbmRsaW5nIGluc3BlY3QgbG9naWMgc28gd2UgY2FuIGluc3BlY3QgdGhlIGNvcnJlY3Qgc291cmNlIHNpZ25hbFxuXHRcdGlmIChjYXB0dXJlZF9zaWduYWxzICE9PSBudWxsKSB7XG5cdFx0XHQvLyBzZXQgdGhpcyBzbyB0aGF0IHdlIGRvbid0IHJlc2V0IHRvIHRoZSBwYXJlbnQgdmFsdWUgaWYgYGRgXG5cdFx0XHQvLyBpcyBpbnZhbGlkYXRlZCBiZWNhdXNlIG9mIGBpbnZhbGlkYXRlX2lubmVyX3NpZ25hbHNgIChyYXRoZXJcblx0XHRcdC8vIHRoYW4gYmVjYXVzZSB0aGUgcGFyZW50IG9yIGNoaWxkIHZhbHVlIGNoYW5nZWQpXG5cdFx0XHRmcm9tX2NoaWxkID0gd2FzX2Zyb21fY2hpbGQ7XG5cdFx0XHQvLyBpbnZva2UgZ2V0dGVycyBzbyB0aGF0IHNpZ25hbHMgYXJlIHBpY2tlZCB1cCBieSBgaW52YWxpZGF0ZV9pbm5lcl9zaWduYWxzYFxuXHRcdFx0Z2V0dGVyKCk7XG5cdFx0XHRnZXQoaW5uZXJfY3VycmVudF92YWx1ZSk7XG5cdFx0fVxuXG5cdFx0aWYgKGFyZ3VtZW50cy5sZW5ndGggPiAwKSB7XG5cdFx0XHRjb25zdCBuZXdfdmFsdWUgPSBtdXRhdGlvbiA/IGdldChjdXJyZW50X3ZhbHVlKSA6IHJ1bmVzICYmIGJpbmRhYmxlID8gcHJveHkodmFsdWUpIDogdmFsdWU7XG5cblx0XHRcdGlmICghY3VycmVudF92YWx1ZS5lcXVhbHMobmV3X3ZhbHVlKSkge1xuXHRcdFx0XHRmcm9tX2NoaWxkID0gdHJ1ZTtcblx0XHRcdFx0c2V0KGlubmVyX2N1cnJlbnRfdmFsdWUsIG5ld192YWx1ZSk7XG5cdFx0XHRcdC8vIFRvIGVuc3VyZSB0aGUgZmFsbGJhY2sgdmFsdWUgaXMgY29uc2lzdGVudCB3aGVuIHVzZWQgd2l0aCBwcm94aWVzLCB3ZVxuXHRcdFx0XHQvLyB1cGRhdGUgdGhlIGxvY2FsIGZhbGxiYWNrX3ZhbHVlLCBidXQgb25seSBpZiB0aGUgZmFsbGJhY2sgaXMgYWN0aXZlbHkgdXNlZFxuXHRcdFx0XHRpZiAoZmFsbGJhY2tfdXNlZCAmJiBmYWxsYmFja192YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdFx0ZmFsbGJhY2tfdmFsdWUgPSBuZXdfdmFsdWU7XG5cdFx0XHRcdH1cblx0XHRcdFx0dW50cmFjaygoKSA9PiBnZXQoY3VycmVudF92YWx1ZSkpOyAvLyBmb3JjZSBhIHN5bmNocm9uaXNhdGlvbiBpbW1lZGlhdGVseVxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0fVxuXHRcdHJldHVybiBnZXQoY3VycmVudF92YWx1ZSk7XG5cdH07XG59XG4iLCIvKiogQGltcG9ydCB7IENvbXBvbmVudENvbnN0cnVjdG9yT3B0aW9ucywgQ29tcG9uZW50VHlwZSwgU3ZlbHRlQ29tcG9uZW50LCBDb21wb25lbnQgfSBmcm9tICdzdmVsdGUnICovXG5pbXBvcnQgeyBESVJUWSwgTEVHQUNZX1BST1BTLCBNQVlCRV9ESVJUWSB9IGZyb20gJy4uL2ludGVybmFsL2NsaWVudC9jb25zdGFudHMuanMnO1xuaW1wb3J0IHsgdXNlcl9wcmVfZWZmZWN0IH0gZnJvbSAnLi4vaW50ZXJuYWwvY2xpZW50L3JlYWN0aXZpdHkvZWZmZWN0cy5qcyc7XG5pbXBvcnQgeyBtdXRhYmxlX3NvdXJjZSwgc2V0IH0gZnJvbSAnLi4vaW50ZXJuYWwvY2xpZW50L3JlYWN0aXZpdHkvc291cmNlcy5qcyc7XG5pbXBvcnQgeyBoeWRyYXRlLCBtb3VudCwgdW5tb3VudCB9IGZyb20gJy4uL2ludGVybmFsL2NsaWVudC9yZW5kZXIuanMnO1xuaW1wb3J0IHtcblx0YWN0aXZlX2VmZmVjdCxcblx0Y29tcG9uZW50X2NvbnRleHQsXG5cdGRldl9jdXJyZW50X2NvbXBvbmVudF9mdW5jdGlvbixcblx0Zmx1c2hfc3luYyxcblx0Z2V0LFxuXHRzZXRfc2lnbmFsX3N0YXR1c1xufSBmcm9tICcuLi9pbnRlcm5hbC9jbGllbnQvcnVudGltZS5qcyc7XG5pbXBvcnQgeyBsaWZlY3ljbGVfb3V0c2lkZV9jb21wb25lbnQgfSBmcm9tICcuLi9pbnRlcm5hbC9zaGFyZWQvZXJyb3JzLmpzJztcbmltcG9ydCB7IGRlZmluZV9wcm9wZXJ0eSwgaXNfYXJyYXkgfSBmcm9tICcuLi9pbnRlcm5hbC9zaGFyZWQvdXRpbHMuanMnO1xuaW1wb3J0ICogYXMgdyBmcm9tICcuLi9pbnRlcm5hbC9jbGllbnQvd2FybmluZ3MuanMnO1xuaW1wb3J0IHsgREVWIH0gZnJvbSAnZXNtLWVudic7XG5pbXBvcnQgeyBGSUxFTkFNRSB9IGZyb20gJy4uL2NvbnN0YW50cy5qcyc7XG5cbi8qKlxuICogVGFrZXMgdGhlIHNhbWUgb3B0aW9ucyBhcyBhIFN2ZWx0ZSA0IGNvbXBvbmVudCBhbmQgdGhlIGNvbXBvbmVudCBmdW5jdGlvbiBhbmQgcmV0dXJucyBhIFN2ZWx0ZSA0IGNvbXBhdGlibGUgY29tcG9uZW50LlxuICpcbiAqIEBkZXByZWNhdGVkIFVzZSB0aGlzIG9ubHkgYXMgYSB0ZW1wb3Jhcnkgc29sdXRpb24gdG8gbWlncmF0ZSB5b3VyIGltcGVyYXRpdmUgY29tcG9uZW50IGNvZGUgdG8gU3ZlbHRlIDUuXG4gKlxuICogQHRlbXBsYXRlIHtSZWNvcmQ8c3RyaW5nLCBhbnk+fSBQcm9wc1xuICogQHRlbXBsYXRlIHtSZWNvcmQ8c3RyaW5nLCBhbnk+fSBFeHBvcnRzXG4gKiBAdGVtcGxhdGUge1JlY29yZDxzdHJpbmcsIGFueT59IEV2ZW50c1xuICogQHRlbXBsYXRlIHtSZWNvcmQ8c3RyaW5nLCBhbnk+fSBTbG90c1xuICpcbiAqIEBwYXJhbSB7Q29tcG9uZW50Q29uc3RydWN0b3JPcHRpb25zPFByb3BzPiAmIHtcbiAqIFx0Y29tcG9uZW50OiBDb21wb25lbnRUeXBlPFN2ZWx0ZUNvbXBvbmVudDxQcm9wcywgRXZlbnRzLCBTbG90cz4+IHwgQ29tcG9uZW50PFByb3BzPjtcbiAqIH19IG9wdGlvbnNcbiAqIEByZXR1cm5zIHtTdmVsdGVDb21wb25lbnQ8UHJvcHMsIEV2ZW50cywgU2xvdHM+ICYgRXhwb3J0c31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUNsYXNzQ29tcG9uZW50KG9wdGlvbnMpIHtcblx0Ly8gQHRzLWV4cGVjdC1lcnJvciAkJHByb3BfZGVmIGV0YyBhcmUgbm90IGFjdHVhbGx5IGRlZmluZWRcblx0cmV0dXJuIG5ldyBTdmVsdGU0Q29tcG9uZW50KG9wdGlvbnMpO1xufVxuXG4vKipcbiAqIFRha2VzIHRoZSBjb21wb25lbnQgZnVuY3Rpb24gYW5kIHJldHVybnMgYSBTdmVsdGUgNCBjb21wYXRpYmxlIGNvbXBvbmVudCBjb25zdHJ1Y3Rvci5cbiAqXG4gKiBAZGVwcmVjYXRlZCBVc2UgdGhpcyBvbmx5IGFzIGEgdGVtcG9yYXJ5IHNvbHV0aW9uIHRvIG1pZ3JhdGUgeW91ciBpbXBlcmF0aXZlIGNvbXBvbmVudCBjb2RlIHRvIFN2ZWx0ZSA1LlxuICpcbiAqIEB0ZW1wbGF0ZSB7UmVjb3JkPHN0cmluZywgYW55Pn0gUHJvcHNcbiAqIEB0ZW1wbGF0ZSB7UmVjb3JkPHN0cmluZywgYW55Pn0gRXhwb3J0c1xuICogQHRlbXBsYXRlIHtSZWNvcmQ8c3RyaW5nLCBhbnk+fSBFdmVudHNcbiAqIEB0ZW1wbGF0ZSB7UmVjb3JkPHN0cmluZywgYW55Pn0gU2xvdHNcbiAqXG4gKiBAcGFyYW0ge1N2ZWx0ZUNvbXBvbmVudDxQcm9wcywgRXZlbnRzLCBTbG90cz4gfCBDb21wb25lbnQ8UHJvcHM+fSBjb21wb25lbnRcbiAqIEByZXR1cm5zIHtDb21wb25lbnRUeXBlPFN2ZWx0ZUNvbXBvbmVudDxQcm9wcywgRXZlbnRzLCBTbG90cz4gJiBFeHBvcnRzPn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFzQ2xhc3NDb21wb25lbnQoY29tcG9uZW50KSB7XG5cdC8vIEB0cy1leHBlY3QtZXJyb3IgJCRwcm9wX2RlZiBldGMgYXJlIG5vdCBhY3R1YWxseSBkZWZpbmVkXG5cdHJldHVybiBjbGFzcyBleHRlbmRzIFN2ZWx0ZTRDb21wb25lbnQge1xuXHRcdC8qKiBAcGFyYW0ge2FueX0gb3B0aW9ucyAqL1xuXHRcdGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcblx0XHRcdHN1cGVyKHtcblx0XHRcdFx0Y29tcG9uZW50LFxuXHRcdFx0XHQuLi5vcHRpb25zXG5cdFx0XHR9KTtcblx0XHR9XG5cdH07XG59XG5cbi8qKlxuICogU3VwcG9ydCB1c2luZyB0aGUgY29tcG9uZW50IGFzIGJvdGggYSBjbGFzcyBhbmQgZnVuY3Rpb24gZHVyaW5nIHRoZSB0cmFuc2l0aW9uIHBlcmlvZFxuICogQHR5cGVkZWYgIHt7bmV3IChvOiBDb21wb25lbnRDb25zdHJ1Y3Rvck9wdGlvbnMpOiBTdmVsdGVDb21wb25lbnQ7KC4uLmFyZ3M6IFBhcmFtZXRlcnM8Q29tcG9uZW50PFJlY29yZDxzdHJpbmcsIGFueT4+Pik6IFJldHVyblR5cGU8Q29tcG9uZW50PFJlY29yZDxzdHJpbmcsIGFueT4sIFJlY29yZDxzdHJpbmcsIGFueT4+Pjt9fSBMZWdhY3lDb21wb25lbnRUeXBlXG4gKi9cblxuY2xhc3MgU3ZlbHRlNENvbXBvbmVudCB7XG5cdC8qKiBAdHlwZSB7YW55fSAqL1xuXHQjZXZlbnRzO1xuXG5cdC8qKiBAdHlwZSB7UmVjb3JkPHN0cmluZywgYW55Pn0gKi9cblx0I2luc3RhbmNlO1xuXG5cdC8qKlxuXHQgKiBAcGFyYW0ge0NvbXBvbmVudENvbnN0cnVjdG9yT3B0aW9ucyAmIHtcblx0ICogIGNvbXBvbmVudDogYW55O1xuXHQgKiB9fSBvcHRpb25zXG5cdCAqL1xuXHRjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG5cdFx0dmFyIHNvdXJjZXMgPSBuZXcgTWFwKCk7XG5cblx0XHQvKipcblx0XHQgKiBAcGFyYW0ge3N0cmluZyB8IHN5bWJvbH0ga2V5XG5cdFx0ICogQHBhcmFtIHt1bmtub3dufSB2YWx1ZVxuXHRcdCAqL1xuXHRcdHZhciBhZGRfc291cmNlID0gKGtleSwgdmFsdWUpID0+IHtcblx0XHRcdHZhciBzID0gbXV0YWJsZV9zb3VyY2UodmFsdWUpO1xuXHRcdFx0c291cmNlcy5zZXQoa2V5LCBzKTtcblx0XHRcdHJldHVybiBzO1xuXHRcdH07XG5cblx0XHQvLyBSZXBsaWNhdGUgY29hcnNlLWdyYWluZWQgcHJvcHMgdGhyb3VnaCBhIHByb3h5IHRoYXQgaGFzIGEgdmVyc2lvbiBzb3VyY2UgZm9yXG5cdFx0Ly8gZWFjaCBwcm9wZXJ0eSwgd2hpY2ggaXMgaW5jcmVtZW50ZWQgb24gdXBkYXRlcyB0byB0aGUgcHJvcGVydHkgaXRzZWxmLiBEbyBub3Rcblx0XHQvLyB1c2Ugb3VyICRzdGF0ZSBwcm94eSBiZWNhdXNlIHRoYXQgb25lIGhhcyBmaW5lLWdyYWluZWQgcmVhY3Rpdml0eS5cblx0XHRjb25zdCBwcm9wcyA9IG5ldyBQcm94eShcblx0XHRcdHsgLi4uKG9wdGlvbnMucHJvcHMgfHwge30pLCAkJGV2ZW50czoge30gfSxcblx0XHRcdHtcblx0XHRcdFx0Z2V0KHRhcmdldCwgcHJvcCkge1xuXHRcdFx0XHRcdHJldHVybiBnZXQoc291cmNlcy5nZXQocHJvcCkgPz8gYWRkX3NvdXJjZShwcm9wLCBSZWZsZWN0LmdldCh0YXJnZXQsIHByb3ApKSk7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdGhhcyh0YXJnZXQsIHByb3ApIHtcblx0XHRcdFx0XHQvLyBOZWNlc3NhcnkgdG8gbm90IHRocm93IFwiaW52YWxpZCBiaW5kaW5nXCIgdmFsaWRhdGlvbiBlcnJvcnMgb24gdGhlIGNvbXBvbmVudCBzaWRlXG5cdFx0XHRcdFx0aWYgKHByb3AgPT09IExFR0FDWV9QUk9QUykgcmV0dXJuIHRydWU7XG5cblx0XHRcdFx0XHRnZXQoc291cmNlcy5nZXQocHJvcCkgPz8gYWRkX3NvdXJjZShwcm9wLCBSZWZsZWN0LmdldCh0YXJnZXQsIHByb3ApKSk7XG5cdFx0XHRcdFx0cmV0dXJuIFJlZmxlY3QuaGFzKHRhcmdldCwgcHJvcCk7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdHNldCh0YXJnZXQsIHByb3AsIHZhbHVlKSB7XG5cdFx0XHRcdFx0c2V0KHNvdXJjZXMuZ2V0KHByb3ApID8/IGFkZF9zb3VyY2UocHJvcCwgdmFsdWUpLCB2YWx1ZSk7XG5cdFx0XHRcdFx0cmV0dXJuIFJlZmxlY3Quc2V0KHRhcmdldCwgcHJvcCwgdmFsdWUpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0KTtcblxuXHRcdHRoaXMuI2luc3RhbmNlID0gKG9wdGlvbnMuaHlkcmF0ZSA/IGh5ZHJhdGUgOiBtb3VudCkob3B0aW9ucy5jb21wb25lbnQsIHtcblx0XHRcdHRhcmdldDogb3B0aW9ucy50YXJnZXQsXG5cdFx0XHRhbmNob3I6IG9wdGlvbnMuYW5jaG9yLFxuXHRcdFx0cHJvcHMsXG5cdFx0XHRjb250ZXh0OiBvcHRpb25zLmNvbnRleHQsXG5cdFx0XHRpbnRybzogb3B0aW9ucy5pbnRybyA/PyBmYWxzZSxcblx0XHRcdHJlY292ZXI6IG9wdGlvbnMucmVjb3ZlclxuXHRcdH0pO1xuXG5cdFx0Ly8gV2UgZG9uJ3QgZmx1c2hfc3luYyBmb3IgY3VzdG9tIGVsZW1lbnQgd3JhcHBlcnMgb3IgaWYgdGhlIHVzZXIgZG9lc24ndCB3YW50IGl0XG5cdFx0aWYgKCFvcHRpb25zPy5wcm9wcz8uJCRob3N0IHx8IG9wdGlvbnMuc3luYyA9PT0gZmFsc2UpIHtcblx0XHRcdGZsdXNoX3N5bmMoKTtcblx0XHR9XG5cblx0XHR0aGlzLiNldmVudHMgPSBwcm9wcy4kJGV2ZW50cztcblxuXHRcdGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHRoaXMuI2luc3RhbmNlKSkge1xuXHRcdFx0aWYgKGtleSA9PT0gJyRzZXQnIHx8IGtleSA9PT0gJyRkZXN0cm95JyB8fCBrZXkgPT09ICckb24nKSBjb250aW51ZTtcblx0XHRcdGRlZmluZV9wcm9wZXJ0eSh0aGlzLCBrZXksIHtcblx0XHRcdFx0Z2V0KCkge1xuXHRcdFx0XHRcdHJldHVybiB0aGlzLiNpbnN0YW5jZVtrZXldO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHQvKiogQHBhcmFtIHthbnl9IHZhbHVlICovXG5cdFx0XHRcdHNldCh2YWx1ZSkge1xuXHRcdFx0XHRcdHRoaXMuI2luc3RhbmNlW2tleV0gPSB2YWx1ZTtcblx0XHRcdFx0fSxcblx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZVxuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0dGhpcy4jaW5zdGFuY2UuJHNldCA9IC8qKiBAcGFyYW0ge1JlY29yZDxzdHJpbmcsIGFueT59IG5leHQgKi8gKG5leHQpID0+IHtcblx0XHRcdE9iamVjdC5hc3NpZ24ocHJvcHMsIG5leHQpO1xuXHRcdH07XG5cblx0XHR0aGlzLiNpbnN0YW5jZS4kZGVzdHJveSA9ICgpID0+IHtcblx0XHRcdHVubW91bnQodGhpcy4jaW5zdGFuY2UpO1xuXHRcdH07XG5cdH1cblxuXHQvKiogQHBhcmFtIHtSZWNvcmQ8c3RyaW5nLCBhbnk+fSBwcm9wcyAqL1xuXHQkc2V0KHByb3BzKSB7XG5cdFx0dGhpcy4jaW5zdGFuY2UuJHNldChwcm9wcyk7XG5cdH1cblxuXHQvKipcblx0ICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50XG5cdCAqIEBwYXJhbSB7KC4uLmFyZ3M6IGFueVtdKSA9PiBhbnl9IGNhbGxiYWNrXG5cdCAqIEByZXR1cm5zIHthbnl9XG5cdCAqL1xuXHQkb24oZXZlbnQsIGNhbGxiYWNrKSB7XG5cdFx0dGhpcy4jZXZlbnRzW2V2ZW50XSA9IHRoaXMuI2V2ZW50c1tldmVudF0gfHwgW107XG5cblx0XHQvKiogQHBhcmFtIHthbnlbXX0gYXJncyAqL1xuXHRcdGNvbnN0IGNiID0gKC4uLmFyZ3MpID0+IGNhbGxiYWNrLmNhbGwodGhpcywgLi4uYXJncyk7XG5cdFx0dGhpcy4jZXZlbnRzW2V2ZW50XS5wdXNoKGNiKTtcblx0XHRyZXR1cm4gKCkgPT4ge1xuXHRcdFx0dGhpcy4jZXZlbnRzW2V2ZW50XSA9IHRoaXMuI2V2ZW50c1tldmVudF0uZmlsdGVyKC8qKiBAcGFyYW0ge2FueX0gZm4gKi8gKGZuKSA9PiBmbiAhPT0gY2IpO1xuXHRcdH07XG5cdH1cblxuXHQkZGVzdHJveSgpIHtcblx0XHR0aGlzLiNpbnN0YW5jZS4kZGVzdHJveSgpO1xuXHR9XG59XG5cbi8qKlxuICogUnVucyB0aGUgZ2l2ZW4gZnVuY3Rpb24gb25jZSBpbW1lZGlhdGVseSBvbiB0aGUgc2VydmVyLCBhbmQgd29ya3MgbGlrZSBgJGVmZmVjdC5wcmVgIG9uIHRoZSBjbGllbnQuXG4gKlxuICogQGRlcHJlY2F0ZWQgVXNlIHRoaXMgb25seSBhcyBhIHRlbXBvcmFyeSBzb2x1dGlvbiB0byBtaWdyYXRlIHlvdXIgY29tcG9uZW50IGNvZGUgdG8gU3ZlbHRlIDUuXG4gKiBAcGFyYW0geygpID0+IHZvaWQgfCAoKCkgPT4gdm9pZCl9IGZuXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJ1bihmbikge1xuXHR1c2VyX3ByZV9lZmZlY3QoKCkgPT4ge1xuXHRcdGZuKCk7XG5cdFx0dmFyIGVmZmVjdCA9IC8qKiBAdHlwZSB7aW1wb3J0KCcjY2xpZW50JykuRWZmZWN0fSAqLyAoYWN0aXZlX2VmZmVjdCk7XG5cdFx0Ly8gSWYgdGhlIGVmZmVjdCBpcyBpbW1lZGlhdGVseSBtYWRlIGRpcnR5IGFnYWluLCBtYXJrIGl0IGFzIG1heWJlIGRpcnR5IHRvIGVtdWxhdGUgbGVnYWN5IGJlaGF2aW91clxuXHRcdGlmICgoZWZmZWN0LmYgJiBESVJUWSkgIT09IDApIHtcblx0XHRcdGxldCBmaWxlbmFtZSA9IFwiYSBmaWxlICh3ZSBjYW4ndCBrbm93IHdoaWNoIG9uZSlcIjtcblx0XHRcdGlmIChERVYpIHtcblx0XHRcdFx0Ly8gQHRzLWlnbm9yZVxuXHRcdFx0XHRmaWxlbmFtZSA9IGRldl9jdXJyZW50X2NvbXBvbmVudF9mdW5jdGlvbj8uW0ZJTEVOQU1FXSA/PyBmaWxlbmFtZTtcblx0XHRcdH1cblx0XHRcdHcubGVnYWN5X3JlY3Vyc2l2ZV9yZWFjdGl2ZV9ibG9jayhmaWxlbmFtZSk7XG5cdFx0XHRzZXRfc2lnbmFsX3N0YXR1cyhlZmZlY3QsIE1BWUJFX0RJUlRZKTtcblx0XHR9XG5cdH0pO1xufVxuXG4vKipcbiAqIEZ1bmN0aW9uIHRvIG1pbWljIHRoZSBtdWx0aXBsZSBsaXN0ZW5lcnMgYXZhaWxhYmxlIGluIHN2ZWx0ZSA0XG4gKiBAZGVwcmVjYXRlZFxuICogQHBhcmFtIHtFdmVudExpc3RlbmVyW119IGhhbmRsZXJzXG4gKiBAcmV0dXJucyB7RXZlbnRMaXN0ZW5lcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGhhbmRsZXJzKC4uLmhhbmRsZXJzKSB7XG5cdHJldHVybiBmdW5jdGlvbiAoZXZlbnQpIHtcblx0XHRjb25zdCB7IHN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiB9ID0gZXZlbnQ7XG5cdFx0bGV0IHN0b3BwZWQgPSBmYWxzZTtcblxuXHRcdGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiA9ICgpID0+IHtcblx0XHRcdHN0b3BwZWQgPSB0cnVlO1xuXHRcdFx0c3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uLmNhbGwoZXZlbnQpO1xuXHRcdH07XG5cblx0XHRjb25zdCBlcnJvcnMgPSBbXTtcblxuXHRcdGZvciAoY29uc3QgaGFuZGxlciBvZiBoYW5kbGVycykge1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0Ly8gQHRzLWV4cGVjdC1lcnJvciBgdGhpc2AgaXMgbm90IHR5cGVkXG5cdFx0XHRcdGhhbmRsZXI/LmNhbGwodGhpcywgZXZlbnQpO1xuXHRcdFx0fSBjYXRjaCAoZSkge1xuXHRcdFx0XHRlcnJvcnMucHVzaChlKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKHN0b3BwZWQpIHtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Zm9yIChsZXQgZXJyb3Igb2YgZXJyb3JzKSB7XG5cdFx0XHRxdWV1ZU1pY3JvdGFzaygoKSA9PiB7XG5cdFx0XHRcdHRocm93IGVycm9yO1xuXHRcdFx0fSk7XG5cdFx0fVxuXHR9O1xufVxuXG4vKipcbiAqIEZ1bmN0aW9uIHRvIGNyZWF0ZSBhIGBidWJibGVgIGZ1bmN0aW9uIHRoYXQgbWltaWMgdGhlIGJlaGF2aW9yIG9mIGBvbjpjbGlja2Agd2l0aG91dCBoYW5kbGVyIGF2YWlsYWJsZSBpbiBzdmVsdGUgNC5cbiAqIEBkZXByZWNhdGVkIFVzZSB0aGlzIG9ubHkgYXMgYSB0ZW1wb3Jhcnkgc29sdXRpb24gdG8gbWlncmF0ZSB5b3VyIGF1dG9tYXRpY2FsbHkgZGVsZWdhdGVkIGV2ZW50cyBpbiBTdmVsdGUgNS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUJ1YmJsZXIoKSB7XG5cdGNvbnN0IGFjdGl2ZV9jb21wb25lbnRfY29udGV4dCA9IGNvbXBvbmVudF9jb250ZXh0O1xuXHRpZiAoYWN0aXZlX2NvbXBvbmVudF9jb250ZXh0ID09PSBudWxsKSB7XG5cdFx0bGlmZWN5Y2xlX291dHNpZGVfY29tcG9uZW50KCdjcmVhdGVCdWJibGVyJyk7XG5cdH1cblxuXHRyZXR1cm4gKC8qKkB0eXBlIHtzdHJpbmd9Ki8gdHlwZSkgPT4gKC8qKkB0eXBlIHtFdmVudH0qLyBldmVudCkgPT4ge1xuXHRcdGNvbnN0IGV2ZW50cyA9IC8qKiBAdHlwZSB7UmVjb3JkPHN0cmluZywgRnVuY3Rpb24gfCBGdW5jdGlvbltdPn0gKi8gKFxuXHRcdFx0YWN0aXZlX2NvbXBvbmVudF9jb250ZXh0LnMuJCRldmVudHNcblx0XHQpPy5bLyoqIEB0eXBlIHthbnl9ICovICh0eXBlKV07XG5cblx0XHRpZiAoZXZlbnRzKSB7XG5cdFx0XHRjb25zdCBjYWxsYmFja3MgPSBpc19hcnJheShldmVudHMpID8gZXZlbnRzLnNsaWNlKCkgOiBbZXZlbnRzXTtcblx0XHRcdGZvciAoY29uc3QgZm4gb2YgY2FsbGJhY2tzKSB7XG5cdFx0XHRcdGZuLmNhbGwoYWN0aXZlX2NvbXBvbmVudF9jb250ZXh0LngsIGV2ZW50KTtcblx0XHRcdH1cblx0XHRcdHJldHVybiAhZXZlbnQuZGVmYXVsdFByZXZlbnRlZDtcblx0XHR9XG5cdFx0cmV0dXJuIHRydWU7XG5cdH07XG59XG5cbmV4cG9ydCB7XG5cdG9uY2UsXG5cdHByZXZlbnREZWZhdWx0LFxuXHRzZWxmLFxuXHRzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24sXG5cdHN0b3BQcm9wYWdhdGlvbixcblx0dHJ1c3RlZCxcblx0cGFzc2l2ZSxcblx0bm9ucGFzc2l2ZVxufSBmcm9tICcuLi9pbnRlcm5hbC9jbGllbnQvZG9tL2xlZ2FjeS9ldmVudC1tb2RpZmllcnMuanMnO1xuIiwiLyoqIEBpbXBvcnQgeyBDb21wb25lbnRDb250ZXh0LCBDb21wb25lbnRDb250ZXh0TGVnYWN5IH0gZnJvbSAnI2NsaWVudCcgKi9cbi8qKiBAaW1wb3J0IHsgRXZlbnREaXNwYXRjaGVyIH0gZnJvbSAnLi9pbmRleC5qcycgKi9cbi8qKiBAaW1wb3J0IHsgTm90RnVuY3Rpb24gfSBmcm9tICcuL2ludGVybmFsL3R5cGVzLmpzJyAqL1xuaW1wb3J0IHsgY29tcG9uZW50X2NvbnRleHQsIGZsdXNoX3N5bmMsIHVudHJhY2sgfSBmcm9tICcuL2ludGVybmFsL2NsaWVudC9ydW50aW1lLmpzJztcbmltcG9ydCB7IGlzX2FycmF5IH0gZnJvbSAnLi9pbnRlcm5hbC9zaGFyZWQvdXRpbHMuanMnO1xuaW1wb3J0IHsgdXNlcl9lZmZlY3QgfSBmcm9tICcuL2ludGVybmFsL2NsaWVudC9pbmRleC5qcyc7XG5pbXBvcnQgKiBhcyBlIGZyb20gJy4vaW50ZXJuYWwvY2xpZW50L2Vycm9ycy5qcyc7XG5pbXBvcnQgeyBsaWZlY3ljbGVfb3V0c2lkZV9jb21wb25lbnQgfSBmcm9tICcuL2ludGVybmFsL3NoYXJlZC9lcnJvcnMuanMnO1xuaW1wb3J0IHsgbGVnYWN5X21vZGVfZmxhZyB9IGZyb20gJy4vaW50ZXJuYWwvZmxhZ3MvaW5kZXguanMnO1xuXG4vKipcbiAqIFRoZSBgb25Nb3VudGAgZnVuY3Rpb24gc2NoZWR1bGVzIGEgY2FsbGJhY2sgdG8gcnVuIGFzIHNvb24gYXMgdGhlIGNvbXBvbmVudCBoYXMgYmVlbiBtb3VudGVkIHRvIHRoZSBET00uXG4gKiBJdCBtdXN0IGJlIGNhbGxlZCBkdXJpbmcgdGhlIGNvbXBvbmVudCdzIGluaXRpYWxpc2F0aW9uIChidXQgZG9lc24ndCBuZWVkIHRvIGxpdmUgKmluc2lkZSogdGhlIGNvbXBvbmVudDtcbiAqIGl0IGNhbiBiZSBjYWxsZWQgZnJvbSBhbiBleHRlcm5hbCBtb2R1bGUpLlxuICpcbiAqIElmIGEgZnVuY3Rpb24gaXMgcmV0dXJuZWQgX3N5bmNocm9ub3VzbHlfIGZyb20gYG9uTW91bnRgLCBpdCB3aWxsIGJlIGNhbGxlZCB3aGVuIHRoZSBjb21wb25lbnQgaXMgdW5tb3VudGVkLlxuICpcbiAqIGBvbk1vdW50YCBkb2VzIG5vdCBydW4gaW5zaWRlIFtzZXJ2ZXItc2lkZSBjb21wb25lbnRzXShodHRwczovL3N2ZWx0ZS5kZXYvZG9jcy9zdmVsdGUvc3ZlbHRlLXNlcnZlciNyZW5kZXIpLlxuICpcbiAqIEB0ZW1wbGF0ZSBUXG4gKiBAcGFyYW0geygpID0+IE5vdEZ1bmN0aW9uPFQ+IHwgUHJvbWlzZTxOb3RGdW5jdGlvbjxUPj4gfCAoKCkgPT4gYW55KX0gZm5cbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5leHBvcnQgZnVuY3Rpb24gb25Nb3VudChmbikge1xuXHRpZiAoY29tcG9uZW50X2NvbnRleHQgPT09IG51bGwpIHtcblx0XHRsaWZlY3ljbGVfb3V0c2lkZV9jb21wb25lbnQoJ29uTW91bnQnKTtcblx0fVxuXG5cdGlmIChsZWdhY3lfbW9kZV9mbGFnICYmIGNvbXBvbmVudF9jb250ZXh0LmwgIT09IG51bGwpIHtcblx0XHRpbml0X3VwZGF0ZV9jYWxsYmFja3MoY29tcG9uZW50X2NvbnRleHQpLm0ucHVzaChmbik7XG5cdH0gZWxzZSB7XG5cdFx0dXNlcl9lZmZlY3QoKCkgPT4ge1xuXHRcdFx0Y29uc3QgY2xlYW51cCA9IHVudHJhY2soZm4pO1xuXHRcdFx0aWYgKHR5cGVvZiBjbGVhbnVwID09PSAnZnVuY3Rpb24nKSByZXR1cm4gLyoqIEB0eXBlIHsoKSA9PiB2b2lkfSAqLyAoY2xlYW51cCk7XG5cdFx0fSk7XG5cdH1cbn1cblxuLyoqXG4gKiBTY2hlZHVsZXMgYSBjYWxsYmFjayB0byBydW4gaW1tZWRpYXRlbHkgYmVmb3JlIHRoZSBjb21wb25lbnQgaXMgdW5tb3VudGVkLlxuICpcbiAqIE91dCBvZiBgb25Nb3VudGAsIGBiZWZvcmVVcGRhdGVgLCBgYWZ0ZXJVcGRhdGVgIGFuZCBgb25EZXN0cm95YCwgdGhpcyBpcyB0aGVcbiAqIG9ubHkgb25lIHRoYXQgcnVucyBpbnNpZGUgYSBzZXJ2ZXItc2lkZSBjb21wb25lbnQuXG4gKlxuICogQHBhcmFtIHsoKSA9PiBhbnl9IGZuXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG9uRGVzdHJveShmbikge1xuXHRpZiAoY29tcG9uZW50X2NvbnRleHQgPT09IG51bGwpIHtcblx0XHRsaWZlY3ljbGVfb3V0c2lkZV9jb21wb25lbnQoJ29uRGVzdHJveScpO1xuXHR9XG5cblx0b25Nb3VudCgoKSA9PiAoKSA9PiB1bnRyYWNrKGZuKSk7XG59XG5cbi8qKlxuICogQHRlbXBsYXRlIFtUPWFueV1cbiAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlXG4gKiBAcGFyYW0ge1R9IFtkZXRhaWxdXG4gKiBAcGFyYW0ge2FueX1wYXJhbXNfMFxuICogQHJldHVybnMge0N1c3RvbUV2ZW50PFQ+fVxuICovXG5mdW5jdGlvbiBjcmVhdGVfY3VzdG9tX2V2ZW50KHR5cGUsIGRldGFpbCwgeyBidWJibGVzID0gZmFsc2UsIGNhbmNlbGFibGUgPSBmYWxzZSB9ID0ge30pIHtcblx0cmV0dXJuIG5ldyBDdXN0b21FdmVudCh0eXBlLCB7IGRldGFpbCwgYnViYmxlcywgY2FuY2VsYWJsZSB9KTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGFuIGV2ZW50IGRpc3BhdGNoZXIgdGhhdCBjYW4gYmUgdXNlZCB0byBkaXNwYXRjaCBbY29tcG9uZW50IGV2ZW50c10oaHR0cHM6Ly9zdmVsdGUuZGV2L2RvY3Mvc3ZlbHRlL2xlZ2FjeS1vbiNDb21wb25lbnQtZXZlbnRzKS5cbiAqIEV2ZW50IGRpc3BhdGNoZXJzIGFyZSBmdW5jdGlvbnMgdGhhdCBjYW4gdGFrZSB0d28gYXJndW1lbnRzOiBgbmFtZWAgYW5kIGBkZXRhaWxgLlxuICpcbiAqIENvbXBvbmVudCBldmVudHMgY3JlYXRlZCB3aXRoIGBjcmVhdGVFdmVudERpc3BhdGNoZXJgIGNyZWF0ZSBhXG4gKiBbQ3VzdG9tRXZlbnRdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9DdXN0b21FdmVudCkuXG4gKiBUaGVzZSBldmVudHMgZG8gbm90IFtidWJibGVdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvTGVhcm4vSmF2YVNjcmlwdC9CdWlsZGluZ19ibG9ja3MvRXZlbnRzI0V2ZW50X2J1YmJsaW5nX2FuZF9jYXB0dXJlKS5cbiAqIFRoZSBgZGV0YWlsYCBhcmd1bWVudCBjb3JyZXNwb25kcyB0byB0aGUgW0N1c3RvbUV2ZW50LmRldGFpbF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0N1c3RvbUV2ZW50L2RldGFpbClcbiAqIHByb3BlcnR5IGFuZCBjYW4gY29udGFpbiBhbnkgdHlwZSBvZiBkYXRhLlxuICpcbiAqIFRoZSBldmVudCBkaXNwYXRjaGVyIGNhbiBiZSB0eXBlZCB0byBuYXJyb3cgdGhlIGFsbG93ZWQgZXZlbnQgbmFtZXMgYW5kIHRoZSB0eXBlIG9mIHRoZSBgZGV0YWlsYCBhcmd1bWVudDpcbiAqIGBgYHRzXG4gKiBjb25zdCBkaXNwYXRjaCA9IGNyZWF0ZUV2ZW50RGlzcGF0Y2hlcjx7XG4gKiAgbG9hZGVkOiBuZXZlcjsgLy8gZG9lcyBub3QgdGFrZSBhIGRldGFpbCBhcmd1bWVudFxuICogIGNoYW5nZTogc3RyaW5nOyAvLyB0YWtlcyBhIGRldGFpbCBhcmd1bWVudCBvZiB0eXBlIHN0cmluZywgd2hpY2ggaXMgcmVxdWlyZWRcbiAqICBvcHRpb25hbDogbnVtYmVyIHwgbnVsbDsgLy8gdGFrZXMgYW4gb3B0aW9uYWwgZGV0YWlsIGFyZ3VtZW50IG9mIHR5cGUgbnVtYmVyXG4gKiB9PigpO1xuICogYGBgXG4gKlxuICogQGRlcHJlY2F0ZWQgVXNlIGNhbGxiYWNrIHByb3BzIGFuZC9vciB0aGUgYCRob3N0KClgIHJ1bmUgaW5zdGVhZCDigJQgc2VlIFttaWdyYXRpb24gZ3VpZGVdKGh0dHBzOi8vc3ZlbHRlLmRldi9kb2NzL3N2ZWx0ZS92NS1taWdyYXRpb24tZ3VpZGUjRXZlbnQtY2hhbmdlcy1Db21wb25lbnQtZXZlbnRzKVxuICogQHRlbXBsYXRlIHtSZWNvcmQ8c3RyaW5nLCBhbnk+fSBbRXZlbnRNYXAgPSBhbnldXG4gKiBAcmV0dXJucyB7RXZlbnREaXNwYXRjaGVyPEV2ZW50TWFwPn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUV2ZW50RGlzcGF0Y2hlcigpIHtcblx0Y29uc3QgYWN0aXZlX2NvbXBvbmVudF9jb250ZXh0ID0gY29tcG9uZW50X2NvbnRleHQ7XG5cdGlmIChhY3RpdmVfY29tcG9uZW50X2NvbnRleHQgPT09IG51bGwpIHtcblx0XHRsaWZlY3ljbGVfb3V0c2lkZV9jb21wb25lbnQoJ2NyZWF0ZUV2ZW50RGlzcGF0Y2hlcicpO1xuXHR9XG5cblx0cmV0dXJuICh0eXBlLCBkZXRhaWwsIG9wdGlvbnMpID0+IHtcblx0XHRjb25zdCBldmVudHMgPSAvKiogQHR5cGUge1JlY29yZDxzdHJpbmcsIEZ1bmN0aW9uIHwgRnVuY3Rpb25bXT59ICovIChcblx0XHRcdGFjdGl2ZV9jb21wb25lbnRfY29udGV4dC5zLiQkZXZlbnRzXG5cdFx0KT8uWy8qKiBAdHlwZSB7YW55fSAqLyAodHlwZSldO1xuXG5cdFx0aWYgKGV2ZW50cykge1xuXHRcdFx0Y29uc3QgY2FsbGJhY2tzID0gaXNfYXJyYXkoZXZlbnRzKSA/IGV2ZW50cy5zbGljZSgpIDogW2V2ZW50c107XG5cdFx0XHQvLyBUT0RPIGFyZSB0aGVyZSBzaXR1YXRpb25zIHdoZXJlIGV2ZW50cyBjb3VsZCBiZSBkaXNwYXRjaGVkXG5cdFx0XHQvLyBpbiBhIHNlcnZlciAobm9uLURPTSkgZW52aXJvbm1lbnQ/XG5cdFx0XHRjb25zdCBldmVudCA9IGNyZWF0ZV9jdXN0b21fZXZlbnQoLyoqIEB0eXBlIHtzdHJpbmd9ICovICh0eXBlKSwgZGV0YWlsLCBvcHRpb25zKTtcblx0XHRcdGZvciAoY29uc3QgZm4gb2YgY2FsbGJhY2tzKSB7XG5cdFx0XHRcdGZuLmNhbGwoYWN0aXZlX2NvbXBvbmVudF9jb250ZXh0LngsIGV2ZW50KTtcblx0XHRcdH1cblx0XHRcdHJldHVybiAhZXZlbnQuZGVmYXVsdFByZXZlbnRlZDtcblx0XHR9XG5cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fTtcbn1cblxuLy8gVE9ETyBtYXJrIGJlZm9yZVVwZGF0ZSBhbmQgYWZ0ZXJVcGRhdGUgYXMgZGVwcmVjYXRlZCBpbiBTdmVsdGUgNlxuXG4vKipcbiAqIFNjaGVkdWxlcyBhIGNhbGxiYWNrIHRvIHJ1biBpbW1lZGlhdGVseSBiZWZvcmUgdGhlIGNvbXBvbmVudCBpcyB1cGRhdGVkIGFmdGVyIGFueSBzdGF0ZSBjaGFuZ2UuXG4gKlxuICogVGhlIGZpcnN0IHRpbWUgdGhlIGNhbGxiYWNrIHJ1bnMgd2lsbCBiZSBiZWZvcmUgdGhlIGluaXRpYWwgYG9uTW91bnRgLlxuICpcbiAqIEluIHJ1bmVzIG1vZGUgdXNlIGAkZWZmZWN0LnByZWAgaW5zdGVhZC5cbiAqXG4gKiBAZGVwcmVjYXRlZCBVc2UgW2AkZWZmZWN0LnByZWBdKGh0dHBzOi8vc3ZlbHRlLmRldi9kb2NzL3N2ZWx0ZS8kZWZmZWN0IyRlZmZlY3QucHJlKSBpbnN0ZWFkXG4gKiBAcGFyYW0geygpID0+IHZvaWR9IGZuXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGJlZm9yZVVwZGF0ZShmbikge1xuXHRpZiAoY29tcG9uZW50X2NvbnRleHQgPT09IG51bGwpIHtcblx0XHRsaWZlY3ljbGVfb3V0c2lkZV9jb21wb25lbnQoJ2JlZm9yZVVwZGF0ZScpO1xuXHR9XG5cblx0aWYgKGNvbXBvbmVudF9jb250ZXh0LmwgPT09IG51bGwpIHtcblx0XHRlLmxpZmVjeWNsZV9sZWdhY3lfb25seSgnYmVmb3JlVXBkYXRlJyk7XG5cdH1cblxuXHRpbml0X3VwZGF0ZV9jYWxsYmFja3MoY29tcG9uZW50X2NvbnRleHQpLmIucHVzaChmbik7XG59XG5cbi8qKlxuICogU2NoZWR1bGVzIGEgY2FsbGJhY2sgdG8gcnVuIGltbWVkaWF0ZWx5IGFmdGVyIHRoZSBjb21wb25lbnQgaGFzIGJlZW4gdXBkYXRlZC5cbiAqXG4gKiBUaGUgZmlyc3QgdGltZSB0aGUgY2FsbGJhY2sgcnVucyB3aWxsIGJlIGFmdGVyIHRoZSBpbml0aWFsIGBvbk1vdW50YC5cbiAqXG4gKiBJbiBydW5lcyBtb2RlIHVzZSBgJGVmZmVjdGAgaW5zdGVhZC5cbiAqXG4gKiBAZGVwcmVjYXRlZCBVc2UgW2AkZWZmZWN0YF0oaHR0cHM6Ly9zdmVsdGUuZGV2L2RvY3Mvc3ZlbHRlLyRlZmZlY3QpIGluc3RlYWRcbiAqIEBwYXJhbSB7KCkgPT4gdm9pZH0gZm5cbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5leHBvcnQgZnVuY3Rpb24gYWZ0ZXJVcGRhdGUoZm4pIHtcblx0aWYgKGNvbXBvbmVudF9jb250ZXh0ID09PSBudWxsKSB7XG5cdFx0bGlmZWN5Y2xlX291dHNpZGVfY29tcG9uZW50KCdhZnRlclVwZGF0ZScpO1xuXHR9XG5cblx0aWYgKGNvbXBvbmVudF9jb250ZXh0LmwgPT09IG51bGwpIHtcblx0XHRlLmxpZmVjeWNsZV9sZWdhY3lfb25seSgnYWZ0ZXJVcGRhdGUnKTtcblx0fVxuXG5cdGluaXRfdXBkYXRlX2NhbGxiYWNrcyhjb21wb25lbnRfY29udGV4dCkuYS5wdXNoKGZuKTtcbn1cblxuLyoqXG4gKiBMZWdhY3ktbW9kZTogSW5pdCBjYWxsYmFja3Mgb2JqZWN0IGZvciBvbk1vdW50L2JlZm9yZVVwZGF0ZS9hZnRlclVwZGF0ZVxuICogQHBhcmFtIHtDb21wb25lbnRDb250ZXh0fSBjb250ZXh0XG4gKi9cbmZ1bmN0aW9uIGluaXRfdXBkYXRlX2NhbGxiYWNrcyhjb250ZXh0KSB7XG5cdHZhciBsID0gLyoqIEB0eXBlIHtDb21wb25lbnRDb250ZXh0TGVnYWN5fSAqLyAoY29udGV4dCkubDtcblx0cmV0dXJuIChsLnUgPz89IHsgYTogW10sIGI6IFtdLCBtOiBbXSB9KTtcbn1cblxuLyoqXG4gKiBTeW5jaHJvbm91c2x5IGZsdXNoZXMgYW55IHBlbmRpbmcgc3RhdGUgY2hhbmdlcyBhbmQgdGhvc2UgdGhhdCByZXN1bHQgZnJvbSBpdC5cbiAqIEBwYXJhbSB7KCkgPT4gdm9pZH0gW2ZuXVxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmbHVzaFN5bmMoZm4pIHtcblx0Zmx1c2hfc3luYyhmbik7XG59XG5cbmV4cG9ydCB7IGh5ZHJhdGUsIG1vdW50LCB1bm1vdW50IH0gZnJvbSAnLi9pbnRlcm5hbC9jbGllbnQvcmVuZGVyLmpzJztcblxuZXhwb3J0IHtcblx0Z2V0Q29udGV4dCxcblx0Z2V0QWxsQ29udGV4dHMsXG5cdGhhc0NvbnRleHQsXG5cdHNldENvbnRleHQsXG5cdHRpY2ssXG5cdHVudHJhY2tcbn0gZnJvbSAnLi9pbnRlcm5hbC9jbGllbnQvcnVudGltZS5qcyc7XG5cbmV4cG9ydCB7IGNyZWF0ZVJhd1NuaXBwZXQgfSBmcm9tICcuL2ludGVybmFsL2NsaWVudC9kb20vYmxvY2tzL3NuaXBwZXQuanMnO1xuIiwiLy8gZ2VuZXJhdGVkIGR1cmluZyByZWxlYXNlLCBkbyBub3QgbW9kaWZ5XG5cbi8qKlxuICogVGhlIGN1cnJlbnQgdmVyc2lvbiwgYXMgc2V0IGluIHBhY2thZ2UuanNvbi5cbiAqXG4gKiBodHRwczovL3N2ZWx0ZS5kZXYvZG9jcy9zdmVsdGUtY29tcGlsZXIjc3ZlbHRlLXZlcnNpb25cbiAqIEB0eXBlIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBjb25zdCBWRVJTSU9OID0gJzUuMTQuMCc7XG5leHBvcnQgY29uc3QgUFVCTElDX1ZFUlNJT04gPSAnNSc7XG4iLCJpbXBvcnQgeyBQVUJMSUNfVkVSU0lPTiB9IGZyb20gJy4uL3ZlcnNpb24uanMnO1xuXG5pZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpXG5cdC8vIEB0cy1pZ25vcmVcblx0KHdpbmRvdy5fX3N2ZWx0ZSB8fD0geyB2OiBuZXcgU2V0KCkgfSkudi5hZGQoUFVCTElDX1ZFUlNJT04pO1xuIiwiY29uc3QgaW5wdXRWYWx1ZXNFeHRyYWN0b3JzID0gT2JqZWN0LmZyZWV6ZSh7XG4gICAgY2hlY2tib3g6IChpbnBFbCwgZGVmYXVsdFZhbHVlID0gdW5kZWZpbmVkKSA9PiB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICAgIHR5cGVvZiBkZWZhdWx0VmFsdWUgPT0gXCJvYmplY3RcIiAmJlxuICAgICAgICAgICAgT2JqZWN0Lmhhc093bihkZWZhdWx0VmFsdWUsIFwiY2hlY2tlZFwiKSAmJlxuICAgICAgICAgICAgT2JqZWN0Lmhhc093bihkZWZhdWx0VmFsdWUsIFwidW5jaGVja2VkXCIpXG4gICAgICAgICkge1xuICAgICAgICAgICAgcmV0dXJuIGlucEVsLmNoZWNrZWRcbiAgICAgICAgICAgICAgICA/IGRlZmF1bHRWYWx1ZS5jaGVja2VkXG4gICAgICAgICAgICAgICAgOiBkZWZhdWx0VmFsdWUudW5jaGVja2VkO1xuICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgICAgT2JqZWN0Lmhhc093bihpbnBFbCwgXCJ2YWx1ZVwiKSAmJlxuICAgICAgICAgICAgdHlwZW9mIGlucEVsLnZhbHVlICE9PSBcInVuZGVmaW5lZFwiXG4gICAgICAgICkge1xuICAgICAgICAgICAgcmV0dXJuIGlucEVsLmNoZWNrZWQgPyBpbnBFbC52YWx1ZSA6IGZhbHNlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGlucEVsLmNoZWNrZWQ7XG4gICAgICAgIH1cbiAgICB9LFxufSk7XG5cbi8qKlxuICogQ29sbGVjdGlvbiBvZiBjb21tb24gdG8gVUkgZnVuY3Rpb25zIGFuZCBwcm9wZXJ0aWVzXG4gKlxuICogQGNsYXNzIFVJQ29tbW9uXG4gKi9cbmNsYXNzIFVJQ29tbW9uIHtcbiAgICBzdGF0aWMgQ0xFQVJfTUFDUk8gPSBcIl9fQ0xFQVJfX1wiO1xuICAgIHN0YXRpYyBFUlJPUl9ERUZBVUxUID0gXCLQp9GC0L4g0L/QvtGI0LvQviDQvdC1INGC0LDQui5cIjtcbiAgICBzdGF0aWMgREVGQVVMVF9SRURJUkVDVF9USU1FT1VUID0gMzAwMDtcbiAgICBzdGF0aWMgQ0xBU1NfT0sgPSBcImlzLXN1Y2Nlc3NcIjtcbiAgICBzdGF0aWMgQ0xBU1NfRVJSID0gXCJpcy1kYW5nZXJcIjtcbiAgICBzdGF0aWMgU0NST0xMX0RJU0FCTEVSX0NMQVNTID0gXCJyZW1vdmUtc2Nyb2xsXCI7XG4gICAgc3RhdGljIEZJTExFUiA9IFwiX1wiO1xuXG4gICAgc3RhdGljIFNDUk9MTF9PUFRJT05TID0ge1xuICAgICAgICB0b3A6IDAsXG4gICAgICAgIGJlaGF2aW9yOiBcInNtb290aFwiLFxuICAgIH07XG5cbiAgICBzdGF0aWMgZ2V0IGlucHV0VmFsdWVzRXh0cmFjdG9ycygpIHtcbiAgICAgICAgcmV0dXJuIGlucHV0VmFsdWVzRXh0cmFjdG9ycztcbiAgICB9XG5cbiAgICBzdGF0aWMgZXh0cmFjdFZhbHVlRnJvbUlucHV0KGlucEVsLCBkZWZhdWx0VmFsdWUgPSB1bmRlZmluZWQpIHtcbiAgICAgICAgaWYgKE9iamVjdC5oYXNPd24oVUlDb21tb24uaW5wdXRWYWx1ZXNFeHRyYWN0b3JzLCBpbnBFbC50eXBlKSkge1xuICAgICAgICAgICAgcmV0dXJuIFVJQ29tbW9uLmlucHV0VmFsdWVzRXh0cmFjdG9yc1tpbnBFbC50eXBlXShcbiAgICAgICAgICAgICAgICBpbnBFbCxcbiAgICAgICAgICAgICAgICBkZWZhdWx0VmFsdWVcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGlucEVsLnZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHBhcmFtIHtzdHJpbmd9ICAgICAgZmllbGQgICAgZmllbGQgbmFtZVxuICAgICAqIEBwYXJhbSB7aW1wb3J0KCcuL2V2ZW50cy50eXBlcycpLlVJRXZlbnRJbnB1dENoYW5nZUNhbGxiYWNrfSAgICBvbmNoYW5nZVxuICAgICAqIEBwYXJhbSB7YW55fSAgICAgICAgIFtkZWZhdWx0VmFsdWU9dW5kZWZpbmVkXVxuICAgICAqIEByZXR1cm4ge2ltcG9ydCgnLi9ldmVudHMudHlwZXMnKS5VSUV2ZW50Q2FsbGJhY2t9XG4gICAgICogQG1lbWJlcm9mIFVJQ29tbW9uXG4gICAgICovXG4gICAgc3RhdGljIG9uSW5wdXQoZmllbGQsIG9uY2hhbmdlLCBkZWZhdWx0VmFsdWUgPSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIChldmVudCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBVSUNvbW1vbi5leHRyYWN0VmFsdWVGcm9tSW5wdXQoXG4gICAgICAgICAgICAgICAgZXZlbnQuY3VycmVudFRhcmdldCxcbiAgICAgICAgICAgICAgICBkZWZhdWx0VmFsdWVcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICByZXR1cm4gb25jaGFuZ2UoXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBmaWVsZCxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBldmVudFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBwYXJhbSB7S2V5Ym9hcmRFdmVudH0gZVxuICAgICAqIEBtZW1iZXJvZiBVSUNvbW1vblxuICAgICAqL1xuICAgIHN0YXRpYyBpc0VudGVyRXZlbnQoZSkge1xuICAgICAgICByZXR1cm4gZS5rZXkgPT09IFwiRW50ZXJcIiAmJiAhZS5hbHRLZXkgJiYgIWUuY3RybEtleSAmJiAhZS5zaGlmdEtleTtcbiAgICB9XG5cbiAgICBzdGF0aWMgb25seU9uRW50ZXIoY2FsbGJhY2spIHtcbiAgICAgICAgcmV0dXJuIChlKSA9PiB7XG4gICAgICAgICAgICBpZiAoVUlDb21tb24uaXNFbnRlckV2ZW50KGUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBzdGF0aWMgTU9CSUxFX1dJRFRIX0JSRUFLX1BPSU5UID0gNzYwO1xuXG4gICAgc3RhdGljIGlzTW9iaWxlKCkge1xuICAgICAgICBjb25zdCB0ZXN0TW9iaWxlID0gd2luZG93Lm1hdGNoTWVkaWEgfHwgd2luZG93Lm1zTWF0Y2hNZWRpYTtcbiAgICAgICAgaWYgKHRlc3RNb2JpbGUpIHtcbiAgICAgICAgICAgIGxldCB0ZXN0UXVlcnkgPSBcIihwb2ludGVyOmNvYXJzZSlcIjtcbiAgICAgICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbWF4X3dpZHRoID1cbiAgICAgICAgICAgICAgICAgICAgdHlwZW9mIGFyZ3VtZW50c1swXSA9PT0gXCJib29sZWFuXCJcbiAgICAgICAgICAgICAgICAgICAgICAgID8gdGhpcy5NT0JJTEVfV0lEVEhfQlJFQUtfUE9JTlRcbiAgICAgICAgICAgICAgICAgICAgICAgIDogYXJndW1lbnRzWzBdO1xuICAgICAgICAgICAgICAgIHRlc3RRdWVyeSA9IGBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogJHttYXhfd2lkdGh9cHgpYDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0ZXN0TW9iaWxlKHRlc3RRdWVyeSkubWF0Y2hlcztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgc3RhdGljIHJlbW92ZUJvZHlTY3JvbGwoKSB7XG4gICAgICAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LmFkZCh0aGlzLlNDUk9MTF9ESVNBQkxFUl9DTEFTUyk7XG4gICAgfVxuXG4gICAgc3RhdGljIHJlc3RvcmVCb2R5U2Nyb2xsKCkge1xuICAgICAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5yZW1vdmUodGhpcy5TQ1JPTExfRElTQUJMRVJfQ0xBU1MpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqICBSZWZvcm1hdHMgaW5wdXQgZnJvbSBhbnkgc3RyaW5nIHRvIHN0cmljdCBwaG9uZSBmb3JtYXRcbiAgICAgKiAgQHBhcmFtIHtzdHJpbmd9ICAgIHZhbCAgICBmcmVlIHN0eWxlIHBob25lIG51bWJlclxuICAgICAqICBAcGFyYW0ge3N0cmluZ30gICAgW2ZpbGxlcj1VSUNvbW1vbi5GSUxMRVJdICAgIGZyZWUgc3R5bGUgcGhvbmUgbnVtYmVyXG4gICAgICogIEByZXR1cm5zIHtzdHJpbmd9ICAgICAgICAgIHBob25lIG51bWJlclxuICAgICAqKi9cbiAgICBzdGF0aWMgZm9ybWF0UGhvbmUodmFsLCBmaWxsZXIgPSB0aGlzLkZJTExFUikge1xuICAgICAgICAvL3N0YXJ0aW5nIGZyb20gMTEgZGlnaXRzIGluIHBob25lIG51bWJlclxuICAgICAgICBjb25zdCBzbG90cyA9IFsxLCAyLCAyLCAyLCAzLCAzLCAzLCA0LCA0LCA1LCA1XTtcbiAgICAgICAgbGV0IGRpZ2l0cyA9IHZhbC5yZXBsYWNlKC9cXEQvZywgXCJcIik7XG4gICAgICAgIC8vaWYgdGhlcmUgYXJlIG1vcmUsIG1vdmUgdGhlbSB0byBjb3VudHJ5IGNvZGUgc2xvdFxuICAgICAgICBpZiAoZGlnaXRzLmxlbmd0aCA+IDExKSB7XG4gICAgICAgICAgICBsZXQgZCA9IGRpZ2l0cy5sZW5ndGggLSAxMTtcbiAgICAgICAgICAgIHdoaWxlIChkID4gMCkge1xuICAgICAgICAgICAgICAgIGQtLTtcbiAgICAgICAgICAgICAgICBzbG90cy51bnNoaWZ0KDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGxldCBzdGFjayA9IFtcIlwiLCBcIlwiLCBcIlwiLCBcIlwiLCBcIlwiXTtcbiAgICAgICAgQXJyYXkuZnJvbShkaWdpdHMpLmZvckVhY2goKGRpZ2l0LCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgbGV0IHNsb3QgPSBzbG90c1tpbmRleF07XG4gICAgICAgICAgICBzdGFja1tzbG90IC0gMV0gPSBzdGFja1tzbG90IC0gMV0gKyBkaWdpdDtcbiAgICAgICAgfSk7XG4gICAgICAgIC8vY3JlYXRpbmcgbWFwIG9mIHBhcnRzIGxlbmd0aHNcbiAgICAgICAgY29uc3QgbGVucyA9IHNsb3RzLnJlZHVjZSgoYWNjLCBjdXJyKSA9PiB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGFjY1tjdXJyXSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgICAgIGFjY1tjdXJyXSA9IDE7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGFjY1tjdXJyXSArPSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGFjYztcbiAgICAgICAgfSwge30pO1xuICAgICAgICAvL2ZpbGwgZW1wdHkgcG9zaXRpb25zIHdpdGggZmlsbGVyIChfKVxuICAgICAgICBmb3IgKGxldCB0IGluIHN0YWNrKSB7XG4gICAgICAgICAgICBsZXQgZGlmID0gbGVuc1twYXJzZUludCh0KSArIDFdIC0gc3RhY2tbdF0ubGVuZ3RoO1xuICAgICAgICAgICAgd2hpbGUgKGRpZiA+IDApIHtcbiAgICAgICAgICAgICAgICBzdGFja1t0XSA9IHN0YWNrW3RdICsgZmlsbGVyO1xuICAgICAgICAgICAgICAgIGRpZi0tO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBgKyR7c3RhY2tbMF19ICgke3N0YWNrWzFdfSkgJHtzdGFja1syXX0tJHtzdGFja1szXX0tJHtzdGFja1s0XX1gO1xuICAgIH1cblxuICAgIHN0YXRpYyBNT05FWV9TSUdOID0gXCImIzgzODE7XCI7XG5cbiAgICBzdGF0aWMgc2V0TW9uZXlTaWduKHZhbCkge1xuICAgICAgICB0aGlzLk1PTkVZX1NJR04gPSB2YWw7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gcHJpY2VcbiAgICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAgICogQG1lbWJlcm9mIFVJQ29tbW9uXG4gICAgICovXG4gICAgc3RhdGljIGZvcm1hdFByaWNlKHByaWNlKSB7XG4gICAgICAgIGxldCBtYWpvciA9IE1hdGguZmxvb3IocHJpY2UgLyAxMDApLFxuICAgICAgICAgICAgbWlub3IgPSBwcmljZSAlIDEwMDtcbiAgICAgICAgcmV0dXJuIGAke3RoaXMuTU9ORVlfU0lHTn0ke21ham9yLnRvU3RyaW5nKCl9LiR7bWlub3IudG9TdHJpbmcoKX1gO1xuICAgIH1cblxuICAgIHN0YXRpYyBmb3JtYXRMb2NhbGVEYXRldGltZShkdCwgb3B0cyA9IHsgZGF0ZTogdHJ1ZSwgdGltZTogdHJ1ZSB9KSB7XG4gICAgICAgIGNvbnN0IGRhdGUgPSBkdC50b0xvY2FsZURhdGVTdHJpbmcod2luZG93Lm5hdmlnYXRvci5sYW5ndWFnZSk7XG4gICAgICAgIGNvbnN0IHRpbWUgPSBkdC50b0xvY2FsZVRpbWVTdHJpbmcod2luZG93Lm5hdmlnYXRvci5sYW5ndWFnZSk7XG4gICAgICAgIGlmIChvcHRzLmRhdGUgJiYgb3B0cy50aW1lKSB7XG4gICAgICAgICAgICByZXR1cm4gYCR7ZGF0ZX0gJHt0aW1lfWA7XG4gICAgICAgIH0gZWxzZSBpZiAob3B0cy5kYXRlICYmICFvcHRzLnRpbWUpIHtcbiAgICAgICAgICAgIHJldHVybiBkYXRlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRpbWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzdGF0aWMgdHJ5Rm9ybWF0TG9jYWxlRGF0ZVRpbWUodmFsdWUsIG9wdHMgPSB7IGRhdGU6IHRydWUsIHRpbWU6IHRydWUgfSkge1xuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09IFwic3RyaW5nXCIgfHwgdHlwZW9mIHZhbHVlID09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgICAgIGNvbnN0IGR0ID0gbmV3IERhdGUodmFsdWUpO1xuICAgICAgICAgICAgcmV0dXJuIFVJQ29tbW9uLmZvcm1hdExvY2FsZURhdGV0aW1lKGR0LCBvcHRzKTtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT0gXCJvYmplY3RcIikge1xuICAgICAgICAgICAgcmV0dXJuIFVJQ29tbW9uLmZvcm1hdExvY2FsZURhdGV0aW1lKHZhbHVlLCBvcHRzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBcIlwiO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc3RhdGljIGZvcm1hdFRpbWVzdGFtcCh0aW1lc3RhbXAsIG9mZnNldCA9IDApIHtcbiAgICAgICAgbGV0IG9mZnNldExvY2FsID0gbmV3IERhdGUoKS5nZXRUaW1lem9uZU9mZnNldCgpO1xuICAgICAgICBsZXQgZGVsdGFPZmZzZXQgPSAob2Zmc2V0TG9jYWwgLSBvZmZzZXQpICogNjAgKiAxMDAwO1xuICAgICAgICBsZXQgbG9jYWxEYXRlVGltZSA9IG5ldyBEYXRlKHBhcnNlSW50KHRpbWVzdGFtcCkgLSBkZWx0YU9mZnNldCk7XG4gICAgICAgIHJldHVybiBsb2NhbERhdGVUaW1lLnRvTG9jYWxlU3RyaW5nKHdpbmRvdy5uYXZpZ2F0b3IubGFuZ3VhZ2UpO1xuICAgIH1cblxuICAgIHN0YXRpYyBUSU1FID0ge1xuICAgICAgICBTRUNPTkRTOiBbXCLRgdC10LrRg9C90LTRg1wiLCBcItGB0LXQutGD0L3QtNGLXCIsIFwi0YHQtdC60YPQvdC0XCJdLFxuICAgICAgICBNSU5VVEVTOiBbXCLQvNC40L3Rg9GC0YNcIiwgXCLQvNC40L3Rg9GC0YtcIiwgXCLQvNC40L3Rg9GCXCJdLFxuICAgICAgICBIT1VSUzogW1wi0YfQsNGBXCIsIFwi0YfQsNGB0LBcIiwgXCLRh9Cw0YHQvtCyXCJdLFxuICAgIH07XG5cbiAgICBzdGF0aWMgZGVjbE9mTnVtKG4sIHRleHRfZm9ybXMpIHtcbiAgICAgICAgbiA9IE1hdGguYWJzKG4pICUgMTAwO1xuICAgICAgICBsZXQgbjEgPSBuICUgMTA7XG4gICAgICAgIGlmIChuID4gMTAgJiYgbiA8IDIwKSB7XG4gICAgICAgICAgICByZXR1cm4gdGV4dF9mb3Jtc1syXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobjEgPiAxICYmIG4xIDwgNSkge1xuICAgICAgICAgICAgcmV0dXJuIHRleHRfZm9ybXNbMV07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG4xID09IDEpIHtcbiAgICAgICAgICAgIHJldHVybiB0ZXh0X2Zvcm1zWzBdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0ZXh0X2Zvcm1zWzJdO1xuICAgIH1cblxuICAgIHN0YXRpYyBodW1hbml6ZWRUaW1lRGlmZihkYXRlIC8qIHVuaXggdGltZSAqLykge1xuICAgICAgICBsZXQgY3VycmVudFRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgICAgICAgbGV0IHNlYyA9IE1hdGgucm91bmQoKGN1cnJlbnRUaW1lIC0gZGF0ZSkgLyAxMDAwKTtcbiAgICAgICAgbGV0IHVuaXQ7XG4gICAgICAgIGlmIChzZWMgPCA2MCkge1xuICAgICAgICAgICAgdW5pdCA9IHRoaXMuZGVjbE9mTnVtKHNlYywgdGhpcy5USU1FLlNFQ09ORFMpO1xuICAgICAgICAgICAgcmV0dXJuIGAke3NlY30gJHt1bml0fSDQvdCw0LfQsNC0YDtcbiAgICAgICAgfSBlbHNlIGlmIChzZWMgPCAzNjAwKSB7XG4gICAgICAgICAgICBsZXQgbWluID0gTWF0aC5mbG9vcihzZWMgLyA2MCk7XG4gICAgICAgICAgICB1bml0ID0gdGhpcy5kZWNsT2ZOdW0obWluLCB0aGlzLlRJTUUuTUlOVVRFUyk7XG4gICAgICAgICAgICByZXR1cm4gYCR7bWlufSAke3VuaXR9INC90LDQt9Cw0LRgO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGV0IGhvdXJzID0gTWF0aC5mbG9vcihzZWMgLyAoNjAgKiA2MCkpO1xuICAgICAgICAgICAgdW5pdCA9IHRoaXMuZGVjbE9mTnVtKGhvdXJzLCB0aGlzLlRJTUUuSE9VUlMpO1xuICAgICAgICAgICAgcmV0dXJuIGAke2hvdXJzfSAke3VuaXR9INC90LDQt9Cw0LRgO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBVSUNvbW1vbjtcbiIsIjxzY3JpcHQ+XG4gICAgaW1wb3J0IFVJQ29tbW9uIGZyb20gXCIuLi9jb21tb25cIjtcbiAgICAvKipcbiAgICAgKiBAdHlwZWRlZiB7T2JqZWN0fSBQcm9wc1xuICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSAgIFtpZF1cbiAgICAgKiBAcHJvcGVydHkge3N0cmluZ30gICBbY2xhc3NdXG4gICAgICogQHByb3BlcnR5IHtzdHJpbmd9ICAgW3JvbGU9XCJidXR0b25cIl1cbiAgICAgKiBAcHJvcGVydHkge251bWJlcn0gICBbdGFiSW5kZXg9MF1cbiAgICAgKiBAcHJvcGVydHkge2Z1bmN0aW9ufSBbb25jbGljayA9ICgpID0+IHRydWVdXG4gICAgICogQHByb3BlcnR5IHtmdW5jdGlvbn0gW29ua2V5dXBdXG4gICAgICogQHByb3BlcnR5IHtpbXBvcnQoJ3N2ZWx0ZScpLlNuaXBwZXR9IFtjaGlsZHJlbl1cbiAgICAgKi9cblxuICAgIC8qKiBAdHlwZSB7UHJvcHN9ICovXG4gICAgbGV0IHtcbiAgICAgICAgaWQgPSBcIlwiLFxuICAgICAgICBjbGFzczogY2xhc3NlcyA9IFwiXCIsXG4gICAgICAgIHJvbGUgPSBcImJ1dHRvblwiLFxuICAgICAgICB0YWJJbmRleCA9IDAsXG4gICAgICAgIG9uY2xpY2sgPSAoKSA9PiB0cnVlLFxuICAgICAgICBvbmtleXVwLFxuICAgICAgICBjaGlsZHJlbixcbiAgICB9ID0gJHByb3BzKCk7XG5cbiAgICBjb25zdCBvbktleVVwID1cbiAgICAgICAgb25rZXl1cCA/PyAob25jbGljayA/IFVJQ29tbW9uLm9ubHlPbkVudGVyKG9uY2xpY2spIDogdW5kZWZpbmVkKTtcbjwvc2NyaXB0PlxuXG48ZGl2IHtpZH0gY2xhc3M9XCJibG9jayB7Y2xhc3Nlc31cIiB7b25jbGlja30gb25rZXl1cD17b25LZXlVcH0ge3JvbGV9IHt0YWJJbmRleH0+XG4gICAge0ByZW5kZXIgY2hpbGRyZW4/LigpfVxuPC9kaXY+XG4iLCI8c2NyaXB0PlxuICAgIGltcG9ydCBVSUNvbW1vbiBmcm9tIFwiLi4vY29tbW9uXCI7XG4gICAgaW1wb3J0IFVJQmxvY2sgZnJvbSBcIi4vdWkuYmxvY2suc3ZlbHRlXCI7XG4gICAgLyoqXG4gICAgICogQHR5cGVkZWYge09iamVjdH0gUHJvcHNcbiAgICAgKiBAcHJvcGVydHkge3N0cmluZ30gW2lkXVxuICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbY2xhc3NdXG4gICAgICogQHByb3BlcnR5IHtzdHJpbmd9ICAgW3JvbGU9XCJidXR0b25cIl1cbiAgICAgKiBAcHJvcGVydHkge251bWJlcn0gICBbdGFiSW5kZXg9MF1cbiAgICAgKiBAcHJvcGVydHkge2Z1bmN0aW9ufSBbb25jbGljayA9ICgpID0+IHRydWVdXG4gICAgICogQHByb3BlcnR5IHtmdW5jdGlvbn0gW29ua2V5dXBdXG4gICAgICogQHByb3BlcnR5IHtpbXBvcnQoJ3N2ZWx0ZScpLlNuaXBwZXR9IFtjaGlsZHJlbl1cbiAgICAgKi9cblxuICAgIC8qKiBAdHlwZSB7UHJvcHN9ICovXG4gICAgbGV0IHtcbiAgICAgICAgaWQgPSBcIlwiLFxuICAgICAgICBjbGFzczogY2xhc3NlcyA9IFwiXCIsXG4gICAgICAgIHJvbGUgPSBcImJ1dHRvblwiLFxuICAgICAgICB0YWJJbmRleCA9IDAsXG4gICAgICAgIG9ua2V5dXAsXG4gICAgICAgIG9uY2xpY2sgPSAoKSA9PiB0cnVlLFxuICAgICAgICBjaGlsZHJlbixcbiAgICB9ID0gJHByb3BzKCk7XG5cbiAgICBjb25zdCBERUZBVUxUX0NMQVNTRVNfSU5ORVIgPSBcImJsb2NrLWlubmVyLXZlcnRpY2FsXCI7XG5cbiAgICBsZXQgY2xhc3Nlc0lubmVyID0gJHN0YXRlKERFRkFVTFRfQ0xBU1NFU19JTk5FUik7XG5cbiAgICAkZWZmZWN0KCgpID0+IHtcbiAgICAgICAgY2xhc3Nlc0lubmVyID0gYGJsb2NrLWlubmVyLXZlcnRpY2FsICR7Y2xhc3Nlc31gO1xuICAgIH0pO1xuXG4gICAgY29uc3Qgb25LZXlVcCA9XG4gICAgICAgIG9ua2V5dXAgPz8gKG9uY2xpY2sgPyBVSUNvbW1vbi5vbmx5T25FbnRlcihvbmNsaWNrKSA6IHVuZGVmaW5lZCk7XG48L3NjcmlwdD5cblxuPFVJQmxvY2tcbiAgICB7aWR9XG4gICAgY2xhc3M9e2NsYXNzZXNJbm5lcn1cbiAgICB7b25jbGlja31cbiAgICBvbmtleXVwPXtvbktleVVwfVxuICAgIHtyb2xlfVxuICAgIHt0YWJJbmRleH1cbj5cbiAgICB7QHJlbmRlciBjaGlsZHJlbj8uKCl9XG48L1VJQmxvY2s+XG4iLCI8c2NyaXB0PlxuICAgIGltcG9ydCBVSUNvbW1vbiBmcm9tIFwiLi4vY29tbW9uXCI7XG4gICAgLyoqXG4gICAgICogQHR5cGVkZWYge09iamVjdH0gUHJvcHNcbiAgICAgKiBAcHJvcGVydHkge3N0cmluZ30gICBbaWRdXG4gICAgICogQHByb3BlcnR5IHtzdHJpbmd9ICAgW2NsYXNzXVxuICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSAgIFtyb2xlPVwiYnV0dG9uXCJdXG4gICAgICogQHByb3BlcnR5IHtudW1iZXJ9ICAgW3RhYkluZGV4PTBdXG4gICAgICogQHByb3BlcnR5IHtmdW5jdGlvbn0gW29uY2xpY2sgPSAoKSA9PiB0cnVlXVxuICAgICAqIEBwcm9wZXJ0eSB7ZnVuY3Rpb259IFtvbmtleXVwXVxuICAgICAqIEBwcm9wZXJ0eSB7aW1wb3J0KCdzdmVsdGUnKS5TbmlwcGV0fSBbY2hpbGRyZW5dXG4gICAgICovXG5cbiAgICAvKiogQHR5cGUge1Byb3BzfSAqL1xuICAgIGxldCB7XG4gICAgICAgIGlkID0gXCJcIixcbiAgICAgICAgY2xhc3M6IGNsYXNzZXMgPSBcIlwiLFxuICAgICAgICByb2xlID0gXCJidXR0b25cIixcbiAgICAgICAgdGFiSW5kZXggPSAwLFxuICAgICAgICBvbmNsaWNrID0gKCkgPT4gdHJ1ZSxcbiAgICAgICAgb25rZXl1cCxcbiAgICAgICAgY2hpbGRyZW4sXG4gICAgfSA9ICRwcm9wcygpO1xuXG4gICAgY29uc3Qgb25LZXlVcCA9XG4gICAgICAgIG9ua2V5dXAgPz8gKG9uY2xpY2sgPyBVSUNvbW1vbi5vbmx5T25FbnRlcihvbmNsaWNrKSA6IHVuZGVmaW5lZCk7XG48L3NjcmlwdD5cblxuPGRpdiB7aWR9IGNsYXNzPVwiYm94IHtjbGFzc2VzfSBcIiB7b25jbGlja30gb25rZXl1cD17b25LZXlVcH0ge3JvbGV9IHt0YWJJbmRleH0+XG4gICAge0ByZW5kZXIgY2hpbGRyZW4/LigpfVxuPC9kaXY+XG4iLCI8c2NyaXB0PlxuICAgIGltcG9ydCBVSUNvbW1vbiBmcm9tIFwiLi4vY29tbW9uXCI7XG4gICAgLyoqXG4gICAgICogQHR5cGVkZWYge09iamVjdH0gUHJvcHNcbiAgICAgKiBAcHJvcGVydHkge3N0cmluZ30gICBbaWRdXG4gICAgICogQHByb3BlcnR5IHtzdHJpbmd9ICAgW2NsYXNzXVxuICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSAgIFtyb2xlPVwiYnV0dG9uXCJdXG4gICAgICogQHByb3BlcnR5IHtudW1iZXJ9ICAgW3RhYkluZGV4PTBdXG4gICAgICogQHByb3BlcnR5IHtmdW5jdGlvbn0gW29uY2xpY2sgPSAoKSA9PiB0cnVlXVxuICAgICAqIEBwcm9wZXJ0eSB7ZnVuY3Rpb259IFtvbmtleXVwXVxuICAgICAqIEBwcm9wZXJ0eSB7aW1wb3J0KCdzdmVsdGUnKS5TbmlwcGV0fSBbY2hpbGRyZW5dXG4gICAgICovXG5cbiAgICAvKiogQHR5cGUge1Byb3BzfSAqL1xuICAgIGxldCB7XG4gICAgICAgIGlkID0gXCJcIixcbiAgICAgICAgY2xhc3M6IGNsYXNzZXMgPSBcIlwiLFxuICAgICAgICByb2xlID0gXCJidXR0b25cIixcbiAgICAgICAgdGFiSW5kZXggPSAwLFxuICAgICAgICBvbmNsaWNrID0gKCkgPT4gdHJ1ZSxcbiAgICAgICAgb25rZXl1cCxcbiAgICAgICAgY2hpbGRyZW4sXG4gICAgfSA9ICRwcm9wcygpO1xuXG4gICAgY29uc3Qgb25LZXlVcCA9XG4gICAgICAgIG9ua2V5dXAgPz8gKG9uY2xpY2sgPyBVSUNvbW1vbi5vbmx5T25FbnRlcihvbmNsaWNrKSA6IHVuZGVmaW5lZCk7XG48L3NjcmlwdD5cblxuPGRpdlxuICAgIHtpZH1cbiAgICBjbGFzcz1cImNvbnRlbnQge2NsYXNzZXN9XCJcbiAgICB7b25jbGlja31cbiAgICBvbmtleXVwPXtvbktleVVwfVxuICAgIHtyb2xlfVxuICAgIHt0YWJJbmRleH1cbj5cbiAgICB7QHJlbmRlciBjaGlsZHJlbj8uKCl9XG48L2Rpdj5cbiIsIi8qKiBAaW1wb3J0IHsgUmVhZGFibGUsIFN0YXJ0U3RvcE5vdGlmaWVyLCBTdWJzY3JpYmVyLCBVbnN1YnNjcmliZXIsIFVwZGF0ZXIsIFdyaXRhYmxlIH0gZnJvbSAnLi4vcHVibGljLmpzJyAqL1xuLyoqIEBpbXBvcnQgeyBTdG9yZXMsIFN0b3Jlc1ZhbHVlcywgU3Vic2NyaWJlSW52YWxpZGF0ZVR1cGxlIH0gZnJvbSAnLi4vcHJpdmF0ZS5qcycgKi9cbmltcG9ydCB7IG5vb3AsIHJ1bl9hbGwgfSBmcm9tICcuLi8uLi9pbnRlcm5hbC9zaGFyZWQvdXRpbHMuanMnO1xuaW1wb3J0IHsgc2FmZV9ub3RfZXF1YWwgfSBmcm9tICcuLi8uLi9pbnRlcm5hbC9jbGllbnQvcmVhY3Rpdml0eS9lcXVhbGl0eS5qcyc7XG5pbXBvcnQgeyBzdWJzY3JpYmVfdG9fc3RvcmUgfSBmcm9tICcuLi91dGlscy5qcyc7XG5cbi8qKlxuICogQHR5cGUge0FycmF5PFN1YnNjcmliZUludmFsaWRhdGVUdXBsZTxhbnk+IHwgYW55Pn1cbiAqL1xuY29uc3Qgc3Vic2NyaWJlcl9xdWV1ZSA9IFtdO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBgUmVhZGFibGVgIHN0b3JlIHRoYXQgYWxsb3dzIHJlYWRpbmcgYnkgc3Vic2NyaXB0aW9uLlxuICpcbiAqIEB0ZW1wbGF0ZSBUXG4gKiBAcGFyYW0ge1R9IFt2YWx1ZV0gaW5pdGlhbCB2YWx1ZVxuICogQHBhcmFtIHtTdGFydFN0b3BOb3RpZmllcjxUPn0gW3N0YXJ0XVxuICogQHJldHVybnMge1JlYWRhYmxlPFQ+fVxuICovXG5leHBvcnQgZnVuY3Rpb24gcmVhZGFibGUodmFsdWUsIHN0YXJ0KSB7XG5cdHJldHVybiB7XG5cdFx0c3Vic2NyaWJlOiB3cml0YWJsZSh2YWx1ZSwgc3RhcnQpLnN1YnNjcmliZVxuXHR9O1xufVxuXG4vKipcbiAqIENyZWF0ZSBhIGBXcml0YWJsZWAgc3RvcmUgdGhhdCBhbGxvd3MgYm90aCB1cGRhdGluZyBhbmQgcmVhZGluZyBieSBzdWJzY3JpcHRpb24uXG4gKlxuICogQHRlbXBsYXRlIFRcbiAqIEBwYXJhbSB7VH0gW3ZhbHVlXSBpbml0aWFsIHZhbHVlXG4gKiBAcGFyYW0ge1N0YXJ0U3RvcE5vdGlmaWVyPFQ+fSBbc3RhcnRdXG4gKiBAcmV0dXJucyB7V3JpdGFibGU8VD59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB3cml0YWJsZSh2YWx1ZSwgc3RhcnQgPSBub29wKSB7XG5cdC8qKiBAdHlwZSB7VW5zdWJzY3JpYmVyIHwgbnVsbH0gKi9cblx0bGV0IHN0b3AgPSBudWxsO1xuXG5cdC8qKiBAdHlwZSB7U2V0PFN1YnNjcmliZUludmFsaWRhdGVUdXBsZTxUPj59ICovXG5cdGNvbnN0IHN1YnNjcmliZXJzID0gbmV3IFNldCgpO1xuXG5cdC8qKlxuXHQgKiBAcGFyYW0ge1R9IG5ld192YWx1ZVxuXHQgKiBAcmV0dXJucyB7dm9pZH1cblx0ICovXG5cdGZ1bmN0aW9uIHNldChuZXdfdmFsdWUpIHtcblx0XHRpZiAoc2FmZV9ub3RfZXF1YWwodmFsdWUsIG5ld192YWx1ZSkpIHtcblx0XHRcdHZhbHVlID0gbmV3X3ZhbHVlO1xuXHRcdFx0aWYgKHN0b3ApIHtcblx0XHRcdFx0Ly8gc3RvcmUgaXMgcmVhZHlcblx0XHRcdFx0Y29uc3QgcnVuX3F1ZXVlID0gIXN1YnNjcmliZXJfcXVldWUubGVuZ3RoO1xuXHRcdFx0XHRmb3IgKGNvbnN0IHN1YnNjcmliZXIgb2Ygc3Vic2NyaWJlcnMpIHtcblx0XHRcdFx0XHRzdWJzY3JpYmVyWzFdKCk7XG5cdFx0XHRcdFx0c3Vic2NyaWJlcl9xdWV1ZS5wdXNoKHN1YnNjcmliZXIsIHZhbHVlKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAocnVuX3F1ZXVlKSB7XG5cdFx0XHRcdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBzdWJzY3JpYmVyX3F1ZXVlLmxlbmd0aDsgaSArPSAyKSB7XG5cdFx0XHRcdFx0XHRzdWJzY3JpYmVyX3F1ZXVlW2ldWzBdKHN1YnNjcmliZXJfcXVldWVbaSArIDFdKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0c3Vic2NyaWJlcl9xdWV1ZS5sZW5ndGggPSAwO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0LyoqXG5cdCAqIEBwYXJhbSB7VXBkYXRlcjxUPn0gZm5cblx0ICogQHJldHVybnMge3ZvaWR9XG5cdCAqL1xuXHRmdW5jdGlvbiB1cGRhdGUoZm4pIHtcblx0XHRzZXQoZm4oLyoqIEB0eXBlIHtUfSAqLyAodmFsdWUpKSk7XG5cdH1cblxuXHQvKipcblx0ICogQHBhcmFtIHtTdWJzY3JpYmVyPFQ+fSBydW5cblx0ICogQHBhcmFtIHsoKSA9PiB2b2lkfSBbaW52YWxpZGF0ZV1cblx0ICogQHJldHVybnMge1Vuc3Vic2NyaWJlcn1cblx0ICovXG5cdGZ1bmN0aW9uIHN1YnNjcmliZShydW4sIGludmFsaWRhdGUgPSBub29wKSB7XG5cdFx0LyoqIEB0eXBlIHtTdWJzY3JpYmVJbnZhbGlkYXRlVHVwbGU8VD59ICovXG5cdFx0Y29uc3Qgc3Vic2NyaWJlciA9IFtydW4sIGludmFsaWRhdGVdO1xuXHRcdHN1YnNjcmliZXJzLmFkZChzdWJzY3JpYmVyKTtcblx0XHRpZiAoc3Vic2NyaWJlcnMuc2l6ZSA9PT0gMSkge1xuXHRcdFx0c3RvcCA9IHN0YXJ0KHNldCwgdXBkYXRlKSB8fCBub29wO1xuXHRcdH1cblx0XHRydW4oLyoqIEB0eXBlIHtUfSAqLyAodmFsdWUpKTtcblx0XHRyZXR1cm4gKCkgPT4ge1xuXHRcdFx0c3Vic2NyaWJlcnMuZGVsZXRlKHN1YnNjcmliZXIpO1xuXHRcdFx0aWYgKHN1YnNjcmliZXJzLnNpemUgPT09IDAgJiYgc3RvcCkge1xuXHRcdFx0XHRzdG9wKCk7XG5cdFx0XHRcdHN0b3AgPSBudWxsO1xuXHRcdFx0fVxuXHRcdH07XG5cdH1cblx0cmV0dXJuIHsgc2V0LCB1cGRhdGUsIHN1YnNjcmliZSB9O1xufVxuXG4vKipcbiAqIERlcml2ZWQgdmFsdWUgc3RvcmUgYnkgc3luY2hyb25pemluZyBvbmUgb3IgbW9yZSByZWFkYWJsZSBzdG9yZXMgYW5kXG4gKiBhcHBseWluZyBhbiBhZ2dyZWdhdGlvbiBmdW5jdGlvbiBvdmVyIGl0cyBpbnB1dCB2YWx1ZXMuXG4gKlxuICogQHRlbXBsYXRlIHtTdG9yZXN9IFNcbiAqIEB0ZW1wbGF0ZSBUXG4gKiBAb3ZlcmxvYWRcbiAqIEBwYXJhbSB7U30gc3RvcmVzXG4gKiBAcGFyYW0geyh2YWx1ZXM6IFN0b3Jlc1ZhbHVlczxTPiwgc2V0OiAodmFsdWU6IFQpID0+IHZvaWQsIHVwZGF0ZTogKGZuOiBVcGRhdGVyPFQ+KSA9PiB2b2lkKSA9PiBVbnN1YnNjcmliZXIgfCB2b2lkfSBmblxuICogQHBhcmFtIHtUfSBbaW5pdGlhbF92YWx1ZV1cbiAqIEByZXR1cm5zIHtSZWFkYWJsZTxUPn1cbiAqL1xuLyoqXG4gKiBEZXJpdmVkIHZhbHVlIHN0b3JlIGJ5IHN5bmNocm9uaXppbmcgb25lIG9yIG1vcmUgcmVhZGFibGUgc3RvcmVzIGFuZFxuICogYXBwbHlpbmcgYW4gYWdncmVnYXRpb24gZnVuY3Rpb24gb3ZlciBpdHMgaW5wdXQgdmFsdWVzLlxuICpcbiAqIEB0ZW1wbGF0ZSB7U3RvcmVzfSBTXG4gKiBAdGVtcGxhdGUgVFxuICogQG92ZXJsb2FkXG4gKiBAcGFyYW0ge1N9IHN0b3Jlc1xuICogQHBhcmFtIHsodmFsdWVzOiBTdG9yZXNWYWx1ZXM8Uz4pID0+IFR9IGZuXG4gKiBAcGFyYW0ge1R9IFtpbml0aWFsX3ZhbHVlXVxuICogQHJldHVybnMge1JlYWRhYmxlPFQ+fVxuICovXG4vKipcbiAqIEB0ZW1wbGF0ZSB7U3RvcmVzfSBTXG4gKiBAdGVtcGxhdGUgVFxuICogQHBhcmFtIHtTfSBzdG9yZXNcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXG4gKiBAcGFyYW0ge1R9IFtpbml0aWFsX3ZhbHVlXVxuICogQHJldHVybnMge1JlYWRhYmxlPFQ+fVxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVyaXZlZChzdG9yZXMsIGZuLCBpbml0aWFsX3ZhbHVlKSB7XG5cdGNvbnN0IHNpbmdsZSA9ICFBcnJheS5pc0FycmF5KHN0b3Jlcyk7XG5cdC8qKiBAdHlwZSB7QXJyYXk8UmVhZGFibGU8YW55Pj59ICovXG5cdGNvbnN0IHN0b3Jlc19hcnJheSA9IHNpbmdsZSA/IFtzdG9yZXNdIDogc3RvcmVzO1xuXHRpZiAoIXN0b3Jlc19hcnJheS5ldmVyeShCb29sZWFuKSkge1xuXHRcdHRocm93IG5ldyBFcnJvcignZGVyaXZlZCgpIGV4cGVjdHMgc3RvcmVzIGFzIGlucHV0LCBnb3QgYSBmYWxzeSB2YWx1ZScpO1xuXHR9XG5cdGNvbnN0IGF1dG8gPSBmbi5sZW5ndGggPCAyO1xuXHRyZXR1cm4gcmVhZGFibGUoaW5pdGlhbF92YWx1ZSwgKHNldCwgdXBkYXRlKSA9PiB7XG5cdFx0bGV0IHN0YXJ0ZWQgPSBmYWxzZTtcblx0XHQvKiogQHR5cGUge1RbXX0gKi9cblx0XHRjb25zdCB2YWx1ZXMgPSBbXTtcblx0XHRsZXQgcGVuZGluZyA9IDA7XG5cdFx0bGV0IGNsZWFudXAgPSBub29wO1xuXHRcdGNvbnN0IHN5bmMgPSAoKSA9PiB7XG5cdFx0XHRpZiAocGVuZGluZykge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFx0XHRjbGVhbnVwKCk7XG5cdFx0XHRjb25zdCByZXN1bHQgPSBmbihzaW5nbGUgPyB2YWx1ZXNbMF0gOiB2YWx1ZXMsIHNldCwgdXBkYXRlKTtcblx0XHRcdGlmIChhdXRvKSB7XG5cdFx0XHRcdHNldChyZXN1bHQpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y2xlYW51cCA9IHR5cGVvZiByZXN1bHQgPT09ICdmdW5jdGlvbicgPyByZXN1bHQgOiBub29wO1xuXHRcdFx0fVxuXHRcdH07XG5cdFx0Y29uc3QgdW5zdWJzY3JpYmVycyA9IHN0b3Jlc19hcnJheS5tYXAoKHN0b3JlLCBpKSA9PlxuXHRcdFx0c3Vic2NyaWJlX3RvX3N0b3JlKFxuXHRcdFx0XHRzdG9yZSxcblx0XHRcdFx0KHZhbHVlKSA9PiB7XG5cdFx0XHRcdFx0dmFsdWVzW2ldID0gdmFsdWU7XG5cdFx0XHRcdFx0cGVuZGluZyAmPSB+KDEgPDwgaSk7XG5cdFx0XHRcdFx0aWYgKHN0YXJ0ZWQpIHtcblx0XHRcdFx0XHRcdHN5bmMoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0sXG5cdFx0XHRcdCgpID0+IHtcblx0XHRcdFx0XHRwZW5kaW5nIHw9IDEgPDwgaTtcblx0XHRcdFx0fVxuXHRcdFx0KVxuXHRcdCk7XG5cdFx0c3RhcnRlZCA9IHRydWU7XG5cdFx0c3luYygpO1xuXHRcdHJldHVybiBmdW5jdGlvbiBzdG9wKCkge1xuXHRcdFx0cnVuX2FsbCh1bnN1YnNjcmliZXJzKTtcblx0XHRcdGNsZWFudXAoKTtcblx0XHRcdC8vIFdlIG5lZWQgdG8gc2V0IHRoaXMgdG8gZmFsc2UgYmVjYXVzZSBjYWxsYmFja3MgY2FuIHN0aWxsIGhhcHBlbiBkZXNwaXRlIGhhdmluZyB1bnN1YnNjcmliZWQ6XG5cdFx0XHQvLyBDYWxsYmFja3MgbWlnaHQgYWxyZWFkeSBiZSBwbGFjZWQgaW4gdGhlIHF1ZXVlIHdoaWNoIGRvZXNuJ3Qga25vdyBpdCBzaG91bGQgbm8gbG9uZ2VyXG5cdFx0XHQvLyBpbnZva2UgdGhpcyBkZXJpdmVkIHN0b3JlLlxuXHRcdFx0c3RhcnRlZCA9IGZhbHNlO1xuXHRcdH07XG5cdH0pO1xufVxuXG4vKipcbiAqIFRha2VzIGEgc3RvcmUgYW5kIHJldHVybnMgYSBuZXcgb25lIGRlcml2ZWQgZnJvbSB0aGUgb2xkIG9uZSB0aGF0IGlzIHJlYWRhYmxlLlxuICpcbiAqIEB0ZW1wbGF0ZSBUXG4gKiBAcGFyYW0ge1JlYWRhYmxlPFQ+fSBzdG9yZSAgLSBzdG9yZSB0byBtYWtlIHJlYWRvbmx5XG4gKiBAcmV0dXJucyB7UmVhZGFibGU8VD59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZWFkb25seShzdG9yZSkge1xuXHRyZXR1cm4ge1xuXHRcdC8vIEB0cy1leHBlY3QtZXJyb3IgVE9ETyBpIHN1c3BlY3QgdGhlIGJpbmQgaXMgdW5uZWNlc3Nhcnlcblx0XHRzdWJzY3JpYmU6IHN0b3JlLnN1YnNjcmliZS5iaW5kKHN0b3JlKVxuXHR9O1xufVxuXG4vKipcbiAqIEdldCB0aGUgY3VycmVudCB2YWx1ZSBmcm9tIGEgc3RvcmUgYnkgc3Vic2NyaWJpbmcgYW5kIGltbWVkaWF0ZWx5IHVuc3Vic2NyaWJpbmcuXG4gKlxuICogQHRlbXBsYXRlIFRcbiAqIEBwYXJhbSB7UmVhZGFibGU8VD59IHN0b3JlXG4gKiBAcmV0dXJucyB7VH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldChzdG9yZSkge1xuXHRsZXQgdmFsdWU7XG5cdHN1YnNjcmliZV90b19zdG9yZShzdG9yZSwgKF8pID0+ICh2YWx1ZSA9IF8pKSgpO1xuXHQvLyBAdHMtZXhwZWN0LWVycm9yXG5cdHJldHVybiB2YWx1ZTtcbn1cbiIsImltcG9ydCB7IHdyaXRhYmxlIH0gZnJvbSBcInN2ZWx0ZS9zdG9yZVwiO1xuXG5mdW5jdGlvbiBpbml0RGljdCh0YXJnZXQgPSB7fSkge1xuICAgIGNvbnN0IGhhbmRsZXIgPSB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKHRhcmdldCwgcHJvcCkge1xuICAgICAgICAgICAgaWYgKCFPYmplY3QuaGFzT3duKHRhcmdldCwgcHJvcCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcHJvcDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBSZWZsZWN0LmdldCguLi5hcmd1bWVudHMpO1xuICAgICAgICB9LFxuICAgIH07XG4gICAgcmV0dXJuIG5ldyBQcm94eSh0YXJnZXQsIGhhbmRsZXIpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVMb2NhbGUoKSB7XG4gICAgY29uc3QgeyBzdWJzY3JpYmUsIHNldCwgdXBkYXRlIH0gPSB3cml0YWJsZShpbml0RGljdCgpKTtcbiAgICByZXR1cm4ge1xuICAgICAgICBzdWJzY3JpYmUsXG4gICAgICAgIHVwZGF0ZSxcbiAgICAgICAgc2V0OiAodmFsKSA9PiB7XG4gICAgICAgICAgICBzZXQoaW5pdERpY3QodmFsKSk7XG4gICAgICAgIH0sXG4gICAgICAgIHJlc2V0OiAoKSA9PiBzZXQoaW5pdERpY3QoKSksXG4gICAgfTtcbn1cblxuY29uc3QgTE9DQUxFID0gY3JlYXRlTG9jYWxlKCk7XG5cbmV4cG9ydCBkZWZhdWx0IExPQ0FMRTtcbiIsIi8qIVxuICogRXZlbnRFbWl0dGVyIHY1LjIuOSAtIGdpdC5pby9lZVxuICogVW5saWNlbnNlIC0gaHR0cDovL3VubGljZW5zZS5vcmcvXG4gKiBPbGl2ZXIgQ2FsZHdlbGwgLSBodHRwczovL29saS5tZS51ay9cbiAqIEBwcmVzZXJ2ZVxuICovXG5cbjsoZnVuY3Rpb24gKGV4cG9ydHMpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICAvKipcbiAgICAgKiBDbGFzcyBmb3IgbWFuYWdpbmcgZXZlbnRzLlxuICAgICAqIENhbiBiZSBleHRlbmRlZCB0byBwcm92aWRlIGV2ZW50IGZ1bmN0aW9uYWxpdHkgaW4gb3RoZXIgY2xhc3Nlcy5cbiAgICAgKlxuICAgICAqIEBjbGFzcyBFdmVudEVtaXR0ZXIgTWFuYWdlcyBldmVudCByZWdpc3RlcmluZyBhbmQgZW1pdHRpbmcuXG4gICAgICovXG4gICAgZnVuY3Rpb24gRXZlbnRFbWl0dGVyKCkge31cblxuICAgIC8vIFNob3J0Y3V0cyB0byBpbXByb3ZlIHNwZWVkIGFuZCBzaXplXG4gICAgdmFyIHByb3RvID0gRXZlbnRFbWl0dGVyLnByb3RvdHlwZTtcbiAgICB2YXIgb3JpZ2luYWxHbG9iYWxWYWx1ZSA9IGV4cG9ydHMuRXZlbnRFbWl0dGVyO1xuXG4gICAgLyoqXG4gICAgICogRmluZHMgdGhlIGluZGV4IG9mIHRoZSBsaXN0ZW5lciBmb3IgdGhlIGV2ZW50IGluIGl0cyBzdG9yYWdlIGFycmF5LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbltdfSBsaXN0ZW5lcnMgQXJyYXkgb2YgbGlzdGVuZXJzIHRvIHNlYXJjaCB0aHJvdWdoLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGxpc3RlbmVyIE1ldGhvZCB0byBsb29rIGZvci5cbiAgICAgKiBAcmV0dXJuIHtOdW1iZXJ9IEluZGV4IG9mIHRoZSBzcGVjaWZpZWQgbGlzdGVuZXIsIC0xIGlmIG5vdCBmb3VuZFxuICAgICAqIEBhcGkgcHJpdmF0ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGluZGV4T2ZMaXN0ZW5lcihsaXN0ZW5lcnMsIGxpc3RlbmVyKSB7XG4gICAgICAgIHZhciBpID0gbGlzdGVuZXJzLmxlbmd0aDtcbiAgICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICAgICAgaWYgKGxpc3RlbmVyc1tpXS5saXN0ZW5lciA9PT0gbGlzdGVuZXIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAtMTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBbGlhcyBhIG1ldGhvZCB3aGlsZSBrZWVwaW5nIHRoZSBjb250ZXh0IGNvcnJlY3QsIHRvIGFsbG93IGZvciBvdmVyd3JpdGluZyBvZiB0YXJnZXQgbWV0aG9kLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IG5hbWUgVGhlIG5hbWUgb2YgdGhlIHRhcmdldCBtZXRob2QuXG4gICAgICogQHJldHVybiB7RnVuY3Rpb259IFRoZSBhbGlhc2VkIG1ldGhvZFxuICAgICAqIEBhcGkgcHJpdmF0ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFsaWFzKG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIGFsaWFzQ2xvc3VyZSgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzW25hbWVdLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgbGlzdGVuZXIgYXJyYXkgZm9yIHRoZSBzcGVjaWZpZWQgZXZlbnQuXG4gICAgICogV2lsbCBpbml0aWFsaXNlIHRoZSBldmVudCBvYmplY3QgYW5kIGxpc3RlbmVyIGFycmF5cyBpZiByZXF1aXJlZC5cbiAgICAgKiBXaWxsIHJldHVybiBhbiBvYmplY3QgaWYgeW91IHVzZSBhIHJlZ2V4IHNlYXJjaC4gVGhlIG9iamVjdCBjb250YWlucyBrZXlzIGZvciBlYWNoIG1hdGNoZWQgZXZlbnQuIFNvIC9iYVtyel0vIG1pZ2h0IHJldHVybiBhbiBvYmplY3QgY29udGFpbmluZyBiYXIgYW5kIGJhei4gQnV0IG9ubHkgaWYgeW91IGhhdmUgZWl0aGVyIGRlZmluZWQgdGhlbSB3aXRoIGRlZmluZUV2ZW50IG9yIGFkZGVkIHNvbWUgbGlzdGVuZXJzIHRvIHRoZW0uXG4gICAgICogRWFjaCBwcm9wZXJ0eSBpbiB0aGUgb2JqZWN0IHJlc3BvbnNlIGlzIGFuIGFycmF5IG9mIGxpc3RlbmVyIGZ1bmN0aW9ucy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfFJlZ0V4cH0gZXZ0IE5hbWUgb2YgdGhlIGV2ZW50IHRvIHJldHVybiB0aGUgbGlzdGVuZXJzIGZyb20uXG4gICAgICogQHJldHVybiB7RnVuY3Rpb25bXXxPYmplY3R9IEFsbCBsaXN0ZW5lciBmdW5jdGlvbnMgZm9yIHRoZSBldmVudC5cbiAgICAgKi9cbiAgICBwcm90by5nZXRMaXN0ZW5lcnMgPSBmdW5jdGlvbiBnZXRMaXN0ZW5lcnMoZXZ0KSB7XG4gICAgICAgIHZhciBldmVudHMgPSB0aGlzLl9nZXRFdmVudHMoKTtcbiAgICAgICAgdmFyIHJlc3BvbnNlO1xuICAgICAgICB2YXIga2V5O1xuXG4gICAgICAgIC8vIFJldHVybiBhIGNvbmNhdGVuYXRlZCBhcnJheSBvZiBhbGwgbWF0Y2hpbmcgZXZlbnRzIGlmXG4gICAgICAgIC8vIHRoZSBzZWxlY3RvciBpcyBhIHJlZ3VsYXIgZXhwcmVzc2lvbi5cbiAgICAgICAgaWYgKGV2dCBpbnN0YW5jZW9mIFJlZ0V4cCkge1xuICAgICAgICAgICAgcmVzcG9uc2UgPSB7fTtcbiAgICAgICAgICAgIGZvciAoa2V5IGluIGV2ZW50cykge1xuICAgICAgICAgICAgICAgIGlmIChldmVudHMuaGFzT3duUHJvcGVydHkoa2V5KSAmJiBldnQudGVzdChrZXkpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlW2tleV0gPSBldmVudHNba2V5XTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXNwb25zZSA9IGV2ZW50c1tldnRdIHx8IChldmVudHNbZXZ0XSA9IFtdKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVGFrZXMgYSBsaXN0IG9mIGxpc3RlbmVyIG9iamVjdHMgYW5kIGZsYXR0ZW5zIGl0IGludG8gYSBsaXN0IG9mIGxpc3RlbmVyIGZ1bmN0aW9ucy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0W119IGxpc3RlbmVycyBSYXcgbGlzdGVuZXIgb2JqZWN0cy5cbiAgICAgKiBAcmV0dXJuIHtGdW5jdGlvbltdfSBKdXN0IHRoZSBsaXN0ZW5lciBmdW5jdGlvbnMuXG4gICAgICovXG4gICAgcHJvdG8uZmxhdHRlbkxpc3RlbmVycyA9IGZ1bmN0aW9uIGZsYXR0ZW5MaXN0ZW5lcnMobGlzdGVuZXJzKSB7XG4gICAgICAgIHZhciBmbGF0TGlzdGVuZXJzID0gW107XG4gICAgICAgIHZhciBpO1xuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBsaXN0ZW5lcnMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAgIGZsYXRMaXN0ZW5lcnMucHVzaChsaXN0ZW5lcnNbaV0ubGlzdGVuZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZsYXRMaXN0ZW5lcnM7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEZldGNoZXMgdGhlIHJlcXVlc3RlZCBsaXN0ZW5lcnMgdmlhIGdldExpc3RlbmVycyBidXQgd2lsbCBhbHdheXMgcmV0dXJuIHRoZSByZXN1bHRzIGluc2lkZSBhbiBvYmplY3QuIFRoaXMgaXMgbWFpbmx5IGZvciBpbnRlcm5hbCB1c2UgYnV0IG90aGVycyBtYXkgZmluZCBpdCB1c2VmdWwuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1N0cmluZ3xSZWdFeHB9IGV2dCBOYW1lIG9mIHRoZSBldmVudCB0byByZXR1cm4gdGhlIGxpc3RlbmVycyBmcm9tLlxuICAgICAqIEByZXR1cm4ge09iamVjdH0gQWxsIGxpc3RlbmVyIGZ1bmN0aW9ucyBmb3IgYW4gZXZlbnQgaW4gYW4gb2JqZWN0LlxuICAgICAqL1xuICAgIHByb3RvLmdldExpc3RlbmVyc0FzT2JqZWN0ID0gZnVuY3Rpb24gZ2V0TGlzdGVuZXJzQXNPYmplY3QoZXZ0KSB7XG4gICAgICAgIHZhciBsaXN0ZW5lcnMgPSB0aGlzLmdldExpc3RlbmVycyhldnQpO1xuICAgICAgICB2YXIgcmVzcG9uc2U7XG5cbiAgICAgICAgaWYgKGxpc3RlbmVycyBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICAgICAgICByZXNwb25zZSA9IHt9O1xuICAgICAgICAgICAgcmVzcG9uc2VbZXZ0XSA9IGxpc3RlbmVycztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXNwb25zZSB8fCBsaXN0ZW5lcnM7XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGlzVmFsaWRMaXN0ZW5lciAobGlzdGVuZXIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBsaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJyB8fCBsaXN0ZW5lciBpbnN0YW5jZW9mIFJlZ0V4cCkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgfSBlbHNlIGlmIChsaXN0ZW5lciAmJiB0eXBlb2YgbGlzdGVuZXIgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICByZXR1cm4gaXNWYWxpZExpc3RlbmVyKGxpc3RlbmVyLmxpc3RlbmVyKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZGRzIGEgbGlzdGVuZXIgZnVuY3Rpb24gdG8gdGhlIHNwZWNpZmllZCBldmVudC5cbiAgICAgKiBUaGUgbGlzdGVuZXIgd2lsbCBub3QgYmUgYWRkZWQgaWYgaXQgaXMgYSBkdXBsaWNhdGUuXG4gICAgICogSWYgdGhlIGxpc3RlbmVyIHJldHVybnMgdHJ1ZSB0aGVuIGl0IHdpbGwgYmUgcmVtb3ZlZCBhZnRlciBpdCBpcyBjYWxsZWQuXG4gICAgICogSWYgeW91IHBhc3MgYSByZWd1bGFyIGV4cHJlc3Npb24gYXMgdGhlIGV2ZW50IG5hbWUgdGhlbiB0aGUgbGlzdGVuZXIgd2lsbCBiZSBhZGRlZCB0byBhbGwgZXZlbnRzIHRoYXQgbWF0Y2ggaXQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1N0cmluZ3xSZWdFeHB9IGV2dCBOYW1lIG9mIHRoZSBldmVudCB0byBhdHRhY2ggdGhlIGxpc3RlbmVyIHRvLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGxpc3RlbmVyIE1ldGhvZCB0byBiZSBjYWxsZWQgd2hlbiB0aGUgZXZlbnQgaXMgZW1pdHRlZC4gSWYgdGhlIGZ1bmN0aW9uIHJldHVybnMgdHJ1ZSB0aGVuIGl0IHdpbGwgYmUgcmVtb3ZlZCBhZnRlciBjYWxsaW5nLlxuICAgICAqIEByZXR1cm4ge09iamVjdH0gQ3VycmVudCBpbnN0YW5jZSBvZiBFdmVudEVtaXR0ZXIgZm9yIGNoYWluaW5nLlxuICAgICAqL1xuICAgIHByb3RvLmFkZExpc3RlbmVyID0gZnVuY3Rpb24gYWRkTGlzdGVuZXIoZXZ0LCBsaXN0ZW5lcikge1xuICAgICAgICBpZiAoIWlzVmFsaWRMaXN0ZW5lcihsaXN0ZW5lcikpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2xpc3RlbmVyIG11c3QgYmUgYSBmdW5jdGlvbicpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGxpc3RlbmVycyA9IHRoaXMuZ2V0TGlzdGVuZXJzQXNPYmplY3QoZXZ0KTtcbiAgICAgICAgdmFyIGxpc3RlbmVySXNXcmFwcGVkID0gdHlwZW9mIGxpc3RlbmVyID09PSAnb2JqZWN0JztcbiAgICAgICAgdmFyIGtleTtcblxuICAgICAgICBmb3IgKGtleSBpbiBsaXN0ZW5lcnMpIHtcbiAgICAgICAgICAgIGlmIChsaXN0ZW5lcnMuaGFzT3duUHJvcGVydHkoa2V5KSAmJiBpbmRleE9mTGlzdGVuZXIobGlzdGVuZXJzW2tleV0sIGxpc3RlbmVyKSA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICBsaXN0ZW5lcnNba2V5XS5wdXNoKGxpc3RlbmVySXNXcmFwcGVkID8gbGlzdGVuZXIgOiB7XG4gICAgICAgICAgICAgICAgICAgIGxpc3RlbmVyOiBsaXN0ZW5lcixcbiAgICAgICAgICAgICAgICAgICAgb25jZTogZmFsc2VcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBBbGlhcyBvZiBhZGRMaXN0ZW5lclxuICAgICAqL1xuICAgIHByb3RvLm9uID0gYWxpYXMoJ2FkZExpc3RlbmVyJyk7XG5cbiAgICAvKipcbiAgICAgKiBTZW1pLWFsaWFzIG9mIGFkZExpc3RlbmVyLiBJdCB3aWxsIGFkZCBhIGxpc3RlbmVyIHRoYXQgd2lsbCBiZVxuICAgICAqIGF1dG9tYXRpY2FsbHkgcmVtb3ZlZCBhZnRlciBpdHMgZmlyc3QgZXhlY3V0aW9uLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtTdHJpbmd8UmVnRXhwfSBldnQgTmFtZSBvZiB0aGUgZXZlbnQgdG8gYXR0YWNoIHRoZSBsaXN0ZW5lciB0by5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBsaXN0ZW5lciBNZXRob2QgdG8gYmUgY2FsbGVkIHdoZW4gdGhlIGV2ZW50IGlzIGVtaXR0ZWQuIElmIHRoZSBmdW5jdGlvbiByZXR1cm5zIHRydWUgdGhlbiBpdCB3aWxsIGJlIHJlbW92ZWQgYWZ0ZXIgY2FsbGluZy5cbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IEN1cnJlbnQgaW5zdGFuY2Ugb2YgRXZlbnRFbWl0dGVyIGZvciBjaGFpbmluZy5cbiAgICAgKi9cbiAgICBwcm90by5hZGRPbmNlTGlzdGVuZXIgPSBmdW5jdGlvbiBhZGRPbmNlTGlzdGVuZXIoZXZ0LCBsaXN0ZW5lcikge1xuICAgICAgICByZXR1cm4gdGhpcy5hZGRMaXN0ZW5lcihldnQsIHtcbiAgICAgICAgICAgIGxpc3RlbmVyOiBsaXN0ZW5lcixcbiAgICAgICAgICAgIG9uY2U6IHRydWVcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEFsaWFzIG9mIGFkZE9uY2VMaXN0ZW5lci5cbiAgICAgKi9cbiAgICBwcm90by5vbmNlID0gYWxpYXMoJ2FkZE9uY2VMaXN0ZW5lcicpO1xuXG4gICAgLyoqXG4gICAgICogRGVmaW5lcyBhbiBldmVudCBuYW1lLiBUaGlzIGlzIHJlcXVpcmVkIGlmIHlvdSB3YW50IHRvIHVzZSBhIHJlZ2V4IHRvIGFkZCBhIGxpc3RlbmVyIHRvIG11bHRpcGxlIGV2ZW50cyBhdCBvbmNlLiBJZiB5b3UgZG9uJ3QgZG8gdGhpcyB0aGVuIGhvdyBkbyB5b3UgZXhwZWN0IGl0IHRvIGtub3cgd2hhdCBldmVudCB0byBhZGQgdG8/IFNob3VsZCBpdCBqdXN0IGFkZCB0byBldmVyeSBwb3NzaWJsZSBtYXRjaCBmb3IgYSByZWdleD8gTm8uIFRoYXQgaXMgc2NhcnkgYW5kIGJhZC5cbiAgICAgKiBZb3UgbmVlZCB0byB0ZWxsIGl0IHdoYXQgZXZlbnQgbmFtZXMgc2hvdWxkIGJlIG1hdGNoZWQgYnkgYSByZWdleC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBldnQgTmFtZSBvZiB0aGUgZXZlbnQgdG8gY3JlYXRlLlxuICAgICAqIEByZXR1cm4ge09iamVjdH0gQ3VycmVudCBpbnN0YW5jZSBvZiBFdmVudEVtaXR0ZXIgZm9yIGNoYWluaW5nLlxuICAgICAqL1xuICAgIHByb3RvLmRlZmluZUV2ZW50ID0gZnVuY3Rpb24gZGVmaW5lRXZlbnQoZXZ0KSB7XG4gICAgICAgIHRoaXMuZ2V0TGlzdGVuZXJzKGV2dCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBVc2VzIGRlZmluZUV2ZW50IHRvIGRlZmluZSBtdWx0aXBsZSBldmVudHMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1N0cmluZ1tdfSBldnRzIEFuIGFycmF5IG9mIGV2ZW50IG5hbWVzIHRvIGRlZmluZS5cbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IEN1cnJlbnQgaW5zdGFuY2Ugb2YgRXZlbnRFbWl0dGVyIGZvciBjaGFpbmluZy5cbiAgICAgKi9cbiAgICBwcm90by5kZWZpbmVFdmVudHMgPSBmdW5jdGlvbiBkZWZpbmVFdmVudHMoZXZ0cykge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGV2dHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAgIHRoaXMuZGVmaW5lRXZlbnQoZXZ0c1tpXSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYSBsaXN0ZW5lciBmdW5jdGlvbiBmcm9tIHRoZSBzcGVjaWZpZWQgZXZlbnQuXG4gICAgICogV2hlbiBwYXNzZWQgYSByZWd1bGFyIGV4cHJlc3Npb24gYXMgdGhlIGV2ZW50IG5hbWUsIGl0IHdpbGwgcmVtb3ZlIHRoZSBsaXN0ZW5lciBmcm9tIGFsbCBldmVudHMgdGhhdCBtYXRjaCBpdC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfFJlZ0V4cH0gZXZ0IE5hbWUgb2YgdGhlIGV2ZW50IHRvIHJlbW92ZSB0aGUgbGlzdGVuZXIgZnJvbS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBsaXN0ZW5lciBNZXRob2QgdG8gcmVtb3ZlIGZyb20gdGhlIGV2ZW50LlxuICAgICAqIEByZXR1cm4ge09iamVjdH0gQ3VycmVudCBpbnN0YW5jZSBvZiBFdmVudEVtaXR0ZXIgZm9yIGNoYWluaW5nLlxuICAgICAqL1xuICAgIHByb3RvLnJlbW92ZUxpc3RlbmVyID0gZnVuY3Rpb24gcmVtb3ZlTGlzdGVuZXIoZXZ0LCBsaXN0ZW5lcikge1xuICAgICAgICB2YXIgbGlzdGVuZXJzID0gdGhpcy5nZXRMaXN0ZW5lcnNBc09iamVjdChldnQpO1xuICAgICAgICB2YXIgaW5kZXg7XG4gICAgICAgIHZhciBrZXk7XG5cbiAgICAgICAgZm9yIChrZXkgaW4gbGlzdGVuZXJzKSB7XG4gICAgICAgICAgICBpZiAobGlzdGVuZXJzLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICAgICAgICBpbmRleCA9IGluZGV4T2ZMaXN0ZW5lcihsaXN0ZW5lcnNba2V5XSwgbGlzdGVuZXIpO1xuXG4gICAgICAgICAgICAgICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICBsaXN0ZW5lcnNba2V5XS5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBBbGlhcyBvZiByZW1vdmVMaXN0ZW5lclxuICAgICAqL1xuICAgIHByb3RvLm9mZiA9IGFsaWFzKCdyZW1vdmVMaXN0ZW5lcicpO1xuXG4gICAgLyoqXG4gICAgICogQWRkcyBsaXN0ZW5lcnMgaW4gYnVsayB1c2luZyB0aGUgbWFuaXB1bGF0ZUxpc3RlbmVycyBtZXRob2QuXG4gICAgICogSWYgeW91IHBhc3MgYW4gb2JqZWN0IGFzIHRoZSBmaXJzdCBhcmd1bWVudCB5b3UgY2FuIGFkZCB0byBtdWx0aXBsZSBldmVudHMgYXQgb25jZS4gVGhlIG9iamVjdCBzaG91bGQgY29udGFpbiBrZXkgdmFsdWUgcGFpcnMgb2YgZXZlbnRzIGFuZCBsaXN0ZW5lcnMgb3IgbGlzdGVuZXIgYXJyYXlzLiBZb3UgY2FuIGFsc28gcGFzcyBpdCBhbiBldmVudCBuYW1lIGFuZCBhbiBhcnJheSBvZiBsaXN0ZW5lcnMgdG8gYmUgYWRkZWQuXG4gICAgICogWW91IGNhbiBhbHNvIHBhc3MgaXQgYSByZWd1bGFyIGV4cHJlc3Npb24gdG8gYWRkIHRoZSBhcnJheSBvZiBsaXN0ZW5lcnMgdG8gYWxsIGV2ZW50cyB0aGF0IG1hdGNoIGl0LlxuICAgICAqIFllYWgsIHRoaXMgZnVuY3Rpb24gZG9lcyBxdWl0ZSBhIGJpdC4gVGhhdCdzIHByb2JhYmx5IGEgYmFkIHRoaW5nLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtTdHJpbmd8T2JqZWN0fFJlZ0V4cH0gZXZ0IEFuIGV2ZW50IG5hbWUgaWYgeW91IHdpbGwgcGFzcyBhbiBhcnJheSBvZiBsaXN0ZW5lcnMgbmV4dC4gQW4gb2JqZWN0IGlmIHlvdSB3aXNoIHRvIGFkZCB0byBtdWx0aXBsZSBldmVudHMgYXQgb25jZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9uW119IFtsaXN0ZW5lcnNdIEFuIG9wdGlvbmFsIGFycmF5IG9mIGxpc3RlbmVyIGZ1bmN0aW9ucyB0byBhZGQuXG4gICAgICogQHJldHVybiB7T2JqZWN0fSBDdXJyZW50IGluc3RhbmNlIG9mIEV2ZW50RW1pdHRlciBmb3IgY2hhaW5pbmcuXG4gICAgICovXG4gICAgcHJvdG8uYWRkTGlzdGVuZXJzID0gZnVuY3Rpb24gYWRkTGlzdGVuZXJzKGV2dCwgbGlzdGVuZXJzKSB7XG4gICAgICAgIC8vIFBhc3MgdGhyb3VnaCB0byBtYW5pcHVsYXRlTGlzdGVuZXJzXG4gICAgICAgIHJldHVybiB0aGlzLm1hbmlwdWxhdGVMaXN0ZW5lcnMoZmFsc2UsIGV2dCwgbGlzdGVuZXJzKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBsaXN0ZW5lcnMgaW4gYnVsayB1c2luZyB0aGUgbWFuaXB1bGF0ZUxpc3RlbmVycyBtZXRob2QuXG4gICAgICogSWYgeW91IHBhc3MgYW4gb2JqZWN0IGFzIHRoZSBmaXJzdCBhcmd1bWVudCB5b3UgY2FuIHJlbW92ZSBmcm9tIG11bHRpcGxlIGV2ZW50cyBhdCBvbmNlLiBUaGUgb2JqZWN0IHNob3VsZCBjb250YWluIGtleSB2YWx1ZSBwYWlycyBvZiBldmVudHMgYW5kIGxpc3RlbmVycyBvciBsaXN0ZW5lciBhcnJheXMuXG4gICAgICogWW91IGNhbiBhbHNvIHBhc3MgaXQgYW4gZXZlbnQgbmFtZSBhbmQgYW4gYXJyYXkgb2YgbGlzdGVuZXJzIHRvIGJlIHJlbW92ZWQuXG4gICAgICogWW91IGNhbiBhbHNvIHBhc3MgaXQgYSByZWd1bGFyIGV4cHJlc3Npb24gdG8gcmVtb3ZlIHRoZSBsaXN0ZW5lcnMgZnJvbSBhbGwgZXZlbnRzIHRoYXQgbWF0Y2ggaXQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1N0cmluZ3xPYmplY3R8UmVnRXhwfSBldnQgQW4gZXZlbnQgbmFtZSBpZiB5b3Ugd2lsbCBwYXNzIGFuIGFycmF5IG9mIGxpc3RlbmVycyBuZXh0LiBBbiBvYmplY3QgaWYgeW91IHdpc2ggdG8gcmVtb3ZlIGZyb20gbXVsdGlwbGUgZXZlbnRzIGF0IG9uY2UuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbltdfSBbbGlzdGVuZXJzXSBBbiBvcHRpb25hbCBhcnJheSBvZiBsaXN0ZW5lciBmdW5jdGlvbnMgdG8gcmVtb3ZlLlxuICAgICAqIEByZXR1cm4ge09iamVjdH0gQ3VycmVudCBpbnN0YW5jZSBvZiBFdmVudEVtaXR0ZXIgZm9yIGNoYWluaW5nLlxuICAgICAqL1xuICAgIHByb3RvLnJlbW92ZUxpc3RlbmVycyA9IGZ1bmN0aW9uIHJlbW92ZUxpc3RlbmVycyhldnQsIGxpc3RlbmVycykge1xuICAgICAgICAvLyBQYXNzIHRocm91Z2ggdG8gbWFuaXB1bGF0ZUxpc3RlbmVyc1xuICAgICAgICByZXR1cm4gdGhpcy5tYW5pcHVsYXRlTGlzdGVuZXJzKHRydWUsIGV2dCwgbGlzdGVuZXJzKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogRWRpdHMgbGlzdGVuZXJzIGluIGJ1bGsuIFRoZSBhZGRMaXN0ZW5lcnMgYW5kIHJlbW92ZUxpc3RlbmVycyBtZXRob2RzIGJvdGggdXNlIHRoaXMgdG8gZG8gdGhlaXIgam9iLiBZb3Ugc2hvdWxkIHJlYWxseSB1c2UgdGhvc2UgaW5zdGVhZCwgdGhpcyBpcyBhIGxpdHRsZSBsb3dlciBsZXZlbC5cbiAgICAgKiBUaGUgZmlyc3QgYXJndW1lbnQgd2lsbCBkZXRlcm1pbmUgaWYgdGhlIGxpc3RlbmVycyBhcmUgcmVtb3ZlZCAodHJ1ZSkgb3IgYWRkZWQgKGZhbHNlKS5cbiAgICAgKiBJZiB5b3UgcGFzcyBhbiBvYmplY3QgYXMgdGhlIHNlY29uZCBhcmd1bWVudCB5b3UgY2FuIGFkZC9yZW1vdmUgZnJvbSBtdWx0aXBsZSBldmVudHMgYXQgb25jZS4gVGhlIG9iamVjdCBzaG91bGQgY29udGFpbiBrZXkgdmFsdWUgcGFpcnMgb2YgZXZlbnRzIGFuZCBsaXN0ZW5lcnMgb3IgbGlzdGVuZXIgYXJyYXlzLlxuICAgICAqIFlvdSBjYW4gYWxzbyBwYXNzIGl0IGFuIGV2ZW50IG5hbWUgYW5kIGFuIGFycmF5IG9mIGxpc3RlbmVycyB0byBiZSBhZGRlZC9yZW1vdmVkLlxuICAgICAqIFlvdSBjYW4gYWxzbyBwYXNzIGl0IGEgcmVndWxhciBleHByZXNzaW9uIHRvIG1hbmlwdWxhdGUgdGhlIGxpc3RlbmVycyBvZiBhbGwgZXZlbnRzIHRoYXQgbWF0Y2ggaXQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IHJlbW92ZSBUcnVlIGlmIHlvdSB3YW50IHRvIHJlbW92ZSBsaXN0ZW5lcnMsIGZhbHNlIGlmIHlvdSB3YW50IHRvIGFkZC5cbiAgICAgKiBAcGFyYW0ge1N0cmluZ3xPYmplY3R8UmVnRXhwfSBldnQgQW4gZXZlbnQgbmFtZSBpZiB5b3Ugd2lsbCBwYXNzIGFuIGFycmF5IG9mIGxpc3RlbmVycyBuZXh0LiBBbiBvYmplY3QgaWYgeW91IHdpc2ggdG8gYWRkL3JlbW92ZSBmcm9tIG11bHRpcGxlIGV2ZW50cyBhdCBvbmNlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb25bXX0gW2xpc3RlbmVyc10gQW4gb3B0aW9uYWwgYXJyYXkgb2YgbGlzdGVuZXIgZnVuY3Rpb25zIHRvIGFkZC9yZW1vdmUuXG4gICAgICogQHJldHVybiB7T2JqZWN0fSBDdXJyZW50IGluc3RhbmNlIG9mIEV2ZW50RW1pdHRlciBmb3IgY2hhaW5pbmcuXG4gICAgICovXG4gICAgcHJvdG8ubWFuaXB1bGF0ZUxpc3RlbmVycyA9IGZ1bmN0aW9uIG1hbmlwdWxhdGVMaXN0ZW5lcnMocmVtb3ZlLCBldnQsIGxpc3RlbmVycykge1xuICAgICAgICB2YXIgaTtcbiAgICAgICAgdmFyIHZhbHVlO1xuICAgICAgICB2YXIgc2luZ2xlID0gcmVtb3ZlID8gdGhpcy5yZW1vdmVMaXN0ZW5lciA6IHRoaXMuYWRkTGlzdGVuZXI7XG4gICAgICAgIHZhciBtdWx0aXBsZSA9IHJlbW92ZSA/IHRoaXMucmVtb3ZlTGlzdGVuZXJzIDogdGhpcy5hZGRMaXN0ZW5lcnM7XG5cbiAgICAgICAgLy8gSWYgZXZ0IGlzIGFuIG9iamVjdCB0aGVuIHBhc3MgZWFjaCBvZiBpdHMgcHJvcGVydGllcyB0byB0aGlzIG1ldGhvZFxuICAgICAgICBpZiAodHlwZW9mIGV2dCA9PT0gJ29iamVjdCcgJiYgIShldnQgaW5zdGFuY2VvZiBSZWdFeHApKSB7XG4gICAgICAgICAgICBmb3IgKGkgaW4gZXZ0KSB7XG4gICAgICAgICAgICAgICAgaWYgKGV2dC5oYXNPd25Qcm9wZXJ0eShpKSAmJiAodmFsdWUgPSBldnRbaV0pKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFBhc3MgdGhlIHNpbmdsZSBsaXN0ZW5lciBzdHJhaWdodCB0aHJvdWdoIHRvIHRoZSBzaW5ndWxhciBtZXRob2RcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2luZ2xlLmNhbGwodGhpcywgaSwgdmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gT3RoZXJ3aXNlIHBhc3MgYmFjayB0byB0aGUgbXVsdGlwbGUgZnVuY3Rpb25cbiAgICAgICAgICAgICAgICAgICAgICAgIG11bHRpcGxlLmNhbGwodGhpcywgaSwgdmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gU28gZXZ0IG11c3QgYmUgYSBzdHJpbmdcbiAgICAgICAgICAgIC8vIEFuZCBsaXN0ZW5lcnMgbXVzdCBiZSBhbiBhcnJheSBvZiBsaXN0ZW5lcnNcbiAgICAgICAgICAgIC8vIExvb3Agb3ZlciBpdCBhbmQgcGFzcyBlYWNoIG9uZSB0byB0aGUgbXVsdGlwbGUgbWV0aG9kXG4gICAgICAgICAgICBpID0gbGlzdGVuZXJzLmxlbmd0aDtcbiAgICAgICAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgICAgICAgICBzaW5nbGUuY2FsbCh0aGlzLCBldnQsIGxpc3RlbmVyc1tpXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhbGwgbGlzdGVuZXJzIGZyb20gYSBzcGVjaWZpZWQgZXZlbnQuXG4gICAgICogSWYgeW91IGRvIG5vdCBzcGVjaWZ5IGFuIGV2ZW50IHRoZW4gYWxsIGxpc3RlbmVycyB3aWxsIGJlIHJlbW92ZWQuXG4gICAgICogVGhhdCBtZWFucyBldmVyeSBldmVudCB3aWxsIGJlIGVtcHRpZWQuXG4gICAgICogWW91IGNhbiBhbHNvIHBhc3MgYSByZWdleCB0byByZW1vdmUgYWxsIGV2ZW50cyB0aGF0IG1hdGNoIGl0LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtTdHJpbmd8UmVnRXhwfSBbZXZ0XSBPcHRpb25hbCBuYW1lIG9mIHRoZSBldmVudCB0byByZW1vdmUgYWxsIGxpc3RlbmVycyBmb3IuIFdpbGwgcmVtb3ZlIGZyb20gZXZlcnkgZXZlbnQgaWYgbm90IHBhc3NlZC5cbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IEN1cnJlbnQgaW5zdGFuY2Ugb2YgRXZlbnRFbWl0dGVyIGZvciBjaGFpbmluZy5cbiAgICAgKi9cbiAgICBwcm90by5yZW1vdmVFdmVudCA9IGZ1bmN0aW9uIHJlbW92ZUV2ZW50KGV2dCkge1xuICAgICAgICB2YXIgdHlwZSA9IHR5cGVvZiBldnQ7XG4gICAgICAgIHZhciBldmVudHMgPSB0aGlzLl9nZXRFdmVudHMoKTtcbiAgICAgICAgdmFyIGtleTtcblxuICAgICAgICAvLyBSZW1vdmUgZGlmZmVyZW50IHRoaW5ncyBkZXBlbmRpbmcgb24gdGhlIHN0YXRlIG9mIGV2dFxuICAgICAgICBpZiAodHlwZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIC8vIFJlbW92ZSBhbGwgbGlzdGVuZXJzIGZvciB0aGUgc3BlY2lmaWVkIGV2ZW50XG4gICAgICAgICAgICBkZWxldGUgZXZlbnRzW2V2dF07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZXZ0IGluc3RhbmNlb2YgUmVnRXhwKSB7XG4gICAgICAgICAgICAvLyBSZW1vdmUgYWxsIGV2ZW50cyBtYXRjaGluZyB0aGUgcmVnZXguXG4gICAgICAgICAgICBmb3IgKGtleSBpbiBldmVudHMpIHtcbiAgICAgICAgICAgICAgICBpZiAoZXZlbnRzLmhhc093blByb3BlcnR5KGtleSkgJiYgZXZ0LnRlc3Qoa2V5KSkge1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgZXZlbnRzW2tleV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gUmVtb3ZlIGFsbCBsaXN0ZW5lcnMgaW4gYWxsIGV2ZW50c1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMuX2V2ZW50cztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBBbGlhcyBvZiByZW1vdmVFdmVudC5cbiAgICAgKlxuICAgICAqIEFkZGVkIHRvIG1pcnJvciB0aGUgbm9kZSBBUEkuXG4gICAgICovXG4gICAgcHJvdG8ucmVtb3ZlQWxsTGlzdGVuZXJzID0gYWxpYXMoJ3JlbW92ZUV2ZW50Jyk7XG5cbiAgICAvKipcbiAgICAgKiBFbWl0cyBhbiBldmVudCBvZiB5b3VyIGNob2ljZS5cbiAgICAgKiBXaGVuIGVtaXR0ZWQsIGV2ZXJ5IGxpc3RlbmVyIGF0dGFjaGVkIHRvIHRoYXQgZXZlbnQgd2lsbCBiZSBleGVjdXRlZC5cbiAgICAgKiBJZiB5b3UgcGFzcyB0aGUgb3B0aW9uYWwgYXJndW1lbnQgYXJyYXkgdGhlbiB0aG9zZSBhcmd1bWVudHMgd2lsbCBiZSBwYXNzZWQgdG8gZXZlcnkgbGlzdGVuZXIgdXBvbiBleGVjdXRpb24uXG4gICAgICogQmVjYXVzZSBpdCB1c2VzIGBhcHBseWAsIHlvdXIgYXJyYXkgb2YgYXJndW1lbnRzIHdpbGwgYmUgcGFzc2VkIGFzIGlmIHlvdSB3cm90ZSB0aGVtIG91dCBzZXBhcmF0ZWx5LlxuICAgICAqIFNvIHRoZXkgd2lsbCBub3QgYXJyaXZlIHdpdGhpbiB0aGUgYXJyYXkgb24gdGhlIG90aGVyIHNpZGUsIHRoZXkgd2lsbCBiZSBzZXBhcmF0ZS5cbiAgICAgKiBZb3UgY2FuIGFsc28gcGFzcyBhIHJlZ3VsYXIgZXhwcmVzc2lvbiB0byBlbWl0IHRvIGFsbCBldmVudHMgdGhhdCBtYXRjaCBpdC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfFJlZ0V4cH0gZXZ0IE5hbWUgb2YgdGhlIGV2ZW50IHRvIGVtaXQgYW5kIGV4ZWN1dGUgbGlzdGVuZXJzIGZvci5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbYXJnc10gT3B0aW9uYWwgYXJyYXkgb2YgYXJndW1lbnRzIHRvIGJlIHBhc3NlZCB0byBlYWNoIGxpc3RlbmVyLlxuICAgICAqIEByZXR1cm4ge09iamVjdH0gQ3VycmVudCBpbnN0YW5jZSBvZiBFdmVudEVtaXR0ZXIgZm9yIGNoYWluaW5nLlxuICAgICAqL1xuICAgIHByb3RvLmVtaXRFdmVudCA9IGZ1bmN0aW9uIGVtaXRFdmVudChldnQsIGFyZ3MpIHtcbiAgICAgICAgdmFyIGxpc3RlbmVyc01hcCA9IHRoaXMuZ2V0TGlzdGVuZXJzQXNPYmplY3QoZXZ0KTtcbiAgICAgICAgdmFyIGxpc3RlbmVycztcbiAgICAgICAgdmFyIGxpc3RlbmVyO1xuICAgICAgICB2YXIgaTtcbiAgICAgICAgdmFyIGtleTtcbiAgICAgICAgdmFyIHJlc3BvbnNlO1xuXG4gICAgICAgIGZvciAoa2V5IGluIGxpc3RlbmVyc01hcCkge1xuICAgICAgICAgICAgaWYgKGxpc3RlbmVyc01hcC5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgICAgICAgbGlzdGVuZXJzID0gbGlzdGVuZXJzTWFwW2tleV0uc2xpY2UoMCk7XG5cbiAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGlzdGVuZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIElmIHRoZSBsaXN0ZW5lciByZXR1cm5zIHRydWUgdGhlbiBpdCBzaGFsbCBiZSByZW1vdmVkIGZyb20gdGhlIGV2ZW50XG4gICAgICAgICAgICAgICAgICAgIC8vIFRoZSBmdW5jdGlvbiBpcyBleGVjdXRlZCBlaXRoZXIgd2l0aCBhIGJhc2ljIGNhbGwgb3IgYW4gYXBwbHkgaWYgdGhlcmUgaXMgYW4gYXJncyBhcnJheVxuICAgICAgICAgICAgICAgICAgICBsaXN0ZW5lciA9IGxpc3RlbmVyc1tpXTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAobGlzdGVuZXIub25jZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcihldnQsIGxpc3RlbmVyLmxpc3RlbmVyKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlID0gbGlzdGVuZXIubGlzdGVuZXIuYXBwbHkodGhpcywgYXJncyB8fCBbXSk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlID09PSB0aGlzLl9nZXRPbmNlUmV0dXJuVmFsdWUoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcihldnQsIGxpc3RlbmVyLmxpc3RlbmVyKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBBbGlhcyBvZiBlbWl0RXZlbnRcbiAgICAgKi9cbiAgICBwcm90by50cmlnZ2VyID0gYWxpYXMoJ2VtaXRFdmVudCcpO1xuXG4gICAgLyoqXG4gICAgICogU3VidGx5IGRpZmZlcmVudCBmcm9tIGVtaXRFdmVudCBpbiB0aGF0IGl0IHdpbGwgcGFzcyBpdHMgYXJndW1lbnRzIG9uIHRvIHRoZSBsaXN0ZW5lcnMsIGFzIG9wcG9zZWQgdG8gdGFraW5nIGEgc2luZ2xlIGFycmF5IG9mIGFyZ3VtZW50cyB0byBwYXNzIG9uLlxuICAgICAqIEFzIHdpdGggZW1pdEV2ZW50LCB5b3UgY2FuIHBhc3MgYSByZWdleCBpbiBwbGFjZSBvZiB0aGUgZXZlbnQgbmFtZSB0byBlbWl0IHRvIGFsbCBldmVudHMgdGhhdCBtYXRjaCBpdC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfFJlZ0V4cH0gZXZ0IE5hbWUgb2YgdGhlIGV2ZW50IHRvIGVtaXQgYW5kIGV4ZWN1dGUgbGlzdGVuZXJzIGZvci5cbiAgICAgKiBAcGFyYW0gey4uLip9IE9wdGlvbmFsIGFkZGl0aW9uYWwgYXJndW1lbnRzIHRvIGJlIHBhc3NlZCB0byBlYWNoIGxpc3RlbmVyLlxuICAgICAqIEByZXR1cm4ge09iamVjdH0gQ3VycmVudCBpbnN0YW5jZSBvZiBFdmVudEVtaXR0ZXIgZm9yIGNoYWluaW5nLlxuICAgICAqL1xuICAgIHByb3RvLmVtaXQgPSBmdW5jdGlvbiBlbWl0KGV2dCkge1xuICAgICAgICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XG4gICAgICAgIHJldHVybiB0aGlzLmVtaXRFdmVudChldnQsIGFyZ3MpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBjdXJyZW50IHZhbHVlIHRvIGNoZWNrIGFnYWluc3Qgd2hlbiBleGVjdXRpbmcgbGlzdGVuZXJzLiBJZiBhXG4gICAgICogbGlzdGVuZXJzIHJldHVybiB2YWx1ZSBtYXRjaGVzIHRoZSBvbmUgc2V0IGhlcmUgdGhlbiBpdCB3aWxsIGJlIHJlbW92ZWRcbiAgICAgKiBhZnRlciBleGVjdXRpb24uIFRoaXMgdmFsdWUgZGVmYXVsdHMgdG8gdHJ1ZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIG5ldyB2YWx1ZSB0byBjaGVjayBmb3Igd2hlbiBleGVjdXRpbmcgbGlzdGVuZXJzLlxuICAgICAqIEByZXR1cm4ge09iamVjdH0gQ3VycmVudCBpbnN0YW5jZSBvZiBFdmVudEVtaXR0ZXIgZm9yIGNoYWluaW5nLlxuICAgICAqL1xuICAgIHByb3RvLnNldE9uY2VSZXR1cm5WYWx1ZSA9IGZ1bmN0aW9uIHNldE9uY2VSZXR1cm5WYWx1ZSh2YWx1ZSkge1xuICAgICAgICB0aGlzLl9vbmNlUmV0dXJuVmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEZldGNoZXMgdGhlIGN1cnJlbnQgdmFsdWUgdG8gY2hlY2sgYWdhaW5zdCB3aGVuIGV4ZWN1dGluZyBsaXN0ZW5lcnMuIElmXG4gICAgICogdGhlIGxpc3RlbmVycyByZXR1cm4gdmFsdWUgbWF0Y2hlcyB0aGlzIG9uZSB0aGVuIGl0IHNob3VsZCBiZSByZW1vdmVkXG4gICAgICogYXV0b21hdGljYWxseS4gSXQgd2lsbCByZXR1cm4gdHJ1ZSBieSBkZWZhdWx0LlxuICAgICAqXG4gICAgICogQHJldHVybiB7KnxCb29sZWFufSBUaGUgY3VycmVudCB2YWx1ZSB0byBjaGVjayBmb3Igb3IgdGhlIGRlZmF1bHQsIHRydWUuXG4gICAgICogQGFwaSBwcml2YXRlXG4gICAgICovXG4gICAgcHJvdG8uX2dldE9uY2VSZXR1cm5WYWx1ZSA9IGZ1bmN0aW9uIF9nZXRPbmNlUmV0dXJuVmFsdWUoKSB7XG4gICAgICAgIGlmICh0aGlzLmhhc093blByb3BlcnR5KCdfb25jZVJldHVyblZhbHVlJykpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9vbmNlUmV0dXJuVmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBGZXRjaGVzIHRoZSBldmVudHMgb2JqZWN0IGFuZCBjcmVhdGVzIG9uZSBpZiByZXF1aXJlZC5cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge09iamVjdH0gVGhlIGV2ZW50cyBzdG9yYWdlIG9iamVjdC5cbiAgICAgKiBAYXBpIHByaXZhdGVcbiAgICAgKi9cbiAgICBwcm90by5fZ2V0RXZlbnRzID0gZnVuY3Rpb24gX2dldEV2ZW50cygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2V2ZW50cyB8fCAodGhpcy5fZXZlbnRzID0ge30pO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZXZlcnRzIHRoZSBnbG9iYWwge0BsaW5rIEV2ZW50RW1pdHRlcn0gdG8gaXRzIHByZXZpb3VzIHZhbHVlIGFuZCByZXR1cm5zIGEgcmVmZXJlbmNlIHRvIHRoaXMgdmVyc2lvbi5cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge0Z1bmN0aW9ufSBOb24gY29uZmxpY3RpbmcgRXZlbnRFbWl0dGVyIGNsYXNzLlxuICAgICAqL1xuICAgIEV2ZW50RW1pdHRlci5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gbm9Db25mbGljdCgpIHtcbiAgICAgICAgZXhwb3J0cy5FdmVudEVtaXR0ZXIgPSBvcmlnaW5hbEdsb2JhbFZhbHVlO1xuICAgICAgICByZXR1cm4gRXZlbnRFbWl0dGVyO1xuICAgIH07XG5cbiAgICAvLyBFeHBvc2UgdGhlIGNsYXNzIGVpdGhlciB2aWEgQU1ELCBDb21tb25KUyBvciB0aGUgZ2xvYmFsIG9iamVjdFxuICAgIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHtcbiAgICAgICAgZGVmaW5lKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBFdmVudEVtaXR0ZXI7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0JyAmJiBtb2R1bGUuZXhwb3J0cyl7XG4gICAgICAgIG1vZHVsZS5leHBvcnRzID0gRXZlbnRFbWl0dGVyO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgZXhwb3J0cy5FdmVudEVtaXR0ZXIgPSBFdmVudEVtaXR0ZXI7XG4gICAgfVxufSh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IHRoaXMgfHwge30pKTtcbiIsIi8qXG5cdDpwcm9wZXJ0eS5zdWIxLmZ1bmMoKS5mdW5jUHJvcFxuXHQgPSByZXR1cm4gZnVuY1Byb3Agb2YgZnVuY3Rpb24gcmVzdWx0IG9mIHN1YjEgcHJvcGVydHkgb2YgcHJvcGVydHkgb2Ygb2JqZWN0XG5cdDp7OjpoZWxwZXJWYWx9LnN1YlxuXHQgPSByZXR1cm4gc3ViIHByb3BlcnR5IG9mIG9iamVjdCBwcm9wZXJ0eSB3aXRoIG5hbWUgcmV0cmlldmVkIGZyb20gaGVscGVyVmFsIHByb3BlcnR5IG9mIGhlbHBlcnMgb2JqZWN0XG5cdDp7OjpoZWxwZXJGdW5jKCl9LnN1YlxuXHQ9IHJldHVybiBzdWIgcHJvcGVydHkgb2Ygb2JqZWN0IHByb3BlcnR5IHdpdGggbmFtZSByZXRyaWV2ZWQgZnJvbSBoZWxwZXJWYWwgZnVuY3Rpb24gcmVzdWx0IG9mIGhlbHBlcnMgb2JqZWN0LlxuXHRpZiBoZWxwZXJzRnVueCByZXR1cm4gJ2NhcicgdGhlbiBzb3VyY2UgcGF0aCBiZWNvbWVzIDpjYXIuc3ViXG5cbiovXG5cbmNvbnN0IFNVQl9QQVRIX1NUQVJUID0gXCJ7XCIsXG4gICAgU1VCX1BBVEhfRU5EID0gXCJ9XCIsXG4gICAgUEFUSF9TUExJVCA9IFwiLlwiLFxuICAgIFBBVEhfU1RBUlRfT0JKRUNUID0gXCI6XCIsXG4gICAgUEFUSF9TVEFSVF9IRUxQRVJTID0gXCI6OlwiLFxuICAgIEZVTkNUSU9OX01BUktFUiA9IFwiKClcIixcbiAgICBNQVhfREVFUCA9IDEwO1xuXG4vKipcbiAqIFNldCBvZiB0b29scyB0byB1c2Ugbm90UGF0aCBwcm9wZXJ0eSBhY2Nlc3Mgbm90YXRpb25cbiAqIDogaXMgZm9yIGl0ZW1cbiAqIDo6IGlzIGZvciBoZWxwZXJzXG4gKiB7fSBzdWJwYXRoXG4gKiAuIHBhdGggc3BsaXR0ZXJcbiAqICgpIGZ1bmN0aW9uIGFuZCBzaG91bGQgYmUgZXhlY3V0ZWQgd2l0aCBwYXJhbXMgKGl0ZW0sIGhlbHBlciB8IHVuZGVmaW5lZClcbiAqIHN1Yi1wYXRocyB3aWxsIGJlIHBhcnNlZCBhbmQgcmVwbGFjZWQgYnkgcmVzdWx0cyBpbiBzb3VyY2UgcGF0aFxuICovXG5jbGFzcyBub3RQYXRoIHtcbiAgICBzdGF0aWMgZ2V0IFNVQl9QQVRIX1NUQVJUKCkge1xuICAgICAgICByZXR1cm4gU1VCX1BBVEhfU1RBUlQ7XG4gICAgfVxuICAgIHN0YXRpYyBnZXQgU1VCX1BBVEhfRU5EKCkge1xuICAgICAgICByZXR1cm4gU1VCX1BBVEhfRU5EO1xuICAgIH1cbiAgICBzdGF0aWMgZ2V0IFBBVEhfU1BMSVQoKSB7XG4gICAgICAgIHJldHVybiBQQVRIX1NQTElUO1xuICAgIH1cbiAgICBzdGF0aWMgZ2V0IFBBVEhfU1RBUlRfT0JKRUNUKCkge1xuICAgICAgICByZXR1cm4gUEFUSF9TVEFSVF9PQkpFQ1Q7XG4gICAgfVxuICAgIHN0YXRpYyBnZXQgUEFUSF9TVEFSVF9IRUxQRVJTKCkge1xuICAgICAgICByZXR1cm4gUEFUSF9TVEFSVF9IRUxQRVJTO1xuICAgIH1cbiAgICBzdGF0aWMgZ2V0IEZVTkNUSU9OX01BUktFUigpIHtcbiAgICAgICAgcmV0dXJuIEZVTkNUSU9OX01BUktFUjtcbiAgICB9XG4gICAgc3RhdGljIGdldCBNQVhfREVFUCgpIHtcbiAgICAgICAgcmV0dXJuIE1BWF9ERUVQO1xuICAgIH1cblxuICAgIC8qXG5cdFx0aW5wdXQgJzp7OjpoZWxwZXJWYWx9LnN1Yidcblx0XHRyZXR1cm4gOjpoZWxwZXJWYWxcblx0Ki9cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgZmlyc3Qgc3VicGF0aCBpbiBwYXRoXG4gICAgICogaWYgc3VicGF0aCBub3QgY2xvc2VkIHdpbGwgcmV0dXJuIGl0IGFueXdheVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIHBhdGggaW4gc3RyaW5nIG5vdGF0aW9uXG4gICAgICogQHJldHVybiB7c3RyaW5nfG51bGx9IHN1YnBhdGggb3IgbnVsbCBpZiBubyBzdWIgcGF0aCB3ZXJlIGZvdW5kXG4gICAgICovXG4gICAgc3RhdGljIGZpbmROZXh0U3ViUGF0aChwYXRoKSB7XG4gICAgICAgIGxldCBzdWJQYXRoID0gXCJcIixcbiAgICAgICAgICAgIGZpbmQgPSBmYWxzZTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYXRoLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAocGF0aFtpXSA9PT0gU1VCX1BBVEhfU1RBUlQpIHtcbiAgICAgICAgICAgICAgICBmaW5kID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBzdWJQYXRoID0gXCJcIjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKHBhdGhbaV0gPT09IFNVQl9QQVRIX0VORCAmJiBmaW5kKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzdWJQYXRoO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHN1YlBhdGggKz0gcGF0aFtpXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZpbmQgPyBzdWJQYXRoIDogbnVsbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXBsYWNlIHN1Yi1wYXRoIGluIHBhcmVudCBwYXRoIGJ5IHBhcnNlZCB2ZXJzaW9uXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHBhdGggcGF0aCB0byBwcm9jZXNzXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHN1YiBzdWIgcGF0aCB0byByZXBsYWNlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHBhcnNlZCBwYXJzZWQgc3ViIHBhdGhcbiAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IHBhcnNlZCBwYXRoXG4gICAgICovXG5cbiAgICBzdGF0aWMgcmVwbGFjZVN1YlBhdGgocGF0aCwgc3ViLCBwYXJzZWQpIHtcbiAgICAgICAgbGV0IHN1YmYgPSBTVUJfUEFUSF9TVEFSVCArIHN1YiArIFNVQl9QQVRIX0VORCxcbiAgICAgICAgICAgIGkgPSAwO1xuICAgICAgICB3aGlsZSAocGF0aC5pbmRleE9mKHN1YmYpID4gLTEgJiYgaSA8IE1BWF9ERUVQKSB7XG4gICAgICAgICAgICBwYXRoID0gcGF0aC5yZXBsYWNlKHN1YmYsIHBhcnNlZCk7XG4gICAgICAgICAgICBpKys7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHBhdGg7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUGFyc2VzIHBhdGggd2hpbGUgdGhlcmUgYW55IHN1Yi1wYXRoc1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIHJhdyB1bnBhcnNlZCBwYXRoXG4gICAgICogQHBhcmFtIHtvYmplY3R9IGl0ZW0gZGF0YVxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBoZWxwZXJzIGhlbHBlcnNcbiAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IHBhcnNlZCBwYXRoXG4gICAgICovXG4gICAgc3RhdGljIHBhcnNlU3VicyhwYXRoLCBpdGVtLCBoZWxwZXJzKSB7XG4gICAgICAgIGxldCBzdWJQYXRoID0gdGhpcy5maW5kTmV4dFN1YlBhdGgocGF0aCksXG4gICAgICAgICAgICBzdWJQYXRoUGFyc2VkLFxuICAgICAgICAgICAgaSA9IDA7XG4gICAgICAgIHdoaWxlIChzdWJQYXRoKSB7XG4gICAgICAgICAgICBzdWJQYXRoUGFyc2VkID0gdGhpcy5nZXRWYWx1ZUJ5UGF0aChcbiAgICAgICAgICAgICAgICBzdWJQYXRoLmluZGV4T2YoUEFUSF9TVEFSVF9IRUxQRVJTKSA+IC0xID8gaGVscGVycyA6IGl0ZW0sXG4gICAgICAgICAgICAgICAgc3ViUGF0aCxcbiAgICAgICAgICAgICAgICBpdGVtLFxuICAgICAgICAgICAgICAgIGhlbHBlcnNcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBwYXRoID0gdGhpcy5yZXBsYWNlU3ViUGF0aChwYXRoLCBzdWJQYXRoLCBzdWJQYXRoUGFyc2VkKTtcbiAgICAgICAgICAgIGkrKztcbiAgICAgICAgICAgIGlmIChpID4gTUFYX0RFRVApIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN1YlBhdGggPSB0aGlzLmZpbmROZXh0U3ViUGF0aChwYXRoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcGF0aDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgcHJvcGVydHkgdmFsdWVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcGF0aCBwYXRoIHRvIHByb3BlcnR5XG4gICAgICogQHBhcmFtIHtvYmplY3R9IGl0ZW0gaXRlbSBvYmplY3RcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gW2hlbHBlcnNdIGhlbHBlcnMgb2JqZWN0XG4gICAgICovXG5cbiAgICBzdGF0aWMgZ2V0KHBhdGgsIGl0ZW0sIGhlbHBlcnMgPSB1bmRlZmluZWQpIHtcbiAgICAgICAgc3dpdGNoIChwYXRoKSB7XG4gICAgICAgICAgICBjYXNlIFBBVEhfU1RBUlRfT0JKRUNUOlxuICAgICAgICAgICAgICAgIHJldHVybiBpdGVtO1xuICAgICAgICAgICAgY2FzZSBQQVRIX1NUQVJUX0hFTFBFUlM6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhlbHBlcnM7XG4gICAgICAgIH1cbiAgICAgICAgcGF0aCA9IHRoaXMucGFyc2VTdWJzKHBhdGgsIGl0ZW0sIGhlbHBlcnMpO1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRWYWx1ZUJ5UGF0aChcbiAgICAgICAgICAgIHBhdGguaW5kZXhPZihQQVRIX1NUQVJUX0hFTFBFUlMpID4gLTEgPyBoZWxwZXJzIDogaXRlbSxcbiAgICAgICAgICAgIHBhdGgsXG4gICAgICAgICAgICBpdGVtLFxuICAgICAgICAgICAgaGVscGVyc1xuICAgICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldCBwcm9wZXJ0eSB2YWx1ZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSAgcGF0aCBwYXRoIHRvIHByb3BlcnR5XG4gICAgICogQHBhcmFtIHtvYmplY3R9ICBpdGVtIGl0ZW0gb2JqZWN0XG4gICAgICogQHBhcmFtIHtvYmplY3R9ICBoZWxwZXJzICAgICAgICAgaGVscGVycyBvYmplY3QgaWYgNCBhcmd1bWVudHMgb3IgYXR0clZhbHVlIGlmIG9ubHkgMyBwcm92aWRlZFxuICAgICAqIEBwYXJhbSB7YW55fSAgICAgW2F0dHJWYWx1ZV0gICAgIHZhbHVlIHdlIHdhbnQgdG8gYXNzaWduXG4gICAgICovXG5cbiAgICBzdGF0aWMgc2V0KHBhdGgsIGl0ZW0sIGhlbHBlcnMsIGF0dHJWYWx1ZSA9IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMykge1xuICAgICAgICAgICAgYXR0clZhbHVlID0gaGVscGVycztcbiAgICAgICAgICAgIGhlbHBlcnMgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHN1YlBhdGggPSB0aGlzLmZpbmROZXh0U3ViUGF0aChwYXRoKSxcbiAgICAgICAgICAgIHN1YlBhdGhQYXJzZWQsXG4gICAgICAgICAgICBpID0gMDtcbiAgICAgICAgd2hpbGUgKHN1YlBhdGgpIHtcbiAgICAgICAgICAgIHN1YlBhdGhQYXJzZWQgPSB0aGlzLmdldFZhbHVlQnlQYXRoKFxuICAgICAgICAgICAgICAgIHN1YlBhdGguaW5kZXhPZihQQVRIX1NUQVJUX0hFTFBFUlMpID4gLTEgPyBoZWxwZXJzIDogaXRlbSxcbiAgICAgICAgICAgICAgICBzdWJQYXRoLFxuICAgICAgICAgICAgICAgIGl0ZW0sXG4gICAgICAgICAgICAgICAgaGVscGVyc1xuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHBhdGggPSB0aGlzLnJlcGxhY2VTdWJQYXRoKHBhdGgsIHN1YlBhdGgsIHN1YlBhdGhQYXJzZWQpO1xuICAgICAgICAgICAgaWYgKGkgPiBNQVhfREVFUCkge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3ViUGF0aCA9IHRoaXMuZmluZE5leHRTdWJQYXRoKHBhdGgpO1xuICAgICAgICAgICAgaSsrO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2V0VmFsdWVCeVBhdGgoaXRlbSwgcGF0aCwgYXR0clZhbHVlKTtcbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgaXRlbS5pc1JlY29yZCAmJlxuICAgICAgICAgICAgdGhpcy5ub3JtaWxpemVQYXRoKHBhdGgpLmxlbmd0aCA+IDEgJiZcbiAgICAgICAgICAgIGl0ZW0uX19pc0FjdGl2ZVxuICAgICAgICApIHtcbiAgICAgICAgICAgIGl0ZW0udHJpZ2dlcihcImNoYW5nZVwiLCBpdGVtLCBwYXRoLCBhdHRyVmFsdWUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0IHRhcmdldCBwcm9wZXJ0eSB0byBudWxsXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHBhdGggcGF0aCB0byBwcm9wZXJ0eVxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBpdGVtIGl0ZW0gb2JqZWN0XG4gICAgICogQHBhcmFtIHtvYmplY3R9IGhlbHBlcnMgaGVscGVycyBvYmplY3RcbiAgICAgKi9cblxuICAgIHN0YXRpYyB1bnNldChwYXRoLCBpdGVtLCBoZWxwZXJzKSB7XG4gICAgICAgIHRoaXMuc2V0KHBhdGgsIGl0ZW0sIGhlbHBlcnMsIG51bGwpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFBhcnNlcyBzdGVwIGtleSwgdHJhbnNmb3JtcyBpdCB0byBlbmQtZm9ybVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzdGVwIG5vdCBwYXJzZWQgc3RlcCBrZXlcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gaXRlbSBpdGVtIG9iamVjdFxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBoZWxwZXIgaGVscGVycyBvYmplY3RcbiAgICAgKiBAcmV0dXJuIHtzdHJpbmd8bnVtYmVyfSBwYXJzZWQgc3RlcCBrZXlcbiAgICAgKi9cblxuICAgIHN0YXRpYyBwYXJzZVBhdGhTdGVwKHN0ZXAsIGl0ZW0sIGhlbHBlcikge1xuICAgICAgICBsZXQgclN0ZXAgPSBudWxsO1xuICAgICAgICBpZiAoc3RlcC5pbmRleE9mKFBBVEhfU1RBUlRfSEVMUEVSUykgPT09IDAgJiYgaGVscGVyKSB7XG4gICAgICAgICAgICByU3RlcCA9IHN0ZXAucmVwbGFjZShQQVRIX1NUQVJUX0hFTFBFUlMsIFwiXCIpO1xuICAgICAgICAgICAgaWYgKHJTdGVwLmluZGV4T2YoRlVOQ1RJT05fTUFSS0VSKSA9PT0gclN0ZXAubGVuZ3RoIC0gMikge1xuICAgICAgICAgICAgICAgIHJTdGVwID0gclN0ZXAucmVwbGFjZShGVU5DVElPTl9NQVJLRVIsIFwiXCIpO1xuICAgICAgICAgICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoaGVscGVyLCByU3RlcCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGhlbHBlcltyU3RlcF0oaXRlbSwgdW5kZWZpbmVkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBoZWxwZXJbclN0ZXBdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKHN0ZXAuaW5kZXhPZihQQVRIX1NUQVJUX09CSkVDVCkgPT09IDAgJiYgaXRlbSkge1xuICAgICAgICAgICAgICAgIHJTdGVwID0gc3RlcC5yZXBsYWNlKFBBVEhfU1RBUlRfT0JKRUNULCBcIlwiKTtcbiAgICAgICAgICAgICAgICBpZiAoclN0ZXAuaW5kZXhPZihGVU5DVElPTl9NQVJLRVIpID09PSByU3RlcC5sZW5ndGggLSAyKSB7XG4gICAgICAgICAgICAgICAgICAgIHJTdGVwID0gclN0ZXAucmVwbGFjZShGVU5DVElPTl9NQVJLRVIsIFwiXCIpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGl0ZW0sIHJTdGVwKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGl0ZW1bclN0ZXBdKGl0ZW0sIHVuZGVmaW5lZCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaXRlbVtyU3RlcF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdGVwO1xuICAgIH1cblxuICAgIC8vOjpmaWVsZE5hbWUucmVzdWx0XG4gICAgLy97fVxuICAgIC8ve2ZpZWxkTmFtZTogJ3RhcmdldFJlY29yZEZpZWxkJ31cbiAgICAvLy8vWyd0YXJnZXRSZWNvcmRGaWVsZCcsICdyZXN1bHQnXVxuICAgIC8qKlxuICAgICAqIFRyYW5zZm9ybXMgcGF0aCB3aXRoIHN1YiBwYXRocyB0byBwYXRoIHdpdGhvdXRcbiAgICAgKiBAcGFyYW0ge3N0cmluZ3xhcnJheX0gcGF0aCBwYXRoIHRvIHRhcmdldCBwcm9wZXJ0eVxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBpdGVtIGl0ZW0gb2JqZWN0XG4gICAgICogQHBhcmFtIHtvYmplY3R9IGhlbHBlciBoZWxwZXIgb2JqZWN0XG4gICAgICogQHJldHVybiB7YXJyYXl9IHBhcnNlZCBwYXRoXG4gICAgICoqL1xuICAgIHN0YXRpYyBwYXJzZVBhdGgocGF0aCwgaXRlbSwgaGVscGVyKSB7XG4gICAgICAgIGlmICghQXJyYXkuaXNBcnJheShwYXRoKSkge1xuICAgICAgICAgICAgcGF0aCA9IHBhdGguc3BsaXQoUEFUSF9TUExJVCk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXRoLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBwYXRoW2ldID0gdGhpcy5wYXJzZVBhdGhTdGVwKHBhdGhbaV0sIGl0ZW0sIGhlbHBlcik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHBhdGg7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVHJhbnNmb3JtcyBwYXRoIGZyb20gc3RyaW5nIG5vdGF0aW9uIHRvIGFycmF5IG9mIGtleXNcbiAgICAgKiBAcGFyYW0ge3N0cmluZ3xhcnJheX0gcGF0aCAgaW5wdXQgcGF0aCwgaWYgYXJyYXkgZG9lcyBub3RoaW5nXG4gICAgICogQHJldHVybiB7YXJyYXl9IHBhdGggaW4gYXJyYXkgbm90YXRpb25cbiAgICAgKi9cblxuICAgIHN0YXRpYyBub3JtaWxpemVQYXRoKHBhdGgpIHtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkocGF0aCkpIHtcbiAgICAgICAgICAgIHJldHVybiBwYXRoO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgd2hpbGUgKHBhdGguaW5kZXhPZihQQVRIX1NUQVJUX09CSkVDVCkgPiAtMSkge1xuICAgICAgICAgICAgICAgIHBhdGggPSBwYXRoLnJlcGxhY2UoUEFUSF9TVEFSVF9PQkpFQ1QsIFwiXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHBhdGguc3BsaXQoUEFUSF9TUExJVCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKlxuXHRcdHNtYWxsID0gW1widG9kb1wiXSxcblx0XHRiaWcgPSBbXCJ0b2RvXCIsIFwibGVuZ3RoXCJdXG5cdFx0cmV0dXJuIHRydWU7XG5cblx0Ki9cblxuICAgIC8qKlxuICAgICAqIElkZW50aWZpZXMgaWYgZmlyc3QgcGF0aCBpbmNsdWRlcyBzZWNvbmQsIGNvbXBhcmVkIGZyb20gc3RhcnQsXG4gICAgICogbm8gZmxvYXRpbmcgc3RhcnQgcG9zaXRpb24gaW5zaWRlIFsnam9pbicsICdtZSddLCBbJ21lJ11cbiAgICAgKiB3aWxsIHJlc3VsdCBpbiBmYWxzZVxuICAgICAqIEBwYXJhbSB7YXJyYXl9IGJpZyB3aGVyZSB3ZSB3aWxsIHNlYXJjaFxuICAgICAqIEBwYXJhbSB7YXJyYXl9IHNtYWxsIHdoYXQgd2Ugd2lsbCBzZWFyY2hcbiAgICAgKiBAcmV0dXJuIHtib29sZWFufSBpZiB3ZSBzdWNjZWVkXG4gICAgICovXG5cbiAgICBzdGF0aWMgaWZGdWxsU3ViUGF0aChiaWcsIHNtYWxsKSB7XG4gICAgICAgIGlmIChiaWcubGVuZ3RoIDwgc21hbGwubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChsZXQgdCA9IDA7IHQgPCBzbWFsbC5sZW5ndGg7IHQrKykge1xuICAgICAgICAgICAgaWYgKHNtYWxsW3RdICE9PSBiaWdbdF0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0dGVyIHRocm91Z2ggdGhpcmQgb2JqZWN0XG4gICAgICogUGF0aCBpcyBwYXJzZWQsIG5vIGV2ZW50IHRyaWdnZXJpbmcgZm9yIG5vdFJlY29yZFxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBvYmplY3Qgb2JqZWN0IHRvIGJlIHVzZWQgYXMgZ2V0dGVyXG4gICAgICogQHBhcmFtIHtzdHJpbmd8YXJyYXl9IGF0dHJQYXRoIHBhdGggdG8gcHJvcGVydHlcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gaXRlbSBzdXBwb3J0aW5nIGRhdGFcbiAgICAgKiBAcGFyYW0ge2hlbHBlcnN9IG9iamVjdCAgc3VwcG9ydGluZyBoZWxwZXJzXG4gICAgICovXG5cbiAgICBzdGF0aWMgZ2V0VmFsdWVCeVBhdGgob2JqZWN0LCBhdHRyUGF0aCwgaXRlbSwgaGVscGVycykge1xuICAgICAgICBhdHRyUGF0aCA9IHRoaXMubm9ybWlsaXplUGF0aChhdHRyUGF0aCk7XG4gICAgICAgIGxldCBhdHRyTmFtZSA9IGF0dHJQYXRoLnNoaWZ0KCksXG4gICAgICAgICAgICBpc0Z1bmN0aW9uID0gYXR0ck5hbWUuaW5kZXhPZihGVU5DVElPTl9NQVJLRVIpID4gLTE7XG4gICAgICAgIGlmIChpc0Z1bmN0aW9uKSB7XG4gICAgICAgICAgICBhdHRyTmFtZSA9IGF0dHJOYW1lLnJlcGxhY2UoRlVOQ1RJT05fTUFSS0VSLCBcIlwiKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoXG4gICAgICAgICAgICAodHlwZW9mIG9iamVjdCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2Ygb2JqZWN0ID09PSBcImZ1bmN0aW9uXCIpICYmXG4gICAgICAgICAgICB0eXBlb2Ygb2JqZWN0ICE9PSBcInVuZGVmaW5lZFwiICYmXG4gICAgICAgICAgICBvYmplY3QgIT09IG51bGwgJiZcbiAgICAgICAgICAgIHR5cGVvZiBvYmplY3RbYXR0ck5hbWVdICE9PSBcInVuZGVmaW5lZFwiICYmXG4gICAgICAgICAgICBvYmplY3RbYXR0ck5hbWVdICE9PSBudWxsXG4gICAgICAgICkge1xuICAgICAgICAgICAgbGV0IG5ld09iaiA9IGlzRnVuY3Rpb25cbiAgICAgICAgICAgICAgICA/IG9iamVjdFthdHRyTmFtZV0oe1xuICAgICAgICAgICAgICAgICAgICAgIGl0ZW0sXG4gICAgICAgICAgICAgICAgICAgICAgaGVscGVycyxcbiAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgOiBvYmplY3RbYXR0ck5hbWVdO1xuICAgICAgICAgICAgaWYgKGF0dHJQYXRoLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRWYWx1ZUJ5UGF0aChuZXdPYmosIGF0dHJQYXRoLCBpdGVtLCBoZWxwZXJzKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ld09iajtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXR0ZXIgdGhyb3VnaCB0aGlyZCBvYmplY3RcbiAgICAgKiBQYXRoIGlzIHBhcnNlZCwgbm8gZXZlbnQgdHJpZ2dlcmluZyBmb3Igbm90UmVjb3JkXG4gICAgICogQHBhcmFtIHtvYmplY3R9IG9iamVjdCBvYmplY3QgdG8gYmUgbW9kaWZpZWRcbiAgICAgKiBAcGFyYW0ge3N0cmluZ3xhcnJheX0gYXR0clBhdGggcGF0aCB0byBwcm9wZXJ0eVxuICAgICAqIEBwYXJhbSB7YW55fSBhdHRyVmFsdWUgIHZhbHVlIHRvIGFzc2lnblxuICAgICAqL1xuXG4gICAgc3RhdGljIHNldFZhbHVlQnlQYXRoKG9iamVjdCwgYXR0clBhdGgsIGF0dHJWYWx1ZSkge1xuICAgICAgICBhdHRyUGF0aCA9IHRoaXMubm9ybWlsaXplUGF0aChhdHRyUGF0aCk7XG4gICAgICAgIGxldCBhdHRyTmFtZSA9IGF0dHJQYXRoLnNoaWZ0KCk7XG4gICAgICAgIGlmIChhdHRyUGF0aC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGF0dHJOYW1lKSkge1xuICAgICAgICAgICAgICAgIG9iamVjdFthdHRyTmFtZV0gPSB7fTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuc2V0VmFsdWVCeVBhdGgob2JqZWN0W2F0dHJOYW1lXSwgYXR0clBhdGgsIGF0dHJWYWx1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBvYmplY3RbYXR0ck5hbWVdID0gYXR0clZhbHVlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSm9pbnMgcGFzc2VkIGluIHN0cmluZ3Mgd2l0aCBQQVRIX1NQTElUXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGFyZ3VtZW50cyBwYXRoIHRvIGJlIGdsdWVkXG4gICAgICogQHJldHVybiB7c3RyaW5nfSBjb21wb3NpdGUgcGF0aFxuICAgICAqL1xuXG4gICAgc3RhdGljIGpvaW4oKSB7XG4gICAgICAgIGxldCBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKTtcbiAgICAgICAgcmV0dXJuIGFyZ3Muam9pbihQQVRIX1NQTElUKTtcbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbm90UGF0aDtcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9zcmMvaW5kZXguanMnKTtcbiIsIi8vIEB0cy1pZ25vcmVcbmltcG9ydCBub3RQYXRoIGZyb20gXCJub3QtcGF0aFwiO1xuXG4vKlxuaHR0cHM6Ly9naXRodWIuY29tL1RlaFNocmlrZS9pcy1tZXJnZWFibGUtb2JqZWN0XG5cbkluY2x1ZGVkIGZvciBjb252aW5pZW5jZSBvbmx5LiBBbGwgcmlnaHRzIGJlbG9uZ3MgdG8gdGhlaXIgYXV0aG9ycyBhbmQgZXRjLlxuc3RhcnQgb2YgbXkgY29kZSBtYXJrZWQuXG5cbiovXG5cbmxldCBpc01lcmdlYWJsZU9iamVjdCA9IGZ1bmN0aW9uIGlzTWVyZ2VhYmxlT2JqZWN0KHZhbHVlKSB7XG4gICAgcmV0dXJuIGlzTm9uTnVsbE9iamVjdCh2YWx1ZSkgJiYgIWlzU3BlY2lhbCh2YWx1ZSk7XG59O1xuXG5mdW5jdGlvbiBpc05vbk51bGxPYmplY3QodmFsdWUpIHtcbiAgICByZXR1cm4gISF2YWx1ZSAmJiB0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCI7XG59XG5cbmZ1bmN0aW9uIGlzU3BlY2lhbCh2YWx1ZSkge1xuICAgIHZhciBzdHJpbmdWYWx1ZSA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG5cbiAgICByZXR1cm4gKFxuICAgICAgICBzdHJpbmdWYWx1ZSA9PT0gXCJbb2JqZWN0IFJlZ0V4cF1cIiB8fFxuICAgICAgICBzdHJpbmdWYWx1ZSA9PT0gXCJbb2JqZWN0IERhdGVdXCIgfHxcbiAgICAgICAgaXNSZWFjdEVsZW1lbnQodmFsdWUpXG4gICAgKTtcbn1cblxuLy8gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9ibG9iL2I1YWM5NjNmYjc5MWQxMjk4ZTdmMzk2MjM2MzgzYmM5NTVmOTE2YzEvc3JjL2lzb21vcnBoaWMvY2xhc3NpYy9lbGVtZW50L1JlYWN0RWxlbWVudC5qcyNMMjEtTDI1XG52YXIgY2FuVXNlU3ltYm9sID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIFN5bWJvbC5mb3I7XG52YXIgUkVBQ1RfRUxFTUVOVF9UWVBFID0gY2FuVXNlU3ltYm9sID8gU3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIikgOiAweGVhYzc7XG5cbmZ1bmN0aW9uIGlzUmVhY3RFbGVtZW50KHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlLiQkdHlwZW9mID09PSBSRUFDVF9FTEVNRU5UX1RZUEU7XG59XG5cbi8qXG5odHRwczovL2dpdGh1Yi5jb20vS3lsZUFNYXRoZXdzL2RlZXBtZXJnZVxuXG5UaGUgTUlUIExpY2Vuc2UgKE1JVClcblxuQ29weXJpZ2h0IChjKSAyMDEyIE5pY2hvbGFzIEZpc2hlclxuXG5QZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG5vZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG5pbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG50byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG5jb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbmZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cblRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG5hbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cblxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG5GSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbkFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbkxJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG5PVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG5USEUgU09GVFdBUkUuXG4qL1xuXG5mdW5jdGlvbiBlbXB0eVRhcmdldCh2YWwpIHtcbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheSh2YWwpID8gW10gOiB7fTtcbn1cblxuZnVuY3Rpb24gY2xvbmVVbmxlc3NPdGhlcndpc2VTcGVjaWZpZWQodmFsdWUsIG9wdGlvbnNBcmd1bWVudCkge1xuICAgIGNvbnN0IGNsb25lID0gIW9wdGlvbnNBcmd1bWVudCB8fCBvcHRpb25zQXJndW1lbnQuY2xvbmUgIT09IGZhbHNlO1xuXG4gICAgcmV0dXJuIGNsb25lICYmIGlzTWVyZ2VhYmxlT2JqZWN0KHZhbHVlKVxuICAgICAgICA/IGRlZXBtZXJnZShlbXB0eVRhcmdldCh2YWx1ZSksIHZhbHVlLCBvcHRpb25zQXJndW1lbnQpXG4gICAgICAgIDogdmFsdWU7XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRBcnJheU1lcmdlKHRhcmdldCwgc291cmNlLCBvcHRpb25zQXJndW1lbnQpIHtcbiAgICByZXR1cm4gdGFyZ2V0LmNvbmNhdChzb3VyY2UpLm1hcChmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgICAgICByZXR1cm4gY2xvbmVVbmxlc3NPdGhlcndpc2VTcGVjaWZpZWQoZWxlbWVudCwgb3B0aW9uc0FyZ3VtZW50KTtcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gbWVyZ2VPYmplY3QodGFyZ2V0LCBzb3VyY2UsIG9wdGlvbnNBcmd1bWVudCkge1xuICAgIGNvbnN0IGRlc3RpbmF0aW9uID0ge307XG4gICAgaWYgKGlzTWVyZ2VhYmxlT2JqZWN0KHRhcmdldCkpIHtcbiAgICAgICAgT2JqZWN0LmtleXModGFyZ2V0KS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICAgIGRlc3RpbmF0aW9uW2tleV0gPSBjbG9uZVVubGVzc090aGVyd2lzZVNwZWNpZmllZChcbiAgICAgICAgICAgICAgICB0YXJnZXRba2V5XSxcbiAgICAgICAgICAgICAgICBvcHRpb25zQXJndW1lbnRcbiAgICAgICAgICAgICk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBPYmplY3Qua2V5cyhzb3VyY2UpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBpZiAoIWlzTWVyZ2VhYmxlT2JqZWN0KHNvdXJjZVtrZXldKSB8fCAhdGFyZ2V0W2tleV0pIHtcbiAgICAgICAgICAgIGRlc3RpbmF0aW9uW2tleV0gPSBjbG9uZVVubGVzc090aGVyd2lzZVNwZWNpZmllZChcbiAgICAgICAgICAgICAgICBzb3VyY2Vba2V5XSxcbiAgICAgICAgICAgICAgICBvcHRpb25zQXJndW1lbnRcbiAgICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkZXN0aW5hdGlvbltrZXldID0gZGVlcG1lcmdlKFxuICAgICAgICAgICAgICAgIHRhcmdldFtrZXldLFxuICAgICAgICAgICAgICAgIHNvdXJjZVtrZXldLFxuICAgICAgICAgICAgICAgIG9wdGlvbnNBcmd1bWVudFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBkZXN0aW5hdGlvbjtcbn1cblxuZnVuY3Rpb24gZGVlcG1lcmdlKHRhcmdldCwgc291cmNlLCBvcHRpb25zQXJndW1lbnQpIHtcbiAgICBjb25zdCBzb3VyY2VJc0FycmF5ID0gQXJyYXkuaXNBcnJheShzb3VyY2UpO1xuICAgIGNvbnN0IHRhcmdldElzQXJyYXkgPSBBcnJheS5pc0FycmF5KHRhcmdldCk7XG4gICAgY29uc3Qgb3B0aW9ucyA9IG9wdGlvbnNBcmd1bWVudCB8fCB7XG4gICAgICAgIGFycmF5TWVyZ2U6IGRlZmF1bHRBcnJheU1lcmdlLFxuICAgIH07XG4gICAgY29uc3Qgc291cmNlQW5kVGFyZ2V0VHlwZXNNYXRjaCA9IHNvdXJjZUlzQXJyYXkgPT09IHRhcmdldElzQXJyYXk7XG5cbiAgICBpZiAoIXNvdXJjZUFuZFRhcmdldFR5cGVzTWF0Y2gpIHtcbiAgICAgICAgcmV0dXJuIGNsb25lVW5sZXNzT3RoZXJ3aXNlU3BlY2lmaWVkKHNvdXJjZSwgb3B0aW9uc0FyZ3VtZW50KTtcbiAgICB9IGVsc2UgaWYgKHNvdXJjZUlzQXJyYXkpIHtcbiAgICAgICAgY29uc3QgYXJyYXlNZXJnZSA9IG9wdGlvbnMuYXJyYXlNZXJnZSB8fCBkZWZhdWx0QXJyYXlNZXJnZTtcbiAgICAgICAgcmV0dXJuIGFycmF5TWVyZ2UodGFyZ2V0LCBzb3VyY2UsIG9wdGlvbnNBcmd1bWVudCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG1lcmdlT2JqZWN0KHRhcmdldCwgc291cmNlLCBvcHRpb25zQXJndW1lbnQpO1xuICAgIH1cbn1cblxuZGVlcG1lcmdlLmFsbCA9IGZ1bmN0aW9uIGRlZXBtZXJnZUFsbChhcnJheSwgb3B0aW9uc0FyZ3VtZW50KSB7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGFycmF5KSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJmaXJzdCBhcmd1bWVudCBzaG91bGQgYmUgYW4gYXJyYXlcIik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFycmF5LnJlZHVjZShmdW5jdGlvbiAocHJldiwgbmV4dCkge1xuICAgICAgICByZXR1cm4gZGVlcG1lcmdlKHByZXYsIG5leHQsIG9wdGlvbnNBcmd1bWVudCk7XG4gICAgfSwge30pO1xufTtcblxuLyoqXG4gKiAgQ29sbGVjdGlvbiBvZiBjb21tb24gZnVuY3Rpb25zXG4gKiAgQGNsYXNzXG4gKi9cbmNsYXNzIG5vdENvbW1vbiB7XG4gICAgLyoqXG4gICAgICogIEBzdGF0aWMge09iamVjdH0gW01BTkFHRVI9bnVsbF0gIGFwcGxpY2F0aW9uIG1hbmFnZXIsIGluIHNvbWUgY2FzZXMgdXNlZCB0byBjb250cm9sIGluaXRpYWxpemF0aW9uIHJvdXRpbmVcbiAgICAgKi9cbiAgICBzdGF0aWMgTUFOQUdFUiA9IG51bGw7XG4gICAgLyoqXG4gICAgICogIEBzdGF0aWMge3N0cmluZ30gW0xPRz1cImNvbnNvbGVcIl0gIGxvZ2dlciwgd2luZG93W0xPR11cbiAgICAgKi9cbiAgICBzdGF0aWMgTE9HID0gXCJjb25zb2xlXCI7XG4gICAgLyoqXG4gICAgICogIEBzdGF0aWMge2Z1bmN0aW9ufSBkZWVwTWVyZ2UgIGZ1bmN0aW9uIHRvIHBlcmZvcm0gZGVlcCBtZXJnZXMgb2Ygb2JqZWN0c1xuICAgICAqL1xuICAgIHN0YXRpYyBkZWVwTWVyZ2UgPSBkZWVwbWVyZ2U7XG5cbiAgICAvKipcbiAgICAgKiAgQHN0YXRpYyB7ZnVuY3Rpb259IGlzRXJyb3IgIGZ1bmN0aW9uIHRvIHBlcmZvcm0gb2JqZWN0IHRlc3QsIGlmIGl0J3MgYW4gZXJyb3Igb2JqZWN0IG9yIG5vdFxuICAgICAqIEBwYXJhbSAgIHtvYmplY3R9ICAgIGUgICBvYmplY3QgdG8gdGVzdFxuICAgICAqL1xuICAgIHN0YXRpYyBpc0Vycm9yKGUpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIGUgaW5zdGFuY2VvZiBFcnJvciB8fFxuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgKE9iamVjdC5oYXNPd24oZSwgXCJzdGF0dXNcIikgJiYgZS5zdGF0dXMgPT09IFwiZXJyb3JcIilcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBzdGF0aWMgVFpfT0ZGU0VUID0gKG5ldyBEYXRlKCkuZ2V0VGltZXpvbmVPZmZzZXQoKSAvIDYwKSAqIC0xO1xuICAgIHN0YXRpYyBERVZfRU5WID0gXCJwcm9kdWN0aW9uXCI7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIHN0YXRpYyBFTlZfVFlQRSA9IHdpbmRvdy5OT1RfRU5WX1RZUEUgPz8gbm90Q29tbW9uLkRFVl9FTlY7XG4gICAgc3RhdGljIE5PT1AgPSAoKSA9PiB7fTtcblxuICAgIHN0YXRpYyBtdXRlKCkge1xuICAgICAgICBub3RDb21tb24uRU5WX1RZUEUgPSBcInByb2R1Y3Rpb25cIjtcbiAgICB9XG5cbiAgICBzdGF0aWMgcGFkKG4pIHtcbiAgICAgICAgcmV0dXJuIG4gPCAxMCA/IFwiMFwiICsgbiA6IG47XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBSZXR1cm5zIHRvZGF5IERhdGUgb2JqZWN0IHdpdGhvdXQgaG91cnMsIG1pbnV0ZXMsIHNlY29uZHNcbiAgICAgKiAgQHJldHVybiB7bnVtYmVyfSAgY3VycmVudCBkYXRlIHdpdGggMDA6MDA6MDAgaW4gbXMgb2YgdW5peCB0aW1lXG4gICAgICovXG4gICAgc3RhdGljIGdldFRvZGF5RGF0ZSgpIHtcbiAgICAgICAgbGV0IHQgPSBuZXcgRGF0ZSgpO1xuICAgICAgICByZXR1cm4gbmV3IERhdGUodC5nZXRGdWxsWWVhcigpLCB0LmdldE1vbnRoKCksIHQuZ2V0RGF0ZSgpKS5nZXRUaW1lKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogIFJldHVybnMgdHJ1ZSBpZiBvYmplY3QgaGFzIGZpZWxkIG9mIG5hbWVcbiAgICAgKiAgIEBwYXJhbSAgIHtvYmplY3R9ICAgIG9iaiAgICBzb21lIG9iamVjdFxuICAgICAqICBAcGFyYW0gIHtzdHJpbmd9ICAgIG5hbWUgIGZpZWxkIG5hbWVcbiAgICAgKiAgQHJldHVybiB7Ym9vbGVhbn0gICAgICAgICAgaWYgb2JqZWN0IGNvbnRhaW5zIGZpZWxkIHdpdGggbmFtZVxuICAgICAqKi9cbiAgICBzdGF0aWMgb2JqSGFzKG9iaiwgbmFtZSkge1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIHJldHVybiBPYmplY3QuaGFzT3duKG9iaiwgbmFtZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29waWVzIG9iamVjdCB0byBzZWN1cmUgaXQgZnJvbSBjaGFuZ2VzXG4gICAgICogQHBhcmFtIHtvYmplY3R9ICAgb2JqICAgICBvcmlnaW5hbCBvYmplY3RcbiAgICAgKiBAcmV0dXJuIHtvYmplY3R9ICAgICAgICAgIGNvcHkgb2Ygb2JqZWN0XG4gICAgICoqL1xuICAgIHN0YXRpYyBjb3B5T2JqKG9iaikge1xuICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShvYmopKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb3BpZXMgb2JqZWN0IHRvIHNlY3VyZSBpdCBmcm9tIGNoYW5nZXNcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gICBvYmogICAgIG9yaWdpbmFsIG9iamVjdFxuICAgICAqIEByZXR1cm4ge29iamVjdH0gICAgICAgICAgY29weSBvZiBvYmplY3RcbiAgICAgKiovXG4gICAgc3RhdGljIHBhcnRDb3B5T2JqKG9iaiwgbGlzdCkge1xuICAgICAgICBsZXQgcGFydE9iaiA9IE9iamVjdC5rZXlzKG9iaikucmVkdWNlKChwcmV2LCBjdXJyKSA9PiB7XG4gICAgICAgICAgICBpZiAobGlzdC5pbmNsdWRlcyhjdXJyKSkge1xuICAgICAgICAgICAgICAgIHByZXZbY3Vycl0gPSBvYmpbY3Vycl07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcHJldjtcbiAgICAgICAgfSwge30pO1xuICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShwYXJ0T2JqKSk7XG4gICAgfVxuXG4gICAgc3RhdGljIGNvbXBhcmVUd29BcnJheXMoYSwgYikge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgYS5sZW5ndGggPT09IGIubGVuZ3RoICYmXG4gICAgICAgICAgICBhLmV2ZXJ5KChlbGVtZW50LCBpbmRleCkgPT4gZWxlbWVudCA9PT0gYltpbmRleF0pXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGVzdCBhcmd1bWVudCB0eXBlIHRvIGJlICdmdW5jdGlvbidcbiAgICAgKiBAcGFyYW0ge2FueX0gIGZ1bmMgICAgcG9zc2libGUgZnVuY3Rpb25cbiAgICAgKiBAcmV0dXJuIHtib29sZWFufSAgICAgaWYgdGhpcyBpcyBhIGZ1bmN0aW9uXG4gICAgICoqL1xuICAgIHN0YXRpYyBpc0Z1bmMoZnVuYykge1xuICAgICAgICByZXR1cm4gdHlwZW9mIGZ1bmMgPT09IFwiZnVuY3Rpb25cIjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRydWUgaWYgYXJndW1lbnQgaXMgQXN5bmMgZnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBmdW5jICB0byB0ZXN0XG4gICAgICogQHJldHVybiB7Ym9vbGVhbn0gICAgICAgaWYgdGhpcyBmdW5jdGlvbiBpcyBjb25zdHJ1Y3RlZCBhcyBBc3luY0Z1bmN0aW9uXG4gICAgICoqL1xuICAgIHN0YXRpYyBpc0FzeW5jKGZ1bmMpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmMuY29uc3RydWN0b3IubmFtZSA9PT0gXCJBc3luY0Z1bmN0aW9uXCI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogIEV4ZWN1dGVzIG1ldGhvZCBvZiBvYmplY3QgaW4gYXBwcm9wcmlhdGUgd2F5IGluc2lkZSBQcm9taXNlXG4gICAgICogQHBhcmFtIHtvYmplY3R9ICAgb2JqICAgICBvcmlnaW5hbCBvYmplY3RcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gICBuYW1lICAgIG1ldGhvZCBuYW1lIHRvIGV4ZWN1dGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSAgICAgcGFyYW1zICBhcnJheSBvZiBwYXJhbXNcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSAgICAgICAgICByZXN1bHRzIG9mIG1ldGhvZCBleGVjdXRpb25cbiAgICAgKiovXG4gICAgc3RhdGljIGFzeW5jIGV4ZWN1dGVPYmplY3RGdW5jdGlvbihvYmosIG5hbWUsIHBhcmFtcykge1xuICAgICAgICBpZiAob2JqKSB7XG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICBjb25zdCBwcm9jID0gbm90UGF0aC5nZXQoXCI6XCIgKyBuYW1lLCBvYmopO1xuICAgICAgICAgICAgaWYgKG5vdENvbW1vbi5pc0Z1bmMocHJvYykpIHtcbiAgICAgICAgICAgICAgICBpZiAobm90Q29tbW9uLmlzQXN5bmMocHJvYykpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGF3YWl0IHByb2MoLi4ucGFyYW1zKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcHJvYyguLi5wYXJhbXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqICBFeGVjdXRlcyBtZXRob2Qgb2Ygb2JqZWN0IGluIGFwcm9wcmlhdGUgd2F5IGluc2lkZSBQcm9taXNlXG4gICAgICogQHBhcmFtIHtPYmplY3R9ICAgZnJvbSAgICAgb3JpZ2luYWwgb2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9ICAgdG8gICAgbWV0aG9kIG5hbWUgdG8gZXhlY3V0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9ICAgICBsaXN0ICBhcnJheSBvZiBwYXJhbXNcbiAgICAgKiBAcmV0dXJuIHt1bmRlZmluZWR9ICAgICAgICAgIHJlc3VsdHMgb2YgbWV0aG9kIGV4ZWN1dGlvblxuICAgICAqKi9cbiAgICBzdGF0aWMgbWFwQmluZChmcm9tLCB0bywgbGlzdCkge1xuICAgICAgICBsaXN0LmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZnJvbVtpdGVtXSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgdG9baXRlbV0gPSBmcm9tW2l0ZW1dLmJpbmQoZnJvbSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHN0YXRpYyBpc0NsYXNzKGZuKSB7XG4gICAgICAgIHJldHVybiAvXlxccypjbGFzcy8udGVzdChmbi50b1N0cmluZygpKTtcbiAgICB9XG5cbiAgICBzdGF0aWMgZGV0ZWN0VHlwZSh0ZXN0aWUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB0ZXN0aWUgIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgcmV0dXJuIHR5cGVvZiB0ZXN0aWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAobm90Q29tbW9uLmlzQ2xhc3ModGVzdGllKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBcImNsYXNzXCI7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBcImZ1bmN0aW9uXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvL9Cf0YDQvtCy0LXRgNC60LAg0Y/QstC70Y/QtdGC0YHRjyDQu9C4INC/0LXRgNC10LzQtdC90L3QsNGPINC80LDRgdGB0LjQstC+0LxcbiAgICBzdGF0aWMgaXNBcnJheShkYXRhKSB7XG4gICAgICAgIHJldHVybiB0eXBlb2YgZGF0YSA9PSBcIm9iamVjdFwiICYmIGRhdGEgaW5zdGFuY2VvZiBBcnJheTtcbiAgICB9XG5cbiAgICBzdGF0aWMgbG9jYWxJc29EYXRlKGRhdGUpIHtcbiAgICAgICAgZGF0ZSA9IGRhdGUgfHwgbmV3IERhdGUoKTtcbiAgICAgICAgbGV0IGxvY2FsSXNvU3RyaW5nID1cbiAgICAgICAgICAgIGRhdGUuZ2V0RnVsbFllYXIoKSArXG4gICAgICAgICAgICBcIi1cIiArXG4gICAgICAgICAgICBub3RDb21tb24ucGFkKGRhdGUuZ2V0TW9udGgoKSArIDEpICtcbiAgICAgICAgICAgIFwiLVwiICtcbiAgICAgICAgICAgIG5vdENvbW1vbi5wYWQoZGF0ZS5nZXREYXRlKCkpICtcbiAgICAgICAgICAgIFwiVFwiICtcbiAgICAgICAgICAgIG5vdENvbW1vbi5wYWQoZGF0ZS5nZXRIb3VycygpKSArXG4gICAgICAgICAgICBcIjpcIiArXG4gICAgICAgICAgICBub3RDb21tb24ucGFkKGRhdGUuZ2V0TWludXRlcygpKSArXG4gICAgICAgICAgICBcIjpcIiArXG4gICAgICAgICAgICBub3RDb21tb24ucGFkKGRhdGUuZ2V0U2Vjb25kcygpKTtcbiAgICAgICAgcmV0dXJuIGxvY2FsSXNvU3RyaW5nO1xuICAgIH1cblxuICAgIHN0YXRpYyBnZXRUb2RheSgpIHtcbiAgICAgICAgbGV0IHRvZGF5ID0gbmV3IERhdGUoKTtcbiAgICAgICAgbGV0IGRhdGUgPVxuICAgICAgICAgICAgdG9kYXkuZ2V0RnVsbFllYXIoKSArXG4gICAgICAgICAgICBcIi1cIiArXG4gICAgICAgICAgICBub3RDb21tb24ucGFkKHRvZGF5LmdldE1vbnRoKCkgKyAxKSArXG4gICAgICAgICAgICBcIi1cIiArXG4gICAgICAgICAgICBub3RDb21tb24ucGFkKHRvZGF5LmdldERhdGUoKSk7XG4gICAgICAgIHJldHVybiBkYXRlO1xuICAgIH1cblxuICAgIHN0YXRpYyBiYWNrbG9nID0gW107XG5cbiAgICBzdGF0aWMgYmFja2xvZ0FkZChtc2csIHR5cGUgPSBcImxvZ1wiKSB7XG4gICAgICAgIGlmIChub3RDb21tb24uZ2V0KFwiYmFja2xvZ1wiKSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgbm90Q29tbW9uLmJhY2tsb2cucHVzaCh7IG1zZywgdHlwZSB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHN0YXRpYyBkdW1wQmFja2xvZygpIHtcbiAgICAgICAgd2hpbGUgKG5vdENvbW1vbi5iYWNrbG9nLmxlbmd0aCkge1xuICAgICAgICAgICAgbGV0IHJvdyA9IG5vdENvbW1vbi5iYWNrbG9nLnNoaWZ0KCk7XG4gICAgICAgICAgICB3aW5kb3dbbm90Q29tbW9uLkxPR11bcm93LnR5cGVdKC4uLnJvdy5tc2cpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc3RhdGljIGxvZ01zZygpIHtcbiAgICAgICAgbGV0IG5vdyA9IG5vdENvbW1vbi5sb2NhbElzb0RhdGUoKTtcbiAgICAgICAgIFxuICAgICAgICB3aW5kb3dbbm90Q29tbW9uLkxPR10ubG9nKGBbJHtub3d9XTogYCwgLi4uYXJndW1lbnRzKTtcbiAgICAgICAgbm90Q29tbW9uLmJhY2tsb2dBZGQoW2BbJHtub3d9XTogYCwgLi4uYXJndW1lbnRzXSwgXCJsb2dcIik7XG4gICAgfVxuXG4gICAgc3RhdGljIGxvZygpIHtcbiAgICAgICAgbm90Q29tbW9uLmxvZ01zZyguLi5hcmd1bWVudHMpO1xuICAgIH1cblxuICAgIHN0YXRpYyBjcmVhdGVMb2dnZXIocHJlZml4KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBsb2c6IG5vdENvbW1vbi5nZW5Mb2dNc2cocHJlZml4KSxcbiAgICAgICAgICAgIGVycm9yOiBub3RDb21tb24uZ2VuTG9nRXJyb3IocHJlZml4KSxcbiAgICAgICAgICAgIGRlYnVnOiBub3RDb21tb24uZ2VuTG9nRGVidWcocHJlZml4KSxcbiAgICAgICAgICAgIHJlcG9ydDogbm90Q29tbW9uLnJlcG9ydCxcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvL9CT0LXQvdC10YDQsNGG0LjRjyDQvNC10YLQvtC00LAg0LLRi9Cy0L7QtNCwINGB0L7QvtCx0YnQtdC90LjQuSDQsiDQutC+0L3RgdC+0LvRjCDRgSDRg9C60LDQt9Cw0L3QuNC10Lwg0L/RgNC10YTQuNC60YHQsC5cbiAgICBzdGF0aWMgZ2VuTG9nTXNnKHByZWZpeCkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgLy9ub3QgYXJyb3cgYmMgb2YgYXJndW1lbnRzIHNwZWNpYWwgdmFyIGlzIG5vdCBhdmFpbGFibGUgaW4gYXJyb3cgZnVuY3Rpb25zXG4gICAgICAgICAgICBsZXQgbm93ID0gbm90Q29tbW9uLmxvY2FsSXNvRGF0ZSgpO1xuICAgICAgICAgICAgIFxuICAgICAgICAgICAgd2luZG93W25vdENvbW1vbi5MT0ddLmxvZyhgWyR7bm93fV06ICR7cHJlZml4fTo6YCwgLi4uYXJndW1lbnRzKTtcbiAgICAgICAgICAgIG5vdENvbW1vbi5iYWNrbG9nQWRkKFxuICAgICAgICAgICAgICAgIFtgWyR7bm93fV06ICR7cHJlZml4fTo6YCwgLi4uYXJndW1lbnRzXSxcbiAgICAgICAgICAgICAgICBcImxvZ1wiXG4gICAgICAgICAgICApO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqINCe0L/RgNC10LTQtdC70Y/QtdGCINGP0LLQu9GP0LXRgtGB0Y8g0LvQuCDQvtC60YDRg9C20LXQvdC40LUg0L7QutGA0YPQttC10L3QuNC10Lwg0YDQsNC30YDQsNCx0L7RgtC60LhcbiAgICAgKiBAcmV0dXJucyAge2Jvb2xlYW59IHRydWUg0LXRgdC70Lgg0Y3RgtC+INC30LDQv9GD0YnQtdC90L4g0LIg0L7QutGA0YPQttC10L3QuNC4INGA0LDQt9GA0LDQsdC+0YLQutC4XG4gICAgICoqL1xuICAgIHN0YXRpYyBpc0RldigpIHtcbiAgICAgICAgcmV0dXJuIG5vdENvbW1vbi5FTlZfVFlQRSA9PT0gbm90Q29tbW9uLkRFVl9FTlY7XG4gICAgfVxuXG4gICAgc3RhdGljIGRlYnVnKCkge1xuICAgICAgICBpZiAobm90Q29tbW9uLmlzRGV2KCkpIHtcbiAgICAgICAgICAgIHJldHVybiBub3RDb21tb24ubG9nTXNnKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbm90Q29tbW9uLk5PT1A7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzdGF0aWMgZ2VuTG9nRGVidWcocHJlZml4KSB7XG4gICAgICAgIGlmIChub3RDb21tb24uaXNEZXYoKSkge1xuICAgICAgICAgICAgcmV0dXJuIG5vdENvbW1vbi5nZW5Mb2dNc2cocHJlZml4KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBub3RDb21tb24uTk9PUDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHN0YXRpYyBlcnJvcigpIHtcbiAgICAgICAgbm90Q29tbW9uLmxvZ0Vycm9yKC4uLmFyZ3VtZW50cyk7XG4gICAgfVxuXG4gICAgLy/QpNGD0L3QutGG0LjRjyDQstGL0LLQvtC00LAg0YHQvtC+0LHRidC10L3QuNGPINC+0LEg0L7RiNC40LHQutC1XG4gICAgc3RhdGljIGxvZ0Vycm9yKCkge1xuICAgICAgICBsZXQgbm93ID0gbm90Q29tbW9uLmxvY2FsSXNvRGF0ZSgpO1xuICAgICAgICAgXG4gICAgICAgIHdpbmRvd1tub3RDb21tb24uTE9HXS5lcnJvcihgWyR7bm93fV06IGAsIC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIG5vdENvbW1vbi5iYWNrbG9nQWRkKFtgWyR7bm93fV06IGAsIC4uLmFyZ3VtZW50c10sIFwiZXJyb3JcIik7XG4gICAgfVxuXG4gICAgc3RhdGljIGdlbkxvZ0Vycm9yKHByZWZpeCkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgLy9kbyBub3QgY2hhbmdlIHRvIGFycm93IGZ1bmN0aW9uLCBiYyBvZiBhcmd1bWVudHNcbiAgICAgICAgICAgIGxldCBub3cgPSBub3RDb21tb24ubG9jYWxJc29EYXRlKCk7XG4gICAgICAgICAgICAgXG4gICAgICAgICAgICB3aW5kb3dbbm90Q29tbW9uLkxPR10uZXJyb3IoYFske25vd31dOiAke3ByZWZpeH06OmAsIC4uLmFyZ3VtZW50cyk7XG4gICAgICAgICAgICBub3RDb21tb24uYmFja2xvZ0FkZChcbiAgICAgICAgICAgICAgICBbYFske25vd31dOiAke3ByZWZpeH06OmAsIC4uLmFyZ3VtZW50c10sXG4gICAgICAgICAgICAgICAgXCJlcnJvclwiXG4gICAgICAgICAgICApO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIHN0YXRpYyByZXBvcnQoZSkge1xuICAgICAgICBpZiAobm90Q29tbW9uLmdldEFwcCgpKSB7XG4gICAgICAgICAgICBsZXQgcmVwb3J0ZXIgPSBub3RDb21tb24uZ2V0QXBwKCkuZ2V0U2VydmljZShcIm5zRXJyb3JSZXBvcnRlclwiKTtcbiAgICAgICAgICAgIGlmIChyZXBvcnRlcikge1xuICAgICAgICAgICAgICAgIHJlcG9ydGVyLnJlcG9ydChlKS5jYXRjaChub3RDb21tb24uZXJyb3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKCFub3RDb21tb24uZ2V0KFwicHJvZHVjdGlvblwiKSkge1xuICAgICAgICAgICAgICAgIG5vdENvbW1vbi5lcnJvciguLi5hcmd1bWVudHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgc3RhdGljIHRyYWNlKCkge1xuICAgICAgICBpZiAoIW5vdENvbW1vbi5nZXQoXCJwcm9kdWN0aW9uXCIpKSB7XG4gICAgICAgICAgICBub3RDb21tb24udHJhY2UoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHN0YXRpYyB0cmltQmFja3NsYXNoKHN0cikge1xuICAgICAgICBpZiAoc3RyLmluZGV4T2YoXCIvXCIpID09PSAwKSB7XG4gICAgICAgICAgICBzdHIgPSBzdHIuc3Vic3RyaW5nKDEpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzdHJbc3RyLmxlbmd0aCAtIDFdID09PSBcIi9cIikge1xuICAgICAgICAgICAgc3RyID0gc3RyLnN1YnN0cmluZygwLCBzdHIubGVuZ3RoIC0gMSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN0cjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiAgQnVpbGRzIFVSTCB3aXRoIHN0cnVjdHVyZSBsaWtlIHByZWZpeC9tb2R1bGUvbW9kZWwvaWQvYWN0aW9uXG4gICAgICogSWYgc29tZSBwYXJ0IGFic2VudCBvciBzZXQgdG8gZmFsc2UgaXQgd2lsbCBiZSBleGNsdWRlZCBmcm9tIHJlc3VsdFxuICAgICAqICBAcGFyYW0ge29iamVjdH0gdXJsUGFydHNcbiAgICAgKiAgQHBhcmFtIHtzdHJpbmd9IFt1cmxQYXJ0cy5wcmVmaXg9JyddXG4gICAgICogIEBwYXJhbSB7c3RyaW5nfSBbdXJsUGFydHMubW9kdWxlPScnXVxuICAgICAqICBAcGFyYW0ge3N0cmluZ30gW3VybFBhcnRzLm1vZGVsPScnXVxuICAgICAqICBAcGFyYW0ge3N0cmluZ30gW3VybFBhcnRzLmlkPScnXVxuICAgICAqICBAcGFyYW0ge3N0cmluZ30gW3VybFBhcnRzLmFjdGlvbj0nJ11cbiAgICAgKiAgQHJldHVybiB7c3RyaW5nfSAgdXJsIHBhdGhcbiAgICAgKi9cbiAgICBzdGF0aWMgYnVpbGRVUkwoXG4gICAgICAgIHsgcHJlZml4LCBtb2R1bGUsIG1vZGVsLCBpZCwgYWN0aW9uIH0gPSB7XG4gICAgICAgICAgICBwcmVmaXg6IFwiXCIsXG4gICAgICAgICAgICBtb2R1bGU6IFwiXCIsXG4gICAgICAgICAgICBtb2RlbDogXCJcIixcbiAgICAgICAgICAgIGlkOiBcIlwiLFxuICAgICAgICAgICAgYWN0aW9uOiBcIlwiLFxuICAgICAgICB9XG4gICAgKSB7XG4gICAgICAgIGxldCB1cmwgPSBbXCIvXCJdO1xuICAgICAgICBpZiAocHJlZml4KSB7XG4gICAgICAgICAgICB1cmwucHVzaChlbmNvZGVVUklDb21wb25lbnQobm90Q29tbW9uLnRyaW1CYWNrc2xhc2gocHJlZml4KSkpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtb2R1bGUpIHtcbiAgICAgICAgICAgIHVybC5wdXNoKGVuY29kZVVSSUNvbXBvbmVudChub3RDb21tb24udHJpbUJhY2tzbGFzaChtb2R1bGUpKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1vZGVsKSB7XG4gICAgICAgICAgICB1cmwucHVzaChlbmNvZGVVUklDb21wb25lbnQobm90Q29tbW9uLnRyaW1CYWNrc2xhc2gobW9kZWwpKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlkKSB7XG4gICAgICAgICAgICB1cmwucHVzaChlbmNvZGVVUklDb21wb25lbnQobm90Q29tbW9uLnRyaW1CYWNrc2xhc2goaWQpKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGFjdGlvbikge1xuICAgICAgICAgICAgdXJsLnB1c2goZW5jb2RlVVJJQ29tcG9uZW50KG5vdENvbW1vbi50cmltQmFja3NsYXNoKGFjdGlvbikpKTtcbiAgICAgICAgfVxuICAgICAgICB1cmwgPSB1cmwuZmlsdGVyKChlbCkgPT4gZWwgIT09IFwiXCIpO1xuICAgICAgICByZXR1cm4gdXJsLmpvaW4oXCIvXCIpLnJlcGxhY2UoL1xcL1xcLy9nLCBcIi9cIik7XG4gICAgfVxuXG4gICAgc3RhdGljIGNhcGl0YWxpemVGaXJzdExldHRlcihuYW1lKSB7XG4gICAgICAgIHJldHVybiBuYW1lLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgbmFtZS5zbGljZSgxKTtcbiAgICB9XG5cbiAgICBzdGF0aWMgbG93ZXJGaXJzdExldHRlcihzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZy5jaGFyQXQoMCkudG9Mb3dlckNhc2UoKSArIHN0cmluZy5zbGljZSgxKTtcbiAgICB9XG5cbiAgICBzdGF0aWMgc3RyTGVuZ3RoQ2FwKHN0ciwgTUFYX1RJVExFX0xFTkdUSCA9IDUwLCBQT1NUX0ZJWCA9IFwiLi4uXCIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBzdHIgPT09IFwic3RyaW5nXCIgJiYgc3RyLmxlbmd0aCA+IE1BWF9USVRMRV9MRU5HVEgpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHIuc3Vic3RyKDAsIE1BWF9USVRMRV9MRU5HVEgpICsgUE9TVF9GSVg7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc3RhdGljIGVzY2FwZUh0bWwodW5zYWZlKSB7XG4gICAgICAgIHJldHVybiB1bnNhZmVcbiAgICAgICAgICAgIC5yZXBsYWNlKC8mL2csIFwiJmFtcDtcIilcbiAgICAgICAgICAgIC5yZXBsYWNlKC88L2csIFwiJmx0O1wiKVxuICAgICAgICAgICAgLnJlcGxhY2UoLz4vZywgXCImZ3Q7XCIpXG4gICAgICAgICAgICAucmVwbGFjZSgvXCIvZywgXCImcXVvdDtcIilcbiAgICAgICAgICAgIC5yZXBsYWNlKC8nL2csIFwiJiMwMzk7XCIpO1xuICAgIH1cblxuICAgIHN0YXRpYyBzdGFydEFwcChzdGFydGVyKSB7XG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsIHN0YXJ0ZXIpO1xuICAgIH1cblxuICAgIHN0YXRpYyBnZXRBcHAoKSB7XG4gICAgICAgIHJldHVybiBub3RDb21tb24uZ2V0KFwiYXBwXCIpO1xuICAgIH1cblxuICAgIHN0YXRpYyBleHRlbmRBcHBDb25maWcoY29uZiwgY29uZjIpIHtcbiAgICAgICAgcmV0dXJuIG5vdENvbW1vbi5kZWVwTWVyZ2UoY29uZiwgY29uZjIpO1xuICAgIH1cblxuICAgIHN0YXRpYyBhYnNvcmJNb2R1bGUoKSB7XG4gICAgICAgIGxldCBkZWZhdWx0Q29uZiwgLy9hcHAgb3B0aW9uc1xuICAgICAgICAgICAgbW9kLCAvL21vZHVsZSBvcHRpb25zXG4gICAgICAgICAgICB0YXJnZXRzID0ge307IC8vdmFyaW91cyBjb2xsZWN0aW9uc1xuICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PSAxKSB7XG4gICAgICAgICAgICB0YXJnZXRzID0geyAuLi5hcmd1bWVudHNbMF0gfTtcbiAgICAgICAgICAgIGlmIChPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChhcmd1bWVudHNbMF0sIFwiZGVmYXVsdENvbmZcIikpIHtcbiAgICAgICAgICAgICAgICBkZWZhdWx0Q29uZiA9IGFyZ3VtZW50c1swXS5kZWZhdWx0Q29uZjtcbiAgICAgICAgICAgICAgICBkZWxldGUgdGFyZ2V0cy5kZWZhdWx0Q29uZjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChhcmd1bWVudHNbMF0sIFwibW9kXCIpKSB7XG4gICAgICAgICAgICAgICAgbW9kID0gYXJndW1lbnRzWzBdLm1vZDtcbiAgICAgICAgICAgICAgICBkZWxldGUgdGFyZ2V0cy5tb2Q7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBub3RDb21tb24ubG9nKFxuICAgICAgICAgICAgICAgIFwiV0FSTklORzogYWJzb3JiTW9kdWxlIGZvcm1hdCBvYnNvbGV0ZWQsIHVzZSBvYmplY3Qge2RlZmF1bHRDb25mLCBtb2QsIHNlcnZpY2VzLCB1aXMsIHdzYywgZXRjfVwiXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgZGVmYXVsdENvbmYgPSBhcmd1bWVudHNbMF07XG4gICAgICAgICAgICBtb2QgPSBhcmd1bWVudHNbMV07XG4gICAgICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDIpIHtcbiAgICAgICAgICAgICAgICB0YXJnZXRzLnNlcnZpY2VzID0gYXJndW1lbnRzWzJdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAzKSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0cy51aXMgPSBhcmd1bWVudHNbM107XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDQpIHtcbiAgICAgICAgICAgICAgICB0YXJnZXRzLndjcyA9IGFyZ3VtZW50c1s0XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmb3IgKGxldCBwcm9wIGluIG1vZCkge1xuICAgICAgICAgICAgLy9hZGQgbWFuaWZlc3QgdG8gb3RoZXJcbiAgICAgICAgICAgIGlmIChwcm9wID09PSBcIm1hbmlmZXN0XCIpIHtcbiAgICAgICAgICAgICAgICBkZWZhdWx0Q29uZiA9IG5vdENvbW1vbi5leHRlbmRBcHBDb25maWcoXG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHRDb25mLFxuICAgICAgICAgICAgICAgICAgICBtb2QubWFuaWZlc3RcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHR5cGVvZiBub3RDb21tb24uZ2V0KGBhYnNvcmIuJHtwcm9wfWApID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICAgICAgaWYgKCFPYmplY3QuaGFzT3duKHRhcmdldHMsIHByb3ApKSB7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldHNbcHJvcF0gPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgbm90Q29tbW9uLmxvZyhcbiAgICAgICAgICAgICAgICAgICAgICAgIGBXQVJOSU5HOiBubyBhY2NhbXVsYXRvciBvYmplY3QgcHJvdmlkZWQgZm9yICcke3Byb3B9JyBjb2xsZWN0aW9uYFxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBub3RDb21tb24uZ2V0KGBhYnNvcmIuJHtwcm9wfWApKHRhcmdldHNbcHJvcF0sIG1vZFtwcm9wXSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHByb3AuaW5kZXhPZihcIm5jXCIpID09PSAwKSB7XG4gICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgICAgIGlmICghT2JqZWN0Lmhhc093bihkZWZhdWx0Q29uZiwgXCJjb250cm9sbGVyc1wiKSkge1xuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0Q29uZi5jb250cm9sbGVycyA9IHt9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBkZWZhdWx0Q29uZi5jb250cm9sbGVyc1twcm9wXSA9IG1vZFtwcm9wXTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy9pbiBjYXNlIG9mIHNvbWUgb3RoZXIgc3R1ZmYgcHJlc2VudGVkLCBpc29sYXRpbmcgaXQgaW4gc3BlY2lhbCB2YXJcbiAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICAgICAgaWYgKCFPYmplY3QuaGFzT3duKHdpbmRvdywgXCJub3RFbnZcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgICAgICAgICB3aW5kb3cubm90RW52ID0ge307XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgICAgICB3aW5kb3cubm90RW52W3Byb3BdID0gbW9kW3Byb3BdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkZWZhdWx0Q29uZjtcbiAgICB9XG5cbiAgICBzdGF0aWMgZGVmaW5lSWZOb3RFeGlzdHMob2JqLCBrZXksIGRlZmF1bHRWYWx1ZSkge1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIGlmICghT2JqZWN0Lmhhc093bihvYmosIGtleSkpIHtcbiAgICAgICAgICAgIG9ialtrZXldID0gZGVmYXVsdFZhbHVlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc3RhdGljIHJlZ2lzdHJ5ID0ge307XG5cbiAgICBzdGF0aWMgcmVnaXN0ZXIoa2V5LCB2YWwpIHtcbiAgICAgICAgbm90Q29tbW9uLnJlZ2lzdHJ5W2tleV0gPSB2YWw7XG4gICAgfVxuXG4gICAgc3RhdGljIGdldChrZXkpIHtcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICByZXR1cm4gT2JqZWN0Lmhhc093bihub3RDb21tb24ucmVnaXN0cnksIGtleSlcbiAgICAgICAgICAgID8gbm90Q29tbW9uLnJlZ2lzdHJ5W2tleV1cbiAgICAgICAgICAgIDogbnVsbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBNb3ZlcyBpdGVtIGluc2lkZSBhcnJheSBmcm9tIG9sZF9pbmRleCB0byBuZXdfaW5kZXhcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHBhcmFtIHtBcnJheTxhbnk+fSBhcnJheVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBvbGRfaW5kZXhcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbmV3X2luZGV4XG4gICAgICogQG1lbWJlcm9mIG5vdENvbW1vblxuICAgICAqL1xuICAgIHN0YXRpYyBtb3ZlSXRlbShhcnJheSwgb2xkX2luZGV4LCBuZXdfaW5kZXgpIHtcbiAgICAgICAgY29uc3QgaW5SYW5nZSA9IChudW0pID0+IG51bSA8IGFycmF5Lmxlbmd0aCAmJiBudW0gPiAtMTtcbiAgICAgICAgaWYgKGluUmFuZ2UobmV3X2luZGV4KSAmJiBpblJhbmdlKG9sZF9pbmRleCkpIHtcbiAgICAgICAgICAgIGFycmF5LnNwbGljZShuZXdfaW5kZXgsIDAsIGFycmF5LnNwbGljZShvbGRfaW5kZXgsIDEpWzBdKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHN0YXRpYyBzdHJpcFByb3h5KG9iaikge1xuICAgICAgICBpZiAodHlwZW9mIG9iaiAhPT0gXCJ1bmRlZmluZWRcIiAmJiBvYmogIT09IG51bGwpIHtcbiAgICAgICAgICAgIGlmIChvYmouaXNQcm94eSkge1xuICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KG9iaikpIHtcbiAgICAgICAgICAgICAgICAgICAgb2JqID0gQXJyYXkuZnJvbShvYmopO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIG9iaiA9IE9iamVjdC5hc3NpZ24oe30sIG9iaik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZvciAobGV0IHQgaW4gb2JqKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgICAgICAgICAgaWYgKE9iamVjdC5oYXNPd24ob2JqLCB0KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgb2JqW3RdID0gbm90Q29tbW9uLnN0cmlwUHJveHkob2JqW3RdKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb2JqO1xuICAgIH1cblxuICAgIHN0YXRpYyBwaXBlKGRhdGEgLyogZmVlZCBkYXRhICovLCBmdW5jcyAvKiBmdW5jdGlvbnMgYXJyYXkgKi8pIHtcbiAgICAgICAgbGV0IHJlc3VsdDtcbiAgICAgICAgZm9yIChsZXQgZnVuYyBvZiBmdW5jcykge1xuICAgICAgICAgICAgcmVzdWx0ID0gZnVuYyhyZXN1bHQgfHwgZGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlXG4gICAgICogQHJldHVybiB7b2JqZWN0fVxuICAgICAqIEBtZW1iZXJvZiBub3RDb21tb25cbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0QVBJKHR5cGUpIHtcbiAgICAgICAgcmV0dXJuIG5vdENvbW1vbi5nZXRNYW5hZ2VyKCk/LmdldEFQSSh0eXBlKSA/PyBudWxsO1xuICAgIH1cblxuICAgIHN0YXRpYyBzZXRNYW5hZ2VyKHYpIHtcbiAgICAgICAgbm90Q29tbW9uLk1BTkFHRVIgPSB2O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHJldHVybiB7b2JqZWN0fVxuICAgICAqIEBtZW1iZXJvZiBub3RDb21tb25cbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0TWFuYWdlcigpIHtcbiAgICAgICAgcmV0dXJuIG5vdENvbW1vbi5NQU5BR0VSO1xuICAgIH1cblxuICAgIHN0YXRpYyBnZXRKU09OKHVybCkge1xuICAgICAgICByZXR1cm4gZmV0Y2godXJsKS50aGVuKChyZXNwb25zZSkgPT4gcmVzcG9uc2UuanNvbigpKTtcbiAgICB9XG5cbiAgICBzdGF0aWMgd2FpdChzZWMpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXMpID0+IHtcbiAgICAgICAgICAgIHNldFRpbWVvdXQocmVzLCBzZWMgKiAxMDAwKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgc3RhdGljIHJlZ2lzdGVyV2lkZ2V0RXZlbnRzKGV2ZW50cykge1xuICAgICAgICBpZiAobm90Q29tbW9uLmdldEFwcCgpKSB7XG4gICAgICAgICAgICBPYmplY3Qua2V5cyhldmVudHMpLmZvckVhY2goKGV2ZW50TmFtZSkgPT4ge1xuICAgICAgICAgICAgICAgIG5vdENvbW1vbi5nZXRBcHAoKS5vbihldmVudE5hbWUsIGV2ZW50c1tldmVudE5hbWVdKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc3RhdGljIG5hdmlnYXRlKHVybCkge1xuICAgICAgICBub3RDb21tb24uZ2V0QXBwKCkgJiZcbiAgICAgICAgICAgIG5vdENvbW1vbi5nZXRBcHAoKS5nZXRXb3JraW5nKFwicm91dGVyXCIpLm5hdmlnYXRlKHVybCk7XG4gICAgfVxuXG4gICAgc3RhdGljIHNlbGVjdCh2YXJpYW50c1NldCwgdmFsdWUsIGRlZikge1xuICAgICAgICBpZiAoXG4gICAgICAgICAgICB2YXJpYW50c1NldCAmJlxuICAgICAgICAgICAgdHlwZW9mIHZhcmlhbnRzU2V0ID09IFwib2JqZWN0XCIgJiZcbiAgICAgICAgICAgIG5vdENvbW1vbi5vYmpIYXModmFyaWFudHNTZXQsIHZhbHVlKSAmJlxuICAgICAgICAgICAgdHlwZW9mIHZhcmlhbnRzU2V0W3ZhbHVlXSAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuICAgICAgICAgICAgdmFyaWFudHNTZXRbdmFsdWVdICE9PSBudWxsXG4gICAgICAgICkge1xuICAgICAgICAgICAgcmV0dXJuIHZhcmlhbnRzU2V0W3ZhbHVlXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBkZWY7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmZ1bmN0aW9uIGFic29yYlNlcnZpY2VzKHRhcmdldCwgc3JjKSB7XG4gICAgaWYgKHRhcmdldCkge1xuICAgICAgICBmb3IgKGxldCBzZXJ2IGluIHNyYykge1xuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgaWYgKE9iamVjdC5oYXNPd24odGFyZ2V0LCBzZXJ2KSkge1xuICAgICAgICAgICAgICAgIG5vdENvbW1vbi5sb2dFcnJvcihgc2VydmljZXMgcHJvcGVydHkgZHVwbGljYXRpb24gJHtzZXJ2fWApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGFyZ2V0W3NlcnZdID0gc3JjW3NlcnZdO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5mdW5jdGlvbiBleHRlbmRXU0NsaWVudCh3Y3MsIHdzY05hbWUsIHdzY09wdGlvbnMpIHtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgaWYgKCFPYmplY3QuaGFzT3duKHdjcywgd3NjTmFtZSkpIHtcbiAgICAgICAgd2NzW3dzY05hbWVdID0ge1xuICAgICAgICAgICAgY29ubmVjdGlvbjoge30sXG4gICAgICAgICAgICByb3V0ZXI6IHtcbiAgICAgICAgICAgICAgICByb3V0ZXM6IHt9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG1lc3Nlbmdlcjoge30sXG4gICAgICAgIH07XG4gICAgfVxuICAgIGxldCB0YXJnZXQgPSB3Y3Nbd3NjTmFtZV07XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIGlmIChPYmplY3QuaGFzT3duKHdzY09wdGlvbnMsIFwicm91dGVyXCIpKSB7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgaWYgKE9iamVjdC5oYXNPd24od3NjT3B0aW9ucy5yb3V0ZXIsIFwicm91dGVzXCIpKSB7XG4gICAgICAgICAgICBmb3IgKGxldCByb3V0ZVR5cGUgaW4gd3NjT3B0aW9ucy5yb3V0ZXIucm91dGVzKSB7XG4gICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgICAgIGlmICghT2JqZWN0Lmhhc093bih0YXJnZXQucm91dGVyLnJvdXRlcywgcm91dGVUeXBlKSkge1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXQucm91dGVyLnJvdXRlc1tyb3V0ZVR5cGVdID0ge307XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24odGFyZ2V0LnJvdXRlci5yb3V0ZXNbcm91dGVUeXBlXSwge1xuICAgICAgICAgICAgICAgICAgICAuLi53c2NPcHRpb25zLnJvdXRlci5yb3V0ZXNbcm91dGVUeXBlXSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBAdHMtaWdub3JlXG4gICAgaWYgKE9iamVjdC5oYXNPd24od3NjT3B0aW9ucywgXCJtZXNzZW5nZXJcIikpIHtcbiAgICAgICAgT2JqZWN0LmFzc2lnbih0YXJnZXQubWVzc2VuZ2VyLCB7IC4uLndzY09wdGlvbnMubWVzc2VuZ2VyIH0pO1xuICAgIH1cbiAgICAvLyBAdHMtaWdub3JlXG4gICAgaWYgKE9iamVjdC5oYXNPd24od3NjT3B0aW9ucywgXCJjb25uZWN0aW9uXCIpKSB7XG4gICAgICAgIE9iamVjdC5hc3NpZ24odGFyZ2V0LmNvbm5lY3Rpb24sIHsgLi4ud3NjT3B0aW9ucy5jb25uZWN0aW9uIH0pO1xuICAgIH1cbiAgICBmb3IgKGxldCB0IG9mIFtcIm5hbWVcIiwgXCJnZXRUb2tlblwiLCBcImxvZ2dlclwiLCBcImlkZW50aXR5XCIsIFwiY3JlZGVudGlhbHNcIl0pIHtcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICBpZiAoT2JqZWN0Lmhhc093bih3c2NPcHRpb25zLCB0KSkge1xuICAgICAgICAgICAgdGFyZ2V0W3RdID0gd3NjT3B0aW9uc1t0XTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZnVuY3Rpb24gYWJzb3JiV1NDKHRhcmdldCwgc3JjKSB7XG4gICAgaWYgKHRhcmdldCkge1xuICAgICAgICBmb3IgKGxldCB3c0NsaWVudE5hbWUgaW4gc3JjKSB7XG4gICAgICAgICAgICBleHRlbmRXU0NsaWVudCh0YXJnZXQsIHdzQ2xpZW50TmFtZSwgc3JjW3dzQ2xpZW50TmFtZV0pO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5mdW5jdGlvbiBhYnNvcmJVSXModGFyZ2V0LCBzcmMpIHtcbiAgICBpZiAodGFyZ2V0KSB7XG4gICAgICAgIGZvciAobGV0IHVpIGluIHNyYykge1xuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgaWYgKE9iamVjdC5oYXNPd24odGFyZ2V0LCB1aSkpIHtcbiAgICAgICAgICAgICAgICBub3RDb21tb24ubG9nRXJyb3IoYHVpcyBwcm9wZXJ0eSBkdXBsaWNhdGlvbiAke3VpfWApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGFyZ2V0W3VpXSA9IHNyY1t1aV07XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmZ1bmN0aW9uIGFic29yYkZpZWxkcyh0YXJnZXQsIHNyYykge1xuICAgIGlmICh0YXJnZXQpIHtcbiAgICAgICAgZm9yIChsZXQgdWkgaW4gc3JjKSB7XG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICBpZiAoT2JqZWN0Lmhhc093bih0YXJnZXQsIHVpKSkge1xuICAgICAgICAgICAgICAgIG5vdENvbW1vbi5sb2dFcnJvcihgZmllbGRzIHByb3BlcnR5IGR1cGxpY2F0aW9uICR7dWl9YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0YXJnZXRbdWldID0gc3JjW3VpXTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxubm90Q29tbW9uLnJlZ2lzdGVyKFwiYWJzb3JiLndzY1wiLCBhYnNvcmJXU0MpO1xubm90Q29tbW9uLnJlZ2lzdGVyKFwiYWJzb3JiLnNlcnZpY2VzXCIsIGFic29yYlNlcnZpY2VzKTtcbm5vdENvbW1vbi5yZWdpc3RlcihcImFic29yYi51aXNcIiwgYWJzb3JiVUlzKTtcbm5vdENvbW1vbi5yZWdpc3RlcihcImFic29yYi51aXNcIiwgYWJzb3JiRmllbGRzKTtcblxuZXhwb3J0IGRlZmF1bHQgbm90Q29tbW9uO1xuIiwiLyoqXG4gKiBQdXJwb3NlIG9mIHRoaXMgTG9jYWxlIG9iamVjdCBpcyB0aGF0IGl0IHdpbGwgaG9sZCBsaWJyYXJ5IG9mIGxvY2FsaXphdGlvblxuICogdGVtcGxhdGVzIGFuZCBwcm92aWRlIGJhc2ljIGxvY2FsaXphdGlvbiBzZXJ2aWNlIHRvIG90aGVyIG1vZHVsZXNcbiAqKi9cblxuaW1wb3J0IEV2ZW50RW1pdHRlciBmcm9tIFwid29sZnk4Ny1ldmVudGVtaXR0ZXJcIjtcblxuaW1wb3J0IG5vdENvbW1vbiBmcm9tIFwiLi4vZnJhbWUvY29tbW9uLmpzXCI7XG5pbXBvcnQgbm90UGF0aCBmcm9tIFwibm90LXBhdGhcIjtcblxuaW1wb3J0IExPQ0FMRSBmcm9tIFwiLi9zdG9yZVwiO1xuXG4vKipcbiAqIHN0cmluZ3MgbG9jYWxpemF0aW9uIGFuZCBmb3JtYXRpbmcgbW9kZWxcbiAqIEBjbGFzc1xuICovXG5jbGFzcyBub3RMb2NhbGUgZXh0ZW5kcyBFdmVudEVtaXR0ZXIge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmRpY3QgPSB7fTsgLy9kaWN0aW9uYXJ5IG9mIHBocmFzZXNcbiAgICAgICAgdGhpcy5oZWxwZXJzID0ge307IC8vYWRkaXRpb25hbCBoZWxwZXIgZnVuY3Rpb25zIGFuZCBjb25zdGFudHNcbiAgICAgICAgbGV0IGRpY3QgPSB0aGlzLnJlc3RvcmVGcm9tU3RvcmFnZSgpO1xuICAgICAgICBpZiAoZGljdCkge1xuICAgICAgICAgICAgdGhpcy5zZXQoZGljdCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTdHJpbmcgZm9ybWF0IHNob3VsZCBjb21wbHkgbm90UGF0aCBzdGFuZGFydC5cbiAgICAgKiB7cGF0aF90b19hY2Nlc3N9IC0gaXNcbiAgICAgKiA6IC0gaXMgdXNlZCB0byBhY2Nlc3MgdG8gcGFyYW1zXG4gICAgICogOjogLSBpcyB1c2VkIHRvIGFjY2VzcyB0byBoZWxwZXJzXG4gICAgICogV2VsY29tZSwgezp3aGVyZX0hIC0gd2lsbCByZXBsYWNlIHs6d2hlcmV9IHdpdGggY29udGVudCBvZiBwYXJhbXMud2hlcmVcbiAgICAgKiBXZWxjb21lLCB7Ojp3aGVyZX0hIC0gd2lsbCByZXBsYWNlIHs6d2hlcmV9IHdpdGggY29udGVudCBvZiB0aGlzLmhlbHBlcnMud2hlcmVcbiAgICAgKiAoKSAtIGFmdGVyIHBhdGggaXMgdG8gaW52b2tlIGZ1bmN0aW9uIG9mIHRhcmdldCBvYmplY3RcbiAgICAgKiBXZWxjb21lLCB7Ojp3aGVyZSgpfSEgLSB3aWxsIHRyeSB0byBleGVjIHRoaXMuaGVscGVycy53aGVyZShwYXJhbXMsIHVuZGVmaW5lZClcbiAgICAgKiBAcGFyYW0gICAge3N0cmluZ30gIHN0ciAgICAgICAgIGxvY2FsaXplZCBzdHJpbmcgdGVtcGxhdGUgd2l0aCBtYXJrIHRvIGluY2x1ZGUgZGF0YVxuICAgICAqIEBwYXJhbSAgICB7b2JqZWN0fSAgcGFyYW1zICAgICAgcGFyYW1zIHRvIHVzZSBpbiBzdHJpbmdcbiAgICAgKiBAcmV0dXJucyAge3N0cmluZ30gICAgICAgICAgICAgIGxvY2FsaXplZCB2ZXJzaW9uIG9mIHN0cmluZyB3aXRoXG4gICAgICovXG4gICAgZm9ybWF0KHN0ciwgcGFyYW1zKSB7XG4gICAgICAgIHJldHVybiBub3RQYXRoLnBhcnNlU3VicyhzdHIsIHBhcmFtcywgdGhpcy5oZWxwZXJzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm4gbG9jYWxpemVkIHZlcnNpb24gb2Ygc3RyaW5nIHdpdGggaW5qZWN0ZWQgZGF0YSBmcm9tIHByb3ZpZGVkIG9iamVjdFxuICAgICAqIG1heSBhbHNvIHVzZSBMb2NhbGUuaGVscGVycyBhcyBzb3VyY2Ugb2YgZGF0YVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSAgIHBocmFzZSAgICBuYW1lIG9mIHN0cmluZyB0byBsb2NhbGl6ZVxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSAgIHBhcmFtcyAgICBvYmplY3Qgd2l0aCBkYXRhIHRvIGluamVjdCBpbiBwaHJhc2UgdGVtcGxhdGVcbiAgICAgKiBAcmV0dXJuIHtzdHJpbmd9ICAgICAgICAgICAgbG9jYWxpemVkIHN0cmluZyB3aXRoIGluamVjdGVkIGRhdGFcbiAgICAgKi9cbiAgICBzYXkocGhyYXNlLCBwYXJhbXMgPSBmYWxzZSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKG5vdENvbW1vbi5vYmpIYXModGhpcy5kaWN0LCBwaHJhc2UpKSB7XG4gICAgICAgICAgICAgICAgbGV0IHRtcGwgPSB0aGlzLmRpY3RbcGhyYXNlXSxcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gXCJcIjtcbiAgICAgICAgICAgICAgICBpZiAocGFyYW1zKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHRoaXMuZm9ybWF0KHRtcGwsIHBhcmFtcyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gdG1wbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmtub3duIGxvY2FsZSBwaHJhc2U6ICR7cGhyYXNlfWApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBub3RDb21tb24uZGVidWcoZSk7XG4gICAgICAgICAgICByZXR1cm4gcGhyYXNlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0dGluZyBuZXcgZGljdGlvbmFyeS4gdHJpZ2dlcnMgZXZlbnQgJ2NoYW5nZSdcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gICAgIGRpY3QgICAgICB2b2NhYnVsYXJ5IG9mIHBocmFzZXMgYW5kIHRlbXBsYXRlc1xuICAgICAqKi9cbiAgICBzZXQoZGljdCkge1xuICAgICAgICBMT0NBTEUuc2V0KGRpY3QpO1xuICAgICAgICB0aGlzLnNhdmVUb1N0b3JhZ2UoZGljdCk7XG4gICAgICAgIHRoaXMuZGljdCA9IE9iamVjdC5hc3NpZ24oe30sIHsgLi4uZGljdCB9KTtcbiAgICAgICAgdGhpcy5lbWl0KFwiY2hhbmdlXCIpO1xuICAgIH1cblxuICAgIHNhdmVUb1N0b3JhZ2UoZGljdCkge1xuICAgICAgICBpZiAod2luZG93LmxvY2FsU3RvcmFnZSkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gd2luZG93LmxvY2FsU3RvcmFnZS5zZXRJdGVtKFxuICAgICAgICAgICAgICAgICAgICBcImRpY3Rpb25hcnlcIixcbiAgICAgICAgICAgICAgICAgICAgSlNPTi5zdHJpbmdpZnkoZGljdClcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIG5vdENvbW1vbi5kZWJ1ZyhlKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHJlc3RvcmVGcm9tU3RvcmFnZSgpIHtcbiAgICAgICAgaWYgKHdpbmRvdy5sb2NhbFN0b3JhZ2UpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgbGV0IHN0ciA9IHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbShcImRpY3Rpb25hcnlcIik7XG4gICAgICAgICAgICAgICAgaWYgKHN0cikge1xuICAgICAgICAgICAgICAgICAgICBsZXQgZGljdCA9IEpTT04ucGFyc2Uoc3RyKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRpY3Q7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICBub3RDb21tb24uZGVidWcoZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHdyaXRhYmxlIHN0b3JlIG9mIHBocmFzZXNcbiAgICAgKiBAcmV0dXJuIHtvYmplY3R9ICB3cml0YWJsZSBzdG9yZVxuICAgICAqL1xuICAgIHZvY2FidWxhcnkoKSB7XG4gICAgICAgIHJldHVybiBMT0NBTEU7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBuZXcgbm90TG9jYWxlKCk7XG4iLCJpbXBvcnQgTE9DQUxFIGZyb20gXCIuL3N0b3JlLmpzXCI7XG5pbXBvcnQgbm90TG9jYWxlIGZyb20gXCIuL25vdExvY2FsZS5qc1wiO1xuY29uc3Qgc2F5ID0gbm90TG9jYWxlLnNheS5iaW5kKG5vdExvY2FsZSk7XG5cbmV4cG9ydCB7IExPQ0FMRSwgc2F5LCBub3RMb2NhbGUgfTtcbiIsIjxzY3JpcHQ+XG4gICAgaW1wb3J0IHsgb25Nb3VudCB9IGZyb20gXCJzdmVsdGVcIjtcblxuICAgIGltcG9ydCB7IExPQ0FMRSB9IGZyb20gXCIuLi8uLi9sb2NhbGVcIjtcbiAgICBpbXBvcnQgbm90Q29tbW9uIGZyb20gXCIuLi8uLi9mcmFtZS9jb21tb25cIjtcblxuICAgIGxldCBzaWRlZCA9ICRzdGF0ZShmYWxzZSk7XG5cbiAgICAvKipcbiAgICAgKiBAdHlwZWRlZiB7T2JqZWN0fSBQcm9wc1xuICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbaWRdIC0gaWYgd2Ugd2FudCB0byBhZGRyZXNzIHRoaXMgdGFnXG4gICAgICogQHByb3BlcnR5IHtzdHJpbmd9IFt0aXRsZV1cbiAgICAgKiBAcHJvcGVydHkge3N0cmluZ30gW2NvbG9yXVxuICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbc2l6ZV1cbiAgICAgKiBAcHJvcGVydHkge3N0cmluZ30gW3BhZGRpbmddXG4gICAgICogQHByb3BlcnR5IHtib29sZWFufSBbYm9sZF1cbiAgICAgKiBAcHJvcGVydHkge2Jvb2xlYW59IFtyaWdodF1cbiAgICAgKiBAcHJvcGVydHkge2Jvb2xlYW59IFtsZWZ0XVxuICAgICAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW3RvcF1cbiAgICAgKiBAcHJvcGVydHkge2Jvb2xlYW59IFtib3R0b21dXG4gICAgICogQHByb3BlcnR5IHtzdHJpbmd9IFtjbGFzc2VzXVxuICAgICAqIEBwcm9wZXJ0eSB7YW55fSBbZXZlbnRzXVxuICAgICAqIEBwcm9wZXJ0eSB7YW55fSBbcmVnaXN0ZXJdIC0gcmVnaXN0ZXIgZXZlbnQgaGFuZGxlcnNcbiAgICAgKiBAcHJvcGVydHkge2FueX0gW29uVXBkYXRlXVxuICAgICAqIEBwcm9wZXJ0eSB7YW55fSBbYWN0aW9uXVxuICAgICAqL1xuXG4gICAgLyoqIEB0eXBlIHtQcm9wc30gKi9cbiAgICBsZXQge1xuICAgICAgICBpZCA9IFwidGFnSWRcIixcbiAgICAgICAgdGl0bGUgPSAkYmluZGFibGUoXCJ0YWdcIiksXG4gICAgICAgIGNvbG9yID0gXCJpbmZvXCIsXG4gICAgICAgIHNpemUgPSBcIm5vcm1hbFwiLFxuICAgICAgICBwYWRkaW5nID0gXCJub3JtYWxcIixcbiAgICAgICAgYm9sZCA9IGZhbHNlLFxuICAgICAgICByaWdodCA9IGZhbHNlLFxuICAgICAgICBsZWZ0ID0gZmFsc2UsXG4gICAgICAgIHRvcCA9IGZhbHNlLFxuICAgICAgICBib3R0b20gPSBmYWxzZSxcbiAgICAgICAgY2xhc3NlcyA9IFwiXCIsXG4gICAgICAgIGV2ZW50cyA9ICRiaW5kYWJsZSh7fSksXG4gICAgICAgIHJlZ2lzdGVyID0gbm90Q29tbW9uLnJlZ2lzdGVyV2lkZ2V0RXZlbnRzLmJpbmQobm90Q29tbW9uKSxcbiAgICAgICAgb25VcGRhdGUgPSAoZGF0YSkgPT4ge1xuICAgICAgICAgICAgaWYgKE9iamVjdC5oYXNPd24oZGF0YSwgXCJ0aXRsZVwiKSkge1xuICAgICAgICAgICAgICAgIHRpdGxlID0gZGF0YS50aXRsZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgYWN0aW9uID0gKCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0sXG4gICAgfSA9ICRwcm9wcygpO1xuXG4gICAgZnVuY3Rpb24gZ2V0U3RhbmRhcnRVcGRhdGVFdmVudE5hbWUoKSB7XG4gICAgICAgIHJldHVybiBgdGFnLSR7aWR9OnVwZGF0ZWA7XG4gICAgfVxuXG4gICAgb25Nb3VudCgoKSA9PiB7XG4gICAgICAgIGlmICghT2JqZWN0Lmhhc093bihldmVudHMsIGdldFN0YW5kYXJ0VXBkYXRlRXZlbnROYW1lKCkpKSB7XG4gICAgICAgICAgICBldmVudHNbZ2V0U3RhbmRhcnRVcGRhdGVFdmVudE5hbWUoKV0gPSBvblVwZGF0ZTtcbiAgICAgICAgfVxuICAgICAgICByZWdpc3RlcihldmVudHMpO1xuICAgICAgICBzaWRlZCA9IHJpZ2h0IHx8IGxlZnQgfHwgdG9wIHx8IGJvdHRvbTtcbiAgICB9KTtcbjwvc2NyaXB0PlxuXG57I2lmIHRpdGxlfVxuICAgIDxzcGFuXG4gICAgICAgIHJvbGU9XCJidXR0b25cIlxuICAgICAgICB0YWJpbmRleD1cIjBcIlxuICAgICAgICBvbmtleWRvd249e2FjdGlvbiA/IGFjdGlvbiA6IHVuZGVmaW5lZH1cbiAgICAgICAgb25jbGljaz17YWN0aW9uID8gYWN0aW9uIDogdW5kZWZpbmVkfVxuICAgICAgICBpZD1cInRhZy17aWR9XCJcbiAgICAgICAgY2xhc3M9XCJcbiAgdGFnXG4gIHtib2xkID8gJ2hhcy10ZXh0LXdlaWdodC1ib2xkJyA6ICcnfVxuICB7cGFkZGluZyAhPT0gJ25vcm1hbCcgPyBgaXMtcGFkZGVkLSR7cGFkZGluZ31gIDogJyd9XG4gIGlzLXtzaXplfVxuICBpcy17Y29sb3J9XG4gIHtzaWRlZCA/ICdpcy1zaWRlZCcgOiAnJ31cbiAge3JpZ2h0ID8gJ2lzLXNpZGVkLXJpZ2h0JyA6ICcnfVxuICB7bGVmdCA/ICdpcy1zaWRlZC1sZWZ0JyA6ICcnfVxuICB7dG9wID8gJ2lzLXNpZGVkLXRvcCcgOiAnJ31cbiAge2JvdHRvbSA/ICdpcy1zaWRlZC1ib3R0b20nIDogJyd9XG4gIHtjbGFzc2VzfVwiPnskTE9DQUxFW3RpdGxlXX08L3NwYW5cbiAgICA+XG57L2lmfVxuIiwiPHNjcmlwdD5cbiAgICBpbXBvcnQgVUlUYWcgZnJvbSBcIi4vdWkudGFnLnN2ZWx0ZVwiO1xuXG4gICAgLyoqXG4gICAgICogQHR5cGVkZWYge09iamVjdH0gUHJvcHNcbiAgICAgKiBAcHJvcGVydHkge3N0cmluZ30gW0xDX1RSVUUgPSBcIm5vdC1ub2RlOmJvb2xlYW5zX3RydWVcIl1cbiAgICAgKiBAcHJvcGVydHkge3N0cmluZ30gW0xDX0ZBTFNFID0gXCJub3Qtbm9kZTpib29sZWFuc19mYWxzZVwiXVxuICAgICAqIEBwcm9wZXJ0eSB7YW55fSB2YWx1ZVxuICAgICAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW2ludmVydGVkID0gZmFsc2VdXG4gICAgICovXG5cbiAgICAvKiogQHR5cGUge1Byb3BzfSAqL1xuICAgIGxldCB7XG4gICAgICAgIExDX1RSVUUgPSBcIm5vdC1ub2RlOmJvb2xlYW5zX3RydWVcIixcbiAgICAgICAgTENfRkFMU0UgPSBcIm5vdC1ub2RlOmJvb2xlYW5zX2ZhbHNlXCIsXG4gICAgICAgIHZhbHVlLFxuICAgICAgICBpbnZlcnRlZCA9IGZhbHNlLFxuICAgIH0gPSAkcHJvcHMoKTtcblxuICAgIGNvbnN0IEZBTFNFX1ZBTFVFID0ge1xuICAgICAgICB0aXRsZTogTENfRkFMU0UsXG4gICAgICAgIGNvbG9yOiBpbnZlcnRlZCA/IFwic3VjY2Vzc1wiIDogXCJkYW5nZXJcIixcbiAgICB9O1xuXG4gICAgY29uc3QgVFJVRV9WQUxVRSA9IHtcbiAgICAgICAgdGl0bGU6IExDX1RSVUUsXG4gICAgICAgIGNvbG9yOiBpbnZlcnRlZCA/IFwiZGFuZ2VyXCIgOiBcInN1Y2Nlc3NcIixcbiAgICB9O1xuXG4gICAgLy9pZiBpbnZlcnRlZCA9PT0gdHJ1ZSwgaW52ZXJ0cyB2YWx1ZVxuICAgIGxldCB0YWdWYWx1ZSA9ICRkZXJpdmVkKHZhbHVlID8gVFJVRV9WQUxVRSA6IEZBTFNFX1ZBTFVFKTtcbjwvc2NyaXB0PlxuXG48VUlUYWcgey4uLnRhZ1ZhbHVlfSAvPlxuIiwiPHNjcmlwdD5cbiAgICBpbXBvcnQgeyBMT0NBTEUgfSBmcm9tIFwiLi4vLi4vbG9jYWxlXCI7XG4gICAgaW1wb3J0IFVJQm9vbGVhbiBmcm9tIFwiLi91aS5ib29sZWFuLnN2ZWx0ZVwiO1xuXG4gICAgLyoqXG4gICAgICogQHR5cGVkZWYge09iamVjdH0gUHJvcHNcbiAgICAgKiBAcHJvcGVydHkge2FueX0gdmFsdWVcbiAgICAgKiBAcHJvcGVydHkge2FueX0gbGFiZWxcbiAgICAgKiBAcHJvcGVydHkge2Jvb2xlYW59IFtpbnZlcnRlZF1cbiAgICAgKi9cblxuICAgIC8qKiBAdHlwZSB7UHJvcHN9ICovXG4gICAgbGV0IHsgdmFsdWUsIGxhYmVsLCBpbnZlcnRlZCA9IGZhbHNlIH0gPSAkcHJvcHMoKTtcbjwvc2NyaXB0PlxuXG48c3BhbiBjbGFzcz1cImxhYmVsXCI+eyRMT0NBTEVbbGFiZWxdfTogPFVJQm9vbGVhbiB7dmFsdWV9IHtpbnZlcnRlZH0gLz48L3NwYW4+XG4iLCI8c2NyaXB0PlxuICAgIGltcG9ydCB7IG9uTW91bnQgfSBmcm9tIFwic3ZlbHRlXCI7XG4gICAgaW1wb3J0IFVJQm9vbGVhbiBmcm9tIFwiLi91aS5ib29sZWFuLnN2ZWx0ZVwiO1xuXG4gICAgLyoqXG4gICAgICogQHR5cGVkZWYge09iamVjdH0gUHJvcHNcbiAgICAgKiBAcHJvcGVydHkge2FueX0gW3ZhbHVlc11cbiAgICAgKiBAcHJvcGVydHkge2Jvb2xlYW59IFtpbnZlcnRlZF1cbiAgICAgKiBAcHJvcGVydHkge2FueX0gW2NvbXBvbmVudENvbnN0cnVjdG9yXVxuICAgICAqL1xuXG4gICAgLyoqIEB0eXBlIHtQcm9wc30gKi9cbiAgICBsZXQgeyB2YWx1ZXMgPSBbXSwgaW52ZXJ0ZWQgPSBmYWxzZSwgY29tcG9uZW50Q29uc3RydWN0b3IgPSBVSUJvb2xlYW4gfSA9ICRwcm9wcygpO1xuXG4gICAgbGV0IF92YWx1ZXMgPSAkc3RhdGUoW10pO1xuXG4gICAgb25Nb3VudCgoKSA9PiB7XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWVzID09PSBcImJvb2xlYW5cIikge1xuICAgICAgICAgICAgX3ZhbHVlcyA9IFt7IHZhbHVlOiB2YWx1ZXMgfV07XG4gICAgICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZXMpKSB7XG4gICAgICAgICAgICBpZiAodmFsdWVzLmV2ZXJ5KChpdG0pID0+IHR5cGVvZiBpdG0gPT09IFwiYm9vbGVhblwiKSkge1xuICAgICAgICAgICAgICAgIF92YWx1ZXMgPSB2YWx1ZXMubWFwKChpdG0pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgdmFsdWU6IGl0bSB9O1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBfdmFsdWVzID0gWy4uLnZhbHVlc107XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KTtcbjwvc2NyaXB0PlxuXG57I2lmIF92YWx1ZXMubGVuZ3RofVxuICAgIHsjZWFjaCBfdmFsdWVzIGFzIGl0ZW19XG4gICAgICAgIHtAY29uc3QgU3ZlbHRlQ29tcG9uZW50ID0gY29tcG9uZW50Q29uc3RydWN0b3J9XG4gICAgICAgIDxTdmVsdGVDb21wb25lbnRcbiAgICAgICAgICAgIHsuLi5pdGVtfVxuICAgICAgICAgICAgaW52ZXJ0ZWQ9e2ludmVydGVkIHx8IGl0ZW0uaW52ZXJ0ZWR9XG4gICAgICAgIC8+XG4gICAgey9lYWNofVxuey9pZn1cbiIsIjxzY3JpcHQ+XG4gICAgaW1wb3J0IFwiYnVsbWEtdG9vbHRpcC9kaXN0L2Nzcy9idWxtYS10b29sdGlwLm1pbi5jc3NcIjtcblxuICAgIC8qKlxuICAgICAqIEB0eXBlZGVmIHtPYmplY3R9IFByb3BzXG4gICAgICogQHByb3BlcnR5IHtib29sZWFufSBbaGlkZGVuXVxuICAgICAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW3Nob3dhYmxlXVxuICAgICAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW2NvcGlhYmxlXVxuICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbY29weUljb25dXG4gICAgICogQHByb3BlcnR5IHtzdHJpbmd9IFtzaG93SWNvbl1cbiAgICAgKiBAcHJvcGVydHkge3N0cmluZ30gW2hpZGVJY29uXVxuICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBbbWF4TGVuZ3RoXVxuICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbc2hhZG93Q2xhc3NdXG4gICAgICogQHByb3BlcnR5IHtib29sZWFufSBbdG9vbHRpcF1cbiAgICAgKiBAcHJvcGVydHkge251bWJlcn0gW3Rvb2x0aXBUVExdXG4gICAgICogQHByb3BlcnR5IHtzdHJpbmd9IFt0b29sdGlwVGV4dF1cbiAgICAgKiBAcHJvcGVydHkge3N0cmluZ30gW3Rvb2x0aXBDbGFzc11cbiAgICAgKiBAcHJvcGVydHkge3N0cmluZ30gW3ZhbHVlXVxuICAgICAqL1xuXG4gICAgLyoqIEB0eXBlIHtQcm9wc30gKi9cbiAgICBsZXQge1xuICAgICAgICBoaWRkZW4gPSAkYmluZGFibGUodHJ1ZSksXG4gICAgICAgIHNob3dhYmxlID0gdHJ1ZSxcbiAgICAgICAgY29waWFibGUgPSB0cnVlLFxuICAgICAgICBjb3B5SWNvbiA9IFwiY29weVwiLFxuICAgICAgICBzaG93SWNvbiA9IFwiZXllXCIsXG4gICAgICAgIGhpZGVJY29uID0gXCJleWUtc2xhc2hcIixcbiAgICAgICAgbWF4TGVuZ3RoID0gMjAsXG4gICAgICAgIHNoYWRvd0NsYXNzID0gXCJoYXMtYmFja2dyb3VuZC1wcmltYXJ5LTkwXCIsXG4gICAgICAgIHRvb2x0aXAgPSB0cnVlLFxuICAgICAgICB0b29sdGlwVFRMID0gMjAwMCxcbiAgICAgICAgdG9vbHRpcFRleHQgPSBcItCh0LrQvtC/0LjRgNC+0LLQsNC90L4g0LIg0LHRg9GE0LXRgFwiLFxuICAgICAgICB0b29sdGlwQ2xhc3MgPSBcImhhcy10b29sdGlwLWluZm9cIixcbiAgICAgICAgdmFsdWUgPSBcIlwiLFxuICAgIH0gPSAkcHJvcHMoKTtcblxuICAgIGZ1bmN0aW9uIHRvZ2dsZVZpZXcoKSB7XG4gICAgICAgIGhpZGRlbiA9ICFoaWRkZW47XG4gICAgfVxuXG4gICAgbGV0IGNvbnRlbnRDb3BpZWQgPSAkc3RhdGUoZmFsc2UpLFxuICAgICAgICB0b29sdGlwQWN0aXZlID0gJGRlcml2ZWQodG9vbHRpcCAmJiBjb250ZW50Q29waWVkKSxcbiAgICAgICAgdG9vbHRpcFRhcmdldCA9ICRzdGF0ZSgpO1xuXG4gICAgYXN5bmMgZnVuY3Rpb24gY29weUNvbnRlbnQoKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBhd2FpdCBuYXZpZ2F0b3IuY2xpcGJvYXJkLndyaXRlVGV4dCh2YWx1ZSk7XG4gICAgICAgICAgICBpZiAodG9vbHRpcCkge1xuICAgICAgICAgICAgICAgIGNvbnRlbnRDb3BpZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHRvb2x0aXBUYXJnZXQuZGF0YXNldC50b29sdGlwID0gdG9vbHRpcFRleHQ7XG4gICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnRDb3BpZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgdG9vbHRpcFRhcmdldC5yZW1vdmVBdHRyaWJ1dGUoXCJkYXRhLXRvb2x0aXBcIik7XG4gICAgICAgICAgICAgICAgfSwgdG9vbHRpcFRUTCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIkZhaWxlZCB0byBjb3B5OiBcIiwgZXJyKTtcbiAgICAgICAgfVxuICAgIH1cbjwvc2NyaXB0PlxuXG48c3BhblxuICAgIGNsYXNzPXsoaGlkZGVuID8gXCJpcy1jZW5zb3JlZCBcIiArIHNoYWRvd0NsYXNzIDogXCJcIikgK1xuICAgICAgICBcIiBpcy12ZXJ0aWNhbC1taWRkbGUgXCJ9XG4gICAgc3R5bGU9e2BkaXNwbGF5OmlubGluZS1ibG9jazsgd2lkdGg6ICR7bWF4TGVuZ3RofXJlbTsgaGVpZ2h0OiB2YXIoLS1idWxtYS1zaXplLW1lZGl1bSk7IG92ZXJmbG93LXg6aGlkZGVuO2B9XG4gICAgPntoaWRkZW4gPyBcIlwiIDogdmFsdWV9PC9zcGFuXG4+XG57I2lmIGNvcGlhYmxlfVxuICAgIDxzcGFuXG4gICAgICAgIGJpbmQ6dGhpcz17dG9vbHRpcFRhcmdldH1cbiAgICAgICAgb25jbGljaz17Y29weUNvbnRlbnR9XG4gICAgICAgIG9ua2V5ZG93bj17Y29weUNvbnRlbnR9XG4gICAgICAgIHJvbGU9XCJidXR0b25cIlxuICAgICAgICB0YWJpbmRleD1cIjBcIlxuICAgICAgICBjbGFzcz17XCJpY29uIGlzLXNtYWxsIGlzLXJpZ2h0IGlzLWNsaWNrYWJsZSBcIiArXG4gICAgICAgICAgICAodG9vbHRpcEFjdGl2ZSA/IGAgJHt0b29sdGlwQ2xhc3N9IGAgOiBcIlwiKSArXG4gICAgICAgICAgICBcIiBpcy12ZXJ0aWNhbC1taWRkbGVcIn0+PGkgY2xhc3M9XCJmYXMgZmEte2NvcHlJY29ufVwiPjwvaT48L3NwYW5cbiAgICA+XG57L2lmfVxueyNpZiBzaG93YWJsZX1cbiAgICA8c3BhblxuICAgICAgICBjbGFzcz1cImljb24gaXMtc21hbGwgaXMtcmlnaHQgaXMtY2xpY2thYmxlIGlzLXZlcnRpY2FsLW1pZGRsZVwiXG4gICAgICAgIG9uY2xpY2s9e3RvZ2dsZVZpZXd9XG4gICAgICAgIG9ua2V5ZG93bj17dG9nZ2xlVmlld31cbiAgICAgICAgcm9sZT1cImJ1dHRvblwiXG4gICAgICAgIHRhYmluZGV4PVwiMFwiPjxpIGNsYXNzPVwiZmFzIGZhLXtoaWRkZW4gPyBzaG93SWNvbiA6IGhpZGVJY29ufVwiPjwvaT48L3NwYW5cbiAgICA+XG57L2lmfVxuIiwiPHNjcmlwdD5cbiAgICBpbXBvcnQgeyBvbk1vdW50IH0gZnJvbSBcInN2ZWx0ZVwiO1xuICAgIGltcG9ydCBub3RDb21tb24gZnJvbSBcIi4uLy4uL2ZyYW1lL2NvbW1vblwiO1xuXG4gICAgbGV0IHNpZGVkID0gJHN0YXRlKGZhbHNlKTtcblxuICAgIC8qKlxuICAgICAqIEB0eXBlZGVmIHtPYmplY3R9IFByb3BzXG4gICAgICogQHByb3BlcnR5IHtzdHJpbmd9IFtpZF0gLSBpZiB3ZSB3YW50IHRvIGFkZHJlc3MgdGhpcyBpbmRpY2F0b3JcbiAgICAgKiBAcHJvcGVydHkge3N0cmluZ30gW3N0YXRlXVxuICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbc2l6ZV1cbiAgICAgKiBAcHJvcGVydHkge2FueX0gW2xhYmVsc11cbiAgICAgKiBAcHJvcGVydHkge3N0cmluZ30gW2NsYXNzZXNdXG4gICAgICogQHByb3BlcnR5IHtzdHJpbmd9IFtwYWRkaW5nXVxuICAgICAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW2JvbGRdXG4gICAgICogQHByb3BlcnR5IHtib29sZWFufSBbcmlnaHRdXG4gICAgICogQHByb3BlcnR5IHtib29sZWFufSBbbGVmdF1cbiAgICAgKiBAcHJvcGVydHkge2Jvb2xlYW59IFt0b3BdXG4gICAgICogQHByb3BlcnR5IHtib29sZWFufSBbYm90dG9tXVxuICAgICAqIEBwcm9wZXJ0eSB7YW55fSBbZXZlbnRzXVxuICAgICAqIEBwcm9wZXJ0eSB7YW55fSBbcmVnaXN0ZXJdIC0gcmVnaXN0ZXIgZXZlbnQgaGFuZGxlcnNcbiAgICAgKiBAcHJvcGVydHkge2FueX0gW29uVXBkYXRlXVxuICAgICAqL1xuXG4gICAgLyoqIEB0eXBlIHtQcm9wc30gKi9cbiAgICBsZXQge1xuICAgICAgICBpZCA9IFwidGFnSWRcIixcbiAgICAgICAgc3RhdGU6IGN1cnJlbnRTdGF0ZSA9ICRiaW5kYWJsZShcImxpZ2h0XCIpLFxuICAgICAgICBzaXplID0gXCJub3JtYWxcIixcbiAgICAgICAgbGFiZWxzID0ge1xuICAgICAgICAgICAgYmxhY2s6IFwiYmxhY2tcIixcbiAgICAgICAgICAgIGRhcms6IFwiZGFya1wiLFxuICAgICAgICAgICAgbGlnaHQ6IFwibGlnaHRcIixcbiAgICAgICAgICAgIHdoaXRlOiBcIndoaXRlXCIsXG4gICAgICAgICAgICBwcmltYXJ5OiBcInByaW1hcnlcIixcbiAgICAgICAgICAgIGxpbms6IFwibGlua1wiLFxuICAgICAgICAgICAgaW5mbzogXCJpbmZvXCIsXG4gICAgICAgICAgICBzdWNjZXNzOiBcInN1Y2Nlc3NcIixcbiAgICAgICAgICAgIHdhcm5pbmc6IFwid2FybmluZ1wiLFxuICAgICAgICAgICAgZGFuZ2VyOiBcImRhbmdlclwiLFxuICAgICAgICB9LFxuICAgICAgICBjbGFzc2VzID0gXCJteC0xXCIsXG4gICAgICAgIHBhZGRpbmcgPSBcIm5vcm1hbFwiLFxuICAgICAgICBib2xkID0gZmFsc2UsXG4gICAgICAgIHJpZ2h0ID0gZmFsc2UsXG4gICAgICAgIGxlZnQgPSBmYWxzZSxcbiAgICAgICAgdG9wID0gZmFsc2UsXG4gICAgICAgIGJvdHRvbSA9IGZhbHNlLFxuICAgICAgICBldmVudHMgPSAkYmluZGFibGUoe30pLFxuICAgICAgICByZWdpc3RlciA9IG5vdENvbW1vbi5yZWdpc3RlcldpZGdldEV2ZW50cy5iaW5kKG5vdENvbW1vbiksXG4gICAgICAgIG9uVXBkYXRlID0gKGRhdGEpID0+IHtcbiAgICAgICAgICAgIGlmIChPYmplY3QuaGFzT3duKGRhdGEsIFwic3RhdGVcIikpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50U3RhdGUgPSBkYXRhLnN0YXRlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgIH0gPSAkcHJvcHMoKTtcblxuICAgIGZ1bmN0aW9uIGdldFN0YW5kYXJ0VXBkYXRlRXZlbnROYW1lKCkge1xuICAgICAgICByZXR1cm4gYGluZGljYXRvci0ke2lkfTp1cGRhdGVgO1xuICAgIH1cblxuICAgIG9uTW91bnQoKCkgPT4ge1xuICAgICAgICBpZiAoIU9iamVjdC5oYXNPd24oZXZlbnRzLCBnZXRTdGFuZGFydFVwZGF0ZUV2ZW50TmFtZSgpKSkge1xuICAgICAgICAgICAgZXZlbnRzW2dldFN0YW5kYXJ0VXBkYXRlRXZlbnROYW1lKCldID0gb25VcGRhdGU7XG4gICAgICAgIH1cbiAgICAgICAgcmVnaXN0ZXIoZXZlbnRzKTtcbiAgICB9KTtcblxuICAgICRlZmZlY3QoKCkgPT4ge1xuICAgICAgICBzaWRlZCA9IHJpZ2h0IHx8IGxlZnQgfHwgdG9wIHx8IGJvdHRvbTtcbiAgICB9KTtcbjwvc2NyaXB0PlxuXG48c3BhblxuICAgIGNsYXNzPVwidGFnXG5pcy17c2l6ZX1cbntib2xkID8gJ2hhcy10ZXh0LXdlaWdodC1ib2xkJyA6ICcnfVxue3BhZGRpbmcgIT09ICdub3JtYWwnID8gYGlzLXBhZGRlZC0ke3BhZGRpbmd9YCA6ICcnfVxue3NpZGVkID8gJ2lzLXNpZGVkJyA6ICcnfVxue3JpZ2h0ID8gJ2lzLXNpZGVkLXJpZ2h0JyA6ICcnfVxue2xlZnQgPyAnaXMtc2lkZWQtbGVmdCcgOiAnJ31cbnt0b3AgPyAnaXMtc2lkZWQtdG9wJyA6ICcnfVxue2JvdHRvbSA/ICdpcy1zaWRlZC1ib3R0b20nIDogJyd9XG4gIGlzLXtjdXJyZW50U3RhdGV9IHtjbGFzc2VzfVxuICBcIj57bGFiZWxzW2N1cnJlbnRTdGF0ZV19PC9zcGFuXG4+XG4iLCI8c2NyaXB0PlxuICAgIGltcG9ydCBcImJ1bG1hLXBhZ2Vsb2FkZXJcIjtcbiAgICBpbXBvcnQgeyBMT0NBTEUgfSBmcm9tIFwiLi4vLi4vbG9jYWxlXCI7XG4gICAgXG4gICAgLy9oaWRkZW4gLSBubyBsb2FkZXJcbiAgICAvL2NvbnRhaW5lciAtIHBhcmVudCBjb250YWluZXIgb2YgZm9ybVxuICAgIFxuXG4gICAgLyoqXG4gICAgICogQHR5cGVkZWYge09iamVjdH0gUHJvcHNcbiAgICAgKiBAcHJvcGVydHkge2Jvb2xlYW59IFtsb2FkaW5nXSAtIHN0YXRlIGlmIGZvcm0gbG9hZGluZ1xuICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbc2l6ZV0gLSBwYWdlIC0gd2hvbGUgcGFnZVxuICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbdGl0bGVdXG4gICAgICovXG5cbiAgICAvKiogQHR5cGUge1Byb3BzfSAqL1xuICAgIGxldCB7IGxvYWRpbmcgPSBmYWxzZSwgc2l6ZSA9IFwiY29udGFpbmVyXCIsIHRpdGxlID0gXCJXYWl0aW5nLi4uXCIgfSA9ICRwcm9wcygpO1xuPC9zY3JpcHQ+XG5cbnsjaWYgc2l6ZSAhPT0gXCJoaWRkZW5cIn1cbiAgICA8ZGl2XG4gICAgICAgIGNsYXNzPVwie3NpemUgPT09ICdwYWdlJyA/ICdwYWdlbG9hZGVyJyA6ICdjb250YWluZXJsb2FkZXInfSB7bG9hZGluZ1xuICAgICAgICAgICAgPyAnaXMtYWN0aXZlJ1xuICAgICAgICAgICAgOiAnJ31cIlxuICAgID5cbiAgICAgICAgPHNwYW4gY2xhc3M9XCJ0aXRsZVwiPnskTE9DQUxFW3RpdGxlXX08L3NwYW4+XG4gICAgPC9kaXY+XG57L2lmfVxuIiwiPHNjcmlwdD5cbiAgICBpbXBvcnQgeyBMT0NBTEUgfSBmcm9tIFwiLi4vLi4vbG9jYWxlXCI7XG4gICAgbGV0IHsgdmFsdWUsIHRpdGxlLCBzZWxlY3RlZCB9ID0gJHByb3BzKCk7XG48L3NjcmlwdD5cblxuPG9wdGlvbiB7dmFsdWV9IHtzZWxlY3RlZH0+eyRMT0NBTEVbdGl0bGVdfTwvb3B0aW9uPiIsIjxzY3JpcHQ+XG4gICAgaW1wb3J0IHsgTE9DQUxFIH0gZnJvbSBcIi4uLy4uL2xvY2FsZVwiO1xuICAgIGltcG9ydCBVSVNlbGVjdE9wdGlvbiBmcm9tIFwiLi91aS5zZWxlY3Qub3B0aW9uLnN2ZWx0ZVwiO1xuXG4gICAgaW1wb3J0IFVJQ29tbW9uIGZyb20gXCIuLi9jb21tb25cIjtcbiAgICBpbXBvcnQgbm90Q29tbW9uIGZyb20gXCIuLi8uLi9mcmFtZS9jb21tb25cIjtcblxuICAgIC8qKlxuICAgICAqIEB0eXBlZGVmIHtPYmplY3R9IFByb3BzXG4gICAgICogQHByb3BlcnR5IHtzdHJpbmd9IFt2YWx1ZV1cbiAgICAgKiBAcHJvcGVydHkge2FueX0gICAgICBbdmFyaWFudHNdXG4gICAgICogQHByb3BlcnR5IHtzdHJpbmd9IFtwbGFjZWhvbGRlcl1cbiAgICAgKiBAcHJvcGVydHkge3N0cmluZ30gW2VtcHR5VmFsdWVUaXRsZV1cbiAgICAgKiBAcHJvcGVydHkge3N0cmluZ30gW2ZpZWxkbmFtZV1cbiAgICAgKiBAcHJvcGVydHkge2Jvb2xlYW59IFtyZXF1aXJlZF1cbiAgICAgKiBAcHJvcGVydHkge2Jvb2xlYW59IFtyZWFkb25seV1cbiAgICAgKiBAcHJvcGVydHkge2Jvb2xlYW59IFttdWx0aXBsZV1cbiAgICAgKiBAcHJvcGVydHkge251bWJlcn0gW3NpemVdXG4gICAgICogQHByb3BlcnR5IHtib29sZWFufSBbdmFsaWRdXG4gICAgICovXG5cbiAgICAvKiogQHR5cGUge1Byb3BzfSAqL1xuICAgIGxldCB7XG4gICAgICAgIHZhbHVlID0gJGJpbmRhYmxlKFwiXCIpLFxuICAgICAgICB2YXJpYW50cyA9IFtdLFxuICAgICAgICBwbGFjZWhvbGRlciA9IFwiXCIsXG4gICAgICAgIGVtcHR5VmFsdWVUaXRsZSA9IFwiXCIsXG4gICAgICAgIGZpZWxkbmFtZSA9IFwic2VsZWN0XCIsXG4gICAgICAgIHJlcXVpcmVkID0gdHJ1ZSxcbiAgICAgICAgcmVhZG9ubHkgPSBmYWxzZSxcbiAgICAgICAgbXVsdGlwbGUgPSBmYWxzZSxcbiAgICAgICAgc2l6ZSA9IDgsXG4gICAgICAgIHZhbGlkID0gdHJ1ZSxcbiAgICAgICAgY2xhc3M6IGNsYXNzZXMgPSBcIlwiLFxuICAgICAgICBvbmNoYW5nZSA9ICgpID0+IHRydWUsXG4gICAgICAgIC4uLm90aGVyc1xuICAgIH0gPSAkcHJvcHMoKTtcblxuICAgIGxldCBzZWxlY3RlZFZhcmlhbnRzID0gJHN0YXRlKFtdKTtcblxuICAgIGZ1bmN0aW9uIGZpbHRlclNlbGVjdGVkVmFyaWFudHModmFyaWFudCkge1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkgJiYgbXVsdGlwbGUpIHtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZS5pbmRleE9mKHZhcmlhbnQuaWQpID4gLTE7XG4gICAgICAgIH0gZWxzZSBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZSA9PSB2YXJpYW50LmlkO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgbGV0IGxhc3RDaGFuZ2U7XG5cbiAgICBmdW5jdGlvbiBvbkJsdXIoZXYpIHtcbiAgICAgICAgbGV0IGRhdGEgPSB7XG4gICAgICAgICAgICBmaWVsZDogZmllbGRuYW1lLFxuICAgICAgICAgICAgdmFsdWU6IGV2LmN1cnJlbnRUYXJnZXQudmFsdWUsXG4gICAgICAgIH07XG4gICAgICAgIGlmIChsYXN0Q2hhbmdlID09PSBkYXRhLnZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICBBcnJheS5pc0FycmF5KGRhdGEudmFsdWUpICYmXG4gICAgICAgICAgICAgICAgbm90Q29tbW9uLmNvbXBhcmVUd29BcnJheXMobGFzdENoYW5nZSwgZGF0YS52YWx1ZSlcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChtdWx0aXBsZSkge1xuICAgICAgICAgICAgdmFsdWUgPSBBcnJheS5mcm9tKGV2LnRhcmdldC5zZWxlY3RlZE9wdGlvbnMpLm1hcCgoZWwpID0+IGVsLnZhbHVlKTtcbiAgICAgICAgICAgIGlmICh2YWx1ZS5pbmRleE9mKFVJQ29tbW9uLkNMRUFSX01BQ1JPKSA+IC0xKSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSBbXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRhdGEudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChkYXRhLnZhbHVlID09PSBVSUNvbW1vbi5DTEVBUl9NQUNSTykge1xuICAgICAgICAgICAgICAgIHZhbHVlID0gXCJcIjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSBkYXRhLnZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgb25jaGFuZ2UoZGF0YSk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG9uSW5wdXQoZXYpIHtcbiAgICAgICAgbGV0IGRhdGEgPSB7XG4gICAgICAgICAgICBmaWVsZDogZmllbGRuYW1lLFxuICAgICAgICAgICAgdmFsdWU6IGV2LmN1cnJlbnRUYXJnZXQudmFsdWUsXG4gICAgICAgIH07XG4gICAgICAgIGlmIChtdWx0aXBsZSkge1xuICAgICAgICAgICAgdmFsdWUgPSBBcnJheS5mcm9tKGV2LnRhcmdldC5zZWxlY3RlZE9wdGlvbnMpLm1hcCgoZWwpID0+IGVsLnZhbHVlKTtcbiAgICAgICAgICAgIGlmICh2YWx1ZS5pbmRleE9mKFVJQ29tbW9uLkNMRUFSX01BQ1JPKSA+IC0xKSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSBbXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRhdGEudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChkYXRhLnZhbHVlID09PSBVSUNvbW1vbi5DTEVBUl9NQUNSTykge1xuICAgICAgICAgICAgICAgIHZhbHVlID0gXCJcIjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSBkYXRhLnZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgbGFzdENoYW5nZSA9IGRhdGEudmFsdWU7XG4gICAgICAgIG9uY2hhbmdlKGRhdGEpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBsZXQgbXVsdGlwbGVDbGFzcyA9ICRkZXJpdmVkKG11bHRpcGxlID8gXCIgaXMtbXVsdGlwbGUgXCIgOiBcIlwiKTtcbiAgICAkZWZmZWN0KCgpID0+IHtcbiAgICAgICAgdmFsdWU7XG4gICAgICAgIHNlbGVjdGVkVmFyaWFudHMgPSBBcnJheS5pc0FycmF5KHZhcmlhbnRzKVxuICAgICAgICAgICAgPyB2YXJpYW50cy5maWx0ZXIoZmlsdGVyU2VsZWN0ZWRWYXJpYW50cylcbiAgICAgICAgICAgIDogW107XG4gICAgfSk7XG5cbiAgICBsZXQgaW52YWxpZCA9ICRkZXJpdmVkKCF2YWxpZCk7XG48L3NjcmlwdD5cblxueyNpZiByZWFkb25seX1cbiAgICB7I2lmIHZhbHVlfVxuICAgICAgICB7I2VhY2ggc2VsZWN0ZWRWYXJpYW50cyBhcyBzZWxlY3RlZFZhcmlhbnR9XG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cIm1yLTJcIj57JExPQ0FMRVtzZWxlY3RlZFZhcmlhbnQudGl0bGVdfTwvc3Bhbj5cbiAgICAgICAgey9lYWNofVxuICAgIHs6ZWxzZX1cbiAgICAgICAgPHNwYW4gY2xhc3M9XCJtci0yXCI+eyRMT0NBTEVbZW1wdHlWYWx1ZVRpdGxlXX08L3NwYW4+XG4gICAgey9pZn1cbns6ZWxzZX1cbiAgICA8ZGl2IGNsYXNzPVwic2VsZWN0IHtjbGFzc2VzfSB7bXVsdGlwbGVDbGFzc31cIj5cbiAgICAgICAgPHNlbGVjdFxuICAgICAgICAgICAgaWQ9XCJmb3JtLWZpZWxkLXNlbGVjdC17ZmllbGRuYW1lfVwiXG4gICAgICAgICAgICBuYW1lPXtmaWVsZG5hbWV9XG4gICAgICAgICAgICBvbmJsdXI9e29uQmx1cn1cbiAgICAgICAgICAgIG9uaW5wdXQ9e29uSW5wdXR9XG4gICAgICAgICAgICB7cmVhZG9ubHl9XG4gICAgICAgICAgICB7cmVxdWlyZWR9XG4gICAgICAgICAgICB7bXVsdGlwbGV9XG4gICAgICAgICAgICB7aW52YWxpZH1cbiAgICAgICAgICAgIHNpemU9e211bHRpcGxlID8gc2l6ZSA6IGZhbHNlfVxuICAgICAgICAgICAgey4uLm90aGVyc31cbiAgICAgICAgPlxuICAgICAgICAgICAgeyNpZiBwbGFjZWhvbGRlci5sZW5ndGggPiAwfVxuICAgICAgICAgICAgICAgIHsjaWYgdmFsdWV9XG4gICAgICAgICAgICAgICAgICAgIDxVSVNlbGVjdE9wdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e1VJQ29tbW9uLkNMRUFSX01BQ1JPfVxuICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU9e3BsYWNlaG9sZGVyfVxuICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgIHs6ZWxzZX1cbiAgICAgICAgICAgICAgICAgICAgPFVJU2VsZWN0T3B0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17VUlDb21tb24uQ0xFQVJfTUFDUk99XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZD1cInNlbGVjdGVkXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlPXtwbGFjZWhvbGRlcn1cbiAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICB7L2lmfVxuICAgICAgICAgICAgey9pZn1cbiAgICAgICAgICAgIHsjZWFjaCB2YXJpYW50cyBhcyB2YXJpYW50fVxuICAgICAgICAgICAgICAgIHsjaWYgbXVsdGlwbGV9XG4gICAgICAgICAgICAgICAgICAgIDxVSVNlbGVjdE9wdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e3ZhcmlhbnQuaWR9XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZD17dmFsdWUgJiYgdmFsdWUuaW5kZXhPZih2YXJpYW50LmlkKSA+IC0xfVxuICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU9e3ZhcmlhbnQudGl0bGV9XG4gICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgezplbHNlfVxuICAgICAgICAgICAgICAgICAgICA8VUlTZWxlY3RPcHRpb25cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXt2YXJpYW50LmlkfVxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWQ9e3ZhbHVlID09IHZhcmlhbnQuaWR9XG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZT17dmFyaWFudC50aXRsZX1cbiAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICB7L2lmfVxuICAgICAgICAgICAgey9lYWNofVxuICAgICAgICA8L3NlbGVjdD5cbiAgICA8L2Rpdj5cbnsvaWZ9XG4iLCI8c2NyaXB0PlxuICAgIGltcG9ydCB7IExPQ0FMRSB9IGZyb20gXCIuLi8uLi9sb2NhbGVcIjtcblxuICAgIC8qKlxuICAgICAqIEB0eXBlZGVmIHtPYmplY3R9IFByb3BzXG4gICAgICogQHByb3BlcnR5IHtzdHJpbmd9IFt0aXRsZV1cbiAgICAgKiBAcHJvcGVydHkge2Jvb2xlYW59IFtsaWdodF1cbiAgICAgKiBAcHJvcGVydHkge2Jvb2xlYW59IFtsb2FkaW5nXVxuICAgICAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW3JhaXNlZF1cbiAgICAgKiBAcHJvcGVydHkge2Jvb2xlYW59IFtvdXRsaW5lZF1cbiAgICAgKiBAcHJvcGVydHkge2Jvb2xlYW59IFtpbnZlcnRlZF1cbiAgICAgKiBAcHJvcGVydHkge2Jvb2xlYW59IFtyb3VuZGVkXVxuICAgICAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW2Rpc2FibGVkXVxuICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbc3RhdGVdXG4gICAgICogQHByb3BlcnR5IHtzdHJpbmd9IFt0eXBlXVxuICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbY29sb3JdXG4gICAgICogQHByb3BlcnR5IHtzdHJpbmd9IFtzaXplXVxuICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbY2xhc3NdXG4gICAgICogQHByb3BlcnR5IHtib29sZWFufSBbaWNvbl1cbiAgICAgKiBAcHJvcGVydHkge3N0cmluZ30gW2ljb25TaWRlXVxuICAgICAqIEBwcm9wZXJ0eSB7ZnVuY3Rpb259IFthY3Rpb25dXG4gICAgICogQHByb3BlcnR5IHtmdW5jdGlvbn0gW29uY2xpY2tdXG4gICAgICogQHByb3BlcnR5IHthbnl9IHZhbHVlXG4gICAgICogQHByb3BlcnR5IHtpbXBvcnQoJ3N2ZWx0ZScpLlNuaXBwZXR9IFtjaGlsZHJlbl1cbiAgICAgKi9cblxuICAgIC8qKiBAdHlwZSB7UHJvcHN9ICovXG4gICAgbGV0IHtcbiAgICAgICAgdGl0bGUgPSBcIlwiLFxuICAgICAgICBsaWdodCA9IGZhbHNlLFxuICAgICAgICBsb2FkaW5nID0gZmFsc2UsXG4gICAgICAgIHJhaXNlZCA9IGZhbHNlLFxuICAgICAgICBvdXRsaW5lZCA9IGZhbHNlLFxuICAgICAgICBpbnZlcnRlZCA9IGZhbHNlLFxuICAgICAgICByb3VuZGVkID0gZmFsc2UsXG4gICAgICAgIGRpc2FibGVkID0gZmFsc2UsXG4gICAgICAgIHN0YXRlID0gXCJcIixcbiAgICAgICAgdHlwZSA9IFwiXCIsXG4gICAgICAgIGNvbG9yID0gXCJcIixcbiAgICAgICAgc2l6ZSA9IFwiXCIsXG4gICAgICAgIGNsYXNzOiBjbGFzc2VzID0gXCJcIixcbiAgICAgICAgaWNvbiA9IGZhbHNlLFxuICAgICAgICBpY29uU2lkZSA9IFwicmlnaHRcIixcbiAgICAgICAgb25jbGljayA9ICgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9LFxuICAgICAgICBhY3Rpb24gPSAoKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSxcbiAgICAgICAgdmFsdWUsXG4gICAgICAgIGNoaWxkcmVuLFxuICAgIH0gPSAkcHJvcHMoKTtcblxuICAgIGZ1bmN0aW9uIG9uQ2xpY2soZXZlbnQpIHtcbiAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIG9uY2xpY2sgJiYgb25jbGljayh7IGV2ZW50LCB2YWx1ZSB9KTtcbiAgICAgICAgcmV0dXJuIGFjdGlvbiAmJiBhY3Rpb24oZXZlbnQsIHZhbHVlKTtcbiAgICB9XG48L3NjcmlwdD5cblxuPGJ1dHRvblxuICAgIG9uY2xpY2s9e29uQ2xpY2t9XG4gICAge2Rpc2FibGVkfVxuICAgIHR5cGU9e3R5cGUgPyB0eXBlIDogXCJcIn1cbiAgICBjbGFzcz1cIlxuICBidXR0b25cbiAge2NsYXNzZXN9XG4gIHtzdGF0ZSA/IGBpcy0ke3N0YXRlfWAgOiAnJ31cbiAge2ludmVydGVkID8gYGlzLWludmVydGVkYCA6ICcnfVxuICB7b3V0bGluZWQgPyBgaXMtb3V0bGluZWRgIDogJyd9XG4gIHtyYWlzZWQgPyBgaXMtcmFpc2VkYCA6ICcnfVxuICB7cm91bmRlZCA/IGBpcy1yb3VuZGVkYCA6ICcnfVxuICB7bGlnaHQgPyBgaXMtbGlnaHRgIDogJyd9XG4gIHtsb2FkaW5nID8gYGlzLWxvYWRpbmdgIDogJyd9XG4gIHtjb2xvciA/IGBpcy0ke2NvbG9yfWAgOiAnJ31cbiAge3NpemUgPyBgaXMtJHtzaXplfWAgOiAnJ31cbiAgXCJcbj5cbiAgICB7I2lmIGNoaWxkcmVufXtAcmVuZGVyIGNoaWxkcmVuKCl9ezplbHNlIGlmIGljb259XG4gICAgICAgIHsjaWYgaWNvblNpZGUgPT09IFwibGVmdFwifVxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJpY29uXCJcbiAgICAgICAgICAgICAgICA+PGkgY2xhc3M9XCJmYXMgZmEte2ljb259IHtzaXplID8gYGlzLSR7c2l6ZX1gIDogJyd9XCI+PC9pPjwvc3BhblxuICAgICAgICAgICAgPlxuICAgICAgICB7L2lmfVxuICAgICAgICB7I2lmIHRpdGxlfVxuICAgICAgICAgICAgPHNwYW4+eyRMT0NBTEVbdGl0bGVdfTwvc3Bhbj5cbiAgICAgICAgey9pZn1cbiAgICAgICAgeyNpZiBpY29uU2lkZSA9PT0gXCJyaWdodFwifVxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJpY29uXCJcbiAgICAgICAgICAgICAgICA+PGkgY2xhc3M9XCJmYXMgZmEte2ljb259IHtzaXplID8gYGlzLSR7c2l6ZX1gIDogJyd9XCI+PC9pPjwvc3BhblxuICAgICAgICAgICAgPlxuICAgICAgICB7L2lmfVxuICAgIHs6ZWxzZX1cbiAgICAgICAgeyRMT0NBTEVbdGl0bGVdfVxuICAgIHsvaWZ9XG48L2J1dHRvbj5cbiIsIjxzY3JpcHQ+XG4gICAgaW1wb3J0IFVJQnV0dG9uIGZyb20gXCIuL3VpLmJ1dHRvbi5zdmVsdGVcIjtcblxuICAgIC8qKlxuICAgICAqIEB0eXBlZGVmIHtPYmplY3R9IFByb3BzXG4gICAgICogQHByb3BlcnR5IHtBcnJheTxvYmplY3Q+fSBbdmFsdWVzID0gW11dXG4gICAgICogQHByb3BlcnR5IHtib29sZWFufSBbY2VudGVyZWQgPSBmYWxzZV1cbiAgICAgKiBAcHJvcGVydHkge2Jvb2xlYW59IFtyaWdodCA9IGZhbHNlXVxuICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbY2xhc3NlcyA9ICcnXVxuICAgICAqIEBwcm9wZXJ0eSB7aW1wb3J0KCdzdmVsdGUnKS5Db21wb25lbnR9IFtidXR0b25Db21wb25lbnQgPSBVSUJ1dHRvbl1cbiAgICAgKiBAcHJvcGVydHkge2ltcG9ydCgnLi4vZXZlbnRzLnR5cGVzJykuVUlFdmVudElucHV0Q2hhbmdlQ2FsbGJhY2t9IFthY3Rpb24gPSAoKT0+dHJ1ZV1cbiAgICAgKiBAcHJvcGVydHkge2ltcG9ydCgnLi4vZXZlbnRzLnR5cGVzJykuVUlFdmVudENhbGxiYWNrfSBbb25jbGljayA9ICgpPT50cnVlXVxuICAgICAqL1xuXG4gICAgLyoqIEB0eXBlIHtQcm9wc30gKi9cbiAgICBsZXQge1xuICAgICAgICB2YWx1ZXMgPSBbXSxcbiAgICAgICAgY2VudGVyZWQgPSBmYWxzZSxcbiAgICAgICAgcmlnaHQgPSBmYWxzZSxcbiAgICAgICAgY2xhc3NlcyA9IFwiXCIsXG4gICAgICAgIGJ1dHRvbkNvbXBvbmVudDogU3ZlbHRlQ29tcG9uZW50ID0gVUlCdXR0b24sXG4gICAgICAgIGFjdGlvbiA9ICgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9LFxuICAgICAgICBvbmNsaWNrID0gKCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0sXG4gICAgfSA9ICRwcm9wcygpO1xuXG4gICAgbGV0IF92YWx1ZXMgPSAkc3RhdGUoW10pO1xuXG4gICAgJGVmZmVjdCgoKSA9PiB7XG4gICAgICAgIF92YWx1ZXMgPSB2YWx1ZXMubWFwKChpdG0pID0+IHtcbiAgICAgICAgICAgIGlmIChpc05hTihpdG0uaWQpKSB7XG4gICAgICAgICAgICAgICAgaXRtLmlkID0gTWF0aC5yb3VuZChNYXRoLnJhbmRvbSgpICogMTAwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBpdG07XG4gICAgICAgIH0pO1xuICAgIH0pO1xuPC9zY3JpcHQ+XG5cbjxkaXZcbiAgICBjbGFzcz1cImJ1dHRvbnMgaGFzLWFkZG9ucyB7Y2VudGVyZWQgPyAnaXMtY2VudGVyZWQnIDogJyd9IHtyaWdodFxuICAgICAgICA/ICdpcy1yaWdodCdcbiAgICAgICAgOiAnJ30ge2NsYXNzZXN9XCJcbj5cbiAgICB7I2VhY2ggX3ZhbHVlcyBhcyBpdGVtIChpdGVtLmlkKX1cbiAgICAgICAgPFN2ZWx0ZUNvbXBvbmVudCB7YWN0aW9ufSB7b25jbGlja30gey4uLml0ZW19IGJpbmQ6dmFsdWU9e2l0ZW0udmFsdWV9IC8+XG4gICAgey9lYWNofVxuPC9kaXY+XG4iLCI8c2NyaXB0PlxuICAgIGltcG9ydCBVSUJ1dHRvbnMgZnJvbSBcIi4vdWkuYnV0dG9ucy5zdmVsdGVcIjtcblxuICAgIC8qKlxuICAgICAqIEB0eXBlZGVmIHtPYmplY3R9IFByb3BzXG4gICAgICogQHByb3BlcnR5IHtzdHJpbmd9IFtjbGFzc2VzXVxuICAgICAqIEBwcm9wZXJ0eSB7YW55fSBbbGVmdF1cbiAgICAgKiBAcHJvcGVydHkge2FueX0gW2NlbnRlcl1cbiAgICAgKiBAcHJvcGVydHkge2FueX0gW3JpZ2h0XVxuICAgICAqL1xuXG4gICAgLyoqIEB0eXBlIHtQcm9wc30gKi9cbiAgICBsZXQge1xuICAgICAgICBjbGFzc2VzID0gXCJcIixcbiAgICAgICAgbGVmdCA9IFtdLFxuICAgICAgICBjZW50ZXIgPSBbXSxcbiAgICAgICAgcmlnaHQgPSBbXVxuICAgIH0gPSAkcHJvcHMoKTtcbjwvc2NyaXB0PlxuXG48ZGl2IGNsYXNzPVwiY29sdW1ucyB7Y2xhc3Nlc31cIj5cbiAgICA8ZGl2IGNsYXNzPVwiY29sdW1uXCI+XG4gICAgICAgIDxVSUJ1dHRvbnMgdmFsdWVzPXtsZWZ0fT48L1VJQnV0dG9ucz5cbiAgICA8L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPVwiY29sdW1uXCI+XG4gICAgICAgIDxVSUJ1dHRvbnMgdmFsdWVzPXtjZW50ZXJ9IGNlbnRlcmVkPXt0cnVlfT48L1VJQnV0dG9ucz5cbiAgICA8L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPVwiY29sdW1uXCI+XG4gICAgICAgIDxVSUJ1dHRvbnMgdmFsdWVzPXtyaWdodH0gcmlnaHQ9e3RydWV9PjwvVUlCdXR0b25zPlxuICAgIDwvZGl2PlxuPC9kaXY+XG4iLCI8c2NyaXB0PlxuICAgIGltcG9ydCBVSUJ1dHRvbiBmcm9tIFwiLi91aS5idXR0b24uc3ZlbHRlXCI7XG5cbiAgICAvKipcbiAgICAgKiBAdHlwZWRlZiB7T2JqZWN0fSBQcm9wc1xuICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbdGl0bGVdXG4gICAgICogQHByb3BlcnR5IHtib29sZWFufSBbbGlnaHRdXG4gICAgICogQHByb3BlcnR5IHtib29sZWFufSBbbG9hZGluZ11cbiAgICAgKiBAcHJvcGVydHkge2Jvb2xlYW59IFtyYWlzZWRdXG4gICAgICogQHByb3BlcnR5IHtib29sZWFufSBbb3V0bGluZWRdXG4gICAgICogQHByb3BlcnR5IHtib29sZWFufSBbaW52ZXJ0ZWRdXG4gICAgICogQHByb3BlcnR5IHtib29sZWFufSBbcm91bmRlZF1cbiAgICAgKiBAcHJvcGVydHkge2Jvb2xlYW59IFtkaXNhYmxlZF1cbiAgICAgKiBAcHJvcGVydHkge3N0cmluZ30gW3N0YXRlXVxuICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbdHlwZV1cbiAgICAgKiBAcHJvcGVydHkge3N0cmluZ30gW2NvbG9yXVxuICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbc2l6ZV1cbiAgICAgKiBAcHJvcGVydHkge3N0cmluZ30gW2NsYXNzZXNdXG4gICAgICogQHByb3BlcnR5IHtib29sZWFufSBbaWNvbl1cbiAgICAgKiBAcHJvcGVydHkge3N0cmluZ30gW2ljb25TaWRlXVxuICAgICAqIEBwcm9wZXJ0eSB7YW55fSBbdWlPZmZdXG4gICAgICogQHByb3BlcnR5IHthbnl9IFt1aU9uXVxuICAgICAqIEBwcm9wZXJ0eSB7YW55fSBbYWN0aW9uXVxuICAgICAqIEBwcm9wZXJ0eSB7YW55fSB2YWx1ZVxuICAgICAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW3NlbGVjdGVkXVxuICAgICAqL1xuXG4gICAgLyoqIEB0eXBlIHtQcm9wc30gKi9cbiAgICBsZXQge1xuICAgICAgICB0aXRsZSA9IFwiXCIsXG4gICAgICAgIGxpZ2h0ID0gZmFsc2UsXG4gICAgICAgIGxvYWRpbmcgPSBmYWxzZSxcbiAgICAgICAgcmFpc2VkID0gZmFsc2UsXG4gICAgICAgIG91dGxpbmVkID0gZmFsc2UsXG4gICAgICAgIGludmVydGVkID0gZmFsc2UsXG4gICAgICAgIHJvdW5kZWQgPSBmYWxzZSxcbiAgICAgICAgZGlzYWJsZWQgPSBmYWxzZSxcbiAgICAgICAgc3RhdGU6IGFjdGl2ZVN0YXRlID0gXCJcIixcbiAgICAgICAgdHlwZSA9IFwiXCIsXG4gICAgICAgIGNvbG9yID0gXCJcIixcbiAgICAgICAgc2l6ZSA9IFwiXCIsXG4gICAgICAgIGNsYXNzOiBjbGFzc2VzID0gXCJcIixcbiAgICAgICAgaWNvbiA9IGZhbHNlLFxuICAgICAgICBpY29uU2lkZSA9IFwicmlnaHRcIixcbiAgICAgICAgdWlPZmYgPSAoKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGNvbG9yOiBcIlwiLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAgdWlPbiA9ICgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgY29sb3I6IFwic3VjY2Vzc1wiLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAgYWN0aW9uID0gKCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuICFzZWxlY3RlZDtcbiAgICAgICAgfSxcbiAgICAgICAgb25jbGljayA9ICgpID0+IHt9LFxuICAgICAgICBvbmNoYW5nZSA9ICgpID0+IHt9LFxuICAgICAgICB2YWx1ZSxcbiAgICAgICAgc2VsZWN0ZWQgPSBmYWxzZSxcbiAgICB9ID0gJHByb3BzKCk7XG5cbiAgICBsZXQgY2hpbGRQcm9wcyA9ICRzdGF0ZSh7XG4gICAgICAgIHRpdGxlLFxuICAgICAgICBsaWdodCxcbiAgICAgICAgbG9hZGluZyxcbiAgICAgICAgcmFpc2VkLFxuICAgICAgICBvdXRsaW5lZCxcbiAgICAgICAgaW52ZXJ0ZWQsXG4gICAgICAgIHJvdW5kZWQsXG4gICAgICAgIGRpc2FibGVkLFxuICAgICAgICB0eXBlLFxuICAgICAgICBjb2xvcixcbiAgICAgICAgc2l6ZSxcbiAgICAgICAgY2xhc3M6IGNsYXNzZXMsXG4gICAgICAgIGljb24sXG4gICAgICAgIGljb25TaWRlLFxuICAgICAgICB2YWx1ZSxcbiAgICB9KTtcblxuICAgIGZ1bmN0aW9uIG9uQ2xpY2soZXZlbnQpIHtcbiAgICAgICAgc2VsZWN0ZWQgPSBhY3Rpb24oZXZlbnQsIHZhbHVlLCBzZWxlY3RlZCk7XG4gICAgICAgIG9uY2xpY2soeyB2YWx1ZSwgc2VsZWN0ZWQgfSk7XG4gICAgICAgIG9uQ2hhbmdlKCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gb25DaGFuZ2UoKSB7XG4gICAgICAgIG9uY2hhbmdlKHtcbiAgICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgICAgc2VsZWN0ZWQsXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGxldCB1aUVsZW1lbnQgPSAkc3RhdGUoKTtcblxuICAgICRlZmZlY3QoKCkgPT4ge1xuICAgICAgICBpZiAodWlFbGVtZW50KSB7XG4gICAgICAgICAgICBjb25zdCBwcm9wc0NoYW5nZXMgPSBzZWxlY3RlZCA/IHVpT24oKSA6IHVpT2ZmKCk7XG4gICAgICAgICAgICBPYmplY3Qua2V5cyhwcm9wc0NoYW5nZXMpLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgICAgICAgICAgIGNoaWxkUHJvcHNba2V5XSA9IHByb3BzQ2hhbmdlc1trZXldO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9KTtcbjwvc2NyaXB0PlxuXG57QGRlYnVnIHVpRWxlbWVudCwgY29sb3IsIHNlbGVjdGVkfVxuXG48VUlCdXR0b25cbiAgICBiaW5kOnRoaXM9e3VpRWxlbWVudH1cbiAgICB7Li4uY2hpbGRQcm9wc31cbiAgICBzdGF0ZT17YWN0aXZlU3RhdGV9XG4gICAgb25jbGljaz17b25DbGlja31cbj48L1VJQnV0dG9uPlxuIiwiPHNjcmlwdD5cbiAgICBpbXBvcnQgeyBvbk1vdW50IH0gZnJvbSBcInN2ZWx0ZVwiO1xuXG4gICAgaW1wb3J0IFVJQnV0dG9uU3dpdGNoIGZyb20gXCIuL3VpLmJ1dHRvbi5zd2l0Y2guc3ZlbHRlXCI7XG5cbiAgICBjb25zdCBzZWxlY3RIaXN0b3J5ID0gW107XG5cbiAgICBleHBvcnQgZnVuY3Rpb24gc2VsZWN0QWxsKCkge1xuICAgICAgICB2YWx1ZXMuZm9yRWFjaCgoaXRtKSA9PiB7XG4gICAgICAgICAgICBpdG0uc2VsZWN0ZWQgPSB0cnVlO1xuICAgICAgICB9KTtcbiAgICAgICAgdmFsdWVzID0gdmFsdWVzO1xuICAgIH1cblxuICAgIGV4cG9ydCBmdW5jdGlvbiBkZXNlbGVjdEFsbCgpIHtcbiAgICAgICAgdmFsdWVzLmZvckVhY2goKGl0bSkgPT4ge1xuICAgICAgICAgICAgaXRtLnNlbGVjdGVkID0gZmFsc2U7XG4gICAgICAgIH0pO1xuICAgICAgICB2YWx1ZXMgPSB2YWx1ZXM7XG4gICAgfVxuXG4gICAgb25Nb3VudCgoKSA9PiB7XG4gICAgICAgIGlmIChtaW4pIHtcbiAgICAgICAgICAgIHNlbGVjdFVwVG9NaW4oMCwgLTEpO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICBleHBvcnQgZnVuY3Rpb24gYWRkVG9IaXN0b3J5KGlkKSB7XG4gICAgICAgIGlmIChzZWxlY3RIaXN0b3J5LmluY2x1ZGVzKGlkKSkge1xuICAgICAgICAgICAgc2VsZWN0SGlzdG9yeS5zcGxpY2Uoc2VsZWN0SGlzdG9yeS5pbmRleE9mKGlkKSwgMSk7XG4gICAgICAgIH1cbiAgICAgICAgc2VsZWN0SGlzdG9yeS5wdXNoKGlkKTtcbiAgICB9XG5cbiAgICBleHBvcnQgZnVuY3Rpb24gY291bnRTZWxlY3RlZCgpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlcy5maWx0ZXIoKGJ0bikgPT4gYnRuLnNlbGVjdGVkKS5sZW5ndGg7XG4gICAgfVxuXG4gICAgZXhwb3J0IGZ1bmN0aW9uIHRvZ2dsZUZpcnN0U3VpdGVkKHRvVmFsdWUpIHtcbiAgICAgICAgY29uc3QgaW5kZXggPSB2YWx1ZXMuZmluZEluZGV4KChpdG0pID0+IChpdG0uc2VsZWN0ZWQgPSAhdG9WYWx1ZSkpO1xuICAgICAgICBpZiAoaW5kZXggPiAtMSkge1xuICAgICAgICAgICAgdmFsdWVzW2luZGV4XS5zZWxlY3RlZCA9IHRvVmFsdWU7XG4gICAgICAgICAgICBhZGRUb0hpc3RvcnkoaW5kZXgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZXhwb3J0IGZ1bmN0aW9uIHNlbGVjdFVwVG9NaW4oY250LCBpbmRleE9mQ3VycmVudCkge1xuICAgICAgICBsZXQgZGVsdGEgPSBtaW4gLSBjbnQ7XG4gICAgICAgIGlmICghZGVsdGEpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGxldCB0IGluIHZhbHVlcykge1xuICAgICAgICAgICAgaWYgKHQgPT09IGluZGV4T2ZDdXJyZW50KSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIXZhbHVlc1t0XS5zZWxlY3RlZCkge1xuICAgICAgICAgICAgICAgIHZhbHVlc1t0XS5zZWxlY3RlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgYWRkVG9IaXN0b3J5KHQpO1xuICAgICAgICAgICAgICAgIGRlbHRhLS07XG4gICAgICAgICAgICAgICAgaWYgKCFkZWx0YSkge1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBleHBvcnQgZnVuY3Rpb24gZGVzZWxlY3REb3duVG9NaW4oY250LCBpbmRleE9mQ3VycmVudCkge1xuICAgICAgICBsZXQgZGVsdGEgPSBjbnQgLSBtYXg7XG4gICAgICAgIGlmICghZGVsdGEpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGxldCB0IGluIHZhbHVlcykge1xuICAgICAgICAgICAgaWYgKHQgPT09IGluZGV4T2ZDdXJyZW50KSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodmFsdWVzW3RdLnNlbGVjdGVkKSB7XG4gICAgICAgICAgICAgICAgdmFsdWVzW3RdLnNlbGVjdGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgZGVsdGEtLTtcbiAgICAgICAgICAgICAgICBpZiAoIWRlbHRhKSB7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEB0eXBlZGVmIHtPYmplY3R9IFByb3BzXG4gICAgICogQHByb3BlcnR5IHthbnl9IFt2YWx1ZXNdXG4gICAgICogQHByb3BlcnR5IHtib29sZWFufSBbY2VudGVyZWRdXG4gICAgICogQHByb3BlcnR5IHtib29sZWFufSBbcmlnaHRdXG4gICAgICogQHByb3BlcnR5IHtzdHJpbmd9IFtjbGFzc2VzXVxuICAgICAqIEBwcm9wZXJ0eSB7YW55fSBbYnV0dG9uQ29tcG9uZW50XVxuICAgICAqIEBwcm9wZXJ0eSB7ZnVuY3Rpb259IFthY3Rpb25dXG4gICAgICogQHByb3BlcnR5IHtmdW5jdGlvbn0gW29uY2xpY2tdXG4gICAgICogQHByb3BlcnR5IHtmdW5jdGlvbn0gW29uY2hhbmdlXVxuICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBbbWluXVxuICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBbbWF4XVxuICAgICAqL1xuXG4gICAgLyoqIEB0eXBlIHtQcm9wc30gKi9cbiAgICBsZXQge1xuICAgICAgICB2YWx1ZXMgPSAkYmluZGFibGUoW10pLFxuICAgICAgICBjZW50ZXJlZCA9IGZhbHNlLFxuICAgICAgICByaWdodCA9IGZhbHNlLFxuICAgICAgICBjbGFzc2VzID0gXCJcIixcbiAgICAgICAgYnV0dG9uQ29tcG9uZW50ID0gVUlCdXR0b25Td2l0Y2gsXG4gICAgICAgIGFjdGlvbiA9IChldiwgdmFsdWUsIHNlbGVjdGVkKSA9PiB7XG4gICAgICAgICAgICBsZXQgbmV3U2VsZWN0ZWQgPSAhc2VsZWN0ZWQ7XG4gICAgICAgICAgICBjb25zdCBpbmRleE9mQ3VycmVudCA9IHZhbHVlcy5pbmRleE9mKChpdG0pID0+IGl0bS52YWx1ZSA9PT0gdmFsdWUpO1xuICAgICAgICAgICAgY29uc3QgY250ID0gY291bnRTZWxlY3RlZCgpICsgKG5ld1NlbGVjdGVkID8gMSA6IC0xKTtcblxuICAgICAgICAgICAgaWYgKG1pbikge1xuICAgICAgICAgICAgICAgIGlmIChjbnQgPCBtaW4pIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0VXBUb01pbihjbnQsIGluZGV4T2ZDdXJyZW50KTtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWVzID0gdmFsdWVzO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtYXgpIHtcbiAgICAgICAgICAgICAgICBpZiAobWF4IDwgY250KSB7XG4gICAgICAgICAgICAgICAgICAgIGRlc2VsZWN0RG93blRvTWluKGNudCwgaW5kZXhPZkN1cnJlbnQpO1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZXMgPSB2YWx1ZXM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG5ld1NlbGVjdGVkKSB7XG4gICAgICAgICAgICAgICAgYWRkVG9IaXN0b3J5KGluZGV4T2ZDdXJyZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBuZXdTZWxlY3RlZDtcbiAgICAgICAgfSxcbiAgICAgICAgbWluID0gMCxcbiAgICAgICAgbWF4ID0gMTAwLFxuICAgIH0gPSAkcHJvcHMoKTtcbjwvc2NyaXB0PlxuXG48ZGl2XG4gICAgY2xhc3M9XCJidXR0b25zIGhhcy1hZGRvbnMge2NlbnRlcmVkID8gJ2lzLWNlbnRlcmVkJyA6ICcnfSB7cmlnaHRcbiAgICAgICAgPyAnaXMtcmlnaHQnXG4gICAgICAgIDogJyd9IHtjbGFzc2VzfVwiXG4+XG4gICAgeyNlYWNoIHZhbHVlcyBhcyBpdGVtIChpdGVtLmlkKX1cbiAgICAgICAge0Bjb25zdCBTdmVsdGVDb21wb25lbnQgPSBidXR0b25Db21wb25lbnR9XG4gICAgICAgIDxTdmVsdGVDb21wb25lbnRcbiAgICAgICAgICAgIHthY3Rpb259XG4gICAgICAgICAgICB7Li4uaXRlbX1cbiAgICAgICAgICAgIGJpbmQ6dmFsdWU9e2l0ZW0udmFsdWV9XG4gICAgICAgICAgICBiaW5kOnNlbGVjdGVkPXtpdGVtLnNlbGVjdGVkfVxuICAgICAgICAgICAge29uY2xpY2t9XG4gICAgICAgICAgICB7b25jaGFuZ2V9XG4gICAgICAgIC8+XG4gICAgey9lYWNofVxuPC9kaXY+XG4iLCJjb25zdCBERUZBVUxUX1NUQVRVU19TVUNDRVNTID0gXCJva1wiO1xuY29uc3QgREVGQVVMVF9TVEFUVVNfRVJST1IgPSBcImVycm9yXCI7XG5cbmNvbnN0IE5BVklHQVRJT05fREVMQVlfU0hPUlQgPSA1MDA7XG5jb25zdCBOQVZJR0FUSU9OX0RFTEFZX05PUk1BTCA9IDE1MDA7XG5jb25zdCBOQVZJR0FUSU9OX0RFTEFZX0xPTkcgPSA1MDAwO1xuXG5jb25zdCBOQVZJR0FUSU9OX0RFTEFZUyA9IHtcbiAgICBTSE9SVDogTkFWSUdBVElPTl9ERUxBWV9TSE9SVCxcbiAgICBOT1JNQUw6IE5BVklHQVRJT05fREVMQVlfTk9STUFMLFxuICAgIExPTkc6IE5BVklHQVRJT05fREVMQVlfTE9ORyxcbn07XG5cbmNvbnN0IE5BVklHQVRJT05fREVMQVlfREVGQVVMVCA9IE5BVklHQVRJT05fREVMQVlfTk9STUFMO1xuXG5leHBvcnQge1xuICAgIERFRkFVTFRfU1RBVFVTX1NVQ0NFU1MsXG4gICAgREVGQVVMVF9TVEFUVVNfRVJST1IsXG4gICAgTkFWSUdBVElPTl9ERUxBWV9ERUZBVUxULFxuICAgIE5BVklHQVRJT05fREVMQVlTLFxufTtcbiIsIjxzY3JpcHQ+XG4gICAgaW1wb3J0IG5vdFBhdGggZnJvbSBcIm5vdC1wYXRoXCI7XG4gICAgaW1wb3J0IFVJU2VsZWN0IGZyb20gXCIuLi9pbnB1dC91aS5zZWxlY3Quc3ZlbHRlXCI7XG4gICAgaW1wb3J0IHsgVUlCdXR0b25zLCBVSUJ1dHRvbiB9IGZyb20gXCIuLi9idXR0b25cIjtcbiAgICBpbXBvcnQgbm90Q29tbW9uIGZyb20gXCIuLi8uLi9mcmFtZS9jb21tb25cIjtcbiAgICBpbXBvcnQgeyBERUZBVUxUX1NUQVRVU19TVUNDRVNTIH0gZnJvbSBcIi4uLy4uL2ZyYW1lL2NvbnN0XCI7XG5cbiAgICBpbXBvcnQgeyBvbk1vdW50IH0gZnJvbSBcInN2ZWx0ZVwiO1xuXG4gICAgLyoqXG4gICAgICogQHR5cGVkZWYge09iamVjdH0gUHJvcHNcbiAgICAgKiBAcHJvcGVydHkge2Jvb2xlYW59IFtpbnB1dFN0YXJ0ZWRdXG4gICAgICogQHByb3BlcnR5IHthbnl9IHZhbHVlXG4gICAgICogQHByb3BlcnR5IHthbnl9IFt2YXJpYW50c11cbiAgICAgKiBAcHJvcGVydHkge3N0cmluZ30gW3BsYWNlaG9sZGVyXVxuICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbZmllbGRuYW1lXVxuICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbbW9kZWxOYW1lXVxuICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbYWN0aW9uTmFtZV1cbiAgICAgKiBAcHJvcGVydHkge2FueX0gW2FjdGlvbkZpbHRlcl1cbiAgICAgKiBAcHJvcGVydHkge2FueX0gW2FjdGlvblNvcnRlcl1cbiAgICAgKiBAcHJvcGVydHkge2FueX0gW2FjdGlvblBhZ2VyXVxuICAgICAqIEBwcm9wZXJ0eSB7YW55fSBbYWN0aW9uU2VhcmNoXVxuICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbb3B0aW9uSWRdXG4gICAgICogQHByb3BlcnR5IHtzdHJpbmd9IFtvcHRpb25UaXRsZV1cbiAgICAgKiBAcHJvcGVydHkge2Jvb2xlYW59IFtpY29uXVxuICAgICAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW3JlcXVpcmVkXVxuICAgICAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW3JlYWRvbmx5XVxuICAgICAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW211bHRpcGxlXVxuICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBbc2l6ZV1cbiAgICAgKiBAcHJvcGVydHkge2Jvb2xlYW59IFt2YWxpZF1cbiAgICAgKiBAcHJvcGVydHkge2Jvb2xlYW59IFt2YWxpZGF0ZWRdXG4gICAgICogQHByb3BlcnR5IHtib29sZWFufSBbZXJyb3JzXVxuICAgICAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW2Zvcm1FcnJvcnNdXG4gICAgICogQHByb3BlcnR5IHtib29sZWFufSBbZm9ybUxldmVsRXJyb3JdXG4gICAgICovXG5cbiAgICAvKiogQHR5cGUge1Byb3BzfSAqL1xuICAgIGxldCB7XG4gICAgICAgIHZhbHVlLFxuICAgICAgICB2YXJpYW50cyA9ICRiaW5kYWJsZShbXSksXG4gICAgICAgIHBsYWNlaG9sZGVyID0gXCJlbXB0eSBzZWxlY3QgaXRlbVwiLFxuICAgICAgICBmaWVsZG5hbWUgPSBcInNlbGVjdEZyb21Nb2RlbFwiLFxuICAgICAgICBtb2RlbE5hbWUgPSBcIlwiLFxuICAgICAgICBhY3Rpb25OYW1lID0gXCJcIixcbiAgICAgICAgYWN0aW9uRmlsdGVyID0ge30sXG4gICAgICAgIGFjdGlvblNvcnRlciA9IHt9LFxuICAgICAgICBhY3Rpb25QYWdlciA9IHt9LFxuICAgICAgICBhY3Rpb25TZWFyY2ggPSB1bmRlZmluZWQsXG4gICAgICAgIG9wdGlvbklkID0gXCI6X2lkXCIsXG4gICAgICAgIG9wdGlvblRpdGxlID0gXCI6dGl0bGVcIixcbiAgICAgICAgcmVxdWlyZWQgPSB0cnVlLFxuICAgICAgICByZWFkb25seSA9IGZhbHNlLFxuICAgICAgICBtdWx0aXBsZSA9IGZhbHNlLFxuICAgICAgICBzaXplID0gOCxcbiAgICAgICAgdmFsaWQgPSB0cnVlLFxuICAgICAgICBvbnJlamVjdCA9ICgpID0+IGZhbHNlLFxuICAgICAgICBvbnJlc29sdmUgPSAoKSA9PiB0cnVlLFxuICAgICAgICBvbmVycm9yID0gKCkgPT4gdHJ1ZSxcbiAgICB9ID0gJHByb3BzKCk7XG5cbiAgICBmdW5jdGlvbiBhcmd1bWVudHNTZXRQcm92aWRlZCgpIHtcbiAgICAgICAgcmV0dXJuIG1vZGVsTmFtZSAmJiBhY3Rpb25OYW1lICYmIGFjdGlvbkZpbHRlcjtcbiAgICB9XG5cbiAgICBsZXQgbG9hZGVkID0gZmFsc2U7XG5cbiAgICBsZXQgZGlzYWJsZWQgPSAkZGVyaXZlZCghbG9hZGVkKTtcbiAgICBsZXQgc3RhdGUgPSAkc3RhdGUoXCJoaWRkZW5cIik7XG4gICAgbGV0IHJlc3VsdHNMaXN0ID0gW107XG5cbiAgICBvbk1vdW50KGFzeW5jICgpID0+IHtcbiAgICAgICAgaWYgKGFyZ3VtZW50c1NldFByb3ZpZGVkKCkpIHtcbiAgICAgICAgICAgIGNvbnN0IG5vdEFwcCA9IG5vdENvbW1vbi5nZXRBcHAoKTtcbiAgICAgICAgICAgIGNvbnN0IE1vZGVsID0gbm90QXBwXG4gICAgICAgICAgICAgICAgLmdldE1vZGVsKG1vZGVsTmFtZSlcbiAgICAgICAgICAgICAgICAuc2V0RmlsdGVyKGFjdGlvbkZpbHRlcilcbiAgICAgICAgICAgICAgICAuc2V0U29ydGVyKGFjdGlvblNvcnRlcilcbiAgICAgICAgICAgICAgICAuc2V0UGFnZXIoYWN0aW9uUGFnZXIpXG4gICAgICAgICAgICAgICAgLnNldFNlYXJjaChhY3Rpb25TZWFyY2gpO1xuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBNb2RlbFtgJGAgKyBhY3Rpb25OYW1lXSgpO1xuICAgICAgICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1cyA9PT0gREVGQVVMVF9TVEFUVVNfU1VDQ0VTUykge1xuICAgICAgICAgICAgICAgIHJlc3VsdHNMaXN0ID0gcmVzcG9uc2UucmVzdWx0O1xuICAgICAgICAgICAgICAgIHZhcmlhbnRzID0gcmVzdWx0c0xpc3QubWFwKChpdGVtKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZDogbm90UGF0aC5nZXQob3B0aW9uSWQsIGl0ZW0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IG5vdFBhdGguZ2V0KG9wdGlvblRpdGxlLCBpdGVtKSxcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgb25lcnJvcihyZXNwb25zZS5lcnJvcnMgfHwgW3Jlc3BvbnNlLm1lc3NhZ2VdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgbGV0IHJlc29sdmVkVmFsdWU7XG5cbiAgICBmdW5jdGlvbiBvbk1vZGVsQ2hhbmdlZCh7IHZhbHVlOiBzZWxlY3RlZFZhbHVlIH0pIHtcbiAgICAgICAgcmVzb2x2ZWRWYWx1ZSA9IHJlc3VsdHNMaXN0LmZpbmQoXG4gICAgICAgICAgICAoaXRlbSkgPT4gbm90UGF0aC5nZXQob3B0aW9uSWQsIGl0ZW0pID09PSBzZWxlY3RlZFZhbHVlXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgY29uc3QgQUNUSU9OUyA9IHtcbiAgICAgICAgYWRkOiB7XG4gICAgICAgICAgICBjb2xvcjogXCJwcmltYXJ5XCIsXG4gICAgICAgICAgICBpY29uOiBcInBsdXNcIixcbiAgICAgICAgICAgIGFjdGlvbigpIHtcbiAgICAgICAgICAgICAgICBzdGF0ZSA9IFwic2hvd1wiO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgICAgcmVzb2x2ZToge1xuICAgICAgICAgICAgaWNvbjogXCJjaGVja1wiLFxuICAgICAgICAgICAgY29sb3I6IFwicHJpbWFyeVwiLFxuICAgICAgICAgICAgYWN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHN0YXRlID0gXCJoaWRkZW5cIjtcbiAgICAgICAgICAgICAgICBvbnJlc29sdmUocmVzb2x2ZWRWYWx1ZSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgICByZWplY3Q6IHtcbiAgICAgICAgICAgIGljb246IFwiY2xvc2VcIixcbiAgICAgICAgICAgIGNvbG9yOiBcImRhbmdlclwiLFxuICAgICAgICAgICAgYWN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHN0YXRlID0gXCJoaWRkZW5cIjtcbiAgICAgICAgICAgICAgICBvbnJlamVjdCgpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICB9O1xuPC9zY3JpcHQ+XG5cbnsjaWYgc3RhdGUgPT09IFwiaGlkZGVuXCJ9XG4gICAgPFVJQnV0dG9uIHsuLi5BQ1RJT05TLmFkZH0+PC9VSUJ1dHRvbj5cbns6ZWxzZSBpZiBzdGF0ZSA9PSBcInNob3dcIn1cbiAgICA8ZGl2IGNsYXNzPVwiZmllbGQgaGFzLWFkZG9uc1wiPlxuICAgICAgICA8VUlTZWxlY3RcbiAgICAgICAgICAgIHt2YWx1ZX1cbiAgICAgICAgICAgIHt2YXJpYW50c31cbiAgICAgICAgICAgIHtwbGFjZWhvbGRlcn1cbiAgICAgICAgICAgIHtmaWVsZG5hbWV9XG4gICAgICAgICAgICB7cmVxdWlyZWR9XG4gICAgICAgICAgICB7cmVhZG9ubHl9XG4gICAgICAgICAgICB7ZGlzYWJsZWR9XG4gICAgICAgICAgICB7bXVsdGlwbGV9XG4gICAgICAgICAgICB7c2l6ZX1cbiAgICAgICAgICAgIHt2YWxpZH1cbiAgICAgICAgICAgIG9uY2hhbmdlPXtvbk1vZGVsQ2hhbmdlZH1cbiAgICAgICAgLz5cbiAgICA8L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPVwiY29udHJvbFwiPlxuICAgICAgICA8VUlCdXR0b25zIHZhbHVlcz17W0FDVElPTlMucmVzb2x2ZSwgQUNUSU9OUy5yZWplY3RdfT48L1VJQnV0dG9ucz5cbiAgICA8L2Rpdj5cbnsvaWZ9XG4iLCI8c2NyaXB0PlxuICAgIGltcG9ydCBub3RDb21tb24gZnJvbSBcIi4uLy4uL2ZyYW1lL2NvbW1vblwiO1xuXG4gICAgaW1wb3J0IHsgVUlCdXR0b25zIH0gZnJvbSBcIi4uL2J1dHRvblwiO1xuXG4gICAgaW1wb3J0IHsgb25Nb3VudCB9IGZyb20gXCJzdmVsdGVcIjtcblxuICAgIC8qKlxuICAgICAqIEB0eXBlZGVmIHtPYmplY3R9IFByb3BzXG4gICAgICogQHByb3BlcnR5IHthbnl9IHZhbHVlXG4gICAgICogQHByb3BlcnR5IHtib29sZWFufSBbaW5wdXRTdGFydGVkXVxuICAgICAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW2ljb25dXG4gICAgICogQHByb3BlcnR5IHtzdHJpbmd9IFtmaWVsZG5hbWVdXG4gICAgICogQHByb3BlcnR5IHtib29sZWFufSBbcmVhZG9ubHldXG4gICAgICogQHByb3BlcnR5IHtzdHJpbmd9IFtzZXJ2aWNlTmFtZV0gLSBTZXQgdGhpcywgYXMgbnNbTW9kZWxOYW1lXSwgc2hvdWxkIGJlIHJlZ2lzdGVyZWQgaW4gbm90QXBwXG4gICAgICogQHByb3BlcnR5IHtzdHJpbmd9IFtzZXJ2aWNlT3BlblNlbGVjdG9yTWV0aG9kXSAtIFNldCB0aGlzXG4gICAgICogQHByb3BlcnR5IHtzdHJpbmd9IFtzZXJ2aWNlTG9hZERhdGFNZXRob2RdIC0gU2V0IHRoaXNcbiAgICAgKiBAcHJvcGVydHkge2FueX0gW21vZGVsRGF0YV1cbiAgICAgKiBAcHJvcGVydHkge2Jvb2xlYW59IFtsb2FkaW5nXVxuICAgICAqIEBwcm9wZXJ0eSB7YW55fSBbc2VsZWN0ZWRNb2RlbFRpdGxlRm9ybWF0dGVyXVxuICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbbG9hZGluZ0xhYmVsXVxuICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbaXNFbXB0eUxhYmVsXVxuICAgICAqL1xuXG4gICAgLyoqIEB0eXBlIHtQcm9wc30gKi9cbiAgICBsZXQge1xuICAgICAgICB2YWx1ZSA9ICRiaW5kYWJsZSgpLFxuICAgICAgICBpY29uID0gZmFsc2UsXG4gICAgICAgIGZpZWxkbmFtZSA9IFwiXCIsXG4gICAgICAgIHJlYWRvbmx5ID0gZmFsc2UsXG4gICAgICAgIHNlcnZpY2VOYW1lID0gXCJcIixcbiAgICAgICAgc2VydmljZU9wZW5TZWxlY3Rvck1ldGhvZCA9IFwib3BlblNlbGVjdG9yXCIsXG4gICAgICAgIHNlcnZpY2VMb2FkRGF0YU1ldGhvZCA9IFwibG9hZERhdGFcIixcbiAgICAgICAgbW9kZWxEYXRhID0gJGJpbmRhYmxlKG51bGwpLFxuICAgICAgICBsb2FkaW5nID0gJGJpbmRhYmxlKGZhbHNlKSxcbiAgICAgICAgc2VsZWN0ZWRNb2RlbFRpdGxlRm9ybWF0dGVyID0gKGRhdGEpID0+IGAke2RhdGEuX2lkfWAsXG4gICAgICAgIGxvYWRpbmdMYWJlbCA9IFwibm90LW5vZGU6bG9hZGluZ19sYWJlbFwiLFxuICAgICAgICBpc0VtcHR5TGFiZWwgPSBcIm5vdC1ub2RlOmZpZWxkX3ZhbHVlX2lzX2VtcHR5X3BsYWNlaG9sZGVyXCIsXG4gICAgICAgIG9uY2hhbmdlID0gKCkgPT4gdHJ1ZSxcbiAgICB9ID0gJHByb3BzKCk7XG5cbiAgICBmdW5jdGlvbiBnZXRTZXJ2aWNlKCkge1xuICAgICAgICBpZiAoIXNlcnZpY2VOYW1lKSB0aHJvdyBuZXcgRXJyb3IoXCJzZXJ2aWNlTmFtZSBpcyBub3Qgc2V0XCIpO1xuICAgICAgICByZXR1cm4gbm90Q29tbW9uLmdldEFwcCgpLmdldFNlcnZpY2Uoc2VydmljZU5hbWUpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG9wZW5Nb2RlbFNlYXJjaEFuZFNlbGVjdCgpIHtcbiAgICAgICAgaWYgKCFzZXJ2aWNlT3BlblNlbGVjdG9yTWV0aG9kKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJzZXJ2aWNlT3BlblNlbGVjdG9yTWV0aG9kIGlzIG5vdCBzZXRcIik7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc2VydmljZSA9IGdldFNlcnZpY2UoKTtcbiAgICAgICAgc2VydmljZVtzZXJ2aWNlT3BlblNlbGVjdG9yTWV0aG9kXSgpXG4gICAgICAgICAgICAudGhlbigocmVzdWx0cykgPT4ge1xuICAgICAgICAgICAgICAgIHZhbHVlID0gcmVzdWx0cy5faWQ7XG4gICAgICAgICAgICAgICAgbW9kZWxEYXRhID0gcmVzdWx0cztcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLnRoZW4oKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICAgICAgb25jaGFuZ2Uoe1xuICAgICAgICAgICAgICAgICAgICBmaWVsZDogZmllbGRuYW1lLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuY2F0Y2goKGUpID0+IHtcbiAgICAgICAgICAgICAgICBub3RDb21tb24ucmVwb3J0KGUpO1xuICAgICAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVzZXRTZWxlY3RlZE1vZGVsKCkge1xuICAgICAgICB2YWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgbW9kZWxEYXRhID0gbnVsbDtcbiAgICAgICAgb25jaGFuZ2Uoe1xuICAgICAgICAgICAgZmllbGQ6IGZpZWxkbmFtZSxcbiAgICAgICAgICAgIHZhbHVlLFxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBhc3luYyBmdW5jdGlvbiBsb2FkTW9kZWxEYXRhKCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgbG9hZGluZyA9IHRydWU7XG4gICAgICAgICAgICAgICAgbW9kZWxEYXRhID0gYXdhaXQgZ2V0U2VydmljZSgpW3NlcnZpY2VMb2FkRGF0YU1ldGhvZF0odmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBub3RDb21tb24ucmVwb3J0KGUpO1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgbG9hZGluZyA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgb25Nb3VudCgoKSA9PiB7XG4gICAgICAgIGxvYWRNb2RlbERhdGEoKTtcbiAgICB9KTtcblxuICAgIGNvbnN0IEFWQUlMQUJMRV9CVVRUT05TID0gW1xuICAgICAgICB7XG4gICAgICAgICAgICBpZDogMSxcbiAgICAgICAgICAgIGFjdGlvbjogb3Blbk1vZGVsU2VhcmNoQW5kU2VsZWN0LFxuICAgICAgICAgICAgaWNvbixcbiAgICAgICAgICAgIGNvbG9yOiBcIndhcm5pbmdcIixcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgaWQ6IDIsXG4gICAgICAgICAgICBhY3Rpb246IHJlc2V0U2VsZWN0ZWRNb2RlbCxcbiAgICAgICAgICAgIGljb246IFwidGltZXNcIixcbiAgICAgICAgICAgIGNvbG9yOiBcImRhbmdlclwiLFxuICAgICAgICB9LFxuICAgIF07XG5cbiAgICBmdW5jdGlvbiBnZXRNb2RlbEJ1dHRvbigpIHtcbiAgICAgICAgaWYgKGxvYWRpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgZGlzYWJsZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgbG9hZGluZyxcbiAgICAgICAgICAgICAgICB0aXRsZTogbG9hZGluZ0xhYmVsLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChtb2RlbERhdGEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBkaXNhYmxlZDogcmVhZG9ubHksXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbjogb3Blbk1vZGVsU2VhcmNoQW5kU2VsZWN0LFxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogc2VsZWN0ZWRNb2RlbFRpdGxlRm9ybWF0dGVyKG1vZGVsRGF0YSksXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgZGlzYWJsZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiBpc0VtcHR5TGFiZWwsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGxldCBWSVNJQkxFX0JVVFRPTlMgPSAkc3RhdGUoW10pO1xuICAgIHJ1bigoKSA9PiB7XG4gICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgVklTSUJMRV9CVVRUT05TID0gW1xuICAgICAgICAgICAgICAgIGdldE1vZGVsQnV0dG9uKCksXG4gICAgICAgICAgICAgICAgLi4uKHJlYWRvbmx5ID8gW10gOiBBVkFJTEFCTEVfQlVUVE9OUyksXG4gICAgICAgICAgICBdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgVklTSUJMRV9CVVRUT05TID0gW1xuICAgICAgICAgICAgICAgIGdldE1vZGVsQnV0dG9uKCksXG4gICAgICAgICAgICAgICAgLi4uKHJlYWRvbmx5ID8gW10gOiBbQVZBSUxBQkxFX0JVVFRPTlNbMF1dKSxcbiAgICAgICAgICAgIF07XG4gICAgICAgIH1cbiAgICB9KTtcbjwvc2NyaXB0PlxuXG48ZGl2IGNsYXNzPVwiY29udHJvbFwiPlxuICAgIDxVSUJ1dHRvbnMgdmFsdWVzPXtWSVNJQkxFX0JVVFRPTlN9IGNsYXNzZXM9e1wiaXMtbm8tZmxleC13cmFwXCJ9PjwvVUlCdXR0b25zPlxuPC9kaXY+XG4iLCI8c2NyaXB0PlxuICAvKipcbiAgICogQHR5cGVkZWYge09iamVjdH0gUHJvcHNcbiAgICogQHByb3BlcnR5IHthbnl9IHZhbHVlXG4gICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBbbWF4XVxuICAgKiBAcHJvcGVydHkge3N0cmluZ30gW2NvbG9yXVxuICAgKiBAcHJvcGVydHkge3N0cmluZ30gW3NpemVdXG4gICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbY2xhc3Nlc11cbiAgICovXG5cbiAgLyoqIEB0eXBlIHtQcm9wc30gKi9cbiAgbGV0IHtcbiAgICAgIHZhbHVlLFxuICAgICAgbWF4ID0gMTAwLFxuICAgICAgY29sb3IgPSBcIlwiLFxuICAgICAgc2l6ZSA9IFwiXCIsXG4gICAgICBjbGFzc2VzID0gXCJcIlxuICB9ID0gJHByb3BzKCk7XG48L3NjcmlwdD5cblxuPHByb2dyZXNzXG4gICAgY2xhc3M9XCJcbiAgcHJvZ3Jlc3NcbiAge2NsYXNzZXN9XG4gIHtjb2xvciA/IGBpcy0ke2NvbG9yfWAgOiAnJ31cbiAge3NpemUgPyBgaXMtJHtzaXplfWAgOiAnJ31cIlxuICAgIHt2YWx1ZX1cbiAgICB7bWF4fT57dmFsdWV9JTwvcHJvZ3Jlc3Ncbj5cbiIsIjxzY3JpcHQ+XG4gICAgaW1wb3J0IHsgcnVuIH0gZnJvbSAnc3ZlbHRlL2xlZ2FjeSc7XG5cbiAgICBjb25zdCBkZWZhdWx0RmlsdGVyID0gKHZhbHVlKSA9PiB2YWx1ZVtpZEZpZWxkTmFtZV0gPT09IGlkO1xuICAgIC8qKlxuICAgICAqIEB0eXBlZGVmIHtPYmplY3R9IFByb3BzXG4gICAgICogQHByb3BlcnR5IHthbnl9IFt2YWx1ZXNdXG4gICAgICogQHByb3BlcnR5IHthbnl9IGlkXG4gICAgICogQHByb3BlcnR5IHthbnl9IFVJQ29tcG9uZW50XG4gICAgICogQHByb3BlcnR5IHthbnl9IFVJUGxhY2Vob2xkZXJcbiAgICAgKiBAcHJvcGVydHkge2FueX0gYWN0aXZlXG4gICAgICogQHByb3BlcnR5IHtzdHJpbmd9IFtpZEZpZWxkTmFtZV1cbiAgICAgKiBAcHJvcGVydHkge2FueX0gW2ZpbHRlcl1cbiAgICAgKi9cblxuICAgIC8qKiBAdHlwZSB7UHJvcHN9ICovXG4gICAgbGV0IHtcbiAgICAgICAgdmFsdWVzID0gW10sXG4gICAgICAgIGlkLFxuICAgICAgICBVSUNvbXBvbmVudCxcbiAgICAgICAgVUlQbGFjZWhvbGRlcixcbiAgICAgICAgYWN0aXZlID0gJGJpbmRhYmxlKCksXG4gICAgICAgIGlkRmllbGROYW1lID0gXCJfaWRcIixcbiAgICAgICAgZmlsdGVyID0gZGVmYXVsdEZpbHRlclxuICAgIH0gPSAkcHJvcHMoKTtcblxuICAgIHJ1bigoKSA9PiB7XG4gICAgICAgIGFjdGl2ZSA9XG4gICAgICAgICAgICBBcnJheS5pc0FycmF5KHZhbHVlcykgJiYgdmFsdWVzLmxlbmd0aCAmJiB0eXBlb2YgaWQgIT09IFwidW5kZWZpbmVkXCJcbiAgICAgICAgICAgICAgICA/IHZhbHVlcy5maW5kKGZpbHRlciB8fCBkZWZhdWx0RmlsdGVyKVxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuICAgIH0pO1xuPC9zY3JpcHQ+XG5cbnsjaWYgYWN0aXZlfVxuICAgIDxVSUNvbXBvbmVudCB7Li4uYWN0aXZlfSAvPlxuezplbHNlIGlmIFVJUGxhY2Vob2xkZXJ9XG4gICAgPFVJUGxhY2Vob2xkZXIgLz5cbnsvaWZ9XG4iLCI8c2NyaXB0PlxuICAgIGltcG9ydCBVSVRhZyBmcm9tIFwiLi91aS50YWcuc3ZlbHRlXCI7XG4gICAgaW1wb3J0IFVJQnV0dG9ucyBmcm9tIFwiLi4vYnV0dG9uL3VpLmJ1dHRvbnMuc3ZlbHRlXCI7XG5cbiAgICBcbiAgICAvKipcbiAgICAgKiBAdHlwZWRlZiB7T2JqZWN0fSBQcm9wc1xuICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbaWRdIC0gaWYgd2Ugd2FudCB0byBhZGRyZXNzIHRoaXMgdGFnXG4gICAgICogQHByb3BlcnR5IHthbnl9IHRpdGxlXG4gICAgICogQHByb3BlcnR5IHthbnl9IHZhbHVlXG4gICAgICogQHByb3BlcnR5IHthbnl9IFthY3Rpb25zXVxuICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbY2xhc3Nlc11cbiAgICAgKiBAcHJvcGVydHkge2FueX0gW2FjdGlvbnNHcm91cENvbnRydWN0b3JdXG4gICAgICogQHByb3BlcnR5IHthbnl9IFthY3Rpb25zR3JvdXBQcm9wc11cbiAgICAgKiBAcHJvcGVydHkge2Jvb2xlYW59IFtyZWFkb25seV1cbiAgICAgKi9cblxuICAgIC8qKiBAdHlwZSB7UHJvcHN9ICovXG4gICAgbGV0IHtcbiAgICAgICAgaWQgPSBcInRhZ2dlZFZhbHVlSWRcIixcbiAgICAgICAgdGl0bGUsXG4gICAgICAgIHZhbHVlLFxuICAgICAgICBhY3Rpb25zID0gW10sXG4gICAgICAgIGNsYXNzZXMgPSBcIlwiLFxuICAgICAgICBhY3Rpb25zR3JvdXBDb250cnVjdG9yID0gVUlCdXR0b25zLFxuICAgICAgICBhY3Rpb25zR3JvdXBQcm9wcyA9IHt9LFxuICAgICAgICByZWFkb25seSA9IGZhbHNlXG4gICAgfSA9ICRwcm9wcygpO1xuPC9zY3JpcHQ+XG5cbjxkaXYgY2xhc3M9XCJ0YWdzIGhhcy1hZGRvbnMge2NsYXNzZXN9XCIge2lkfT5cbiAgICB7I2lmIHRpdGxlfTxVSVRhZyB7Li4udGl0bGV9IC8+ey9pZn1cbiAgICB7I2lmIHZhbHVlfTxVSVRhZyB7Li4udmFsdWV9IC8+ey9pZn1cbiAgICB7I2lmICFyZWFkb25seSAmJiBhY3Rpb25zICYmIGFjdGlvbnMubGVuZ3RofVxuICAgICAgICB7QGNvbnN0IFN2ZWx0ZUNvbXBvbmVudCA9IGFjdGlvbnNHcm91cENvbnRydWN0b3J9XG4gICAgICAgIDxTdmVsdGVDb21wb25lbnRcbiAgICAgICAgICAgIHZhbHVlcz17YWN0aW9uc31cbiAgICAgICAgICAgIHsuLi5hY3Rpb25zR3JvdXBQcm9wc31cbiAgICAgICAgLz5cbiAgICB7L2lmfVxuPC9kaXY+XG4iLCI8c2NyaXB0PlxuICAgIC8qIGVzbGludCBzdmVsdGUvbm8tYXQtaHRtbC10YWdzOiAwICovXG5cbiAgICBpbXBvcnQgeyBMT0NBTEUgfSBmcm9tIFwiLi4vLi4vbG9jYWxlXCI7XG4gICAgaW1wb3J0IFVJQ29tbW9uIGZyb20gXCIuLi9jb21tb25cIjtcblxuICAgIC8qKlxuICAgICAqIEB0eXBlZGVmIHtPYmplY3R9IFByb3BzXG4gICAgICogQHByb3BlcnR5IHthbnl9IFtpZF1cbiAgICAgKiBAcHJvcGVydHkge3N0cmluZ30gW3RpdGxlXVxuICAgICAqIEBwcm9wZXJ0eSB7YW55fSBzdWJ0aXRsZVxuICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBbc2l6ZV1cbiAgICAgKiBAcHJvcGVydHkge2FueX0gc3Vic2l6ZVxuICAgICAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW3NwYWNlZF1cbiAgICAgKiBAcHJvcGVydHkge3N0cmluZ30gW2FsaWduXVxuICAgICAqL1xuXG4gICAgLyoqIEB0eXBlIHtQcm9wc30gKi9cbiAgICBsZXQge1xuICAgICAgICBpZCA9IGB0aXRsZS0ke01hdGgucmFuZG9tKCl9YCxcbiAgICAgICAgdGl0bGUgPSBcIlwiLFxuICAgICAgICBzdWJ0aXRsZSxcbiAgICAgICAgc2l6ZSA9IDEsXG4gICAgICAgIHN1YnNpemUsXG4gICAgICAgIHNwYWNlZCA9IGZhbHNlLFxuICAgICAgICBhbGlnbiA9IFwibGVmdFwiLFxuICAgIH0gPSAkcHJvcHMoKTtcblxuICAgIGV4cG9ydCBjb25zdCBzY3JvbGxUb1RvcCA9IChvcHRpb25zID0gVUlDb21tb24uU0NST0xMX09QVElPTlMpID0+IHtcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZCkuc2Nyb2xsSW50b1ZpZXcob3B0aW9ucyk7XG4gICAgICAgIH0sIDEwMCk7XG4gICAgfTtcblxuICAgIGxldCBzaXplMiA9ICRkZXJpdmVkKFxuICAgICAgICBzdWJzaXplID8gc3Vic2l6ZSA6IHBhcnNlSW50KHNpemUpIDwgNiA/IHBhcnNlSW50KHNpemUpICsgMSA6IHNpemVcbiAgICApO1xuXG4gICAgbGV0IHNwYWNlZFN0eWxlID0gJGRlcml2ZWQoc3BhY2VkID8gXCJpcy1zcGFjZWRcIiA6IFwiXCIpO1xuXG4gICAgbGV0IHJlc3VsdFRpdGxlID0gJGRlcml2ZWQoXG4gICAgICAgIGA8aCR7c2l6ZX0gaWQ9XCIke2lkfVwiIHN0eWxlPVwidGV4dC1hbGlnbjogJHthbGlnbn07XCIgY2xhc3M9XCJ0aXRsZSAke3NwYWNlZFN0eWxlfSBpcy0ke3NpemV9XCI+JHskTE9DQUxFW3RpdGxlXX08L2gke3NpemV9PmBcbiAgICApO1xuICAgIGxldCByZXN1bHRTdWJ0aXRsZSA9ICRkZXJpdmVkKFxuICAgICAgICBgPGgke3NpemUyfSBpZD1cIiR7aWR9XCIgc3R5bGU9XCJ0ZXh0LWFsaWduOiAke2FsaWdufTtcIiBjbGFzcz1cInN1YnRpdGxlIGlzLSR7c2l6ZTJ9XCI+JHskTE9DQUxFW3N1YnRpdGxlXX08L2gke3NpemUyfT5gXG4gICAgKTtcbjwvc2NyaXB0PlxuXG57I2lmIHRpdGxlfVxuICAgIHtAaHRtbCByZXN1bHRUaXRsZX1cbnsvaWZ9XG5cbnsjaWYgc3VidGl0bGV9XG4gICAge0BodG1sIHJlc3VsdFN1YnRpdGxlfVxuey9pZn1cbiIsIjxzY3JpcHQ+XG4gICAgaW1wb3J0IHsgTE9DQUxFIH0gZnJvbSBcIi4uLy4uL2xvY2FsZVwiO1xuICAgIC8qKlxuICAgICAqIEB0eXBlZGVmIHtPYmplY3R9IFByb3BzXG4gICAgICogQHByb3BlcnR5IHthbnl9IFtlcnJvcnNdXG4gICAgICogQHByb3BlcnR5IHtib29sZWFufSBbc2hvd11cbiAgICAgKiBAcHJvcGVydHkge3N0cmluZ30gW2NsYXNzZXNdXG4gICAgICogQHByb3BlcnR5IHtzdHJpbmd9IFtpZF1cbiAgICAgKi9cblxuICAgIC8qKiBAdHlwZSB7UHJvcHN9ICovXG4gICAgbGV0IHtcbiAgICAgICAgZXJyb3JzID0gW10sXG4gICAgICAgIHNob3cgPSBmYWxzZSxcbiAgICAgICAgY2xhc3NlcyA9IFwiXCIsXG4gICAgICAgIGlkID0gXCJlcnJvcnMtbGlzdFwiXG4gICAgfSA9ICRwcm9wcygpO1xuPC9zY3JpcHQ+XG5cbnsjaWYgQXJyYXkuaXNBcnJheShlcnJvcnMpICYmIGVycm9ycy5sZW5ndGh9XG4gICAgPHAgY2xhc3M9XCJoZWxwIHtjbGFzc2VzfVwiIHtpZH0+XG4gICAgICAgIHsjaWYgc2hvd31cbiAgICAgICAgICAgIHsjZWFjaCBlcnJvcnMgYXMgZXJyb3J9XG4gICAgICAgICAgICAgICAgPHNwYW4+eyRMT0NBTEVbZXJyb3JdfTwvc3Bhbj5cbiAgICAgICAgICAgIHsvZWFjaH1cbiAgICAgICAgezplbHNlfSZuYnNwO3svaWZ9XG4gICAgPC9wPlxuey9pZn1cbiIsIjxzY3JpcHQ+XG4gICAgaW1wb3J0IHsgb25Nb3VudCB9IGZyb20gXCJzdmVsdGVcIjtcbiAgICBpbXBvcnQgbm90Q29tbW9uIGZyb20gXCIuLi8uLi9mcmFtZS9jb21tb25cIjtcblxuXG4gICAgXG4gICAgXG4gICAgLyoqXG4gICAgICogQHR5cGVkZWYge09iamVjdH0gUHJvcHNcbiAgICAgKiBAcHJvcGVydHkge3N0cmluZ30gW2lkXVxuICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbaW1hZ2VdXG4gICAgICogQHByb3BlcnR5IHtzdHJpbmd9IFt1c2VybmFtZV1cbiAgICAgKiBAcHJvcGVydHkge3N0cmluZ30gW3JvbGVdXG4gICAgICogQHByb3BlcnR5IHthbnl9IFtldmVudHNdXG4gICAgICogQHByb3BlcnR5IHthbnl9IFtyZWdpc3Rlcl0gLSByZWdpc3RlciBldmVudCBoYW5kbGVyc1xuICAgICAqIEBwcm9wZXJ0eSB7YW55fSBbb25VcGRhdGVdXG4gICAgICovXG5cbiAgICAvKiogQHR5cGUge1Byb3BzfSAqL1xuICAgIGxldCB7XG4gICAgICAgIGlkID0gXCJ1c2VyQ2FyZFwiLFxuICAgICAgICBpbWFnZSA9IFwiaHR0cHM6Ly9idWxtYS5pby9pbWFnZXMvcGxhY2Vob2xkZXJzLzMyeDMyLnBuZ1wiLFxuICAgICAgICB1c2VybmFtZSA9ICRiaW5kYWJsZShcIkpvaG4gRG9lXCIpLFxuICAgICAgICByb2xlID0gJGJpbmRhYmxlKFwiYWRtaW5cIiksXG4gICAgICAgIGV2ZW50cyA9ICRiaW5kYWJsZSh7fSksXG4gICAgICAgIHJlZ2lzdGVyID0gbm90Q29tbW9uLnJlZ2lzdGVyV2lkZ2V0RXZlbnRzLFxuICAgICAgICBvblVwZGF0ZSA9IChkYXRhKSA9PiB7XG4gICAgICAgICAgICBpZiAoT2JqZWN0Lmhhc093bihkYXRhLCBcInVzZXJuYW1lXCIpKSB7XG4gICAgICAgICAgICAgICAgdXNlcm5hbWUgPSBkYXRhLnVzZXJuYW1lO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoT2JqZWN0Lmhhc093bihkYXRhLCBcInJvbGVcIikpIHtcbiAgICAgICAgICAgICAgICByb2xlID0gZGF0YS5yb2xlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSA9ICRwcm9wcygpO1xuXG4gICAgZnVuY3Rpb24gZ2V0Q29tcElkKCkge1xuICAgICAgICByZXR1cm4gYHVzZXJjYXJkLSR7aWR9YDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRTdGFuZGFydFVwZGF0ZUV2ZW50TmFtZSgpIHtcbiAgICAgICAgbGV0IGNvbXBJZCA9IGdldENvbXBJZCgpO1xuICAgICAgICByZXR1cm4gYCR7Y29tcElkfTp1cGRhdGVgO1xuICAgIH1cblxuICAgIG9uTW91bnQoKCkgPT4ge1xuICAgICAgICBpZiAoIU9iamVjdC5oYXNPd24oZXZlbnRzLCBnZXRTdGFuZGFydFVwZGF0ZUV2ZW50TmFtZSgpKSkge1xuICAgICAgICAgICAgZXZlbnRzW2dldFN0YW5kYXJ0VXBkYXRlRXZlbnROYW1lKCldID0gb25VcGRhdGU7XG4gICAgICAgIH1cbiAgICAgICAgcmVnaXN0ZXIoZXZlbnRzKTtcbiAgICB9KTtcbjwvc2NyaXB0PlxuXG48YXJ0aWNsZSBpZD17Z2V0Q29tcElkKCl9IGNsYXNzPVwibWVkaWFcIj5cbiAgICA8ZmlndXJlIGNsYXNzPVwibWVkaWEtbGVmdFwiPlxuICAgICAgICA8cCBjbGFzcz1cImltYWdlIGlzLTMyeDMyXCI+XG4gICAgICAgICAgICA8aW1nIHNyYz17aW1hZ2V9IGFsdD17dXNlcm5hbWV9IC8+XG4gICAgICAgIDwvcD5cbiAgICA8L2ZpZ3VyZT5cbiAgICA8ZGl2IGNsYXNzPVwibWVkaWEtY29udGVudFwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiY29udGVudFwiPlxuICAgICAgICAgICAgPHA+XG4gICAgICAgICAgICAgICAgPHN0cm9uZz57dXNlcm5hbWV9PC9zdHJvbmc+XG4gICAgICAgICAgICAgICAgPHNtYWxsPkA8L3NtYWxsPlxuICAgICAgICAgICAgICAgIDxzdHJvbmc+e3JvbGV9PC9zdHJvbmc+XG4gICAgICAgICAgICA8L3A+XG4gICAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuPC9hcnRpY2xlPlxuIiwiPHNjcmlwdD5cbiAgICBpbXBvcnQgeyBMT0NBTEUgfSBmcm9tIFwiLi4vLi4vbG9jYWxlL2luZGV4XCI7XG4gICAgaW1wb3J0IFVJQ29tbW9uIGZyb20gXCIuLi9jb21tb24uanNcIjtcblxuICAgIC8qKiBAdHlwZSB7aW1wb3J0KCcuL3R5cGUnKS5VSUlucHV0UHJvcHN9ICovXG4gICAgbGV0IHtcbiAgICAgICAgdmFsdWUgPSAkYmluZGFibGUoXCJcIiksXG4gICAgICAgIHBsYWNlaG9sZGVyID0gXCJcIixcbiAgICAgICAgZmllbGRuYW1lID0gXCJ0ZXh0ZmllbGRcIixcbiAgICAgICAgcmVxdWlyZWQgPSB0cnVlLFxuICAgICAgICBkaXNhYmxlZCA9IGZhbHNlLFxuICAgICAgICByZWFkb25seSA9IGZhbHNlLFxuICAgICAgICB2YWxpZCA9IHRydWUsXG4gICAgICAgIGNsYXNzOiBjbGFzc2VzID0gXCJcIixcbiAgICAgICAgb25jaGFuZ2UgPSAoKSA9PiB0cnVlLFxuICAgICAgICAuLi5vdGhlcnNcbiAgICB9ID0gJHByb3BzKCk7XG5cbiAgICBsZXQgaW52YWxpZCA9ICRkZXJpdmVkKCF2YWxpZCk7XG4gICAgY29uc3Qgb25pbnB1dCA9IFVJQ29tbW9uLm9uSW5wdXQoZmllbGRuYW1lLCBvbmNoYW5nZSk7XG48L3NjcmlwdD5cblxueyNpZiByZWFkb25seX1cbiAgICA8cD57dmFsdWV9PC9wPlxuezplbHNlfVxuICAgIDxpbnB1dFxuICAgICAgICBpZD1cImZvcm0tZmllbGQtdGV4dGZpZWxkLXtmaWVsZG5hbWV9XCJcbiAgICAgICAgY2xhc3M9XCJpbnB1dCB7Y2xhc3Nlc31cIlxuICAgICAgICB0eXBlPVwidGV4dFwiXG4gICAgICAgIG5hbWU9e2ZpZWxkbmFtZX1cbiAgICAgICAgYmluZDp2YWx1ZVxuICAgICAgICB7aW52YWxpZH1cbiAgICAgICAge2Rpc2FibGVkfVxuICAgICAgICB7cmVxdWlyZWR9XG4gICAgICAgIHtyZWFkb25seX1cbiAgICAgICAgcGxhY2Vob2xkZXI9eyRMT0NBTEVbcGxhY2Vob2xkZXJdfVxuICAgICAgICBhdXRvY29tcGxldGU9e2ZpZWxkbmFtZX1cbiAgICAgICAgb25jaGFuZ2U9e29uaW5wdXR9XG4gICAgICAgIHtvbmlucHV0fVxuICAgICAgICBhcmlhLWNvbnRyb2xzPVwiaW5wdXQtZmllbGQtaGVscGVyLXtmaWVsZG5hbWV9XCJcbiAgICAgICAgYXJpYS1kZXNjcmliZWRieT1cImlucHV0LWZpZWxkLWhlbHBlci17ZmllbGRuYW1lfVwiXG4gICAgICAgIHsuLi5vdGhlcnN9XG4gICAgLz5cbnsvaWZ9XG4iLCI8c2NyaXB0PlxuICAgIGltcG9ydCB7IGNyZWF0ZUV2ZW50RGlzcGF0Y2hlciB9IGZyb20gXCJzdmVsdGVcIjtcbiAgICBjb25zdCBkaXNwYXRjaCA9IGNyZWF0ZUV2ZW50RGlzcGF0Y2hlcigpO1xuXG4gICAgaW1wb3J0IFVJVGV4dGZpZWxkIGZyb20gXCIuLi9pbnB1dC91aS50ZXh0ZmllbGQuc3ZlbHRlXCI7XG5cbiAgICBpbXBvcnQgeyBMT0NBTEUgfSBmcm9tIFwiLi4vLi4vbG9jYWxlXCI7XG5cbiAgICAvKipcbiAgICAgKiBAdHlwZWRlZiB7T2JqZWN0fSBQcm9wc1xuICAgICAqIEBwcm9wZXJ0eSB7YW55fSBbcGxhY2Vob2xkZXJdXG4gICAgICogQHByb3BlcnR5IHtzdHJpbmd9IFt0ZXJtXVxuICAgICAqL1xuXG4gICAgLyoqIEB0eXBlIHtQcm9wc30gKi9cbiAgICBsZXQge1xuICAgICAgICBwbGFjZWhvbGRlciA9ICRMT0NBTEVbXCJub3Qtbm9kZTpmaWVsZF9zZWFyY2hfcGxhY2Vob2xkZXJcIl0sXG4gICAgICAgIHRlcm0gPSAkYmluZGFibGUoXCJcIiksXG4gICAgfSA9ICRwcm9wcygpO1xuXG4gICAgZnVuY3Rpb24gb25DaGFuZ2UoeyBkZXRhaWwgfSkge1xuICAgICAgICBkaXNwYXRjaChcInRlcm1DaGFuZ2VcIiwgZGV0YWlsKTtcbiAgICB9XG48L3NjcmlwdD5cblxuPGRpdiBjbGFzcz1cImNvbHVtbnNcIj5cbiAgICA8ZGl2IGNsYXNzPVwiY29sdW1uXCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJmaWVsZFwiPlxuICAgICAgICAgICAgPFVJVGV4dGZpZWxkXG4gICAgICAgICAgICAgICAgYmluZDp2YWx1ZT17dGVybX1cbiAgICAgICAgICAgICAgICB7cGxhY2Vob2xkZXJ9XG4gICAgICAgICAgICAgICAgZmllbGRuYW1lPVwic2VhcmNoVGVybUlucHV0XCJcbiAgICAgICAgICAgICAgICBpY29uPVwibWFnbmlmeWluZy1nbGFzc1wiXG4gICAgICAgICAgICAgICAgb246Y2hhbmdlPXtvbkNoYW5nZX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuPC9kaXY+XG4iLCI8c2NyaXB0PlxuICAgIGltcG9ydCBFcnJvcnNMaXN0IGZyb20gXCIuLi92YXJpb3VzL3VpLmVycm9ycy5saXN0LnN2ZWx0ZVwiO1xuXG4gICAgbGV0IHtcbiAgICAgICAgaWQgPSBcImdlbmVyaWMtZmllbGRcIixcbiAgICAgICAgaW5wdXRTdGFydGVkLFxuICAgICAgICB2YWxpZGF0ZWQsXG4gICAgICAgIHZhbGlkLFxuICAgICAgICBlcnJvcnMsXG4gICAgICAgIGZvcm1FcnJvcnMsXG4gICAgfSA9ICRwcm9wcygpO1xuXG4gICAgbGV0IGFsbEVycm9ycyA9ICRzdGF0ZShbXSk7XG4gICAgbGV0IHNob3dFcnJvcnMgPSAkc3RhdGUodHJ1ZSk7XG4gICAgbGV0IHZhbGlkYXRpb25DbGFzc2VzID0gJHN0YXRlKFwiXCIpO1xuXG4gICAgJGVmZmVjdC5wcmUoKCkgPT4ge1xuICAgICAgICBhbGxFcnJvcnMgPSBbXS5jb25jYXQoXG4gICAgICAgICAgICBlcnJvcnMgPyBlcnJvcnMgOiBbXSxcbiAgICAgICAgICAgIGZvcm1FcnJvcnMgPyBmb3JtRXJyb3JzIDogW11cbiAgICAgICAgKTtcbiAgICAgICAgc2hvd0Vycm9ycyA9ICEodmFsaWRhdGVkICYmIHZhbGlkKSAmJiBpbnB1dFN0YXJ0ZWQ7XG4gICAgfSk7XG48L3NjcmlwdD5cblxuPEVycm9yc0xpc3RcbiAgICBzaG93PXtzaG93RXJyb3JzfVxuICAgIGVycm9ycz17YWxsRXJyb3JzfVxuICAgIGNsYXNzZXM9e3ZhbGlkYXRpb25DbGFzc2VzfVxuICAgIHtpZH1cbi8+XG4iLCI8c2NyaXB0PlxuICAgIGltcG9ydCB7IExPQ0FMRSB9IGZyb20gXCIuLi8uLi9sb2NhbGVcIjtcblxuICAgIC8qKlxuICAgICAqIEB0eXBlZGVmIHtPYmplY3R9IFByb3BzXG4gICAgICogQHByb3BlcnR5IHtzdHJpbmd9IGZvclxuICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbbGFiZWxdXG4gICAgICogQHByb3BlcnR5IHtzdHJpbmd9IGNsYXNzXG4gICAgICogQHByb3BlcnR5IHtib29sZWFufSAgW2Rpc2FibGVkID0gZmFsc2VdXG4gICAgICovXG5cbiAgICAvKiogQHR5cGUge1Byb3BzfSAqL1xuICAgIGxldCB7XG4gICAgICAgIGZvcjogZm9ySWQsXG4gICAgICAgIGxhYmVsID0gXCJsYWJlbFwiLFxuICAgICAgICBjbGFzczogbGFiZWxDbGFzcyA9IFwibGFiZWxcIixcbiAgICAgICAgZGlzYWJsZWQgPSBmYWxzZSxcbiAgICAgICAgY2hpbGRyZW4sXG4gICAgfSA9ICRwcm9wcygpO1xuPC9zY3JpcHQ+XG5cbjxsYWJlbCB7ZGlzYWJsZWR9IGNsYXNzPXtsYWJlbENsYXNzfSBmb3I9e2ZvcklkfT5cbiAgICB7I2lmIGNoaWxkcmVufVxuICAgICAgICB7QHJlbmRlciBjaGlsZHJlbigpfVxuICAgIHs6ZWxzZX1cbiAgICAgICAgeyRMT0NBTEVbbGFiZWxdfVxuICAgIHsvaWZ9XG48L2xhYmVsPlxuIiwiPHNjcmlwdD5cbiAgaW1wb3J0IFVJQnV0dG9uIGZyb20gJy4uL2J1dHRvbi91aS5idXR0b24uc3ZlbHRlJztcbiAgaW1wb3J0IFVJVGFnIGZyb20gJy4uL3ZhcmlvdXMvdWkudGFnLnN2ZWx0ZSc7XG4gIGxldCB7IGJ1dHRvbiA9IHt9LCB0YWcgPSB7fSB9ID0gJHByb3BzKCk7XG5cbjwvc2NyaXB0PlxuXG48VUlCdXR0b24gey4uLmJ1dHRvbn0gLz5cbjxVSVRhZyB7Li4udGFnfSBjbGFzc2VzPVwiaXMtdG9wLXJpZ2h0XCIgLz5cbiIsIjxzY3JpcHQ+XG4gIGltcG9ydCB7b25Nb3VudH0gZnJvbSAnc3ZlbHRlJztcbiAgaW1wb3J0IFVJQnV0dG9uIGZyb20gJy4uL2J1dHRvbi91aS5idXR0b24uc3ZlbHRlJztcblxuICAvL2V4cG9ydCBsZXQgdG9wID0gJzJlbSc7XG4gIC8vZXhwb3J0IGxldCBsZWZ0ID0gJzJlbSc7XG4gIC8vZXhwb3J0IGxldCByaWdodDtcbiAgLy9leHBvcnQgbGV0IGJvdHRvbTtcbiAgXG5cbiAgLyoqXG4gICAqIEB0eXBlZGVmIHtPYmplY3R9IFByb3BzXG4gICAqIEBwcm9wZXJ0eSB7YW55fSBbdHJpZ2dlcl0gLSBleHBvcnQgbGV0IGRpcmVjdGlvbiA9ICdsZWZ0JzsgIC8vbGVmdC9yaWdodC90b3AvYm90dG9tL2Fyb3VuZFxuICAgKi9cblxuICAvKiogQHR5cGUge1Byb3BzfSAqL1xuICBsZXQgeyB0cmlnZ2VyID0ge1xuICAgICAgdGl0bGU6ICAnQ2xpY2sgbWUhJyxcbiAgICAgIGljb246ICAgJ3BsdXMnLFxuICAgICAgY29sb3I6ICAncHJpbWFyeScsXG4gICAgICBzaXplOiAgICdtZWRpdW0nXG4gIH0gfSA9ICRwcm9wcygpO1xuXG4gIGZ1bmN0aW9uIHRvZ2dsZSgpe1xuXG4gIH1cblxuICBsZXQgcG9zaXRpb25TdHlsZSA9ICRzdGF0ZSgnJyk7XG5cbiAgb25Nb3VudCgoKT0+e1xuICAgICAgcG9zaXRpb25TdHlsZSA9ICcnO1xuICB9KTtcblxuPC9zY3JpcHQ+XG5cbjxkaXYgY2xhc3M9XCJpcy1mYWJcIiBzdHlsZT1cIntwb3NpdGlvblN0eWxlfVwiPlxuICA8VUlCdXR0b24gYWN0aW9uPXt0b2dnbGV9IHsuLi50cmlnZ2VyfSAvPlxuPC9kaXY+XG5cbjxzdHlsZT5cbiAgLmlzLWZhYntcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIH1cbjwvc3R5bGU+XG4iLCI8c2NyaXB0PlxuICAgIGltcG9ydCB7IExPQ0FMRSB9IGZyb20gXCIuLi8uLi9sb2NhbGVcIjtcblxuICAgIC8qKlxuICAgICAqIEB0eXBlZGVmIHtPYmplY3R9IFByb3BzXG4gICAgICogQHByb3BlcnR5IHtzdHJpbmd9IFt0aXRsZV1cbiAgICAgKiBAcHJvcGVydHkge3N0cmluZ30gW2ZvbnRdXG4gICAgICogQHByb3BlcnR5IHtzdHJpbmd9IFtzaXplXVxuICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbc2lkZV1cbiAgICAgKiBAcHJvcGVydHkge2Jvb2xlYW59IFtwb2ludGFibGVdXG4gICAgICovXG5cbiAgICAvKiogQHR5cGUge1Byb3BzfSAqL1xuICAgIGxldCB7XG4gICAgICAgIHRpdGxlID0gXCJcIixcbiAgICAgICAgZm9udCA9IFwiXCIsXG4gICAgICAgIHNpZGUgPSBcIlwiLFxuICAgICAgICBzaXplID0gXCJcIixcbiAgICAgICAgcG9pbnRhYmxlID0gZmFsc2UsXG4gICAgfSA9ICRwcm9wcygpO1xuPC9zY3JpcHQ+XG5cbnsjaWYgdGl0bGV9XG4gICAgPHNwYW4gY2xhc3M9XCJpY29uLXRleHQge3BvaW50YWJsZSA/ICdpcy1jbGlja2FibGUnIDogJyd9XCI+XG4gICAgICAgIDxzcGFuIGNsYXNzPVwiaWNvbiB7c2l6ZSA/IGBpcy0ke3NpemV9YCA6ICcnfVwiPlxuICAgICAgICAgICAgPGlcbiAgICAgICAgICAgICAgICBjbGFzcz1cImlzLXRpdGxlLWljb24gZmFzXG4gICAgICBmYS17Zm9udH1cbiAgICAgIHtzaXplID09ICdtZWRpdW0nID8gJ2ZhLWxnJyA6ICcnfVxuICAgICAge3NpemUgPT0gJ2xhcmdlJyA/ICdmYS0yeCcgOiAnJ31cbiAgICAgIFwiXG4gICAgICAgICAgICA+PC9pPlxuICAgICAgICAgICAgPHNwYW4+eyRMT0NBTEVbdGl0bGVdfTwvc3Bhbj5cbiAgICAgICAgPC9zcGFuPlxuICAgIDwvc3Bhbj5cbns6ZWxzZX1cbiAgICA8c3BhblxuICAgICAgICBjbGFzcz1cIlxuICAgICAgICB7cG9pbnRhYmxlID8gJ2lzLWNsaWNrYWJsZScgOiAnJ31cbiAgICAgICAge3NpZGUgPyBgaXMtJHtzaWRlfWAgOiAnJ31cbiAgICAgICAgaWNvbiB7c2l6ZSA/IGBpcy0ke3NpemV9YCA6ICcnfSB7c2l6ZSA9PSAnbWVkaXVtJyA/ICdmYS1sZycgOiAnJ31cbntzaXplID09ICdsYXJnZScgPyAnZmEtMngnIDogJyd9XCJcbiAgICA+XG4gICAgICAgIDxpIGNsYXNzPVwiZmFzIGZhLXtmb250fVwiPjwvaT5cbiAgICA8L3NwYW4+XG57L2lmfVxuIiwiPHNjcmlwdD5cbiAgICAvKiBlc2xpbnQgc3ZlbHRlL25vLWF0LWh0bWwtdGFnczogMCAqL1xuXG4gICAgaW1wb3J0IFVJSWNvbkZvbnQgZnJvbSBcIi4vdWkuaWNvbi5mb250LnN2ZWx0ZVwiO1xuXG4gICAgLyoqXG4gICAgICogQHR5cGVkZWYge09iamVjdH0gUHJvcHNcbiAgICAgKiBAcHJvcGVydHkge3N0cmluZ30gW3RpdGxlXSAtIHNvbWUgbGFiZWxcbiAgICAgKiBAcHJvcGVydHkge3N0cmluZ30gW3NpemVdIC0gZm9udCBpY29uXG4gICAgICogQHByb3BlcnR5IHtzdHJpbmd9IFtmb250XVxuICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbc3ZnXSAtIHN2ZyBpY29uXG4gICAgICogQHByb3BlcnR5IHtzdHJpbmd9IFtzcmNdIC0gaW1hZ2UgaWNvblxuICAgICAqIEBwcm9wZXJ0eSB7YW55fSB3aWR0aFxuICAgICAqIEBwcm9wZXJ0eSB7YW55fSBoZWlnaHRcbiAgICAgKi9cblxuICAgIC8qKiBAdHlwZSB7UHJvcHN9ICovXG4gICAgbGV0IHtcbiAgICAgICAgdGl0bGUgPSBcIlwiLFxuICAgICAgICBzaXplID0gXCJcIixcbiAgICAgICAgZm9udCA9IFwiXCIsXG4gICAgICAgIHN2ZyA9IFwiXCIsXG4gICAgICAgIHNyYyA9IFwiXCIsXG4gICAgICAgIHdpZHRoLFxuICAgICAgICBoZWlnaHQsXG4gICAgfSA9ICRwcm9wcygpO1xuPC9zY3JpcHQ+XG5cbnsjaWYgZm9udH1cbiAgICA8VUlJY29uRm9udCB7Zm9udH0ge3NpemV9IHt0aXRsZX0+PC9VSUljb25Gb250PlxuezplbHNlIGlmIHN2Z31cbiAgICA8c3BhbiBjbGFzcz1cImljb25cIj57QGh0bWwgc3ZnfTwvc3Bhbj5cbns6ZWxzZSBpZiBzcmN9XG4gICAgPGZpZ3VyZSBjbGFzcz1cImltYWdlIHt3aWR0aCAmJiBoZWlnaHQgPyBgaXMtJHt3aWR0aH14JHtoZWlnaHR9YCA6ICcnfSBcIj5cbiAgICAgICAgPGltZyB7c3JjfSB7dGl0bGV9IGFsdD17dGl0bGV9IHt3aWR0aH0ge2hlaWdodH0gLz5cbiAgICA8L2ZpZ3VyZT5cbnsvaWZ9XG4iLCI8c2NyaXB0PlxuICAgIGltcG9ydCB7IFVJSWNvbkZvbnQgfSBmcm9tIFwiLi4vaWNvblwiO1xuXG4gICAgbGV0IHsgdmFsaWRhdGVkLCB2YWxpZCwgc2lkZSA9IFwicmlnaHRcIiwgc2l6ZSA9IFwic21hbGxcIiB9ID0gJHByb3BzKCk7XG48L3NjcmlwdD5cblxueyNpZiB2YWxpZGF0ZWQgPT09IHRydWV9XG4gICAgPFVJSWNvbkZvbnQgZm9udD17dmFsaWQgPyBcImNoZWNrXCIgOiBcImV4Y2xhbWF0aW9uLXRyaWFuZ2xlXCJ9IHtzaWRlfSB7c2l6ZX0gLz5cbnsvaWZ9XG4iLCI8c2NyaXB0PlxuICAgIGltcG9ydCBVSUxhYmVsIGZyb20gXCIuLi9pbnB1dC91aS5sYWJlbC5zdmVsdGVcIjtcbiAgICBpbXBvcnQgVUlWYWxpZGF0ZWRJY29uIGZyb20gXCIuL3VpLnZhbGlkYXRlZC5pY29uLnN2ZWx0ZVwiO1xuICAgIGltcG9ydCB7IFVJSWNvbkZvbnQgfSBmcm9tIFwiLi4vaWNvblwiO1xuXG4gICAgLyoqXG4gICAgICogQHR5cGVkZWYge09iamVjdH0gUHJvcHNcbiAgICAgKiBAcHJvcGVydHkge2FueX0gW3ZhbHVlXVxuICAgICAqIEBwcm9wZXJ0eSB7b2JqZWN0fVxuICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbbGFiZWxdXG4gICAgICogQHByb3BlcnR5IHtzdHJpbmd9IFtwbGFjZWhvbGRlcl1cbiAgICAgKiBAcHJvcGVydHkge3N0cmluZ30gZmllbGRuYW1lXG4gICAgICogQHByb3BlcnR5IHtzdHJpbmd9IGZpZWxkdHlwZVxuICAgICAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW2ljb25dXG4gICAgICogQHByb3BlcnR5IHtib29sZWFufSBbcmVxdWlyZWRdXG4gICAgICogQHByb3BlcnR5IHtib29sZWFufSBbcmVhZG9ubHldXG4gICAgICogQHByb3BlcnR5IHtib29sZWFufSBbZGlzYWJsZWRdXG4gICAgICogQHByb3BlcnR5IHtpbXBvcnQoJy4uL2V2ZW50cy50eXBlcycpLlVJRXZlbnRJbnB1dENoYW5nZUNhbGxiYWNrfSBbb25jaGFuZ2VdXG4gICAgICogQHByb3BlcnR5IHtib29sZWFufSBbdmFsaWRdXG4gICAgICovXG5cbiAgICAvKiogQHR5cGUge1Byb3BzfSAqL1xuICAgIGxldCB7XG4gICAgICAgIHZhbHVlID0gJGJpbmRhYmxlKFwiXCIpLFxuICAgICAgICBkaXNhYmxlZCxcbiAgICAgICAgcmVhZG9ubHksXG4gICAgICAgIFVJSW5wdXQsXG4gICAgICAgIGxhYmVsLFxuICAgICAgICBmaWVsZHR5cGUsXG4gICAgICAgIGZpZWxkbmFtZSxcbiAgICAgICAgZmllbGRuYW1lUHJlZml4ID0gXCJmb3JtLWZpZWxkLVwiLFxuICAgICAgICBpY29uID0gZmFsc2UsXG4gICAgICAgIHZhbGlkID0gdHJ1ZSxcbiAgICAgICAgdmFsaWRhdGVkID0gZmFsc2UsXG4gICAgICAgIC4uLm90aGVyc1xuICAgIH0gPSAkcHJvcHMoKTtcbjwvc2NyaXB0PlxuXG57I3NuaXBwZXQgaW5wdXQoKX1cbiAgICA8IS0tIHJlYWRvbmx5IFVJIHJlbmRlcmVyIC0tPlxuICAgIDxVSUlucHV0XG4gICAgICAgIHtmaWVsZHR5cGV9XG4gICAgICAgIHtmaWVsZG5hbWV9XG4gICAgICAgIHt2YWxpZH1cbiAgICAgICAge2Rpc2FibGVkfVxuICAgICAgICB7cmVhZG9ubHl9XG4gICAgICAgIGJpbmQ6dmFsdWVcbiAgICAgICAgey4uLm90aGVyc31cbiAgICAvPlxuICAgIDwhLS0gZWRpdCBVSSByZW5kZXJlciAtLT5cbiAgICB7I2lmIGljb259XG4gICAgICAgIDxVSUljb25Gb250IGZvbnQ9e2ljb259IHNpZGU9e1wibGVmdFwifSBzaXplPXtcInNtYWxsXCJ9IC8+XG4gICAgey9pZn1cbiAgICB7I2lmICFyZWFkb25seX1cbiAgICAgICAgPCEtLSB2YWxpZGF0ZWQgYW5kIHZhbGlkIHNob3VsZCBiZSBjcmVhdGVkIGJ5ICRzdGF0ZSgpIC0tPlxuICAgICAgICA8VUlWYWxpZGF0ZWRJY29uIHt2YWxpZGF0ZWR9IHt2YWxpZH0+PC9VSVZhbGlkYXRlZEljb24+XG4gICAgey9pZn1cbnsvc25pcHBldH1cblxueyNpZiBsYWJlbH1cbiAgICA8VUlMYWJlbFxuICAgICAgICBjbGFzcz17ZmllbGR0eXBlfVxuICAgICAgICB7ZGlzYWJsZWR9XG4gICAgICAgIGZvcj1cIntmaWVsZG5hbWVQcmVmaXh9e2ZpZWxkdHlwZX0te2ZpZWxkbmFtZX1cIlxuICAgID5cbiAgICAgICAge0ByZW5kZXIgaW5wdXQoKX1cbiAgICA8L1VJTGFiZWw+XG57OmVsc2V9XG4gICAge0ByZW5kZXIgaW5wdXQoKX1cbnsvaWZ9XG4iLCI8c2NyaXB0PlxuICAgIC8qKlxuICAgICAqIEB0eXBlZGVmIHtPYmplY3R9IFByb3BzXG4gICAgICogQHByb3BlcnR5IHtzdHJpbmd9IFtjbGFzc2VzXVxuICAgICAqIEBwcm9wZXJ0eSB7aW1wb3J0KCdzdmVsdGUnKS5TbmlwcGV0fSBbY2hpbGRyZW5dXG4gICAgICovXG5cbiAgICAvKiogQHR5cGUge1Byb3BzfSAqL1xuICAgIGxldCB7IGNsYXNzOiBjbGFzc2VzID0gXCJcIiwgY2hpbGRyZW4gfSA9ICRwcm9wcygpO1xuPC9zY3JpcHQ+XG5cbjxkaXYgY2xhc3M9XCJjb250cm9sIHtjbGFzc2VzfVwiPntAcmVuZGVyIGNoaWxkcmVuPy4oKX08L2Rpdj5cbiIsIjxzY3JpcHQ+XG4gICAgaW1wb3J0IElucHV0RXJyb3JzIGZyb20gXCIuL3VpLmZvcm0uaW5wdXQuZXJyb3JzLnN2ZWx0ZVwiO1xuICAgIGltcG9ydCBVSUZvcm1JbnB1dCBmcm9tIFwiLi91aS5mb3JtLmlucHV0LnN2ZWx0ZVwiO1xuICAgIGltcG9ydCBVSUNvbnRyb2wgZnJvbSBcIi4uL2lucHV0L3VpLmNvbnRyb2wuc3ZlbHRlXCI7XG5cbiAgICAvKipcbiAgICAgKiBAdHlwZWRlZiB7T2JqZWN0fSBQcm9wc1xuICAgICAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW2lucHV0U3RhcnRlZF1cbiAgICAgKiBAcHJvcGVydHkge2Jvb2xlYW59IFt2YWx1ZV1cbiAgICAgKiBAcHJvcGVydHkge3N0cmluZ30gW2xhYmVsXVxuICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbcGxhY2Vob2xkZXJdXG4gICAgICogQHByb3BlcnR5IHtzdHJpbmd9IGZpZWxkbmFtZVxuICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBmaWVsZHR5cGVcbiAgICAgKiBAcHJvcGVydHkge2Jvb2xlYW59IFtpY29uXVxuICAgICAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW3JlcXVpcmVkXVxuICAgICAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW3JlYWRvbmx5XVxuICAgICAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW2Rpc2FibGVkXVxuICAgICAqIEBwcm9wZXJ0eSB7aW1wb3J0KCcuLi9ldmVudHMudHlwZXMnKS5VSUV2ZW50SW5wdXRDaGFuZ2VDYWxsYmFja30gW29uY2hhbmdlXVxuICAgICAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW3ZhbGlkXVxuICAgICAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW3ZhbGlkYXRlZF1cbiAgICAgKiBAcHJvcGVydHkge2Jvb2xlYW59IFtlcnJvcnNdXG4gICAgICogQHByb3BlcnR5IHtib29sZWFufSBbZm9ybUVycm9yc11cbiAgICAgKiBAcHJvcGVydHkge2Jvb2xlYW59IFtmb3JtTGV2ZWxFcnJvcl1cbiAgICAgKi9cblxuICAgIC8qKiBAdHlwZSB7UHJvcHN9ICovXG4gICAgbGV0IHtcbiAgICAgICAgdmFsdWUgPSAkYmluZGFibGUoXCJcIiksXG4gICAgICAgIFVJSW5wdXQsXG4gICAgICAgIGlucHV0U3RhcnRlZCA9IGZhbHNlLFxuICAgICAgICBsYWJlbCxcbiAgICAgICAgcGxhY2Vob2xkZXIgPSBcIlwiLFxuICAgICAgICBmaWVsZHR5cGUsXG4gICAgICAgIGZpZWxkbmFtZSxcbiAgICAgICAgZmllbGRuYW1lUHJlZml4ID0gXCJmb3JtLWZpZWxkLVwiLFxuICAgICAgICBpY29uID0gZmFsc2UsXG4gICAgICAgIHJlcXVpcmVkID0gdHJ1ZSxcbiAgICAgICAgcmVhZG9ubHkgPSBmYWxzZSxcbiAgICAgICAgZGlzYWJsZWQgPSBmYWxzZSxcbiAgICAgICAgdmFsaWQgPSB0cnVlLFxuICAgICAgICB2YWxpZGF0ZWQgPSBmYWxzZSxcbiAgICAgICAgZXJyb3JzID0gZmFsc2UsXG4gICAgICAgIG9uY2hhbmdlID0gKCkgPT4gdHJ1ZSxcbiAgICAgICAgb25lcnJvciA9ICgpID0+IHRydWUsXG4gICAgICAgIGZvcm1FcnJvcnMgPSBmYWxzZSxcbiAgICAgICAgLi4ub3RoZXJzXG4gICAgfSA9ICRwcm9wcygpO1xuXG4gICAgbGV0IGljb25DbGFzc2VzID0gJGRlcml2ZWQoXG4gICAgICAgIChpY29uID8gXCIgaGFzLWljb25zLWxlZnQgXCIgOiBcIlwiKSArIFwiIGhhcy1pY29ucy1yaWdodCBcIlxuICAgICk7XG48L3NjcmlwdD5cblxuPFVJQ29udHJvbCBjbGFzcz17aWNvbkNsYXNzZXN9PlxuICAgIDxVSUZvcm1JbnB1dFxuICAgICAgICBiaW5kOnZhbHVlXG4gICAgICAgIHtVSUlucHV0fVxuICAgICAgICB7bGFiZWx9XG4gICAgICAgIHtwbGFjZWhvbGRlcn1cbiAgICAgICAge2ZpZWxkdHlwZX1cbiAgICAgICAge2ZpZWxkbmFtZX1cbiAgICAgICAge2ZpZWxkbmFtZVByZWZpeH1cbiAgICAgICAge2ljb259XG4gICAgICAgIHtyZXF1aXJlZH1cbiAgICAgICAge3JlYWRvbmx5fVxuICAgICAgICB7ZGlzYWJsZWR9XG4gICAgICAgIHt2YWxpZH1cbiAgICAgICAge29uY2hhbmdlfVxuICAgICAgICB7b25lcnJvcn1cbiAgICAgICAgey4uLm90aGVyc31cbiAgICAvPlxuPC9VSUNvbnRyb2w+XG5cbjxJbnB1dEVycm9yc1xuICAgIHtpbnB1dFN0YXJ0ZWR9XG4gICAge3ZhbGlkYXRlZH1cbiAgICB7dmFsaWR9XG4gICAge2Vycm9yc31cbiAgICB7Zm9ybUVycm9yc31cbiAgICBpZD1cImlucHV0LWZpZWxkLWhlbHBlci17ZmllbGRuYW1lfVwiXG4vPlxuIiwiPHNjcmlwdD5cbiAgICAvKipcbiAgICAgKiBAdHlwZWRlZiB7T2JqZWN0fSBQcm9wc1xuICAgICAqIEBwcm9wZXJ0eSB7YW55fSB1cmxGdWxsXG4gICAgICogQHByb3BlcnR5IHthbnl9IHVybFxuICAgICAqIEBwcm9wZXJ0eSB7YW55fSB0aXRsZVxuICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbY29yc11cbiAgICAgKiBAcHJvcGVydHkge251bWJlcn0gW3NpemVdXG4gICAgICogQHByb3BlcnR5IHtib29sZWFufSBbY29udGFpbmVkXVxuICAgICAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW2NvdmVyZWRdXG4gICAgICogQHByb3BlcnR5IHtzdHJpbmd9IFtjbGFzc2VzXVxuICAgICAqL1xuXG4gICAgLyoqIEB0eXBlIHtQcm9wc30gKi9cbiAgICBsZXQge1xuICAgICAgICB1cmxGdWxsLFxuICAgICAgICB1cmwsXG4gICAgICAgIHRpdGxlLFxuICAgICAgICBjb3JzID0gXCJhbm9ueW1vdXNcIixcbiAgICAgICAgc2l6ZSA9IDY0LFxuICAgICAgICBjb250YWluZWQgPSB0cnVlLFxuICAgICAgICBjb3ZlcmVkID0gdHJ1ZSxcbiAgICAgICAgY2xhc3NlcyA9IFwiXCIsXG4gICAgICAgIG9uY2xpY2sgPSAoKSA9PiB0cnVlLFxuICAgICAgICBvbmtleXVwID0gKCkgPT4gdHJ1ZSxcbiAgICB9ID0gJHByb3BzKCk7XG5cbiAgICBsZXQgc2l6ZVN0eWxlID0gJGRlcml2ZWQoaXNOYU4oc2l6ZSkgPyBgaXMtJHtzaXplfWAgOiBgaXMtJHtzaXplfXgke3NpemV9YCk7XG4gICAgbGV0IGNvbnRhaW5lZFN0eWxlID0gJGRlcml2ZWQoY29udGFpbmVkID8gXCJpcy1jb250YWluZWRcIiA6IFwiXCIpO1xuICAgIGxldCBjb3ZlcmVkU3R5bGUgPSAkZGVyaXZlZChjb3ZlcmVkID8gXCJpcy1jb3ZlcmVkXCIgOiBcIlwiKTtcbjwvc2NyaXB0PlxuXG48IS0tIHN2ZWx0ZS1pZ25vcmUgYTExeV9ub19ub25pbnRlcmFjdGl2ZV9lbGVtZW50X2ludGVyYWN0aW9ucyAtLT5cbnsjaWYgdXJsRnVsbH1cbiAgICA8YSBocmVmPXt1cmxGdWxsfSBhbHQ9e3RpdGxlfSB7b25jbGlja30+XG4gICAgICAgIDxmaWd1cmVcbiAgICAgICAgICAgIGNsYXNzPVwiaW1hZ2Uge3NpemVTdHlsZX0ge2NvbnRhaW5lZFN0eWxlfSB7Y292ZXJlZFN0eWxlfSB7Y2xhc3Nlc31cIlxuICAgICAgICA+XG4gICAgICAgICAgICA8aW1nIGNsYXNzPVwiXCIgYWx0PXt0aXRsZX0gc3JjPXt1cmx9IGNyb3NzT3JpZ2luPXtjb3JzfSAvPlxuICAgICAgICA8L2ZpZ3VyZT5cbiAgICA8L2E+XG57OmVsc2V9XG4gICAgPGZpZ3VyZSBjbGFzcz1cImltYWdlIHtzaXplU3R5bGV9IHtjb250YWluZWRTdHlsZX0ge2NvdmVyZWRTdHlsZX0ge2NsYXNzZXN9XCI+XG4gICAgICAgIDxpbWdcbiAgICAgICAgICAgIHtvbmNsaWNrfVxuICAgICAgICAgICAge29ua2V5dXB9XG4gICAgICAgICAgICBjbGFzcz1cIlwiXG4gICAgICAgICAgICBhbHQ9e3RpdGxlfVxuICAgICAgICAgICAgc3JjPXt1cmx9XG4gICAgICAgICAgICBjcm9zc09yaWdpbj17Y29yc31cbiAgICAgICAgLz5cbiAgICA8L2ZpZ3VyZT5cbnsvaWZ9XG4iLCI8c2NyaXB0PlxuICAgIGltcG9ydCBVSUltYWdlIGZyb20gXCIuL3VpLmltYWdlLnN2ZWx0ZVwiO1xuICAgIGxldCB7IHZhbHVlcyA9IFtdIH0gPSAkcHJvcHMoKTtcbjwvc2NyaXB0PlxuXG57I2VhY2ggdmFsdWVzIGFzIGl0ZW0gKGl0ZW0udXJsKX1cbiAgICA8VUlJbWFnZSB7Li4uaXRlbX0gb246Y2xpY2sgLz5cbnsvZWFjaH1cbiIsImltcG9ydCB7IGVuYWJsZV9sZWdhY3lfbW9kZV9mbGFnIH0gZnJvbSAnLi9pbmRleC5qcyc7XG5cbmVuYWJsZV9sZWdhY3lfbW9kZV9mbGFnKCk7XG4iLCIvKlxuQWRhcHRlZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9tYXR0ZGVzbFxuRGlzdHJpYnV0ZWQgdW5kZXIgTUlUIExpY2Vuc2UgaHR0cHM6Ly9naXRodWIuY29tL21hdHRkZXNsL2Vhc2VzL2Jsb2IvbWFzdGVyL0xJQ0VOU0UubWRcbiovXG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IHRcbiAqIEByZXR1cm5zIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBsaW5lYXIodCkge1xuXHRyZXR1cm4gdDtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gdFxuICogQHJldHVybnMge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGJhY2tJbk91dCh0KSB7XG5cdGNvbnN0IHMgPSAxLjcwMTU4ICogMS41MjU7XG5cdGlmICgodCAqPSAyKSA8IDEpIHJldHVybiAwLjUgKiAodCAqIHQgKiAoKHMgKyAxKSAqIHQgLSBzKSk7XG5cdHJldHVybiAwLjUgKiAoKHQgLT0gMikgKiB0ICogKChzICsgMSkgKiB0ICsgcykgKyAyKTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gdFxuICogQHJldHVybnMge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGJhY2tJbih0KSB7XG5cdGNvbnN0IHMgPSAxLjcwMTU4O1xuXHRyZXR1cm4gdCAqIHQgKiAoKHMgKyAxKSAqIHQgLSBzKTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gdFxuICogQHJldHVybnMge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGJhY2tPdXQodCkge1xuXHRjb25zdCBzID0gMS43MDE1ODtcblx0cmV0dXJuIC0tdCAqIHQgKiAoKHMgKyAxKSAqIHQgKyBzKSArIDE7XG59XG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IHRcbiAqIEByZXR1cm5zIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBib3VuY2VPdXQodCkge1xuXHRjb25zdCBhID0gNC4wIC8gMTEuMDtcblx0Y29uc3QgYiA9IDguMCAvIDExLjA7XG5cdGNvbnN0IGMgPSA5LjAgLyAxMC4wO1xuXHRjb25zdCBjYSA9IDQzNTYuMCAvIDM2MS4wO1xuXHRjb25zdCBjYiA9IDM1NDQyLjAgLyAxODA1LjA7XG5cdGNvbnN0IGNjID0gMTYwNjEuMCAvIDE4MDUuMDtcblx0Y29uc3QgdDIgPSB0ICogdDtcblx0cmV0dXJuIHQgPCBhXG5cdFx0PyA3LjU2MjUgKiB0MlxuXHRcdDogdCA8IGJcblx0XHRcdD8gOS4wNzUgKiB0MiAtIDkuOSAqIHQgKyAzLjRcblx0XHRcdDogdCA8IGNcblx0XHRcdFx0PyBjYSAqIHQyIC0gY2IgKiB0ICsgY2Ncblx0XHRcdFx0OiAxMC44ICogdCAqIHQgLSAyMC41MiAqIHQgKyAxMC43Mjtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gdFxuICogQHJldHVybnMge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGJvdW5jZUluT3V0KHQpIHtcblx0cmV0dXJuIHQgPCAwLjUgPyAwLjUgKiAoMS4wIC0gYm91bmNlT3V0KDEuMCAtIHQgKiAyLjApKSA6IDAuNSAqIGJvdW5jZU91dCh0ICogMi4wIC0gMS4wKSArIDAuNTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gdFxuICogQHJldHVybnMge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGJvdW5jZUluKHQpIHtcblx0cmV0dXJuIDEuMCAtIGJvdW5jZU91dCgxLjAgLSB0KTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gdFxuICogQHJldHVybnMge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNpcmNJbk91dCh0KSB7XG5cdGlmICgodCAqPSAyKSA8IDEpIHJldHVybiAtMC41ICogKE1hdGguc3FydCgxIC0gdCAqIHQpIC0gMSk7XG5cdHJldHVybiAwLjUgKiAoTWF0aC5zcXJ0KDEgLSAodCAtPSAyKSAqIHQpICsgMSk7XG59XG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IHRcbiAqIEByZXR1cm5zIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjaXJjSW4odCkge1xuXHRyZXR1cm4gMS4wIC0gTWF0aC5zcXJ0KDEuMCAtIHQgKiB0KTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gdFxuICogQHJldHVybnMge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNpcmNPdXQodCkge1xuXHRyZXR1cm4gTWF0aC5zcXJ0KDEgLSAtLXQgKiB0KTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gdFxuICogQHJldHVybnMge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGN1YmljSW5PdXQodCkge1xuXHRyZXR1cm4gdCA8IDAuNSA/IDQuMCAqIHQgKiB0ICogdCA6IDAuNSAqIE1hdGgucG93KDIuMCAqIHQgLSAyLjAsIDMuMCkgKyAxLjA7XG59XG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IHRcbiAqIEByZXR1cm5zIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjdWJpY0luKHQpIHtcblx0cmV0dXJuIHQgKiB0ICogdDtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gdFxuICogQHJldHVybnMge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGN1YmljT3V0KHQpIHtcblx0Y29uc3QgZiA9IHQgLSAxLjA7XG5cdHJldHVybiBmICogZiAqIGYgKyAxLjA7XG59XG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IHRcbiAqIEByZXR1cm5zIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBlbGFzdGljSW5PdXQodCkge1xuXHRyZXR1cm4gdCA8IDAuNVxuXHRcdD8gMC41ICogTWF0aC5zaW4oKCgrMTMuMCAqIE1hdGguUEkpIC8gMikgKiAyLjAgKiB0KSAqIE1hdGgucG93KDIuMCwgMTAuMCAqICgyLjAgKiB0IC0gMS4wKSlcblx0XHQ6IDAuNSAqXG5cdFx0XHRcdE1hdGguc2luKCgoLTEzLjAgKiBNYXRoLlBJKSAvIDIpICogKDIuMCAqIHQgLSAxLjAgKyAxLjApKSAqXG5cdFx0XHRcdE1hdGgucG93KDIuMCwgLTEwLjAgKiAoMi4wICogdCAtIDEuMCkpICtcblx0XHRcdFx0MS4wO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSB0XG4gKiBAcmV0dXJucyB7bnVtYmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gZWxhc3RpY0luKHQpIHtcblx0cmV0dXJuIE1hdGguc2luKCgxMy4wICogdCAqIE1hdGguUEkpIC8gMikgKiBNYXRoLnBvdygyLjAsIDEwLjAgKiAodCAtIDEuMCkpO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSB0XG4gKiBAcmV0dXJucyB7bnVtYmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gZWxhc3RpY091dCh0KSB7XG5cdHJldHVybiBNYXRoLnNpbigoLTEzLjAgKiAodCArIDEuMCkgKiBNYXRoLlBJKSAvIDIpICogTWF0aC5wb3coMi4wLCAtMTAuMCAqIHQpICsgMS4wO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSB0XG4gKiBAcmV0dXJucyB7bnVtYmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gZXhwb0luT3V0KHQpIHtcblx0cmV0dXJuIHQgPT09IDAuMCB8fCB0ID09PSAxLjBcblx0XHQ/IHRcblx0XHQ6IHQgPCAwLjVcblx0XHRcdD8gKzAuNSAqIE1hdGgucG93KDIuMCwgMjAuMCAqIHQgLSAxMC4wKVxuXHRcdFx0OiAtMC41ICogTWF0aC5wb3coMi4wLCAxMC4wIC0gdCAqIDIwLjApICsgMS4wO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSB0XG4gKiBAcmV0dXJucyB7bnVtYmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gZXhwb0luKHQpIHtcblx0cmV0dXJuIHQgPT09IDAuMCA/IHQgOiBNYXRoLnBvdygyLjAsIDEwLjAgKiAodCAtIDEuMCkpO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSB0XG4gKiBAcmV0dXJucyB7bnVtYmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gZXhwb091dCh0KSB7XG5cdHJldHVybiB0ID09PSAxLjAgPyB0IDogMS4wIC0gTWF0aC5wb3coMi4wLCAtMTAuMCAqIHQpO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSB0XG4gKiBAcmV0dXJucyB7bnVtYmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gcXVhZEluT3V0KHQpIHtcblx0dCAvPSAwLjU7XG5cdGlmICh0IDwgMSkgcmV0dXJuIDAuNSAqIHQgKiB0O1xuXHR0LS07XG5cdHJldHVybiAtMC41ICogKHQgKiAodCAtIDIpIC0gMSk7XG59XG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IHRcbiAqIEByZXR1cm5zIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBxdWFkSW4odCkge1xuXHRyZXR1cm4gdCAqIHQ7XG59XG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IHRcbiAqIEByZXR1cm5zIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBxdWFkT3V0KHQpIHtcblx0cmV0dXJuIC10ICogKHQgLSAyLjApO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSB0XG4gKiBAcmV0dXJucyB7bnVtYmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gcXVhcnRJbk91dCh0KSB7XG5cdHJldHVybiB0IDwgMC41ID8gKzguMCAqIE1hdGgucG93KHQsIDQuMCkgOiAtOC4wICogTWF0aC5wb3codCAtIDEuMCwgNC4wKSArIDEuMDtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gdFxuICogQHJldHVybnMge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHF1YXJ0SW4odCkge1xuXHRyZXR1cm4gTWF0aC5wb3codCwgNC4wKTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gdFxuICogQHJldHVybnMge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHF1YXJ0T3V0KHQpIHtcblx0cmV0dXJuIE1hdGgucG93KHQgLSAxLjAsIDMuMCkgKiAoMS4wIC0gdCkgKyAxLjA7XG59XG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IHRcbiAqIEByZXR1cm5zIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBxdWludEluT3V0KHQpIHtcblx0aWYgKCh0ICo9IDIpIDwgMSkgcmV0dXJuIDAuNSAqIHQgKiB0ICogdCAqIHQgKiB0O1xuXHRyZXR1cm4gMC41ICogKCh0IC09IDIpICogdCAqIHQgKiB0ICogdCArIDIpO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSB0XG4gKiBAcmV0dXJucyB7bnVtYmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gcXVpbnRJbih0KSB7XG5cdHJldHVybiB0ICogdCAqIHQgKiB0ICogdDtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gdFxuICogQHJldHVybnMge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHF1aW50T3V0KHQpIHtcblx0cmV0dXJuIC0tdCAqIHQgKiB0ICogdCAqIHQgKyAxO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSB0XG4gKiBAcmV0dXJucyB7bnVtYmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gc2luZUluT3V0KHQpIHtcblx0cmV0dXJuIC0wLjUgKiAoTWF0aC5jb3MoTWF0aC5QSSAqIHQpIC0gMSk7XG59XG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IHRcbiAqIEByZXR1cm5zIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzaW5lSW4odCkge1xuXHRjb25zdCB2ID0gTWF0aC5jb3ModCAqIE1hdGguUEkgKiAwLjUpO1xuXHRpZiAoTWF0aC5hYnModikgPCAxZS0xNCkgcmV0dXJuIDE7XG5cdGVsc2UgcmV0dXJuIDEgLSB2O1xufVxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSB0XG4gKiBAcmV0dXJucyB7bnVtYmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gc2luZU91dCh0KSB7XG5cdHJldHVybiBNYXRoLnNpbigodCAqIE1hdGguUEkpIC8gMik7XG59XG4iLCIvKiogQGltcG9ydCB7IEZsaXBQYXJhbXMsIEFuaW1hdGlvbkNvbmZpZyB9IGZyb20gJy4vcHVibGljLmpzJyAqL1xuaW1wb3J0IHsgY3ViaWNPdXQgfSBmcm9tICcuLi9lYXNpbmcvaW5kZXguanMnO1xuXG4vKipcbiAqIFRoZSBmbGlwIGZ1bmN0aW9uIGNhbGN1bGF0ZXMgdGhlIHN0YXJ0IGFuZCBlbmQgcG9zaXRpb24gb2YgYW4gZWxlbWVudCBhbmQgYW5pbWF0ZXMgYmV0d2VlbiB0aGVtLCB0cmFuc2xhdGluZyB0aGUgeCBhbmQgeSB2YWx1ZXMuXG4gKiBgZmxpcGAgc3RhbmRzIGZvciBbRmlyc3QsIExhc3QsIEludmVydCwgUGxheV0oaHR0cHM6Ly9hZXJvdHdpc3QuY29tL2Jsb2cvZmxpcC15b3VyLWFuaW1hdGlvbnMvKS5cbiAqXG4gKiBAcGFyYW0ge0VsZW1lbnR9IG5vZGVcbiAqIEBwYXJhbSB7eyBmcm9tOiBET01SZWN0OyB0bzogRE9NUmVjdCB9fSBmcm9tVG9cbiAqIEBwYXJhbSB7RmxpcFBhcmFtc30gcGFyYW1zXG4gKiBAcmV0dXJucyB7QW5pbWF0aW9uQ29uZmlnfVxuICovXG5leHBvcnQgZnVuY3Rpb24gZmxpcChub2RlLCB7IGZyb20sIHRvIH0sIHBhcmFtcyA9IHt9KSB7XG5cdHZhciBzdHlsZSA9IGdldENvbXB1dGVkU3R5bGUobm9kZSk7XG5cdHZhciB6b29tID0gZ2V0X3pvb20obm9kZSk7IC8vIGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3Mtdmlld3BvcnQvI2VmZmVjdGl2ZS16b29tXG5cblx0dmFyIHRyYW5zZm9ybSA9IHN0eWxlLnRyYW5zZm9ybSA9PT0gJ25vbmUnID8gJycgOiBzdHlsZS50cmFuc2Zvcm07XG5cdHZhciBbb3gsIG95XSA9IHN0eWxlLnRyYW5zZm9ybU9yaWdpbi5zcGxpdCgnICcpLm1hcChwYXJzZUZsb2F0KTtcblx0dmFyIGRzeCA9IGZyb20ud2lkdGggLyB0by53aWR0aDtcblx0dmFyIGRzeSA9IGZyb20uaGVpZ2h0IC8gdG8uaGVpZ2h0O1xuXG5cdHZhciBkeCA9IChmcm9tLmxlZnQgKyBkc3ggKiBveCAtICh0by5sZWZ0ICsgb3gpKSAvIHpvb207XG5cdHZhciBkeSA9IChmcm9tLnRvcCArIGRzeSAqIG95IC0gKHRvLnRvcCArIG95KSkgLyB6b29tO1xuXHR2YXIgeyBkZWxheSA9IDAsIGR1cmF0aW9uID0gKGQpID0+IE1hdGguc3FydChkKSAqIDEyMCwgZWFzaW5nID0gY3ViaWNPdXQgfSA9IHBhcmFtcztcblxuXHRyZXR1cm4ge1xuXHRcdGRlbGF5LFxuXHRcdGR1cmF0aW9uOiB0eXBlb2YgZHVyYXRpb24gPT09ICdmdW5jdGlvbicgPyBkdXJhdGlvbihNYXRoLnNxcnQoZHggKiBkeCArIGR5ICogZHkpKSA6IGR1cmF0aW9uLFxuXHRcdGVhc2luZyxcblx0XHRjc3M6ICh0LCB1KSA9PiB7XG5cdFx0XHR2YXIgeCA9IHUgKiBkeDtcblx0XHRcdHZhciB5ID0gdSAqIGR5O1xuXHRcdFx0dmFyIHN4ID0gdCArIHUgKiBkc3g7XG5cdFx0XHR2YXIgc3kgPSB0ICsgdSAqIGRzeTtcblx0XHRcdHJldHVybiBgdHJhbnNmb3JtOiAke3RyYW5zZm9ybX0gc2NhbGUoJHtzeH0sICR7c3l9KSB0cmFuc2xhdGUoJHt4fXB4LCAke3l9cHgpO2A7XG5cdFx0fVxuXHR9O1xufVxuXG4vKipcbiAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudFxuICovXG5mdW5jdGlvbiBnZXRfem9vbShlbGVtZW50KSB7XG5cdGlmICgnY3VycmVudENTU1pvb20nIGluIGVsZW1lbnQpIHtcblx0XHRyZXR1cm4gLyoqIEB0eXBlIHtudW1iZXJ9ICovIChlbGVtZW50LmN1cnJlbnRDU1Nab29tKTtcblx0fVxuXG5cdC8qKiBAdHlwZSB7RWxlbWVudCB8IG51bGx9ICovXG5cdHZhciBjdXJyZW50ID0gZWxlbWVudDtcblx0dmFyIHpvb20gPSAxO1xuXG5cdHdoaWxlIChjdXJyZW50ICE9PSBudWxsKSB7XG5cdFx0em9vbSAqPSArZ2V0Q29tcHV0ZWRTdHlsZShjdXJyZW50KS56b29tO1xuXHRcdGN1cnJlbnQgPSAvKiogQHR5cGUge0VsZW1lbnQgfCBudWxsfSAqLyAoY3VycmVudC5wYXJlbnRFbGVtZW50KTtcblx0fVxuXG5cdHJldHVybiB6b29tO1xufVxuIiwiLyoqIEBpbXBvcnQgeyBCbHVyUGFyYW1zLCBDcm9zc2ZhZGVQYXJhbXMsIERyYXdQYXJhbXMsIEZhZGVQYXJhbXMsIEZseVBhcmFtcywgU2NhbGVQYXJhbXMsIFNsaWRlUGFyYW1zLCBUcmFuc2l0aW9uQ29uZmlnIH0gZnJvbSAnLi9wdWJsaWMnICovXG4vKiogQHBhcmFtIHtudW1iZXJ9IHggKi9cbmNvbnN0IGxpbmVhciA9ICh4KSA9PiB4O1xuXG4vKiogQHBhcmFtIHtudW1iZXJ9IHQgKi9cbmZ1bmN0aW9uIGN1YmljX291dCh0KSB7XG5cdGNvbnN0IGYgPSB0IC0gMS4wO1xuXHRyZXR1cm4gZiAqIGYgKiBmICsgMS4wO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSB0XG4gKiBAcmV0dXJucyB7bnVtYmVyfVxuICovXG5mdW5jdGlvbiBjdWJpY19pbl9vdXQodCkge1xuXHRyZXR1cm4gdCA8IDAuNSA/IDQuMCAqIHQgKiB0ICogdCA6IDAuNSAqIE1hdGgucG93KDIuMCAqIHQgLSAyLjAsIDMuMCkgKyAxLjA7XG59XG5cbi8qKiBAcGFyYW0ge251bWJlciB8IHN0cmluZ30gdmFsdWVcbiAqIEByZXR1cm5zIHtbbnVtYmVyLCBzdHJpbmddfVxuICovXG5mdW5jdGlvbiBzcGxpdF9jc3NfdW5pdCh2YWx1ZSkge1xuXHRjb25zdCBzcGxpdCA9IHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgJiYgdmFsdWUubWF0Y2goL15cXHMqKC0/W1xcZC5dKykoW15cXHNdKilcXHMqJC8pO1xuXHRyZXR1cm4gc3BsaXQgPyBbcGFyc2VGbG9hdChzcGxpdFsxXSksIHNwbGl0WzJdIHx8ICdweCddIDogWy8qKiBAdHlwZSB7bnVtYmVyfSAqLyAodmFsdWUpLCAncHgnXTtcbn1cblxuLyoqXG4gKiBBbmltYXRlcyBhIGBibHVyYCBmaWx0ZXIgYWxvbmdzaWRlIGFuIGVsZW1lbnQncyBvcGFjaXR5LlxuICpcbiAqIEBwYXJhbSB7RWxlbWVudH0gbm9kZVxuICogQHBhcmFtIHtCbHVyUGFyYW1zfSBbcGFyYW1zXVxuICogQHJldHVybnMge1RyYW5zaXRpb25Db25maWd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBibHVyKFxuXHRub2RlLFxuXHR7IGRlbGF5ID0gMCwgZHVyYXRpb24gPSA0MDAsIGVhc2luZyA9IGN1YmljX2luX291dCwgYW1vdW50ID0gNSwgb3BhY2l0eSA9IDAgfSA9IHt9XG4pIHtcblx0Y29uc3Qgc3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKG5vZGUpO1xuXHRjb25zdCB0YXJnZXRfb3BhY2l0eSA9ICtzdHlsZS5vcGFjaXR5O1xuXHRjb25zdCBmID0gc3R5bGUuZmlsdGVyID09PSAnbm9uZScgPyAnJyA6IHN0eWxlLmZpbHRlcjtcblx0Y29uc3Qgb2QgPSB0YXJnZXRfb3BhY2l0eSAqICgxIC0gb3BhY2l0eSk7XG5cdGNvbnN0IFt2YWx1ZSwgdW5pdF0gPSBzcGxpdF9jc3NfdW5pdChhbW91bnQpO1xuXHRyZXR1cm4ge1xuXHRcdGRlbGF5LFxuXHRcdGR1cmF0aW9uLFxuXHRcdGVhc2luZyxcblx0XHRjc3M6IChfdCwgdSkgPT4gYG9wYWNpdHk6ICR7dGFyZ2V0X29wYWNpdHkgLSBvZCAqIHV9OyBmaWx0ZXI6ICR7Zn0gYmx1cigke3UgKiB2YWx1ZX0ke3VuaXR9KTtgXG5cdH07XG59XG5cbi8qKlxuICogQW5pbWF0ZXMgdGhlIG9wYWNpdHkgb2YgYW4gZWxlbWVudCBmcm9tIDAgdG8gdGhlIGN1cnJlbnQgb3BhY2l0eSBmb3IgYGluYCB0cmFuc2l0aW9ucyBhbmQgZnJvbSB0aGUgY3VycmVudCBvcGFjaXR5IHRvIDAgZm9yIGBvdXRgIHRyYW5zaXRpb25zLlxuICpcbiAqIEBwYXJhbSB7RWxlbWVudH0gbm9kZVxuICogQHBhcmFtIHtGYWRlUGFyYW1zfSBbcGFyYW1zXVxuICogQHJldHVybnMge1RyYW5zaXRpb25Db25maWd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmYWRlKG5vZGUsIHsgZGVsYXkgPSAwLCBkdXJhdGlvbiA9IDQwMCwgZWFzaW5nID0gbGluZWFyIH0gPSB7fSkge1xuXHRjb25zdCBvID0gK2dldENvbXB1dGVkU3R5bGUobm9kZSkub3BhY2l0eTtcblx0cmV0dXJuIHtcblx0XHRkZWxheSxcblx0XHRkdXJhdGlvbixcblx0XHRlYXNpbmcsXG5cdFx0Y3NzOiAodCkgPT4gYG9wYWNpdHk6ICR7dCAqIG99YFxuXHR9O1xufVxuXG4vKipcbiAqIEFuaW1hdGVzIHRoZSB4IGFuZCB5IHBvc2l0aW9ucyBhbmQgdGhlIG9wYWNpdHkgb2YgYW4gZWxlbWVudC4gYGluYCB0cmFuc2l0aW9ucyBhbmltYXRlIGZyb20gdGhlIHByb3ZpZGVkIHZhbHVlcywgcGFzc2VkIGFzIHBhcmFtZXRlcnMgdG8gdGhlIGVsZW1lbnQncyBkZWZhdWx0IHZhbHVlcy4gYG91dGAgdHJhbnNpdGlvbnMgYW5pbWF0ZSBmcm9tIHRoZSBlbGVtZW50J3MgZGVmYXVsdCB2YWx1ZXMgdG8gdGhlIHByb3ZpZGVkIHZhbHVlcy5cbiAqXG4gKiBAcGFyYW0ge0VsZW1lbnR9IG5vZGVcbiAqIEBwYXJhbSB7Rmx5UGFyYW1zfSBbcGFyYW1zXVxuICogQHJldHVybnMge1RyYW5zaXRpb25Db25maWd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmbHkoXG5cdG5vZGUsXG5cdHsgZGVsYXkgPSAwLCBkdXJhdGlvbiA9IDQwMCwgZWFzaW5nID0gY3ViaWNfb3V0LCB4ID0gMCwgeSA9IDAsIG9wYWNpdHkgPSAwIH0gPSB7fVxuKSB7XG5cdGNvbnN0IHN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZShub2RlKTtcblx0Y29uc3QgdGFyZ2V0X29wYWNpdHkgPSArc3R5bGUub3BhY2l0eTtcblx0Y29uc3QgdHJhbnNmb3JtID0gc3R5bGUudHJhbnNmb3JtID09PSAnbm9uZScgPyAnJyA6IHN0eWxlLnRyYW5zZm9ybTtcblx0Y29uc3Qgb2QgPSB0YXJnZXRfb3BhY2l0eSAqICgxIC0gb3BhY2l0eSk7XG5cdGNvbnN0IFt4X3ZhbHVlLCB4X3VuaXRdID0gc3BsaXRfY3NzX3VuaXQoeCk7XG5cdGNvbnN0IFt5X3ZhbHVlLCB5X3VuaXRdID0gc3BsaXRfY3NzX3VuaXQoeSk7XG5cdHJldHVybiB7XG5cdFx0ZGVsYXksXG5cdFx0ZHVyYXRpb24sXG5cdFx0ZWFzaW5nLFxuXHRcdGNzczogKHQsIHUpID0+IGBcblx0XHRcdHRyYW5zZm9ybTogJHt0cmFuc2Zvcm19IHRyYW5zbGF0ZSgkeygxIC0gdCkgKiB4X3ZhbHVlfSR7eF91bml0fSwgJHsoMSAtIHQpICogeV92YWx1ZX0ke3lfdW5pdH0pO1xuXHRcdFx0b3BhY2l0eTogJHt0YXJnZXRfb3BhY2l0eSAtIG9kICogdX1gXG5cdH07XG59XG5cbi8qKlxuICogU2xpZGVzIGFuIGVsZW1lbnQgaW4gYW5kIG91dC5cbiAqXG4gKiBAcGFyYW0ge0VsZW1lbnR9IG5vZGVcbiAqIEBwYXJhbSB7U2xpZGVQYXJhbXN9IFtwYXJhbXNdXG4gKiBAcmV0dXJucyB7VHJhbnNpdGlvbkNvbmZpZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNsaWRlKG5vZGUsIHsgZGVsYXkgPSAwLCBkdXJhdGlvbiA9IDQwMCwgZWFzaW5nID0gY3ViaWNfb3V0LCBheGlzID0gJ3knIH0gPSB7fSkge1xuXHRjb25zdCBzdHlsZSA9IGdldENvbXB1dGVkU3R5bGUobm9kZSk7XG5cdGNvbnN0IG9wYWNpdHkgPSArc3R5bGUub3BhY2l0eTtcblx0Y29uc3QgcHJpbWFyeV9wcm9wZXJ0eSA9IGF4aXMgPT09ICd5JyA/ICdoZWlnaHQnIDogJ3dpZHRoJztcblx0Y29uc3QgcHJpbWFyeV9wcm9wZXJ0eV92YWx1ZSA9IHBhcnNlRmxvYXQoc3R5bGVbcHJpbWFyeV9wcm9wZXJ0eV0pO1xuXHRjb25zdCBzZWNvbmRhcnlfcHJvcGVydGllcyA9IGF4aXMgPT09ICd5JyA/IFsndG9wJywgJ2JvdHRvbSddIDogWydsZWZ0JywgJ3JpZ2h0J107XG5cdGNvbnN0IGNhcGl0YWxpemVkX3NlY29uZGFyeV9wcm9wZXJ0aWVzID0gc2Vjb25kYXJ5X3Byb3BlcnRpZXMubWFwKFxuXHRcdChlKSA9PiAvKiogQHR5cGUgeydMZWZ0JyB8ICdSaWdodCcgfCAnVG9wJyB8ICdCb3R0b20nfSAqLyAoYCR7ZVswXS50b1VwcGVyQ2FzZSgpfSR7ZS5zbGljZSgxKX1gKVxuXHQpO1xuXHRjb25zdCBwYWRkaW5nX3N0YXJ0X3ZhbHVlID0gcGFyc2VGbG9hdChzdHlsZVtgcGFkZGluZyR7Y2FwaXRhbGl6ZWRfc2Vjb25kYXJ5X3Byb3BlcnRpZXNbMF19YF0pO1xuXHRjb25zdCBwYWRkaW5nX2VuZF92YWx1ZSA9IHBhcnNlRmxvYXQoc3R5bGVbYHBhZGRpbmcke2NhcGl0YWxpemVkX3NlY29uZGFyeV9wcm9wZXJ0aWVzWzFdfWBdKTtcblx0Y29uc3QgbWFyZ2luX3N0YXJ0X3ZhbHVlID0gcGFyc2VGbG9hdChzdHlsZVtgbWFyZ2luJHtjYXBpdGFsaXplZF9zZWNvbmRhcnlfcHJvcGVydGllc1swXX1gXSk7XG5cdGNvbnN0IG1hcmdpbl9lbmRfdmFsdWUgPSBwYXJzZUZsb2F0KHN0eWxlW2BtYXJnaW4ke2NhcGl0YWxpemVkX3NlY29uZGFyeV9wcm9wZXJ0aWVzWzFdfWBdKTtcblx0Y29uc3QgYm9yZGVyX3dpZHRoX3N0YXJ0X3ZhbHVlID0gcGFyc2VGbG9hdChcblx0XHRzdHlsZVtgYm9yZGVyJHtjYXBpdGFsaXplZF9zZWNvbmRhcnlfcHJvcGVydGllc1swXX1XaWR0aGBdXG5cdCk7XG5cdGNvbnN0IGJvcmRlcl93aWR0aF9lbmRfdmFsdWUgPSBwYXJzZUZsb2F0KFxuXHRcdHN0eWxlW2Bib3JkZXIke2NhcGl0YWxpemVkX3NlY29uZGFyeV9wcm9wZXJ0aWVzWzFdfVdpZHRoYF1cblx0KTtcblx0cmV0dXJuIHtcblx0XHRkZWxheSxcblx0XHRkdXJhdGlvbixcblx0XHRlYXNpbmcsXG5cdFx0Y3NzOiAodCkgPT5cblx0XHRcdCdvdmVyZmxvdzogaGlkZGVuOycgK1xuXHRcdFx0YG9wYWNpdHk6ICR7TWF0aC5taW4odCAqIDIwLCAxKSAqIG9wYWNpdHl9O2AgK1xuXHRcdFx0YCR7cHJpbWFyeV9wcm9wZXJ0eX06ICR7dCAqIHByaW1hcnlfcHJvcGVydHlfdmFsdWV9cHg7YCArXG5cdFx0XHRgcGFkZGluZy0ke3NlY29uZGFyeV9wcm9wZXJ0aWVzWzBdfTogJHt0ICogcGFkZGluZ19zdGFydF92YWx1ZX1weDtgICtcblx0XHRcdGBwYWRkaW5nLSR7c2Vjb25kYXJ5X3Byb3BlcnRpZXNbMV19OiAke3QgKiBwYWRkaW5nX2VuZF92YWx1ZX1weDtgICtcblx0XHRcdGBtYXJnaW4tJHtzZWNvbmRhcnlfcHJvcGVydGllc1swXX06ICR7dCAqIG1hcmdpbl9zdGFydF92YWx1ZX1weDtgICtcblx0XHRcdGBtYXJnaW4tJHtzZWNvbmRhcnlfcHJvcGVydGllc1sxXX06ICR7dCAqIG1hcmdpbl9lbmRfdmFsdWV9cHg7YCArXG5cdFx0XHRgYm9yZGVyLSR7c2Vjb25kYXJ5X3Byb3BlcnRpZXNbMF19LXdpZHRoOiAke3QgKiBib3JkZXJfd2lkdGhfc3RhcnRfdmFsdWV9cHg7YCArXG5cdFx0XHRgYm9yZGVyLSR7c2Vjb25kYXJ5X3Byb3BlcnRpZXNbMV19LXdpZHRoOiAke3QgKiBib3JkZXJfd2lkdGhfZW5kX3ZhbHVlfXB4O2Bcblx0fTtcbn1cblxuLyoqXG4gKiBBbmltYXRlcyB0aGUgb3BhY2l0eSBhbmQgc2NhbGUgb2YgYW4gZWxlbWVudC4gYGluYCB0cmFuc2l0aW9ucyBhbmltYXRlIGZyb20gdGhlIHByb3ZpZGVkIHZhbHVlcywgcGFzc2VkIGFzIHBhcmFtZXRlcnMsIHRvIGFuIGVsZW1lbnQncyBjdXJyZW50IChkZWZhdWx0KSB2YWx1ZXMuIGBvdXRgIHRyYW5zaXRpb25zIGFuaW1hdGUgZnJvbSBhbiBlbGVtZW50J3MgZGVmYXVsdCB2YWx1ZXMgdG8gdGhlIHByb3ZpZGVkIHZhbHVlcy5cbiAqXG4gKiBAcGFyYW0ge0VsZW1lbnR9IG5vZGVcbiAqIEBwYXJhbSB7U2NhbGVQYXJhbXN9IFtwYXJhbXNdXG4gKiBAcmV0dXJucyB7VHJhbnNpdGlvbkNvbmZpZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNjYWxlKFxuXHRub2RlLFxuXHR7IGRlbGF5ID0gMCwgZHVyYXRpb24gPSA0MDAsIGVhc2luZyA9IGN1YmljX291dCwgc3RhcnQgPSAwLCBvcGFjaXR5ID0gMCB9ID0ge31cbikge1xuXHRjb25zdCBzdHlsZSA9IGdldENvbXB1dGVkU3R5bGUobm9kZSk7XG5cdGNvbnN0IHRhcmdldF9vcGFjaXR5ID0gK3N0eWxlLm9wYWNpdHk7XG5cdGNvbnN0IHRyYW5zZm9ybSA9IHN0eWxlLnRyYW5zZm9ybSA9PT0gJ25vbmUnID8gJycgOiBzdHlsZS50cmFuc2Zvcm07XG5cdGNvbnN0IHNkID0gMSAtIHN0YXJ0O1xuXHRjb25zdCBvZCA9IHRhcmdldF9vcGFjaXR5ICogKDEgLSBvcGFjaXR5KTtcblx0cmV0dXJuIHtcblx0XHRkZWxheSxcblx0XHRkdXJhdGlvbixcblx0XHRlYXNpbmcsXG5cdFx0Y3NzOiAoX3QsIHUpID0+IGBcblx0XHRcdHRyYW5zZm9ybTogJHt0cmFuc2Zvcm19IHNjYWxlKCR7MSAtIHNkICogdX0pO1xuXHRcdFx0b3BhY2l0eTogJHt0YXJnZXRfb3BhY2l0eSAtIG9kICogdX1cblx0XHRgXG5cdH07XG59XG5cbi8qKlxuICogQW5pbWF0ZXMgdGhlIHN0cm9rZSBvZiBhbiBTVkcgZWxlbWVudCwgbGlrZSBhIHNuYWtlIGluIGEgdHViZS4gYGluYCB0cmFuc2l0aW9ucyBiZWdpbiB3aXRoIHRoZSBwYXRoIGludmlzaWJsZSBhbmQgZHJhdyB0aGUgcGF0aCB0byB0aGUgc2NyZWVuIG92ZXIgdGltZS4gYG91dGAgdHJhbnNpdGlvbnMgc3RhcnQgaW4gYSB2aXNpYmxlIHN0YXRlIGFuZCBncmFkdWFsbHkgZXJhc2UgdGhlIHBhdGguIGBkcmF3YCBvbmx5IHdvcmtzIHdpdGggZWxlbWVudHMgdGhhdCBoYXZlIGEgYGdldFRvdGFsTGVuZ3RoYCBtZXRob2QsIGxpa2UgYDxwYXRoPmAgYW5kIGA8cG9seWxpbmU+YC5cbiAqXG4gKiBAcGFyYW0ge1NWR0VsZW1lbnQgJiB7IGdldFRvdGFsTGVuZ3RoKCk6IG51bWJlciB9fSBub2RlXG4gKiBAcGFyYW0ge0RyYXdQYXJhbXN9IFtwYXJhbXNdXG4gKiBAcmV0dXJucyB7VHJhbnNpdGlvbkNvbmZpZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRyYXcobm9kZSwgeyBkZWxheSA9IDAsIHNwZWVkLCBkdXJhdGlvbiwgZWFzaW5nID0gY3ViaWNfaW5fb3V0IH0gPSB7fSkge1xuXHRsZXQgbGVuID0gbm9kZS5nZXRUb3RhbExlbmd0aCgpO1xuXHRjb25zdCBzdHlsZSA9IGdldENvbXB1dGVkU3R5bGUobm9kZSk7XG5cdGlmIChzdHlsZS5zdHJva2VMaW5lY2FwICE9PSAnYnV0dCcpIHtcblx0XHRsZW4gKz0gcGFyc2VJbnQoc3R5bGUuc3Ryb2tlV2lkdGgpO1xuXHR9XG5cdGlmIChkdXJhdGlvbiA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0aWYgKHNwZWVkID09PSB1bmRlZmluZWQpIHtcblx0XHRcdGR1cmF0aW9uID0gODAwO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRkdXJhdGlvbiA9IGxlbiAvIHNwZWVkO1xuXHRcdH1cblx0fSBlbHNlIGlmICh0eXBlb2YgZHVyYXRpb24gPT09ICdmdW5jdGlvbicpIHtcblx0XHRkdXJhdGlvbiA9IGR1cmF0aW9uKGxlbik7XG5cdH1cblx0cmV0dXJuIHtcblx0XHRkZWxheSxcblx0XHRkdXJhdGlvbixcblx0XHRlYXNpbmcsXG5cdFx0Y3NzOiAoXywgdSkgPT4gYFxuXHRcdFx0c3Ryb2tlLWRhc2hhcnJheTogJHtsZW59O1xuXHRcdFx0c3Ryb2tlLWRhc2hvZmZzZXQ6ICR7dSAqIGxlbn07XG5cdFx0YFxuXHR9O1xufVxuXG4vKipcbiAqIEB0ZW1wbGF0ZSBUXG4gKiBAdGVtcGxhdGUgU1xuICogQHBhcmFtIHtUfSB0YXJcbiAqIEBwYXJhbSB7U30gc3JjXG4gKiBAcmV0dXJucyB7VCAmIFN9XG4gKi9cbmZ1bmN0aW9uIGFzc2lnbih0YXIsIHNyYykge1xuXHQvLyBAdHMtaWdub3JlXG5cdGZvciAoY29uc3QgayBpbiBzcmMpIHRhcltrXSA9IHNyY1trXTtcblx0cmV0dXJuIC8qKiBAdHlwZSB7VCAmIFN9ICovICh0YXIpO1xufVxuXG4vKipcbiAqIFRoZSBgY3Jvc3NmYWRlYCBmdW5jdGlvbiBjcmVhdGVzIGEgcGFpciBvZiBbdHJhbnNpdGlvbnNdKGh0dHBzOi8vc3ZlbHRlLmRldi9kb2NzL3N2ZWx0ZS90cmFuc2l0aW9uKSBjYWxsZWQgYHNlbmRgIGFuZCBgcmVjZWl2ZWAuIFdoZW4gYW4gZWxlbWVudCBpcyAnc2VudCcsIGl0IGxvb2tzIGZvciBhIGNvcnJlc3BvbmRpbmcgZWxlbWVudCBiZWluZyAncmVjZWl2ZWQnLCBhbmQgZ2VuZXJhdGVzIGEgdHJhbnNpdGlvbiB0aGF0IHRyYW5zZm9ybXMgdGhlIGVsZW1lbnQgdG8gaXRzIGNvdW50ZXJwYXJ0J3MgcG9zaXRpb24gYW5kIGZhZGVzIGl0IG91dC4gV2hlbiBhbiBlbGVtZW50IGlzICdyZWNlaXZlZCcsIHRoZSByZXZlcnNlIGhhcHBlbnMuIElmIHRoZXJlIGlzIG5vIGNvdW50ZXJwYXJ0LCB0aGUgYGZhbGxiYWNrYCB0cmFuc2l0aW9uIGlzIHVzZWQuXG4gKlxuICogQHBhcmFtIHtDcm9zc2ZhZGVQYXJhbXMgJiB7XG4gKiBcdGZhbGxiYWNrPzogKG5vZGU6IEVsZW1lbnQsIHBhcmFtczogQ3Jvc3NmYWRlUGFyYW1zLCBpbnRybzogYm9vbGVhbikgPT4gVHJhbnNpdGlvbkNvbmZpZztcbiAqIH19IHBhcmFtc1xuICogQHJldHVybnMge1sobm9kZTogYW55LCBwYXJhbXM6IENyb3NzZmFkZVBhcmFtcyAmIHsga2V5OiBhbnk7IH0pID0+ICgpID0+IFRyYW5zaXRpb25Db25maWcsIChub2RlOiBhbnksIHBhcmFtczogQ3Jvc3NmYWRlUGFyYW1zICYgeyBrZXk6IGFueTsgfSkgPT4gKCkgPT4gVHJhbnNpdGlvbkNvbmZpZ119XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcm9zc2ZhZGUoeyBmYWxsYmFjaywgLi4uZGVmYXVsdHMgfSkge1xuXHQvKiogQHR5cGUge01hcDxhbnksIEVsZW1lbnQ+fSAqL1xuXHRjb25zdCB0b19yZWNlaXZlID0gbmV3IE1hcCgpO1xuXHQvKiogQHR5cGUge01hcDxhbnksIEVsZW1lbnQ+fSAqL1xuXHRjb25zdCB0b19zZW5kID0gbmV3IE1hcCgpO1xuXG5cdC8qKlxuXHQgKiBAcGFyYW0ge0VsZW1lbnR9IGZyb21fbm9kZVxuXHQgKiBAcGFyYW0ge0VsZW1lbnR9IG5vZGVcblx0ICogQHBhcmFtIHtDcm9zc2ZhZGVQYXJhbXN9IHBhcmFtc1xuXHQgKiBAcmV0dXJucyB7VHJhbnNpdGlvbkNvbmZpZ31cblx0ICovXG5cdGZ1bmN0aW9uIGNyb3NzZmFkZShmcm9tX25vZGUsIG5vZGUsIHBhcmFtcykge1xuXHRcdGNvbnN0IHtcblx0XHRcdGRlbGF5ID0gMCxcblx0XHRcdGR1cmF0aW9uID0gLyoqIEBwYXJhbSB7bnVtYmVyfSBkICovIChkKSA9PiBNYXRoLnNxcnQoZCkgKiAzMCxcblx0XHRcdGVhc2luZyA9IGN1YmljX291dFxuXHRcdH0gPSBhc3NpZ24oYXNzaWduKHt9LCBkZWZhdWx0cyksIHBhcmFtcyk7XG5cdFx0Y29uc3QgZnJvbSA9IGZyb21fbm9kZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblx0XHRjb25zdCB0byA9IG5vZGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cdFx0Y29uc3QgZHggPSBmcm9tLmxlZnQgLSB0by5sZWZ0O1xuXHRcdGNvbnN0IGR5ID0gZnJvbS50b3AgLSB0by50b3A7XG5cdFx0Y29uc3QgZHcgPSBmcm9tLndpZHRoIC8gdG8ud2lkdGg7XG5cdFx0Y29uc3QgZGggPSBmcm9tLmhlaWdodCAvIHRvLmhlaWdodDtcblx0XHRjb25zdCBkID0gTWF0aC5zcXJ0KGR4ICogZHggKyBkeSAqIGR5KTtcblx0XHRjb25zdCBzdHlsZSA9IGdldENvbXB1dGVkU3R5bGUobm9kZSk7XG5cdFx0Y29uc3QgdHJhbnNmb3JtID0gc3R5bGUudHJhbnNmb3JtID09PSAnbm9uZScgPyAnJyA6IHN0eWxlLnRyYW5zZm9ybTtcblx0XHRjb25zdCBvcGFjaXR5ID0gK3N0eWxlLm9wYWNpdHk7XG5cdFx0cmV0dXJuIHtcblx0XHRcdGRlbGF5LFxuXHRcdFx0ZHVyYXRpb246IHR5cGVvZiBkdXJhdGlvbiA9PT0gJ2Z1bmN0aW9uJyA/IGR1cmF0aW9uKGQpIDogZHVyYXRpb24sXG5cdFx0XHRlYXNpbmcsXG5cdFx0XHRjc3M6ICh0LCB1KSA9PiBgXG5cdFx0XHQgICBvcGFjaXR5OiAke3QgKiBvcGFjaXR5fTtcblx0XHRcdCAgIHRyYW5zZm9ybS1vcmlnaW46IHRvcCBsZWZ0O1xuXHRcdFx0ICAgdHJhbnNmb3JtOiAke3RyYW5zZm9ybX0gdHJhbnNsYXRlKCR7dSAqIGR4fXB4LCR7dSAqIGR5fXB4KSBzY2FsZSgke3QgKyAoMSAtIHQpICogZHd9LCAke1xuXHRcdFx0XHRcdFx0dCArICgxIC0gdCkgKiBkaFxuXHRcdFx0XHRcdH0pO1xuXHRcdCAgIGBcblx0XHR9O1xuXHR9XG5cblx0LyoqXG5cdCAqIEBwYXJhbSB7TWFwPGFueSwgRWxlbWVudD59IGl0ZW1zXG5cdCAqIEBwYXJhbSB7TWFwPGFueSwgRWxlbWVudD59IGNvdW50ZXJwYXJ0c1xuXHQgKiBAcGFyYW0ge2Jvb2xlYW59IGludHJvXG5cdCAqIEByZXR1cm5zIHsobm9kZTogYW55LCBwYXJhbXM6IENyb3NzZmFkZVBhcmFtcyAmIHsga2V5OiBhbnk7IH0pID0+ICgpID0+IFRyYW5zaXRpb25Db25maWd9XG5cdCAqL1xuXHRmdW5jdGlvbiB0cmFuc2l0aW9uKGl0ZW1zLCBjb3VudGVycGFydHMsIGludHJvKSB7XG5cdFx0Ly8gQHRzLWV4cGVjdC1lcnJvciBUT0RPIGltcHJvdmUgdHlwaW5ncyAoYXJlIHRoZSBwdWJsaWMgdHlwZXMgd3Jvbmc/KVxuXHRcdHJldHVybiAobm9kZSwgcGFyYW1zKSA9PiB7XG5cdFx0XHRpdGVtcy5zZXQocGFyYW1zLmtleSwgbm9kZSk7XG5cdFx0XHRyZXR1cm4gKCkgPT4ge1xuXHRcdFx0XHRpZiAoY291bnRlcnBhcnRzLmhhcyhwYXJhbXMua2V5KSkge1xuXHRcdFx0XHRcdGNvbnN0IG90aGVyX25vZGUgPSBjb3VudGVycGFydHMuZ2V0KHBhcmFtcy5rZXkpO1xuXHRcdFx0XHRcdGNvdW50ZXJwYXJ0cy5kZWxldGUocGFyYW1zLmtleSk7XG5cdFx0XHRcdFx0cmV0dXJuIGNyb3NzZmFkZSgvKiogQHR5cGUge0VsZW1lbnR9ICovIChvdGhlcl9ub2RlKSwgbm9kZSwgcGFyYW1zKTtcblx0XHRcdFx0fVxuXHRcdFx0XHQvLyBpZiB0aGUgbm9kZSBpcyBkaXNhcHBlYXJpbmcgYWx0b2dldGhlclxuXHRcdFx0XHQvLyAoaS5lLiB3YXNuJ3QgY2xhaW1lZCBieSB0aGUgb3RoZXIgbGlzdClcblx0XHRcdFx0Ly8gdGhlbiB3ZSBuZWVkIHRvIHN1cHBseSBhbiBvdXRyb1xuXHRcdFx0XHRpdGVtcy5kZWxldGUocGFyYW1zLmtleSk7XG5cdFx0XHRcdHJldHVybiBmYWxsYmFjayAmJiBmYWxsYmFjayhub2RlLCBwYXJhbXMsIGludHJvKTtcblx0XHRcdH07XG5cdFx0fTtcblx0fVxuXHRyZXR1cm4gW3RyYW5zaXRpb24odG9fc2VuZCwgdG9fcmVjZWl2ZSwgZmFsc2UpLCB0cmFuc2l0aW9uKHRvX3JlY2VpdmUsIHRvX3NlbmQsIHRydWUpXTtcbn1cbiIsIjxzY3JpcHQ+XG4gIGltcG9ydCB7IGZsaXAgfSBmcm9tIFwic3ZlbHRlL2FuaW1hdGVcIlxuICBpbXBvcnQgeyBmYWRlIH0gZnJvbSBcInN2ZWx0ZS90cmFuc2l0aW9uXCJcbiAgaW1wb3J0IHthZnRlclVwZGF0ZX0gZnJvbSAnc3ZlbHRlJ1xuXG4gIC8vIHRoZSBsaXN0IG9mIGl0ZW1zICB0aGUgdXNlciBjYW4gc2VsZWN0IGZyb21cbiAgZXhwb3J0IGxldCBpdGVtcyA9IFtdXG5cbiAgLyoqXG4gICAqIGZ1bmN0aW9uIHRvIHVzZSB0byBnZXQgYWxsIGl0ZW1zIChhbHRlcm5hdGl2ZSB0byBwcm92aWRpbmcgaXRlbXMpXG4gICAqIEB0eXBlIHtib29sZWFufGZ1bmN0aW9ufVxuICAgKi9cbiAgZXhwb3J0IGxldCBzZWFyY2hGdW5jdGlvbiA9IGZhbHNlXG5cbiAgLy8gZmllbGQgb2YgZWFjaCBpdGVtIHRoYXQncyB1c2VkIGZvciB0aGUgbGFiZWxzIGluIHRoZSBsaXN0XG4gIGV4cG9ydCBsZXQgbGFiZWxGaWVsZE5hbWUgPSB1bmRlZmluZWRcbiAgZXhwb3J0IGxldCBrZXl3b3Jkc0ZpZWxkTmFtZSA9IGxhYmVsRmllbGROYW1lXG4gIGV4cG9ydCBsZXQgdmFsdWVGaWVsZE5hbWUgPSB1bmRlZmluZWRcblxuICBleHBvcnQgbGV0IGxhYmVsRnVuY3Rpb24gPSBmdW5jdGlvbiAoaXRlbSkge1xuICAgIGlmIChpdGVtID09PSB1bmRlZmluZWQgfHwgaXRlbSA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuIFwiXCJcbiAgICB9XG4gICAgcmV0dXJuIGxhYmVsRmllbGROYW1lID8gaXRlbVtsYWJlbEZpZWxkTmFtZV0gOiBpdGVtXG4gIH1cblxuICBleHBvcnQgbGV0IGtleXdvcmRzRnVuY3Rpb24gPSBmdW5jdGlvbiAoaXRlbSkge1xuICAgIGlmIChpdGVtID09PSB1bmRlZmluZWQgfHwgaXRlbSA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuIFwiXCJcbiAgICB9XG4gICAgcmV0dXJuIGtleXdvcmRzRmllbGROYW1lID8gaXRlbVtrZXl3b3Jkc0ZpZWxkTmFtZV0gOiBsYWJlbEZ1bmN0aW9uKGl0ZW0pXG4gIH1cblxuICBleHBvcnQgbGV0IHZhbHVlRnVuY3Rpb24gPSBmdW5jdGlvbiAoaXRlbSwgZm9yY2VTaW5nbGUgPSBmYWxzZSkge1xuICAgIGlmIChpdGVtID09PSB1bmRlZmluZWQgfHwgaXRlbSA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGl0ZW1cbiAgICB9XG4gICAgaWYgKCFtdWx0aXBsZSB8fCBmb3JjZVNpbmdsZSkge1xuICAgICAgcmV0dXJuIHZhbHVlRmllbGROYW1lID8gaXRlbVt2YWx1ZUZpZWxkTmFtZV0gOiBpdGVtXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBpdGVtLm1hcCgoaSkgPT4gKHZhbHVlRmllbGROYW1lID8gaVt2YWx1ZUZpZWxkTmFtZV0gOiBpKSlcbiAgICB9XG4gIH1cblxuICBleHBvcnQgbGV0IGtleXdvcmRzQ2xlYW5GdW5jdGlvbiA9IGZ1bmN0aW9uIChrZXl3b3Jkcykge1xuICAgIHJldHVybiBrZXl3b3Jkc1xuICB9XG5cbiAgZXhwb3J0IGxldCB0ZXh0Q2xlYW5GdW5jdGlvbiA9IGZ1bmN0aW9uICh1c2VyRW50ZXJlZFRleHQpIHtcbiAgICByZXR1cm4gdXNlckVudGVyZWRUZXh0XG4gIH1cblxuICAvLyBldmVudHNcbiAgZXhwb3J0IGxldCBiZWZvcmVDaGFuZ2UgPSBmdW5jdGlvbiAob2xkU2VsZWN0ZWRJdGVtLCBuZXdTZWxlY3RlZEl0ZW0pIHtcbiAgICByZXR1cm4gdHJ1ZVxuICB9XG4gIGV4cG9ydCBsZXQgb25DaGFuZ2UgPSBmdW5jdGlvbiAobmV3U2VsZWN0ZWRJdGVtKSB7fVxuICBleHBvcnQgbGV0IG9uRm9jdXMgPSBmdW5jdGlvbiAoKSB7fVxuICBleHBvcnQgbGV0IG9uQmx1ciA9IGZ1bmN0aW9uICgpIHt9XG4gIGV4cG9ydCBsZXQgb25DcmVhdGUgPSBmdW5jdGlvbiAodGV4dCkge1xuICAgIGlmIChkZWJ1Zykge1xuICAgICAgY29uc29sZS5sb2coXCJvbkNyZWF0ZTogXCIgKyB0ZXh0KVxuICAgIH1cbiAgfVxuXG4gIC8vIEJlaGF2aW91ciBwcm9wZXJ0aWVzXG4gIGV4cG9ydCBsZXQgc2VsZWN0Rmlyc3RJZkVtcHR5ID0gZmFsc2VcbiAgZXhwb3J0IGxldCBtaW5DaGFyYWN0ZXJzVG9TZWFyY2ggPSAxXG4gIGV4cG9ydCBsZXQgbWF4SXRlbXNUb1Nob3dJbkxpc3QgPSAwXG4gIGV4cG9ydCBsZXQgbXVsdGlwbGUgPSBmYWxzZVxuICBleHBvcnQgbGV0IGNyZWF0ZSA9IGZhbHNlXG5cbiAgLy8gaWdub3JlcyB0aGUgYWNjZW50cyB3aGVuIG1hdGNoaW5nIGl0ZW1zXG4gIGV4cG9ydCBsZXQgaWdub3JlQWNjZW50cyA9IHRydWVcblxuICAvLyBhbGwgdGhlIGlucHV0IGtleXdvcmRzIHNob3VsZCBiZSBtYXRjaGVkIGluIHRoZSBpdGVtIGtleXdvcmRzXG4gIGV4cG9ydCBsZXQgbWF0Y2hBbGxLZXl3b3JkcyA9IHRydWVcblxuICAvLyBzb3J0cyB0aGUgaXRlbXMgYnkgdGhlIG51bWJlciBvZiBtYXRjaGluayBrZXl3b3Jkc1xuICBleHBvcnQgbGV0IHNvcnRCeU1hdGNoZWRLZXl3b3JkcyA9IGZhbHNlXG5cbiAgLy8gYWxsb3cgdXNlcnMgdG8gdXNlIGEgY3VzdG9tIGl0ZW0gZmlsdGVyIGZ1bmN0aW9uXG4gIGV4cG9ydCBsZXQgaXRlbUZpbHRlckZ1bmN0aW9uID0gdW5kZWZpbmVkXG5cbiAgLy8gYWxsb3cgdXNlcnMgdG8gdXNlIGEgY3VzdG9tIGl0ZW0gc29ydCBmdW5jdGlvblxuICBleHBvcnQgbGV0IGl0ZW1Tb3J0RnVuY3Rpb24gPSB1bmRlZmluZWRcblxuICAvLyBkbyBub3QgYWxsb3cgcmUtc2VsZWN0aW9uIGFmdGVyIGluaXRpYWwgc2VsZWN0aW9uXG4gIGV4cG9ydCBsZXQgbG9jayA9IGZhbHNlXG5cbiAgLy8gZGVsYXkgdG8gd2FpdCBhZnRlciBhIGtleXByZXNzIHRvIHNlYXJjaCBmb3IgbmV3IGl0ZW1zXG4gIGV4cG9ydCBsZXQgZGVsYXkgPSAwXG5cbiAgLy8gdHJ1ZSB0byBwZXJmb3JtIGxvY2FsIGZpbHRlcmluZyBvZiBpdGVtcywgZXZlbiBpZiBzZWFyY2hGdW5jdGlvbiBpcyBwcm92aWRlZFxuICBleHBvcnQgbGV0IGxvY2FsRmlsdGVyaW5nID0gdHJ1ZVxuXG4gIC8vIHRydWUgdG8gcGVyZm9ybSBsb2NhbCBzb3J0eWluZyBvZiBpdGVtc1xuICBleHBvcnQgbGV0IGxvY2FsU29ydGluZyA9IHRydWVcblxuICAvLyB0cnVlIHRvIGNsZWFuIHRoZSB1c2VyIGVudGVyZWQgdGV4dCAocmVtb3ZlcyBzcGFjZXMpXG4gIGV4cG9ydCBsZXQgY2xlYW5Vc2VyVGV4dCA9IHRydWVcblxuICAvLyB0cnVlIHRvIGxvd2VyY2FzZSB0aGUga2V5d29yZHMgZGVyaXZlZCBmcm9tIGVhY2ggaXRlbSAobG93ZXJjYXNlKVxuICBleHBvcnQgbGV0IGxvd2VyY2FzZUtleXdvcmRzID0gdHJ1ZVxuXG4gIC8vIHRydWUgdG8gY2xvc2UgdGhlIGRyb3Bkb3duIHdoZW4gdGhlIGNvbXBvbmVudCBsb3NlcyBmb2N1c1xuICBleHBvcnQgbGV0IGNsb3NlT25CbHVyID0gZmFsc2VcblxuICAvLyB0cnVlIHRvIGFsbG93IHNlbGVjdGlvbiByZW9yZGVyaW5nIGJ5IGRyYWcgYW5kIGRyb3AsIG5lZWRzIG11bHRpcGxlIHRvIHRydWVcbiAgZXhwb3J0IGxldCBvcmRlcmFibGVTZWxlY3Rpb24gPSBmYWxzZVxuXG4gIC8vIFVJIHByb3BlcnRpZXNcblxuICAvLyBvcHRpb24gdG8gaGlkZSB0aGUgZHJvcGRvd24gYXJyb3dcbiAgZXhwb3J0IGxldCBoaWRlQXJyb3cgPSBmYWxzZVxuXG4gIC8vIG9wdGlvbiB0byBzaG93IGNsZWFyIHNlbGVjdGlvbiBidXR0b25cbiAgZXhwb3J0IGxldCBzaG93Q2xlYXIgPSBmYWxzZVxuXG4gIC8vIHRleHQgdG8gdXNlIGZvciBjbGVhclxuICBleHBvcnQgbGV0IGNsZWFyVGV4dCA9IFwiJiMxMDAwNjtcIlxuXG4gIC8vIG9wdGlvbiB0byBzaG93IGxvYWRpbmcgaW5kaWNhdG9yIHdoZW4gdGhlIGFzeW5jIGZ1bmN0aW9uIGlzIGV4ZWN1dGVkXG4gIGV4cG9ydCBsZXQgc2hvd0xvYWRpbmdJbmRpY2F0b3IgPSBmYWxzZVxuXG4gIC8vIHRleHQgZGlzcGxheWVkIHdoZW4gbm8gaXRlbXMgbWF0Y2ggdGhlIGlucHV0IHRleHRcbiAgZXhwb3J0IGxldCBub1Jlc3VsdHNUZXh0ID0gXCJObyByZXN1bHRzIGZvdW5kXCJcblxuICAvLyB0ZXh0IGRpc3BsYXllZCB3aGVuIGFzeW5jIGRhdGEgaXMgYmVpbmcgbG9hZGVkXG4gIGV4cG9ydCBsZXQgbG9hZGluZ1RleHQgPSBcIkxvYWRpbmcgcmVzdWx0cy4uLlwiXG5cbiAgLy8gdGV4dCBkaXNwbGF5ZWQgd2hlbiB0aGUgdXNlciB0ZXh0IG1hdGNoZXMgYSBsb3Qgb2YgaXRlbXMgYW5kIHdlIGNhbiBub3QgZGlzcGxheSB0aGVtIGFsbCBpbiB0aGUgZHJvcGRvd25cbiAgZXhwb3J0IGxldCBtb3JlSXRlbXNUZXh0ID0gXCJpdGVtcyBub3Qgc2hvd25cIlxuXG4gIC8vIHRleHQgZGlzcGxheWVkIHdoZW4gYXN5bmMgZGF0YSBpcyBiZWluZyBsb2FkZWRcbiAgZXhwb3J0IGxldCBjcmVhdGVUZXh0ID0gXCJOb3QgZm91bmQsIGFkZCBhbnl3YXk/XCJcblxuICAvLyB0aGUgdGV4dCBkaXNwbGF5ZWQgd2hlbiBubyBvcHRpb24gaXMgc2VsZWN0ZWRcbiAgZXhwb3J0IGxldCBwbGFjZWhvbGRlciA9IHVuZGVmaW5lZFxuXG4gIC8vIGFwcGx5IGEgY2xhc3NOYW1lIHRvIHRoZSBjb250cm9sXG4gIGV4cG9ydCBsZXQgY2xhc3NOYW1lID0gdW5kZWZpbmVkXG5cbiAgLy8gSFRNTCBpbnB1dCBVSSBwcm9wZXJ0aWVzXG4gIC8vIGFwcGx5IGEgY2xhc3NOYW1lIHRvIHRoZSBpbnB1dCBjb250cm9sXG4gIGV4cG9ydCBsZXQgaW5wdXRDbGFzc05hbWUgPSB1bmRlZmluZWRcbiAgLy8gYXBwbHkgYSBpZCB0byB0aGUgaW5wdXQgY29udHJvbFxuICBleHBvcnQgbGV0IGlucHV0SWQgPSB1bmRlZmluZWRcbiAgLy8gZ2VuZXJhdGUgYW4gSFRNTCBpbnB1dCB3aXRoIHRoaXMgbmFtZVxuICBleHBvcnQgbGV0IG5hbWUgPSB1bmRlZmluZWRcbiAgLy8gZ2VuZXJhdGUgYSA8c2VsZWN0PiB0YWcgdGhhdCBob2xkcyB0aGUgdmFsdWVcbiAgZXhwb3J0IGxldCBzZWxlY3ROYW1lID0gdW5kZWZpbmVkXG4gIC8vIGFwcGx5IGEgaWQgdG8gdGhlIDxzZWxlY3Q+XG4gIGV4cG9ydCBsZXQgc2VsZWN0SWQgPSB1bmRlZmluZWRcbiAgLy8gYWRkIHRoZSB0aXRsZSB0byB0aGUgSFRNTCBpbnB1dFxuICBleHBvcnQgbGV0IHRpdGxlID0gdW5kZWZpbmVkXG4gIC8vIGVuYWJsZSB0aGUgaHRtbDUgYXV0b2NvbXBsZXRpb24gdG8gdGhlIEhUTUwgaW5wdXRcbiAgZXhwb3J0IGxldCBodG1sNWF1dG9jb21wbGV0ZSA9IHVuZGVmaW5lZFxuICAvLyBlbmFibGUgdGhlIGh0bWw1IGF1dG9jb21wbGV0aW9uIHZhbHVlXG4gIGV4cG9ydCBsZXQgYXV0b2NvbXBsZXRlT2ZmVmFsdWUgPSBcIm9mZlwiXG4gIC8vIG1ha2UgdGhlIGlucHV0IHJlYWRvbmx5XG4gIGV4cG9ydCBsZXQgcmVhZG9ubHkgPSB1bmRlZmluZWRcbiAgLy8gYXBwbHkgYSBjbGFzc05hbWUgdG8gdGhlIGRyb3Bkb3duIGRpdlxuICBleHBvcnQgbGV0IGRyb3Bkb3duQ2xhc3NOYW1lID0gdW5kZWZpbmVkXG4gIC8vIGFkZHMgdGhlIGRpc2FibGVkIHRhZyB0byB0aGUgSFRNTCBpbnB1dFxuICBleHBvcnQgbGV0IGRpc2FibGVkID0gZmFsc2VcbiAgLy8gcmVtb3ZlIHRoZSBhdXRvY29tcGxldGUtaW5wdXQgY2xhc3Mgb2YgdGhlIGlucHV0XG4gIGV4cG9ydCBsZXQgbm9JbnB1dFN0eWxlcyA9IGZhbHNlXG4gIC8vIGFkZHMgdGhlIHJlcXVpcmVkIGF0dHJpYnV0ZSB0byB0aGUgSFRNTCBpbnB1dFxuICBleHBvcnQgbGV0IHJlcXVpcmVkID0gbnVsbFxuXG4gIGV4cG9ydCBsZXQgZGVidWcgPSBmYWxzZVxuXG4gIC8vIGFkZCB0YWJpbmRleCBzdXBwb3J0IGZvciB0aGUgaW5wdXRcbiAgLy8gc2V0IHN0YW5kYXJkIHRvIDA6IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvR2xvYmFsX2F0dHJpYnV0ZXMvdGFiaW5kZXhcbiAgZXhwb3J0IGxldCB0YWJpbmRleCA9IDBcblxuICAvLyAtLS0gUHVibGljIFN0YXRlIC0tLS1cblxuICAvLyBzZWxlY3RlZCBpdGVtIHN0YXRlXG4gIGV4cG9ydCBsZXQgc2VsZWN0ZWRJdGVtID0gbXVsdGlwbGUgPyBbXSA6IHVuZGVmaW5lZFxuICBleHBvcnQgbGV0IHZhbHVlID0gdW5kZWZpbmVkXG4gIGV4cG9ydCBsZXQgaGlnaGxpZ2h0ZWRJdGVtID0gdW5kZWZpbmVkXG5cbiAgLy8gLS0tIEludGVybmFsIFN0YXRlIC0tLS1cbiAgY29uc3QgdW5pcXVlSWQgPSBcInNhdXRvY29tcGxldGUtXCIgKyBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxMDAwKVxuXG4gIC8vIEhUTUwgZWxlbWVudHNcbiAgbGV0IGlucHV0XG4gIGxldCBsaXN0XG4gIGxldCBpbnB1dENvbnRhaW5lclxuXG4gIC8vIFVJIHN0YXRlXG4gIGxldCBvcGVuZWQgPSBmYWxzZVxuICBsZXQgbG9hZGluZyA9IGZhbHNlXG4gIGxldCBoaWdobGlnaHRJbmRleCA9IC0xXG4gIGV4cG9ydCBsZXQgdGV4dCA9IHVuZGVmaW5lZFxuICBsZXQgZmlsdGVyZWRUZXh0TGVuZ3RoID0gMFxuXG4gIC8vIHZpZXcgbW9kZWxcbiAgbGV0IGZpbHRlcmVkTGlzdEl0ZW1zXG4gIGxldCBsaXN0SXRlbXMgPSBbXVxuXG4gIC8vIHJlcXVlc3RzL3Jlc3BvbnNlcyBjb3VudGVyc1xuICBsZXQgbGFzdFJlcXVlc3RJZCA9IDBcbiAgbGV0IGxhc3RSZXNwb25zZUlkID0gMFxuXG4gIC8vIG90aGVyIHN0YXRlXG4gIGxldCBpbnB1dERlbGF5VGltZW91dFxuXG4gIGxldCBzZXRQb3NpdGlvbk9uTmV4dFVwZGF0ZSA9IGZhbHNlO1xuXG4gIC8vIC0tLSBMaWZlY3ljbGUgZXZlbnRzIC0tLVxuXG4gIGFmdGVyVXBkYXRlKCgpID0+IHtcbiAgICBpZihzZXRQb3NpdGlvbk9uTmV4dFVwZGF0ZSkge1xuICAgICAgc2V0U2Nyb2xsQXdhcmVMaXN0UG9zaXRpb24oKVxuICAgIH1cbiAgICBzZXRQb3NpdGlvbk9uTmV4dFVwZGF0ZSA9IGZhbHNlXG4gIH0pXG5cbiAgLy8gLS0tIEZ1bmN0aW9ucyAtLS1cblxuICBmdW5jdGlvbiBzYWZlRnVuY3Rpb24odGhlRnVuY3Rpb24sIGFyZ3VtZW50KSB7XG4gICAgaWYgKHR5cGVvZiB0aGVGdW5jdGlvbiAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFwiTm90IGEgZnVuY3Rpb246IFwiICsgdGhlRnVuY3Rpb24gKyBcIiwgYXJndW1lbnQ6IFwiICsgYXJndW1lbnQpXG4gICAgICByZXR1cm4gdW5kZWZpbmVkXG4gICAgfVxuICAgIGxldCByZXN1bHRcbiAgICB0cnkge1xuICAgICAgcmVzdWx0ID0gdGhlRnVuY3Rpb24oYXJndW1lbnQpXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgXCJFcnJvciBleGVjdXRpbmcgQXV0b2NvbXBsZXRlIGZ1bmN0aW9uIG9uIHZhbHVlOiBcIiArIGFyZ3VtZW50ICsgXCIgZnVuY3Rpb246IFwiICsgdGhlRnVuY3Rpb25cbiAgICAgIClcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdFxuICB9XG5cbiAgZnVuY3Rpb24gc2FmZVN0cmluZ0Z1bmN0aW9uKHRoZUZ1bmN0aW9uLCBhcmd1bWVudCkge1xuICAgIGxldCByZXN1bHQgPSBzYWZlRnVuY3Rpb24odGhlRnVuY3Rpb24sIGFyZ3VtZW50KVxuICAgIGlmIChyZXN1bHQgPT09IHVuZGVmaW5lZCB8fCByZXN1bHQgPT09IG51bGwpIHtcbiAgICAgIHJlc3VsdCA9IFwiXCJcbiAgICB9XG4gICAgaWYgKHR5cGVvZiByZXN1bHQgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgIHJlc3VsdCA9IHJlc3VsdC50b1N0cmluZygpXG4gICAgfVxuICAgIHJldHVybiByZXN1bHRcbiAgfVxuXG4gIGZ1bmN0aW9uIHNhZmVMYWJlbEZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAvLyBjb25zb2xlLmxvZyhcImxhYmVsRnVuY3Rpb246IFwiICsgbGFiZWxGdW5jdGlvbik7XG4gICAgLy8gY29uc29sZS5sb2coXCJzYWZlTGFiZWxGdW5jdGlvbiwgaXRlbTogXCIgKyBpdGVtKTtcbiAgICByZXR1cm4gc2FmZVN0cmluZ0Z1bmN0aW9uKGxhYmVsRnVuY3Rpb24sIGl0ZW0pXG4gIH1cblxuICBmdW5jdGlvbiBzYWZlS2V5d29yZHNGdW5jdGlvbihpdGVtKSB7XG4gICAgLy8gY29uc29sZS5sb2coXCJzYWZlS2V5d29yZHNGdW5jdGlvblwiKTtcbiAgICBjb25zdCBrZXl3b3JkcyA9IHNhZmVTdHJpbmdGdW5jdGlvbihrZXl3b3Jkc0Z1bmN0aW9uLCBpdGVtKVxuICAgIGxldCByZXN1bHQgPSBzYWZlU3RyaW5nRnVuY3Rpb24oa2V5d29yZHNDbGVhbkZ1bmN0aW9uLCBrZXl3b3JkcylcbiAgICByZXN1bHQgPSBsb3dlcmNhc2VLZXl3b3JkcyA/IHJlc3VsdC50b0xvd2VyQ2FzZSgpLnRyaW0oKSA6IHJlc3VsdFxuICAgIGlmIChpZ25vcmVBY2NlbnRzKSB7XG4gICAgICByZXN1bHQgPSByZW1vdmVBY2NlbnRzKHJlc3VsdClcbiAgICB9XG5cbiAgICBpZiAoZGVidWcpIHtcbiAgICAgIGNvbnNvbGUubG9nKFwiRXh0cmFjdGVkIGtleXdvcmRzOiAnXCIgKyByZXN1bHQgKyBcIicgZnJvbSBpdGVtOiBcIiArIEpTT04uc3RyaW5naWZ5KGl0ZW0pKVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0XG4gIH1cblxuICBmdW5jdGlvbiBwcmVwYXJlTGlzdEl0ZW1zKCkge1xuICAgIGxldCB0aW1lcklkXG4gICAgaWYgKGRlYnVnKSB7XG4gICAgICB0aW1lcklkID0gYEF1dG9jb21wbGV0ZSBwcmVwYXJlIGxpc3QgJHtpbnB1dElkID8gYChpZDogJHtpbnB1dElkfSlgIDogXCJcIn1gXG4gICAgICBjb25zb2xlLnRpbWUodGltZXJJZClcbiAgICAgIGNvbnNvbGUubG9nKFwiUHJlcGFyZSBpdGVtcyB0byBzZWFyY2hcIilcbiAgICAgIGNvbnNvbGUubG9nKFwiaXRlbXM6IFwiICsgSlNPTi5zdHJpbmdpZnkoaXRlbXMpKVxuICAgIH1cblxuICAgIGlmICghQXJyYXkuaXNBcnJheShpdGVtcykpIHtcbiAgICAgIGNvbnNvbGUud2FybihcIkF1dG9jb21wbGV0ZSBpdGVtcyAvIHNlYXJjaCBmdW5jdGlvbiBkaWQgbm90IHJldHVybiBhcnJheSBidXRcIiwgaXRlbXMpXG4gICAgICBpdGVtcyA9IFtdXG4gICAgfVxuXG4gICAgY29uc3QgbGVuZ3RoID0gaXRlbXMgPyBpdGVtcy5sZW5ndGggOiAwXG4gICAgbGlzdEl0ZW1zID0gbmV3IEFycmF5KGxlbmd0aClcblxuICAgIGlmIChsZW5ndGggPiAwKSB7XG4gICAgICBpdGVtcy5mb3JFYWNoKChpdGVtLCBpKSA9PiB7XG4gICAgICAgIGNvbnN0IGxpc3RJdGVtID0gZ2V0TGlzdEl0ZW0oaXRlbSlcbiAgICAgICAgaWYgKGxpc3RJdGVtID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhcIlVuZGVmaW5lZCBpdGVtIGZvcjogXCIsIGl0ZW0pXG4gICAgICAgIH1cbiAgICAgICAgbGlzdEl0ZW1zW2ldID0gbGlzdEl0ZW1cbiAgICAgIH0pXG4gICAgfVxuXG4gICAgZmlsdGVyZWRMaXN0SXRlbXMgPSBsaXN0SXRlbXNcblxuICAgIGlmIChkZWJ1Zykge1xuICAgICAgY29uc29sZS5sb2cobGlzdEl0ZW1zLmxlbmd0aCArIFwiIGl0ZW1zIHRvIHNlYXJjaFwiKVxuICAgICAgY29uc29sZS50aW1lRW5kKHRpbWVySWQpXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZ2V0TGlzdEl0ZW0oaXRlbSkge1xuICAgIHJldHVybiB7XG4gICAgICAvLyBrZXl3b3JkcyByZXByZXNlbnRhdGlvbiBvZiB0aGUgaXRlbVxuICAgICAga2V5d29yZHM6IGxvY2FsRmlsdGVyaW5nID8gc2FmZUtleXdvcmRzRnVuY3Rpb24oaXRlbSkgOiBbXSxcbiAgICAgIC8vIGl0ZW0gbGFiZWxcbiAgICAgIGxhYmVsOiBzYWZlTGFiZWxGdW5jdGlvbihpdGVtKSxcbiAgICAgIC8vIHN0b3JlIHJlZmVyZW5jZSB0byB0aGUgb3JpZ2lhbCBpdGVtXG4gICAgICBpdGVtOiBpdGVtLFxuICAgIH1cbiAgfVxuXG4gIC8vIC0tIFJlYWN0aXZpdHkgLS1cbiAgJDogaXRlbXMsIHNlYXJjaEZ1bmN0aW9uIHx8IHByZXBhcmVMaXN0SXRlbXMoKVxuXG4gIGZ1bmN0aW9uIG9uU2VsZWN0ZWRJdGVtQ2hhbmdlZCgpIHtcbiAgICB2YWx1ZSA9IHZhbHVlRnVuY3Rpb24oc2VsZWN0ZWRJdGVtKVxuICAgIGlmIChzZWxlY3RlZEl0ZW0gJiYgIW11bHRpcGxlKSB7XG4gICAgICB0ZXh0ID0gc2FmZUxhYmVsRnVuY3Rpb24oc2VsZWN0ZWRJdGVtKVxuICAgIH1cblxuICAgIGZpbHRlcmVkTGlzdEl0ZW1zID0gbGlzdEl0ZW1zXG4gICAgb25DaGFuZ2Uoc2VsZWN0ZWRJdGVtKVxuICB9XG5cbiAgJDogc2VsZWN0ZWRJdGVtLCBvblNlbGVjdGVkSXRlbUNoYW5nZWQoKVxuXG4gICQ6IGhpZ2hsaWdodGVkSXRlbSA9XG4gICAgZmlsdGVyZWRMaXN0SXRlbXMgJiZcbiAgICBoaWdobGlnaHRJbmRleCAmJlxuICAgIGhpZ2hsaWdodEluZGV4ID49IDAgJiZcbiAgICBoaWdobGlnaHRJbmRleCA8IGZpbHRlcmVkTGlzdEl0ZW1zLmxlbmd0aFxuICAgICAgPyBmaWx0ZXJlZExpc3RJdGVtc1toaWdobGlnaHRJbmRleF0uaXRlbVxuICAgICAgOiBudWxsXG5cbiAgJDogc2hvd0xpc3QgPSBvcGVuZWQgJiYgKChpdGVtcyAmJiBpdGVtcy5sZW5ndGggPiAwKSB8fCBmaWx0ZXJlZFRleHRMZW5ndGggPiAwKVxuXG4gICQ6IGhhc1NlbGVjdGlvbiA9XG4gICAgKG11bHRpcGxlICYmIHNlbGVjdGVkSXRlbSAmJiBzZWxlY3RlZEl0ZW0ubGVuZ3RoID4gMCkgfHwgKCFtdWx0aXBsZSAmJiBzZWxlY3RlZEl0ZW0pXG5cbiAgJDogY2xlYXJhYmxlID0gc2hvd0NsZWFyIHx8ICgobG9jayB8fCBtdWx0aXBsZSkgJiYgaGFzU2VsZWN0aW9uKVxuXG4gICQ6IGxvY2tlZCA9IGxvY2sgJiYgaGFzU2VsZWN0aW9uXG5cbiAgZnVuY3Rpb24gcHJlcGFyZVVzZXJFbnRlcmVkVGV4dCh1c2VyRW50ZXJlZFRleHQpIHtcbiAgICBpZiAodXNlckVudGVyZWRUZXh0ID09PSB1bmRlZmluZWQgfHwgdXNlckVudGVyZWRUZXh0ID09PSBudWxsKSB7XG4gICAgICByZXR1cm4gXCJcIlxuICAgIH1cblxuICAgIGlmICghY2xlYW5Vc2VyVGV4dCkge1xuICAgICAgcmV0dXJuIHVzZXJFbnRlcmVkVGV4dFxuICAgIH1cblxuICAgIGNvbnN0IHRleHRGaWx0ZXJlZCA9IHVzZXJFbnRlcmVkVGV4dC5yZXBsYWNlKC9bJi9cXFxcIywrKCkkfiUuJ1wiOio/PD57fV0vZywgXCIgXCIpLnRyaW0oKVxuXG4gICAgY29uc3QgY2xlYW5Vc2VyRW50ZXJlZFRleHQgPSBzYWZlU3RyaW5nRnVuY3Rpb24odGV4dENsZWFuRnVuY3Rpb24sIHRleHRGaWx0ZXJlZClcbiAgICBjb25zdCB0ZXh0VHJpbW1lZCA9IGxvd2VyY2FzZUtleXdvcmRzXG4gICAgICA/IGNsZWFuVXNlckVudGVyZWRUZXh0LnRvTG93ZXJDYXNlKCkudHJpbSgpXG4gICAgICA6IGNsZWFuVXNlckVudGVyZWRUZXh0LnRyaW0oKVxuXG4gICAgcmV0dXJuIHRleHRUcmltbWVkXG4gIH1cblxuICBmdW5jdGlvbiBudW1iZXJPZk1hdGNoZXMobGlzdEl0ZW0sIHNlYXJjaFdvcmRzKSB7XG4gICAgaWYgKCFsaXN0SXRlbSkge1xuICAgICAgcmV0dXJuIDBcbiAgICB9XG5cbiAgICBjb25zdCBpdGVtS2V5d29yZHMgPSBsaXN0SXRlbS5rZXl3b3Jkc1xuXG4gICAgbGV0IG1hdGNoZXMgPSAwXG4gICAgc2VhcmNoV29yZHMuZm9yRWFjaCgoc2VhcmNoV29yZCkgPT4ge1xuICAgICAgaWYgKGl0ZW1LZXl3b3Jkcy5pbmNsdWRlcyhzZWFyY2hXb3JkKSkge1xuICAgICAgICBtYXRjaGVzKytcbiAgICAgIH1cbiAgICB9KVxuXG4gICAgcmV0dXJuIG1hdGNoZXNcbiAgfVxuXG4gIGFzeW5jIGZ1bmN0aW9uIHNlYXJjaCgpIHtcbiAgICBsZXQgdGltZXJJZFxuICAgIGlmIChkZWJ1Zykge1xuICAgICAgdGltZXJJZCA9IGBBdXRvY29tcGxldGUgc2VhcmNoICR7aW5wdXRJZCA/IGAoaWQ6ICR7aW5wdXRJZH0pYCA6IFwiXCJ9YFxuICAgICAgY29uc29sZS50aW1lKHRpbWVySWQpXG4gICAgICBjb25zb2xlLmxvZyhcIlNlYXJjaGluZyB1c2VyIGVudGVyZWQgdGV4dDogJ1wiICsgdGV4dCArIFwiJ1wiKVxuICAgIH1cblxuICAgIGxldCB0ZXh0RmlsdGVyZWQgPSBwcmVwYXJlVXNlckVudGVyZWRUZXh0KHRleHQpXG4gICAgaWYgKG1pbkNoYXJhY3RlcnNUb1NlYXJjaCA+IDEgJiYgdGV4dEZpbHRlcmVkLmxlbmd0aCA8IG1pbkNoYXJhY3RlcnNUb1NlYXJjaCkge1xuICAgICAgdGV4dEZpbHRlcmVkID0gXCJcIlxuICAgIH1cbiAgICBmaWx0ZXJlZFRleHRMZW5ndGggPSB0ZXh0RmlsdGVyZWQubGVuZ3RoXG5cbiAgICBpZiAoZGVidWcpIHtcbiAgICAgIGNvbnNvbGUubG9nKFwiQ2hhbmdlZCB1c2VyIGVudGVyZWQgdGV4dCAnXCIgKyB0ZXh0ICsgXCInIGludG8gJ1wiICsgdGV4dEZpbHRlcmVkICsgXCInXCIpXG4gICAgfVxuXG4gICAgLy8gaWYgbm8gc2VhcmNoIHRleHQgbG9hZCBhbGwgaXRlbXNcbiAgICBpZiAodGV4dEZpbHRlcmVkID09PSBcIlwiKSB7XG4gICAgICBpZiAoc2VhcmNoRnVuY3Rpb24pIHtcbiAgICAgICAgLy8gd2Ugd2lsbCBuZWVkIHRvIHJlcnVuIHRoZSBzZWFyY2hcbiAgICAgICAgaXRlbXMgPSBbXVxuICAgICAgICBpZiAoZGVidWcpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhcIlVzZXIgZW50ZXJlZCB0ZXh0IGlzIGVtcHR5IGNsZWFyIGxpc3Qgb2YgaXRlbXNcIilcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZmlsdGVyZWRMaXN0SXRlbXMgPSBsaXN0SXRlbXNcbiAgICAgICAgaWYgKGRlYnVnKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coXCJVc2VyIGVudGVyZWQgdGV4dCBpcyBlbXB0eSBzZXQgdGhlIGxpc3Qgb2YgaXRlbXMgdG8gYWxsIGl0ZW1zXCIpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChjbG9zZUlmTWluQ2hhcnNUb1NlYXJjaFJlYWNoZWQoKSkge1xuICAgICAgICBpZiAoZGVidWcpIHtcbiAgICAgICAgICBjb25zb2xlLnRpbWVFbmQodGltZXJJZClcbiAgICAgICAgfVxuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIXNlYXJjaEZ1bmN0aW9uKSB7XG4gICAgICAvLyBpbnRlcm5hbCBzZWFyY2hcbiAgICAgIHByb2Nlc3NMaXN0SXRlbXModGV4dEZpbHRlcmVkKVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBleHRlcm5hbCBzZWFyY2ggd2hpY2ggcHJvdmlkZXMgaXRlbXNcbiAgICAgIGxhc3RSZXF1ZXN0SWQgPSBsYXN0UmVxdWVzdElkICsgMVxuICAgICAgY29uc3QgY3VycmVudFJlcXVlc3RJZCA9IGxhc3RSZXF1ZXN0SWRcbiAgICAgIGxvYWRpbmcgPSB0cnVlXG5cbiAgICAgIC8vIHNlYXJjaEZ1bmN0aW9uIGlzIGEgZ2VuZXJhdG9yXG4gICAgICBpZiAoc2VhcmNoRnVuY3Rpb24uY29uc3RydWN0b3IubmFtZSA9PT0gXCJBc3luY0dlbmVyYXRvckZ1bmN0aW9uXCIpIHtcbiAgICAgICAgZm9yIGF3YWl0IChjb25zdCBjaHVuayBvZiBzZWFyY2hGdW5jdGlvbih0ZXh0RmlsdGVyZWQsIG1heEl0ZW1zVG9TaG93SW5MaXN0KSkge1xuICAgICAgICAgIC8vIGEgY2h1bmsgb2YgYW4gb2xkIHJlc3BvbnNlOiB0aHJvdyBpdCBhd2F5XG4gICAgICAgICAgaWYgKGN1cnJlbnRSZXF1ZXN0SWQgPCBsYXN0UmVzcG9uc2VJZCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gYSBjaHVuayBmb3IgYSBuZXcgcmVzcG9uc2U6IHJlc2V0IHRoZSBpdGVtIGxpc3RcbiAgICAgICAgICBpZiAoY3VycmVudFJlcXVlc3RJZCA+IGxhc3RSZXNwb25zZUlkKSB7XG4gICAgICAgICAgICBpdGVtcyA9IFtdXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbGFzdFJlc3BvbnNlSWQgPSBjdXJyZW50UmVxdWVzdElkXG4gICAgICAgICAgaXRlbXMgPSBbLi4uaXRlbXMsIC4uLmNodW5rXVxuICAgICAgICAgIHByb2Nlc3NMaXN0SXRlbXModGV4dEZpbHRlcmVkKVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gdGhlcmUgd2FzIG5vdGhpbmcgaW4gdGhlIGNodW5rXG4gICAgICAgIGlmIChsYXN0UmVzcG9uc2VJZCA8IGN1cnJlbnRSZXF1ZXN0SWQpIHtcbiAgICAgICAgICBsYXN0UmVzcG9uc2VJZCA9IGN1cnJlbnRSZXF1ZXN0SWRcbiAgICAgICAgICBpdGVtcyA9IFtdXG4gICAgICAgICAgcHJvY2Vzc0xpc3RJdGVtcyh0ZXh0RmlsdGVyZWQpXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gc2VhcmNoRnVuY3Rpb24gaXMgYSByZWd1bGFyIGZ1bmN0aW9uXG4gICAgICBlbHNlIHtcbiAgICAgICAgbGV0IHJlc3VsdCA9IGF3YWl0IHNlYXJjaEZ1bmN0aW9uKHRleHRGaWx0ZXJlZCwgbWF4SXRlbXNUb1Nob3dJbkxpc3QpXG5cbiAgICAgICAgLy8gSWYgYSByZXNwb25zZSB0byBhIG5ld2VyIHJlcXVlc3QgaGFzIGJlZW4gcmVjZWl2ZWRcbiAgICAgICAgLy8gd2hpbGUgcmVzcG9uc2VzIHRvIHRoaXMgcmVxdWVzdCB3ZXJlIGJlaW5nIGxvYWRlZCxcbiAgICAgICAgLy8gdGhlbiB3ZSBjYW4ganVzdCB0aHJvdyBhd2F5IHRoaXMgb3V0ZGF0ZWQgcmVzdWx0cy5cbiAgICAgICAgaWYgKGN1cnJlbnRSZXF1ZXN0SWQgPCBsYXN0UmVzcG9uc2VJZCkge1xuICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICB9XG5cbiAgICAgICAgbGFzdFJlc3BvbnNlSWQgPSBjdXJyZW50UmVxdWVzdElkXG4gICAgICAgIGl0ZW1zID0gcmVzdWx0XG4gICAgICAgIHByb2Nlc3NMaXN0SXRlbXModGV4dEZpbHRlcmVkKVxuICAgICAgfVxuXG4gICAgICBsb2FkaW5nID0gZmFsc2VcbiAgICB9XG5cbiAgICBpZiAoZGVidWcpIHtcbiAgICAgIGNvbnNvbGUudGltZUVuZCh0aW1lcklkKVxuICAgICAgY29uc29sZS5sb2coXCJTZWFyY2ggZm91bmQgXCIgKyBmaWx0ZXJlZExpc3RJdGVtcy5sZW5ndGggKyBcIiBpdGVtc1wiKVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGRlZmF1bHRJdGVtRmlsdGVyRnVuY3Rpb24obGlzdEl0ZW0sIHNlYXJjaFdvcmRzKSB7XG4gICAgY29uc3QgbWF0Y2hlcyA9IG51bWJlck9mTWF0Y2hlcyhsaXN0SXRlbSwgc2VhcmNoV29yZHMpXG4gICAgaWYgKG1hdGNoQWxsS2V5d29yZHMpIHtcbiAgICAgIHJldHVybiBtYXRjaGVzID49IHNlYXJjaFdvcmRzLmxlbmd0aFxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbWF0Y2hlcyA+IDBcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBkZWZhdWx0SXRlbVNvcnRGdW5jdGlvbihvYmoxLCBvYmoyLCBzZWFyY2hXb3Jkcykge1xuICAgIHJldHVybiBudW1iZXJPZk1hdGNoZXMob2JqMiwgc2VhcmNoV29yZHMpIC0gbnVtYmVyT2ZNYXRjaGVzKG9iajEsIHNlYXJjaFdvcmRzKVxuICB9XG5cbiAgZnVuY3Rpb24gcHJvY2Vzc0xpc3RJdGVtcyh0ZXh0RmlsdGVyZWQpIHtcbiAgICAvLyBjbGVhbnMsIGZpbHRlcnMsIG9yZGVycywgYW5kIGhpZ2hsaWdodHMgdGhlIGxpc3QgaXRlbXNcbiAgICBwcmVwYXJlTGlzdEl0ZW1zKClcblxuICAgIGNvbnN0IHRleHRGaWx0ZXJlZFdpdGhvdXRBY2NlbnRzID0gaWdub3JlQWNjZW50cyA/IHJlbW92ZUFjY2VudHModGV4dEZpbHRlcmVkKSA6IHRleHRGaWx0ZXJlZFxuICAgIGNvbnN0IHNlYXJjaFdvcmRzID0gdGV4dEZpbHRlcmVkV2l0aG91dEFjY2VudHMuc3BsaXQoL1xccysvZykuZmlsdGVyKCh3b3JkKSA9PiB3b3JkICE9PSBcIlwiKVxuXG4gICAgLy8gbG9jYWwgc2VhcmNoXG4gICAgbGV0IHRlbXBmaWx0ZXJlZExpc3RJdGVtc1xuICAgIGlmIChsb2NhbEZpbHRlcmluZykge1xuICAgICAgaWYgKGl0ZW1GaWx0ZXJGdW5jdGlvbikge1xuICAgICAgICB0ZW1wZmlsdGVyZWRMaXN0SXRlbXMgPSBsaXN0SXRlbXMuZmlsdGVyKChpdGVtKSA9PlxuICAgICAgICAgIGl0ZW1GaWx0ZXJGdW5jdGlvbihpdGVtLml0ZW0sIHNlYXJjaFdvcmRzKVxuICAgICAgICApXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0ZW1wZmlsdGVyZWRMaXN0SXRlbXMgPSBsaXN0SXRlbXMuZmlsdGVyKChpdGVtKSA9PlxuICAgICAgICAgIGRlZmF1bHRJdGVtRmlsdGVyRnVuY3Rpb24oaXRlbSwgc2VhcmNoV29yZHMpXG4gICAgICAgIClcbiAgICAgIH1cblxuICAgICAgaWYgKGxvY2FsU29ydGluZykge1xuICAgICAgICBpZiAoaXRlbVNvcnRGdW5jdGlvbikge1xuICAgICAgICAgIHRlbXBmaWx0ZXJlZExpc3RJdGVtcyA9IHRlbXBmaWx0ZXJlZExpc3RJdGVtcy5zb3J0KChpdGVtMSwgaXRlbTIpID0+XG4gICAgICAgICAgICBpdGVtU29ydEZ1bmN0aW9uKGl0ZW0xLml0ZW0sIGl0ZW0yLml0ZW0sIHNlYXJjaFdvcmRzKVxuICAgICAgICAgIClcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoc29ydEJ5TWF0Y2hlZEtleXdvcmRzKSB7XG4gICAgICAgICAgICB0ZW1wZmlsdGVyZWRMaXN0SXRlbXMgPSB0ZW1wZmlsdGVyZWRMaXN0SXRlbXMuc29ydCgoaXRlbTEsIGl0ZW0yKSA9PlxuICAgICAgICAgICAgICBkZWZhdWx0SXRlbVNvcnRGdW5jdGlvbihpdGVtMSwgaXRlbTIsIHNlYXJjaFdvcmRzKVxuICAgICAgICAgICAgKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0ZW1wZmlsdGVyZWRMaXN0SXRlbXMgPSBsaXN0SXRlbXNcbiAgICB9XG5cbiAgICBjb25zdCBobGZpbHRlciA9IGhpZ2hsaWdodEZpbHRlcihzZWFyY2hXb3JkcywgXCJsYWJlbFwiKVxuICAgIGZpbHRlcmVkTGlzdEl0ZW1zID0gdGVtcGZpbHRlcmVkTGlzdEl0ZW1zLm1hcChobGZpbHRlcilcbiAgICBjbG9zZUlmTWluQ2hhcnNUb1NlYXJjaFJlYWNoZWQoKVxuICAgIHJldHVybiB0cnVlXG4gIH1cblxuICAvLyAkOiB0ZXh0LCBzZWFyY2goKTtcblxuICBmdW5jdGlvbiBhZnRlckNyZWF0ZShjcmVhdGVkSXRlbSkge1xuICAgIGxldCBsaXN0SXRlbVxuICAgIGlmIChkZWJ1Zykge1xuICAgICAgY29uc29sZS5sb2coXCJjcmVhdGVkSXRlbVwiLCBjcmVhdGVkSXRlbSlcbiAgICB9XG4gICAgaWYgKFwidW5kZWZpbmVkXCIgIT09IHR5cGVvZiBjcmVhdGVkSXRlbSkge1xuICAgICAgcHJlcGFyZUxpc3RJdGVtcygpXG4gICAgICBmaWx0ZXJlZExpc3RJdGVtcyA9IGxpc3RJdGVtc1xuICAgICAgbGV0IGluZGV4ID0gZmluZEl0ZW1JbmRleChjcmVhdGVkSXRlbSwgZmlsdGVyZWRMaXN0SXRlbXMpXG5cbiAgICAgIC8vIGlmIHRoZSBpdGVtcyBhcnJheSB3YXMgbm90IHVwZGF0ZWQsIGFkZCB0aGUgY3JlYXRlZCBpdGVtIG1hbnVhbGx5XG4gICAgICBpZiAoaW5kZXggPD0gMCkge1xuICAgICAgICBpdGVtcyA9IFtjcmVhdGVkSXRlbV1cbiAgICAgICAgcHJlcGFyZUxpc3RJdGVtcygpXG4gICAgICAgIGZpbHRlcmVkTGlzdEl0ZW1zID0gbGlzdEl0ZW1zXG4gICAgICAgIGluZGV4ID0gMFxuICAgICAgfVxuXG4gICAgICBpZiAoaW5kZXggPj0gMCkge1xuICAgICAgICBoaWdobGlnaHRJbmRleCA9IGluZGV4XG4gICAgICAgIGxpc3RJdGVtID0gZmlsdGVyZWRMaXN0SXRlbXNbaGlnaGxpZ2h0SW5kZXhdXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBsaXN0SXRlbVxuICB9XG5cbiAgZnVuY3Rpb24gc2VsZWN0TGlzdEl0ZW0obGlzdEl0ZW0pIHtcbiAgICBpZiAoZGVidWcpIHtcbiAgICAgIGNvbnNvbGUubG9nKFwic2VsZWN0TGlzdEl0ZW1cIiwgbGlzdEl0ZW0pXG4gICAgfVxuICAgIGlmIChcInVuZGVmaW5lZFwiID09PSB0eXBlb2YgbGlzdEl0ZW0gJiYgY3JlYXRlKSB7XG4gICAgICAvLyBhbGxvdyB1bmRlZmluZWQgaXRlbXMgaWYgY3JlYXRlIGlzIGVuYWJsZWRcbiAgICAgIGNvbnN0IGNyZWF0ZWRJdGVtID0gb25DcmVhdGUodGV4dClcbiAgICAgIGlmIChcInVuZGVmaW5lZFwiICE9PSB0eXBlb2YgY3JlYXRlZEl0ZW0pIHtcbiAgICAgICAgaWYgKHR5cGVvZiBjcmVhdGVkSXRlbS50aGVuID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICBjcmVhdGVkSXRlbS50aGVuKChuZXdJdGVtKSA9PiB7XG4gICAgICAgICAgICBpZiAoXCJ1bmRlZmluZWRcIiAhPT0gdHlwZW9mIG5ld0l0ZW0pIHtcbiAgICAgICAgICAgICAgY29uc3QgbmV3TGlzdEl0ZW0gPSBhZnRlckNyZWF0ZShuZXdJdGVtKVxuICAgICAgICAgICAgICBpZiAoXCJ1bmRlZmluZWRcIiAhPT0gdHlwZW9mIG5ld0xpc3RJdGVtKSB7XG4gICAgICAgICAgICAgICAgc2VsZWN0TGlzdEl0ZW0obmV3TGlzdEl0ZW0pXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KVxuICAgICAgICAgIHJldHVybiB0cnVlXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbGlzdEl0ZW0gPSBhZnRlckNyZWF0ZShjcmVhdGVkSXRlbSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChcInVuZGVmaW5lZFwiID09PSB0eXBlb2YgbGlzdEl0ZW0pIHtcbiAgICAgIGlmIChkZWJ1Zykge1xuICAgICAgICBjb25zb2xlLmxvZyhgbGlzdEl0ZW0gaXMgdW5kZWZpbmVkLiBDYW4gbm90IHNlbGVjdC5gKVxuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuXG4gICAgaWYgKGxvY2tlZCkge1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG5cbiAgICBjb25zdCBuZXdTZWxlY3RlZEl0ZW0gPSBsaXN0SXRlbS5pdGVtXG4gICAgaWYgKGJlZm9yZUNoYW5nZShzZWxlY3RlZEl0ZW0sIG5ld1NlbGVjdGVkSXRlbSkpIHtcbiAgICAgIC8vIHNpbXBsZSBzZWxlY3Rpb25cbiAgICAgIGlmICghbXVsdGlwbGUpIHtcbiAgICAgICAgc2VsZWN0ZWRJdGVtID0gdW5kZWZpbmVkIC8vIHRyaWdnZXJzIGNoYW5nZSBldmVuIGlmIHRoZSB0aGUgc2FtZSBpdGVtIGlzIHNlbGVjdGVkXG4gICAgICAgIHNlbGVjdGVkSXRlbSA9IG5ld1NlbGVjdGVkSXRlbVxuICAgICAgfVxuICAgICAgLy8gZmlyc3Qgc2VsZWN0aW9uIG9mIG11bHRpcGxlIG9uZXNcbiAgICAgIGVsc2UgaWYgKCFzZWxlY3RlZEl0ZW0pIHtcbiAgICAgICAgc2VsZWN0ZWRJdGVtID0gW25ld1NlbGVjdGVkSXRlbV1cbiAgICAgIH1cbiAgICAgIC8vIHNlbGVjdGluZyBzb21ldGhpbmcgYWxyZWFkeSBzZWxlY3RlZCA9PiB1bnNlbGVjdCBpdFxuICAgICAgZWxzZSBpZiAoc2VsZWN0ZWRJdGVtLmluY2x1ZGVzKG5ld1NlbGVjdGVkSXRlbSkpIHtcbiAgICAgICAgc2VsZWN0ZWRJdGVtID0gc2VsZWN0ZWRJdGVtLmZpbHRlcigoaSkgPT4gaSAhPT0gbmV3U2VsZWN0ZWRJdGVtKVxuICAgICAgfVxuICAgICAgLy8gYWRkcyB0aGUgZWxlbWVudCB0byB0aGUgc2VsZWN0aW9uXG4gICAgICBlbHNlIHtcbiAgICAgICAgc2VsZWN0ZWRJdGVtID0gWy4uLnNlbGVjdGVkSXRlbSwgbmV3U2VsZWN0ZWRJdGVtXVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZVxuICB9XG5cbiAgZnVuY3Rpb24gc2VsZWN0SXRlbSgpIHtcbiAgICBpZiAoZGVidWcpIHtcbiAgICAgIGNvbnNvbGUubG9nKFwic2VsZWN0SXRlbVwiLCBoaWdobGlnaHRJbmRleClcbiAgICB9XG4gICAgY29uc3QgbGlzdEl0ZW0gPSBmaWx0ZXJlZExpc3RJdGVtc1toaWdobGlnaHRJbmRleF1cbiAgICBpZiAoc2VsZWN0TGlzdEl0ZW0obGlzdEl0ZW0pKSB7XG4gICAgICBpZiAoZGVidWcpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJzZWxlY3RMaXN0SXRlbSB0cnVlLCBjbG9zaW5nXCIpXG4gICAgICB9XG4gICAgICBjbG9zZSgpXG4gICAgICBpZiAobXVsdGlwbGUpIHtcbiAgICAgICAgdGV4dCA9IFwiXCJcbiAgICAgICAgaW5wdXQuZm9jdXMoKVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoZGVidWcpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJzZWxlY3RMaXN0SXRlbSBmYWxzZSwgbm90IGNsb3NpbmdcIilcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiB1cCgpIHtcbiAgICBpZiAoZGVidWcpIHtcbiAgICAgIGNvbnNvbGUubG9nKFwidXBcIilcbiAgICB9XG5cbiAgICBvcGVuKClcbiAgICBpZiAoaGlnaGxpZ2h0SW5kZXggPiAwKSB7XG4gICAgICBoaWdobGlnaHRJbmRleC0tXG4gICAgfVxuXG4gICAgaGlnaGxpZ2h0KClcbiAgfVxuXG4gIGZ1bmN0aW9uIGRvd24oKSB7XG4gICAgaWYgKGRlYnVnKSB7XG4gICAgICBjb25zb2xlLmxvZyhcImRvd25cIilcbiAgICB9XG5cbiAgICBvcGVuKClcbiAgICBpZiAoaGlnaGxpZ2h0SW5kZXggPCBmaWx0ZXJlZExpc3RJdGVtcy5sZW5ndGggLSAxKSB7XG4gICAgICBoaWdobGlnaHRJbmRleCsrXG4gICAgfVxuXG4gICAgaGlnaGxpZ2h0KClcbiAgfVxuXG4gIGZ1bmN0aW9uIGhpZ2hsaWdodCgpIHtcbiAgICBpZiAoZGVidWcpIHtcbiAgICAgIGNvbnNvbGUubG9nKFwiaGlnaGxpZ2h0XCIpXG4gICAgfVxuXG4gICAgY29uc3QgcXVlcnkgPSBcIi5zZWxlY3RlZFwiXG4gICAgaWYgKGRlYnVnKSB7XG4gICAgICBjb25zb2xlLmxvZyhcIlNlYWNoaW5nIERPTSBlbGVtZW50OiBcIiArIHF1ZXJ5ICsgXCIgaW4gXCIgKyBsaXN0KVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7RWxlbWVudH0gZWxcbiAgICAgKi9cbiAgICBjb25zdCBlbCA9IGxpc3QgJiYgbGlzdC5xdWVyeVNlbGVjdG9yKHF1ZXJ5KVxuICAgIGlmIChlbCkge1xuICAgICAgaWYgKHR5cGVvZiBlbC5zY3JvbGxJbnRvVmlld0lmTmVlZGVkID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgaWYgKGRlYnVnKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coXCJTY3JvbGxpbmcgc2VsZWN0ZWQgaXRlbSBpbnRvIHZpZXdcIilcbiAgICAgICAgfVxuICAgICAgICBlbC5zY3JvbGxJbnRvVmlld0lmTmVlZGVkKClcbiAgICAgIH0gZWxzZSBpZiAoZWwuc2Nyb2xsSW50b1ZpZXcgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICBpZiAoZGVidWcpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhcIlNjcm9sbGluZyBzZWxlY3RlZCBpdGVtIGludG8gdmlld1wiKVxuICAgICAgICB9XG4gICAgICAgIGVsLnNjcm9sbEludG9WaWV3KClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChkZWJ1Zykge1xuICAgICAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgICAgIFwiQ291bGQgbm90IHNjcm9sbCBzZWxlY3RlZCBpdGVtIGludG8gdmlldywgc2Nyb2xsSW50b1ZpZXdJZk5lZWRlZCBub3Qgc3VwcG9ydGVkXCJcbiAgICAgICAgICApXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGRlYnVnKSB7XG4gICAgICAgIGNvbnNvbGUud2FybihcIlNlbGVjdGVkIGl0ZW0gbm90IGZvdW5kIHRvIHNjcm9sbCBpbnRvIHZpZXdcIilcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBvbkxpc3RJdGVtQ2xpY2sobGlzdEl0ZW0pIHtcbiAgICBpZiAoZGVidWcpIHtcbiAgICAgIGNvbnNvbGUubG9nKFwib25MaXN0SXRlbUNsaWNrXCIpXG4gICAgfVxuXG4gICAgaWYgKHNlbGVjdExpc3RJdGVtKGxpc3RJdGVtKSkge1xuICAgICAgY2xvc2UoKVxuICAgICAgaWYgKG11bHRpcGxlKSB7XG4gICAgICAgIHRleHQgPSBcIlwiXG4gICAgICAgIGlucHV0LmZvY3VzKClcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBvbkRvY3VtZW50Q2xpY2soZSkge1xuICAgIGlmIChkZWJ1Zykge1xuICAgICAgY29uc29sZS5sb2coXCJvbkRvY3VtZW50Q2xpY2tcIilcbiAgICB9XG4gICAgaWYgKGUuY29tcG9zZWRQYXRoKCkuc29tZSgocGF0aCkgPT4gcGF0aC5jbGFzc0xpc3QgJiYgcGF0aC5jbGFzc0xpc3QuY29udGFpbnModW5pcXVlSWQpKSkge1xuICAgICAgaWYgKGRlYnVnKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwib25Eb2N1bWVudENsaWNrIGluc2lkZVwiKVxuICAgICAgfVxuICAgICAgLy8gcmVzZXRMaXN0VG9BbGxJdGVtc0FuZE9wZW4oKTtcbiAgICAgIGhpZ2hsaWdodCgpXG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChkZWJ1Zykge1xuICAgICAgICBjb25zb2xlLmxvZyhcIm9uRG9jdW1lbnRDbGljayBvdXRzaWRlXCIpXG4gICAgICB9XG4gICAgICBjbG9zZSgpXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gb25LZXlEb3duKGUpIHtcbiAgICBpZiAoZGVidWcpIHtcbiAgICAgIGNvbnNvbGUubG9nKFwib25LZXlEb3duXCIpXG4gICAgfVxuXG4gICAgbGV0IGtleSA9IGUua2V5XG4gICAgaWYgKGtleSA9PT0gXCJUYWJcIiAmJiBlLnNoaWZ0S2V5KSBrZXkgPSBcIlNoaWZ0VGFiXCJcbiAgICBjb25zdCBmbm1hcCA9IHtcbiAgICAgIFRhYjogb3BlbmVkID8gY2xvc2UgOiBudWxsLFxuICAgICAgU2hpZnRUYWI6IG9wZW5lZCA/IGNsb3NlIDogbnVsbCxcbiAgICAgIEFycm93RG93bjogZG93bi5iaW5kKHRoaXMpLFxuICAgICAgQXJyb3dVcDogdXAuYmluZCh0aGlzKSxcbiAgICAgIEVzY2FwZTogb25Fc2MuYmluZCh0aGlzKSxcbiAgICAgIEJhY2tzcGFjZTogbXVsdGlwbGUgJiYgaGFzU2VsZWN0aW9uICYmICF0ZXh0ID8gb25CYWNrc3BhY2UuYmluZCh0aGlzKSA6IG51bGwsXG4gICAgfVxuICAgIGNvbnN0IGZuID0gZm5tYXBba2V5XVxuICAgIGlmICh0eXBlb2YgZm4gPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgZm4oZSlcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBvbktleVByZXNzKGUpIHtcbiAgICBpZiAoZGVidWcpIHtcbiAgICAgIGNvbnNvbGUubG9nKFwib25LZXlQcmVzc1wiKVxuICAgIH1cblxuICAgIGlmIChlLmtleSA9PT0gXCJFbnRlclwiKSB7XG4gICAgICBvbkVudGVyKGUpXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gb25FbnRlcihlKSB7XG4gICAgaWYgKG9wZW5lZCkge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpXG4gICAgICBzZWxlY3RJdGVtKClcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBvbklucHV0KGUpIHtcbiAgICBpZiAoZGVidWcpIHtcbiAgICAgIGNvbnNvbGUubG9nKFwib25JbnB1dFwiKVxuICAgIH1cblxuICAgIHRleHQgPSBlLnRhcmdldC52YWx1ZVxuICAgIGlmIChpbnB1dERlbGF5VGltZW91dCkge1xuICAgICAgY2xlYXJUaW1lb3V0KGlucHV0RGVsYXlUaW1lb3V0KVxuICAgIH1cblxuICAgIGlmIChkZWxheSkge1xuICAgICAgaW5wdXREZWxheVRpbWVvdXQgPSBzZXRUaW1lb3V0KHByb2Nlc3NJbnB1dCwgZGVsYXkpXG4gICAgfSBlbHNlIHtcbiAgICAgIHByb2Nlc3NJbnB1dCgpXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdW5zZWxlY3RJdGVtKHRhZykge1xuICAgIGlmIChkZWJ1Zykge1xuICAgICAgY29uc29sZS5sb2coXCJ1bnNlbGVjdEl0ZW1cIiwgdGFnKVxuICAgIH1cbiAgICBzZWxlY3RlZEl0ZW0gPSBzZWxlY3RlZEl0ZW0uZmlsdGVyKChpKSA9PiBpICE9PSB0YWcpXG4gICAgaW5wdXQuZm9jdXMoKVxuICB9XG5cbiAgZnVuY3Rpb24gcHJvY2Vzc0lucHV0KCkge1xuICAgIGlmIChzZWFyY2goKSkge1xuICAgICAgaGlnaGxpZ2h0SW5kZXggPSAwXG4gICAgICBvcGVuKClcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBvbklucHV0Q2xpY2soKSB7XG4gICAgaWYgKGRlYnVnKSB7XG4gICAgICBjb25zb2xlLmxvZyhcIm9uSW5wdXRDbGlja1wiKVxuICAgIH1cbiAgICByZXNldExpc3RUb0FsbEl0ZW1zQW5kT3BlbigpXG4gIH1cblxuICBmdW5jdGlvbiBvbkVzYyhlKSB7XG4gICAgaWYgKGRlYnVnKSB7XG4gICAgICBjb25zb2xlLmxvZyhcIm9uRXNjXCIpXG4gICAgfVxuXG4gICAgLy9pZiAodGV4dCkgcmV0dXJuIGNsZWFyKCk7XG4gICAgZS5zdG9wUHJvcGFnYXRpb24oKVxuICAgIGlmIChvcGVuZWQpIHtcbiAgICAgIGlucHV0LmZvY3VzKClcbiAgICAgIGNsb3NlKClcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBvbkJhY2tzcGFjZShlKSB7XG4gICAgaWYgKGRlYnVnKSB7XG4gICAgICBjb25zb2xlLmxvZyhcIm9uQmFja3NwYWNlXCIpXG4gICAgfVxuXG4gICAgdW5zZWxlY3RJdGVtKHNlbGVjdGVkSXRlbVtzZWxlY3RlZEl0ZW0ubGVuZ3RoIC0gMV0pXG4gIH1cblxuICBmdW5jdGlvbiBvbkZvY3VzSW50ZXJuYWwoKSB7XG4gICAgaWYgKGRlYnVnKSB7XG4gICAgICBjb25zb2xlLmxvZyhcIm9uRm9jdXNcIilcbiAgICB9XG5cbiAgICBvbkZvY3VzKClcblxuICAgIHJlc2V0TGlzdFRvQWxsSXRlbXNBbmRPcGVuKClcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uQmx1ckludGVybmFsKCkge1xuICAgIGlmIChkZWJ1Zykge1xuICAgICAgY29uc29sZS5sb2coXCJvbkJsdXJcIilcbiAgICB9XG5cbiAgICBpZiAoY2xvc2VPbkJsdXIpIHtcbiAgICAgIGNsb3NlKClcbiAgICB9XG5cbiAgICBvbkJsdXIoKVxuICB9XG5cbiAgZnVuY3Rpb24gcmVzZXRMaXN0VG9BbGxJdGVtc0FuZE9wZW4oKSB7XG4gICAgaWYgKGRlYnVnKSB7XG4gICAgICBjb25zb2xlLmxvZyhcInJlc2V0TGlzdFRvQWxsSXRlbXNBbmRPcGVuXCIpXG4gICAgfVxuXG4gICAgaWYgKHNlYXJjaEZ1bmN0aW9uICYmICFsaXN0SXRlbXMubGVuZ3RoKSB7XG4gICAgICBzZWFyY2goKVxuICAgIH0gZWxzZSBpZiAoIXRleHQpIHtcbiAgICAgIGZpbHRlcmVkTGlzdEl0ZW1zID0gbGlzdEl0ZW1zXG4gICAgfVxuXG4gICAgb3BlbigpXG5cbiAgICAvLyBmaW5kIHNlbGVjdGVkIGl0ZW1cbiAgICBpZiAoc2VsZWN0ZWRJdGVtKSB7XG4gICAgICBpZiAoZGVidWcpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJTZWFyY2hpbmcgY3VycmVudGx5IHNlbGVjdGVkIGl0ZW06IFwiICsgSlNPTi5zdHJpbmdpZnkoc2VsZWN0ZWRJdGVtKSlcbiAgICAgIH1cblxuICAgICAgY29uc3QgaW5kZXggPSBmaW5kSXRlbUluZGV4KHNlbGVjdGVkSXRlbSwgZmlsdGVyZWRMaXN0SXRlbXMpXG4gICAgICBpZiAoaW5kZXggPj0gMCkge1xuICAgICAgICBoaWdobGlnaHRJbmRleCA9IGluZGV4XG4gICAgICAgIGhpZ2hsaWdodCgpXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZmluZEl0ZW1JbmRleChpdGVtLCBpdGVtcykge1xuICAgIGlmIChkZWJ1Zykge1xuICAgICAgY29uc29sZS5sb2coXCJGaW5kaW5nIGluZGV4IGZvciBpdGVtXCIsIGl0ZW0pXG4gICAgfVxuICAgIGxldCBpbmRleCA9IC0xXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpdGVtcy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgbGlzdEl0ZW0gPSBpdGVtc1tpXVxuICAgICAgaWYgKFwidW5kZWZpbmVkXCIgPT09IHR5cGVvZiBsaXN0SXRlbSkge1xuICAgICAgICBpZiAoZGVidWcpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhgbGlzdEl0ZW0gJHtpfSBpcyB1bmRlZmluZWQuIFNraXBwaW5nLmApXG4gICAgICAgIH1cbiAgICAgICAgY29udGludWVcbiAgICAgIH1cbiAgICAgIGlmIChkZWJ1Zykge1xuICAgICAgICBjb25zb2xlLmxvZyhcIkl0ZW0gXCIgKyBpICsgXCI6IFwiICsgSlNPTi5zdHJpbmdpZnkobGlzdEl0ZW0pKVxuICAgICAgfVxuICAgICAgaWYgKGl0ZW0gPT09IGxpc3RJdGVtLml0ZW0pIHtcbiAgICAgICAgaW5kZXggPSBpXG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGRlYnVnKSB7XG4gICAgICBpZiAoaW5kZXggPj0gMCkge1xuICAgICAgICBjb25zb2xlLmxvZyhcIkZvdW5kIGluZGV4IGZvciBpdGVtOiBcIiArIGluZGV4KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc29sZS53YXJuKFwiTm90IGZvdW5kIGluZGV4IGZvciBpdGVtOiBcIiArIGl0ZW0pXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBpbmRleFxuICB9XG5cbiAgZnVuY3Rpb24gb3BlbigpIHtcbiAgICBpZiAoZGVidWcpIHtcbiAgICAgIGNvbnNvbGUubG9nKFwib3BlblwiKVxuICAgIH1cblxuICAgIC8vIGNoZWNrIGlmIHRoZSBzZWFyY2ggdGV4dCBoYXMgbW9yZSB0aGFuIHRoZSBtaW4gY2hhcnMgcmVxdWlyZWRcbiAgICBpZiAobG9ja2VkIHx8IG5vdEVub3VnaFNlYXJjaFRleHQoKSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgc2V0UG9zaXRpb25Pbk5leHRVcGRhdGUgPSB0cnVlXG5cbiAgICBvcGVuZWQgPSB0cnVlXG4gIH1cblxuICBmdW5jdGlvbiBjbG9zZSgpIHtcbiAgICBpZiAoZGVidWcpIHtcbiAgICAgIGNvbnNvbGUubG9nKFwiY2xvc2VcIilcbiAgICB9XG4gICAgb3BlbmVkID0gZmFsc2VcbiAgICBsb2FkaW5nID0gZmFsc2VcblxuICAgIGlmICghdGV4dCAmJiBzZWxlY3RGaXJzdElmRW1wdHkpIHtcbiAgICAgIGhpZ2hsaWdodEluZGV4ID0gMFxuICAgICAgc2VsZWN0SXRlbSgpXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gbm90RW5vdWdoU2VhcmNoVGV4dCgpIHtcbiAgICByZXR1cm4gKFxuICAgICAgbWluQ2hhcmFjdGVyc1RvU2VhcmNoID4gMCAmJlxuICAgICAgZmlsdGVyZWRUZXh0TGVuZ3RoIDwgbWluQ2hhcmFjdGVyc1RvU2VhcmNoICYmXG4gICAgICAvLyBXaGVuIG5vIHNlYXJjaEZ1bmN0aW9uIGlzIGRlZmluZWQsIHRoZSBtZW51IHNob3VsZCBhbHdheXMgb3BlbiB3aGVuIHRoZSBpbnB1dCBpcyBmb2N1c2VkXG4gICAgICAoc2VhcmNoRnVuY3Rpb24gfHwgZmlsdGVyZWRUZXh0TGVuZ3RoID4gMClcbiAgICApXG4gIH1cblxuICBmdW5jdGlvbiBjbG9zZUlmTWluQ2hhcnNUb1NlYXJjaFJlYWNoZWQoKSB7XG4gICAgaWYgKG5vdEVub3VnaFNlYXJjaFRleHQoKSkge1xuICAgICAgY2xvc2UoKVxuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICBmdW5jdGlvbiBjbGVhcigpIHtcbiAgICBpZiAoZGVidWcpIHtcbiAgICAgIGNvbnNvbGUubG9nKFwiY2xlYXJcIilcbiAgICB9XG5cbiAgICB0ZXh0ID0gXCJcIlxuICAgIHNlbGVjdGVkSXRlbSA9IG11bHRpcGxlID8gW10gOiB1bmRlZmluZWRcblxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgaW5wdXQuZm9jdXMoKVxuICAgIH0pXG4gIH1cblxuICBleHBvcnQgZnVuY3Rpb24gaGlnaGxpZ2h0RmlsdGVyKGtleXdvcmRzLCBmaWVsZCkge1xuICAgIHJldHVybiAoaXRlbSkgPT4ge1xuICAgICAgbGV0IGxhYmVsID0gaXRlbVtmaWVsZF1cblxuICAgICAgY29uc3QgbmV3SXRlbSA9IE9iamVjdC5hc3NpZ24oeyBoaWdobGlnaHRlZDogdW5kZWZpbmVkIH0sIGl0ZW0pXG4gICAgICBuZXdJdGVtLmhpZ2hsaWdodGVkID0gbGFiZWxcblxuICAgICAgY29uc3QgbGFiZWxMb3dlcmNhc2UgPSBsYWJlbC50b0xvd2VyQ2FzZSgpXG4gICAgICBjb25zdCBsYWJlbExvd2VyY2FzZU5vQWMgPSBpZ25vcmVBY2NlbnRzID8gcmVtb3ZlQWNjZW50cyhsYWJlbExvd2VyY2FzZSkgOiBsYWJlbExvd2VyY2FzZVxuXG4gICAgICBpZiAoa2V5d29yZHMgJiYga2V5d29yZHMubGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHBvc2l0aW9ucyA9IFtdXG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBrZXl3b3Jkcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGxldCBrZXl3b3JkID0ga2V5d29yZHNbaV1cbiAgICAgICAgICBpZiAoaWdub3JlQWNjZW50cykge1xuICAgICAgICAgICAga2V5d29yZCA9IHJlbW92ZUFjY2VudHMoa2V5d29yZClcbiAgICAgICAgICB9XG4gICAgICAgICAgY29uc3Qga2V5d29yZExlbiA9IGtleXdvcmQubGVuZ3RoXG5cbiAgICAgICAgICBsZXQgcG9zMSA9IDBcbiAgICAgICAgICBkbyB7XG4gICAgICAgICAgICBwb3MxID0gbGFiZWxMb3dlcmNhc2VOb0FjLmluZGV4T2Yoa2V5d29yZCwgcG9zMSlcbiAgICAgICAgICAgIGlmIChwb3MxID49IDApIHtcbiAgICAgICAgICAgICAgbGV0IHBvczIgPSBwb3MxICsga2V5d29yZExlblxuICAgICAgICAgICAgICBwb3NpdGlvbnMucHVzaChbcG9zMSwgcG9zMl0pXG4gICAgICAgICAgICAgIHBvczEgPSBwb3MyXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSB3aGlsZSAocG9zMSAhPT0gLTEpXG4gICAgICAgIH1cblxuICAgICAgICBpZiAocG9zaXRpb25zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICBjb25zdCBrZXl3b3JkUGF0dGVybnMgPSBuZXcgU2V0KClcbiAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBvc2l0aW9ucy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgcGFpciA9IHBvc2l0aW9uc1tpXVxuICAgICAgICAgICAgY29uc3QgcG9zMSA9IHBhaXJbMF1cbiAgICAgICAgICAgIGNvbnN0IHBvczIgPSBwYWlyWzFdXG5cbiAgICAgICAgICAgIGNvbnN0IGtleXdvcmRQYXR0ZXJuID0gbGFiZWxMb3dlcmNhc2Uuc3Vic3RyaW5nKHBvczEsIHBvczIpXG4gICAgICAgICAgICBrZXl3b3JkUGF0dGVybnMuYWRkKGtleXdvcmRQYXR0ZXJuKVxuICAgICAgICAgIH1cbiAgICAgICAgICBmb3IgKGxldCBrZXl3b3JkUGF0dGVybiBvZiBrZXl3b3JkUGF0dGVybnMpIHtcbiAgICAgICAgICAgIC8vIEZJWE1FIHBzdDogd29ya2Fyb25kIGZvciB3cm9uZyByZXBsYWNlbWVudCA8Yj4gdGFnc1xuICAgICAgICAgICAgaWYgKGtleXdvcmRQYXR0ZXJuID09PSBcImJcIikge1xuICAgICAgICAgICAgICBjb250aW51ZVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgcmVnID0gbmV3IFJlZ0V4cChcIihcIiArIGtleXdvcmRQYXR0ZXJuICsgXCIpXCIsIFwiaWdcIilcblxuICAgICAgICAgICAgY29uc3QgbmV3SGlnaGxpZ2h0ZWQgPSBuZXdJdGVtLmhpZ2hsaWdodGVkLnJlcGxhY2UocmVnLCBcIjxiPiQxPC9iPlwiKVxuICAgICAgICAgICAgbmV3SXRlbS5oaWdobGlnaHRlZCA9IG5ld0hpZ2hsaWdodGVkXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBuZXdJdGVtXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVtb3ZlQWNjZW50cyhzdHIpIHtcbiAgICByZXR1cm4gc3RyLm5vcm1hbGl6ZShcIk5GRFwiKS5yZXBsYWNlKC9bXFx1MDMwMC1cXHUwMzZmXS9nLCBcIlwiKVxuICB9XG5cbiAgZnVuY3Rpb24gaXNDb25maXJtZWQobGlzdEl0ZW0pIHtcbiAgICBpZiAoIXNlbGVjdGVkSXRlbSkge1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICAgIGlmIChtdWx0aXBsZSkge1xuICAgICAgcmV0dXJuIHNlbGVjdGVkSXRlbS5pbmNsdWRlcyhsaXN0SXRlbSlcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGxpc3RJdGVtID09PSBzZWxlY3RlZEl0ZW1cbiAgICB9XG4gIH1cblxuICBsZXQgZHJhZ2dpbmdPdmVyID0gZmFsc2VcblxuICBmdW5jdGlvbiBkcmFnc3RhcnQoZXZlbnQsIGluZGV4KSB7XG4gICAgaWYgKG9yZGVyYWJsZVNlbGVjdGlvbikge1xuICAgICAgZXZlbnQuZGF0YVRyYW5zZmVyLnNldERhdGEoXCJzb3VyY2VcIiwgaW5kZXgpXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZHJhZ292ZXIoZXZlbnQsIGluZGV4KSB7XG4gICAgaWYgKG9yZGVyYWJsZVNlbGVjdGlvbikge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgICAgZHJhZ2dpbmdPdmVyID0gaW5kZXhcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBkcmFnbGVhdmUoZXZlbnQsIGluZGV4KSB7XG4gICAgaWYgKG9yZGVyYWJsZVNlbGVjdGlvbikge1xuICAgICAgZHJhZ2dpbmdPdmVyID0gZmFsc2VcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBkcm9wKGV2ZW50LCBpbmRleCkge1xuICAgIGlmIChvcmRlcmFibGVTZWxlY3Rpb24pIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICAgIGRyYWdnaW5nT3ZlciA9IGZhbHNlXG4gICAgICBsZXQgZnJvbSA9IHBhcnNlSW50KGV2ZW50LmRhdGFUcmFuc2Zlci5nZXREYXRhKFwic291cmNlXCIpKVxuICAgICAgbGV0IHRvID0gaW5kZXhcbiAgICAgIGlmIChmcm9tICE9IHRvKSB7XG4gICAgICAgIG1vdmVTZWxlY3RlZEl0ZW0oZnJvbSwgdG8pXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gbW92ZVNlbGVjdGVkSXRlbShmcm9tLCB0bykge1xuICAgIGxldCBuZXdTZWxlY3Rpb24gPSBbLi4uc2VsZWN0ZWRJdGVtXVxuICAgIGlmIChmcm9tIDwgdG8pIHtcbiAgICAgIG5ld1NlbGVjdGlvbi5zcGxpY2UodG8gKyAxLCAwLCBuZXdTZWxlY3Rpb25bZnJvbV0pXG4gICAgICBuZXdTZWxlY3Rpb24uc3BsaWNlKGZyb20sIDEpXG4gICAgfSBlbHNlIHtcbiAgICAgIG5ld1NlbGVjdGlvbi5zcGxpY2UodG8sIDAsIG5ld1NlbGVjdGlvbltmcm9tXSlcbiAgICAgIG5ld1NlbGVjdGlvbi5zcGxpY2UoZnJvbSArIDEsIDEpXG4gICAgfVxuICAgIHNlbGVjdGVkSXRlbSA9IG5ld1NlbGVjdGlvblxuICB9XG5cbiAgZnVuY3Rpb24gc2V0U2Nyb2xsQXdhcmVMaXN0UG9zaXRpb24oKSB7XG4gICAgY29uc3QgeyBoZWlnaHQ6IHZpZXdQb3J0SGVpZ2h0IH0gPSB3aW5kb3cudmlzdWFsVmlld3BvcnRcbiAgICBjb25zdCB7IGJvdHRvbTogaW5wdXRCdXR0b20sIGhlaWdodDogaW5wdXRIZWlnaHQgfSA9IGlucHV0Q29udGFpbmVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpXG4gICAgY29uc3QgeyBoZWlnaHQ6IGxpc3RIZWlnaHQgfSA9IGxpc3QuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClcblxuICAgIGlmIChpbnB1dEJ1dHRvbSArIGxpc3RIZWlnaHQgPiB2aWV3UG9ydEhlaWdodCkge1xuICAgICAgbGlzdC5zdHlsZS50b3AgPSBgLSR7aW5wdXRIZWlnaHQgKyBsaXN0SGVpZ2h0fXB4YFxuICAgIH0gZWxzZSB7XG4gICAgICBsaXN0LnN0eWxlLnRvcCA9IFwiMHB4XCJcbiAgICB9XG4gIH1cbjwvc2NyaXB0PlxuPGRpdlxuICBjbGFzcz1cIntjbGFzc05hbWUgPyBjbGFzc05hbWUgOiAnJ30gYXV0b2NvbXBsZXRlIHNlbGVjdCBpcy1mdWxsd2lkdGgge3VuaXF1ZUlkfVwiXG4gIGNsYXNzOmhpZGUtYXJyb3c9e2hpZGVBcnJvdyB8fCAhaXRlbXMubGVuZ3RofVxuICBjbGFzczppcy1tdWx0aXBsZT17bXVsdGlwbGV9XG4gIGNsYXNzOnNob3ctY2xlYXI9e2NsZWFyYWJsZX1cbiAgY2xhc3M6aXMtbG9hZGluZz17c2hvd0xvYWRpbmdJbmRpY2F0b3IgJiYgbG9hZGluZ31cbj5cbiAgPHNlbGVjdCBuYW1lPXtzZWxlY3ROYW1lfSBpZD17c2VsZWN0SWR9IHttdWx0aXBsZX0+XG4gICAgeyNpZiAhbXVsdGlwbGUgJiYgaGFzU2VsZWN0aW9ufVxuICAgICAgPG9wdGlvbiB2YWx1ZT17dmFsdWVGdW5jdGlvbihzZWxlY3RlZEl0ZW0sIHRydWUpfSBzZWxlY3RlZD5cbiAgICAgICAge3NhZmVMYWJlbEZ1bmN0aW9uKHNlbGVjdGVkSXRlbSl9XG4gICAgICA8L29wdGlvbj5cbiAgICB7OmVsc2UgaWYgbXVsdGlwbGUgJiYgaGFzU2VsZWN0aW9ufVxuICAgICAgeyNlYWNoIHNlbGVjdGVkSXRlbSBhcyBpfVxuICAgICAgICA8b3B0aW9uIHZhbHVlPXt2YWx1ZUZ1bmN0aW9uKGksIHRydWUpfSBzZWxlY3RlZD5cbiAgICAgICAgICB7c2FmZUxhYmVsRnVuY3Rpb24oaSl9XG4gICAgICAgIDwvb3B0aW9uPlxuICAgICAgey9lYWNofVxuICAgIHsvaWZ9XG4gIDwvc2VsZWN0PlxuICA8ZGl2IGNsYXNzPVwiaW5wdXQtY29udGFpbmVyXCIgYmluZDp0aGlzPXtpbnB1dENvbnRhaW5lcn0+XG4gICAgeyNpZiBtdWx0aXBsZSAmJiBoYXNTZWxlY3Rpb259XG4gICAgICB7I2VhY2ggc2VsZWN0ZWRJdGVtIGFzIHRhZ0l0ZW0sIGkgKHZhbHVlRnVuY3Rpb24odGFnSXRlbSwgdHJ1ZSkpfVxuICAgICAgICA8ZGl2XG4gICAgICAgICAgZHJhZ2dhYmxlPXt0cnVlfVxuICAgICAgICAgIGFuaW1hdGU6ZmxpcD17eyBkdXJhdGlvbjogMjAwIH19XG4gICAgICAgICAgdHJhbnNpdGlvbjpmYWRlPXt7IGR1cmF0aW9uOiAyMDAgfX1cbiAgICAgICAgICBvbjpkcmFnc3RhcnQ9eyhldmVudCkgPT4gZHJhZ3N0YXJ0KGV2ZW50LCBpKX1cbiAgICAgICAgICBvbjpkcmFnb3Zlcj17KGV2ZW50KSA9PiBkcmFnb3ZlcihldmVudCwgaSl9XG4gICAgICAgICAgb246ZHJhZ2xlYXZlPXsoZXZlbnQpID0+IGRyYWdsZWF2ZShldmVudCwgaSl9XG4gICAgICAgICAgb246ZHJvcD17KGV2ZW50KSA9PiBkcm9wKGV2ZW50LCBpKX1cbiAgICAgICAgICBjbGFzczppcy1hY3RpdmU9e2RyYWdnaW5nT3ZlciA9PT0gaX1cbiAgICAgICAgPlxuICAgICAgICAgIDxzbG90IG5hbWU9XCJ0YWdcIiBsYWJlbD17c2FmZUxhYmVsRnVuY3Rpb24odGFnSXRlbSl9IGl0ZW09e3RhZ0l0ZW19IHt1bnNlbGVjdEl0ZW19PlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInRhZ3MgaGFzLWFkZG9uc1wiPlxuICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInRhZ1wiPntzYWZlTGFiZWxGdW5jdGlvbih0YWdJdGVtKX08L3NwYW4+XG4gICAgICAgICAgICAgIDxzcGFuXG4gICAgICAgICAgICAgICAgY2xhc3M9XCJ0YWcgaXMtZGVsZXRlXCJcbiAgICAgICAgICAgICAgICBvbjpjbGlja3xwcmV2ZW50RGVmYXVsdD17dW5zZWxlY3RJdGVtKHRhZ0l0ZW0pfVxuICAgICAgICAgICAgICAgIG9uOmtleXByZXNzfHByZXZlbnREZWZhdWx0PXsoZSkgPT4ge2Uua2V5ID09IFwiRW50ZXJcIiAmJiB1bnNlbGVjdEl0ZW0odGFnSXRlbSl9fVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPC9zbG90PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIHsvZWFjaH1cbiAgICB7L2lmfVxuICAgIDxpbnB1dFxuICAgICAgdHlwZT1cInRleHRcIlxuICAgICAgY2xhc3M9XCJ7aW5wdXRDbGFzc05hbWUgPyBpbnB1dENsYXNzTmFtZSA6ICcnfSB7bm9JbnB1dFN0eWxlc1xuICAgICAgICA/ICcnXG4gICAgICAgIDogJ2lucHV0IGF1dG9jb21wbGV0ZS1pbnB1dCd9XCJcbiAgICAgIGlkPXtpbnB1dElkID8gaW5wdXRJZCA6IFwiXCJ9XG4gICAgICBhdXRvY29tcGxldGU9e2h0bWw1YXV0b2NvbXBsZXRlID8gXCJvblwiIDogYXV0b2NvbXBsZXRlT2ZmVmFsdWV9XG4gICAgICB7cGxhY2Vob2xkZXJ9XG4gICAgICB7bmFtZX1cbiAgICAgIHtkaXNhYmxlZH1cbiAgICAgIHtyZXF1aXJlZH1cbiAgICAgIHt0aXRsZX1cbiAgICAgIHJlYWRvbmx5PXtyZWFkb25seSB8fCBsb2NrZWR9XG4gICAgICB7dGFiaW5kZXh9XG4gICAgICBiaW5kOnRoaXM9e2lucHV0fVxuICAgICAgYmluZDp2YWx1ZT17dGV4dH1cbiAgICAgIG9uOmlucHV0PXtvbklucHV0fVxuICAgICAgb246Zm9jdXM9e29uRm9jdXNJbnRlcm5hbH1cbiAgICAgIG9uOmJsdXI9e29uQmx1ckludGVybmFsfVxuICAgICAgb246a2V5ZG93bj17b25LZXlEb3dufVxuICAgICAgb246Y2xpY2s9e29uSW5wdXRDbGlja31cbiAgICAgIG9uOmtleXByZXNzPXtvbktleVByZXNzfVxuICAgICAgb246ZHJhZ292ZXI9eyhldmVudCkgPT4gZHJhZ292ZXIoZXZlbnQsIHNlbGVjdGVkSXRlbS5sZW5ndGggLSAxKX1cbiAgICAgIG9uOmRyb3A9eyhldmVudCkgPT4gZHJvcChldmVudCwgc2VsZWN0ZWRJdGVtLmxlbmd0aCAtIDEpfVxuICAgICAgey4uLiQkcmVzdFByb3BzfVxuICAgIC8+XG4gICAgeyNpZiBjbGVhcmFibGV9XG4gICAgICA8c3BhblxuICAgICAgICBvbjpjbGljaz17Y2xlYXJ9XG4gICAgICAgIG9uOmtleXByZXNzPXsoZSkgPT4ge2Uua2V5ID09IFwiRW50ZXJcIiAmJiBjbGVhcigpfX1cbiAgICAgICAgY2xhc3M9XCJhdXRvY29tcGxldGUtY2xlYXItYnV0dG9uXCJcbiAgICAgICAgPntAaHRtbCBjbGVhclRleHR9PC9zcGFuPlxuICAgIHsvaWZ9XG4gIDwvZGl2PlxuICA8ZGl2XG4gICAgY2xhc3M9XCJ7ZHJvcGRvd25DbGFzc05hbWUgPyBkcm9wZG93bkNsYXNzTmFtZSA6ICcnfSBhdXRvY29tcGxldGUtbGlzdCB7c2hvd0xpc3QgPyAnJyA6ICdoaWRkZW4nfVxuICAgIGlzLWZ1bGx3aWR0aFwiXG4gICAgYmluZDp0aGlzPXtsaXN0fVxuICA+XG4gICAgeyNpZiBmaWx0ZXJlZExpc3RJdGVtcyAmJiBmaWx0ZXJlZExpc3RJdGVtcy5sZW5ndGggPiAwfVxuICAgICAgPHNsb3QgbmFtZT1cImRyb3Bkb3duLWhlYWRlclwiIG5iSXRlbXM9e2ZpbHRlcmVkTGlzdEl0ZW1zLmxlbmd0aH0ge21heEl0ZW1zVG9TaG93SW5MaXN0fSAvPlxuXG4gICAgICB7I2VhY2ggZmlsdGVyZWRMaXN0SXRlbXMgYXMgbGlzdEl0ZW0sIGl9XG4gICAgICAgIHsjaWYgbGlzdEl0ZW0gJiYgKG1heEl0ZW1zVG9TaG93SW5MaXN0IDw9IDAgfHwgaSA8IG1heEl0ZW1zVG9TaG93SW5MaXN0KX1cbiAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICBjbGFzcz1cImF1dG9jb21wbGV0ZS1saXN0LWl0ZW1cIlxuICAgICAgICAgICAgY2xhc3M6c2VsZWN0ZWQ9e2kgPT09IGhpZ2hsaWdodEluZGV4fVxuICAgICAgICAgICAgY2xhc3M6Y29uZmlybWVkPXtpc0NvbmZpcm1lZChsaXN0SXRlbS5pdGVtKX1cbiAgICAgICAgICAgIG9uOmNsaWNrPXsoKSA9PiBvbkxpc3RJdGVtQ2xpY2sobGlzdEl0ZW0pfVxuICAgICAgICAgICAgb246a2V5cHJlc3M9eyhlKSA9PiB7ZS5rZXkgPT0gXCJFbnRlclwiICYmIG9uTGlzdEl0ZW1DbGljayhsaXN0SXRlbSl9fVxuICAgICAgICAgICAgb246cG9pbnRlcmVudGVyPXsoKSA9PiB7XG4gICAgICAgICAgICAgIGhpZ2hsaWdodEluZGV4ID0gaVxuICAgICAgICAgICAgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICA8c2xvdFxuICAgICAgICAgICAgICBuYW1lPVwiaXRlbVwiXG4gICAgICAgICAgICAgIGl0ZW09e2xpc3RJdGVtLml0ZW19XG4gICAgICAgICAgICAgIGxhYmVsPXtsaXN0SXRlbS5oaWdobGlnaHRlZCA/IGxpc3RJdGVtLmhpZ2hsaWdodGVkIDogbGlzdEl0ZW0ubGFiZWx9XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIHsjaWYgbGlzdEl0ZW0uaGlnaGxpZ2h0ZWR9XG4gICAgICAgICAgICAgICAge0BodG1sIGxpc3RJdGVtLmhpZ2hsaWdodGVkfVxuICAgICAgICAgICAgICB7OmVsc2V9XG4gICAgICAgICAgICAgICAge0BodG1sIGxpc3RJdGVtLmxhYmVsfVxuICAgICAgICAgICAgICB7L2lmfVxuICAgICAgICAgICAgPC9zbG90PlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICB7L2lmfVxuICAgICAgey9lYWNofVxuXG4gICAgICA8c2xvdCBuYW1lPVwiZHJvcGRvd24tZm9vdGVyXCIgbmJJdGVtcz17ZmlsdGVyZWRMaXN0SXRlbXMubGVuZ3RofSB7bWF4SXRlbXNUb1Nob3dJbkxpc3R9PlxuICAgICAgICB7I2lmIG1heEl0ZW1zVG9TaG93SW5MaXN0ID4gMCAmJiBmaWx0ZXJlZExpc3RJdGVtcy5sZW5ndGggPiBtYXhJdGVtc1RvU2hvd0luTGlzdH1cbiAgICAgICAgICB7I2lmIG1vcmVJdGVtc1RleHR9XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYXV0b2NvbXBsZXRlLWxpc3QtaXRlbS1uby1yZXN1bHRzXCI+XG4gICAgICAgICAgICAgIC4uLntmaWx0ZXJlZExpc3RJdGVtcy5sZW5ndGggLSBtYXhJdGVtc1RvU2hvd0luTGlzdH1cbiAgICAgICAgICAgICAge21vcmVJdGVtc1RleHR9XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICB7L2lmfVxuICAgICAgICB7L2lmfVxuICAgICAgPC9zbG90PlxuICAgIHs6ZWxzZSBpZiBsb2FkaW5nICYmIGxvYWRpbmdUZXh0fVxuICAgICAgPGRpdiBjbGFzcz1cImF1dG9jb21wbGV0ZS1saXN0LWl0ZW0tbG9hZGluZ1wiPlxuICAgICAgICA8c2xvdCBuYW1lPVwibG9hZGluZ1wiIHtsb2FkaW5nVGV4dH0+e2xvYWRpbmdUZXh0fTwvc2xvdD5cbiAgICAgIDwvZGl2PlxuICAgIHs6ZWxzZSBpZiBjcmVhdGV9XG4gICAgICA8ZGl2XG4gICAgICAgIGNsYXNzPVwiYXV0b2NvbXBsZXRlLWxpc3QtaXRlbS1jcmVhdGVcIlxuICAgICAgICBvbjpjbGljaz17c2VsZWN0SXRlbX1cbiAgICAgICAgb246a2V5cHJlc3M9eyhlKSA9PiB7ZS5rZXkgPT0gXCJFbnRlclwiICYmIHNlbGVjdEl0ZW0oKX19XG4gICAgICA+XG4gICAgICAgIDxzbG90IG5hbWU9XCJjcmVhdGVcIiB7Y3JlYXRlVGV4dH0+e2NyZWF0ZVRleHR9PC9zbG90PlxuICAgICAgPC9kaXY+XG4gICAgezplbHNlIGlmIG5vUmVzdWx0c1RleHR9XG4gICAgICA8ZGl2IGNsYXNzPVwiYXV0b2NvbXBsZXRlLWxpc3QtaXRlbS1uby1yZXN1bHRzXCI+XG4gICAgICAgIDxzbG90IG5hbWU9XCJuby1yZXN1bHRzXCIge25vUmVzdWx0c1RleHR9Pntub1Jlc3VsdHNUZXh0fTwvc2xvdD5cbiAgICAgIDwvZGl2PlxuICAgIHsvaWZ9XG4gIDwvZGl2PlxuPC9kaXY+XG5cbjxzdmVsdGU6d2luZG93IG9uOmNsaWNrPXtvbkRvY3VtZW50Q2xpY2t9IG9uOnNjcm9sbD17KCkgPT4gc2V0UG9zaXRpb25Pbk5leHRVcGRhdGUgPSB0cnVlfSAvPlxuXG48c3R5bGU+XG4gIC5hdXRvY29tcGxldGUge1xuICAgIG1pbi13aWR0aDogMjAwcHg7XG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgIG1heC13aWR0aDogMTAwJTtcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgdmVydGljYWwtYWxpZ246IHRvcDtcbiAgICBoZWlnaHQ6IDIuMjVlbTtcbiAgfVxuXG4gIC5hdXRvY29tcGxldGU6bm90KC5oaWRlLWFycm93KTpub3QoLmlzLWxvYWRpbmcpOjphZnRlciB7XG4gICAgYm9yZGVyOiAzcHggc29saWQ7XG4gICAgYm9yZGVyLXJhZGl1czogMnB4O1xuICAgIGJvcmRlci1yaWdodDogMDtcbiAgICBib3JkZXItdG9wOiAwO1xuICAgIGNvbnRlbnQ6IFwiIFwiO1xuICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgIGhlaWdodDogMC42MjVlbTtcbiAgICBtYXJnaW4tdG9wOiAtMC40Mzc1ZW07XG4gICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIHRvcDogNTAlO1xuICAgIC13ZWJraXQtdHJhbnNmb3JtOiByb3RhdGUoLTQ1ZGVnKTtcbiAgICB0cmFuc2Zvcm06IHJvdGF0ZSgtNDVkZWcpO1xuICAgIC13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjogY2VudGVyO1xuICAgIHRyYW5zZm9ybS1vcmlnaW46IGNlbnRlcjtcbiAgICB3aWR0aDogMC42MjVlbTtcbiAgICBib3JkZXItY29sb3I6ICMzMjczZGM7XG4gICAgcmlnaHQ6IDEuMTI1ZW07XG4gICAgei1pbmRleDogNDtcbiAgfVxuXG4gIC5hdXRvY29tcGxldGUuc2hvdy1jbGVhcjpub3QoLmhpZGUtYXJyb3cpOjphZnRlciB7XG4gICAgcmlnaHQ6IDIuM2VtO1xuICB9XG5cbiAgLmF1dG9jb21wbGV0ZSAqIHtcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICB9XG4gIC5hdXRvY29tcGxldGUtaW5wdXQge1xuICAgIGZvbnQ6IGluaGVyaXQ7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgaGVpZ2h0OiAxMDAlO1xuICAgIHBhZGRpbmc6IDVweCAxMXB4O1xuICB9XG5cbiAgLmF1dG9jb21wbGV0ZTpub3QoLmhpZGUtYXJyb3cpIC5hdXRvY29tcGxldGUtaW5wdXQge1xuICAgIHBhZGRpbmctcmlnaHQ6IDJlbTtcbiAgfVxuICAuYXV0b2NvbXBsZXRlLnNob3ctY2xlYXI6bm90KC5oaWRlLWFycm93KSAuYXV0b2NvbXBsZXRlLWlucHV0IHtcbiAgICBwYWRkaW5nLXJpZ2h0OiAzLjJlbTtcbiAgfVxuICAuYXV0b2NvbXBsZXRlLmhpZGUtYXJyb3cuc2hvdy1jbGVhciAuYXV0b2NvbXBsZXRlLWlucHV0IHtcbiAgICBwYWRkaW5nLXJpZ2h0OiAyZW07XG4gIH1cblxuICAuYXV0b2NvbXBsZXRlLWxpc3Qge1xuICAgIGJhY2tncm91bmQ6ICNmZmY7XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIG92ZXJmbG93LXk6IGF1dG87XG4gICAgei1pbmRleDogOTk7XG4gICAgcGFkZGluZzogMTBweCAwO1xuICAgIHRvcDogMHB4O1xuICAgIGJvcmRlcjogMXB4IHNvbGlkICM5OTk7XG4gICAgbWF4LWhlaWdodDogY2FsYygxNSAqICgxcmVtICsgMTBweCkgKyAxNXB4KTtcbiAgICB1c2VyLXNlbGVjdDogbm9uZTtcbiAgfVxuICAuYXV0b2NvbXBsZXRlLWxpc3Q6ZW1wdHkge1xuICAgIHBhZGRpbmc6IDA7XG4gIH1cbiAgLmF1dG9jb21wbGV0ZS1saXN0LWl0ZW0ge1xuICAgIHBhZGRpbmc6IDVweCAxNXB4O1xuICAgIGNvbG9yOiAjMzMzO1xuICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICBsaW5lLWhlaWdodDogMTtcbiAgfVxuXG4gIC5hdXRvY29tcGxldGUtbGlzdC1pdGVtLmNvbmZpcm1lZCB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzc4OWZlZDtcbiAgICBjb2xvcjogI2ZmZjtcbiAgfVxuICAuYXV0b2NvbXBsZXRlLWxpc3QtaXRlbS5zZWxlY3RlZCB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzJlNjllMjtcbiAgICBjb2xvcjogI2ZmZjtcbiAgfVxuICAuYXV0b2NvbXBsZXRlLWxpc3QtaXRlbS1uby1yZXN1bHRzIHtcbiAgICBwYWRkaW5nOiA1cHggMTVweDtcbiAgICBjb2xvcjogIzk5OTtcbiAgICBsaW5lLWhlaWdodDogMTtcbiAgfVxuICAuYXV0b2NvbXBsZXRlLWxpc3QtaXRlbS1jcmVhdGUge1xuICAgIHBhZGRpbmc6IDVweCAxNXB4O1xuICAgIGxpbmUtaGVpZ2h0OiAxO1xuICB9XG4gIC5hdXRvY29tcGxldGUtbGlzdC1pdGVtLWxvYWRpbmcge1xuICAgIHBhZGRpbmc6IDVweCAxNXB4O1xuICAgIGxpbmUtaGVpZ2h0OiAxO1xuICB9XG5cbiAgLmF1dG9jb21wbGV0ZS1saXN0LmhpZGRlbiB7XG4gICAgdmlzaWJpbGl0eTogaGlkZGVuO1xuICB9XG5cbiAgLmF1dG9jb21wbGV0ZS5zaG93LWNsZWFyIC5hdXRvY29tcGxldGUtY2xlYXItYnV0dG9uIHtcbiAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgZGlzcGxheTogYmxvY2s7XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICByaWdodDogMC4xZW07XG4gICAgcGFkZGluZzogMC4zZW0gMC42ZW07XG4gICAgdG9wOiA1MCU7XG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTUwJSk7XG4gICAgLW1zLXRyYW5zZm9ybTogdHJhbnNsYXRlWSgtNTAlKTtcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTUwJSk7XG4gICAgei1pbmRleDogNDtcbiAgfVxuXG4gIC5hdXRvY29tcGxldGU6bm90KC5zaG93LWNsZWFyKSAuYXV0b2NvbXBsZXRlLWNsZWFyLWJ1dHRvbiB7XG4gICAgZGlzcGxheTogbm9uZTtcbiAgfVxuXG4gIC5hdXRvY29tcGxldGUgc2VsZWN0IHtcbiAgICBkaXNwbGF5OiBub25lO1xuICB9XG5cbiAgLmF1dG9jb21wbGV0ZS5pcy1tdWx0aXBsZSAuaW5wdXQtY29udGFpbmVyIHtcbiAgICBoZWlnaHQ6IGF1dG87XG4gICAgYm94LXNoYWRvdzogaW5zZXQgMCAxcHggMnB4IHJnYmEoMTAsIDEwLCAxMCwgMC4xKTtcbiAgICBib3JkZXItcmFkaXVzOiA0cHg7XG4gICAgYm9yZGVyOiAxcHggc29saWQgI2I1YjViNTtcbiAgICBwYWRkaW5nLWxlZnQ6IDAuNGVtO1xuICAgIHBhZGRpbmctcmlnaHQ6IDAuNGVtO1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgZmxleC13cmFwOiB3cmFwO1xuICAgIGFsaWduLWl0ZW1zOiBzdHJldGNoO1xuICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XG4gIH1cblxuICAuYXV0b2NvbXBsZXRlLmlzLW11bHRpcGxlIC50YWcge1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgbWFyZ2luLXRvcDogMC41ZW07XG4gICAgbWFyZ2luLWJvdHRvbTogMC4zZW07XG4gIH1cblxuICAuYXV0b2NvbXBsZXRlLmlzLW11bHRpcGxlIC50YWcuaXMtZGVsZXRlIHtcbiAgICBjdXJzb3I6IHBvaW50ZXI7XG4gIH1cblxuICAuYXV0b2NvbXBsZXRlLmlzLW11bHRpcGxlIC50YWdzIHtcbiAgICBtYXJnaW4tcmlnaHQ6IDAuM2VtO1xuICAgIG1hcmdpbi1ib3R0b206IDA7XG4gIH1cblxuICAuYXV0b2NvbXBsZXRlLmlzLW11bHRpcGxlIC5hdXRvY29tcGxldGUtaW5wdXQge1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgZmxleDogMSAxIDUwcHg7XG4gICAgbWluLXdpZHRoOiAzZW07XG4gICAgYm9yZGVyOiBub25lO1xuICAgIGJveC1zaGFkb3c6IG5vbmU7XG4gICAgYmFja2dyb3VuZDogbm9uZTtcbiAgfVxuPC9zdHlsZT5cbiIsIjxzY3JpcHQ+XG4gICAgaW1wb3J0IEF1dG9Db21wbGV0ZSBmcm9tIFwic2ltcGxlLXN2ZWx0ZS1hdXRvY29tcGxldGVcIjtcblxuICAgIGltcG9ydCB7IExPQ0FMRSB9IGZyb20gXCIuLi8uLi9sb2NhbGUvaW5kZXhcIjtcbiAgICBpbXBvcnQgVUlUZXh0ZmllbGRJbnB1dCBmcm9tIFwiLi91aS50ZXh0ZmllbGQuc3ZlbHRlXCI7XG4gICAgaW1wb3J0IFVJQ29tbW9uIGZyb20gXCIuLi9jb21tb24uanNcIjtcblxuICAgIC8qKlxuICAgICAqIEB0eXBlZGVmIHtPYmplY3R9IFByb3BzXG4gICAgICogQHByb3BlcnR5IHtzdHJpbmd9IFtpZEZpZWxkXVxuICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbbGFiZWxGaWVsZF1cbiAgICAgKiBAcHJvcGVydHkge251bWJlcn0gW21pbkNoYXJhY3RlcnNUb1NlYXJjaF1cbiAgICAgKiBAcHJvcGVydHkge2Jvb2xlYW59IFtzZWxlY3RGaXJzdElmRW1wdHldXG4gICAgICogQHByb3BlcnR5IHtudW1iZXJ9IFttYXhJdGVtc1RvU2hvd0luTGlzdF1cbiAgICAgKiBAcHJvcGVydHkge3N0cmluZ30gW25vUmVzdWx0c1RleHRdXG4gICAgICogQHByb3BlcnR5IHtib29sZWFufSBbc2hvd0NsZWFyXVxuICAgICAqIEBwcm9wZXJ0eSB7YW55fSB2YWx1ZVxuICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbcGxhY2Vob2xkZXJdXG4gICAgICogQHByb3BlcnR5IHtzdHJpbmd9IFtmaWVsZG5hbWVdXG4gICAgICogQHByb3BlcnR5IHtib29sZWFufSBbZGlzYWJsZWRdXG4gICAgICogQHByb3BlcnR5IHtib29sZWFufSBbcmVhZG9ubHldXG4gICAgICogQHByb3BlcnR5IHtib29sZWFufSBbaWNvbl1cbiAgICAgKiBAcHJvcGVydHkge2Jvb2xlYW59IFtpbnB1dFN0YXJ0ZWRdXG4gICAgICogQHByb3BlcnR5IHtib29sZWFufSBbdmFsaWRdXG4gICAgICogQHByb3BlcnR5IHtib29sZWFufSBbdmFsaWRhdGVkXVxuICAgICAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW2Vycm9yc11cbiAgICAgKiBAcHJvcGVydHkge2Jvb2xlYW59IFtmb3JtRXJyb3JzXVxuICAgICAqIEBwcm9wZXJ0eSB7YW55fSBbc2VhcmNoRnVuY3Rpb25dXG4gICAgICovXG5cbiAgICAvKiogQHR5cGUge1Byb3BzfSAqL1xuICAgIGxldCB7XG4gICAgICAgIC8vZ2VuZXJpYyBpbnB1dCBwcm9wc1xuICAgICAgICB2YWx1ZSA9ICRiaW5kYWJsZSgpLFxuICAgICAgICBwbGFjZWhvbGRlciA9IFwiXCIsXG4gICAgICAgIGZpZWxkbmFtZSA9IFwiY2hlY2tib3gtbGlzdFwiLFxuICAgICAgICBkaXNhYmxlZCA9IGZhbHNlLFxuICAgICAgICByZWFkb25seSA9IGZhbHNlLFxuICAgICAgICByZXF1aXJlZCA9IGZhbHNlLFxuICAgICAgICB2YWxpZCA9IHRydWUsXG4gICAgICAgIG9uY2hhbmdlID0gKCkgPT4gdHJ1ZSxcbiAgICAgICAgLi4ub3RoZXJzXG4gICAgfSA9ICRwcm9wcygpO1xuXG4gICAgbGV0IGludmFsaWQgPSAkZGVyaXZlZCghdmFsaWQpO1xuICAgIGNvbnN0IG9uaW5wdXQgPSBVSUNvbW1vbi5vbklucHV0KGZpZWxkbmFtZSwgb25jaGFuZ2UpO1xuPC9zY3JpcHQ+XG5cbnsjaWYgZGlzYWJsZWR9XG4gICAgPFVJVGV4dGZpZWxkSW5wdXRcbiAgICAgICAgdmFsdWU9e3ZhbHVlID8gdmFsdWUudGl0bGUgOiBcIlwifVxuICAgICAgICB7ZmllbGRuYW1lfVxuICAgICAgICB7cGxhY2Vob2xkZXJ9XG4gICAgICAgIHsuLi5vdGhlcnN9XG4gICAgLz5cbns6ZWxzZSBpZiByZWFkb25seX1cbiAgICA8cD57dmFsdWUgPyB2YWx1ZS50aXRsZSA6IFwiXCJ9PC9wPlxuezplbHNlfVxuICAgIDxBdXRvQ29tcGxldGVcbiAgICAgICAgYmluZDpzZWxlY3RlZEl0ZW09e3ZhbHVlfVxuICAgICAgICBvbkNoYW5nZT17b25pbnB1dH1cbiAgICAgICAge3ZhbGlkfVxuICAgICAgICB7aW52YWxpZH1cbiAgICAgICAge3JlcXVpcmVkfVxuICAgICAgICBwbGFjZWhvbGRlcj17JExPQ0FMRVtwbGFjZWhvbGRlcl19XG4gICAgICAgIHsuLi5vdGhlcnN9XG4gICAgLz5cbnsvaWZ9XG4iLCI8c2NyaXB0PlxuICAgIGltcG9ydCB7IExPQ0FMRSB9IGZyb20gXCIuLi8uLi9sb2NhbGUvaW5kZXhcIjtcbiAgICBpbXBvcnQgVUlDb21tb24gZnJvbSBcIi4uL2NvbW1vbi5qc1wiO1xuICAgIGltcG9ydCB7IG9uTW91bnQgfSBmcm9tIFwic3ZlbHRlXCI7XG5cbiAgICAvKiogQHR5cGUge2ltcG9ydCgnLi90eXBlJykuVUlJbnB1dFByb3BzfSAqL1xuICAgIGxldCB7XG4gICAgICAgIHZhbHVlID0gJGJpbmRhYmxlKG5ldyBEYXRlKCkpLFxuICAgICAgICBwbGFjZWhvbGRlciA9IFwiXCIsXG4gICAgICAgIGZpZWxkbmFtZSA9IFwiZGF0ZXRpbWVcIixcbiAgICAgICAgcGF0dGVybiA9IFwiZHs0fS1kezJ9LWR7Mn1cIixcbiAgICAgICAgcmVxdWlyZWQgPSB0cnVlLFxuICAgICAgICBkaXNhYmxlZCA9IGZhbHNlLFxuICAgICAgICByZWFkb25seSA9IGZhbHNlLFxuICAgICAgICB2YWxpZCA9IHRydWUsXG4gICAgICAgIGNsYXNzOiBjbGFzc2VzID0gXCJcIixcbiAgICAgICAgb25jaGFuZ2UgPSAoKSA9PiB0cnVlLFxuICAgICAgICAuLi5vdGhlcnNcbiAgICB9ID0gJHByb3BzKCk7XG5cbiAgICBvbk1vdW50KCgpID0+IHtcbiAgICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgRGF0ZSkge1xuICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS50b0lTT1N0cmluZygpLnNwbGl0KFwiVFwiKVswXTtcbiAgICAgICAgfSBlbHNlIGlmICh2YWx1ZS5pbmRleE9mKFwiVFwiKSA+IDApIHtcbiAgICAgICAgICAgIHZhbHVlID0gdmFsdWUuc3BsaXQoXCJUXCIpWzBdO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICBsZXQgaW52YWxpZCA9ICRkZXJpdmVkKCF2YWxpZCk7XG4gICAgY29uc3Qgb25pbnB1dCA9IFVJQ29tbW9uLm9uSW5wdXQoZmllbGRuYW1lLCBvbmNoYW5nZSk7XG48L3NjcmlwdD5cblxueyNpZiByZWFkb25seX1cbiAgICA8cD5cbiAgICAgICAgPHRpbWUgZGF0ZXRpbWU9e3ZhbHVlfT57VUlDb21tb24udHJ5Rm9ybWF0TG9jYWxlRGF0ZVRpbWUodmFsdWUpfTwvdGltZT5cbiAgICA8L3A+XG57OmVsc2V9XG4gICAgPGlucHV0XG4gICAgICAgIGlkPVwiZm9ybS1maWVsZC1kYXRlLXtmaWVsZG5hbWV9XCJcbiAgICAgICAgY2xhc3M9XCJpbnB1dCB7Y2xhc3Nlc31cIlxuICAgICAgICB0eXBlPVwiZGF0ZVwiXG4gICAgICAgIG5hbWU9e2ZpZWxkbmFtZX1cbiAgICAgICAgYmluZDp2YWx1ZVxuICAgICAgICB7aW52YWxpZH1cbiAgICAgICAge3JlcXVpcmVkfVxuICAgICAgICB7cmVhZG9ubHl9XG4gICAgICAgIHtkaXNhYmxlZH1cbiAgICAgICAgcGxhY2Vob2xkZXI9eyRMT0NBTEVbcGxhY2Vob2xkZXJdfVxuICAgICAgICB7cGF0dGVybn1cbiAgICAgICAgYXV0b2NvbXBsZXRlPXtmaWVsZG5hbWV9XG4gICAgICAgIG9uY2hhbmdlPXtvbmlucHV0fVxuICAgICAgICB7b25pbnB1dH1cbiAgICAgICAgYXJpYS1jb250cm9scz1cImlucHV0LWZpZWxkLWhlbHBlci17ZmllbGRuYW1lfVwiXG4gICAgICAgIGFyaWEtZGVzY3JpYmVkYnk9XCJpbnB1dC1maWVsZC1oZWxwZXIte2ZpZWxkbmFtZX1cIlxuICAgICAgICB7Li4ub3RoZXJzfVxuICAgIC8+XG57L2lmfVxuIiwiPHNjcmlwdD5cbiAgICBpbXBvcnQgeyBvbk1vdW50IH0gZnJvbSBcInN2ZWx0ZVwiO1xuXG4gICAgZnVuY3Rpb24gcmVtb3ZlTXNGcm9tRGF0ZShpc29EYXRlLCBtYXJrQXNaVUxVID0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuIGlzb0RhdGUuc3BsaXQoXCIuXCIpWzBdICsgKG1hcmtBc1pVTFUgPyBcIlwiIDogXCJaXCIpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNoaWZ0RGF0ZXRpbWUoaXNvRGF0ZSwgc2hpZnQpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IGRhdGVVdGMgPSBuZXcgRGF0ZShtYXJrQXNaVUxVKGlzb0RhdGUpKS5nZXRUaW1lKCk7XG4gICAgICAgICAgICBjb25zdCBvZmZzZXQgPSBzaGlmdCAqIC02MDAwMDtcbiAgICAgICAgICAgIGlmIChkYXRlSXNWYWxpZChkYXRlVXRjICsgb2Zmc2V0KSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IG5ld0RhdGUgPSBuZXcgRGF0ZShkYXRlVXRjICsgb2Zmc2V0KTtcbiAgICAgICAgICAgICAgICBjb25zdCBuZXdJc29EYXRlID0gbmV3RGF0ZS50b0lTT1N0cmluZygpO1xuICAgICAgICAgICAgICAgIHJldHVybiByZW1vdmVNc0Zyb21EYXRlKG5ld0lzb0RhdGUsIHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1hcmtBc1pVTFUoZGF0ZVN0cmluZykge1xuICAgICAgICByZXR1cm4gZGF0ZVN0cmluZyAmJiBkYXRlU3RyaW5nLmF0KC0xKSAhPT0gXCJaXCJcbiAgICAgICAgICAgID8gZGF0ZVN0cmluZyArIFwiWlwiXG4gICAgICAgICAgICA6IGRhdGVTdHJpbmc7XG4gICAgfVxuXG4gICAgLyoqIEB0eXBlIHtpbXBvcnQoJy4vdHlwZScpLlVJSW5wdXRQcm9wc30gKi9cbiAgICBsZXQge1xuICAgICAgICBmaWVsZG5hbWUgPSBcImRhdGV0aW1lXCIsXG4gICAgICAgIHZhbHVlID0gJGJpbmRhYmxlKHJlbW92ZU1zRnJvbURhdGUobmV3IERhdGUoKS50b0lTT1N0cmluZygpKSksXG4gICAgICAgIHRpbWV6b25lT2Zmc2V0ID0gMCxcbiAgICAgICAgcmVxdWlyZWQgPSBmYWxzZSxcbiAgICAgICAgZGlzYWJsZWQgPSBmYWxzZSxcbiAgICAgICAgcmVhZG9ubHkgPSBmYWxzZSxcbiAgICAgICAgdmFsaWQgPSB0cnVlLFxuICAgICAgICBjbGFzczogY2xhc3NlcyA9IFwiXCIsXG4gICAgICAgIG9uY2hhbmdlID0gKCkgPT4gdHJ1ZSxcbiAgICAgICAgLi4ub3RoZXJzXG4gICAgfSA9ICRwcm9wcygpO1xuXG4gICAgbGV0IHNoaWZ0ZWRWYWx1ZSA9ICRzdGF0ZSgpLFxuICAgICAgICBwcmV2U2hpZnRlZFZhbHVlO1xuXG4gICAgY29uc3Qgc2V0U2hpZnRlZCA9ICh2YWwpID0+IHtcbiAgICAgICAgaWYgKGRhdGVJc1ZhbGlkKHZhbCkpIHtcbiAgICAgICAgICAgIHByZXZTaGlmdGVkVmFsdWUgPSBzaGlmdGVkVmFsdWU7XG4gICAgICAgICAgICBzaGlmdGVkVmFsdWUgPSB2YWw7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgY29uc3QgcmVzZXRTaGlmdGVkVmFsdWUgPSAoKSA9PiB7XG4gICAgICAgIHNoaWZ0ZWRWYWx1ZSA9IHByZXZTaGlmdGVkVmFsdWU7XG4gICAgfTtcblxuICAgIG9uTW91bnQoKCkgPT4ge1xuICAgICAgICBzZXRTaGlmdGVkKHNoaWZ0RGF0ZXRpbWUodmFsdWUsIHRpbWV6b25lT2Zmc2V0KSk7XG4gICAgfSk7XG5cbiAgICBjb25zdCBkYXRlSXNWYWxpZCA9IChkYXRlKSA9PiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBuZXcgRGF0ZShkYXRlKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9IGNhdGNoIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBjb25zdCBjaGFuZ2VkID0gKCkgPT5cbiAgICAgICAgdmFsdWUgIT09IHNoaWZ0RGF0ZXRpbWUoc2hpZnRlZFZhbHVlLCAtdGltZXpvbmVPZmZzZXQsIHRydWUpO1xuXG4gICAgY29uc3QgZGlzcGF0Y2hDaGFuZ2UgPSAoKSA9PiB7XG4gICAgICAgIHNldFNoaWZ0ZWQoc2hpZnRlZFZhbHVlKTtcbiAgICAgICAgdmFsdWUgPSBtYXJrQXNaVUxVKHNoaWZ0RGF0ZXRpbWUoc2hpZnRlZFZhbHVlLCAtdGltZXpvbmVPZmZzZXQsIHRydWUpKTtcbiAgICAgICAgb25jaGFuZ2Uoe1xuICAgICAgICAgICAgZmllbGQ6IGZpZWxkbmFtZSxcbiAgICAgICAgICAgIHZhbHVlLFxuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gb25DaGFuZ2UoZXYpIHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgZXYuY3VycmVudFRhcmdldC52YWx1ZSAmJlxuICAgICAgICAgICAgc2hpZnRlZFZhbHVlICYmXG4gICAgICAgICAgICBkYXRlSXNWYWxpZChzaGlmdGVkVmFsdWUpXG4gICAgICAgICkge1xuICAgICAgICAgICAgaWYgKGNoYW5nZWQoKSkge1xuICAgICAgICAgICAgICAgIGRpc3BhdGNoQ2hhbmdlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc2V0U2hpZnRlZFZhbHVlKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGxldCBpbnZhbGlkID0gJGRlcml2ZWQoIXZhbGlkKTtcbjwvc2NyaXB0PlxuXG57I2lmIHNoaWZ0ZWRWYWx1ZX1cbiAgICB7I2lmIHJlYWRvbmx5fVxuICAgICAgICA8cD57c2hpZnRlZFZhbHVlfTwvcD5cbiAgICB7OmVsc2V9XG4gICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgaWQ9XCJmb3JtLWZpZWxkLWRhdGV0aW1lLWluLXRpbWV6b25lLXtmaWVsZG5hbWV9XCJcbiAgICAgICAgICAgIGNsYXNzPVwiaW5wdXQge2NsYXNzZXN9XCJcbiAgICAgICAgICAgIHR5cGU9XCJkYXRldGltZS1sb2NhbFwiXG4gICAgICAgICAgICBuYW1lPXtmaWVsZG5hbWV9XG4gICAgICAgICAgICBiaW5kOnZhbHVlPXtzaGlmdGVkVmFsdWV9XG4gICAgICAgICAgICB7aW52YWxpZH1cbiAgICAgICAgICAgIHtkaXNhYmxlZH1cbiAgICAgICAgICAgIHtyZXF1aXJlZH1cbiAgICAgICAgICAgIHtyZWFkb25seX1cbiAgICAgICAgICAgIGF1dG9jb21wbGV0ZT17ZmllbGRuYW1lfVxuICAgICAgICAgICAgb25jaGFuZ2U9e29uQ2hhbmdlfVxuICAgICAgICAgICAgb25ibHVyPXtvbkNoYW5nZX1cbiAgICAgICAgICAgIG9uaW5wdXQ9e29uQ2hhbmdlfVxuICAgICAgICAgICAgYXJpYS1jb250cm9scz1cImlucHV0LWZpZWxkLWhlbHBlci17ZmllbGRuYW1lfVwiXG4gICAgICAgICAgICBhcmlhLWRlc2NyaWJlZGJ5PVwiaW5wdXQtZmllbGQtaGVscGVyLXtmaWVsZG5hbWV9XCJcbiAgICAgICAgICAgIHsuLi5vdGhlcnN9XG4gICAgICAgIC8+XG4gICAgey9pZn1cbnsvaWZ9XG4iLCI8c2NyaXB0PlxuICAgIGltcG9ydCB7IExPQ0FMRSB9IGZyb20gXCIuLi8uLi9sb2NhbGUvaW5kZXhcIjtcbiAgICBpbXBvcnQgVUlDb21tb24gZnJvbSBcIi4uL2NvbW1vbi5qc1wiO1xuXG4gICAgLyoqIEB0eXBlIHtpbXBvcnQoJy4vdHlwZScpLlVJSW5wdXRQcm9wc30gKi9cbiAgICBsZXQge1xuICAgICAgICB2YWx1ZSA9ICRiaW5kYWJsZShcIlwiKSxcbiAgICAgICAgcGxhY2Vob2xkZXIgPSBcIlwiLFxuICAgICAgICBmaWVsZG5hbWUgPSBcImVtYWlsXCIsXG4gICAgICAgIHJlcXVpcmVkID0gdHJ1ZSxcbiAgICAgICAgcmVhZG9ubHkgPSBmYWxzZSxcbiAgICAgICAgZGlzYWJsZWQgPSBmYWxzZSxcbiAgICAgICAgdmFsaWQgPSB0cnVlLFxuICAgICAgICBjbGFzczogY2xhc3NlcyA9IFwiXCIsXG4gICAgICAgIG9uY2hhbmdlID0gKCkgPT4gdHJ1ZSxcbiAgICAgICAgLi4ub3RoZXJzXG4gICAgfSA9ICRwcm9wcygpO1xuXG4gICAgbGV0IGludmFsaWQgPSAkZGVyaXZlZCghdmFsaWQpO1xuICAgIGNvbnN0IG9uaW5wdXQgPSBVSUNvbW1vbi5vbklucHV0KGZpZWxkbmFtZSwgb25jaGFuZ2UpO1xuPC9zY3JpcHQ+XG5cbnsjaWYgcmVhZG9ubHl9XG4gICAgPHA+e3ZhbHVlfTwvcD5cbns6ZWxzZX1cbiAgICA8aW5wdXRcbiAgICAgICAgaWQ9XCJmb3JtLWZpZWxkLWVtYWlsLXtmaWVsZG5hbWV9XCJcbiAgICAgICAgY2xhc3M9XCJpbnB1dCB7Y2xhc3Nlc31cIlxuICAgICAgICB0eXBlPVwiZW1haWxcIlxuICAgICAgICBuYW1lPXtmaWVsZG5hbWV9XG4gICAgICAgIGJpbmQ6dmFsdWVcbiAgICAgICAge2ludmFsaWR9XG4gICAgICAgIHtyZXF1aXJlZH1cbiAgICAgICAge3JlYWRvbmx5fVxuICAgICAgICB7ZGlzYWJsZWR9XG4gICAgICAgIHBsYWNlaG9sZGVyPXskTE9DQUxFW3BsYWNlaG9sZGVyXX1cbiAgICAgICAgYXV0b2NvbXBsZXRlPXtmaWVsZG5hbWV9XG4gICAgICAgIG9uY2hhbmdlPXtvbmlucHV0fVxuICAgICAgICB7b25pbnB1dH1cbiAgICAgICAgYXJpYS1jb250cm9scz1cImlucHV0LWZpZWxkLWhlbHBlci17ZmllbGRuYW1lfVwiXG4gICAgICAgIGFyaWEtZGVzY3JpYmVkYnk9XCJpbnB1dC1maWVsZC1oZWxwZXIte2ZpZWxkbmFtZX1cIlxuICAgICAgICB7Li4ub3RoZXJzfVxuICAgIC8+XG57L2lmfVxuIiwiPHNjcmlwdD5cbiAgICAvKiogQHR5cGUge2ltcG9ydCgnLi90eXBlJykuVUlJbnB1dFByb3BzfSAqL1xuICAgIGxldCB7XG4gICAgICAgIHZhbHVlID0gJGJpbmRhYmxlKFwiXCIpLFxuICAgICAgICBmaWVsZG5hbWUgPSBcImhpZGRlblwiLFxuICAgICAgICByZXF1aXJlZCA9IHRydWUsXG4gICAgICAgIHJlYWRvbmx5ID0gZmFsc2UsXG4gICAgICAgIC4uLm90aGVyc1xuICAgIH0gPSAkcHJvcHMoKTtcbjwvc2NyaXB0PlxuXG48aW5wdXRcbiAgICBpZD1cImZvcm0tZmllbGQtaGlkZGVuLXtmaWVsZG5hbWV9XCJcbiAgICB0eXBlPVwiaGlkZGVuXCJcbiAgICBiaW5kOnZhbHVlXG4gICAge3JlcXVpcmVkfVxuICAgIHtyZWFkb25seX1cbiAgICBuYW1lPXtmaWVsZG5hbWV9XG4gICAge290aGVyc31cbi8+XG4iLCI8c2NyaXB0PlxuICAgIGltcG9ydCB7IExPQ0FMRSB9IGZyb20gXCIuLi8uLi9sb2NhbGUvaW5kZXhcIjtcbiAgICBpbXBvcnQgVUlDb21tb24gZnJvbSBcIi4uL2NvbW1vbi5qc1wiO1xuXG4gICAgLyoqIEB0eXBlIHtpbXBvcnQoJy4vdHlwZScpLlVJSW5wdXRQcm9wc30gKi9cbiAgICBsZXQge1xuICAgICAgICB2YWx1ZSA9ICRiaW5kYWJsZShcIlwiKSxcbiAgICAgICAgcGxhY2Vob2xkZXIgPSBcIlwiLFxuICAgICAgICBmaWVsZG5hbWUgPSBcInRleHRhcmVhXCIsXG4gICAgICAgIHJvd3MgPSAxMCxcbiAgICAgICAgcmVxdWlyZWQgPSB0cnVlLFxuICAgICAgICByZWFkb25seSA9IGZhbHNlLFxuICAgICAgICBkaXNhYmxlZCA9IGZhbHNlLFxuICAgICAgICB2YWxpZCA9IHRydWUsXG4gICAgICAgIGNsYXNzOiBjbGFzc2VzID0gXCJcIixcbiAgICAgICAgb25jaGFuZ2UgPSAoKSA9PiB0cnVlLFxuICAgICAgICAuLi5vdGhlcnNcbiAgICB9ID0gJHByb3BzKCk7XG5cbiAgICBsZXQgaW52YWxpZCA9ICRkZXJpdmVkKCF2YWxpZCk7XG4gICAgY29uc3Qgb25pbnB1dCA9IFVJQ29tbW9uLm9uSW5wdXQoZmllbGRuYW1lLCBvbmNoYW5nZSk7XG48L3NjcmlwdD5cblxueyNpZiByZWFkb25seX1cbiAgICA8cD57dmFsdWV9PC9wPlxuezplbHNlfVxuICAgIDx0ZXh0YXJlYVxuICAgICAgICBpZD1cImZvcm0tZmllbGQtdGV4dGFyZWEte2ZpZWxkbmFtZX1cIlxuICAgICAgICBjbGFzcz1cInRleHRhcmVhIHtjbGFzc2VzfVwiXG4gICAgICAgIG5hbWU9e2ZpZWxkbmFtZX1cbiAgICAgICAgYmluZDp2YWx1ZVxuICAgICAgICB7aW52YWxpZH1cbiAgICAgICAge2Rpc2FibGVkfVxuICAgICAgICB7cmVxdWlyZWR9XG4gICAgICAgIHtyZWFkb25seX1cbiAgICAgICAgb25ibHVyPXtvbmlucHV0fVxuICAgICAgICBwbGFjZWhvbGRlcj17JExPQ0FMRVtwbGFjZWhvbGRlcl19XG4gICAgICAgIHtyb3dzfVxuICAgICAgICBhcmlhLWNvbnRyb2xzPVwiaW5wdXQtZmllbGQtaGVscGVyLXtmaWVsZG5hbWV9XCJcbiAgICAgICAgYXJpYS1kZXNjcmliZWRieT1cImlucHV0LWZpZWxkLWhlbHBlci17ZmllbGRuYW1lfVwiXG4gICAgICAgIHsuLi5vdGhlcnN9XG4gICAgPjwvdGV4dGFyZWE+XG57L2lmfVxuIiwiPHNjcmlwdD5cbiAgICBpbXBvcnQgeyBvbk1vdW50IH0gZnJvbSBcInN2ZWx0ZVwiO1xuICAgIGltcG9ydCBVSVRleHRhcmVhIGZyb20gXCIuL3VpLnRleHRhcmVhLnN2ZWx0ZVwiO1xuXG4gICAgLyoqIEB0eXBlIHtpbXBvcnQoJy4vdHlwZScpLlVJSW5wdXRQcm9wc30gKi9cbiAgICBsZXQge1xuICAgICAgICB2YWx1ZSA9ICRiaW5kYWJsZSh7fSksXG4gICAgICAgIGZpZWxkbmFtZSA9IFwianNvbmFyZWFcIixcbiAgICAgICAgdmFsaWQgPSAkYmluZGFibGUodHJ1ZSksXG4gICAgICAgIG9uY2hhbmdlID0gKCkgPT4gdHJ1ZSxcbiAgICAgICAgb25lcnJvciA9ICgpID0+IHt9LFxuICAgICAgICAuLi5vdGhlcnNcbiAgICB9ID0gJHByb3BzKCk7XG5cbiAgICBsZXQgX3ZhbHVlID0gJHN0YXRlKFwie31cIik7XG5cbiAgICBvbk1vdW50KCgpID0+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIF92YWx1ZSA9IEpTT04uc3RyaW5naWZ5KHZhbHVlLCBudWxsLCA0KTtcbiAgICAgICAgfSBjYXRjaCB7XG4gICAgICAgICAgICBfdmFsdWUgPSBcInt9XCI7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIGZ1bmN0aW9uIG9uQ2hhbmdlKHsgdmFsdWU6IHZhbCB9KSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB2YWx1ZSA9IEpTT04ucGFyc2UodmFsKTtcbiAgICAgICAgICAgIHZhbGlkID0gdHJ1ZTtcbiAgICAgICAgICAgIG9uY2hhbmdlKHtcbiAgICAgICAgICAgICAgICBmaWVsZDogZmllbGRuYW1lLFxuICAgICAgICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBvbmVycm9yKGVycm9yLm1lc3NhZ2UpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbjwvc2NyaXB0PlxuXG48VUlUZXh0YXJlYSBiaW5kOnZhbHVlPXtfdmFsdWV9IG9uY2hhbmdlPXtvbkNoYW5nZX0ge3ZhbGlkfSB7Li4ub3RoZXJzfSAvPlxuIiwiY2xhc3MgTGliIHtcbiAgICAjbGliID0ge307XG5cbiAgICBjb25zdHJ1Y3RvcihzZWVkTGliKSB7XG4gICAgICAgIGlmIChzZWVkTGliIGluc3RhbmNlb2YgTGliKSB7XG4gICAgICAgICAgICB0aGlzLmltcG9ydChzZWVkTGliLmdldENvbnRlbnQoKSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbXMge3N0cmluZ30gIG1vZGUgd2hhdCB0byBkbyBpZiBlbGVtZW50IGV4aXN0cyBbcmVwbGFjZXxhZGR8c2tpcF1cbiAgICAgKi9cbiAgICBhZGQobmFtZSwgY29tcCwgbW9kZSA9IFwicmVwbGFjZVwiKSB7XG4gICAgICAgIGlmICh0aGlzLmNvbnRhaW5zKG5hbWUpKSB7XG4gICAgICAgICAgICBpZiAobW9kZSA9PT0gXCJyZXBsYWNlXCIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLiNsaWJbbmFtZV0gPSBjb21wO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtb2RlID09PSBcImFkZFwiKSB7XG4gICAgICAgICAgICAgICAgdGhpcy4jbGliW25hbWVdID0gT2JqZWN0LmFzc2lnbih0aGlzLiNsaWJbbmFtZV0sIGNvbXApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy4jbGliW25hbWVdID0gY29tcDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdldChuYW1lKSB7XG4gICAgICAgIHJldHVybiB0aGlzLiNsaWJbbmFtZV07XG4gICAgfVxuXG4gICAgY29udGFpbnMobmFtZSkge1xuICAgICAgICByZXR1cm4gT2JqZWN0Lmhhc093bih0aGlzLiNsaWIsIG5hbWUpO1xuICAgIH1cblxuICAgIGltcG9ydChidWxrLCBtb2RlID0gXCJyZXBsYWNlXCIpIHtcbiAgICAgICAgZm9yIChsZXQgZiBpbiBidWxrKSB7XG4gICAgICAgICAgICB0aGlzLmFkZChmLCBidWxrW2ZdLCBtb2RlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlzRW1wdHkoKSB7XG4gICAgICAgIHJldHVybiBPYmplY3Qua2V5cyh0aGlzLiNsaWIpLmxlbmd0aCA9PT0gMDtcbiAgICB9XG5cbiAgICBnZXRDb250ZW50KCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgLi4udGhpcy4jbGliLFxuICAgICAgICB9O1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgTGliO1xuIiwiLypcbiAqINCR0LjQsdC70LjQvtGC0LXQutCwIFVJINC60L7QvdGB0YLRgNGD0LrRgtC+0YDQvtCyXG4gKi9cblxuLy8gQHRzLWlnbm9yZVxuaW1wb3J0IExpYiBmcm9tIFwiLi9saWIuanNcIjtcblxuY29uc3QgQ09NUE9ORU5UUyA9IG5ldyBMaWIoKTtcbmNvbnN0IEZJRUxEUyA9IG5ldyBMaWIoKTtcbmNvbnN0IFZBUklBTlRTID0gbmV3IExpYigpO1xuXG5leHBvcnQgeyBDT01QT05FTlRTLCBGSUVMRFMsIFZBUklBTlRTIH07XG4iLCI8c2NyaXB0PlxuICAgIGltcG9ydCB7IFVJVGl0bGUgfSBmcm9tIFwiLi4vdmFyaW91c1wiO1xuPC9zY3JpcHQ+XG5cbjxVSVRpdGxlIHRpdGxlPXtcIm5vdC1ub2RlOmVtcHR5X2xpc3RfcGxhY2Vob2xkZXJcIn0gc2l6ZT17NH0gYWxpZ249e1wiY2VudGVyXCJ9IC8+XG4iLCI8c2NyaXB0PlxuICAgIGltcG9ydCB7IHJ1biB9IGZyb20gJ3N2ZWx0ZS9sZWdhY3knO1xuXG4gICAgaW1wb3J0IHsgTE9DQUxFIH0gZnJvbSBcIi4uLy4uL2xvY2FsZVwiO1xuICAgIFxuICAgIFxuXG4gICAgXG5cbiAgICAvKipcbiAgICAgKiBAdHlwZWRlZiB7T2JqZWN0fSBQcm9wc1xuICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbdGl0bGVdIC0gYXR0cmlidXRlc1xuICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbdXJsXVxuICAgICAqIEBwcm9wZXJ0eSB7YW55fSBkb3dubG9hZFxuICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbdGFyZ2V0XVxuICAgICAqIEBwcm9wZXJ0eSB7YW55fSByZWxcbiAgICAgKiBAcHJvcGVydHkge2Jvb2xlYW59IFtsaWdodF0gLSB2aXN1YWxcbiAgICAgKiBAcHJvcGVydHkge2Jvb2xlYW59IFtsb2FkaW5nXVxuICAgICAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW3JhaXNlZF1cbiAgICAgKiBAcHJvcGVydHkge2Jvb2xlYW59IFtvdXRsaW5lZF1cbiAgICAgKiBAcHJvcGVydHkge2Jvb2xlYW59IFtpbnZlcnRlZF1cbiAgICAgKiBAcHJvcGVydHkge2Jvb2xlYW59IFtyb3VuZGVkXVxuICAgICAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW2J1dHRvbl1cbiAgICAgKiBAcHJvcGVydHkge3N0cmluZ30gW3N0YXRlXVxuICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbdHlwZV1cbiAgICAgKiBAcHJvcGVydHkge3N0cmluZ30gW2NvbG9yXVxuICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbc2l6ZV1cbiAgICAgKiBAcHJvcGVydHkge3N0cmluZ30gW2NsYXNzZXNdXG4gICAgICogQHByb3BlcnR5IHtib29sZWFufSBbaWNvbl0gLSBpY29uc1xuICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbaWNvblNpZGVdXG4gICAgICogQHByb3BlcnR5IHthbnl9IFthY3Rpb25dXG4gICAgICogQHByb3BlcnR5IHtpbXBvcnQoJ3N2ZWx0ZScpLlNuaXBwZXR9IFtjaGlsZHJlbl1cbiAgICAgKi9cblxuICAgIC8qKiBAdHlwZSB7UHJvcHN9ICovXG4gICAgbGV0IHtcbiAgICAgICAgdGl0bGUgPSBcIlwiLFxuICAgICAgICB1cmwgPSBcIlwiLFxuICAgICAgICBkb3dubG9hZCxcbiAgICAgICAgdGFyZ2V0ID0gXCJfYmxhbmtcIixcbiAgICAgICAgcmVsLFxuICAgICAgICBsaWdodCA9IGZhbHNlLFxuICAgICAgICBsb2FkaW5nID0gZmFsc2UsXG4gICAgICAgIHJhaXNlZCA9IGZhbHNlLFxuICAgICAgICBvdXRsaW5lZCA9IGZhbHNlLFxuICAgICAgICBpbnZlcnRlZCA9IGZhbHNlLFxuICAgICAgICByb3VuZGVkID0gZmFsc2UsXG4gICAgICAgIGJ1dHRvbiA9IHRydWUsXG4gICAgICAgIHN0YXRlID0gXCJcIixcbiAgICAgICAgdHlwZSA9IFwiXCIsXG4gICAgICAgIGNvbG9yID0gXCJcIixcbiAgICAgICAgc2l6ZSA9IFwiXCIsXG4gICAgICAgIGNsYXNzZXMgPSAkYmluZGFibGUoXCJcIiksXG4gICAgICAgIGljb24gPSBmYWxzZSxcbiAgICAgICAgaWNvblNpZGUgPSBcInJpZ2h0XCIsXG4gICAgICAgIGFjdGlvbiA9ICgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9LFxuICAgICAgICBjaGlsZHJlblxuICAgIH0gPSAkcHJvcHMoKTtcblxuICAgIHJ1bigoKSA9PiB7XG4gICAgICAgIGNsYXNzZXMgPVxuICAgICAgICAgICAgKGJ1dHRvbiA/IFwiYnV0dG9uIFwiIDogXCJcIikgK1xuICAgICAgICAgICAgKHN0YXRlICYmIHN0YXRlLmxlbmd0aCA+IDAgPyBgIGlzLSR7c3RhdGV9IGAgOiBcIlwiKSArXG4gICAgICAgICAgICAobGlnaHQgPyBgIGlzLWxpZ2h0IGAgOiBcIlwiKSArXG4gICAgICAgICAgICAodHlwZSAmJiB0eXBlLmxlbmd0aCA+IDAgPyBgIGlzLSR7dHlwZX0gYCA6IFwiXCIpICtcbiAgICAgICAgICAgIChzaXplICYmIHNpemUubGVuZ3RoID4gMCA/IGAgaXMtJHtzaXplfSBgIDogXCJcIik7XG4gICAgfSk7XG48L3NjcmlwdD5cblxuPGFcbiAgICBvbmNsaWNrPXthY3Rpb259XG4gICAge3RhcmdldH1cbiAgICBocmVmPXt1cmx9XG4gICAge2Rvd25sb2FkfVxuICAgIHtyZWx9XG4gICAgY2xhc3M9XCJ7Y2xhc3Nlc30ge3N0YXRlID8gYGlzLSR7c3RhdGV9YCA6ICcnfSB7aW52ZXJ0ZWRcbiAgICAgICAgPyBgaXMtaW52ZXJ0ZWRgXG4gICAgICAgIDogJyd9IHtvdXRsaW5lZCA/IGBpcy1vdXRsaW5lZGAgOiAnJ30ge3JhaXNlZFxuICAgICAgICAgICAgPyBgaXMtcmFpc2VkYFxuICAgICAgICAgICAgOiAnJ30ge3JvdW5kZWQgPyBgaXMtcm91bmRlZGAgOiAnJ30ge2xpZ2h0ID8gYGlzLWxpZ2h0YCA6ICcnfSB7bG9hZGluZ1xuICAgICAgICAgICAgICAgID8gYGlzLWxvYWRpbmdgXG4gICAgICAgICAgICAgICAgOiAnJ30ge2NvbG9yID8gYGlzLSR7Y29sb3J9YCA6ICcnfSB7dHlwZSA/IGBpcy0ke3R5cGV9YCA6ICcnfSB7c2l6ZVxuICAgICAgICAgICAgICAgICAgICA/IGBpcy0ke3NpemV9YFxuICAgICAgICAgICAgICAgICAgICA6ICcnfVwiXG4+XG4gICAgeyNpZiBpY29ufVxuICAgICAgICB7I2lmIGljb25TaWRlID09PSBcImxlZnRcIn1cbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiaWNvblwiXG4gICAgICAgICAgICAgICAgPjxpIGNsYXNzPVwiZmFzIGZhLXtpY29ufSB7c2l6ZSA/IGBpcy0ke3NpemV9YCA6ICcnfVwiPjwvaT48L3NwYW5cbiAgICAgICAgICAgID5cbiAgICAgICAgey9pZn1cbiAgICAgICAgeyNpZiB0aXRsZX1cbiAgICAgICAgICAgIDxzcGFuPnskTE9DQUxFW3RpdGxlXX08L3NwYW4+XG4gICAgICAgIHsvaWZ9XG4gICAgICAgIHtAcmVuZGVyIGNoaWxkcmVuPy4oKX1cbiAgICAgICAgeyNpZiBpY29uU2lkZSA9PT0gXCJyaWdodFwifVxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJpY29uXCJcbiAgICAgICAgICAgICAgICA+PGkgY2xhc3M9XCJmYXMgZmEte2ljb259IHtzaXplID8gYGlzLSR7c2l6ZX1gIDogJyd9XCI+PC9pPjwvc3BhblxuICAgICAgICAgICAgPlxuICAgICAgICB7L2lmfVxuICAgIHs6ZWxzZX1cbiAgICAgICAgeyRMT0NBTEVbdGl0bGVdfVxuICAgICAgICB7QHJlbmRlciBjaGlsZHJlbj8uKCl9XG4gICAgey9pZn1cbjwvYT5cbiIsIjxzY3JpcHQ+XG4gICAgaW1wb3J0IFVJTGluayBmcm9tIFwiLi91aS5saW5rLnN2ZWx0ZVwiO1xuICAgIC8qKlxuICAgICAqIEB0eXBlZGVmIHtPYmplY3R9IFByb3BzXG4gICAgICogQHByb3BlcnR5IHthbnl9IFt2YWx1ZXNdXG4gICAgICogQHByb3BlcnR5IHtzdHJpbmd9IFtjbGFzc2VzXVxuICAgICAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW2NlbnRlcmVkXVxuICAgICAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW3JpZ2h0XVxuICAgICAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW2pvaW5lZF1cbiAgICAgKi9cblxuICAgIC8qKiBAdHlwZSB7UHJvcHN9ICovXG4gICAgbGV0IHtcbiAgICAgICAgdmFsdWVzID0gW10sXG4gICAgICAgIGNsYXNzZXMgPSBcIlwiLFxuICAgICAgICBjZW50ZXJlZCA9IGZhbHNlLFxuICAgICAgICByaWdodCA9IGZhbHNlLFxuICAgICAgICBqb2luZWQgPSB0cnVlXG4gICAgfSA9ICRwcm9wcygpO1xuPC9zY3JpcHQ+XG5cbnsjaWYgam9pbmVkfVxuICAgIDxkaXZcbiAgICAgICAgY2xhc3M9XCJmaWVsZCBoYXMtYWRkb25zIHtjZW50ZXJlZCA/ICdpcy1jZW50ZXJlZCcgOiAnJ30ge3JpZ2h0XG4gICAgICAgICAgICA/ICdpcy1yaWdodCdcbiAgICAgICAgICAgIDogJyd9IHtjbGFzc2VzfVwiXG4gICAgPlxuICAgICAgICA8cCBjbGFzcz1cImNvbnRyb2xcIj5cbiAgICAgICAgICAgIHsjZWFjaCB2YWx1ZXMgYXMgaXRlbSAoaXRlbS5pZCl9XG4gICAgICAgICAgICAgICAgPFVJTGluayB7Li4uaXRlbX0gLz5cbiAgICAgICAgICAgIHsvZWFjaH1cbiAgICAgICAgPC9wPlxuICAgIDwvZGl2PlxuezplbHNlfVxuICAgIDxkaXZcbiAgICAgICAgY2xhc3M9XCJidXR0b25zIHtjZW50ZXJlZCA/ICdpcy1jZW50ZXJlZCcgOiAnJ30ge3JpZ2h0XG4gICAgICAgICAgICA/ICdpcy1yaWdodCdcbiAgICAgICAgICAgIDogJyd9IHtjbGFzc2VzfVwiXG4gICAgPlxuICAgICAgICB7I2VhY2ggdmFsdWVzIGFzIGl0ZW0gKGl0ZW0uaWQpfVxuICAgICAgICAgICAgPFVJTGluayB7Li4uaXRlbX0gLz5cbiAgICAgICAgey9lYWNofVxuICAgIDwvZGl2Plxuey9pZn1cbiIsIjxzY3JpcHQ+XG4gICAgaW1wb3J0IHsgb25Nb3VudCB9IGZyb20gXCJzdmVsdGVcIjtcblxuICAgIGltcG9ydCBVSVRpdGxlIGZyb20gXCIuLi92YXJpb3VzL3VpLnRpdGxlLnN2ZWx0ZVwiO1xuICAgIGltcG9ydCBVSUJ1dHRvbnMgZnJvbSBcIi4uL2J1dHRvbi91aS5idXR0b25zLnN2ZWx0ZVwiO1xuICAgIGltcG9ydCBVSUxpbmtzIGZyb20gXCIuLi9saW5rL3VpLmxpbmtzLnN2ZWx0ZVwiO1xuXG4gICAgLyoqXG4gICAgICogQHR5cGVkZWYge09iamVjdH0gUHJvcHNcbiAgICAgKiBAcHJvcGVydHkge2FueX0gdGl0bGVcbiAgICAgKiBAcHJvcGVydHkge2FueX0gZGVzY3JpcHRpb25cbiAgICAgKiBAcHJvcGVydHkge2FueX0gW2FjdGlvbnNdXG4gICAgICogQHByb3BlcnR5IHthbnl9IFtsaW5rc11cbiAgICAgKiBAcHJvcGVydHkge2FueX0gW2xpc3RBY3Rpb25zXVxuICAgICAqIEBwcm9wZXJ0eSB7YW55fSBbbGlzdExpbmtzXVxuICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbY2xhc3Nlc11cbiAgICAgKiBAcHJvcGVydHkge3N0cmluZ30gW2NvbW1vbkNsYXNzZXNdXG4gICAgICogQHByb3BlcnR5IHtzdHJpbmd9IFtpbWFnZV1cbiAgICAgKiBAcHJvcGVydHkge2FueX0gdmFsdWUgLSB2YWx1ZSBvZiBpdGVtLCB3aWxsIGJlIHBhc3NlZCB0byBldmVudCBoYW5kbGVyc1xuICAgICAqIEBwcm9wZXJ0eSB7YW55fSBbaW5kZXhdIC0gaW5kZXggaW4gYXJyYXkgMC1sZW5ndGhcbiAgICAgKiBAcHJvcGVydHkge2Jvb2xlYW59IFtmaXJzdF0gLSBpZiBmaXJzdFxuICAgICAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW2xhc3RdIC0gaWYgbGFzdFxuICAgICAqIEBwcm9wZXJ0eSB7YW55fSBbdGl0bGVDb21wb25lbnRdIC0gY3VzdG9taXphdGlvblxuICAgICAqIEBwcm9wZXJ0eSB7YW55fSBbdGl0bGVDb21wb25lbnRQcm9wc11cbiAgICAgKiBAcHJvcGVydHkge2FueX0gZGVzY3JpcHRpb25Db21wb25lbnRcbiAgICAgKiBAcHJvcGVydHkge2FueX0gW2Rlc2NyaXB0aW9uQ29tcG9uZW50UHJvcHNdXG4gICAgICogQHByb3BlcnR5IHthbnl9IGltYWdlQ29tcG9uZW50XG4gICAgICogQHByb3BlcnR5IHthbnl9IFtpbWFnZUNvbXBvbmVudFByb3BzXVxuICAgICAqL1xuXG4gICAgLyoqIEB0eXBlIHtQcm9wc30gKi9cbiAgICBsZXQge1xuICAgICAgICB0aXRsZSxcbiAgICAgICAgZGVzY3JpcHRpb24sXG4gICAgICAgIGFjdGlvbnMgPSBbXSxcbiAgICAgICAgbGlua3MgPSBbXSxcbiAgICAgICAgbGlzdEFjdGlvbnMgPSBbXSxcbiAgICAgICAgbGlzdExpbmtzID0gW10sXG4gICAgICAgIGNsYXNzZXMgPSBcIlwiLFxuICAgICAgICBjb21tb25DbGFzc2VzID0gXCJcIixcbiAgICAgICAgaW1hZ2UgPSBcIlwiLFxuICAgICAgICB2YWx1ZSxcbiAgICAgICAgaW5kZXggPSAtMSxcbiAgICAgICAgZmlyc3QgPSBmYWxzZSxcbiAgICAgICAgbGFzdCA9IGZhbHNlLFxuICAgICAgICB0aXRsZUNvbXBvbmVudCA9IFVJVGl0bGUsXG4gICAgICAgIHRpdGxlQ29tcG9uZW50UHJvcHMgPSB7IHNpemU6IDYgfSxcbiAgICAgICAgZGVzY3JpcHRpb25Db21wb25lbnQsXG4gICAgICAgIGRlc2NyaXB0aW9uQ29tcG9uZW50UHJvcHMgPSB7fSxcbiAgICAgICAgaW1hZ2VDb21wb25lbnQsXG4gICAgICAgIGltYWdlQ29tcG9uZW50UHJvcHMgPSB7fSxcbiAgICAgICAgb25jbGlja0ltYWdlID0gKCkgPT4gZmFsc2UsXG4gICAgICAgIG9uY2xpY2tDb250ZW50ID0gKCkgPT4gZmFsc2UsXG4gICAgICAgIG9uY2xpY2tUaXRsZSA9ICgpID0+IGZhbHNlLFxuICAgICAgICBvbmNsaWNrRGVzY3JpcHRpb24gPSAoKSA9PiBmYWxzZSxcbiAgICB9ID0gJHByb3BzKCk7XG5cbiAgICBmdW5jdGlvbiBvbkNsaWNrKCkge1xuICAgICAgICBvbmNsaWNrKHZhbHVlKTtcbiAgICB9XG5cbiAgICBsZXQgYWxsQWN0aW9ucyA9ICRzdGF0ZShbXSk7XG4gICAgbGV0IGFsbExpbmtzID0gJHN0YXRlKFtdKTtcblxuICAgIG9uTW91bnQoKCkgPT4ge1xuICAgICAgICBhbGxBY3Rpb25zID0gWy4uLmFjdGlvbnMsIC4uLmxpc3RBY3Rpb25zXS5tYXAoKGJ0bikgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHsgLi4uYnRuLCBhY3Rpb246ICgpID0+IGJ0bi5hY3Rpb24odmFsdWUpIH07XG4gICAgICAgIH0pO1xuICAgICAgICBhbGxMaW5rcyA9IFsuLi5saW5rcywgLi4ubGlzdExpbmtzXTtcbiAgICB9KTtcbjwvc2NyaXB0PlxuXG48ZGl2XG4gICAgcm9sZT1cImJ1dHRvblwiXG4gICAgdGFiaW5kZXg9XCIwXCJcbiAgICBjbGFzcz1cImxpc3QtaXRlbSB7Y2xhc3Nlc30ge2NvbW1vbkNsYXNzZXN9IHtsYXN0XG4gICAgICAgID8gJ2xpc3QtaXRlbS1sYXN0J1xuICAgICAgICA6ICcnfSB7Zmlyc3RcbiAgICAgICAgICAgID8gJ2xpc3QtaXRlbS1maXJzdCdcbiAgICAgICAgICAgIDogJyd9ICB7YGxpc3QtaXRlbS1hdC0ke2luZGV4fWB9IHtgbGlzdC1pdGVtLWAgK1xuICAgICAgICAoaW5kZXggJSAyID8gJ29kZCcgOiAnZXZlbicpfVwiXG4gICAgb25jbGljaz17b25DbGlja31cbiAgICBvbmtleXVwPXsoZSkgPT4ge1xuICAgICAgICBpZiAoZSAmJiBlLmtleSA9PSBcIkVudGVyXCIpIHtcbiAgICAgICAgICAgIG9uQ2xpY2soKTtcbiAgICAgICAgfVxuICAgIH19XG4+XG4gICAgeyNpZiBpbWFnZX1cbiAgICAgICAgPGRpdlxuICAgICAgICAgICAgcm9sZT1cImJ1dHRvblwiXG4gICAgICAgICAgICB0YWJpbmRleD1cIjBcIlxuICAgICAgICAgICAgY2xhc3M9XCJsaXN0LWl0ZW0taW1hZ2VcIlxuICAgICAgICAgICAgb25rZXl1cD17KGUpID0+IHtcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgaWYgKGUgJiYgZS5rZXkgPT0gXCJFbnRlclwiKSB7XG4gICAgICAgICAgICAgICAgICAgIG9uQ2xpY2soKTtcbiAgICAgICAgICAgICAgICAgICAgb25jbGlja0ltYWdlKHZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9fVxuICAgICAgICAgICAgb25jbGljaz17KGUpID0+IHtcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgb25DbGljaygpO1xuICAgICAgICAgICAgICAgIG9uY2xpY2tJbWFnZSh2YWx1ZSk7XG4gICAgICAgICAgICB9fVxuICAgICAgICA+XG4gICAgICAgICAgICB7I2lmIGltYWdlQ29tcG9uZW50fVxuICAgICAgICAgICAgICAgIHsjaWYgdHlwZW9mIGltYWdlID09PSBcInN0cmluZ1wifVxuICAgICAgICAgICAgICAgICAgICB7QGNvbnN0IFN2ZWx0ZUNvbXBvbmVudCA9IGltYWdlQ29tcG9uZW50fVxuICAgICAgICAgICAgICAgICAgICA8U3ZlbHRlQ29tcG9uZW50IHZhbHVlPXtpbWFnZX0gey4uLmltYWdlQ29tcG9uZW50UHJvcHN9IC8+XG4gICAgICAgICAgICAgICAgezplbHNlfVxuICAgICAgICAgICAgICAgICAgICB7QGNvbnN0IFN2ZWx0ZUNvbXBvbmVudF8xID0gaW1hZ2VDb21wb25lbnR9XG4gICAgICAgICAgICAgICAgICAgIDxTdmVsdGVDb21wb25lbnRfMSB7Li4uaW1hZ2V9IHsuLi5pbWFnZUNvbXBvbmVudFByb3BzfSAvPlxuICAgICAgICAgICAgICAgIHsvaWZ9XG4gICAgICAgICAgICB7OmVsc2V9XG4gICAgICAgICAgICAgICAgPGZpZ3VyZSBjbGFzcz1cImltYWdlIGlzLTY0eDY0XCI+XG4gICAgICAgICAgICAgICAgICAgIDxpbWcgY2xhc3M9XCJpcy1yb3VuZGVkXCIgc3JjPXtpbWFnZX0gYWx0PXt0aXRsZX0gLz5cbiAgICAgICAgICAgICAgICA8L2ZpZ3VyZT5cbiAgICAgICAgICAgIHsvaWZ9XG4gICAgICAgIDwvZGl2PlxuICAgIHsvaWZ9XG4gICAgPGRpdlxuICAgICAgICByb2xlPVwiYnV0dG9uXCJcbiAgICAgICAgdGFiaW5kZXg9XCIwXCJcbiAgICAgICAgY2xhc3M9XCJsaXN0LWl0ZW0tY29udGVudFwiXG4gICAgICAgIG9uY2xpY2s9eyhlKSA9PiB7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBvbkNsaWNrKCk7XG4gICAgICAgICAgICBvbmNsaWNrQ29udGVudCh2YWx1ZSk7XG4gICAgICAgIH19XG4gICAgICAgIG9ua2V5dXA9eyhlKSA9PiB7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBpZiAoZSAmJiBlLmtleSA9PSBcIkVudGVyXCIpIHtcbiAgICAgICAgICAgICAgICBvbkNsaWNrKCk7XG4gICAgICAgICAgICAgICAgb25jbGlja0NvbnRlbnQodmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9fVxuICAgID5cbiAgICAgICAgeyNpZiB0aXRsZX1cbiAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICBjbGFzcz1cImxpc3QtaXRlbS10aXRsZVwiXG4gICAgICAgICAgICAgICAgcm9sZT1cImJ1dHRvblwiXG4gICAgICAgICAgICAgICAgdGFiaW5kZXg9XCIwXCJcbiAgICAgICAgICAgICAgICBvbmtleXVwPXsoZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlICYmIGUua2V5ID09IFwiRW50ZXJcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljaygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgb25jbGlja1RpdGxlKHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgb25jbGljaz17KGUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICBvbkNsaWNrKCk7XG4gICAgICAgICAgICAgICAgICAgIG9uY2xpY2tUaXRsZSh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICB7I2lmIHRpdGxlQ29tcG9uZW50fVxuICAgICAgICAgICAgICAgICAgICB7I2lmIHR5cGVvZiB0aXRsZSA9PT0gXCJzdHJpbmdcIn1cbiAgICAgICAgICAgICAgICAgICAgICAgIHtAY29uc3QgU3ZlbHRlQ29tcG9uZW50XzIgPSB0aXRsZUNvbXBvbmVudH1cbiAgICAgICAgICAgICAgICAgICAgICAgIDxTdmVsdGVDb21wb25lbnRfMlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt0aXRsZX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7Li4udGl0bGVDb21wb25lbnRQcm9wc31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7b25jaGFuZ2V9XG4gICAgICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICB7OmVsc2V9XG4gICAgICAgICAgICAgICAgICAgICAgICB7QGNvbnN0IFN2ZWx0ZUNvbXBvbmVudF8zID0gdGl0bGVDb21wb25lbnR9XG4gICAgICAgICAgICAgICAgICAgICAgICA8U3ZlbHRlQ29tcG9uZW50XzNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7Li4udGl0bGV9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgey4uLnRpdGxlQ29tcG9uZW50UHJvcHN9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge29uY2hhbmdlfVxuICAgICAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgey9pZn1cbiAgICAgICAgICAgICAgICB7OmVsc2V9XG4gICAgICAgICAgICAgICAgICAgIHt0aXRsZX1cbiAgICAgICAgICAgICAgICB7L2lmfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIHsvaWZ9XG4gICAgICAgIHsjaWYgZGVzY3JpcHRpb259XG4gICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgICAgcm9sZT1cImJ1dHRvblwiXG4gICAgICAgICAgICAgICAgdGFiaW5kZXg9XCIwXCJcbiAgICAgICAgICAgICAgICBvbmtleXVwPXsoZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlICYmIGUua2V5ID09IFwiRW50ZXJcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljaygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgb25jbGlja0Rlc2NyaXB0aW9uKHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgY2xhc3M9XCJsaXN0LWl0ZW0tZGVzY3JpcHRpb25cIlxuICAgICAgICAgICAgICAgIG9uY2xpY2s9eyhlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgb25DbGljaygpO1xuICAgICAgICAgICAgICAgICAgICBvbmNsaWNrRGVzY3JpcHRpb24odmFsdWUpO1xuICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgeyNpZiBkZXNjcmlwdGlvbkNvbXBvbmVudH1cbiAgICAgICAgICAgICAgICAgICAgeyNpZiB0eXBlb2YgZGVzY3JpcHRpb24gPT09IFwic3RyaW5nXCJ9XG4gICAgICAgICAgICAgICAgICAgICAgICB7QGNvbnN0IFN2ZWx0ZUNvbXBvbmVudF80ID0gZGVzY3JpcHRpb25Db21wb25lbnR9XG4gICAgICAgICAgICAgICAgICAgICAgICA8U3ZlbHRlQ29tcG9uZW50XzRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17ZGVzY3JpcHRpb259XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgey4uLmRlc2NyaXB0aW9uQ29tcG9uZW50UHJvcHN9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge29uY2hhbmdlfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtvbmNsaWNrfVxuICAgICAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgezplbHNlfVxuICAgICAgICAgICAgICAgICAgICAgICAge0Bjb25zdCBTdmVsdGVDb21wb25lbnRfNSA9IGRlc2NyaXB0aW9uQ29tcG9uZW50fVxuICAgICAgICAgICAgICAgICAgICAgICAgPFN2ZWx0ZUNvbXBvbmVudF81XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgey4uLmRlc2NyaXB0aW9ufVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsuLi5kZXNjcmlwdGlvbkNvbXBvbmVudFByb3BzfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtvbmNoYW5nZX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7b25jbGlja31cbiAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgIHsvaWZ9XG4gICAgICAgICAgICAgICAgezplbHNlfVxuICAgICAgICAgICAgICAgICAgICB7ZGVzY3JpcHRpb259XG4gICAgICAgICAgICAgICAgey9pZn1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICB7L2lmfVxuICAgIDwvZGl2PlxuXG4gICAgeyNpZiAoYWxsQWN0aW9ucyAmJiBhbGxBY3Rpb25zLmxlbmd0aCkgfHwgKGFsbExpbmtzICYmIGFsbExpbmtzLmxlbmd0aCl9XG4gICAgICAgIDxkaXYgY2xhc3M9XCJsaXN0LWl0ZW0tY29udHJvbHNcIj5cbiAgICAgICAgICAgIHsjaWYgYWxsQWN0aW9ucyAmJiBhbGxBY3Rpb25zLmxlbmd0aH1cbiAgICAgICAgICAgICAgICA8VUlCdXR0b25zIHZhbHVlcz17YWxsQWN0aW9uc30gcmlnaHQ9e3RydWV9IC8+XG4gICAgICAgICAgICB7L2lmfVxuICAgICAgICAgICAgeyNpZiBhbGxMaW5rcyAmJiBhbGxMaW5rcy5sZW5ndGh9XG4gICAgICAgICAgICAgICAgPFVJTGlua3MgdmFsdWVzPXthbGxMaW5rc30gcmlnaHQ9e3RydWV9IC8+XG4gICAgICAgICAgICB7L2lmfVxuICAgICAgICA8L2Rpdj5cbiAgICB7L2lmfVxuPC9kaXY+XG4iLCI8c2NyaXB0PlxuICAgIGltcG9ydCBVSUxpc3RJdGVtIGZyb20gXCIuL3VpLmxpc3QuaXRlbS5zdmVsdGVcIjtcbiAgICBpbXBvcnQgVUlUaXRsZSBmcm9tIFwiLi4vdmFyaW91cy91aS50aXRsZS5zdmVsdGVcIjtcblxuICAgIC8qKlxuICAgICAqIEB0eXBlZGVmIHtPYmplY3R9IFByb3BzXG4gICAgICogQHByb3BlcnR5IHtzdHJpbmd9IFtpZEZpZWxkTmFtZV1cbiAgICAgKiBAcHJvcGVydHkge2FueX0gW2l0ZW1zXVxuICAgICAqIEBwcm9wZXJ0eSB7YW55fSBbYWN0aW9uc11cbiAgICAgKiBAcHJvcGVydHkge2FueX0gW2xpbmtzXVxuICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbaXRlbUNsYXNzZXNdXG4gICAgICogQHByb3BlcnR5IHthbnl9IFtsaXN0SXRlbUNvbXBvbmVudF1cbiAgICAgKiBAcHJvcGVydHkge2FueX0gW2xpc3RJdGVtQ29tcG9uZW50UHJvcHNdXG4gICAgICogQHByb3BlcnR5IHthbnl9IFt0aXRsZUNvbXBvbmVudF1cbiAgICAgKiBAcHJvcGVydHkge2FueX0gW3RpdGxlQ29tcG9uZW50UHJvcHNdXG4gICAgICogQHByb3BlcnR5IHthbnl9IGRlc2NyaXB0aW9uQ29tcG9uZW50XG4gICAgICogQHByb3BlcnR5IHthbnl9IFtkZXNjcmlwdGlvbkNvbXBvbmVudFByb3BzXVxuICAgICAqIEBwcm9wZXJ0eSB7YW55fSBpbWFnZUNvbXBvbmVudFxuICAgICAqIEBwcm9wZXJ0eSB7YW55fSBbaW1hZ2VDb21wb25lbnRQcm9wc11cbiAgICAgKi9cblxuICAgIC8qKiBAdHlwZSB7UHJvcHN9ICovXG4gICAgbGV0IHtcbiAgICAgICAgaWRGaWVsZE5hbWUgPSBcImlkXCIsXG4gICAgICAgIGl0ZW1zID0gW10sXG4gICAgICAgIGFjdGlvbnMgPSBbXSxcbiAgICAgICAgbGlua3MgPSBbXSxcbiAgICAgICAgaXRlbUNsYXNzZXMgPSBcIlwiLFxuICAgICAgICBsaXN0SXRlbUNvbXBvbmVudCA9IFVJTGlzdEl0ZW0sXG4gICAgICAgIGxpc3RJdGVtQ29tcG9uZW50UHJvcHMgPSB7fSxcbiAgICAgICAgdGl0bGVDb21wb25lbnQgPSBVSVRpdGxlLFxuICAgICAgICB0aXRsZUNvbXBvbmVudFByb3BzID0geyBzaXplOiA2IH0sXG4gICAgICAgIGRlc2NyaXB0aW9uQ29tcG9uZW50LFxuICAgICAgICBkZXNjcmlwdGlvbkNvbXBvbmVudFByb3BzID0ge30sXG4gICAgICAgIGltYWdlQ29tcG9uZW50LFxuICAgICAgICBpbWFnZUNvbXBvbmVudFByb3BzID0ge30sXG4gICAgfSA9ICRwcm9wcygpO1xuPC9zY3JpcHQ+XG5cbnsjaWYgaXRlbXN9XG4gICAge0Bjb25zdCBTdmVsdGVDb21wb25lbnQgPSBsaXN0SXRlbUNvbXBvbmVudH1cbiAgICB7I2VhY2ggaXRlbXMgYXMgaXRlbSwgaW5kZXggKGl0ZW1baWRGaWVsZE5hbWVdKX1cbiAgICAgICAgPFN2ZWx0ZUNvbXBvbmVudFxuICAgICAgICAgICAgey4uLmxpc3RJdGVtQ29tcG9uZW50UHJvcHN9XG4gICAgICAgICAgICB7dGl0bGVDb21wb25lbnR9XG4gICAgICAgICAgICB7dGl0bGVDb21wb25lbnRQcm9wc31cbiAgICAgICAgICAgIHtkZXNjcmlwdGlvbkNvbXBvbmVudH1cbiAgICAgICAgICAgIHtkZXNjcmlwdGlvbkNvbXBvbmVudFByb3BzfVxuICAgICAgICAgICAge2ltYWdlQ29tcG9uZW50fVxuICAgICAgICAgICAge2ltYWdlQ29tcG9uZW50UHJvcHN9XG4gICAgICAgICAgICB7Li4uaXRlbX1cbiAgICAgICAgICAgIGxpc3RBY3Rpb25zPXthY3Rpb25zfVxuICAgICAgICAgICAgbGlzdExpbmtzPXtsaW5rc31cbiAgICAgICAgICAgIGNvbW1vbkNsYXNzZXM9e2l0ZW1DbGFzc2VzfVxuICAgICAgICAgICAgYmluZDp2YWx1ZT17aXRlbXNbaW5kZXhdfVxuICAgICAgICAgICAge2luZGV4fVxuICAgICAgICAgICAgZmlyc3Q9e2luZGV4ID09PSAwfVxuICAgICAgICAgICAgbGFzdD17aW5kZXggPT09IGl0ZW1zLmxlbmd0aCAtIDF9XG4gICAgICAgICAgICBvbjpjbGlja1xuICAgICAgICAgICAgb246Y2xpY2tDb250ZW50XG4gICAgICAgICAgICBvbjpjbGlja0Rlc2NyaXB0aW9uXG4gICAgICAgICAgICBvbjpjbGlja0ltYWdlXG4gICAgICAgICAgICBvbjpjbGlja1RpdGxlXG4gICAgICAgIC8+XG4gICAgey9lYWNofVxuey9pZn1cbiIsIjxzY3JpcHQ+XG4gICAgaW1wb3J0IFVJTGlzdEVtcHR5UGxhY2Vob2xkZXIgZnJvbSBcIi4vdWkubGlzdC5lbXB0eS5wbGFjZWhvbGRlci5zdmVsdGVcIjtcbiAgICBpbXBvcnQgVUlMaXN0SXRlbSBmcm9tIFwiLi91aS5saXN0Lml0ZW0uc3ZlbHRlXCI7XG4gICAgaW1wb3J0IFVJTGlzdEJsb2NrIGZyb20gXCIuL3VpLmxpc3QuYmxvY2suc3ZlbHRlXCI7XG4gICAgaW1wb3J0IFVJVGl0bGUgZnJvbSBcIi4uL3ZhcmlvdXMvdWkudGl0bGUuc3ZlbHRlXCI7XG5cblxuXG5cbiAgICAvL2N1c3RvbWl6YXRpb25cbiAgICBcbiAgICBcbiAgICBcbiAgICAvKipcbiAgICAgKiBAdHlwZWRlZiB7T2JqZWN0fSBQcm9wc1xuICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbY2xhc3Nlc11cbiAgICAgKiBAcHJvcGVydHkge2FueX0gW2l0ZW1zXVxuICAgICAqIEBwcm9wZXJ0eSB7YW55fSBbYWN0aW9uc11cbiAgICAgKiBAcHJvcGVydHkge2FueX0gW2xpbmtzXVxuICAgICAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW2FjdGlvbnNWaXNpYmxlXVxuICAgICAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW2l0ZW1zSG92ZXJhYmxlXVxuICAgICAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW292ZXJmbG93RWxsaXBzaXNdXG4gICAgICogQHByb3BlcnR5IHtib29sZWFufSBbaGlkZGVuSW1hZ2VzXVxuICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbaXRlbUNsYXNzZXNdXG4gICAgICogQHByb3BlcnR5IHthbnl9IGl0ZW1MZW5ndGhcbiAgICAgKiBAcHJvcGVydHkge3N0cmluZ30gW2lkRmllbGROYW1lXVxuICAgICAqIEBwcm9wZXJ0eSB7YW55fSBbZW1wdHlMaXN0UGxhY2Vob2xkZXJDb21wb25lbnRdIC0gZW1wdHlcbiAgICAgKiBAcHJvcGVydHkge2FueX0gW2VtcHR5TGlzdFBsYWNlaG9sZGVyQ29tcG9uZW50UHJvcHNdXG4gICAgICogQHByb3BlcnR5IHthbnl9IFtsaXN0SXRlbUNvbXBvbmVudF0gLSBpdGVtXG4gICAgICogQHByb3BlcnR5IHthbnl9IFtsaXN0SXRlbUNvbXBvbmVudFByb3BzXVxuICAgICAqIEBwcm9wZXJ0eSB7YW55fSBbdGl0bGVDb21wb25lbnRdIC0gaXRlbSBwYXJ0c1xuICAgICAqIEBwcm9wZXJ0eSB7YW55fSBbdGl0bGVDb21wb25lbnRQcm9wc11cbiAgICAgKiBAcHJvcGVydHkge2FueX0gZGVzY3JpcHRpb25Db21wb25lbnRcbiAgICAgKiBAcHJvcGVydHkge2FueX0gW2Rlc2NyaXB0aW9uQ29tcG9uZW50UHJvcHNdXG4gICAgICogQHByb3BlcnR5IHthbnl9IGltYWdlQ29tcG9uZW50XG4gICAgICogQHByb3BlcnR5IHthbnl9IFtpbWFnZUNvbXBvbmVudFByb3BzXVxuICAgICAqL1xuXG4gICAgLyoqIEB0eXBlIHtQcm9wc30gKi9cbiAgICBsZXQge1xuICAgICAgICBjbGFzc2VzID0gXCJcIixcbiAgICAgICAgaXRlbXMgPSAkYmluZGFibGUoW10pLFxuICAgICAgICBhY3Rpb25zID0gW10sXG4gICAgICAgIGxpbmtzID0gW10sXG4gICAgICAgIGFjdGlvbnNWaXNpYmxlID0gZmFsc2UsXG4gICAgICAgIGl0ZW1zSG92ZXJhYmxlID0gZmFsc2UsXG4gICAgICAgIG92ZXJmbG93RWxsaXBzaXMgPSBmYWxzZSxcbiAgICAgICAgaGlkZGVuSW1hZ2VzID0gZmFsc2UsXG4gICAgICAgIGl0ZW1DbGFzc2VzID0gXCJcIixcbiAgICAgICAgaXRlbUxlbmd0aCxcbiAgICAgICAgaWRGaWVsZE5hbWUgPSBcImlkXCIsXG4gICAgICAgIGVtcHR5TGlzdFBsYWNlaG9sZGVyQ29tcG9uZW50ID0gVUlMaXN0RW1wdHlQbGFjZWhvbGRlcixcbiAgICAgICAgZW1wdHlMaXN0UGxhY2Vob2xkZXJDb21wb25lbnRQcm9wcyA9IHt9LFxuICAgICAgICBsaXN0SXRlbUNvbXBvbmVudCA9IFVJTGlzdEl0ZW0sXG4gICAgICAgIGxpc3RJdGVtQ29tcG9uZW50UHJvcHMgPSB7fSxcbiAgICAgICAgdGl0bGVDb21wb25lbnQgPSBVSVRpdGxlLFxuICAgICAgICB0aXRsZUNvbXBvbmVudFByb3BzID0geyBzaXplOiA2IH0sXG4gICAgICAgIGRlc2NyaXB0aW9uQ29tcG9uZW50LFxuICAgICAgICBkZXNjcmlwdGlvbkNvbXBvbmVudFByb3BzID0ge30sXG4gICAgICAgIGltYWdlQ29tcG9uZW50LFxuICAgICAgICBpbWFnZUNvbXBvbmVudFByb3BzID0ge31cbiAgICB9ID0gJHByb3BzKCk7XG48L3NjcmlwdD5cblxueyNpZiBpdGVtcy5sZW5ndGh9XG4gICAgPGRpdlxuICAgICAgICBzdHlsZT17aXRlbUxlbmd0aCA/IGAtLWxlbmd0aDogJHtpdGVtTGVuZ3RofTtgIDogXCJcIn1cbiAgICAgICAgY2xhc3M9XCJsaXN0IHtjbGFzc2VzfSB7YWN0aW9uc1Zpc2libGVcbiAgICAgICAgICAgID8gJ2hhcy12aXNpYmxlLXBvaW50ZXItY29udHJvbHMnXG4gICAgICAgICAgICA6ICcnfSB7aXRlbXNIb3ZlcmFibGVcbiAgICAgICAgICAgICAgICA/ICdoYXMtaG92ZXJhYmxlLWxpc3QtaXRlbXMnXG4gICAgICAgICAgICAgICAgOiAnJ30ge292ZXJmbG93RWxsaXBzaXNcbiAgICAgICAgICAgICAgICAgICAgPyAnaGFzLW92ZXJmbG93LWVsbGlwc2lzJ1xuICAgICAgICAgICAgICAgICAgICA6ICcnfSB7aGlkZGVuSW1hZ2VzID8gJ2hhcy1oaWRkZW4taW1hZ2VzJyA6ICcnfVwiXG4gICAgPlxuICAgICAgICA8VUlMaXN0QmxvY2tcbiAgICAgICAgICAgIGJpbmQ6aXRlbXNcbiAgICAgICAgICAgIHtpdGVtQ2xhc3Nlc31cbiAgICAgICAgICAgIHtsaXN0SXRlbUNvbXBvbmVudH1cbiAgICAgICAgICAgIHtsaXN0SXRlbUNvbXBvbmVudFByb3BzfVxuICAgICAgICAgICAge2lkRmllbGROYW1lfVxuICAgICAgICAgICAge3RpdGxlQ29tcG9uZW50fVxuICAgICAgICAgICAge3RpdGxlQ29tcG9uZW50UHJvcHN9XG4gICAgICAgICAgICB7ZGVzY3JpcHRpb25Db21wb25lbnR9XG4gICAgICAgICAgICB7ZGVzY3JpcHRpb25Db21wb25lbnRQcm9wc31cbiAgICAgICAgICAgIHtpbWFnZUNvbXBvbmVudH1cbiAgICAgICAgICAgIHtpbWFnZUNvbXBvbmVudFByb3BzfVxuICAgICAgICAgICAge2FjdGlvbnN9XG4gICAgICAgICAgICB7bGlua3N9XG4gICAgICAgICAgICBvbjpjaGFuZ2VcbiAgICAgICAgICAgIG9uOmNsaWNrXG4gICAgICAgICAgICBvbjpjbGlja0NvbnRlbnRcbiAgICAgICAgICAgIG9uOmNsaWNrRGVzY3JpcHRpb25cbiAgICAgICAgICAgIG9uOmNsaWNrSW1hZ2VcbiAgICAgICAgICAgIG9uOmNsaWNrVGl0bGVcbiAgICAgICAgLz5cbiAgICA8L2Rpdj5cbns6ZWxzZX1cbiAgICB7QGNvbnN0IFN2ZWx0ZUNvbXBvbmVudCA9IGVtcHR5TGlzdFBsYWNlaG9sZGVyQ29tcG9uZW50fVxuICAgIDxTdmVsdGVDb21wb25lbnRcbiAgICAgICAgey4uLmVtcHR5TGlzdFBsYWNlaG9sZGVyQ29tcG9uZW50UHJvcHN9XG4gICAgLz5cbnsvaWZ9XG4iLCI8c2NyaXB0PlxuICAgIGltcG9ydCB7IENPTVBPTkVOVFMgfSBmcm9tIFwiLi4vLi4vZnJhbWUvTElCLmpzXCI7XG4gICAgaW1wb3J0IG5vdENvbW1vbiBmcm9tIFwiLi4vLi4vZnJhbWUvY29tbW9uLmpzXCI7XG4gICAgaW1wb3J0IFVJTGlzdCBmcm9tIFwiLi4vbGlzdC91aS5saXN0LnN2ZWx0ZVwiO1xuXG4gICAgLy9maWVsZCBwcm9wc1xuXG4gICAgLyoqXG4gICAgICogQHR5cGVkZWYge09iamVjdH0gUHJvcHNcbiAgICAgKiBAcHJvcGVydHkge2Jvb2xlYW59IFtpbnB1dFN0YXJ0ZWRdIC0gc3ZlbHRlLWlnbm9yZSB1bnVzZWQtZXhwb3J0LWxldFxuICAgICAqIEBwcm9wZXJ0eSB7YW55fSBbdmFsdWVdXG4gICAgICogQHByb3BlcnR5IHtzdHJpbmd9IFtwbGFjZWhvbGRlcl1cbiAgICAgKiBAcHJvcGVydHkge3N0cmluZ30gW2ZpZWxkbmFtZV1cbiAgICAgKiBAcHJvcGVydHkge2Jvb2xlYW59IFtyZXF1aXJlZF1cbiAgICAgKiBAcHJvcGVydHkge2Jvb2xlYW59IFtyZWFkb25seV1cbiAgICAgKiBAcHJvcGVydHkge2Jvb2xlYW59IFttdWx0aXBsZV1cbiAgICAgKiBAcHJvcGVydHkge251bWJlcn0gW3NpemVdXG4gICAgICogQHByb3BlcnR5IHtib29sZWFufSBbdmFsaWRdIC0gdmFsaWRhdGlvblxuICAgICAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW3ZhbGlkYXRlZF1cbiAgICAgKiBAcHJvcGVydHkge2Jvb2xlYW59IFtlcnJvcnNdXG4gICAgICogQHByb3BlcnR5IHtib29sZWFufSBbZm9ybUVycm9yc11cbiAgICAgKiBAcHJvcGVydHkge2Jvb2xlYW59IFtmb3JtTGV2ZWxFcnJvcl1cbiAgICAgKiBAcHJvcGVydHkge3N0cmluZ30gW21vZGVsTmFtZV0gLSBtb2RlbCBiaW5kaW5nc1xuICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbYWN0aW9uTmFtZV1cbiAgICAgKiBAcHJvcGVydHkge2FueX0gW2FjdGlvbkZpbHRlcl1cbiAgICAgKiBAcHJvcGVydHkge2FueX0gW2FjdGlvblNvcnRlcl1cbiAgICAgKiBAcHJvcGVydHkge2FueX0gW2FjdGlvblBhZ2VyXVxuICAgICAqIEBwcm9wZXJ0eSB7YW55fSBbYWN0aW9uU2VhcmNoXVxuICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbb3B0aW9uSWRdIC0gcHJlc2VudGF0aW9uXG4gICAgICogQHByb3BlcnR5IHtzdHJpbmd9IFtvcHRpb25UaXRsZV1cbiAgICAgKiBAcHJvcGVydHkge3N0cmluZ30gW3NlbGVjdG9yVUldIC0gc2VsZWN0b3IgVUkgdG8gYWRkIG5ldyBpdGVtIHRvIGxpc3RcbiAgICAgKiBAcHJvcGVydHkge2FueX0gW3NlbGVjdG9yVUlQcm9wc11cbiAgICAgKiBAcHJvcGVydHkge3N0cmluZ30gW2l0ZW1VSV0gLSBsaXN0IGl0ZW0gVUkgdG8gcHJlc2VudCBpbiByZWFkb25seSBvciBlZGl0YWJsZSB2YXJpYW50c1xuICAgICAqIEBwcm9wZXJ0eSB7YW55fSBbaXRlbVVJUHJvcHNdXG4gICAgICogQHByb3BlcnR5IHthbnl9IFt0cmFuc2Zvcm1WYWx1ZUl0ZW1Ub0xpc3RJdGVtXVxuICAgICAqL1xuXG4gICAgLyoqIEB0eXBlIHtQcm9wc30gKi9cbiAgICBsZXQge1xuICAgICAgICB2YWx1ZSA9ICRiaW5kYWJsZShbXSksXG4gICAgICAgIHBsYWNlaG9sZGVyID0gJGJpbmRhYmxlKFwiXCIpLFxuICAgICAgICBmaWVsZG5hbWUgPSAkYmluZGFibGUoXCJzZWxlY3RGcm9tTW9kZWxcIiksXG4gICAgICAgIHJlcXVpcmVkID0gJGJpbmRhYmxlKHRydWUpLFxuICAgICAgICByZWFkb25seSA9IGZhbHNlLFxuICAgICAgICBtdWx0aXBsZSA9ICRiaW5kYWJsZShmYWxzZSksXG4gICAgICAgIHNpemUgPSAkYmluZGFibGUoOCksXG4gICAgICAgIHZhbGlkID0gJGJpbmRhYmxlKHRydWUpLFxuICAgICAgICBtb2RlbE5hbWUgPSBcIlwiLFxuICAgICAgICBhY3Rpb25OYW1lID0gXCJcIixcbiAgICAgICAgYWN0aW9uRmlsdGVyID0ge30sXG4gICAgICAgIGFjdGlvblNvcnRlciA9IHt9LFxuICAgICAgICBhY3Rpb25QYWdlciA9IHt9LFxuICAgICAgICBhY3Rpb25TZWFyY2ggPSB1bmRlZmluZWQsXG4gICAgICAgIG9wdGlvbklkID0gXCI6X2lkXCIsXG4gICAgICAgIG9wdGlvblRpdGxlID0gXCI6dGl0bGVcIixcbiAgICAgICAgc2VsZWN0b3JVSSA9IFwiVUlTZWxlY3RGcm9tTW9kZWxPbkRlbWFuZElubGluZVwiLFxuICAgICAgICBzZWxlY3RvclVJUHJvcHMgPSB7fSxcbiAgICAgICAgaXRlbVVJID0gXCJVSUxpc3RJdGVtXCIsXG4gICAgICAgIGl0ZW1VSVByb3BzID0ge30sXG4gICAgICAgIHRyYW5zZm9ybVZhbHVlSXRlbVRvTGlzdEl0ZW0gPSAoaXRlbSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGl0ZW1cbiAgICAgICAgICAgICAgICA/IHtcbiAgICAgICAgICAgICAgICAgICAgaWQ6IGl0ZW0uX2lkLFxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogaXRlbS50aXRsZSxcbiAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IGl0ZW0uZGVzY3JpcHRpb24sXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiBpdGVtLFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAgICAgfSxcbiAgICB9ID0gJHByb3BzKCk7XG5cbiAgICBmdW5jdGlvbiBhZGRJdGVtKGl0ZW0pIHtcbiAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAgICAgdmFsdWUgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICB2YWx1ZS5wdXNoKGl0ZW0pO1xuICAgICAgICB2YWx1ZSA9IHZhbHVlO1xuICAgIH1cblxuICAgIGxldCBpdGVtcyA9ICRkZXJpdmVkKFxuICAgICAgICB2YWx1ZS5tYXAgPyB2YWx1ZS5tYXAodHJhbnNmb3JtVmFsdWVJdGVtVG9MaXN0SXRlbSkgOiBbXVxuICAgICk7XG5cbiAgICBjb25zdCBBQ1RJT05TID0gW1xuICAgICAgICB7XG4gICAgICAgICAgICBhY3Rpb24obGlzdEl0ZW0pIHtcbiAgICAgICAgICAgICAgICBjb25zdCB2YWwgPSBsaXN0SXRlbS52YWx1ZTtcbiAgICAgICAgICAgICAgICBjb25zdCBpdGVtSW5kZXggPSB2YWx1ZS5maW5kSW5kZXgoXG4gICAgICAgICAgICAgICAgICAgICh2YWx1ZUl0ZW0pID0+IHZhbHVlSXRlbSA9PT0gdmFsXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICBpZiAoaXRlbUluZGV4ID4gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdmFsQ29weSA9IFsuLi52YWx1ZV07XG4gICAgICAgICAgICAgICAgICAgIG5vdENvbW1vbi5tb3ZlSXRlbSh2YWxDb3B5LCBpdGVtSW5kZXgsIGl0ZW1JbmRleCAtIDEpO1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbENvcHk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHRpdGxlOiBcIlwiLFxuICAgICAgICAgICAgaWNvbjogXCJhcnJvdy11cFwiLFxuICAgICAgICAgICAgY29sb3I6IFwibm9ybWFsXCIsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGFjdGlvbjogKGxpc3RJdGVtKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgdmFsID0gbGlzdEl0ZW0udmFsdWU7XG4gICAgICAgICAgICAgICAgY29uc3QgaXRlbUluZGV4ID0gdmFsdWUuZmluZEluZGV4KFxuICAgICAgICAgICAgICAgICAgICAodmFsdWVJdGVtKSA9PiB2YWx1ZUl0ZW0gPT09IHZhbFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgaWYgKGl0ZW1JbmRleCA+IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHZhbENvcHkgPSBbLi4udmFsdWVdO1xuICAgICAgICAgICAgICAgICAgICBub3RDb21tb24ubW92ZUl0ZW0odmFsQ29weSwgaXRlbUluZGV4LCBpdGVtSW5kZXggKyAxKTtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSB2YWxDb3B5O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB0aXRsZTogXCJcIixcbiAgICAgICAgICAgIGljb246IFwiYXJyb3ctZG93blwiLFxuICAgICAgICAgICAgY29sb3I6IFwibm9ybWFsXCIsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGFjdGlvbjogKGxpc3RJdGVtKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgdmFsID0gbGlzdEl0ZW0udmFsdWU7XG4gICAgICAgICAgICAgICAgY29uc3QgaXRlbUluZGV4ID0gdmFsdWUuZmluZEluZGV4KFxuICAgICAgICAgICAgICAgICAgICAodmFsdWVJdGVtKSA9PiB2YWx1ZUl0ZW0gPT09IHZhbFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgaWYgKGl0ZW1JbmRleCA+IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlLnNwbGljZShpdGVtSW5kZXgsIDEpO1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB0aXRsZTogXCJcIixcbiAgICAgICAgICAgIGljb246IFwidHJhc2hcIixcbiAgICAgICAgICAgIGNvbG9yOiBcImRhbmdlclwiLFxuICAgICAgICB9LFxuICAgIF07XG48L3NjcmlwdD5cblxuPFVJTGlzdFxuICAgIGxpc3RJdGVtQ29tcG9uZW50PXtDT01QT05FTlRTLmdldChpdGVtVUkpfVxuICAgIHsuLi5pdGVtVUlQcm9wc31cbiAgICB7aXRlbXN9XG4gICAgYWN0aW9ucz17QUNUSU9OU31cbi8+XG57I2lmICFyZWFkb25seX1cbiAgICB7QGNvbnN0IFN2ZWx0ZUNvbXBvbmVudCA9IENPTVBPTkVOVFMuZ2V0KHNlbGVjdG9yVUkpfVxuICAgIDxTdmVsdGVDb21wb25lbnRcbiAgICAgICAgey4uLnNlbGVjdG9yVUlQcm9wc31cbiAgICAgICAge21vZGVsTmFtZX1cbiAgICAgICAge2FjdGlvbk5hbWV9XG4gICAgICAgIHthY3Rpb25GaWx0ZXJ9XG4gICAgICAgIHthY3Rpb25Tb3J0ZXJ9XG4gICAgICAgIHthY3Rpb25QYWdlcn1cbiAgICAgICAge2FjdGlvblNlYXJjaH1cbiAgICAgICAge29wdGlvbklkfVxuICAgICAgICB7b3B0aW9uVGl0bGV9XG4gICAgICAgIGJpbmQ6cGxhY2Vob2xkZXJcbiAgICAgICAgYmluZDpmaWVsZG5hbWVcbiAgICAgICAgYmluZDpyZXF1aXJlZFxuICAgICAgICBiaW5kOm11bHRpcGxlXG4gICAgICAgIGJpbmQ6c2l6ZVxuICAgICAgICBiaW5kOnZhbGlkXG4gICAgICAgIG9uOnJlc29sdmU9eyhlKSA9PiBhZGRJdGVtKGUuZGV0YWlsKX1cbiAgICAvPlxuey9pZn1cbiIsIjxzY3JpcHQ+XG4gICAgaW1wb3J0IHsgY3JlYXRlQnViYmxlciB9IGZyb20gXCJzdmVsdGUvbGVnYWN5XCI7XG5cbiAgICBjb25zdCBidWJibGUgPSBjcmVhdGVCdWJibGVyKCk7XG4gICAgLyoqXG4gICAgICogQHR5cGVkZWYge09iamVjdH0gUHJvcHNcbiAgICAgKiBAcHJvcGVydHkge3N0cmluZ30gW2NsYXNzXVxuICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbdGl0bGVdXG4gICAgICogQHByb3BlcnR5IHtib29sZWFufSBbbmFycm93XVxuICAgICAqIEBwcm9wZXJ0eSB7aW1wb3J0KCdzdmVsdGUnKS5TbmlwcGV0fSBbY2hpbGRyZW5dXG4gICAgICovXG5cbiAgICAvKiogQHR5cGUge1Byb3BzfSAqL1xuICAgIGxldCB7XG4gICAgICAgIGNsYXNzOiBjbGFzc2VzID0gXCJcIixcbiAgICAgICAgdGl0bGUgPSBcIlwiLFxuICAgICAgICBuYXJyb3cgPSBmYWxzZSxcbiAgICAgICAgY2hpbGRyZW4sXG4gICAgfSA9ICRwcm9wcygpO1xuPC9zY3JpcHQ+XG5cbjxkaXZcbiAgICB7dGl0bGV9XG4gICAgY2xhc3M9XCJjb2x1bW4ge2NsYXNzZXN9IHtuYXJyb3cgPyAnaXMtbmFycm93JyA6ICcnfVwiXG4gICAgb25jbGljaz17YnViYmxlKFwiY2xpY2tcIil9XG4gICAgb25rZXl1cD17YnViYmxlKFwia2V5dXBcIil9XG4gICAgcm9sZT1cImJ1dHRvblwiXG4gICAgdGFiaW5kZXg9XCIwXCJcbj5cbiAgICB7QHJlbmRlciBjaGlsZHJlbj8uKCl9XG48L2Rpdj5cbiIsIjxzY3JpcHQ+XG4gICAgaW1wb3J0IHsgY3JlYXRlQnViYmxlciB9IGZyb20gJ3N2ZWx0ZS9sZWdhY3knO1xuXG4gICAgY29uc3QgYnViYmxlID0gY3JlYXRlQnViYmxlcigpO1xuICAgIC8qKlxuICAgICAqIEB0eXBlZGVmIHtPYmplY3R9IFByb3BzXG4gICAgICogQHByb3BlcnR5IHtzdHJpbmd9IFtjbGFzc2VzXVxuICAgICAqIEBwcm9wZXJ0eSB7aW1wb3J0KCdzdmVsdGUnKS5TbmlwcGV0fSBbY2hpbGRyZW5dXG4gICAgICovXG5cbiAgICAvKiogQHR5cGUge1Byb3BzfSAqL1xuICAgIGxldCB7IGNsYXNzZXMgPSBcIlwiLCBjaGlsZHJlbiB9ID0gJHByb3BzKCk7XG48L3NjcmlwdD5cblxuPGRpdiBjbGFzcz1cImNvbHVtbnMge2NsYXNzZXN9XCIgb25jbGljaz17YnViYmxlKCdjbGljaycpfSBvbmtleXVwPXtidWJibGUoJ2tleXVwJyl9IHJvbGU9XCJidXR0b25cIiB0YWJpbmRleD1cIjBcIj5cbiAgICB7QHJlbmRlciBjaGlsZHJlbj8uKCl9XG48L2Rpdj5cbiIsIjxzY3JpcHQ+XG4gICAgaW1wb3J0IHsgY3JlYXRlQnViYmxlciB9IGZyb20gJ3N2ZWx0ZS9sZWdhY3knO1xuXG4gICAgY29uc3QgYnViYmxlID0gY3JlYXRlQnViYmxlcigpO1xuICAgIC8qKlxuICAgICAqIEB0eXBlZGVmIHtPYmplY3R9IFByb3BzXG4gICAgICogQHByb3BlcnR5IHtzdHJpbmd9IFtpZF1cbiAgICAgKiBAcHJvcGVydHkge3N0cmluZ30gW2NsYXNzZXNdXG4gICAgICogQHByb3BlcnR5IHtib29sZWFufSBbd2lkZXNjcmVlbl1cbiAgICAgKiBAcHJvcGVydHkge2Jvb2xlYW59IFtmdWxsaGRdXG4gICAgICogQHByb3BlcnR5IHtib29sZWFufSBbbWF4RGVza3RvcF1cbiAgICAgKiBAcHJvcGVydHkge2Jvb2xlYW59IFttYXhXaWRlc2NyZWVuXVxuICAgICAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW2ZsdWlkXVxuICAgICAqIEBwcm9wZXJ0eSB7aW1wb3J0KCdzdmVsdGUnKS5TbmlwcGV0fSBbY2hpbGRyZW5dXG4gICAgICovXG5cbiAgICAvKiogQHR5cGUge1Byb3BzfSAqL1xuICAgIGxldCB7XG4gICAgICAgIGlkID0gXCJcIixcbiAgICAgICAgY2xhc3NlcyA9IFwiXCIsXG4gICAgICAgIHdpZGVzY3JlZW4gPSBmYWxzZSxcbiAgICAgICAgZnVsbGhkID0gZmFsc2UsXG4gICAgICAgIG1heERlc2t0b3AgPSBmYWxzZSxcbiAgICAgICAgbWF4V2lkZXNjcmVlbiA9IGZhbHNlLFxuICAgICAgICBmbHVpZCA9IGZhbHNlLFxuICAgICAgICBjaGlsZHJlblxuICAgIH0gPSAkcHJvcHMoKTtcbjwvc2NyaXB0PlxuXG48ZGl2XG4gICAge2lkfVxuICAgIGNsYXNzPVwiY29udGFpbmVyIHtjbGFzc2VzfVwiXG4gICAgY2xhc3M6aXMtd2lkZXNjcmVlbj17d2lkZXNjcmVlbn1cbiAgICBjbGFzczppcy1mdWxsaGQ9e2Z1bGxoZH1cbiAgICBjbGFzczppcy1tYXgtZGVza3RvcD17bWF4RGVza3RvcH1cbiAgICBjbGFzczppcy1tYXgtd2lkZXNjcmVlbj17bWF4V2lkZXNjcmVlbn1cbiAgICBjbGFzczppcy1mbHVpZD17Zmx1aWR9XG4gICAgb25jbGljaz17YnViYmxlKCdjbGljaycpfVxuICAgIG9ua2V5dXA9e2J1YmJsZSgna2V5dXAnKX1cbiAgICByb2xlPVwiYnV0dG9uXCJcbiAgICB0YWJpbmRleD1cIjBcIlxuPlxuICAgIHtAcmVuZGVyIGNoaWxkcmVuPy4oKX1cbjwvZGl2PlxuIiwiPHNjcmlwdD5cbiAgLyoqXG4gICAqIEB0eXBlZGVmIHtPYmplY3R9IFByb3BzXG4gICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbaWRdXG4gICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbY2xhc3Nlc11cbiAgICogQHByb3BlcnR5IHtpbXBvcnQoJ3N2ZWx0ZScpLlNuaXBwZXR9IFtjaGlsZHJlbl1cbiAgICovXG5cbiAgLyoqIEB0eXBlIHtQcm9wc30gKi9cbiAgbGV0IHsgaWQgPSAnJywgY2xhc3NlcyA9ICcnLCBjaGlsZHJlbiB9ID0gJHByb3BzKCk7XG48L3NjcmlwdD5cblxuPGZvb3RlciB7aWR9IGNsYXNzPVwiZm9vdGVyICB7Y2xhc3Nlc30gXCI+XG4gIHtAcmVuZGVyIGNoaWxkcmVuPy4oKX1cbjwvZm9vdGVyPlxuIiwiPHNjcmlwdD5cbiAgICBpbXBvcnQgeyBjcmVhdGVCdWJibGVyIH0gZnJvbSAnc3ZlbHRlL2xlZ2FjeSc7XG5cbiAgICBjb25zdCBidWJibGUgPSBjcmVhdGVCdWJibGVyKCk7XG4gICAgLyoqXG4gICAgICogQHR5cGVkZWYge09iamVjdH0gUHJvcHNcbiAgICAgKiBAcHJvcGVydHkge3N0cmluZ30gW2lkXVxuICAgICAqIEBwcm9wZXJ0eSB7YW55fSBzaXplXG4gICAgICogQHByb3BlcnR5IHtzdHJpbmd9IFtjbGFzc2VzXVxuICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBbdGFiaW5kZXhdXG4gICAgICogQHByb3BlcnR5IHtpbXBvcnQoJ3N2ZWx0ZScpLlNuaXBwZXR9IFtjaGlsZHJlbl1cbiAgICAgKi9cblxuICAgIC8qKiBAdHlwZSB7UHJvcHN9ICovXG4gICAgbGV0IHtcbiAgICAgICAgaWQgPSBcIlwiLFxuICAgICAgICBzaXplLFxuICAgICAgICBjbGFzc2VzID0gXCJcIixcbiAgICAgICAgdGFiaW5kZXggPSAwLFxuICAgICAgICBjaGlsZHJlblxuICAgIH0gPSAkcHJvcHMoKTtcbjwvc2NyaXB0PlxuXG48c2VjdGlvblxuICAgIHtpZH1cbiAgICBjbGFzcz1cInNlY3Rpb24ge3NpemUgPyAnaXMtJyArIHNpemUgOiAnJ30gIHtjbGFzc2VzfVwiXG4gICAgb25jbGljaz17YnViYmxlKCdjbGljaycpfVxuICAgIG9ua2V5dXA9e2J1YmJsZSgna2V5dXAnKX1cbiAgICByb2xlPVwiYnV0dG9uXCJcbiAgICB7dGFiaW5kZXh9XG4+XG4gICAge0ByZW5kZXIgY2hpbGRyZW4/LigpfVxuPC9zZWN0aW9uPlxuIiwiPHNjcmlwdD5cbiAgICAvKipcbiAgICAgKiBAdHlwZWRlZiB7T2JqZWN0fSBQcm9wc1xuICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbdGFnXVxuICAgICAqIEBwcm9wZXJ0eSB7aW1wb3J0KCdzdmVsdGUnKS5TbmlwcGV0fSBbY2hpbGRyZW5dXG4gICAgICovXG5cbiAgICAvKiogQHR5cGUge1Byb3BzfSAqL1xuICAgIGxldCB7IHRhZyA9IFwiZGl2XCIsIGNoaWxkcmVuIH0gPSAkcHJvcHMoKTtcbjwvc2NyaXB0PlxuXG48c3ZlbHRlOmVsZW1lbnQgdGhpcz17dGFnfT5cbiAgICB7I2lmIGNoaWxkcmVufXtAcmVuZGVyIGNoaWxkcmVuKCl9ezplbHNlfTwhLS0gb3B0aW9uYWwgZmFsbGJhY2sgLS0+ey9pZn1cbjwvc3ZlbHRlOmVsZW1lbnQ+XG4iLCI8c2NyaXB0PlxuICAgIGltcG9ydCB7IExPQ0FMRSB9IGZyb20gXCIuLi8uLi9sb2NhbGUvaW5kZXhcIjtcbiAgICBpbXBvcnQgVUlDb21tb24gZnJvbSBcIi4uL2NvbW1vbi5qc1wiO1xuXG4gICAgLyoqIEB0eXBlIHtpbXBvcnQoJy4vdHlwZScpLlVJSW5wdXRQcm9wc30gKi9cbiAgICBsZXQge1xuICAgICAgICB2YWx1ZSA9ICRiaW5kYWJsZSgwKSxcbiAgICAgICAgcGxhY2Vob2xkZXIgPSBcIjAuMFwiLFxuICAgICAgICBtaW4gPSAwLFxuICAgICAgICBtYXggPSAxMDAsXG4gICAgICAgIHN0ZXAgPSAxLFxuICAgICAgICBmaWVsZG5hbWUgPSBcIm51bWJlclwiLFxuICAgICAgICByZXF1aXJlZCA9IHRydWUsXG4gICAgICAgIGRpc2FibGVkID0gZmFsc2UsXG4gICAgICAgIHJlYWRvbmx5ID0gZmFsc2UsXG4gICAgICAgIHZhbGlkID0gdHJ1ZSxcbiAgICAgICAgY2xhc3M6IGNsYXNzZXMgPSBcIlwiLFxuICAgICAgICBvbmNoYW5nZSA9ICgpID0+IHRydWUsXG4gICAgICAgIC4uLm90aGVyc1xuICAgIH0gPSAkcHJvcHMoKTtcblxuICAgIGxldCBpbnZhbGlkID0gJGRlcml2ZWQoIXZhbGlkKTtcbiAgICBjb25zdCBvbmlucHV0ID0gVUlDb21tb24ub25JbnB1dChmaWVsZG5hbWUsIG9uY2hhbmdlKTtcbjwvc2NyaXB0PlxuXG57I2lmIHJlYWRvbmx5fVxuICAgIDxwPnt2YWx1ZX08L3A+XG57OmVsc2V9XG4gICAgPGlucHV0XG4gICAgICAgIGlkPVwiZm9ybS1maWVsZC1udW1iZXIte2ZpZWxkbmFtZX1cIlxuICAgICAgICBjbGFzcz1cImlucHV0IHtjbGFzc2VzfVwiXG4gICAgICAgIHR5cGU9XCJudW1iZXJcIlxuICAgICAgICBuYW1lPXtmaWVsZG5hbWV9XG4gICAgICAgIGJpbmQ6dmFsdWVcbiAgICAgICAge2ludmFsaWR9XG4gICAgICAgIHtkaXNhYmxlZH1cbiAgICAgICAge3JlcXVpcmVkfVxuICAgICAgICB7cmVhZG9ubHl9XG4gICAgICAgIHttaW59XG4gICAgICAgIHttYXh9XG4gICAgICAgIHtzdGVwfVxuICAgICAgICBwbGFjZWhvbGRlcj17JExPQ0FMRVtwbGFjZWhvbGRlcl19XG4gICAgICAgIGF1dG9jb21wbGV0ZT17ZmllbGRuYW1lfVxuICAgICAgICBvbmNoYW5nZT17b25pbnB1dH1cbiAgICAgICAge29uaW5wdXR9XG4gICAgICAgIGFyaWEtY29udHJvbHM9XCJpbnB1dC1maWVsZC1oZWxwZXIte2ZpZWxkbmFtZX1cIlxuICAgICAgICBhcmlhLWRlc2NyaWJlZGJ5PVwiaW5wdXQtZmllbGQtaGVscGVyLXtmaWVsZG5hbWV9XCJcbiAgICAgICAgey4uLm90aGVyc31cbiAgICAvPlxuey9pZn1cbiIsIjxzY3JpcHQ+XG4gICAgaW1wb3J0IG5vdENvbW1vbiBmcm9tIFwiLi4vLi4vZnJhbWUvY29tbW9uXCI7XG5cbiAgICBpbXBvcnQgeyBVSUNvbHVtbnMsIFVJQ29sdW1uIH0gZnJvbSBcIi4uL2xheW91dFwiO1xuICAgIGltcG9ydCB7IFVJQnV0dG9uIH0gZnJvbSBcIi4uL2J1dHRvblwiO1xuICAgIGltcG9ydCBVSU51bWJlciBmcm9tIFwiLi91aS5udW1iZXIuc3ZlbHRlXCI7XG4gICAgaW1wb3J0IFVJVGV4dGZpZWxkIGZyb20gXCIuLi9pbnB1dC91aS50ZXh0ZmllbGQuc3ZlbHRlXCI7XG4gICAgaW1wb3J0IHsgVUlUaXRsZSB9IGZyb20gXCIuLi92YXJpb3VzXCI7XG5cbiAgICAvKiogQHR5cGUge2ltcG9ydCgnLi90eXBlJykuVUlJbnB1dFByb3BzfSAqL1xuICAgIGxldCB7XG4gICAgICAgIGZpZWxkbmFtZSA9IFwibnVtYmVyc19saXN0XCIsXG4gICAgICAgIHZhbHVlID0gJGJpbmRhYmxlKHt9KSxcbiAgICAgICAgbGFiZWwgPSBcIm5hbWVkIG51bWJlcnMgbGlzdFwiLFxuICAgICAgICBwbGFjZWhvbGRlciA9ICRiaW5kYWJsZShcIm5ldyBpdGVtXCIpLFxuICAgICAgICByZWFkb25seSA9IGZhbHNlLFxuICAgICAgICBvbmNoYW5nZSA9ICgpID0+IHRydWUsXG4gICAgfSA9ICRwcm9wcygpO1xuXG4gICAgbGV0IGxpc3QgPSAkZGVyaXZlZChcbiAgICAgICAgT2JqZWN0LmtleXModmFsdWUpLm1hcCgobmFtZSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBpZDogbmFtZSxcbiAgICAgICAgICAgICAgICB0aXRsZTogbmFtZSxcbiAgICAgICAgICAgICAgICBudW1iZXI6IHZhbHVlW25hbWVdLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSlcbiAgICApO1xuXG4gICAgZnVuY3Rpb24gcmVtb3ZlKGlkKSB7XG4gICAgICAgIGlmIChub3RDb21tb24ub2JqSGFzKHZhbHVlLCBpZCkpIHtcbiAgICAgICAgICAgIGRlbGV0ZSB2YWx1ZVtpZF07XG4gICAgICAgICAgICB2YWx1ZSA9IHZhbHVlO1xuICAgICAgICAgICAgb25jaGFuZ2UoeyB2YWx1ZSwgZmllbGQ6IGZpZWxkbmFtZSB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFkZCgpIHtcbiAgICAgICAgY29uc3QgaWQgPSBuZXdWYWwuaWQudHJpbSgpO1xuICAgICAgICBjb25zdCBudW1iZXIgPSBwYXJzZUludChuZXdWYWwubnVtYmVyKTtcbiAgICAgICAgaWYgKGlkICYmIGlkICE9PSBcIlwiICYmICFpc05hTihudW1iZXIpICYmICFub3RDb21tb24ub2JqSGFzKHZhbHVlLCBpZCkpIHtcbiAgICAgICAgICAgIHZhbHVlW2lkXSA9IG51bWJlcjtcbiAgICAgICAgfVxuICAgICAgICBvbmNoYW5nZSh7IHZhbHVlLCBmaWVsZDogZmllbGRuYW1lIH0pO1xuICAgIH1cblxuICAgIGNvbnN0IGNyZWF0ZU5ld1ZhbCA9ICgpID0+IHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGlkOiBcIlwiLFxuICAgICAgICAgICAgbnVtYmVyOiAwLFxuICAgICAgICB9O1xuICAgIH07XG5cbiAgICBsZXQgbmV3VmFsID0gJHN0YXRlKGNyZWF0ZU5ld1ZhbCgpKTtcbjwvc2NyaXB0PlxuXG48VUlUaXRsZSB0aXRsZT17bGFiZWx9IHNpemU9ezV9IC8+XG57I2VhY2ggbGlzdCBhcyBpdGVtIChpdGVtLmlkKX1cbiAgICA8VUlDb2x1bW5zPlxuICAgICAgICA8VUlDb2x1bW4gY2xhc3Nlcz1cImlzLTZcIj5cbiAgICAgICAgICAgIHtpdGVtLnRpdGxlfVxuICAgICAgICA8L1VJQ29sdW1uPlxuICAgICAgICA8VUlDb2x1bW4gY2xhc3Nlcz1cImlzLTRcIj5cbiAgICAgICAgICAgIHtpdGVtLm51bWJlcn1cbiAgICAgICAgPC9VSUNvbHVtbj5cbiAgICAgICAgeyNpZiAhcmVhZG9ubHl9XG4gICAgICAgICAgICA8VUlDb2x1bW4gY2xhc3Nlcz1cImlzLTJcIj5cbiAgICAgICAgICAgICAgICA8VUlCdXR0b24gaWNvbj17XCJtaW51c1wifSBhY3Rpb249eygpID0+IHJlbW92ZShpdGVtLmlkKX0gLz5cbiAgICAgICAgICAgIDwvVUlDb2x1bW4+XG4gICAgICAgIHsvaWZ9XG4gICAgPC9VSUNvbHVtbnM+XG57L2VhY2h9XG57I2lmICFyZWFkb25seX1cbiAgICA8VUlDb2x1bW5zPlxuICAgICAgICA8VUlDb2x1bW4gY2xhc3Nlcz1cImlzLTZcIj5cbiAgICAgICAgICAgIDxVSVRleHRmaWVsZCBiaW5kOnZhbHVlPXtuZXdWYWwuaWR9IGJpbmQ6cGxhY2Vob2xkZXIgLz5cbiAgICAgICAgPC9VSUNvbHVtbj5cbiAgICAgICAgPFVJQ29sdW1uIGNsYXNzZXM9XCJpcy00XCI+XG4gICAgICAgICAgICA8VUlOdW1iZXIgYmluZDp2YWx1ZT17bmV3VmFsLm51bWJlcn0gLz5cbiAgICAgICAgPC9VSUNvbHVtbj5cbiAgICAgICAgPFVJQ29sdW1uIGNsYXNzZXM9XCJpcy0yXCI+XG4gICAgICAgICAgICA8VUlCdXR0b24gaWNvbj17XCJwbHVzXCJ9IGFjdGlvbj17KCkgPT4gYWRkKCl9IC8+XG4gICAgICAgIDwvVUlDb2x1bW4+XG4gICAgPC9VSUNvbHVtbnM+XG57L2lmfVxuIiwiPHNjcmlwdD5cbiAgICBpbXBvcnQgeyBMT0NBTEUgfSBmcm9tIFwiLi4vLi4vbG9jYWxlXCI7XG4gICAgaW1wb3J0IFVJQ29tbW9uIGZyb20gXCIuLi9jb21tb24uanNcIjtcblxuICAgIC8qKiBAdHlwZSB7aW1wb3J0KCcuL3R5cGUnKS5VSUlucHV0UHJvcHN9ICovXG4gICAgbGV0IHtcbiAgICAgICAgaW5wdXRTdGFydGVkID0gJGJpbmRhYmxlKGZhbHNlKSxcbiAgICAgICAgdmFsdWUgPSAkYmluZGFibGUoXCJcIiksXG4gICAgICAgIHBsYWNlaG9sZGVyID0gXCJcIixcbiAgICAgICAgZmllbGRuYW1lID0gXCJwYXNzd29yZFwiLFxuICAgICAgICByZXF1aXJlZCA9IHRydWUsXG4gICAgICAgIHJlYWRvbmx5ID0gZmFsc2UsXG4gICAgICAgIGRpc2FibGVkID0gZmFsc2UsXG4gICAgICAgIHZhbGlkID0gdHJ1ZSxcbiAgICAgICAgY2xhc3M6IGNsYXNzZXMgPSBcIlwiLFxuICAgICAgICBvbmNoYW5nZSA9ICgpID0+IHRydWUsXG4gICAgICAgIC4uLm90aGVyc1xuICAgIH0gPSAkcHJvcHMoKTtcblxuICAgIGxldCBpbnZhbGlkID0gJGRlcml2ZWQoIXZhbGlkKTtcbiAgICBjb25zdCBvbmlucHV0ID0gVUlDb21tb24ub25JbnB1dChmaWVsZG5hbWUsIG9uY2hhbmdlKTtcbjwvc2NyaXB0PlxuXG48aW5wdXRcbiAgICBpZD1cImZvcm0tZmllbGQtcGFzc3dvcmQte2ZpZWxkbmFtZX1cIlxuICAgIGNsYXNzPVwiaW5wdXQge2NsYXNzZXN9XCJcbiAgICB0eXBlPVwicGFzc3dvcmRcIlxuICAgIG5hbWU9e2ZpZWxkbmFtZX1cbiAgICBiaW5kOnZhbHVlXG4gICAge2ludmFsaWR9XG4gICAge3JlcXVpcmVkfVxuICAgIHtyZWFkb25seX1cbiAgICB7ZGlzYWJsZWR9XG4gICAgcGxhY2Vob2xkZXI9eyRMT0NBTEVbcGxhY2Vob2xkZXJdfVxuICAgIGF1dG9jb21wbGV0ZT17ZmllbGRuYW1lfVxuICAgIG9uY2hhbmdlPXtvbmlucHV0fVxuICAgIHtvbmlucHV0fVxuICAgIGFyaWEtY29udHJvbHM9XCJpbnB1dC1maWVsZC1oZWxwZXIte2ZpZWxkbmFtZX1cIlxuICAgIGFyaWEtZGVzY3JpYmVkYnk9XCJpbnB1dC1maWVsZC1oZWxwZXIte2ZpZWxkbmFtZX1cIlxuICAgIHsuLi5vdGhlcnN9XG4vPlxuIiwiPHNjcmlwdD5cbiAgICBpbXBvcnQgeyBvbk1vdW50IH0gZnJvbSBcInN2ZWx0ZVwiO1xuICAgIGltcG9ydCBVSUxpc3QgZnJvbSBcIi4uL2xpc3QvdWkubGlzdC5zdmVsdGVcIjtcbiAgICBpbXBvcnQgVUlUaXRsZSBmcm9tIFwiLi4vdmFyaW91cy91aS50aXRsZS5zdmVsdGVcIjtcbiAgICBpbXBvcnQgVUlJbWFnZSBmcm9tIFwiLi4vaW1hZ2UvdWkuaW1hZ2Uuc3ZlbHRlXCI7XG4gICAgaW1wb3J0IFVJQnV0dG9ucyBmcm9tIFwiLi4vYnV0dG9uL3VpLmJ1dHRvbnMuc3ZlbHRlXCI7XG5cbiAgICAvL1xuXG4gICAgLyoqXG4gICAgICogQHR5cGVkZWYge09iamVjdH0gUHJvcHNcbiAgICAgKiBAcHJvcGVydHkge3N0cmluZ30gW2ZpZWxkbmFtZV1cbiAgICAgKiBAcHJvcGVydHkge2FueX0gW3ZhcmlhbnRzXSAtIFtcbmFycmF5IG9mIGdyb3Vwc1xue1xuaWQ6bnVtYmVyLFxudGl0bGU6c3RyaW5nfG9iamVjdCxcbmltYWdlOnN0cmluZ3xvYmplY3QsXG52YXJpYW50cyA9IFtcbmFycmF5IG9mIHZhbHVlcyB2YXJpYW50cyBpbiBncm91cFxue1xuaWQ6bnVtYmVyLFxudGl0bGU6c3RyaW5nfG9iamVjdCxcbmRlc2NyaXB0aW9uOnN0cmluZ3xvYmplY3QsXG5pbWFnZTpzdHJpbmd8b2JqZWN0LFxudmFsdWU6b2JqZWN0XG59XVxufVxuXVxuICAgICAqIEBwcm9wZXJ0eSB7YW55fSB2YWx1ZSAtIG11bHRpcGxlICYmIG11bHRpcGxlIGluIGdyb3VwXG57XG5hcnJheSBvZiBhcnJheXMgb2Ygc2VsZWN0ZWQgdmFsdWVzIGluIGdyb3VwXG5pZiBubyBzZWxlY3Rpb24gZ3JvdXAgc2hvdWxkIGJlIGVtcHR5IGFycmF5XG5bZ3JvdXBJZF06IFsuLi52YXJpYW50c0lkXVxufVxubXVsdGlwbGUgJiYgb25lIGluIGdyb3VwXG57XG5bZ3JvdXBJZF06IHZhcmlhbnRJZFxufVxub25seSBvbmUgKG5vdCBtdWx0aXBsZSAmJiBvbmUgaW4gZ3JvdXApXG57XG5ncm91cDogZ3JvdXBJZFxudmFsdWU6IHZhcmlhbnRJZFxufVxuICAgICAqIEBwcm9wZXJ0eSB7YW55fSB0aXRsZVxuICAgICAqIEBwcm9wZXJ0eSB7YW55fSBpbWFnZVxuICAgICAqIEBwcm9wZXJ0eSB7YW55fSBbYnV0dG9uUHJvcHNdXG4gICAgICogQHByb3BlcnR5IHthbnl9IFt0aXRsZUNvbXBvbmVudF1cbiAgICAgKiBAcHJvcGVydHkge2FueX0gW3RpdGxlQ29tcG9uZW50UHJvcHNdXG4gICAgICogQHByb3BlcnR5IHthbnl9IFtpbWFnZUNvbXBvbmVudF1cbiAgICAgKiBAcHJvcGVydHkge2FueX0gW2ltYWdlQ29tcG9uZW50UHJvcHNdXG4gICAgICogQHByb3BlcnR5IHthbnl9IFtkZXNjcmlwdGlvbkNvbXBvbmVudF1cbiAgICAgKiBAcHJvcGVydHkge2FueX0gW2Rlc2NyaXB0aW9uQ29tcG9uZW50UHJvcHNdXG4gICAgICogQHByb3BlcnR5IHthbnl9IFtsaXN0Q29tcG9uZW50XVxuICAgICAqIEBwcm9wZXJ0eSB7YW55fSBbbGlzdENvbXBvbmVudFByb3BzXVxuICAgICAqIEBwcm9wZXJ0eSB7YW55fSBbZ2V0VUlJdGVtXVxuICAgICAqIEBwcm9wZXJ0eSB7YW55fSBbZ2V0RGVmYXVsdEl0ZW1TdWJsaW1lXVxuICAgICAqIEBwcm9wZXJ0eSB7YW55fSBbdWlPbl1cbiAgICAgKiBAcHJvcGVydHkge2FueX0gW3VpT2ZmXVxuICAgICAqL1xuXG4gICAgLyoqIEB0eXBlIHtQcm9wc30gKi9cbiAgICBsZXQge1xuICAgICAgICBmaWVsZG5hbWUgPSBcInJhZGlvLWJ1dHRvbnNcIixcbiAgICAgICAgdmFyaWFudHMgPSBbXSxcbiAgICAgICAgdmFsdWUgPSAkYmluZGFibGUoKSxcbiAgICAgICAgdGl0bGUsXG4gICAgICAgIGltYWdlLFxuICAgICAgICBidXR0b25Qcm9wcyA9IHt9LFxuICAgICAgICB0aXRsZUNvbXBvbmVudCA9IFVJVGl0bGUsXG4gICAgICAgIHRpdGxlQ29tcG9uZW50UHJvcHMgPSB7IHNpemU6IDUgfSxcbiAgICAgICAgaW1hZ2VDb21wb25lbnQgPSBVSUltYWdlLFxuICAgICAgICBpbWFnZUNvbXBvbmVudFByb3BzID0geyBjb3ZlcmVkOiB0cnVlIH0sXG4gICAgICAgIGRlc2NyaXB0aW9uQ29tcG9uZW50ID0gVUlCdXR0b25zLFxuICAgICAgICBkZXNjcmlwdGlvbkNvbXBvbmVudFByb3BzID0ge30sXG4gICAgICAgIGxpc3RDb21wb25lbnQgPSBVSUxpc3QsXG4gICAgICAgIGxpc3RDb21wb25lbnRQcm9wcyA9IHt9LFxuICAgICAgICBnZXRVSUl0ZW0gPSAodmFsdWVJZCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHZhcmlhbnRzQnV0dG9ucy5maW5kKChidG5WYWwpID0+IGJ0blZhbC52YWx1ZSA9PT0gdmFsdWVJZCk7XG4gICAgICAgIH0sXG4gICAgICAgIGdldERlZmF1bHRJdGVtU3VibGltZSA9ICgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB2YXJpYW50c1swXS52YWx1ZTtcbiAgICAgICAgfSxcbiAgICAgICAgdWlPbiA9IChpdGVtKSA9PiB7XG4gICAgICAgICAgICBpdGVtLmNvbG9yID0gXCJzdWNjZXNzXCI7XG4gICAgICAgICAgICBpdGVtLm91dGxpbmVkID0gZmFsc2U7XG4gICAgICAgIH0sXG4gICAgICAgIHVpT2ZmID0gKGl0ZW0pID0+IHtcbiAgICAgICAgICAgIGl0ZW0uY29sb3IgPSBmYWxzZTtcbiAgICAgICAgICAgIGl0ZW0ub3V0bGluZWQgPSB0cnVlO1xuICAgICAgICB9LFxuICAgICAgICBvbmNoYW5nZSA9ICgpID0+IHRydWUsXG4gICAgfSA9ICRwcm9wcygpO1xuXG4gICAgb25Nb3VudCgoKSA9PiB7XG4gICAgICAgIGluaXRWYXJpYW50c0J1dHRvbigpO1xuICAgICAgICBzZWxlY3REZWZhdWx0KCk7XG4gICAgfSk7XG5cbiAgICBsZXQgdmFyaWFudHNCdXR0b25zID0gW10sXG4gICAgICAgIGxpc3RJdGVtcyA9ICRzdGF0ZShbXSk7XG5cbiAgICBmdW5jdGlvbiBpbml0VmFyaWFudHNCdXR0b24oKSB7XG4gICAgICAgIHZhcmlhbnRzQnV0dG9ucyA9IHZhcmlhbnRzLm1hcCgodmFyaWFudCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHsgLi4uYnV0dG9uUHJvcHMsIC4uLnZhcmlhbnQgfTtcbiAgICAgICAgfSk7XG4gICAgICAgIGxpc3RJdGVtcyA9IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpZDogMCxcbiAgICAgICAgICAgICAgICB0aXRsZSxcbiAgICAgICAgICAgICAgICBpbWFnZSxcbiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogeyB2YWx1ZXM6IHZhcmlhbnRzQnV0dG9ucyB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXTtcbiAgICB9XG5cbiAgICAvL1xuICAgIGZ1bmN0aW9uIHRvZ2dsZShzZWxlY3RlZFZhbHVlKSB7XG4gICAgICAgIGxldCB1aSA9IHtcbiAgICAgICAgICAgIG9uOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBvZmY6IHVuZGVmaW5lZCxcbiAgICAgICAgfTtcbiAgICAgICAgLy9cbiAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICB1aS5vZmYgPSB2YWx1ZTtcbiAgICAgICAgICAgIHVpLm9uID0gc2VsZWN0ZWRWYWx1ZTtcbiAgICAgICAgfVxuICAgICAgICB2YWx1ZSA9IHNlbGVjdGVkVmFsdWU7XG4gICAgICAgIHVwZGF0ZVVJKHVpKTtcbiAgICAgICAgLy9cbiAgICAgICAgb25jaGFuZ2Uoe1xuICAgICAgICAgICAgZmllbGQ6IGZpZWxkbmFtZSxcbiAgICAgICAgICAgIHZhbHVlLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLy9cbiAgICBmdW5jdGlvbiB1cGRhdGVVSShjaGFuZ2VzKSB7XG4gICAgICAgIGlmIChjaGFuZ2VzLm9mZikge1xuICAgICAgICAgICAgdWlPZmYoZ2V0VUlJdGVtKGNoYW5nZXMub2ZmKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNoYW5nZXMub24pIHtcbiAgICAgICAgICAgIHVpT24oZ2V0VUlJdGVtKGNoYW5nZXMub24pKTtcbiAgICAgICAgfVxuICAgICAgICB2YXJpYW50c0J1dHRvbnMgPSB2YXJpYW50c0J1dHRvbnM7XG4gICAgICAgIGxpc3RJdGVtcyA9IGxpc3RJdGVtcztcbiAgICB9XG4gICAgLy9cbiAgICBmdW5jdGlvbiBzZWxlY3REZWZhdWx0KCkge1xuICAgICAgICBpZiAodmFyaWFudHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgICAgIHVwZGF0ZVVJKHsgb246IHZhbHVlIH0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCBkZWZWYWx1ZSA9IGdldERlZmF1bHRJdGVtU3VibGltZSgpO1xuICAgICAgICAgICAgICAgIHRvZ2dsZShkZWZWYWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBTdmVsdGVDb21wb25lbnQgPSAkZGVyaXZlZChsaXN0Q29tcG9uZW50KTtcbjwvc2NyaXB0PlxuXG48U3ZlbHRlQ29tcG9uZW50XG4gICAgey4uLmxpc3RDb21wb25lbnRQcm9wc31cbiAgICBiaW5kOml0ZW1zPXtsaXN0SXRlbXN9XG4gICAge3RpdGxlQ29tcG9uZW50fVxuICAgIHt0aXRsZUNvbXBvbmVudFByb3BzfVxuICAgIHtkZXNjcmlwdGlvbkNvbXBvbmVudH1cbiAgICBkZXNjcmlwdGlvbkNvbXBvbmVudFByb3BzPXt7XG4gICAgICAgIC4uLmRlc2NyaXB0aW9uQ29tcG9uZW50UHJvcHMsXG4gICAgICAgIGFjdGlvbihldmVudCwgdmFsdWUpIHtcbiAgICAgICAgICAgIHRvZ2dsZSh2YWx1ZSk7XG4gICAgICAgIH0sXG4gICAgfX1cbiAgICB7aW1hZ2VDb21wb25lbnR9XG4gICAge2ltYWdlQ29tcG9uZW50UHJvcHN9XG4vPlxuIiwiPHNjcmlwdD5cbiAgICBpbXBvcnQgeyBMT0NBTEUgfSBmcm9tIFwiLi4vLi4vbG9jYWxlL2luZGV4XCI7XG4gICAgaW1wb3J0IFVJQ29tbW9uIGZyb20gXCIuLi9jb21tb24uanNcIjtcblxuICAgIC8qKiBAdHlwZSB7aW1wb3J0KCcuL3R5cGUnKS5VSUlucHV0UHJvcHN9ICovXG4gICAgbGV0IHtcbiAgICAgICAgdmFsdWUgPSAkYmluZGFibGUoMTApLFxuICAgICAgICBtaW4gPSAwLFxuICAgICAgICBtYXggPSAxMDAsXG4gICAgICAgIHN0ZXAgPSAxLFxuICAgICAgICB0aWNrbWFya3MgPSBmYWxzZSxcbiAgICAgICAgcGxhY2Vob2xkZXIgPSBcIlwiLFxuICAgICAgICBmaWVsZG5hbWUgPSBcInJhbmdlXCIsXG4gICAgICAgIHJlcXVpcmVkID0gdHJ1ZSxcbiAgICAgICAgZGlzYWJsZWQgPSBmYWxzZSxcbiAgICAgICAgcmVhZG9ubHkgPSBmYWxzZSxcbiAgICAgICAgdmFsaWQgPSB0cnVlLFxuICAgICAgICBjbGFzczogY2xhc3NlcyA9IFwiXCIsXG4gICAgICAgIG9uY2hhbmdlID0gKCkgPT4gdHJ1ZSxcbiAgICAgICAgLi4ub3RoZXJzXG4gICAgfSA9ICRwcm9wcygpO1xuXG4gICAgbGV0IGludmFsaWQgPSAkZGVyaXZlZCghdmFsaWQpO1xuICAgIGNvbnN0IG9uaW5wdXQgPSBVSUNvbW1vbi5vbklucHV0KGZpZWxkbmFtZSwgb25jaGFuZ2UpO1xuPC9zY3JpcHQ+XG5cbnsjaWYgcmVhZG9ubHl9XG4gICAgPHA+e3ZhbHVlfTwvcD5cbns6ZWxzZX1cbiAgICA8aW5wdXRcbiAgICAgICAgaWQ9XCJmb3JtLWZpZWxkLXJhbmdlLXtmaWVsZG5hbWV9XCJcbiAgICAgICAgY2xhc3M9XCJpbnB1dCBiaWctbnVtYmVyIHNsaWRlciBoYXMtb3V0cHV0IGlzLWZ1bGx3aWR0aCBpcy1zdWNjZXNzIHtjbGFzc2VzfVwiXG4gICAgICAgIHR5cGU9XCJyYW5nZVwiXG4gICAgICAgIG5hbWU9e2ZpZWxkbmFtZX1cbiAgICAgICAge21pbn1cbiAgICAgICAge21heH1cbiAgICAgICAge3N0ZXB9XG4gICAgICAgIGxpc3Q9XCJmb3JtLWZpZWxkLXJhbmdlLXtmaWVsZG5hbWV9LXRpY2ttYXJrc1wiXG4gICAgICAgIHtpbnZhbGlkfVxuICAgICAgICB7ZGlzYWJsZWR9XG4gICAgICAgIHtyZXF1aXJlZH1cbiAgICAgICAge3JlYWRvbmx5fVxuICAgICAgICBwbGFjZWhvbGRlcj17JExPQ0FMRVtwbGFjZWhvbGRlcl19XG4gICAgICAgIGJpbmQ6dmFsdWVcbiAgICAgICAgYXV0b2NvbXBsZXRlPXtmaWVsZG5hbWV9XG4gICAgICAgIGFyaWEtY29udHJvbHM9XCJpbnB1dC1maWVsZC1oZWxwZXIte2ZpZWxkbmFtZX1cIlxuICAgICAgICBhcmlhLWRlc2NyaWJlZGJ5PVwiaW5wdXQtZmllbGQtaGVscGVyLXtmaWVsZG5hbWV9XCJcbiAgICAgICAgb25jaGFuZ2U9e29uaW5wdXR9XG4gICAgICAgIHtvbmlucHV0fVxuICAgICAgICB7Li4ub3RoZXJzfVxuICAgIC8+XG4gICAgPG91dHB1dCBmb3I9XCJmb3JtLWZpZWxkLXJhbmdlLXtmaWVsZG5hbWV9XCI+e3ZhbHVlfTwvb3V0cHV0PlxuICAgIHsjaWYgQXJyYXkuaXNBcnJheSh0aWNrbWFya3MpICYmIHRpY2ttYXJrcy5sZW5ndGh9XG4gICAgICAgIDxkYXRhbGlzdCBpZD1cImZvcm0tZmllbGQtcmFuZ2Ute2ZpZWxkbmFtZX0tdGlja21hcmtzXCI+XG4gICAgICAgICAgICB7I2VhY2ggdGlja21hcmtzIGFzIHRpY2ttYXJrfVxuICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9e3RpY2ttYXJrLnZhbHVlfSBsYWJlbD17dGlja21hcmsubGFiZWx9Pjwvb3B0aW9uPlxuICAgICAgICAgICAgey9lYWNofVxuICAgICAgICA8L2RhdGFsaXN0PlxuICAgIHsvaWZ9XG57L2lmfVxuIiwiPHNjcmlwdD5cbiAgICBpbXBvcnQgbm90UGF0aCBmcm9tIFwibm90LXBhdGhcIjtcblxuICAgIGltcG9ydCBVSVNlbGVjdCBmcm9tIFwiLi91aS5zZWxlY3Quc3ZlbHRlXCI7XG4gICAgaW1wb3J0IG5vdENvbW1vbiBmcm9tIFwiLi4vLi4vZnJhbWUvY29tbW9uXCI7XG4gICAgaW1wb3J0IHsgREVGQVVMVF9TVEFUVVNfU1VDQ0VTUyB9IGZyb20gXCIuLi8uLi9mcmFtZS9jb25zdFwiO1xuXG4gICAgaW1wb3J0IHsgb25Nb3VudCB9IGZyb20gXCJzdmVsdGVcIjtcblxuICAgIC8qKlxuICAgICAqIEB0eXBlZGVmIHtPYmplY3R9IFByb3BzXG4gICAgICogQHByb3BlcnR5IHtib29sZWFufSBbaW5wdXRTdGFydGVkXVxuICAgICAqIEBwcm9wZXJ0eSB7YW55fSB2YWx1ZVxuICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbcGxhY2Vob2xkZXJdXG4gICAgICogQHByb3BlcnR5IHtzdHJpbmd9IFtlbXB0eVZhbHVlVGl0bGVdXG4gICAgICogQHByb3BlcnR5IHtzdHJpbmd9IFtmaWVsZG5hbWVdXG4gICAgICogQHByb3BlcnR5IHtzdHJpbmd9IFttb2RlbE5hbWVdXG4gICAgICogQHByb3BlcnR5IHtzdHJpbmd9IFthY3Rpb25OYW1lXVxuICAgICAqIEBwcm9wZXJ0eSB7YW55fSBbYWN0aW9uRmlsdGVyXVxuICAgICAqIEBwcm9wZXJ0eSB7YW55fSBbYWN0aW9uU29ydGVyXVxuICAgICAqIEBwcm9wZXJ0eSB7YW55fSBbYWN0aW9uUGFnZXJdXG4gICAgICogQHByb3BlcnR5IHthbnl9IFthY3Rpb25TZWFyY2hdXG4gICAgICogQHByb3BlcnR5IHtzdHJpbmd9IFtvcHRpb25JZF1cbiAgICAgKiBAcHJvcGVydHkge3N0cmluZ30gW29wdGlvblRpdGxlXVxuICAgICAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW2ljb25dXG4gICAgICogQHByb3BlcnR5IHtib29sZWFufSBbcmVxdWlyZWRdXG4gICAgICogQHByb3BlcnR5IHtib29sZWFufSBbcmVhZG9ubHldXG4gICAgICogQHByb3BlcnR5IHtib29sZWFufSBbbXVsdGlwbGVdXG4gICAgICogQHByb3BlcnR5IHtudW1iZXJ9IFtzaXplXVxuICAgICAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW3ZhbGlkXVxuICAgICAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW3ZhbGlkYXRlZF1cbiAgICAgKiBAcHJvcGVydHkge2Jvb2xlYW59IFtlcnJvcnNdXG4gICAgICogQHByb3BlcnR5IHtib29sZWFufSBbZm9ybUVycm9yc11cbiAgICAgKiBAcHJvcGVydHkge2Jvb2xlYW59IFtmb3JtTGV2ZWxFcnJvcl1cbiAgICAgKiBAcHJvcGVydHkge2Jvb2xlYW59IFtyZXR1cm5WYXJpYW50XVxuICAgICAqL1xuXG4gICAgLyoqIEB0eXBlIHtQcm9wc30gKi9cbiAgICBsZXQge1xuICAgICAgICB2YWx1ZSxcbiAgICAgICAgcGxhY2Vob2xkZXIgPSBcIlwiLFxuICAgICAgICBlbXB0eVZhbHVlVGl0bGUgPSBcIlwiLFxuICAgICAgICBmaWVsZG5hbWUgPSBcInNlbGVjdEZyb21Nb2RlbFwiLFxuICAgICAgICBtb2RlbE5hbWUgPSBcIlwiLFxuICAgICAgICBhY3Rpb25OYW1lID0gXCJcIixcbiAgICAgICAgYWN0aW9uRmlsdGVyID0ge30sXG4gICAgICAgIGFjdGlvblNvcnRlciA9IHt9LFxuICAgICAgICBhY3Rpb25QYWdlciA9IHt9LFxuICAgICAgICBhY3Rpb25TZWFyY2ggPSB1bmRlZmluZWQsXG4gICAgICAgIG9wdGlvbklkID0gXCI6X2lkXCIsXG4gICAgICAgIG9wdGlvblRpdGxlID0gXCI6dGl0bGVcIixcbiAgICAgICAgcmVxdWlyZWQgPSB0cnVlLFxuICAgICAgICByZWFkb25seSA9IGZhbHNlLFxuICAgICAgICBtdWx0aXBsZSA9IGZhbHNlLFxuICAgICAgICBzaXplID0gOCxcbiAgICAgICAgdmFsaWQgPSB0cnVlLFxuXG4gICAgICAgIHJldHVyblZhcmlhbnQgPSBmYWxzZSxcbiAgICAgICAgY2xhc3M6IGNsYXNzZXMgPSBcIlwiLFxuICAgICAgICBvbmNoYW5nZSA9ICgpID0+IHRydWUsXG4gICAgICAgIG9uZXJyb3IgPSAoKSA9PiB7fSxcbiAgICAgICAgLi4ub3RoZXJzXG4gICAgfSA9ICRwcm9wcygpO1xuXG4gICAgZnVuY3Rpb24gYXJndW1lbnRzU2V0UHJvdmlkZWQoKSB7XG4gICAgICAgIHJldHVybiBtb2RlbE5hbWUgJiYgYWN0aW9uTmFtZSAmJiBhY3Rpb25GaWx0ZXI7XG4gICAgfVxuXG4gICAgbGV0IGxvYWRlZCA9IGZhbHNlO1xuICAgIGxldCB2YXJpYW50cyA9ICRzdGF0ZShbXSk7XG4gICAgbGV0IGRpc2FibGVkID0gJGRlcml2ZWQoIWxvYWRlZCk7XG5cbiAgICBvbk1vdW50KGFzeW5jICgpID0+IHtcbiAgICAgICAgaWYgKGFyZ3VtZW50c1NldFByb3ZpZGVkKCkpIHtcbiAgICAgICAgICAgIGNvbnN0IG5vdEFwcCA9IG5vdENvbW1vbi5nZXRBcHAoKTtcbiAgICAgICAgICAgIGNvbnN0IE1vZGVsID0gbm90QXBwXG4gICAgICAgICAgICAgICAgLmdldE1vZGVsKG1vZGVsTmFtZSlcbiAgICAgICAgICAgICAgICAuc2V0RmlsdGVyKGFjdGlvbkZpbHRlcilcbiAgICAgICAgICAgICAgICAuc2V0U29ydGVyKGFjdGlvblNvcnRlcilcbiAgICAgICAgICAgICAgICAuc2V0UGFnZXIoYWN0aW9uUGFnZXIpXG4gICAgICAgICAgICAgICAgLnNldFNlYXJjaChhY3Rpb25TZWFyY2gpO1xuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBNb2RlbFtgJGAgKyBhY3Rpb25OYW1lXSgpO1xuICAgICAgICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1cyA9PT0gREVGQVVMVF9TVEFUVVNfU1VDQ0VTUykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IHJlc3BvbnNlLnJlc3VsdDtcbiAgICAgICAgICAgICAgICB2YXJpYW50cyA9IHJlc3VsdC5tYXAoKGl0ZW0pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBub3RQYXRoLmdldChvcHRpb25JZCwgaXRlbSksXG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogbm90UGF0aC5nZXQob3B0aW9uVGl0bGUsIGl0ZW0pLFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBvbmVycm9yKHJlc3BvbnNlLmVycm9ycyB8fCByZXNwb25zZS5tZXNzYWdlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgZnVuY3Rpb24gb25DaGFuZ2UoZGF0YSkge1xuICAgICAgICBpZiAocmV0dXJuVmFyaWFudCkge1xuICAgICAgICAgICAgb25jaGFuZ2Uoe1xuICAgICAgICAgICAgICAgIC4uLmRhdGEsXG4gICAgICAgICAgICAgICAgdmFsdWU6IHZhcmlhbnRzLmZpbmQoKGl0bSkgPT4gaXRtLmlkID09PSBkYXRhLnZhbHVlKSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgb25jaGFuZ2UoZGF0YSk7XG4gICAgICAgIH1cbiAgICB9XG48L3NjcmlwdD5cblxuPFVJU2VsZWN0XG4gICAge3ZhbHVlfVxuICAgIGJpbmQ6dmFyaWFudHNcbiAgICBjbGFzcz17Y2xhc3Nlc31cbiAgICB7cGxhY2Vob2xkZXJ9XG4gICAge2VtcHR5VmFsdWVUaXRsZX1cbiAgICB7ZmllbGRuYW1lfVxuICAgIHtyZXF1aXJlZH1cbiAgICB7cmVhZG9ubHl9XG4gICAge2Rpc2FibGVkfVxuICAgIHttdWx0aXBsZX1cbiAgICB7c2l6ZX1cbiAgICB7dmFsaWR9XG4gICAgb25jaGFuZ2U9e29uQ2hhbmdlfVxuICAgIHsuLi5vdGhlcnN9XG4vPlxuIiwiPHNjcmlwdD5cbiAgICBpbXBvcnQgXCJidWxtYS1zd2l0Y2hcIjtcbiAgICBpbXBvcnQgeyBMT0NBTEUgfSBmcm9tIFwiLi4vLi4vbG9jYWxlL2luZGV4XCI7XG4gICAgaW1wb3J0IFVJQ29tbW9uIGZyb20gXCIuLi9jb21tb24uanNcIjtcbiAgICBpbXBvcnQgVUlCb29sZWFuIGZyb20gXCIuLi92YXJpb3VzL3VpLmJvb2xlYW4uc3ZlbHRlXCI7XG5cbiAgICAvKiogQHR5cGUge2ltcG9ydCgnLi90eXBlJykuVUlJbnB1dFByb3BzfSAqL1xuICAgIGxldCB7XG4gICAgICAgIHZhbHVlID0gJGJpbmRhYmxlKGZhbHNlKSxcbiAgICAgICAgbGFiZWwgPSBcIlwiLFxuICAgICAgICBoaWRlTGFiZWwgPSBmYWxzZSxcbiAgICAgICAgcGxhY2Vob2xkZXIgPSBcIlwiLFxuICAgICAgICBmaWVsZG5hbWUgPSBcInRleHRmaWVsZFwiLFxuICAgICAgICByZXF1aXJlZCA9IHRydWUsXG4gICAgICAgIHJlYWRvbmx5ID0gZmFsc2UsXG4gICAgICAgIGRpc2FibGVkID0gZmFsc2UsXG4gICAgICAgIHZhbGlkID0gdHJ1ZSxcbiAgICAgICAgY2xhc3M6IGNsYXNzZXMgPSBcIlwiLFxuICAgICAgICBvbmNoYW5nZSA9ICgpID0+IHRydWUsXG4gICAgICAgIC4uLm90aGVyc1xuICAgIH0gPSAkcHJvcHMoKTtcblxuICAgIGxldCBpbnZhbGlkID0gJGRlcml2ZWQoIXZhbGlkKTtcbiAgICBjb25zdCBvbmlucHV0ID0gVUlDb21tb24ub25JbnB1dChmaWVsZG5hbWUsIG9uY2hhbmdlKTtcbjwvc2NyaXB0PlxuXG57I2lmIHJlYWRvbmx5fVxuICAgIDxVSUJvb2xlYW4gTENfVFJVRT17bGFiZWx9IExDX0ZBTFNFPXtsYWJlbH0ge3ZhbHVlfSAvPlxuezplbHNlfVxuICAgIHsjaWYgIWxhYmVsICYmICFoaWRlTGFiZWx9XG4gICAgICAgIDxVSUJvb2xlYW4gdmFsdWU9e2ZhbHNlfSAvPlxuICAgIHsvaWZ9XG4gICAgPGlucHV0XG4gICAgICAgIGlkPVwiZm9ybS1maWVsZC1zd2l0Y2gte2ZpZWxkbmFtZX1cIlxuICAgICAgICBjbGFzcz1cInN3aXRjaCB7Y2xhc3Nlc31cIlxuICAgICAgICB0eXBlPVwiY2hlY2tib3hcIlxuICAgICAgICBuYW1lPXtmaWVsZG5hbWV9XG4gICAgICAgIGJpbmQ6Y2hlY2tlZD17dmFsdWV9XG4gICAgICAgIHBsYWNlaG9sZGVyPXskTE9DQUxFW3BsYWNlaG9sZGVyXX1cbiAgICAgICAge2Rpc2FibGVkfVxuICAgICAgICB7cmVxdWlyZWR9XG4gICAgICAgIHtyZWFkb25seX1cbiAgICAgICAge2ludmFsaWR9XG4gICAgICAgIG9uYmx1cj17b25pbnB1dH1cbiAgICAgICAge29uaW5wdXR9XG4gICAgICAgIGFyaWEtY29udHJvbHM9XCJpbnB1dC1maWVsZC1oZWxwZXIte2ZpZWxkbmFtZX1cIlxuICAgICAgICBhcmlhLWRlc2NyaWJlZGJ5PVwiaW5wdXQtZmllbGQtaGVscGVyLXtmaWVsZG5hbWV9XCJcbiAgICAgICAgey4uLm90aGVyc31cbiAgICAvPlxuICAgIDxsYWJlbCBjbGFzcz1cImxhYmVsXCIgZm9yPVwiZm9ybS1maWVsZC1zd2l0Y2gte2ZpZWxkbmFtZX1cIj5cbiAgICAgICAgeyNpZiAhaGlkZUxhYmVsfVxuICAgICAgICAgICAgeyNpZiBsYWJlbH1cbiAgICAgICAgICAgICAgICB7JExPQ0FMRVtsYWJlbF19XG4gICAgICAgICAgICB7OmVsc2V9XG4gICAgICAgICAgICAgICAgPFVJQm9vbGVhbiB2YWx1ZT17ZmFsc2V9IC8+XG4gICAgICAgICAgICB7L2lmfVxuICAgICAgICB7L2lmfVxuICAgIDwvbGFiZWw+XG57L2lmfVxuIiwiPHNjcmlwdD5cbiAgICBpbXBvcnQgVUlMYWJlbCBmcm9tIFwiLi91aS5sYWJlbC5zdmVsdGVcIjtcbiAgICBpbXBvcnQgXCJidWxtYS1zd2l0Y2hcIjtcblxuICAgIC8qKiBAdHlwZSB7aW1wb3J0KCcuL3R5cGUnKS5VSUlucHV0UHJvcHN9ICovXG4gICAgbGV0IHtcbiAgICAgICAgdmFsdWUgPSAkYmluZGFibGUoW10pLFxuICAgICAgICB2YXJpYW50cyA9IFtdLFxuICAgICAgICBmaWVsZG5hbWUgPSBcInRleHRmaWVsZFwiLFxuICAgICAgICByZXF1aXJlZCA9IHRydWUsXG4gICAgICAgIHJlYWRvbmx5ID0gZmFsc2UsXG4gICAgICAgIGRpc2FibGVkID0gZmFsc2UsXG4gICAgICAgIHZhbGlkID0gdHJ1ZSxcbiAgICAgICAgY2xhc3M6IGNsYXNzZXMgPSBcIiBpcy1yb3VuZGVkIGlzLXN1Y2Nlc3MgXCIsXG4gICAgICAgIG9uY2hhbmdlID0gKCkgPT4gdHJ1ZSxcbiAgICAgICAgLi4ub3RoZXJzXG4gICAgfSA9ICRwcm9wcygpO1xuXG4gICAgZnVuY3Rpb24gYWRkSWQodmFySWQpIHtcbiAgICAgICAgaWYgKCF2YWx1ZS5pbmNsdWRlcyh2YXJJZCkpIHtcbiAgICAgICAgICAgIHZhbHVlLnB1c2godmFySWQpO1xuICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlbUlkKHZhcklkKSB7XG4gICAgICAgIGlmICh2YWx1ZS5pbmNsdWRlcyh2YXJJZCkpIHtcbiAgICAgICAgICAgIHZhbHVlLnNwbGljZSh2YWx1ZS5pbmRleE9mKHZhcklkKSwgMSk7XG4gICAgICAgICAgICB2YWx1ZSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gb25DaGFuZ2UoZXYpIHtcbiAgICAgICAgY29uc3QgdmFySWQgPSBldi50YXJnZXQuaWQuc3BsaXQoXCItdmFyaWFudC1cIikuYXQoLTEpO1xuICAgICAgICBldi50YXJnZXQuY2hlY2tlZCA/IGFkZElkKHZhcklkKSA6IHJlbUlkKHZhcklkKTtcbiAgICAgICAgbGV0IGRhdGEgPSB7XG4gICAgICAgICAgICBmaWVsZDogZmllbGRuYW1lLFxuICAgICAgICAgICAgdmFsdWUsXG4gICAgICAgIH07XG4gICAgICAgIG9uY2hhbmdlKGRhdGEpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBsZXQgaW52YWxpZCA9ICRkZXJpdmVkKCF2YWxpZCk7XG48L3NjcmlwdD5cblxueyNpZiByZWFkb25seX1cbiAgICB7I2lmIHZhbHVlfVxuICAgICAgICB7dmFyaWFudHNcbiAgICAgICAgICAgIC5maWx0ZXIoKHZhcmlhbnQpID0+IHZhbHVlLmluY2x1ZGVzKHZhcmlhbnQuaWQpKVxuICAgICAgICAgICAgLm1hcCgodmFyaWFudCkgPT4gdmFyaWFudC50aXRsZSlcbiAgICAgICAgICAgIC5qb2luKFwiLCBcIil9XG4gICAgey9pZn1cbns6ZWxzZX1cbiAgICB7I2VhY2ggdmFyaWFudHMgYXMgdmFyaWFudCAodmFyaWFudC5pZCl9XG4gICAgICAgIDxkaXYgY2xhc3M9XCJzd2l0Y2gtbGlzdC1pdGVtXCI+XG4gICAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgICAgICB0eXBlPVwiY2hlY2tib3hcIlxuICAgICAgICAgICAgICAgIGNsYXNzPVwic3dpdGNoIHtjbGFzc2VzfVwiXG4gICAgICAgICAgICAgICAgaWQ9XCJmb3JtLWZpZWxkLXN3aXRjaC17ZmllbGRuYW1lfS12YXJpYW50LXt2YXJpYW50LmlkfVwiXG4gICAgICAgICAgICAgICAgY2hlY2tlZD17dmFsdWUuaW5jbHVkZXModmFyaWFudC5pZCl9XG4gICAgICAgICAgICAgICAgbmFtZT17ZmllbGRuYW1lfVxuICAgICAgICAgICAgICAgIHtkaXNhYmxlZH1cbiAgICAgICAgICAgICAgICB7cmVxdWlyZWR9XG4gICAgICAgICAgICAgICAge3JlYWRvbmx5fVxuICAgICAgICAgICAgICAgIHtpbnZhbGlkfVxuICAgICAgICAgICAgICAgIG9uYmx1cj17b25DaGFuZ2V9XG4gICAgICAgICAgICAgICAgb25pbnB1dD17b25DaGFuZ2V9XG4gICAgICAgICAgICAgICAgYXJpYS1jb250cm9scz1cImlucHV0LWZpZWxkLWhlbHBlci17ZmllbGRuYW1lfS12YXJpYW50LXt2YXJpYW50LmlkfVwiXG4gICAgICAgICAgICAgICAgYXJpYS1kZXNjcmliZWRieT1cImlucHV0LWZpZWxkLWhlbHBlci17ZmllbGRuYW1lfS12YXJpYW50LXt2YXJpYW50LmlkfVwiXG4gICAgICAgICAgICAgICAgey4uLm90aGVyc31cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8VUlMYWJlbFxuICAgICAgICAgICAgICAgIGNsYXNzPVwibGFiZWxcIlxuICAgICAgICAgICAgICAgIGZvcj1cImZvcm0tZmllbGQtc3dpdGNoLXtmaWVsZG5hbWV9LXZhcmlhbnQte3ZhcmlhbnQuaWR9XCJcbiAgICAgICAgICAgICAgICBsYWJlbD17dmFyaWFudC50aXRsZX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgIDwvZGl2PlxuICAgIHsvZWFjaH1cbnsvaWZ9XG4iLCI8c2NyaXB0PlxuICAgIGltcG9ydCB7IExPQ0FMRSB9IGZyb20gXCIuLi8uLi9sb2NhbGVcIjtcbiAgICBpbXBvcnQgeyBVSUNvbHVtbiwgVUlDb2x1bW5zIH0gZnJvbSBcIi4uL2xheW91dFwiO1xuICAgIGltcG9ydCBVSVNlbGVjdE9wdGlvbiBmcm9tIFwiLi91aS5zZWxlY3Qub3B0aW9uLnN2ZWx0ZVwiO1xuICAgIGltcG9ydCBVSUJ1dHRvbiBmcm9tIFwiLi4vYnV0dG9uL3VpLmJ1dHRvbi5zdmVsdGVcIjtcbiAgICBpbXBvcnQgeyBvbk1vdW50IH0gZnJvbSBcInN2ZWx0ZVwiO1xuXG4gICAgb25Nb3VudCgoKSA9PiB7XG4gICAgICAgIGNsZWFyVmFsdWVGcm9tRGVhZFZhcmlhbnRzKCk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBAdHlwZWRlZiB7T2JqZWN0fSBQcm9wc1xuICAgICAqIEBwcm9wZXJ0eSB7YW55fSBbdmFsdWVdIC0gbGlzdCBvZiBpdGVtIGlkc1xuICAgICAqIEBwcm9wZXJ0eSB7YW55fSBbdmFyaWFudHNdXG4gICAgICogQHByb3BlcnR5IHtzdHJpbmd9IFtmaWVsZG5hbWVdXG4gICAgICogQHByb3BlcnR5IHtib29sZWFufSBbcmVhZG9ubHldIC0gZXhwb3J0IGxldCByZXF1aXJlZCA9IHRydWU7XG4gICAgICogQHByb3BlcnR5IHtib29sZWFufSBbdmFsaWRdXG4gICAgICogQHByb3BlcnR5IHthbnl9IFtiZWZvcmVBZGRdXG4gICAgICogQHByb3BlcnR5IHthbnl9IFtnZXRJdGVtSWRdXG4gICAgICogQHByb3BlcnR5IHthbnl9IFtnZXRJdGVtVGl0bGVdXG4gICAgICogQHByb3BlcnR5IHthbnl9IFtnZXRJdGVtVHlwZV1cbiAgICAgKiBAcHJvcGVydHkge2FueX0gW2J1aWxkSXRlbV1cbiAgICAgKi9cblxuICAgIC8qKiBAdHlwZSB7UHJvcHN9ICovXG4gICAgbGV0IHtcbiAgICAgICAgdmFsdWUgPSAkYmluZGFibGUoW10pLFxuICAgICAgICBMQ19BREQgPSBcIm5vdC1ub2RlOmFkZF9sYWJlbFwiLFxuICAgICAgICBMQ19TRUxFQ1RfRlJPTV9MSVNUID0gXCJub3Qtbm9kZTpzZWxlY3RfZnJvbV9saXN0X2xhYmVsXCIsXG4gICAgICAgIHZhcmlhbnRzID0gW10sXG4gICAgICAgIGZpZWxkbmFtZSA9IFwidGFnXCIsXG4gICAgICAgIHJlYWRvbmx5ID0gZmFsc2UsXG5cbiAgICAgICAgYmVmb3JlQWRkID0gKC8qdmFyaWFudCwgdmFyaWFudHMqLykgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0sXG4gICAgICAgIGdldEl0ZW1JZCA9ICh2YXJpYW50KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdmFyaWFudC5pZDtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0SXRlbVRpdGxlID0gKHZhcmlhbnQpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB2YXJpYW50LnRpdGxlO1xuICAgICAgICB9LFxuICAgICAgICAvL2VzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuICAgICAgICBnZXRJdGVtVHlwZSA9ICh2YXJpYW50KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gXCJpbmZvXCI7XG4gICAgICAgIH0sXG4gICAgICAgIGJ1aWxkSXRlbSA9ICh2YXJpYW50KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGlkOiBnZXRJdGVtSWQodmFyaWFudCksXG4gICAgICAgICAgICAgICAgdGl0bGU6IGdldEl0ZW1UaXRsZSh2YXJpYW50KSxcbiAgICAgICAgICAgICAgICB0eXBlOiBnZXRJdGVtVHlwZSh2YXJpYW50KSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIGNsYXNzOiBjbGFzc2VzID0gXCJcIixcbiAgICAgICAgb25jaGFuZ2UgPSAoKSA9PiB0cnVlLFxuICAgIH0gPSAkcHJvcHMoKTtcblxuICAgIGZ1bmN0aW9uIHZhcmlhbnRJZFRvVmFyaWFudChpZCkge1xuICAgICAgICByZXR1cm4gdmFyaWFudHMuZmluZCgodmFyaWFudCkgPT4gZ2V0SXRlbUlkKHZhcmlhbnQpID09PSBpZCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2hhbmdlRXZlbnQoKSB7XG4gICAgICAgIG9uY2hhbmdlKHtcbiAgICAgICAgICAgIGZpZWxkOiBmaWVsZG5hbWUsXG4gICAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVtb3ZlKGUpIHtcbiAgICAgICAgZSAmJiBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGxldCBpZCA9IGUuY3VycmVudFRhcmdldC5kYXRhc2V0LmlkO1xuICAgICAgICBpZiAodmFsdWUuaW5jbHVkZXMoaWQpKSB7XG4gICAgICAgICAgICB2YWx1ZS5zcGxpY2UodmFsdWUuaW5kZXhPZihpZCksIDEpO1xuICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgICAgIGNoYW5nZUV2ZW50KCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFkZChlKSB7XG4gICAgICAgIGUgJiYgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBsZXQgaWQgPSBlLmN1cnJlbnRUYXJnZXQucGFyZW50Tm9kZS5xdWVyeVNlbGVjdG9yKFwic2VsZWN0XCIpLnZhbHVlO1xuICAgICAgICBjb25zdCB2YXJpYW50ID0gdmFyaWFudElkVG9WYXJpYW50KGlkKTtcbiAgICAgICAgaWYgKCF2YXJpYW50KSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFiZWZvcmVBZGQodmFyaWFudCwgdmFyaWFudHMpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlkICYmIHZhbHVlLmluZGV4T2YoaWQpID09PSAtMSkge1xuICAgICAgICAgICAgdmFsdWUucHVzaChpZCk7XG4gICAgICAgICAgICB2YWx1ZSA9IHZhbHVlO1xuICAgICAgICAgICAgY2hhbmdlRXZlbnQoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2xlYXJWYWx1ZUZyb21EZWFkVmFyaWFudHMoKSB7XG4gICAgICAgIHZhbHVlID0gdmFsdWUuZmlsdGVyKChpZCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHZhcmlhbnRJZFRvVmFyaWFudChpZCk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuXG4gICAgLypcbml0ZW0gPSB7XG4gIGlkLCAgICAgICAgLy91bmlxdWVcbiAgdGl0bGUsICAgICAvL3NvbWUgdGV4dFxuICB0eXBlICAgICAgIC8vZm9yIGNvbG9yaW5nIGl0ZW1zLCB1c3VhbCBodG1sIHRlbXBsYXRlIG5hbWVzIGRhbmdlciwgc3VjY2VzcywgZXRjXG59XG4qL1xuICAgIGxldCBpdGVtcyA9ICRkZXJpdmVkKFxuICAgICAgICB2YWx1ZVxuICAgICAgICAgICAgLm1hcCh2YXJpYW50SWRUb1ZhcmlhbnQpXG4gICAgICAgICAgICAuZmlsdGVyKCh2YXJpYW50KSA9PiB2YXJpYW50KVxuICAgICAgICAgICAgLm1hcChidWlsZEl0ZW0pXG4gICAgKTtcbjwvc2NyaXB0PlxuXG48VUlDb2x1bW5zIGNsYXNzPXtjbGFzc2VzfT5cbiAgICA8VUlDb2x1bW4+XG4gICAgICAgIHsjZWFjaCBpdGVtcyBhcyBpdGVtIChpdGVtLmlkKX1cbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwibXgtMSB0YWcgaXMte2l0ZW0udHlwZX1cIlxuICAgICAgICAgICAgICAgID57JExPQ0FMRVtpdGVtLnRpdGxlXX1cbiAgICAgICAgICAgICAgICB7I2lmICFyZWFkb25seX1cbiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgICAgICAgICAgICAgYXJpYS1sYWJlbD1cImRlbGV0ZSBidXR0b25cIlxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1pZD17aXRlbS5pZH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPVwiZGVsZXRlIGlzLXNtYWxsXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uY2xpY2s9e3JlbW92ZX1cbiAgICAgICAgICAgICAgICAgICAgPjwvYnV0dG9uPlxuICAgICAgICAgICAgICAgIHsvaWZ9XG4gICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgIHsvZWFjaH1cbiAgICA8L1VJQ29sdW1uPlxuXG4gICAgeyNpZiAhcmVhZG9ubHl9XG4gICAgICAgIDxVSUNvbHVtbj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJzZWxlY3QgaXMtc21hbGxcIj5cbiAgICAgICAgICAgICAgICA8c2VsZWN0PlxuICAgICAgICAgICAgICAgICAgICA8VUlTZWxlY3RPcHRpb25cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXstMX1cbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkPXt0cnVlfVxuICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU9e0xDX1NFTEVDVF9GUk9NX0xJU1R9XG4gICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgIHsjZWFjaCB2YXJpYW50cyBhcyB2YXJpYW50fVxuICAgICAgICAgICAgICAgICAgICAgICAgPFVJU2VsZWN0T3B0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e3ZhcmlhbnQuaWR9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU9e3ZhcmlhbnQudGl0bGV9XG4gICAgICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICB7L2VhY2h9XG4gICAgICAgICAgICAgICAgPC9zZWxlY3Q+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxVSUJ1dHRvblxuICAgICAgICAgICAgICAgIGNvbG9yPXtcInByaW1hcnlcIn1cbiAgICAgICAgICAgICAgICBzaXplPXtcInNtYWxsXCJ9XG4gICAgICAgICAgICAgICAgYWN0aW9uPXthZGR9XG4gICAgICAgICAgICAgICAgdGl0bGU9e0xDX0FERH1cbiAgICAgICAgICAgIC8+XG4gICAgICAgIDwvVUlDb2x1bW4+XG4gICAgey9pZn1cbjwvVUlDb2x1bW5zPlxuIiwiPHNjcmlwdD5cbiAgICBpbXBvcnQgeyBMT0NBTEUgfSBmcm9tIFwiLi4vLi4vbG9jYWxlL2luZGV4XCI7XG4gICAgaW1wb3J0IFVJQ29tbW9uIGZyb20gXCIuLi9jb21tb24uanNcIjtcblxuICAgIC8qKiBAdHlwZSB7aW1wb3J0KCcuL3R5cGUnKS5VSUlucHV0UHJvcHN9ICovXG4gICAgbGV0IHtcbiAgICAgICAgdmFsdWUgPSAkYmluZGFibGUoXCJcIiksXG4gICAgICAgIHBsYWNlaG9sZGVyID0gXCIrNyAoOTg3KSA2NTQtMzItMTBcIixcbiAgICAgICAgZmllbGRuYW1lID0gXCJ0ZWxlcGhvbmVcIixcbiAgICAgICAgcmVxdWlyZWQgPSB0cnVlLFxuICAgICAgICBkaXNhYmxlZCA9IGZhbHNlLFxuICAgICAgICByZWFkb25seSA9IGZhbHNlLFxuICAgICAgICB2YWxpZCA9IHRydWUsXG4gICAgICAgIGNsYXNzOiBjbGFzc2VzID0gXCJcIixcbiAgICAgICAgb25jaGFuZ2UgPSAoKSA9PiB0cnVlLFxuICAgICAgICAuLi5vdGhlcnNcbiAgICB9ID0gJHByb3BzKCk7XG5cbiAgICBsZXQgaW52YWxpZCA9ICRkZXJpdmVkKCF2YWxpZCk7XG4gICAgY29uc3Qgb25pbnB1dCA9IFVJQ29tbW9uLm9uSW5wdXQoZmllbGRuYW1lLCBvbmNoYW5nZSk7XG48L3NjcmlwdD5cblxueyNpZiByZWFkb25seX1cbiAgICA8cD57dmFsdWV9PC9wPlxuezplbHNlfVxuICAgIDxpbnB1dFxuICAgICAgICBpZD1cImZvcm0tZmllbGQtdGVsZXBob25lLXtmaWVsZG5hbWV9XCJcbiAgICAgICAgY2xhc3M9XCJpbnB1dCB7Y2xhc3Nlc31cIlxuICAgICAgICB0eXBlPVwidGVsXCJcbiAgICAgICAgbmFtZT17ZmllbGRuYW1lfVxuICAgICAgICBiaW5kOnZhbHVlXG4gICAgICAgIHtpbnZhbGlkfVxuICAgICAgICB7cmVxdWlyZWR9XG4gICAgICAgIHtyZWFkb25seX1cbiAgICAgICAge2Rpc2FibGVkfVxuICAgICAgICBwbGFjZWhvbGRlcj17JExPQ0FMRVtwbGFjZWhvbGRlcl19XG4gICAgICAgIGF1dG9jb21wbGV0ZT17ZmllbGRuYW1lfVxuICAgICAgICBvbmNoYW5nZT17b25pbnB1dH1cbiAgICAgICAge29uaW5wdXR9XG4gICAgICAgIGFyaWEtY29udHJvbHM9XCJpbnB1dC1maWVsZC1oZWxwZXIte2ZpZWxkbmFtZX1cIlxuICAgICAgICBhcmlhLWRlc2NyaWJlZGJ5PVwiaW5wdXQtZmllbGQtaGVscGVyLXtmaWVsZG5hbWV9XCJcbiAgICAgICAgey4uLm90aGVyc31cbiAgICAvPlxuey9pZn1cbiIsIjxzY3JpcHQ+XG4gICAgaW1wb3J0IHtMT0NBTEV9IGZyb20gJy4uLy4uLy4uL2xvY2FsZSc7XG4gICAgaW1wb3J0IFVJQnV0dG9uIGZyb20gJy4uLy4uL2J1dHRvbi91aS5idXR0b24uc3ZlbHRlJztcbiAgICBcbiAgICBpbXBvcnQge2NyZWF0ZUV2ZW50RGlzcGF0Y2hlcn0gZnJvbSAnc3ZlbHRlJztcbiAgICBjb25zdCBkaXNwYXRjaCA9IGNyZWF0ZUV2ZW50RGlzcGF0Y2hlcigpO1xuXG4gICAvLyBleHBvcnQgbGV0IHNraXAgPSAwO1xuICAgIFxuXG4gICAvKipcbiAgICAqIEB0eXBlZGVmIHtPYmplY3R9IFByb3BzXG4gICAgKiBAcHJvcGVydHkge251bWJlcn0gW3BhZ2VdIC0gZXhwb3J0IGxldCBjb3VudCA9IDA7XG4gICAgKiBAcHJvcGVydHkge251bWJlcn0gW3BhZ2VzXVxuICAgICogQHByb3BlcnR5IHthbnl9IFtidXR0b25Db21wb25lbnRdXG4gICAgKiBAcHJvcGVydHkge2FueX0gW2J1dHRvbkNvbXBvbmVudFByb3BzXVxuICAgICovXG5cbiAgIC8qKiBAdHlwZSB7UHJvcHN9ICovXG4gICBsZXQge1xuICAgICAgIHBhZ2UgPSAwLFxuICAgICAgIHBhZ2VzID0gMCxcbiAgICAgICBidXR0b25Db21wb25lbnQgPSBVSUJ1dHRvbixcbiAgICAgICBidXR0b25Db21wb25lbnRQcm9wcyA9IHt9XG4gICB9ID0gJHByb3BzKCk7XG5cbjwvc2NyaXB0PlxuXG57I2lmIHBhZ2VzID4gMCB9XG48ZGl2IGNsYXNzPVwiY29sdW1uc1wiPlxuICAgIDxkaXYgY2xhc3M9XCJjb2x1bW5cIj5cbiAgICAgICAgeyNpZiBwYWdlID4gMSB9XG4gICAgICAgIHtAY29uc3QgU3ZlbHRlQ29tcG9uZW50ID0gYnV0dG9uQ29tcG9uZW50fVxuICAgICAgICA8U3ZlbHRlQ29tcG9uZW50ICAgICAgICAgICAgXG4gICAgICAgICAgICB7Li4uYnV0dG9uQ29tcG9uZW50UHJvcHN9XG4gICAgICAgICAgICBhY3Rpb249eygpID0+IGRpc3BhdGNoKCdwcmV2Jyl9XG4gICAgICAgICAgICA+eyRMT0NBTEVbJ25vdC1ub2RlOmxpc3RfbmF2aWdhdGlvbl9wcmV2X2J1dHRvbl9sYWJlbCddfTwvU3ZlbHRlQ29tcG9uZW50PlxuICAgICAgICB7L2lmfVxuICAgIDwvZGl2PlxuICAgIHsjaWYgcGFnZXMgPiAxIH1cbiAgICA8ZGl2IGNsYXNzPVwiY29sdW1uIGJveFwiPlxuICAgICAgICB7cGFnZX0gLyB7cGFnZXN9XG4gICAgPC9kaXY+XG4gICAgey9pZn1cbiAgICA8ZGl2IGNsYXNzPVwiY29sdW1uXCI+XG4gICAgICAgIHsjaWYgcGFnZSA8IHBhZ2VzIH1cbiAgICAgICAge0Bjb25zdCBTdmVsdGVDb21wb25lbnRfMSA9IGJ1dHRvbkNvbXBvbmVudH1cbiAgICAgICAgPFN2ZWx0ZUNvbXBvbmVudF8xICAgICAgICAgICAgXG4gICAgICAgICAgICB7Li4uYnV0dG9uQ29tcG9uZW50UHJvcHN9XG4gICAgICAgICAgICBhY3Rpb249eygpID0+IGRpc3BhdGNoKCduZXh0Jyl9XG4gICAgICAgICAgICA+eyRMT0NBTEVbJ25vdC1ub2RlOmxpc3RfbmF2aWdhdGlvbl9uZXh0X2J1dHRvbl9sYWJlbCddfTwvU3ZlbHRlQ29tcG9uZW50XzE+XG4gICAgICAgIHsvaWZ9XG4gICAgPC9kaXY+XG48L2Rpdj5cbnsvaWZ9XG5cbiIsIjxzY3JpcHQ+XG4gICAgaW1wb3J0IHsgcHJldmVudERlZmF1bHQgfSBmcm9tICdzdmVsdGUvbGVnYWN5JztcblxuICAgIGltcG9ydCB7IGNyZWF0ZUV2ZW50RGlzcGF0Y2hlciB9IGZyb20gXCJzdmVsdGVcIjtcbiAgICBjb25zdCBkaXNwYXRjaCA9IGNyZWF0ZUV2ZW50RGlzcGF0Y2hlcigpO1xuXG4gICAgbGV0IHsgdGl0bGUsIGlkLCBfaWQgfSA9ICRwcm9wcygpO1xuXG4gICAgZnVuY3Rpb24gY2xpY2soKSB7XG4gICAgICAgIGRpc3BhdGNoKFwiY2xpY2tcIiwge1xuICAgICAgICAgICAgX2lkLFxuICAgICAgICAgICAgaWQsXG4gICAgICAgICAgICB0aXRsZSxcbiAgICAgICAgfSk7XG4gICAgfVxuPC9zY3JpcHQ+XG5cbjxkaXZcbiAgICBvbmNsaWNrPXtwcmV2ZW50RGVmYXVsdChjbGljayl9XG4gICAgY2xhc3M9XCJib3ggbGlzdC1pdGVtLXNlbGVjdGFibGVcIlxuICAgIG9ua2V5dXA9e2NsaWNrfVxuICAgIHJvbGU9XCJidXR0b25cIlxuICAgIHRhYmluZGV4PVwiMFwiXG4+XG4gICAgPHNwYW4+e3RpdGxlfTwvc3Bhbj5cbjwvZGl2PlxuXG48c3R5bGU+XG4gICAgLmxpc3QtaXRlbS1zZWxlY3RhYmxlIHtcbiAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xuICAgICAgICBwYWRkaW5nOiAxZW07XG4gICAgfVxuXG4gICAgLmxpc3QtaXRlbS1zZWxlY3RhYmxlOmhvdmVyIHtcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogIzQ4Yzc4ZTtcbiAgICAgICAgY29sb3I6IHdoaXRlO1xuICAgIH1cbjwvc3R5bGU+XG4iLCI8c2NyaXB0PlxuICAgIGltcG9ydCB7IGNyZWF0ZUV2ZW50RGlzcGF0Y2hlciB9IGZyb20gXCJzdmVsdGVcIjtcbiAgICBjb25zdCBkaXNwYXRjaCA9IGNyZWF0ZUV2ZW50RGlzcGF0Y2hlcigpO1xuXG4gICAgaW1wb3J0IFVJRW5kbGVzc0xpc3RTaW1wbGVJdGVtIGZyb20gXCIuL3VpLmVuZGxlc3MubGlzdC5zaW1wbGUuaXRlbS5zdmVsdGVcIjtcbiAgICBpbXBvcnQgVUlFbmRsZXNzTGlzdEVtcHR5UGxhY2Vob2xkZXIgZnJvbSBcIi4uL3VpLmxpc3QuZW1wdHkucGxhY2Vob2xkZXIuc3ZlbHRlXCI7XG4gICAgaW1wb3J0IFVJRW5kbGVzc0xpc3ROYXZpZ2F0aW9uIGZyb20gXCIuL3VpLmVuZGxlc3MubGlzdC5uYXZpZ2F0aW9uLnN2ZWx0ZVwiO1xuXG4gICAgXG4gICAgXG4gICAgXG4gICAgLyoqXG4gICAgICogQHR5cGVkZWYge09iamVjdH0gUHJvcHNcbiAgICAgKiBAcHJvcGVydHkge2FueX0gW2RhdGFdXG4gICAgICogQHByb3BlcnR5IHthbnl9IFtpdGVtQ29tcG9uZW50XSAtIGxpc3QgZWxlbWVudFxuICAgICAqIEBwcm9wZXJ0eSB7YW55fSBbaXRlbUNvbXBvbmVudFByb3BzXVxuICAgICAqIEBwcm9wZXJ0eSB7YW55fSBbZW1wdHlMaXN0UGxhY2Vob2xkZXJDb21wb25lbnRdIC0gaWYgbGlzdCBpcyBlbXB0eVxuICAgICAqIEBwcm9wZXJ0eSB7YW55fSBbZW1wdHlMaXN0UGxhY2Vob2xkZXJDb21wb25lbnRQcm9wc11cbiAgICAgKiBAcHJvcGVydHkge2FueX0gW2xpc3ROYXZpZ2F0aW9uQ29tcG9uZW50XSAtIHByZXYgYW5kIG5leHQgYmxvY2tcbiAgICAgKiBAcHJvcGVydHkge2FueX0gW2xpc3ROYXZpZ2F0aW9uQ29tcG9uZW50UHJvcHNdXG4gICAgICovXG5cbiAgICAvKiogQHR5cGUge1Byb3BzfSAqL1xuICAgIGxldCB7XG4gICAgICAgIGRhdGEgPSAkYmluZGFibGUoe1xuICAgICAgICAgICAgbGlzdDogW10sXG4gICAgICAgICAgICBza2lwOiAwLFxuICAgICAgICAgICAgY291bnQ6IDAsXG4gICAgICAgICAgICBwYWdlOiAwLFxuICAgICAgICAgICAgcGFnZXM6IDAsXG4gICAgICAgIH0pLFxuICAgICAgICBpdGVtQ29tcG9uZW50ID0gVUlFbmRsZXNzTGlzdFNpbXBsZUl0ZW0sXG4gICAgICAgIGl0ZW1Db21wb25lbnRQcm9wcyA9IHt9LFxuICAgICAgICBlbXB0eUxpc3RQbGFjZWhvbGRlckNvbXBvbmVudCA9IFVJRW5kbGVzc0xpc3RFbXB0eVBsYWNlaG9sZGVyLFxuICAgICAgICBlbXB0eUxpc3RQbGFjZWhvbGRlckNvbXBvbmVudFByb3BzID0ge30sXG4gICAgICAgIGxpc3ROYXZpZ2F0aW9uQ29tcG9uZW50ID0gVUlFbmRsZXNzTGlzdE5hdmlnYXRpb24sXG4gICAgICAgIGxpc3ROYXZpZ2F0aW9uQ29tcG9uZW50UHJvcHMgPSB7fVxuICAgIH0gPSAkcHJvcHMoKTtcblxuICAgIGZ1bmN0aW9uIHNlbGVjdCh7IGRldGFpbCB9KSB7XG4gICAgICAgIGRpc3BhdGNoKFwic2VsZWN0XCIsIGRldGFpbCk7XG4gICAgfVxuXG4gICAgY29uc3QgU3ZlbHRlQ29tcG9uZW50XzIgPSAkZGVyaXZlZChsaXN0TmF2aWdhdGlvbkNvbXBvbmVudCk7XG48L3NjcmlwdD5cblxuPGRpdj5cbiAgICB7I2lmIGRhdGEubGlzdC5sZW5ndGh9XG4gICAgICAgIHsjZWFjaCBkYXRhLmxpc3QgYXMgaXRlbSAoaXRlbS5pZCl9XG4gICAgICAgICAgICB7QGNvbnN0IFN2ZWx0ZUNvbXBvbmVudCA9IGl0ZW1Db21wb25lbnR9XG4gICAgICAgICAgICA8U3ZlbHRlQ29tcG9uZW50XG4gICAgICAgICAgICAgICAgb246Y2xpY2s9e3NlbGVjdH1cbiAgICAgICAgICAgICAgICB7Li4uaXRlbUNvbXBvbmVudFByb3BzfVxuICAgICAgICAgICAgICAgIHsuLi5pdGVtfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgey9lYWNofVxuICAgIHs6ZWxzZX1cbiAgICAgICAge0Bjb25zdCBTdmVsdGVDb21wb25lbnRfMSA9IGVtcHR5TGlzdFBsYWNlaG9sZGVyQ29tcG9uZW50fVxuICAgICAgICA8U3ZlbHRlQ29tcG9uZW50XzFcbiAgICAgICAgICAgIHsuLi5lbXB0eUxpc3RQbGFjZWhvbGRlckNvbXBvbmVudFByb3BzfVxuICAgICAgICAvPlxuICAgIHsvaWZ9XG48L2Rpdj5cbjxTdmVsdGVDb21wb25lbnRfMlxuICAgIHsuLi5saXN0TmF2aWdhdGlvbkNvbXBvbmVudFByb3BzfVxuICAgIGJpbmQ6cGFnZT17ZGF0YS5wYWdlfVxuICAgIGJpbmQ6cGFnZXM9e2RhdGEucGFnZXN9XG4gICAgYmluZDpza2lwPXtkYXRhLnNraXB9XG4gICAgYmluZDpjb3VudD17ZGF0YS5jb3VudH1cbiAgICBvbjpwcmV2XG4gICAgb246bmV4dFxuLz5cbiIsIjxzY3JpcHQ+XG4gICAgaW1wb3J0IHsgb25Nb3VudCwgY3JlYXRlRXZlbnREaXNwYXRjaGVyIH0gZnJvbSBcInN2ZWx0ZVwiO1xuICAgIGNvbnN0IGRpc3BhdGNoID0gY3JlYXRlRXZlbnREaXNwYXRjaGVyKCk7XG4gICAgLy9cbiAgICBpbXBvcnQgVUlMaXN0IGZyb20gXCIuL3VpLmxpc3Quc3ZlbHRlXCI7XG4gICAgaW1wb3J0IFVJVGl0bGUgZnJvbSBcIi4uL3ZhcmlvdXMvdWkudGl0bGUuc3ZlbHRlXCI7XG4gICAgaW1wb3J0IFVJSW1hZ2UgZnJvbSBcIi4uL2ltYWdlL3VpLmltYWdlLnN2ZWx0ZVwiO1xuICAgIGltcG9ydCBVSUJ1dHRvbnMgZnJvbSBcIi4uL2J1dHRvbi91aS5idXR0b25zLnN2ZWx0ZVwiO1xuXG5cbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBcblxuICAgIFxuXG5cbiAgICBcbiAgICAvKipcbiAgICAgKiBAdHlwZWRlZiB7T2JqZWN0fSBQcm9wc1xuICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbZmllbGRuYW1lXVxuICAgICAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW211bHRpcGxlXVxuICAgICAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW2F0TGVhc3RPbmVdXG4gICAgICogQHByb3BlcnR5IHthbnl9IFt2YXJpYW50c10gLSBhcnJheSBvZiB2YWx1ZXMgdmFyaWFudHMgaW4gZ3JvdXBcbltcbntcbmlkOm51bWJlcixcbnRpdGxlOnN0cmluZ3xvYmplY3QsXG5kZXNjcmlwdGlvbjpzdHJpbmd8b2JqZWN0LFxuaW1hZ2U6c3RyaW5nfG9iamVjdCxcbnZhbHVlOm9iamVjdFxufVxuXVxuICAgICAqIEBwcm9wZXJ0eSB7YW55fSB2YWx1ZSAtIFsuLi5zZWxlY3RlZEl0ZW1zVmFsdWVzXVxuICAgICAqIEBwcm9wZXJ0eSB7YW55fSBbc2VsZWN0ZWRWYXJpYW50c0lkc10gLSBbLi4uc2VsZWN0ZWRJdGVtc0lkc11cbiAgICAgKiBAcHJvcGVydHkge2FueX0gW3RpdGxlQ29tcG9uZW50XVxuICAgICAqIEBwcm9wZXJ0eSB7YW55fSBbdGl0bGVDb21wb25lbnRQcm9wc11cbiAgICAgKiBAcHJvcGVydHkge2FueX0gW2ltYWdlQ29tcG9uZW50XVxuICAgICAqIEBwcm9wZXJ0eSB7YW55fSBbaW1hZ2VDb21wb25lbnRQcm9wc11cbiAgICAgKiBAcHJvcGVydHkge2FueX0gW2Rlc2NyaXB0aW9uQ29tcG9uZW50XVxuICAgICAqIEBwcm9wZXJ0eSB7YW55fSBbZGVzY3JpcHRpb25Db21wb25lbnRQcm9wc11cbiAgICAgKiBAcHJvcGVydHkge2FueX0gW2xpc3RDb21wb25lbnRdXG4gICAgICogQHByb3BlcnR5IHthbnl9IFtsaXN0Q29tcG9uZW50UHJvcHNdXG4gICAgICogQHByb3BlcnR5IHthbnl9IFtzdWJsaW1lVmFsdWVdXG4gICAgICogQHByb3BlcnR5IHthbnl9IFtnZXRJdGVtXVxuICAgICAqIEBwcm9wZXJ0eSB7YW55fSBbZ2V0SXRlbVZhbHVlXVxuICAgICAqIEBwcm9wZXJ0eSB7YW55fSBbZ2V0RGVmYXVsdEl0ZW1TdWJsaW1lXVxuICAgICAqIEBwcm9wZXJ0eSB7YW55fSBbdWlPbl1cbiAgICAgKiBAcHJvcGVydHkge2FueX0gW3VpT2ZmXVxuICAgICAqL1xuXG4gICAgLyoqIEB0eXBlIHtQcm9wc30gKi9cbiAgICBsZXQge1xuICAgICAgICBmaWVsZG5hbWUgPSBcImxpc3Qtc2VsZWN0XCIsXG4gICAgICAgIG11bHRpcGxlID0gZmFsc2UsXG4gICAgICAgIGF0TGVhc3RPbmUgPSB0cnVlLFxuICAgICAgICB2YXJpYW50cyA9ICRiaW5kYWJsZShbXSksXG4gICAgICAgIHZhbHVlID0gJGJpbmRhYmxlKCksXG4gICAgICAgIHNlbGVjdGVkVmFyaWFudHNJZHMgPSAkYmluZGFibGUoW10pLFxuICAgICAgICB0aXRsZUNvbXBvbmVudCA9IFVJVGl0bGUsXG4gICAgICAgIHRpdGxlQ29tcG9uZW50UHJvcHMgPSB7IHNpemU6IDUgfSxcbiAgICAgICAgaW1hZ2VDb21wb25lbnQgPSBVSUltYWdlLFxuICAgICAgICBpbWFnZUNvbXBvbmVudFByb3BzID0geyBjb3ZlcmVkOiB0cnVlIH0sXG4gICAgICAgIGRlc2NyaXB0aW9uQ29tcG9uZW50ID0gVUlCdXR0b25zLFxuICAgICAgICBkZXNjcmlwdGlvbkNvbXBvbmVudFByb3BzID0ge30sXG4gICAgICAgIGxpc3RDb21wb25lbnQgPSBVSUxpc3QsXG4gICAgICAgIGxpc3RDb21wb25lbnRQcm9wcyA9IHt9LFxuICAgICAgICBzdWJsaW1lVmFsdWUgPSAodmFsdWUpID0+IHZhbHVlLmlkLFxuICAgICAgICBnZXRJdGVtID0gKHsgdmFsdWVJZCB9KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdmFyaWFudHMuZmluZCgoYnRuVmFsKSA9PiBidG5WYWwudmFsdWUuaWQgPT09IHZhbHVlSWQpO1xuICAgICAgICB9LFxuICAgICAgICBnZXRJdGVtVmFsdWUgPSAoeyB2YWx1ZUlkIH0pID0+IHtcbiAgICAgICAgICAgIHJldHVybiBnZXRJdGVtKHsgdmFsdWVJZCB9KS52YWx1ZTtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0RGVmYXVsdEl0ZW1TdWJsaW1lID0gKCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHZhcmlhbnRzWzBdLmlkO1xuICAgICAgICB9LFxuICAgICAgICB1aU9uID0gKGl0ZW0pID0+IHtcbiAgICAgICAgICAgIGl0ZW0uY29sb3IgPSBcInN1Y2Nlc3NcIjtcbiAgICAgICAgICAgIGl0ZW0ub3V0bGluZWQgPSBmYWxzZTtcbiAgICAgICAgfSxcbiAgICAgICAgdWlPZmYgPSAoaXRlbSkgPT4ge1xuICAgICAgICAgICAgaXRlbS5jb2xvciA9IGZhbHNlO1xuICAgICAgICAgICAgaXRlbS5vdXRsaW5lZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9ID0gJHByb3BzKCk7XG5cbiAgICBvbk1vdW50KCgpID0+IHtcbiAgICAgICAgaWYgKHZhbHVlICYmIEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgICAgICBpZiAoYXRMZWFzdE9uZSAmJiB2YWx1ZS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICB2YWx1ZS5mb3JFYWNoKChpdGVtVmFsdWUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHVpID0gdXBkYXRlU2VsZWN0ZWQoaXRlbVZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlVUkodWkpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHNlbGVjdERlZmF1bHQoKTtcbiAgICB9KTtcbiAgICAvL1xuICAgIGZ1bmN0aW9uIGNvdW50T2ZTZWxlY3RlZCgpIHtcbiAgICAgICAgcmV0dXJuIEFycmF5LmlzQXJyYXkodmFsdWUpID8gc2VsZWN0ZWRWYXJpYW50c0lkcy5sZW5ndGggOiAwO1xuICAgIH1cblxuICAgIGNvbnN0IG5vdExhc3RPbmUgPSAoKSA9PiAhKGF0TGVhc3RPbmUgJiYgY291bnRPZlNlbGVjdGVkKCkgPT09IDEpO1xuICAgIC8vXG4gICAgZnVuY3Rpb24gdXBkYXRlU2VsZWN0ZWQoZGV0YWlsKSB7XG4gICAgICAgIGNvbnN0IHZhbHVlSWQgPSBzdWJsaW1lVmFsdWUoZGV0YWlsKTtcbiAgICAgICAgbGV0IHVpID0ge1xuICAgICAgICAgICAgb246IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIG9mZjogdW5kZWZpbmVkLFxuICAgICAgICB9O1xuICAgICAgICAvL1xuICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkoc2VsZWN0ZWRWYXJpYW50c0lkcykpIHtcbiAgICAgICAgICAgIHNlbGVjdGVkVmFyaWFudHNJZHMgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobXVsdGlwbGUpIHtcbiAgICAgICAgICAgIGlmIChzZWxlY3RlZFZhcmlhbnRzSWRzLmluY2x1ZGVzKHZhbHVlSWQpKSB7XG4gICAgICAgICAgICAgICAgaWYgKG5vdExhc3RPbmUoKSkge1xuICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZFZhcmlhbnRzSWRzLnNwbGljZShcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkVmFyaWFudHNJZHMuaW5kZXhPZih2YWx1ZUlkKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIDFcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgdWkub2ZmID0geyB2YWx1ZUlkIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzZWxlY3RlZFZhcmlhbnRzSWRzLnB1c2godmFsdWVJZCk7XG4gICAgICAgICAgICAgICAgdWkub24gPSB7IHZhbHVlSWQgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChhdExlYXN0T25lKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFzZWxlY3RlZFZhcmlhbnRzSWRzLmluY2x1ZGVzKHZhbHVlSWQpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjb3VudE9mU2VsZWN0ZWQoKSA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVpLm9mZiA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZUlkOiBzZWxlY3RlZFZhcmlhbnRzSWRzLnBvcCgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB1aS5vbiA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlSWQsXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkVmFyaWFudHNJZHMgPSBbdmFsdWVJZF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoc2VsZWN0ZWRWYXJpYW50c0lkcy5pbmNsdWRlcyh2YWx1ZUlkKSkge1xuICAgICAgICAgICAgICAgICAgICB1aS5vZmYgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZUlkLFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZFZhcmlhbnRzSWRzLnNwbGljZShcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkVmFyaWFudHNJZHMuaW5kZXhPZih2YWx1ZUlkKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIDFcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB1aS5vbiA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlSWQsXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkVmFyaWFudHNJZHMucHVzaCh2YWx1ZUlkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgc2VsZWN0ZWRWYXJpYW50c0lkcyA9IHNlbGVjdGVkVmFyaWFudHNJZHM7XG4gICAgICAgIHJldHVybiB1aTtcbiAgICB9XG4gICAgLy9cbiAgICBmdW5jdGlvbiB0b2dnbGUoZGV0YWlsKSB7XG4gICAgICAgIGxldCB1aSA9IHVwZGF0ZVNlbGVjdGVkKGRldGFpbCk7XG4gICAgICAgIHVwZGF0ZVVJKHVpKTtcbiAgICAgICAgLy9cbiAgICAgICAgdXBkYXRlVmFsdWUoKTtcbiAgICAgICAgLy9cbiAgICAgICAgZGlzcGF0Y2goXCJjaGFuZ2VcIiwge1xuICAgICAgICAgICAgZmllbGQ6IGZpZWxkbmFtZSxcbiAgICAgICAgICAgIHZhbHVlLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLy9cbiAgICBmdW5jdGlvbiB1cGRhdGVVSShjaGFuZ2VzKSB7XG4gICAgICAgIGlmIChjaGFuZ2VzLm9mZikge1xuICAgICAgICAgICAgdWlPZmYoZ2V0SXRlbShjaGFuZ2VzLm9mZikpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjaGFuZ2VzLm9uKSB7XG4gICAgICAgICAgICB1aU9uKGdldEl0ZW0oY2hhbmdlcy5vbikpO1xuICAgICAgICB9XG4gICAgICAgIHZhcmlhbnRzID0gdmFyaWFudHM7XG4gICAgfVxuICAgIC8vXG4gICAgZnVuY3Rpb24gdXBkYXRlVmFsdWUoKSB7XG4gICAgICAgIGxldCBuZXdWYWwgPSBbXTtcbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgdHlwZW9mIHNlbGVjdGVkVmFyaWFudHNJZHMgIT09IFwidW5kZWZpbmVkXCIgJiZcbiAgICAgICAgICAgIEFycmF5LmlzQXJyYXkoc2VsZWN0ZWRWYXJpYW50c0lkcylcbiAgICAgICAgKSB7XG4gICAgICAgICAgICBuZXdWYWwgPSBzZWxlY3RlZFZhcmlhbnRzSWRzXG4gICAgICAgICAgICAgICAgLmZpbHRlcigodmFsKSA9PiB0eXBlb2YgdmFsICE9PSBcInVuZGVmaW5lZFwiKVxuICAgICAgICAgICAgICAgIC5tYXAoKHZhbHVlSWQpID0+XG4gICAgICAgICAgICAgICAgICAgIGdldEl0ZW1WYWx1ZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZUlkLFxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgdmFsdWUgPSBuZXdWYWw7XG4gICAgfVxuICAgIC8vXG4gICAgZnVuY3Rpb24gc2VsZWN0RGVmYXVsdCgpIHtcbiAgICAgICAgaWYgKGF0TGVhc3RPbmUgJiYgdmFyaWFudHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgY29uc3QgZGVmVmFsdWVJZCA9IGdldERlZmF1bHRJdGVtU3VibGltZSgpO1xuICAgICAgICAgICAgdG9nZ2xlKHsgaWQ6IGRlZlZhbHVlSWQgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBTdmVsdGVDb21wb25lbnQgPSAkZGVyaXZlZChsaXN0Q29tcG9uZW50KTtcbjwvc2NyaXB0PlxuXG48U3ZlbHRlQ29tcG9uZW50XG4gICAgey4uLmxpc3RDb21wb25lbnRQcm9wc31cbiAgICBiaW5kOml0ZW1zPXt2YXJpYW50c31cbiAgICB7dGl0bGVDb21wb25lbnR9XG4gICAge3RpdGxlQ29tcG9uZW50UHJvcHN9XG4gICAge2Rlc2NyaXB0aW9uQ29tcG9uZW50fVxuICAgIGRlc2NyaXB0aW9uQ29tcG9uZW50UHJvcHM9e3tcbiAgICAgICAgLi4uZGVzY3JpcHRpb25Db21wb25lbnRQcm9wcyxcbiAgICAgICAgYWN0aW9uKGV2ZW50LCB2YWx1ZSkge1xuICAgICAgICAgICAgdG9nZ2xlKHZhbHVlKTtcbiAgICAgICAgfSxcbiAgICB9fVxuICAgIHtpbWFnZUNvbXBvbmVudH1cbiAgICB7aW1hZ2VDb21wb25lbnRQcm9wc31cbi8+XG4iLCI8c2NyaXB0PlxuICAgIGltcG9ydCB7IG9uTW91bnQgfSBmcm9tIFwic3ZlbHRlXCI7XG5cbiAgICAvL1xuICAgIGltcG9ydCBVSUxpc3QgZnJvbSBcIi4vdWkubGlzdC5zdmVsdGVcIjtcbiAgICBpbXBvcnQgVUlUaXRsZSBmcm9tIFwiLi4vdmFyaW91cy91aS50aXRsZS5zdmVsdGVcIjtcbiAgICBpbXBvcnQgVUlJbWFnZSBmcm9tIFwiLi4vaW1hZ2UvdWkuaW1hZ2Uuc3ZlbHRlXCI7XG4gICAgaW1wb3J0IFVJQnV0dG9ucyBmcm9tIFwiLi4vYnV0dG9uL3VpLmJ1dHRvbnMuc3ZlbHRlXCI7XG5cbiAgICAvKipcbiAgICAgKiBAdHlwZWRlZiB7T2JqZWN0fSBQcm9wc1xuICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbZmllbGRuYW1lXVxuICAgICAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW211bHRpcGxlXVxuICAgICAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW29ubHlPbmVJbkdyb3VwXVxuICAgICAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW2F0TGVhc3RPbmVdXG4gICAgICogQHByb3BlcnR5IHthbnl9IFt2YXJpYW50c10gLSBbXG5hcnJheSBvZiBncm91cHNcbntcbmlkOm51bWJlcixcbnRpdGxlOnN0cmluZ3xvYmplY3QsXG5pbWFnZTpzdHJpbmd8b2JqZWN0LFxudmFyaWFudHMgPSBbXG5hcnJheSBvZiB2YWx1ZXMgdmFyaWFudHMgaW4gZ3JvdXBcbntcbmlkOm51bWJlcixcbnRpdGxlOnN0cmluZ3xvYmplY3QsXG5kZXNjcmlwdGlvbjpzdHJpbmd8b2JqZWN0LFxuaW1hZ2U6c3RyaW5nfG9iamVjdCxcbnZhbHVlOm9iamVjdFxufV1cbn1cbl1cbiAgICAgKiBAcHJvcGVydHkge2FueX0gW3ZhcmlhbnRzU2VsZWN0ZWRdIC0gbXVsdGlwbGUgJiYgbXVsdGlwbGUgaW4gZ3JvdXBcbntcbmFycmF5IG9mIGFycmF5cyBvZiBzZWxlY3RlZCB2YWx1ZXMgaW4gZ3JvdXBcbmlmIG5vIHNlbGVjdGlvbiBncm91cCBzaG91bGQgYmUgZW1wdHkgYXJyYXlcbltncm91cElkXTogWy4uLnZhcmlhbnRzSWRdXG59XG5tdWx0aXBsZSAmJiBvbmUgaW4gZ3JvdXBcbntcbltncm91cElkXTogdmFyaWFudElkXG59XG5vbmx5IG9uZSAobm90IG11bHRpcGxlICYmIG9uZSBpbiBncm91cClcbntcbmdyb3VwOiBncm91cElkXG52YWx1ZTogdmFyaWFudElkXG59XG4gICAgICogQHByb3BlcnR5IHthbnl9IHZhbHVlIC0ge1tncm91cElkXTogWy4uLnZhbHVlc09mU2VsZWN0ZWRJdGVtc119XG4gICAgICogQHByb3BlcnR5IHthbnl9IFt0aXRsZUNvbXBvbmVudF1cbiAgICAgKiBAcHJvcGVydHkge2FueX0gW3RpdGxlQ29tcG9uZW50UHJvcHNdXG4gICAgICogQHByb3BlcnR5IHthbnl9IFtpbWFnZUNvbXBvbmVudF1cbiAgICAgKiBAcHJvcGVydHkge2FueX0gW2ltYWdlQ29tcG9uZW50UHJvcHNdXG4gICAgICogQHByb3BlcnR5IHthbnl9IFtkZXNjcmlwdGlvbkNvbXBvbmVudF1cbiAgICAgKiBAcHJvcGVydHkge2FueX0gW2Rlc2NyaXB0aW9uQ29tcG9uZW50UHJvcHNdXG4gICAgICogQHByb3BlcnR5IHthbnl9IFtsaXN0Q29tcG9uZW50XVxuICAgICAqIEBwcm9wZXJ0eSB7YW55fSBbbGlzdENvbXBvbmVudFByb3BzXVxuICAgICAqIEBwcm9wZXJ0eSB7YW55fSBbc3VibGltZVZhbHVlXVxuICAgICAqIEBwcm9wZXJ0eSB7YW55fSBbZ2V0SXRlbV1cbiAgICAgKiBAcHJvcGVydHkge2FueX0gW2dldEl0ZW1WYWx1ZV1cbiAgICAgKiBAcHJvcGVydHkge2FueX0gW2dldERlZmF1bHRJdGVtU3VibGltZV1cbiAgICAgKiBAcHJvcGVydHkge2FueX0gW3VpT25dXG4gICAgICogQHByb3BlcnR5IHthbnl9IFt1aU9mZl1cbiAgICAgKi9cblxuICAgIC8qKiBAdHlwZSB7UHJvcHN9ICovXG4gICAgbGV0IHtcbiAgICAgICAgb25jaGFuZ2UgPSAoKSA9PiB0cnVlLFxuICAgICAgICBmaWVsZG5hbWUgPSBcImxpc3Qtc2VsZWN0LXRhZ3NcIixcbiAgICAgICAgbXVsdGlwbGUgPSBmYWxzZSxcbiAgICAgICAgb25seU9uZUluR3JvdXAgPSB0cnVlLFxuICAgICAgICBhdExlYXN0T25lID0gdHJ1ZSxcbiAgICAgICAgdmFyaWFudHMgPSAkYmluZGFibGUoW10pLFxuICAgICAgICB2YXJpYW50c1NlbGVjdGVkID0gJGJpbmRhYmxlKHt9KSxcbiAgICAgICAgdmFsdWUgPSAkYmluZGFibGUoKSxcbiAgICAgICAgdGl0bGVDb21wb25lbnQgPSBVSVRpdGxlLFxuICAgICAgICB0aXRsZUNvbXBvbmVudFByb3BzID0geyBzaXplOiA1IH0sXG4gICAgICAgIGltYWdlQ29tcG9uZW50ID0gVUlJbWFnZSxcbiAgICAgICAgaW1hZ2VDb21wb25lbnRQcm9wcyA9IHsgY292ZXJlZDogdHJ1ZSB9LFxuICAgICAgICBkZXNjcmlwdGlvbkNvbXBvbmVudCA9IFVJQnV0dG9ucyxcbiAgICAgICAgZGVzY3JpcHRpb25Db21wb25lbnRQcm9wcyA9IHt9LFxuICAgICAgICBsaXN0Q29tcG9uZW50ID0gVUlMaXN0LFxuICAgICAgICBsaXN0Q29tcG9uZW50UHJvcHMgPSB7fSxcbiAgICAgICAgc3VibGltZVZhbHVlID0gKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGdyb3VwSWQ6IHZhbHVlLmdyb3VwLFxuICAgICAgICAgICAgICAgIHZhbHVlSWQ6IHZhbHVlLmlkLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0SXRlbSA9ICh7IGdyb3VwSWQsIHZhbHVlSWQgfSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHZhcmlhbnRzXG4gICAgICAgICAgICAgICAgLmZpbmQoKGdyb3VwKSA9PiBncm91cC5pZCA9PT0gZ3JvdXBJZClcbiAgICAgICAgICAgICAgICAuZGVzY3JpcHRpb24udmFsdWVzLmZpbmQoXG4gICAgICAgICAgICAgICAgICAgIChidG5WYWwpID0+IGJ0blZhbC52YWx1ZS5pZCA9PT0gdmFsdWVJZFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgIH0sXG4gICAgICAgIGdldEl0ZW1WYWx1ZSA9ICh7IGdyb3VwSWQsIHZhbHVlSWQgfSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGdldEl0ZW0oeyBncm91cElkLCB2YWx1ZUlkIH0pLnZhbHVlO1xuICAgICAgICB9LFxuICAgICAgICBnZXREZWZhdWx0SXRlbVN1YmxpbWUgPSAoKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGdyb3VwSWQ6IHZhcmlhbnRzWzBdLmlkLFxuICAgICAgICAgICAgICAgIHZhbHVlSWQ6IHZhcmlhbnRzWzBdLmRlc2NyaXB0aW9uLnZhbHVlc1swXS52YWx1ZS5pZCxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIHVpT24gPSAoaXRlbSkgPT4ge1xuICAgICAgICAgICAgaXRlbS5jb2xvciA9IFwic3VjY2Vzc1wiO1xuICAgICAgICAgICAgaXRlbS5vdXRsaW5lZCA9IGZhbHNlO1xuICAgICAgICB9LFxuICAgICAgICB1aU9mZiA9IChpdGVtKSA9PiB7XG4gICAgICAgICAgICBpdGVtLmNvbG9yID0gZmFsc2U7XG4gICAgICAgICAgICBpdGVtLm91dGxpbmVkID0gZmFsc2U7XG4gICAgICAgIH0sXG4gICAgfSA9ICRwcm9wcygpO1xuXG4gICAgb25Nb3VudCgoKSA9PiB7XG4gICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKG11bHRpcGxlKSB7XG4gICAgICAgICAgICAgICAgaWYgKG9ubHlPbmVJbkdyb3VwKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IHQgb2YgT2JqZWN0LmtleXModmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpdGVtVmFsdWUgPSB2YWx1ZVt0XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB1aSA9IHVwZGF0ZVNlbGVjdGVkKGl0ZW1WYWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVVSSh1aSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCB0IG9mIE9iamVjdC5rZXlzKHZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVbdF0uZm9yRWFjaCgoaXRlbVZhbHVlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHVpID0gdXBkYXRlU2VsZWN0ZWQoaXRlbVZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVVSSh1aSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbGV0IHVpID0gdXBkYXRlU2VsZWN0ZWQodmFsdWUpO1xuICAgICAgICAgICAgICAgIHVwZGF0ZVVJKHVpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNlbGVjdERlZmF1bHQoKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIC8vXG4gICAgZnVuY3Rpb24gY291bnRPZlNlbGVjdGVkKCkge1xuICAgICAgICBsZXQgYyA9IDA7XG4gICAgICAgIGlmIChtdWx0aXBsZSkge1xuICAgICAgICAgICAgZm9yIChsZXQgZ3JvdXBWYWx1ZSBvZiBPYmplY3QudmFsdWVzKHZhcmlhbnRzU2VsZWN0ZWQpKSB7XG4gICAgICAgICAgICAgICAgaWYgKG9ubHlPbmVJbkdyb3VwKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZ3JvdXBWYWx1ZSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgYysrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZW9mIGdyb3VwVmFsdWUgIT09IFwidW5kZWZpbmVkXCIgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIEFycmF5LmlzQXJyYXkoZ3JvdXBWYWx1ZSlcbiAgICAgICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjICs9IGdyb3VwVmFsdWUubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgIHR5cGVvZiB2YXJpYW50c1NlbGVjdGVkICE9PSBcInVuZGVmaW5lZFwiICYmXG4gICAgICAgICAgICAgICAgdHlwZW9mIHZhcmlhbnRzU2VsZWN0ZWQudmFsdWUgIT09IFwidW5kZWZpbmVkXCIgJiZcbiAgICAgICAgICAgICAgICB0eXBlb2YgdmFyaWFudHNTZWxlY3RlZC5ncm91cCAhPT0gXCJ1bmRlZmluZWRcIlxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgYysrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjO1xuICAgIH1cbiAgICAvL1xuICAgIGZ1bmN0aW9uIHVwZGF0ZVNlbGVjdGVkKGRldGFpbCkge1xuICAgICAgICBjb25zdCB7IHZhbHVlSWQsIGdyb3VwSWQgfSA9IHN1YmxpbWVWYWx1ZShkZXRhaWwpO1xuICAgICAgICBsZXQgdWkgPSB7XG4gICAgICAgICAgICBvbjogdW5kZWZpbmVkLFxuICAgICAgICAgICAgb2ZmOiB1bmRlZmluZWQsXG4gICAgICAgIH07XG4gICAgICAgIC8vXG4gICAgICAgIGlmIChtdWx0aXBsZSkge1xuICAgICAgICAgICAgaWYgKG9ubHlPbmVJbkdyb3VwKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB2YXJpYW50c1NlbGVjdGVkW2dyb3VwSWRdICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICAgICAgICAgIHVpLm9mZiA9IHsgZ3JvdXBJZCwgdmFsdWVJZDogdmFyaWFudHNTZWxlY3RlZFtncm91cElkXSB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXJpYW50c1NlbGVjdGVkW2dyb3VwSWRdID0gdmFsdWVJZDtcbiAgICAgICAgICAgICAgICB1aS5vbiA9IHsgZ3JvdXBJZCwgdmFsdWVJZCB9O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkodmFyaWFudHNTZWxlY3RlZFtncm91cElkXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyaWFudHNTZWxlY3RlZFtncm91cElkXSA9IFtdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodmFyaWFudHNTZWxlY3RlZFtncm91cElkXS5pbmNsdWRlcyh2YWx1ZUlkKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoY291bnRPZlNlbGVjdGVkKCkgPiAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXJpYW50c1NlbGVjdGVkW2dyb3VwSWRdLnNwbGljZShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXJpYW50c1NlbGVjdGVkW2dyb3VwSWRdLmluZGV4T2YodmFsdWVJZCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgMVxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVpLm9mZiA9IHsgZ3JvdXBJZCwgdmFsdWVJZCB9O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyaWFudHNTZWxlY3RlZFtncm91cElkXS5wdXNoKHZhbHVlSWQpO1xuICAgICAgICAgICAgICAgICAgICB1aS5vbiA9IHsgZ3JvdXBJZCwgdmFsdWVJZCB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXJpYW50c1NlbGVjdGVkW2dyb3VwSWRdID0gdmFyaWFudHNTZWxlY3RlZFtncm91cElkXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhcmlhbnRzU2VsZWN0ZWQgPSB2YXJpYW50c1NlbGVjdGVkO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgIHZhcmlhbnRzU2VsZWN0ZWQgJiZcbiAgICAgICAgICAgICAgICB2YXJpYW50c1NlbGVjdGVkLmdyb3VwSWQgPT09IGdyb3VwSWQgJiZcbiAgICAgICAgICAgICAgICB2YXJpYW50c1NlbGVjdGVkLnZhbHVlSWQgPT09IHZhbHVlSWRcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIGlmICghYXRMZWFzdE9uZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXJpYW50c1NlbGVjdGVkID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICB1aS5vZmYgPSB7IGdyb3VwSWQsIHZhbHVlSWQgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmICh2YXJpYW50c1NlbGVjdGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdmFyaWFudHNTZWxlY3RlZC5ncm91cElkICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB1aS5vZmYgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3JvdXBJZDogdmFyaWFudHNTZWxlY3RlZC5ncm91cElkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlSWQ6IHZhcmlhbnRzU2VsZWN0ZWQudmFsdWVJZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdWkub24gPSB7IGdyb3VwSWQsIHZhbHVlSWQgfTtcbiAgICAgICAgICAgICAgICB2YXJpYW50c1NlbGVjdGVkID0geyBncm91cElkLCB2YWx1ZUlkIH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHVpO1xuICAgIH1cbiAgICAvL1xuICAgIGZ1bmN0aW9uIHRvZ2dsZShkZXRhaWwpIHtcbiAgICAgICAgbGV0IHVpID0gdXBkYXRlU2VsZWN0ZWQoZGV0YWlsKTtcbiAgICAgICAgdXBkYXRlVUkodWkpO1xuICAgICAgICAvL1xuICAgICAgICB1cGRhdGVWYWx1ZSgpO1xuICAgICAgICAvL1xuICAgICAgICBvbmNoYW5nZSh7XG4gICAgICAgICAgICBmaWVsZDogZmllbGRuYW1lLFxuICAgICAgICAgICAgdmFsdWUsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvL1xuICAgIGZ1bmN0aW9uIHVwZGF0ZVVJKGNoYW5nZXMpIHtcbiAgICAgICAgaWYgKGNoYW5nZXMub2ZmKSB7XG4gICAgICAgICAgICB1aU9mZihnZXRJdGVtKGNoYW5nZXMub2ZmKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNoYW5nZXMub24pIHtcbiAgICAgICAgICAgIHVpT24oZ2V0SXRlbShjaGFuZ2VzLm9uKSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyaWFudHMgPSB2YXJpYW50cztcbiAgICB9XG4gICAgLy9cbiAgICBmdW5jdGlvbiB1cGRhdGVWYWx1ZSgpIHtcbiAgICAgICAgaWYgKG11bHRpcGxlKSB7XG4gICAgICAgICAgICBsZXQgbmV3VmFsID0ge307XG4gICAgICAgICAgICBpZiAob25seU9uZUluR3JvdXApIHtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBncm91cElkIGluIHZhcmlhbnRzU2VsZWN0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB2YXJpYW50c1NlbGVjdGVkW2dyb3VwSWRdICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdWYWxbZ3JvdXBJZF0gPSBnZXRJdGVtVmFsdWUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdyb3VwSWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVJZDogdmFyaWFudHNTZWxlY3RlZFtncm91cElkXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBncm91cElkIGluIHZhcmlhbnRzU2VsZWN0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZW9mIHZhcmlhbnRzU2VsZWN0ZWRbZ3JvdXBJZF0gIT09IFwidW5kZWZpbmVkXCIgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIEFycmF5LmlzQXJyYXkodmFyaWFudHNTZWxlY3RlZFtncm91cElkXSlcbiAgICAgICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdWYWxbZ3JvdXBJZF0gPSB2YXJpYW50c1NlbGVjdGVkW2dyb3VwSWRdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmZpbHRlcigodmFsKSA9PiB0eXBlb2YgdmFsICE9PSBcInVuZGVmaW5lZFwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5tYXAoKGl0ZW1WYWx1ZUlkKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBnZXRJdGVtVmFsdWUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3JvdXBJZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlSWQ6IGl0ZW1WYWx1ZUlkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChPYmplY3Qua2V5cyhuZXdWYWwpLmxlbmd0aCA9PSAwKSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhbHVlID0gbmV3VmFsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKHZhcmlhbnRzU2VsZWN0ZWQpIHtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IGdldEl0ZW1WYWx1ZSh2YXJpYW50c1NlbGVjdGVkKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy9cbiAgICBmdW5jdGlvbiBzZWxlY3REZWZhdWx0KCkge1xuICAgICAgICBpZiAoYXRMZWFzdE9uZSAmJiB2YXJpYW50cy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBjb25zdCBkZWZWYWx1ZSA9IGdldERlZmF1bHRJdGVtU3VibGltZSgpO1xuICAgICAgICAgICAgdG9nZ2xlKHsgaWQ6IGRlZlZhbHVlLnZhbHVlSWQsIGdyb3VwOiBkZWZWYWx1ZS5ncm91cElkIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgU3ZlbHRlQ29tcG9uZW50ID0gJGRlcml2ZWQobGlzdENvbXBvbmVudCk7XG48L3NjcmlwdD5cblxuPFN2ZWx0ZUNvbXBvbmVudFxuICAgIHsuLi5saXN0Q29tcG9uZW50UHJvcHN9XG4gICAgYmluZDppdGVtcz17dmFyaWFudHN9XG4gICAge3RpdGxlQ29tcG9uZW50fVxuICAgIHt0aXRsZUNvbXBvbmVudFByb3BzfVxuICAgIHtkZXNjcmlwdGlvbkNvbXBvbmVudH1cbiAgICBkZXNjcmlwdGlvbkNvbXBvbmVudFByb3BzPXt7XG4gICAgICAgIC4uLmRlc2NyaXB0aW9uQ29tcG9uZW50UHJvcHMsXG4gICAgICAgIGFjdGlvbihldmVudCwgdmFsdWUpIHtcbiAgICAgICAgICAgIHRvZ2dsZSh2YWx1ZSk7XG4gICAgICAgIH0sXG4gICAgfX1cbiAgICB7aW1hZ2VDb21wb25lbnR9XG4gICAge2ltYWdlQ29tcG9uZW50UHJvcHN9XG4vPlxuIiwiPHNjcmlwdD5cbiAgICBpbXBvcnQgeyBvbk1vdW50IH0gZnJvbSBcInN2ZWx0ZVwiO1xuXG4gICAgLy9cbiAgICBpbXBvcnQgVUlMaXN0IGZyb20gXCIuL3VpLmxpc3Quc3ZlbHRlXCI7XG4gICAgaW1wb3J0IFVJVGl0bGUgZnJvbSBcIi4uL3ZhcmlvdXMvdWkudGl0bGUuc3ZlbHRlXCI7XG4gICAgaW1wb3J0IFVJSW1hZ2UgZnJvbSBcIi4uL2ltYWdlL3VpLmltYWdlLnN2ZWx0ZVwiO1xuICAgIGltcG9ydCBVSUJ1dHRvbnMgZnJvbSBcIi4uL2J1dHRvbi91aS5idXR0b25zLnN2ZWx0ZVwiO1xuICAgIGltcG9ydCBVSUJ1dHRvbnNTd2l0Y2hlcnMgZnJvbSBcIi4uL2J1dHRvbi91aS5idXR0b25zLnN3aXRjaGVycy5zdmVsdGVcIjtcblxuICAgIC8qKlxuICAgICAqIEB0eXBlZGVmIHtPYmplY3R9IFByb3BzXG4gICAgICogQHByb3BlcnR5IHtzdHJpbmd9IFtmaWVsZG5hbWVdXG4gICAgICogQHByb3BlcnR5IHthbnl9IFt2YXJpYW50c10gLSBbXG5hcnJheSBvZiBncm91cHNcbntcbmlkOm51bWJlcixcbnRpdGxlOnN0cmluZ3xvYmplY3QsXG5pbWFnZTpzdHJpbmd8b2JqZWN0LFxudmFyaWFudHMgPSBbXG5hcnJheSBvZiB2YWx1ZXMgdmFyaWFudHMgaW4gZ3JvdXBcbntcbmlkOm51bWJlcixcbnRpdGxlOnN0cmluZ3xvYmplY3QsXG5kZXNjcmlwdGlvbjpzdHJpbmd8b2JqZWN0LFxuaW1hZ2U6c3RyaW5nfG9iamVjdCxcbnZhbHVlOm9iamVjdFxufV1cbn1cbl1cbiAgICAgKiBAcHJvcGVydHkge2FueX0gW3ZhcmlhbnRzU2VsZWN0ZWRdIC0gbXVsdGlwbGUgJiYgbXVsdGlwbGUgaW4gZ3JvdXBcbntcbmFycmF5IG9mIGFycmF5cyBvZiBzZWxlY3RlZCB2YWx1ZXMgaW4gZ3JvdXBcbmlmIG5vIHNlbGVjdGlvbiBncm91cCBzaG91bGQgYmUgZW1wdHkgYXJyYXlcbltncm91cElkXTogWy4uLnZhcmlhbnRzSWRdXG59XG5tdWx0aXBsZSAmJiBvbmUgaW4gZ3JvdXBcbntcbltncm91cElkXTogdmFyaWFudElkXG59XG5vbmx5IG9uZSAobm90IG11bHRpcGxlICYmIG9uZSBpbiBncm91cClcbntcbmdyb3VwOiBncm91cElkXG52YWx1ZTogdmFyaWFudElkXG59XG4gICAgICogQHByb3BlcnR5IHthbnl9IHZhbHVlIC0ge1tncm91cElkXTogWy4uLnZhbHVlc09mU2VsZWN0ZWRJdGVtc119XG4gICAgICogQHByb3BlcnR5IHthbnl9IFt0aXRsZUNvbXBvbmVudF1cbiAgICAgKiBAcHJvcGVydHkge2FueX0gW3RpdGxlQ29tcG9uZW50UHJvcHNdXG4gICAgICogQHByb3BlcnR5IHthbnl9IFtpbWFnZUNvbXBvbmVudF1cbiAgICAgKiBAcHJvcGVydHkge2FueX0gW2ltYWdlQ29tcG9uZW50UHJvcHNdXG4gICAgICogQHByb3BlcnR5IHthbnl9IFtkZXNjcmlwdGlvbkNvbXBvbmVudF1cbiAgICAgKiBAcHJvcGVydHkge2FueX0gW2Rlc2NyaXB0aW9uQ29tcG9uZW50UHJvcHNdXG4gICAgICogQHByb3BlcnR5IHthbnl9IFtsaXN0Q29tcG9uZW50XVxuICAgICAqIEBwcm9wZXJ0eSB7YW55fSBbbGlzdENvbXBvbmVudFByb3BzXVxuICAgICAqIEBwcm9wZXJ0eSB7YW55fSBbYWN0aW9uc0xpc3RdXG4gICAgICogQHByb3BlcnR5IHthbnl9IFtzdWJsaW1lVmFsdWVdXG4gICAgICovXG5cbiAgICAvKiogQHR5cGUge1Byb3BzfSAqL1xuICAgIGxldCB7XG4gICAgICAgIG9uY2hhbmdlID0gKCkgPT4gdHJ1ZSxcbiAgICAgICAgZmllbGRuYW1lID0gXCJsaXN0LXNlbGVjdC10YWdzXCIsXG4gICAgICAgIHZhcmlhbnRzID0gJGJpbmRhYmxlKFtdKSxcblxuICAgICAgICB2YWx1ZSA9ICRiaW5kYWJsZSgpLFxuICAgICAgICB0aXRsZUNvbXBvbmVudCA9IFVJVGl0bGUsXG4gICAgICAgIHRpdGxlQ29tcG9uZW50UHJvcHMgPSB7IHNpemU6IDUgfSxcbiAgICAgICAgaW1hZ2VDb21wb25lbnQgPSBVSUltYWdlLFxuICAgICAgICBpbWFnZUNvbXBvbmVudFByb3BzID0geyBjb3ZlcmVkOiB0cnVlIH0sXG4gICAgICAgIGRlc2NyaXB0aW9uQ29tcG9uZW50ID0gVUlCdXR0b25zU3dpdGNoZXJzLFxuICAgICAgICBkZXNjcmlwdGlvbkNvbXBvbmVudFByb3BzID0ge30sXG4gICAgICAgIGxpc3RDb21wb25lbnQgPSBVSUxpc3QsXG4gICAgICAgIGxpc3RDb21wb25lbnRQcm9wcyA9IHt9LFxuICAgICAgICBhY3Rpb25zTGlzdCA9IFtcInNlbGVjdEFsbFwiLCBcImRlc2VsZWN0QWxsXCJdLFxuICAgICAgICBzdWJsaW1lVmFsdWUgPSAodmFsdWUpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgZ3JvdXBJZDogdmFsdWUuZ3JvdXAsXG4gICAgICAgICAgICAgICAgdmFsdWVJZDogdmFsdWUuaWQsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgIH0gPSAkcHJvcHMoKTtcbiAgICAvL1xuXG4gICAgY29uc3QgQVZBSUxBQkxFX0FDVElPTlMgPSB7XG4gICAgICAgIHNlbGVjdEFsbDoge1xuICAgICAgICAgICAgdGl0bGU6IFwi0JLRi9Cx0YDQsNGC0Ywg0LLRgdC1XCIsXG4gICAgICAgICAgICBjb2xvcjogXCJzdWNjZXNzXCIsXG4gICAgICAgICAgICBhY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgc2VsZWN0QWxsKCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgICBkZXNlbGVjdEFsbDoge1xuICAgICAgICAgICAgdGl0bGU6IFwi0KHQvdGP0YLRjCDQstGL0LTQtdC70LXQvdC40LUg0YHQviDQstGB0LXRhVwiLFxuICAgICAgICAgICAgY29sb3I6IFwiXCIsXG4gICAgICAgICAgICBhY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgZGVzZWxlY3RBbGwoKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgfTtcblxuICAgIGxldCBBQ1RJT05TID0gJHN0YXRlKFtdKTtcblxuICAgIG9uTW91bnQoKCkgPT4ge1xuICAgICAgICBhY3Rpb25zTGlzdC5mb3JFYWNoKChuYW1lKSA9PiB7XG4gICAgICAgICAgICBPYmplY3QuaGFzT3duKEFWQUlMQUJMRV9BQ1RJT05TLCBuYW1lKVxuICAgICAgICAgICAgICAgID8gQUNUSU9OUy5wdXNoKEFWQUlMQUJMRV9BQ1RJT05TW25hbWVdKVxuICAgICAgICAgICAgICAgIDogZmFsc2U7XG4gICAgICAgIH0pO1xuICAgICAgICBBQ1RJT05TID0gQUNUSU9OUztcbiAgICB9KTtcblxuICAgIGV4cG9ydCBjb25zdCBzZWxlY3RBbGwgPSAoKSA9PiB7XG4gICAgICAgIHNldFNlbGVjdGlvbk9mQWxsKHRydWUpO1xuICAgIH07XG5cbiAgICBleHBvcnQgY29uc3QgZGVzZWxlY3RBbGwgPSAoKSA9PiB7XG4gICAgICAgIHNldFNlbGVjdGlvbk9mQWxsKGZhbHNlKTtcbiAgICB9O1xuXG4gICAgZXhwb3J0IGNvbnN0IHNlbGVjdEdyb3VwID0gKGdyb3VwSWQpID0+IHtcbiAgICAgICAgc2V0U2VsZWN0aW9uT2ZHcm91cChncm91cElkLCB0cnVlKTtcbiAgICB9O1xuXG4gICAgZXhwb3J0IGNvbnN0IGRlc2VsZWN0R3JvdXAgPSAoZ3JvdXBJZCkgPT4ge1xuICAgICAgICBzZXRTZWxlY3Rpb25PZkdyb3VwKGdyb3VwSWQsIGZhbHNlKTtcbiAgICB9O1xuXG4gICAgZXhwb3J0IGNvbnN0IHNldFNlbGVjdGlvbk9mR3JvdXAgPSAoZ3JvdXBJZCwgc2VsZWN0aW9uKSA9PiB7XG4gICAgICAgIHZhcmlhbnRzLmZvckVhY2goKGdyb3VwKSA9PiB7XG4gICAgICAgICAgICBpZiAoZ3JvdXBJZCA9PT0gZ3JvdXAuaWQpIHtcbiAgICAgICAgICAgICAgICBncm91cC5kZXNjcmlwdGlvbi52YWx1ZXMuZm9yRWFjaCgoaXRtKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGl0bS5zZWxlY3RlZCA9IHNlbGVjdGlvbjtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHZhcmlhbnRzID0gdmFyaWFudHM7XG4gICAgICAgIHRyaWdnZXJDaGFuZ2UoKTtcbiAgICB9O1xuXG4gICAgZXhwb3J0IGNvbnN0IHNldFNlbGVjdGlvbk9mQWxsID0gKHNlbGVjdGlvbikgPT4ge1xuICAgICAgICB2YXJpYW50cy5mb3JFYWNoKChncm91cCkgPT4ge1xuICAgICAgICAgICAgZ3JvdXAuZGVzY3JpcHRpb24udmFsdWVzLmZvckVhY2goKGl0bSkgPT4ge1xuICAgICAgICAgICAgICAgIGl0bS5zZWxlY3RlZCA9IHNlbGVjdGlvbjtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgdmFyaWFudHMgPSB2YXJpYW50cztcbiAgICAgICAgdHJpZ2dlckNoYW5nZSgpO1xuICAgIH07XG5cbiAgICBleHBvcnQgZnVuY3Rpb24gZ2V0U2VsZWN0ZWRJdGVtcygpIHtcbiAgICAgICAgbGV0IHJlc3VsdCA9IHt9O1xuICAgICAgICB2YXJpYW50cy5mb3JFYWNoKChncm91cCkgPT4ge1xuICAgICAgICAgICAgaWYgKCFPYmplY3QuaGFzT3duKHJlc3VsdCwgZ3JvdXAuaWQpKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0W2dyb3VwLmlkXSA9IFtdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZ3JvdXAuZGVzY3JpcHRpb24udmFsdWVzLmZvckVhY2goKGl0bSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChpdG0uc2VsZWN0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0W2dyb3VwLmlkXS5wdXNoKHN1YmxpbWVWYWx1ZShpdG0udmFsdWUpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdHJpZ2dlckNoYW5nZSgpIHtcbiAgICAgICAgdmFsdWUgPSBnZXRTZWxlY3RlZEl0ZW1zKCk7XG4gICAgICAgIG9uY2hhbmdlKHtcbiAgICAgICAgICAgIGZpZWxkbmFtZSxcbiAgICAgICAgICAgIHZhbHVlLFxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBjb25zdCBTdmVsdGVDb21wb25lbnQgPSAkZGVyaXZlZChsaXN0Q29tcG9uZW50KTtcbjwvc2NyaXB0PlxuXG48VUlCdXR0b25zIHZhbHVlcz17QUNUSU9OU30gY2VudGVyZWQ9e3RydWV9IC8+XG5cbjxTdmVsdGVDb21wb25lbnRcbiAgICB7Li4ubGlzdENvbXBvbmVudFByb3BzfVxuICAgIGJpbmQ6aXRlbXM9e3ZhcmlhbnRzfVxuICAgIHt0aXRsZUNvbXBvbmVudH1cbiAgICB7dGl0bGVDb21wb25lbnRQcm9wc31cbiAgICB7ZGVzY3JpcHRpb25Db21wb25lbnR9XG4gICAgZGVzY3JpcHRpb25Db21wb25lbnRQcm9wcz17e1xuICAgICAgICBhY3Rpb24oZXZlbnQsIHZhbHVlLCBzZWxlY3RlZCkge1xuICAgICAgICAgICAgc2V0VGltZW91dCh0cmlnZ2VyQ2hhbmdlLCAwKTtcbiAgICAgICAgICAgIHJldHVybiAhc2VsZWN0ZWQ7XG4gICAgICAgIH0sXG4gICAgICAgIC4uLmRlc2NyaXB0aW9uQ29tcG9uZW50UHJvcHMsXG4gICAgfX1cbiAgICB7aW1hZ2VDb21wb25lbnR9XG4gICAge2ltYWdlQ29tcG9uZW50UHJvcHN9XG4vPlxuIiwiPHNjcmlwdD5cbiAgICBsZXQgb3ZlcmZsb3dTYXZlID0gJHN0YXRlKFwiXCIpO1xuXG4gICAgaW1wb3J0IHsgZmFkZSB9IGZyb20gXCJzdmVsdGUvdHJhbnNpdGlvblwiO1xuXG4gICAgaW1wb3J0IHsgb25Nb3VudCwgb25EZXN0cm95IH0gZnJvbSBcInN2ZWx0ZVwiO1xuXG4gICAgY29uc3QgekluZGV4U3RlcCA9IDEwMDA7XG5cbiAgICAvKipcbiAgICAgKiBAdHlwZWRlZiB7T2JqZWN0fSBQcm9wc1xuICAgICAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW2Nsb3NlQnV0dG9uXVxuICAgICAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW3Nob3ddXG4gICAgICogQHByb3BlcnR5IHtib29sZWFufSBbY2xvc2VPbkNsaWNrXVxuICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbY2xvc2VTaXplXVxuICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBbbGF5ZXJdXG4gICAgICogQHByb3BlcnR5IHtzdHJpbmd9IFtjbGFzc2VzXVxuICAgICAqIEBwcm9wZXJ0eSB7aW1wb3J0KCdzdmVsdGUnKS5TbmlwcGV0fSBbY2hpbGRyZW5dXG4gICAgICovXG5cbiAgICAvKiogQHR5cGUge1Byb3BzfSAqL1xuICAgIGxldCB7XG4gICAgICAgIGNsb3NlQnV0dG9uID0gZmFsc2UsXG4gICAgICAgIHNob3cgPSB0cnVlLFxuICAgICAgICBjbG9zZU9uQ2xpY2sgPSB0cnVlLFxuICAgICAgICBjbG9zZVNpemUgPSBcIm5vcm1hbFwiLFxuICAgICAgICBsYXllciA9IDEsXG4gICAgICAgIGNsYXNzZXMgPSBcIlwiLFxuICAgICAgICBjaGlsZHJlbixcbiAgICAgICAgb25yZWplY3QgPSAoKSA9PiBmYWxzZSxcbiAgICB9ID0gJHByb3BzKCk7XG5cbiAgICBmdW5jdGlvbiBvdmVybGF5Q2xpY2soZSkge1xuICAgICAgICBpZiAoY2xvc2VPbkNsaWNrKSB7XG4gICAgICAgICAgICBjbG9zZU92ZXJsYXkoZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjbG9zZUJ1dHRvbkNsaWNrKCkge1xuICAgICAgICByZWplY3RPdmVybGF5KCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2xvc2VPdmVybGF5KGUpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmIChlICYmIGUub3JpZ2luYWxUYXJnZXQpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB0YXJnZXQgPSBlLm9yaWdpbmFsVGFyZ2V0O1xuICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0LmNsYXNzTGlzdCAmJlxuICAgICAgICAgICAgICAgICAgICB0YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKFwiaXMtb3ZlcmxheVwiKVxuICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICByZWplY3RPdmVybGF5KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy9lc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZW1wdHlcbiAgICAgICAgfSBjYXRjaCB7fVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlamVjdE92ZXJsYXkoZGF0YSA9IHt9KSB7XG4gICAgICAgIG9ucmVqZWN0KGRhdGEpO1xuICAgIH1cblxuICAgIG9uTW91bnQoKCkgPT4ge1xuICAgICAgICBvdmVyZmxvd1NhdmUgPSBkb2N1bWVudC5ib2R5LnN0eWxlLm92ZXJmbG93O1xuICAgICAgICBpZiAoc2hvdykge1xuICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5zdHlsZS5vdmVyZmxvdyA9IFwiaGlkZGVuXCI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkb2N1bWVudC5ib2R5LnN0eWxlLm92ZXJmbG93ID0gb3ZlcmZsb3dTYXZlO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICBvbkRlc3Ryb3koKCkgPT4ge1xuICAgICAgICBkb2N1bWVudC5ib2R5LnN0eWxlLm92ZXJmbG93ID0gb3ZlcmZsb3dTYXZlO1xuICAgIH0pO1xuPC9zY3JpcHQ+XG5cbnsjaWYgc2hvd31cbiAgICA8ZGl2XG4gICAgICAgIGNsYXNzPVwiaXMtb3ZlcmxheSBub3Qtb3ZlcmxheSB7Y2xhc3Nlc31cIlxuICAgICAgICB0cmFuc2l0aW9uOmZhZGVcbiAgICAgICAgb25jbGljaz17b3ZlcmxheUNsaWNrfVxuICAgICAgICBvbmtleXVwPXtvdmVybGF5Q2xpY2t9XG4gICAgICAgIHJvbGU9XCJidXR0b25cIlxuICAgICAgICB0YWJpbmRleD1cIjBcIlxuICAgICAgICBzdHlsZT1cInotaW5kZXg6IHt6SW5kZXhTdGVwICogbGF5ZXJ9O1wiXG4gICAgPlxuICAgICAgICB7I2lmIGNsb3NlQnV0dG9ufVxuICAgICAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgICAgIGFyaWEtbGFiZWw9XCJkZWxldGUgYnV0dG9uXCJcbiAgICAgICAgICAgICAgICBvbmNsaWNrPXtjbG9zZUJ1dHRvbkNsaWNrfVxuICAgICAgICAgICAgICAgIGNsYXNzPVwiZGVsZXRlIGlzLXtjbG9zZVNpemV9XCJcbiAgICAgICAgICAgID48L2J1dHRvbj5cbiAgICAgICAgey9pZn1cbiAgICAgICAge0ByZW5kZXIgY2hpbGRyZW4/LigpfVxuICAgIDwvZGl2Plxuey9pZn1cbiIsIjxzY3JpcHQ+XG4gICAgaW1wb3J0IHsgTE9DQUxFIH0gZnJvbSBcIi4uLy4uL2xvY2FsZVwiO1xuXG4gICAgaW1wb3J0IFVJT3ZlcmxheSBmcm9tIFwiLi91aS5vdmVybGF5LnN2ZWx0ZVwiO1xuXG4gICAgaW1wb3J0IFVJQm94IGZyb20gXCIuLi9ibG9jay91aS5ib3guc3ZlbHRlXCI7XG4gICAgaW1wb3J0IFVJQ29udGVudCBmcm9tIFwiLi4vYmxvY2svdWkuY29udGVudC5zdmVsdGVcIjtcblxuICAgIGltcG9ydCBVSVRpdGxlIGZyb20gXCIuLi92YXJpb3VzL3VpLnRpdGxlLnN2ZWx0ZVwiO1xuICAgIGltcG9ydCBVSUJ1dHRvbnNSb3cgZnJvbSBcIi4uL2J1dHRvbi91aS5idXR0b25zLnJvdy5zdmVsdGVcIjtcblxuXG5cbiAgICAvKipcbiAgICAgKiBAdHlwZWRlZiB7T2JqZWN0fSBQcm9wc1xuICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbYnV0dG9uc1Bvc2l0aW9uXVxuICAgICAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW2Nsb3NlQnV0dG9uXVxuICAgICAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW2FwcGx5QnV0dG9uXVxuICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBbdGl0bGVTaXplXVxuICAgICAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW3Nob3ddXG4gICAgICogQHByb3BlcnR5IHtib29sZWFufSBbbG9hZGluZ11cbiAgICAgKiBAcHJvcGVydHkge3N0cmluZ30gW3RpdGxlXVxuICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbc3VidGl0bGVdXG4gICAgICogQHByb3BlcnR5IHtzdHJpbmd9IFtjbGFzc2VzXVxuICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbb3ZlcmxheUNsYXNzZXNdXG4gICAgICogQHByb3BlcnR5IHtzdHJpbmd9IFtidXR0b25zQ2xhc3Nlc11cbiAgICAgKiBAcHJvcGVydHkge3N0cmluZ30gW1dBSVRJTkdfVEVYVF1cbiAgICAgKiBAcHJvcGVydHkge2ltcG9ydCgnc3ZlbHRlJykuU25pcHBldH0gW2NoaWxkcmVuXVxuICAgICAqL1xuXG4gICAgLyoqIEB0eXBlIHtQcm9wc30gKi9cbiAgICBsZXQge1xuICAgICAgICBidXR0b25zUG9zaXRpb24gPSBcImJvdHRvbVwiLFxuICAgICAgICBjbG9zZUJ1dHRvbiA9IGZhbHNlLFxuICAgICAgICBhcHBseUJ1dHRvbiA9IGZhbHNlLFxuICAgICAgICB0aXRsZVNpemUgPSAyLFxuICAgICAgICBzaG93ID0gZmFsc2UsXG4gICAgICAgIGxvYWRpbmcgPSBmYWxzZSxcbiAgICAgICAgdGl0bGUgPSBcIk1vZGFsIHdpbmRvd1wiLFxuICAgICAgICBzdWJ0aXRsZSA9IFwiXCIsXG4gICAgICAgIGNsYXNzZXMgPSBcIlwiLFxuICAgICAgICBvdmVybGF5Q2xhc3NlcyA9IFwiXCIsXG4gICAgICAgIGJ1dHRvbnNDbGFzc2VzID0gXCJcIixcbiAgICAgICAgV0FJVElOR19URVhUID0gXCLQntCx0YDQsNCx0L7RgtC60LBcIixcbiAgICAgICAgY2hpbGRyZW5cbiAgICB9ID0gJHByb3BzKCk7XG48L3NjcmlwdD5cblxuPFVJT3ZlcmxheVxuICAgIHtzaG93fVxuICAgIGNsb3NlT25DbGljaz17ZmFsc2V9XG4gICAgY2xvc2VCdXR0b249e2ZhbHNlfVxuICAgIGNsYXNzZXM9e292ZXJsYXlDbGFzc2VzfVxuPlxuICAgIDxVSUJveCB7Y2xhc3Nlc30+XG4gICAgICAgIDxVSVRpdGxlXG4gICAgICAgICAgICBzaXplPXt0aXRsZVNpemV9XG4gICAgICAgICAgICB0aXRsZT17JExPQ0FMRVt0aXRsZV19XG4gICAgICAgICAgICBzdWJ0aXRsZT17JExPQ0FMRVtzdWJ0aXRsZV19XG4gICAgICAgIC8+XG4gICAgICAgIDxVSUNvbnRlbnQ+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwicGFnZWxvYWRlciB7bG9hZGluZyA/ICdpcy1hY3RpdmUnIDogJyd9XCI+XG4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJ0aXRsZVwiPnskTE9DQUxFW1dBSVRJTkdfVEVYVF19PC9zcGFuPlxuICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgIHsjaWYgYnV0dG9uc1Bvc2l0aW9uID09PSBcInRvcFwifVxuICAgICAgICAgICAgICAgIDxVSUJ1dHRvbnNSb3dcbiAgICAgICAgICAgICAgICAgICAgY2xhc3Nlcz17YnV0dG9uc0NsYXNzZXN9XG4gICAgICAgICAgICAgICAgICAgIGxlZnQ9e2Nsb3NlQnV0dG9uID8gW2Nsb3NlQnV0dG9uXSA6IFtdfVxuICAgICAgICAgICAgICAgICAgICByaWdodD17YXBwbHlCdXR0b24gPyBbYXBwbHlCdXR0b25dIDogW119XG4gICAgICAgICAgICAgICAgPjwvVUlCdXR0b25zUm93PlxuICAgICAgICAgICAgey9pZn1cblxuICAgICAgICAgICAge0ByZW5kZXIgY2hpbGRyZW4/LigpfVxuXG4gICAgICAgICAgICB7I2lmIGJ1dHRvbnNQb3NpdGlvbiA9PT0gXCJib3R0b21cIn1cbiAgICAgICAgICAgICAgICA8VUlCdXR0b25zUm93XG4gICAgICAgICAgICAgICAgICAgIGNsYXNzZXM9e2J1dHRvbnNDbGFzc2VzIHx8IFwiaXMtZm9vdGVyIGlzLW1vYmlsZVwifVxuICAgICAgICAgICAgICAgICAgICBsZWZ0PXtjbG9zZUJ1dHRvbiA/IFtjbG9zZUJ1dHRvbl0gOiBbXX1cbiAgICAgICAgICAgICAgICAgICAgcmlnaHQ9e2FwcGx5QnV0dG9uID8gW2FwcGx5QnV0dG9uXSA6IFtdfVxuICAgICAgICAgICAgICAgID48L1VJQnV0dG9uc1Jvdz5cbiAgICAgICAgICAgIHsvaWZ9XG4gICAgICAgIDwvVUlDb250ZW50PlxuICAgIDwvVUlCb3g+XG48L1VJT3ZlcmxheT5cbiIsIjxzY3JpcHQ+XG4gICAgaW1wb3J0IHtMT0NBTEV9IGZyb20gJy4uLy4uL2xvY2FsZSc7XG4gICAgaW1wb3J0IFVJQnV0dG9ucyBmcm9tICcuLi9idXR0b24vdWkuYnV0dG9ucy5zdmVsdGUnO1xuICAgIGltcG9ydCBVSU92ZXJsYXkgZnJvbSAnLi91aS5vdmVybGF5LnN2ZWx0ZSc7XG4gIFxuICAgIGltcG9ydCB7VUlFbmRsZXNzTGlzdH0gZnJvbSAnLi4vbGlzdC9lbmRsZXNzJztcbiAgICBpbXBvcnQgVUlTaW1wbGVTZWFyY2hJbnB1dCBmcm9tICcuLi92YXJpb3VzL3VpLnNpbXBsZS5zZWFyY2guaW5wdXQuc3ZlbHRlJztcbiAgICAgICBcbiAgICBpbXBvcnQge1xuICAgICAgICBvbk1vdW50LFxuICAgICAgICBjcmVhdGVFdmVudERpc3BhdGNoZXJcbiAgICB9IGZyb20gJ3N2ZWx0ZSc7XG4gIFxuICAgIGxldCBkaXNwYXRjaCA9IGNyZWF0ZUV2ZW50RGlzcGF0Y2hlcigpO1xuICAgICAgXG4gIFxuICAvKipcbiAgICogQHR5cGVkZWYge09iamVjdH0gUHJvcHNcbiAgICogQHByb3BlcnR5IHtib29sZWFufSBbc2hvd11cbiAgICogQHByb3BlcnR5IHtzdHJpbmd9IFt0ZXJtXVxuICAgKiBAcHJvcGVydHkge3N0cmluZ30gW3NpemVdXG4gICAqIEBwcm9wZXJ0eSB7YW55fSBbaW5wdXRDb21wb25lbnRdXG4gICAqIEBwcm9wZXJ0eSB7YW55fSBbaW5wdXRDb21wb25lbnRQcm9wc11cbiAgICogQHByb3BlcnR5IHthbnl9IFtvdXRwdXRDb21wb25lbnRdXG4gICAqIEBwcm9wZXJ0eSB7YW55fSBbb3V0cHV0Q29tcG9uZW50UHJvcHNdXG4gICAqIEBwcm9wZXJ0eSB7YW55fSBbcmVzdWx0c11cbiAgICovXG5cbiAgLyoqIEB0eXBlIHtQcm9wc30gKi9cbiAgbGV0IHtcbiAgICAgIHNob3cgPSB0cnVlLFxuICAgICAgdGVybSA9ICRiaW5kYWJsZSgnJyksXG4gICAgICBzaXplID0gJ25hcnJvdycsXG4gICAgICBpbnB1dENvbXBvbmVudCA9IFVJU2ltcGxlU2VhcmNoSW5wdXQsXG4gICAgICBpbnB1dENvbXBvbmVudFByb3BzID0ge30sXG4gICAgICBvdXRwdXRDb21wb25lbnQgPSBVSUVuZGxlc3NMaXN0LFxuICAgICAgb3V0cHV0Q29tcG9uZW50UHJvcHMgPSB7fSxcbiAgICAgIHJlc3VsdHMgPSAkYmluZGFibGUoe2xpc3Q6W10sIHBhZ2U6MCwgcGFnZXM6MCxza2lwOjAsY291bnQ6MH0pXG4gIH0gPSAkcHJvcHMoKTtcbiAgXG4gICAgIFxuICAgIG9uTW91bnQoKCkgPT4ge1xuICAgICAgXG4gICAgfSk7XG4gIFxuICAgIGNvbnN0IGJ1dHRvbnMgPSBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRpdGxlOiAkTE9DQUxFWydub3Qtbm9kZTpidXR0b25fY2FuY2VsX2xhYmVsJ10sXG4gICAgICAgICAgICBhY3Rpb246ICgpID0+IHJlamVjdCgpLFxuICAgICAgICB9XG4gICAgXTtcbiAgXG4gICAgZnVuY3Rpb24gb3ZlcmxheUNsb3NlZCgpIHtcbiAgICAgICAgZGlzcGF0Y2goJ3JlamVjdCcpO1xuICAgIH1cbiAgXG4gICAgZnVuY3Rpb24gc2VsZWN0KHtcbiAgICAgICAgZGV0YWlsXG4gICAgfSkge1xuICAgICAgICBjb25zb2xlLmxvZygnc2VsZWN0ZWQgdXNlcicsIGRldGFpbCk7XG4gICAgICAgIGRpc3BhdGNoKCdyZXNvbHZlJywgZGV0YWlsKTtcbiAgICB9XG4gIFxuICAgIGZ1bmN0aW9uIHJlamVjdCgpe1xuICAgICAgICBkaXNwYXRjaCgncmVqZWN0Jyk7XG4gICAgfVxuICBcbiAgIFxuICA8L3NjcmlwdD5cbiAgXG4gIFxuICA8VUlPdmVybGF5IG9uOnJlamVjdD1cIntvdmVybGF5Q2xvc2VkfVwiIHtzaG93fSBjbG9zZU9uQ2xpY2s9e3RydWV9IGNsb3NlQnV0dG9uPXtmYWxzZX0+XG4gICAge0Bjb25zdCBTdmVsdGVDb21wb25lbnQgPSBpbnB1dENvbXBvbmVudH1cbiAgICB7QGNvbnN0IFN2ZWx0ZUNvbXBvbmVudF8xID0gb3V0cHV0Q29tcG9uZW50fVxuICAgIDxkaXYgY2xhc3M9XCJwYXBlciBib3ggYmxvY2sge3NpemV9XCI+XG4gICAgICA8U3ZlbHRlQ29tcG9uZW50IG9uOnRlcm1DaGFuZ2UgYmluZDp0ZXJtPXt0ZXJtfSB7Li4uaW5wdXRDb21wb25lbnRQcm9wc30+PC9TdmVsdGVDb21wb25lbnQ+XG4gICAgICA8U3ZlbHRlQ29tcG9uZW50XzEgXG4gICAgICAgIGJpbmQ6ZGF0YT17cmVzdWx0c30gXG4gICAgICAgICAgb246cHJldlxuICAgICAgICAgIG9uOm5leHRcbiAgICAgICAgICBvbjpzZWxlY3Q9e3NlbGVjdH1cbiAgICAgICAgICB7Li4ub3V0cHV0Q29tcG9uZW50UHJvcHN9XG4gICAgICAgID48L1N2ZWx0ZUNvbXBvbmVudF8xPlxuICAgICAgICA8VUlCdXR0b25zIHZhbHVlcz17YnV0dG9uc30gY2VudGVyZWQ9e3RydWV9IGNsYXNzZXM9XCJtdC01XCIvPlxuICAgIDwvZGl2PlxuICA8L1VJT3ZlcmxheT5cbiAgXG4gIDxzdHlsZT5cbiAgICAucGFwZXIuYm94IHtcbiAgICAgIG1hcmdpbjogMTB2aCBhdXRvIGF1dG8gYXV0bztcbiAgICB9XG4gIFxuICAgIC5wYXBlci5ib3guZnVsbHNjcmVlbntcbiAgICAgIHdpZHRoOiAxMDB2dztcbiAgICB9XG4gIFxuICAgIC5wYXBlci5ib3gud2lkZXtcbiAgICAgIHdpZHRoOiA3NXZ3O1xuICAgIH1cbiAgXG4gICAgLnBhcGVyLmJveC5ub3JtYWx7XG4gICAgICB3aWR0aDogNTB2dztcbiAgICB9XG4gIFxuICAgIC5wYXBlci5ib3gubmFycm93e1xuICAgICAgd2lkdGg6IDI1dnc7XG4gICAgfSAgXG4gIFxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA3MDBweCkge1xuICAgICAgLnBhcGVyLmJveCB7XG4gICAgICAgIHdpZHRoOiAxMDB2dztcbiAgICAgICAgaGVpZ2h0OiAxMDB2aDtcbiAgICAgICAgbWFyZ2luOiAwdmggYXV0byBhdXRvIGF1dG87XG4gICAgICB9XG4gICAgfVxuICA8L3N0eWxlPlxuICAiLCI8c2NyaXB0PlxuICBpbXBvcnQge0xPQ0FMRX0gZnJvbSAnLi4vLi4vbG9jYWxlJztcblxuICBsZXQgeyBtZXNzYWdlLCB0aXRsZSB9ID0gJHByb3BzKCk7XG5cbjwvc2NyaXB0PlxuXG48YXJ0aWNsZSBjbGFzcz1cIm1lc3NhZ2UgaXMtZGFuZ2VyXCI+XG4gIDxkaXYgY2xhc3M9XCJtZXNzYWdlLWhlYWRlclwiPlxuICAgIDxwPnskTE9DQUxFW3RpdGxlXX08L3A+XG4gIDwvZGl2PlxuICA8ZGl2IGNsYXNzPVwibWVzc2FnZS1ib2R5XCI+XG4gICAgeyRMT0NBTEVbbWVzc2FnZV19XG4gIDwvZGl2PlxuPC9hcnRpY2xlPlxuIiwiPHNjcmlwdD5cbiAgaW1wb3J0IHtMT0NBTEV9IGZyb20gJy4uLy4uL2xvY2FsZSc7XG4gIGxldCB7IG1lc3NhZ2UsIHRpdGxlIH0gPSAkcHJvcHMoKTtcblxuPC9zY3JpcHQ+XG5cbjxhcnRpY2xlIGNsYXNzPVwibWVzc2FnZSBpcy1zdWNjZXNzXCI+XG4gIDxkaXYgY2xhc3M9XCJtZXNzYWdlLWhlYWRlclwiPlxuICAgIDxwPnskTE9DQUxFW3RpdGxlXX08L3A+XG4gIDwvZGl2PlxuICA8ZGl2IGNsYXNzPVwibWVzc2FnZS1ib2R5XCI+XG4gICAgeyRMT0NBTEVbbWVzc2FnZV19XG4gIDwvZGl2PlxuPC9hcnRpY2xlPlxuIiwiPHNjcmlwdD5cbiAgaW1wb3J0IHtvbk1vdW50fSBmcm9tICdzdmVsdGUnO1xuICBpbXBvcnQge0xPQ0FMRX0gZnJvbSAnLi4vLi4vbG9jYWxlJztcbiAgLyoqXG4gICAqIEB0eXBlZGVmIHtPYmplY3R9IFByb3BzXG4gICAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW3Nob3ddXG4gICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbbWVzc2FnZV1cbiAgICogQHByb3BlcnR5IHtzdHJpbmd9IFthZ3JlZV1cbiAgICovXG5cbiAgLyoqIEB0eXBlIHtQcm9wc30gKi9cbiAgbGV0IHsgc2hvdyA9ICRiaW5kYWJsZShmYWxzZSksIG1lc3NhZ2UgPSAn0JTQu9GPINGD0LvRg9GH0YjQtdC90LjRjyDRgNCw0LHQvtGC0Ysg0YHQsNC50YLQsCDQuCDQtdCz0L4g0LLQt9Cw0LjQvNC+0LTQtdC50YHRgtCy0LjRjyDRgSDQv9C+0LvRjNC30L7QstCw0YLQtdC70Y/QvNC4INC80Ysg0LjRgdC/0L7Qu9GM0LfRg9C10Lwg0YTQsNC50LvRiyBjb29raWUuINCf0YDQvtC00L7Qu9C20LDRjyDRgNCw0LHQvtGC0YMg0YEg0YHQsNC50YLQvtC8LCDQktGLINGA0LDQt9GA0LXRiNCw0LXRgtC1INC40YHQv9C+0LvRjNC30L7QstCw0L3QuNC1IGNvb2tpZS3RhNCw0LnQu9C+0LIuINCS0Ysg0LLRgdC10LPQtNCwINC80L7QttC10YLQtSDQvtGC0LrQu9GO0YfQuNGC0Ywg0YTQsNC50LvRiyBjb29raWUg0LIg0L3QsNGB0YLRgNC+0LnQutCw0YUg0JLQsNGI0LXQs9C+INCx0YDQsNGD0LfQtdGA0LAuJywgYWdyZWUgPSAn0KXQvtGA0L7RiNC+JyB9ID0gJHByb3BzKCk7XG5cbiAgb25Nb3VudCgoKT0+e1xuICAgICAgbGV0IGNvb2tpZURhdGUgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnY29va2llX2RhdGUnKTtcbiAgICAgIGlmKCAhY29va2llRGF0ZSB8fCAoK2Nvb2tpZURhdGUgKyAzMTUzNjAwMDAwMCkgPCBEYXRlLm5vdygpICl7XG4gICAgICAgICAgc2hvdyA9IHRydWU7XG4gICAgICB9XG4gIH0pO1xuXG4gIGZ1bmN0aW9uIGFjY2VwdCgpe1xuICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2Nvb2tpZV9kYXRlJywgRGF0ZS5ub3coKSk7XG4gICAgICBzaG93ID0gZmFsc2U7XG4gIH1cbjwvc2NyaXB0PlxuXG57I2lmIHNob3d9XG48ZGl2IGlkPVwiY29va2llX25vdGlmaWNhdGlvblwiPlxuICA8cD57JExPQ0FMRVttZXNzYWdlXX08L3A+XG4gIDxidXR0b24gY2xhc3M9XCJidXR0b24gaXMtc3VjY2VzcyBjb29raWVfYWNjZXB0XCIgb25jbGljaz17YWNjZXB0fT57JExPQ0FMRVthZ3JlZV19PC9idXR0b24+XG48L2Rpdj5cbnsvaWZ9XG5cbjxzdHlsZT5cbiAgI2Nvb2tpZV9ub3RpZmljYXRpb257XG4gICAgZGlzcGxheTogYmxvY2s7XG4gICAgdGV4dC1hbGlnbjogbGVmdDtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG4gICAgYWxpZ24taXRlbXM6IGZsZXgtZW5kO1xuICAgIHBvc2l0aW9uOiBmaXhlZDtcbiAgICBib3R0b206IDE1cHg7XG4gICAgbGVmdDogNTAlO1xuICAgIHdpZHRoOiA5MDBweDtcbiAgICBtYXgtd2lkdGg6IDkwJTtcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoLTUwJSk7XG4gICAgcGFkZGluZzogMjVweDtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcbiAgICBib3JkZXItcmFkaXVzOiA0cHg7XG4gICAgYm94LXNoYWRvdzogMnB4IDNweCAxMHB4IHJnYmEoMCwgMCwgMCwgMC40KTtcbiAgfVxuXG4gICNjb29raWVfbm90aWZpY2F0aW9uIHB7XG4gICAgbWFyZ2luOiAwO1xuICAgIGZvbnQtc2l6ZTogMC43cmVtO1xuICAgIHRleHQtYWxpZ246IGxlZnQ7XG4gICAgY29sb3I6ICMzZDNkM2Q7XG4gIH1cblxuICBAbWVkaWEgKG1pbi13aWR0aDogNTc2cHgpe1xuICAgICNjb29raWVfbm90aWZpY2F0aW9ue1xuICAgICAgZGlzcGxheTogZmxleDtcbiAgICB9XG4gICAgLmNvb2tpZV9hY2NlcHR7XG4gICAgICBtYXJnaW46IDAgMCAwIDI1cHg7XG4gICAgfVxuICB9XG5cbiAgQG1lZGlhIChtYXgtd2lkdGg6IDU3NXB4KXtcbiAgICAjY29va2llX25vdGlmaWNhdGlvbntcbiAgICAgIHRleHQtYWxpZ246IGxlZnQ7XG4gICAgfVxuICAgIC5jb29raWVfYWNjZXB0e1xuICAgICAgbWFyZ2luOiAxMHB4IDAgMCAwO1xuICAgIH1cbiAgfVxuXG48L3N0eWxlPlxuIiwiLy9ibG9jayBlbGVtZW50c1xuaW1wb3J0ICogYXMgQmxvY2tzIGZyb20gXCIuL2Jsb2NrXCI7XG5leHBvcnQgeyBCbG9ja3MgfTtcblxuLy9nZW5lcmFsIGVsZW1lbnRzXG5pbXBvcnQgKiBhcyBWYXJpb3VzIGZyb20gXCIuL3ZhcmlvdXNcIjtcbmV4cG9ydCB7IFZhcmlvdXMgfTtcblxuLy9cbmltcG9ydCAqIGFzIEJ1dHRvbnMgZnJvbSBcIi4vYnV0dG9uXCI7XG5leHBvcnQgeyBCdXR0b25zIH07XG5cbi8vZm9ybSBlbGVtZW50c1xuaW1wb3J0ICogYXMgRm9ybXMgZnJvbSBcIi4vZm9ybVwiO1xuZXhwb3J0IHsgRm9ybXMgfTtcblxuLy9pY29ucyB2YXJpYW50c1xuaW1wb3J0ICogYXMgSWNvbnMgZnJvbSBcIi4vaWNvblwiO1xuZXhwb3J0IHsgSWNvbnMgfTtcblxuLy9pbWFnZXMgdWlcbmltcG9ydCAqIGFzIEltYWdlcyBmcm9tIFwiLi9pbWFnZVwiO1xuZXhwb3J0IHsgSW1hZ2VzIH07XG5cbmltcG9ydCAqIGFzIElucHV0cyBmcm9tIFwiLi9pbnB1dFwiO1xuZXhwb3J0IHsgSW5wdXRzIH07XG5cbmltcG9ydCAqIGFzIExheW91dHMgZnJvbSBcIi4vbGF5b3V0XCI7XG5leHBvcnQgeyBMYXlvdXRzIH07XG5cbmltcG9ydCAqIGFzIExpbmtzIGZyb20gXCIuL2xpbmtcIjtcbmV4cG9ydCB7IExpbmtzIH07XG5cbmltcG9ydCAqIGFzIExpc3RzIGZyb20gXCIuL2xpc3RcIjtcbmV4cG9ydCB7IExpc3RzIH07XG5cbmltcG9ydCAqIGFzIE1vZGFscyBmcm9tIFwiLi9tb2RhbFwiO1xuZXhwb3J0IHsgTW9kYWxzIH07XG5cbmltcG9ydCAqIGFzIE5vdGlmaWNhdGlvbnMgZnJvbSBcIi4vbm90aWZpY2F0aW9uXCI7XG5leHBvcnQgeyBOb3RpZmljYXRpb25zIH07XG5cbmltcG9ydCBVSUNvbW1vbiBmcm9tIFwiLi9jb21tb25cIjtcbmV4cG9ydCB7IFVJQ29tbW9uIH07XG4iLCJpbXBvcnQgRXZlbnRFbWl0dGVyIGZyb20gXCJ3b2xmeTg3LWV2ZW50ZW1pdHRlclwiO1xuaW1wb3J0IG5vdFBhdGggZnJvbSBcIm5vdC1wYXRoXCI7XG5cbmltcG9ydCBub3RDb21tb24gZnJvbSBcIi4vY29tbW9uLmpzXCI7XG5cbmNvbnN0IE1FVEFfTUVUSE9EX0lOSVQgPSBTeW1ib2woXCJpbml0XCIpLFxuICAgIE1FVEFfREFUQSA9IFN5bWJvbChcImRhdGFcIiksXG4gICAgTUVUQV9XT1JLSU5HID0gU3ltYm9sKFwid29ya2luZ1wiKSxcbiAgICBNRVRBX09QVElPTlMgPSBTeW1ib2woXCJvcHRpb25zXCIpO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBub3RCYXNlIGV4dGVuZHMgRXZlbnRFbWl0dGVyIHtcbiAgICBjb25zdHJ1Y3RvcihpbnB1dCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzW01FVEFfREFUQV0gPSB7fTtcbiAgICAgICAgdGhpc1tNRVRBX1dPUktJTkddID0ge307XG4gICAgICAgIHRoaXNbTUVUQV9PUFRJT05TXSA9IHt9O1xuICAgICAgICB0aGlzW01FVEFfTUVUSE9EX0lOSVRdKGlucHV0KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgW01FVEFfTUVUSE9EX0lOSVRdKGlucHV0KSB7XG4gICAgICAgIGlmICghaW5wdXQpIHtcbiAgICAgICAgICAgIGlucHV0ID0ge307XG4gICAgICAgIH1cblxuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIGlmIChPYmplY3QuaGFzT3duKGlucHV0LCBcImRhdGFcIikpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0RGF0YShpbnB1dC5kYXRhKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgaWYgKE9iamVjdC5oYXNPd24oaW5wdXQsIFwid29ya2luZ1wiKSkge1xuICAgICAgICAgICAgdGhpcy5zZXRXb3JraW5nKGlucHV0LndvcmtpbmcpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICBpZiAoT2JqZWN0Lmhhc093bihpbnB1dCwgXCJvcHRpb25zXCIpKSB7XG4gICAgICAgICAgICB0aGlzLnNldE9wdGlvbnMoaW5wdXQub3B0aW9ucyk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmxvZyA9IG5vdENvbW1vbi5nZW5Mb2dNc2codGhpcy5nZXRXb3JraW5nKFwibmFtZVwiKSk7XG4gICAgICAgIHRoaXMuaW5mbyA9IHRoaXMubG9nO1xuICAgICAgICB0aGlzLmRlYnVnID0gbm90Q29tbW9uLmdlbkxvZ0RlYnVnKHRoaXMuZ2V0V29ya2luZyhcIm5hbWVcIikpO1xuICAgICAgICB0aGlzLmVycm9yID0gbm90Q29tbW9uLmdlbkxvZ0Vycm9yKHRoaXMuZ2V0V29ya2luZyhcIm5hbWVcIikpO1xuICAgIH1cblxuICAgIHNldENvbW1vbih3aGF0LCBhcmdzKSB7XG4gICAgICAgIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGNhc2UgMToge1xuICAgICAgICAgICAgICAgIC8qIHNldCBjb2xsZWN0aW9uICovXG4gICAgICAgICAgICAgICAgd2hhdCA9IGFyZ3NbMF07XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIDI6IHtcbiAgICAgICAgICAgICAgICAvKiBzZXQgY29sbGVjdGlvbiBlbGVtZW50ICovXG4gICAgICAgICAgICAgICAgbm90UGF0aC5zZXQoXG4gICAgICAgICAgICAgICAgICAgIGFyZ3NbMF0gLyogcGF0aCAqLyxcbiAgICAgICAgICAgICAgICAgICAgd2hhdCAvKiBjb2xsZWN0aW9uICovLFxuICAgICAgICAgICAgICAgICAgICB1bmRlZmluZWQgLyogaGVscGVycyAqLyxcbiAgICAgICAgICAgICAgICAgICAgYXJnc1sxXSAvKiB2YWx1ZSAqL1xuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGdldENvbW1vbih3aGF0LCBhcmdzKSB7XG4gICAgICAgIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICAgICAgICAgIC8qIGlmIHdlIHdhbnQgZ2V0IGRhdGEgYnkgcGF0aCAqL1xuICAgICAgICAgICAgY2FzZSAxOiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5vdFBhdGguZ2V0KGFyZ3NbMF0sIHdoYXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLyogaWYgd2Ugd2FudCBnZXQgZGF0YSBieSBwYXRoIHdpdGggZGVmYXVsdCB2YWx1ZSAqL1xuICAgICAgICAgICAgY2FzZSAyOiB7XG4gICAgICAgICAgICAgICAgbGV0IHJlcyA9IG5vdFBhdGguZ2V0KGFyZ3NbMF0sIHdoYXQpO1xuICAgICAgICAgICAgICAgIGlmIChyZXMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAvKiBubyBkYXRhLCByZXR1cm4gZGVmYXVsdCB2YWx1ZSAqL1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXJnc1sxXTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvKiBkYXRhLCByZXR1cm4gaXQgKi9cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvKiByZXR1cm4gZnVsbCBjb2xsZWN0aW9uICovXG4gICAgICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHdoYXQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKlxuICAgIENPUkUgT0JKRUNUXG4gICAgICBEQVRBIC0gaW5mb3JtYXRpb25cbiAgICAgIE9QVElPTlMgLSBob3cgdG8gd29ya1xuICAgICAgV09SS0lORyAtIHRlbXBvcmFyaWx5IGdlbmVyYXRlZCBpbiBwcm9jY2Vzc1xuICAqL1xuXG4gICAgc2V0RGF0YSgpIHtcbiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgIHRoaXNbTUVUQV9EQVRBXSA9IGFyZ3VtZW50c1swXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc2V0Q29tbW9uKHRoaXMuZ2V0RGF0YSgpLCBhcmd1bWVudHMpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZW1pdChcImNoYW5nZVwiKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZ2V0RGF0YSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Q29tbW9uKHRoaXNbTUVUQV9EQVRBXSwgYXJndW1lbnRzKTtcbiAgICB9XG5cbiAgICBzZXRPcHRpb25zKCkge1xuICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgdGhpc1tNRVRBX09QVElPTlNdID0gYXJndW1lbnRzWzBdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zZXRDb21tb24odGhpcy5nZXRPcHRpb25zKCksIGFyZ3VtZW50cyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZ2V0T3B0aW9ucygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Q29tbW9uKHRoaXNbTUVUQV9PUFRJT05TXSwgYXJndW1lbnRzKTtcbiAgICB9XG5cbiAgICBzZXRXb3JraW5nKCkge1xuICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgdGhpc1tNRVRBX1dPUktJTkddID0gYXJndW1lbnRzWzBdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zZXRDb21tb24odGhpcy5nZXRXb3JraW5nKCksIGFyZ3VtZW50cyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZ2V0V29ya2luZygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Q29tbW9uKHRoaXNbTUVUQV9XT1JLSU5HXSwgYXJndW1lbnRzKTtcbiAgICB9XG5cbiAgICByZXBvcnQoZSkge1xuICAgICAgICBpZiAobm90Q29tbW9uLnJlcG9ydCkge1xuICAgICAgICAgICAgbm90Q29tbW9uLnJlcG9ydChlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdldEFwcCgpIHtcbiAgICAgICAgcmV0dXJuIG5vdENvbW1vbi5nZXRBcHAoKTtcbiAgICB9XG5cbiAgICBkZXN0cm95KCkge1xuICAgICAgICB0aGlzLnJlbW92ZUV2ZW50KCk7XG4gICAgICAgIHRoaXMuc2V0T3B0aW9ucyhudWxsKTtcbiAgICAgICAgdGhpcy5zZXRXb3JraW5nKG51bGwpO1xuICAgICAgICB0aGlzLnNldERhdGEobnVsbCk7XG4gICAgICAgIHRoaXMuZW1pdChcImRlc3Ryb3lcIik7XG4gICAgfVxufVxuIiwiaW1wb3J0IG5vdEJhc2UgZnJvbSBcIi4vYmFzZS5qc1wiO1xuXG5pbXBvcnQgeyBOQVZJR0FUSU9OX0RFTEFZUywgTkFWSUdBVElPTl9ERUxBWV9ERUZBVUxUIH0gZnJvbSBcIi4vY29uc3QuanNcIjtcblxuY29uc3QgT1BUX01PREVfSElTVE9SWSA9IFN5bWJvbChcImhpc3RvcnlcIiksXG4gICAgT1BUX01PREVfSEFTSCA9IFN5bWJvbChcImhhc2hcIiksXG4gICAgT1BUX0RFRkFVTFRfQ0hFQ0tfSU5URVJWQUwgPSA1MDtcblxuY2xhc3Mgbm90Um91dGVyIGV4dGVuZHMgbm90QmFzZSB7XG4gICAgaG9zdCA9IFwiXCI7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKHtcbiAgICAgICAgICAgIHdvcmtpbmc6IHtcbiAgICAgICAgICAgICAgICByb3V0ZXM6IFtdLFxuICAgICAgICAgICAgICAgIG1vZGU6IE9QVF9NT0RFX0hJU1RPUlksXG4gICAgICAgICAgICAgICAgcm9vdDogXCIvXCIsIC8vYWx3YXlzIGluIHNsYXNoZXMgL3VzZXIvLCAvLCAvaW5wdXQvLiBhbmQgbm8gL3VzZXIgb3IgaW5wdXQvbGV2ZWxcbiAgICAgICAgICAgICAgICBpbml0aWFsaXplZDogZmFsc2UsXG4gICAgICAgICAgICAgICAgZGVsYXlzOiBOQVZJR0FUSU9OX0RFTEFZUyxcbiAgICAgICAgICAgICAgICBkZWxheV9kZWZhdWx0OiBOQVZJR0FUSU9OX0RFTEFZX0RFRkFVTFQsXG4gICAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0IG9iamVjdCB3aXRoIG5hbWVkIGRlbGF5c1xuICAgICAqIEBwYXJhbSB7T2JqZWN0LjxzdHJpbmcsIG51bWJlcj59IGRlbGF5c1xuICAgICAqIEByZXR1cm5zIHtub3RSb3V0ZXJ9XG4gICAgICovXG4gICAgc2V0RGVsYXlzKGRlbGF5cykge1xuICAgICAgICB0aGlzLnNldFdvcmtpbmcoXCJkZWxheXNcIiwgZGVsYXlzKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0IGRlZmF1bHQgbmF2aWdhdGlvbiBkZWxheSwgcHJvdmlkZWQgYXMgbmFtZSBvZiBvbmUgb2YgYGRlbGF5c2Agb3IgaW4gbnVtYmVyIGZvcm1cbiAgICAgKiBAcGFyYW0ge3N0cmluZ3xudW1iZXJ9IGRlbGF5XG4gICAgICogQHJldHVybnMge25vdFJvdXRlcn1cbiAgICAgKi9cbiAgICBzZXREZWZhdWx0TmF2aWdhdGlvbkRlbGF5KGRlbGF5KSB7XG4gICAgICAgIHRoaXMuc2V0V29ya2luZyhcImRlbGF5X2RlZmF1bHRcIiwgdGhpcy5kZWxheUFzTXMoZGVsYXkpKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBudW1iZXIgb2YgbXMsIGlmIG5vdCBzZXQgcmV0dXJucyBOQVZJR0FUSU9OX0RFTEFZX0RFRkFVTFRcbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfVxuICAgICAqL1xuICAgIGdldERlZmF1bHROYXZpZ2F0aW9uRGVsYXkoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFdvcmtpbmcoYGRlbGF5X2RlZmF1bHRgLCBOQVZJR0FUSU9OX0RFTEFZX0RFRkFVTFQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqICBFbnN1cmVzIHRoYXQgZGVsYXkgaXMgaW4gbXMsIGlmIGl0cyBwcm92aWRlZCBhcyBuYW1lIG9mIGFsaWFzLCBzZWFyY2hlcyBmb3IgaXQgYW5kIHJldHVybnMsIGlmIG5vdCBmb3VuZCAtIHJldHVybnMgd29ya2luZyBkZWZhdWx0X2RlbGF5XG4gICAgICogQHBhcmFtIHtzdHJpbmd8bnVtYmVyfSBkZWxheSAgICBuYW1lIG9mIGRlbGF5IGFsaWFzIG9yIG51bWJlciBvZiBtc1xuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9ICAgICAgICAgICAgICAgZGVsYXkgaW4gbXNcbiAgICAgKi9cbiAgICBkZWxheUFzTXMoZGVsYXkpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBkZWxheSA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICAgICAgcmV0dXJuIGRlbGF5O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBkZWxheSA9PT0gXCJzdHJpbmdcIiAmJiBkZWxheS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0V29ya2luZyhcbiAgICAgICAgICAgICAgICAgICAgYGRlbGF5cy4ke2RlbGF5fWAsXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZ2V0RGVmYXVsdE5hdmlnYXRpb25EZWxheSgpXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0RGVmYXVsdE5hdmlnYXRpb25EZWxheSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiAgQHBhcmFtIHtzdHJpbmd9ICAgICAgICAgICAgICB1cmwgICAgIHdlIGdvIHRvIHVybFxuICAgICAqICBAcGFyYW0ge3N0cmluZ3xudW1iZXJ9ICAgICAgIGRlbGF5ICAgbmFtZSBvZiBkZWxheSBhbGlhcyBvciBudW1iZXIgb2YgbXNcbiAgICAgKiAgQHJldHVybnMge05vZGVKUy5UaW1lb3V0fSAgICAgICAgICAgIHRpbWVvdXQgaWRlbnRpZmljYXRvclxuICAgICAqL1xuICAgIG5hdmlnYXRlV2l0aERlbGF5KHVybCwgZGVsYXksIGRvQmVmb3JlKSB7XG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIHR5cGVvZiBkb0JlZm9yZSA9PT0gXCJmdW5jdGlvblwiICYmIGRvQmVmb3JlKCk7XG4gICAgICAgICAgICB0aGlzLm5hdmlnYXRlKHVybCk7XG4gICAgICAgIH0sIHRoaXMuZGVsYXlBc01zKGRlbGF5KSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXNlIGJyb3dzZXIgSGlzdG9yeSBBUElcbiAgICAgKi9cbiAgICBoaXN0b3J5KCkge1xuICAgICAgICB0aGlzLnNldFdvcmtpbmcoXCJtb2RlXCIsIE9QVF9NT0RFX0hJU1RPUlkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVzZSBoYXNoIHBhcnQgYXMgY29udGFpbmVyIGZvciBsb2NhdGlvbiBpbmZvcm1hdGlvblxuICAgICAqL1xuICAgIGhhc2goKSB7XG4gICAgICAgIHRoaXMuc2V0V29ya2luZyhcIm1vZGVcIiwgT1BUX01PREVfSEFTSCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogcm9vdCBzaG91bGQgc3RhcnQgYW5kIGVuZCB3aXRoXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHJvb3RcbiAgICAgKiBAcmV0dXJucyB7bm90Um91dGVyfVxuICAgICAqL1xuICAgIHNldFJvb3Qocm9vdCkge1xuICAgICAgICB0aGlzLnNldFdvcmtpbmcoXG4gICAgICAgICAgICBcInJvb3RcIixcbiAgICAgICAgICAgIHJvb3QgJiYgcm9vdCAhPT0gXCIvXCIgPyBcIi9cIiArIHRoaXMuY2xlYXJTbGFzaGVzKHJvb3QpICsgXCIvXCIgOiBcIi9cIlxuICAgICAgICApO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBjbGVhciBmaXJzdCBhbmQgbGFzdCBzbGFzaGVzIGZyb20gc3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHBhdGhcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgICAqL1xuICAgIGNsZWFyU2xhc2hlcyhwYXRoKSB7XG4gICAgICAgIHJldHVybiBwYXRoLnRvU3RyaW5nKCkucmVwbGFjZSgvXFwvJC8sIFwiXCIpLnJlcGxhY2UoL15cXC8vLCBcIlwiKTtcbiAgICB9XG5cbiAgICBhZGQocmUsIGhhbmRsZXIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiByZSA9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgIGhhbmRsZXIgPSByZTtcbiAgICAgICAgICAgIHJlID0gXCJcIjtcbiAgICAgICAgfVxuICAgICAgICBsZXQgcnVsZSA9IHtcbiAgICAgICAgICAgIHJlOiByZSxcbiAgICAgICAgICAgIGhhbmRsZXI6IGhhbmRsZXIsXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuZ2V0V29ya2luZyhcInJvdXRlc1wiKS5wdXNoKHJ1bGUpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBhZGRMaXN0KGxpc3QpIHtcbiAgICAgICAgZm9yIChsZXQgdCBpbiBsaXN0KSB7XG4gICAgICAgICAgICB0aGlzLmFkZCh0LCBsaXN0W3RdKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICByZW1vdmUocGFyYW0pIHtcbiAgICAgICAgZm9yIChcbiAgICAgICAgICAgIHZhciBpID0gMCwgcjtcbiAgICAgICAgICAgIGkgPCB0aGlzLmdldFdvcmtpbmcoXCJyb3V0ZXNcIikubGVuZ3RoLFxuICAgICAgICAgICAgKHIgPSB0aGlzLmdldFdvcmtpbmcoXCJyb3V0ZXNcIilbaV0pO1xuICAgICAgICAgICAgaSsrXG4gICAgICAgICkge1xuICAgICAgICAgICAgaWYgKHIuaGFuZGxlciA9PT0gcGFyYW0gfHwgci5yZSA9PT0gcGFyYW0pIHtcbiAgICAgICAgICAgICAgICB0aGlzLmdldFdvcmtpbmcoXCJyb3V0ZXNcIikuc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGZsdXNoKCkge1xuICAgICAgICB0aGlzLnNldFdvcmtpbmcoe1xuICAgICAgICAgICAgcm91dGVzOiBbXSxcbiAgICAgICAgICAgIG1vZGU6IE9QVF9NT0RFX0hJU1RPUlksXG4gICAgICAgICAgICByb290OiBcIi9cIixcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGlzSW5pdGlhbGl6ZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFdvcmtpbmcoXCJpbml0aWFsaXplZFwiKTtcbiAgICB9XG5cbiAgICBzZXRJbml0aWFsaXplZCh2YWwgPSB0cnVlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNldFdvcmtpbmcoXCJpbml0aWFsaXplZFwiLCB2YWwpO1xuICAgIH1cblxuICAgIGdldEZyYWdtZW50KCkge1xuICAgICAgICB2YXIgZnJhZ21lbnQgPSBcIlwiO1xuICAgICAgICBpZiAodGhpcy5nZXRXb3JraW5nKFwibW9kZVwiKSA9PT0gT1BUX01PREVfSElTVE9SWSkge1xuICAgICAgICAgICAgaWYgKCFsb2NhdGlvbikgcmV0dXJuIFwiXCI7XG4gICAgICAgICAgICBmcmFnbWVudCA9IHRoaXMuY2xlYXJTbGFzaGVzKFxuICAgICAgICAgICAgICAgIGRlY29kZVVSSShsb2NhdGlvbi5wYXRobmFtZSArIGxvY2F0aW9uLnNlYXJjaClcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBmcmFnbWVudCA9IGZyYWdtZW50LnJlcGxhY2UoL1xcPyguKikkLywgXCJcIik7XG4gICAgICAgICAgICBmcmFnbWVudCA9XG4gICAgICAgICAgICAgICAgdGhpcy5nZXRXb3JraW5nKFwicm9vdFwiKSAhPSBcIi9cIlxuICAgICAgICAgICAgICAgICAgICA/IGZyYWdtZW50LnJlcGxhY2UodGhpcy5nZXRXb3JraW5nKFwicm9vdFwiKSwgXCJcIilcbiAgICAgICAgICAgICAgICAgICAgOiBmcmFnbWVudDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICghd2luZG93KSByZXR1cm4gXCJcIjtcbiAgICAgICAgICAgIHZhciBtYXRjaCA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmLm1hdGNoKC8jKC4qKSQvKTtcbiAgICAgICAgICAgIGZyYWdtZW50ID0gbWF0Y2ggPyBtYXRjaFsxXSA6IFwiXCI7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuY2xlYXJTbGFzaGVzKGZyYWdtZW50KTtcbiAgICB9XG5cbiAgICBjaGVja0xvY2F0aW9uKCkge1xuICAgICAgICBsZXQgY3VycmVudCA9IHRoaXMuZ2V0V29ya2luZyhcImN1cnJlbnRcIiksXG4gICAgICAgICAgICBmcmFnbWVudCA9IHRoaXMuZ2V0RnJhZ21lbnQoKSxcbiAgICAgICAgICAgIGluaXQgPSB0aGlzLmlzSW5pdGlhbGl6ZWQoKTtcbiAgICAgICAgaWYgKGN1cnJlbnQgIT09IGZyYWdtZW50IHx8ICFpbml0KSB7XG4gICAgICAgICAgICB0aGlzLnNldFdvcmtpbmcoXCJjdXJyZW50XCIsIGZyYWdtZW50KTtcbiAgICAgICAgICAgIHRoaXMuY2hlY2soZnJhZ21lbnQpO1xuICAgICAgICAgICAgdGhpcy5zZXRJbml0aWFsaXplZCh0cnVlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGhyZWZDbGljaygpIHtcbiAgICAgICAgLy9jb25zb2xlLmxvZyguLi5hcmd1bWVudHMpO1xuICAgIH1cblxuICAgIGdldFJvb3QoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFdvcmtpbmcoXCJyb290XCIpO1xuICAgIH1cblxuICAgIGxpc3Rlbihsb29wSW50ZXJ2YWwgPSBPUFRfREVGQVVMVF9DSEVDS19JTlRFUlZBTCkge1xuICAgICAgICB0aGlzLnNldFdvcmtpbmcoXCJjdXJyZW50XCIsIFwibm90SW5pdGlhbGl6ZWRcIik7XG4gICAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5nZXRXb3JraW5nKFwiaW50ZXJ2YWxcIikpO1xuICAgICAgICB0aGlzLnNldFdvcmtpbmcoXG4gICAgICAgICAgICBcImludGVydmFsXCIsXG4gICAgICAgICAgICBzZXRJbnRlcnZhbCh0aGlzLmNoZWNrTG9jYXRpb24uYmluZCh0aGlzKSwgbG9vcEludGVydmFsKVxuICAgICAgICApO1xuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInBvcHN0YXRlXCIsIHRoaXMuaHJlZkNsaWNrLmJpbmQodGhpcykpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBjaGVjayhmKSB7XG4gICAgICAgIGxldCBmcmFnbWVudCA9IGYgfHwgdGhpcy5nZXRGcmFnbWVudCgpLFxuICAgICAgICAgICAgZmFpbEJhY2sgPSBudWxsO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuZ2V0V29ya2luZyhcInJvdXRlc1wiKS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgbGV0IHBhdGggPVxuICAgICAgICAgICAgICAgICAgICB0aGlzLmdldFdvcmtpbmcoXCJyb290XCIpICsgdGhpcy5nZXRXb3JraW5nKFwicm91dGVzXCIpW2ldLnJlLFxuICAgICAgICAgICAgICAgIGZ1bGxSRSA9IHRoaXMuY2xlYXJTbGFzaGVzKGRlY29kZVVSSShwYXRoKSksXG4gICAgICAgICAgICAgICAgbWF0Y2ggPSBmcmFnbWVudC5tYXRjaChmdWxsUkUpO1xuICAgICAgICAgICAgaWYgKG1hdGNoICYmIG1hdGNoLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGlmIChmdWxsUkUgPT09IFwiXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgbWF0Y2guc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgZmFpbEJhY2sgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByb3V0ZTogdGhpcy5nZXRXb3JraW5nKFwicm91dGVzXCIpW2ldLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2gsXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbWF0Y2guc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5nZXRXb3JraW5nKFwicm91dGVzXCIpW2ldLmhhbmRsZXIuYXBwbHkoXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmhvc3QgfHwge30sXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXRjaFxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmVtaXQoXCJhZnRlclJvdXRlXCIsIHRoaXMuZ2V0V29ya2luZyhcInJvdXRlc1wiKVtpXSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoZmFpbEJhY2spIHtcbiAgICAgICAgICAgIGZhaWxCYWNrLnJvdXRlLmhhbmRsZXIuYXBwbHkodGhpcy5ob3N0IHx8IHt9LCBmYWlsQmFjay5tYXRjaCk7XG4gICAgICAgICAgICB0aGlzLmVtaXQoXCJhZnRlclJvdXRlXCIsIGZhaWxCYWNrLnJvdXRlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiAgUmVmcmVzaGVzIHBhZ2VcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdGltZW91dCB0aW1lIHRvIHdhaXQgaW4gbXNcbiAgICAgKi9cbiAgICByZWZyZXNoKHRpbWVvdXQgPSAwKSB7XG4gICAgICAgIGlmICh0aW1lb3V0ID4gMCkge1xuICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB0aGlzLnJlZnJlc2goKSwgdGltZW91dCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmNoZWNrKHRoaXMuZ2V0V29ya2luZyhcImN1cnJlbnRcIikpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hhbmdlcyBsb2NhdGlvbnNcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcGF0aFxuICAgICAqIEByZXR1cm5zXG4gICAgICovXG4gICAgbmF2aWdhdGUocGF0aCkge1xuICAgICAgICBwYXRoID0gcGF0aCA/IHBhdGggOiBcIlwiO1xuICAgICAgICBzd2l0Y2ggKHRoaXMuZ2V0V29ya2luZyhcIm1vZGVcIikpIHtcbiAgICAgICAgICAgIGNhc2UgT1BUX01PREVfSElTVE9SWToge1xuICAgICAgICAgICAgICAgIGNvbnN0IG5ld1JvdXRlID0gdGhpcy5nZXRGdWxsUm91dGUocGF0aCk7XG4gICAgICAgICAgICAgICAgaWYgKG5ld1JvdXRlID09PSB0aGlzLmxhc3RSb3V0ZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlZnJlc2goKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmxhc3RSb3V0ZSA9IG5ld1JvdXRlO1xuICAgICAgICAgICAgICAgICAgICBoaXN0b3J5LnB1c2hTdGF0ZShudWxsLCBcIlwiLCB0aGlzLmxhc3RSb3V0ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBPUFRfTU9ERV9IQVNIOiB7XG4gICAgICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYubWF0Y2goLyMoLiopJC8pO1xuICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID1cbiAgICAgICAgICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYucmVwbGFjZSgvIyguKikkLywgXCJcIikgKyBcIiNcIiArIHBhdGg7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogIHJldHVybnMgYXBwIHJvb3QgKyBwYXRoXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHBhdGhcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgICAqL1xuICAgIGdldEZ1bGxSb3V0ZShwYXRoID0gXCJcIikge1xuICAgICAgICBwYXRoID0gdGhpcy5jbGVhclNsYXNoZXMocGF0aCk7XG4gICAgICAgIGNvbnN0IHJvb3QgPSB0aGlzLmdldFdvcmtpbmcoXCJyb290XCIpO1xuICAgICAgICBpZiAocm9vdCAhPT0gXCIvXCIpIHtcbiAgICAgICAgICAgIGlmIChwYXRoLmluZGV4T2Yocm9vdC5zdWJzdHJpbmcoMSkpID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiL1wiICsgcGF0aDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5nZXRXb3JraW5nKFwicm9vdFwiKSArIHRoaXMuY2xlYXJTbGFzaGVzKHBhdGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYWxsIGxpbmtzIHdpdGggbi1ocmVmIGF0dHJpYnV0ZVxuICAgICAqIEByZXR1cm5zIHtBcnJheTxIVE1MQW5jaG9yRWxlbWVudD59XG4gICAgICovXG4gICAgZ2V0QWxsTGlua3MoKSB7XG4gICAgICAgIGNvbnN0IGFsbEVsZW1lbnRzID0gZG9jdW1lbnQuYm9keS5xdWVyeVNlbGVjdG9yQWxsKFwiYVwiKTtcbiAgICAgICAgbGV0IGxpc3QgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBhbGxFbGVtZW50cy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgZm9yIChcbiAgICAgICAgICAgICAgICBsZXQgaSA9IDAsIGF0dHMgPSBhbGxFbGVtZW50c1tqXS5hdHRyaWJ1dGVzLCBuID0gYXR0cy5sZW5ndGg7XG4gICAgICAgICAgICAgICAgaSA8IG47XG4gICAgICAgICAgICAgICAgaSsrXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICBpZiAoYXR0c1tpXS5ub2RlTmFtZS5pbmRleE9mKFwibi1ocmVmXCIpID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGxpc3QucHVzaChhbGxFbGVtZW50c1tqXSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbGlzdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXJvdXRlIGFsbCBsaW5rcyhhbmNob3IgdGFncykgd2l0aCBuLWhyZWYgYXR0cmlidXRlLlxuICAgICAqIERpc2FibGUgbmF2aWdhdGlvbiB0byBocmVmLlxuICAgICAqIEByZXR1cm5zIHtub3RSb3V0ZXJ9XG4gICAgICovXG4gICAgcmVSb3V0ZUV4aXN0ZWQoKSB7XG4gICAgICAgIGNvbnN0IGxpc3QgPSB0aGlzLmdldEFsbExpbmtzKCk7XG4gICAgICAgIGZvciAobGV0IHQgPSAwOyB0IDwgbGlzdC5sZW5ndGg7IHQrKykge1xuICAgICAgICAgICAgdGhpcy5pbml0UmVyb3V0aW5nKGxpc3RbdF0sIGxpc3RbdF0uZ2V0QXR0cmlidXRlKFwibi1ocmVmXCIpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJZiBgZWxgIGlzIG5vdCBpbml0aWFsaXplZCwgYWRkcyBvbmNsaWNrIGxpc3RlbmVyIHRvIG5hdmlnYXRlIHRvIGBsaW5rYCBsb2NhdGlvbi5cbiAgICAgKiBEaXNhYmxlcyBkZWZhdWx0IG5hdmlnYXRpb24gdG8gaHJlZi5cbiAgICAgKiBAcGFyYW0ge0hUTUxBbmNob3JFbGVtZW50fSAgIGVsXG4gICAgICogQHBhcmFtIHtzdHJpbmd9ICAgICAgICAgICAgICBsaW5rXG4gICAgICogQHJldHVybnNcbiAgICAgKi9cbiAgICBpbml0UmVyb3V0aW5nKGVsLCBsaW5rKSB7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgaWYgKCFlbC5ub3RSb3V0ZXJJbml0aWFsaXplZCkge1xuICAgICAgICAgICAgbGV0IGZ1bGxMaW5rID0gdGhpcy5nZXRGdWxsUm91dGUobGluayk7XG4gICAgICAgICAgICBlbC5zZXRBdHRyaWJ1dGUoXCJocmVmXCIsIGZ1bGxMaW5rKTtcbiAgICAgICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZSkgPT4ge1xuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICB0aGlzLm5hdmlnYXRlKGxpbmspO1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgZWwubm90Um91dGVySW5pdGlhbGl6ZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgbmV3IG5vdFJvdXRlcigpO1xuIiwiaW1wb3J0IG5vdENvbW1vbiBmcm9tIFwiLi4vY29tbW9uLmpzXCI7XG5pbXBvcnQgbm90QmFzZSBmcm9tIFwiLi4vYmFzZS5qc1wiO1xuXG5jb25zdCBMT0dfUFJFRklYID0gXCJBUElRdWVlXCI7XG5cbmNsYXNzIG5vdEFQSVF1ZXVlIGV4dGVuZHMgbm90QmFzZSB7XG4gICAgc3RhdGljIFFVRVVFX0NIRUNLX0lOVEVSVkFMID0gMTAwO1xuXG4gICAgc3RhdGljIE1BWF9CVVNZX1RJTUUgPSAzMDA7XG5cbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zID0ge30pIHtcbiAgICAgICAgc3VwZXIoe1xuICAgICAgICAgICAgd29ya2luZzoge1xuICAgICAgICAgICAgICAgIG5hbWU6IG9wdGlvbnMubmFtZSA/IG9wdGlvbnMubmFtZSA6IExPR19QUkVGSVgsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgb3B0aW9ucyxcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuYnVzeSA9IGZhbHNlO1xuICAgICAgICB0aGlzLnF1ZXVlID0gW107XG4gICAgICAgIHRoaXMuYnVzeVNpbmNlID0gLTE7XG4gICAgICAgIHRoaXMuYWZ0ZXJFbXB0eSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5zdGFydCgpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBzdG9wKCkge1xuICAgICAgICBpZiAodGhpcy5pbnRlcnZhbCkge1xuICAgICAgICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLmludGVydmFsKTtcbiAgICAgICAgICAgIHRoaXMuaW50ZXJ2YWwgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB0aGlzLmJ1c3kgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMuYnVzeVNpbmNlID0gLTE7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzdGFydCgpIHtcbiAgICAgICAgdGhpcy5zdG9wKCk7XG4gICAgICAgIHRoaXMuaW50ZXJ2YWwgPSBzZXRJbnRlcnZhbChcbiAgICAgICAgICAgIHRoaXMuY2hlY2tRdWV1ZS5iaW5kKHRoaXMpLFxuICAgICAgICAgICAgdGhpcy5RVUVVRV9DSEVDS19JTlRFUlZBTFxuICAgICAgICApO1xuICAgIH1cblxuICAgIGNoZWNrUXVldWUoKSB7XG4gICAgICAgIGlmICghdGhpcy5pc0VtcHR5KCkgJiYgIXRoaXMuaXNCdXN5KCkpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0QnVzeSgpXG4gICAgICAgICAgICAgICAgLnJ1bk5leHQoKVxuICAgICAgICAgICAgICAgIC50aGVuKHRoaXMuc2V0RnJlZS5iaW5kKHRoaXMpKVxuICAgICAgICAgICAgICAgIC5jYXRjaCgoZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmVycm9yICYmIHRoaXMuZXJyb3IoZSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0RnJlZSgpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKCF0aGlzLmlzQnVzeSgpKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuYWZ0ZXJFbXB0eSkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgdCA9IHRoaXMuYWZ0ZXJFbXB0eTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hZnRlckVtcHR5ID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICB0KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgYWRkVG9RdWV1ZSh0YXNrKSB7XG4gICAgICAgIHRoaXMucXVldWUucHVzaCh0YXNrKTtcbiAgICB9XG5cbiAgICBydW5OZXh0KCkge1xuICAgICAgICBsZXQgbGlzdCA9IHRoaXMucXVldWUubWFwKChhY3Rpb24pID0+IGFjdGlvbi50aXRsZSkuam9pbihcIiwgXCIpO1xuICAgICAgICB0aGlzLmRlYnVnICYmIHRoaXMuZGVidWcoYHRhc2tzIFske2xpc3R9XWApO1xuICAgICAgICBsZXQgdGFzayA9IHRoaXMucXVldWUuc2hpZnQoKTtcbiAgICAgICAgaWYgKCFub3RDb21tb24uaXNGdW5jKHRhc2suYWN0aW9uKSkge1xuICAgICAgICAgICAgdGhpcy5lcnJvciAmJlxuICAgICAgICAgICAgICAgIHRoaXMuZXJyb3IoXG4gICAgICAgICAgICAgICAgICAgIFwi0JIg0LfQsNC00LDQvdC40Lgg0L3QtdGCINC40YHQv9C+0LvQvdC40LzQvtC5INGH0LDRgdGC0LgsIGFjdGlvbiDQvdC1INGE0YPQvdC60YbQuNGPXCIsXG4gICAgICAgICAgICAgICAgICAgIHRhc2sudGl0bGVcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFub3RDb21tb24uaXNGdW5jKHRhc2sucmVzb2x2ZSkpIHtcbiAgICAgICAgICAgIHRoaXMuZXJyb3IgJiZcbiAgICAgICAgICAgICAgICB0aGlzLmVycm9yKFxuICAgICAgICAgICAgICAgICAgICBcItCSINC30LDQtNCw0L3QuNC4INC90LXRgiDQstC+0LfQstGA0LDRgtC90L7QuSDRh9Cw0YHRgtC4LCByZXNvbHZlINC90LUg0YTRg9C90LrRhtC40Y9cIixcbiAgICAgICAgICAgICAgICAgICAgdGFzay50aXRsZVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICByZXR1cm4gdGFzay5hY3Rpb24oKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGFzay5hY3Rpb24oKS50aGVuKHRhc2sucmVzb2x2ZSk7XG4gICAgfVxuXG4gICAgaXNCdXN5KCkge1xuICAgICAgICBsZXQgYnVzeSA9ICEhdGhpcy5idXN5LFxuICAgICAgICAgICAgbm93ID0gRGF0ZS5ub3coKSAvIDEwMDA7XG4gICAgICAgIGlmIChidXN5ICYmIHRoaXMuYnVzeVNpbmNlID4gLTEpIHtcbiAgICAgICAgICAgIGlmIChub3cgLSB0aGlzLmJ1c3lTaW5jZSA+IG5vdEFQSVF1ZXVlLk1BWF9CVVNZX1RJTUUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldEZyZWUoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc2V0QnVzeSgpIHtcbiAgICAgICAgdGhpcy5idXN5ID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5idXN5U2luY2UgPSBEYXRlLm5vdygpIC8gMTAwMDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgc2V0RnJlZSgpIHtcbiAgICAgICAgdGhpcy5idXN5ID0gZmFsc2U7XG4gICAgICAgIHRoaXMuYnVzeVNpbmNlID0gLTE7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGlzRW1wdHkoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnF1ZXVlLmxlbmd0aCA9PT0gMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDQmNGB0L/QvtC70L3QuNGC0LXQu9GMINC30LDQv9GA0L7RgdC+0LJcbiAgICAgKiBAcGFyYW0gICAgICB7ZnVuY3Rpb259ICAgYWN0aW9uICAgICAg0LTQvtC70LbQvdCwINCy0L7Qt9Cy0YDQsNGJ0LDRgtGMIFByb21pc2VcbiAgICAgKiBAcGFyYW0gICAgICB7ZnVuY3Rpb259ICAgW2FmdGVyRW1wdHkgPSB1bmRlZmluZWRdICDQsdGD0LTQtdGCINCy0YvQv9C+0LvQvdC10L3QsCDQutC+0LPQtNCwINC+0YfRg9GA0YPQtNGMINC+0L/Rg9GB0YLQtdC10YIg0Lgg0LHRg9C00LXRgiDRgdCy0L7QsdC+0LTQvdCwLiDQv9C+0LvQtdC30L3QsCDQv9GA0Lgg0L/QsNGH0LrQtSDQvtC00L3QvtGC0LjQv9C90YvRhSDQt9Cw0LTQsNC90LjQuVxuICAgICAqIEBwYXJhbSAgICAgICB7c3RyaW5nfSAgICBbdGl0bGUgPSAnJ10gICAgb3B0aW9uYWwgdGl0bGUgb2YgcmVxdWVzdFxuICAgICAqIEByZXR1cm5zICAgIHtQcm9taXNlfSAgICDRgNC10LfRg9C70YzRgtCw0YIg0YTRg9C90LrRhtC40LhcbiAgICAgKiovXG4gICAgcnVuKGFjdGlvbiwgYWZ0ZXJFbXB0eSA9IHVuZGVmaW5lZCwgdGl0bGUgPSBcIlwiKSB7XG4gICAgICAgIGlmIChhZnRlckVtcHR5ICYmIHR5cGVvZiB0aGlzLmFmdGVyRW1wdHkgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICAgIHRoaXMuYWZ0ZXJFbXB0eSA9IGFmdGVyRW1wdHk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgdGhpcy5hZGRUb1F1ZXVlKHsgYWN0aW9uLCByZXNvbHZlLCB0aXRsZSB9KTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVycm9yICYmIHRoaXMuZXJyb3IoZSk7XG4gICAgICAgICAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBhY3Rpb25Jc1F1ZXVlZCh0aXRsZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5xdWV1ZS5zb21lKChxdWV1ZWQpID0+IHF1ZXVlZC50aXRsZSA9PSB0aXRsZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKlxuICAgICAqIEBwYXJhbSAgICAgIHtmdW5jdGlvbn0gICBhY3Rpb24gICAgICDQtNC+0LvQttC90LAg0LLQvtC30LLRgNCw0YnQsNGC0YwgUHJvbWlzZVxuICAgICAqIEBwYXJhbSAgICAgIHtmdW5jdGlvbn0gICBbYWZ0ZXJFbXB0eSA9IHVuZGVmaW5lZF0gINCx0YPQtNC10YIg0LLRi9C/0L7Qu9C90LXQvdCwINC60L7Qs9C00LAg0L7Rh9GD0YDRg9C00Ywg0L7Qv9GD0YHRgtC10LXRgiDQuCDQsdGD0LTQtdGCINGB0LLQvtCx0L7QtNC90LAuINC/0L7Qu9C10LfQvdCwINC/0YDQuCDQv9Cw0YfQutC1INC+0LTQvdC+0YLQuNC/0L3Ri9GFINC30LDQtNCw0L3QuNC5XG4gICAgICogQHBhcmFtICAgICAgIHtzdHJpbmd9ICAgIFt0aXRsZSA9ICcnXSAgICBvcHRpb25hbCB0aXRsZSBvZiByZXF1ZXN0XG4gICAgICogQHJldHVybiAgICB7UHJvbWlzZX1cbiAgICAgKiBAbWVtYmVyb2Ygbm90QVBJUXVldWVcbiAgICAgKi9cbiAgICBydW5JZk5vdFF1ZXVlZChhY3Rpb24sIGFmdGVyRW1wdHkgPSB1bmRlZmluZWQsIHRpdGxlID0gXCJcIikge1xuICAgICAgICBpZiAodGhpcy5hY3Rpb25Jc1F1ZXVlZCh0aXRsZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnJ1bihhY3Rpb24sIGFmdGVyRW1wdHksIHRpdGxlKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgbm90QVBJUXVldWU7XG4iLCJsZXQgbm90QVBJT3B0aW9ucyA9IHtcbiAgICBycHM6IDUwLFxuICAgIHByb3RvY29sOiAnaHR0cCcsXG4gICAgaG9zdDogJ2xvY2FsaG9zdCcsXG4gICAgcG9ydDogOTAwMFxufTtcblxuZXhwb3J0IGRlZmF1bHQgbm90QVBJT3B0aW9ucztcbiIsImltcG9ydCBub3RCYXNlIGZyb20gJy4uL2Jhc2UuanMnO1xuY29uc3QgTE9HX1BSRUZJWCA9ICdBUElDb25uZWN0aW9uJztcblxuY2xhc3Mgbm90QVBJQ29ubmVjdGlvbiBleHRlbmRzIG5vdEJhc2V7XG4gICAgc3RhdGljIGludDtcbiAgICBzdGF0aWMgb25saW5lO1xuXG4gICAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICBvcHRpb25zLFxuICAgICAgICAgICAgd29ya2luZzoge1xuICAgICAgICAgICAgICAgIG5hbWU6IG9wdGlvbnMubmFtZT9vcHRpb25zLm5hbWU6TE9HX1BSRUZJWFxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5vbmxpbmUgPSBudWxsO1xuICAgICAgICB0aGlzLnJ1bigpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBydW4oKSB7XG4gICAgICAgIHRoaXMuaW50ID0gd2luZG93LnNldEludGVydmFsKHRoaXMuY2hlY2suYmluZCh0aGlzKSwgMTAwMCk7XG4gICAgfVxuXG4gICAgcGF1c2UoKSB7XG4gICAgICAgIHdpbmRvdy5jbGVhckludGVydmFsKHRoaXMuaW50KTtcbiAgICB9XG5cbiAgICByZXN1bWUoKSB7XG4gICAgICAgIHRoaXMucnVuKCk7XG4gICAgfVxuXG4gICAgaXNPbmxpbmUoKXtcbiAgICAgICAgcmV0dXJuIHdpbmRvdy5uYXZpZ2F0b3Iub25MaW5lO1xuICAgIH1cblxuICAgIGNoZWNrKCkge1xuICAgICAgICBsZXQgdCA9IHRoaXMuaXNPbmxpbmUoKTtcbiAgICAgICAgaWYgKHRoaXMub25saW5lICE9PSBudWxsKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5vbmxpbmUgIT09IHQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNoYW5nZVN0YXRlKHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMub25saW5lID0gdDtcbiAgICB9XG5cbiAgICBjaGFuZ2VTdGF0ZShvbmxpbmUgPSBmYWxzZSkge1xuICAgICAgICBpZiAob25saW5lKSB7XG4gICAgICAgICAgICB0aGlzLmVtaXQoJ29ubGluZScpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5lbWl0KCdvZmZsaW5lJyk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IG5vdEFQSUNvbm5lY3Rpb247XG4iLCJpbXBvcnQgbm90Q29tbW9uIGZyb20gXCIuL2NvbW1vblwiO1xuaW1wb3J0IHsgd3JpdGFibGUgfSBmcm9tIFwic3ZlbHRlL3N0b3JlXCI7XG5cbmNvbnN0IEFMTCA9IHt9O1xuXG5mdW5jdGlvbiBleGlzdChrZXkpIHtcbiAgICByZXR1cm4gbm90Q29tbW9uLm9iakhhcyhBTEwsIGtleSk7XG59XG5cbmZ1bmN0aW9uIGdldChrZXkpIHtcbiAgICBpZiAoZXhpc3Qoa2V5KSkge1xuICAgICAgICByZXR1cm4gQUxMW2tleV07XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlKFxuICAgIGtleSxcbiAgICBwcm9wcyA9IHtcbiAgICAgICAgcmF3OiBbXSxcbiAgICAgICAgZmlsdGVyZWQ6IFtdLFxuICAgICAgICBzZWxlY3RlZDoge30sXG4gICAgfVxuKSB7XG4gICAgaWYgKCFleGlzdChrZXkpKSB7XG4gICAgICAgIGlmIChPYmplY3Qua2V5cyhwcm9wcykubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgQUxMW2tleV0gPSB7fTtcbiAgICAgICAgICAgIE9iamVjdC5rZXlzKHByb3BzKS5mb3JFYWNoKChuYW1lKSA9PiB7XG4gICAgICAgICAgICAgICAgQUxMW2tleV1bbmFtZV0gPSB3cml0YWJsZShwcm9wc1tuYW1lXSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInN0b3JlJ3MgcHJvcHMgd2Fzbid0IHNwZWNpZmllZFwiKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gQUxMW2tleV07XG59XG5cbi8qKlxuICogQ3JlYXRlcyBvYmplY3QgdGhhdCBpcyBmYWtlIFN0b3JlXG4gKiBTb21lIHRpbWUgdGhpcyBpcyB1c2VmdWwgd2hlbiB5b3UgbmVlZCB0byBpbml0aWFsaXplIGxvY2FsIHZhcixcbiAqIGJlZm9yZSB5b3UgY291bGQgZ2V0IGFjdHVhbCBTdG9yZXMgZnJvbSBjZW50cmFsIHN0b3JhZ2UgYnkgaXRzIElEXG4gKlx0QHBhcmFtcyB7bWl4ZWR9IHZhbCBcdGRhdGEgb2YgdHlwZSB0aGF0IGlzIGFjdHVhbCBzdG9yYWdlIHdpbGwgY29udGFpblxuICogQHJldHVybnMge09iamVjdH1cbiAqL1xuXG5mdW5jdGlvbiBmYWtlKHZhbCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHN1YnNjcmliZShmKSB7XG4gICAgICAgICAgICBmKHZhbCk7XG4gICAgICAgICAgICByZXR1cm4gKCkgPT4ge307XG4gICAgICAgIH0sXG4gICAgICAgIHNldCgpIHt9LFxuICAgIH07XG59XG5cbmV4cG9ydCB7IGNyZWF0ZSwgZ2V0LCBmYWtlIH07XG4iLCJjb25zdFxuICAgIC8vaW50ZXJmYWNlXG4gICAgT1BUX0RFRkFVTFRfSU5ERVhfRklFTERfTkFNRV9QUklPUklUWSA9IFsnX2lkJywgJ2lkJywgJ0lEJ10sXG4gICAgREVGQVVMVF9GSUxURVIgPSB7fSxcbiAgICBERUZBVUxUX1NFQVJDSCA9ICcnLFxuICAgIERFRkFVTFRfUkVUVVJOID0ge30sXG4gICAgREVGQVVMVF9QQUdFX05VTUJFUiA9IDEsXG4gICAgREVGQVVMVF9QQUdFX1NJWkUgPSAxMCxcbiAgICAvL3JlY29yZFxuICAgIE1FVEFfSU5URVJGQUNFID0gU3ltYm9sKCdpbnRlcmZhY2UnKSxcbiAgICBNRVRBX01BUF9UT19JTlRFUkZBQ0UgPSBbXG4gICAgICAgICdnZXRBY3Rpb25zQ291bnQnLFxuICAgICAgICAnZ2V0QWN0aW9ucycsXG4gICAgICAgICdzZXRGaW5kQnknLFxuICAgICAgICAncmVzZXRGaWx0ZXInLFxuICAgICAgICAnc2V0RmlsdGVyJyxcbiAgICAgICAgJ2dldEZpbHRlcicsXG4gICAgICAgICdzZXRTb3J0ZXInLFxuICAgICAgICAnZ2V0U29ydGVyJyxcbiAgICAgICAgJ3Jlc2V0U29ydGVyJyxcbiAgICAgICAgJ3NldFBhZ2VOdW1iZXInLFxuICAgICAgICAnc2V0UGFnZVNpemUnLFxuICAgICAgICAnc2V0UGFnZXInLFxuICAgICAgICAnc2V0UmV0dXJuJyxcbiAgICAgICAgJ3NldFNlYXJjaCcsXG4gICAgICAgICdnZXRTZWFyY2gnLFxuICAgICAgICAncmVzZXRTZWFyY2gnLFxuICAgICAgICAncmVzZXRQYWdlcicsXG4gICAgICAgICdnZXRQYWdlcicsXG4gICAgICAgICdhZGRGb3JtRmllbGRUeXBlJyxcbiAgICAgICAgJ2FkZEZvcm1GaWVsZCcsXG4gICAgICAgICdnZXRGaWVsZFR5cGVzJyxcbiAgICAgICAgJ2dldEFjdGlvbkZvcm1GaWVsZHMnXG4gICAgXSxcbiAgICBERUZBVUxUX0FDVElPTl9QUkVGSVggPSAnJCc7XG5cbmV4cG9ydCB7XG4gICAgT1BUX0RFRkFVTFRfSU5ERVhfRklFTERfTkFNRV9QUklPUklUWSxcbiAgICBERUZBVUxUX0ZJTFRFUixcbiAgICBERUZBVUxUX1BBR0VfTlVNQkVSLFxuICAgIERFRkFVTFRfUEFHRV9TSVpFLFxuICAgIERFRkFVTFRfU0VBUkNILFxuICAgIERFRkFVTFRfUkVUVVJOLFxuICAgIE1FVEFfSU5URVJGQUNFLFxuICAgIE1FVEFfTUFQX1RPX0lOVEVSRkFDRSxcbiAgICBERUZBVUxUX0FDVElPTl9QUkVGSVhcbn07XG4iLCJpbXBvcnQgbm90UGF0aCBmcm9tIFwibm90LXBhdGhcIjtcbmltcG9ydCBub3RDb21tb24gZnJvbSBcIi4vY29tbW9uLmpzXCI7XG5pbXBvcnQgbm90QmFzZSBmcm9tIFwiLi9iYXNlLmpzXCI7XG5cbmNvbnN0IE9QVF9ERUZBVUxUX0lOREVYX0ZJRUxEX05BTUVfUFJJT1JJVFkgPSBbXCJfaWRcIiwgXCJpZFwiLCBcIklEXCJdLFxuICAgIERFRkFVTFRfRklMVEVSID0ge30sXG4gICAgREVGQVVMVF9TRUFSQ0ggPSBcIlwiLFxuICAgIERFRkFVTFRfUkVUVVJOID0ge30sXG4gICAgREVGQVVMVF9QQUdFX05VTUJFUiA9IDAsXG4gICAgREVGQVVMVF9QQUdFX1NJWkUgPSAxMCxcbiAgICBERUZBVUxUX0FDVElPTl9QUkVGSVggPSBcIiRcIixcbiAgICBERUZBVUxUX1dTX1JPVVRFX0FDVElPTl9TUExJVFRFUiA9IFwiLy9cIjtcblxuY2xhc3Mgbm90SW50ZXJmYWNlIGV4dGVuZHMgbm90QmFzZSB7XG4gICAgY29uc3RydWN0b3IobWFuaWZlc3QsIG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIoe1xuICAgICAgICAgICAgd29ya2luZzoge1xuICAgICAgICAgICAgICAgIG5hbWU6XG4gICAgICAgICAgICAgICAgICAgIFwibmV0d29yayBpbnRlcmZhY2UgZm9yOiBcIiArXG4gICAgICAgICAgICAgICAgICAgIChtYW5pZmVzdC5tb2RlbCA/IG1hbmlmZXN0Lm1vZGVsIDogXCJ1bmtub3duXCIpLFxuICAgICAgICAgICAgICAgIGZpbHRlcjogREVGQVVMVF9GSUxURVIsXG4gICAgICAgICAgICAgICAgc2VhcmNoOiBERUZBVUxUX1NFQVJDSCxcbiAgICAgICAgICAgICAgICByZXR1cm46IERFRkFVTFRfUkVUVVJOLFxuICAgICAgICAgICAgICAgIHBhZ2VyOiB7XG4gICAgICAgICAgICAgICAgICAgIHNpemU6IERFRkFVTFRfUEFHRV9TSVpFLFxuICAgICAgICAgICAgICAgICAgICBwYWdlOiBERUZBVUxUX1BBR0VfTlVNQkVSLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgb3B0aW9ucyxcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMubWFuaWZlc3QgPSBtYW5pZmVzdDtcbiAgICAgICAgdGhpcy5pbml0QWN0aW9ucygpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBpbml0QWN0aW9ucygpIHtcbiAgICAgICAgaWYgKHRoaXMuZ2V0QWN0aW9uc0NvdW50KCkgPiAwKSB7XG4gICAgICAgICAgICBsZXQgYWN0aW9ucyA9IHRoaXMuZ2V0QWN0aW9ucygpO1xuICAgICAgICAgICAgZm9yIChsZXQgYWN0aW9uTmFtZSBpbiBhY3Rpb25zKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5pbml0QWN0aW9uKGFjdGlvbk5hbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgaW5pdEFjdGlvbihhY3Rpb25OYW1lKSB7XG4gICAgICAgIGlmICghbm90Q29tbW9uLm9iakhhcyh0aGlzLCBERUZBVUxUX0FDVElPTl9QUkVGSVggKyBhY3Rpb25OYW1lKSkge1xuICAgICAgICAgICAgdGhpc1tERUZBVUxUX0FDVElPTl9QUkVGSVggKyBhY3Rpb25OYW1lXSA9IChcbiAgICAgICAgICAgICAgICBvcHRzLFxuICAgICAgICAgICAgICAgIGhlYWRlcnMsXG4gICAgICAgICAgICAgICAgZmlsZVVwbG9hZCA9IGZhbHNlLFxuICAgICAgICAgICAgICAgIGZpbGVzXG4gICAgICAgICAgICApID0+XG4gICAgICAgICAgICAgICAgdGhpcy5yZXF1ZXN0KFxuICAgICAgICAgICAgICAgICAgICB0aGlzLFxuICAgICAgICAgICAgICAgICAgICBhY3Rpb25OYW1lLFxuICAgICAgICAgICAgICAgICAgICBvcHRzLFxuICAgICAgICAgICAgICAgICAgICBoZWFkZXJzLFxuICAgICAgICAgICAgICAgICAgICBmaWxlVXBsb2FkLFxuICAgICAgICAgICAgICAgICAgICBmaWxlc1xuICAgICAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXF1ZXN0SFRUUChcbiAgICAgICAgcmVjb3JkLFxuICAgICAgICBhY3Rpb25OYW1lLFxuICAgICAgICBwYXJhbXMsXG4gICAgICAgIGhlYWRlcnMgPSB7fSxcbiAgICAgICAgZmlsZVVwbG9hZCA9IGZhbHNlLFxuICAgICAgICBmaWxlc1xuICAgICkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgbGV0IGNvbXBvc2l0ZURhdGEgPSBPYmplY3QuYXNzaWduKFxuICAgICAgICAgICAgICAgIHt9LFxuICAgICAgICAgICAgICAgIHJlY29yZC5nZXREYXRhICYmIHR5cGVvZiByZWNvcmQuZ2V0RGF0YSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgICAgICAgICAgICAgID8gcmVjb3JkLmdldERhdGEoKVxuICAgICAgICAgICAgICAgICAgICA6IHJlY29yZCxcbiAgICAgICAgICAgICAgICBwYXJhbXNcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBsZXQgYWN0aW9uRGF0YSA9IHRoaXMuZ2V0QWN0aW9uRGF0YShhY3Rpb25OYW1lKSxcbiAgICAgICAgICAgICAgICByZXF1ZXN0UGFyYW1zID0gdGhpcy5jb2xsZWN0UmVxdWVzdERhdGEoYWN0aW9uRGF0YSksXG4gICAgICAgICAgICAgICAgcmVxdWVzdFBhcmFtc0VuY29kZWQgPSB0aGlzLmVuY29kZVJlcXVlc3QocmVxdWVzdFBhcmFtcyksXG4gICAgICAgICAgICAgICAgLy9pZCA9IHRoaXMuZ2V0SUQoY29tcG9zaXRlRGF0YSwgYWN0aW9uRGF0YSwgYWN0aW9uTmFtZSksXG4gICAgICAgICAgICAgICAgYXBpU2VydmVyVVJMID0gdGhpcy5nZXRTZXJ2ZXJVUkwoKSxcbiAgICAgICAgICAgICAgICB1cmwgPSB0aGlzLmdldFVSTChjb21wb3NpdGVEYXRhLCBhY3Rpb25EYXRhLCBhY3Rpb25OYW1lKSxcbiAgICAgICAgICAgICAgICBvcHRzID0ge307XG4gICAgICAgICAgICBpZiAoZmlsZVVwbG9hZCkge1xuICAgICAgICAgICAgICAgIHVybCA9IHRoaXMuZ2V0VVJMKHBhcmFtcywgYWN0aW9uRGF0YSwgYWN0aW9uTmFtZSk7XG4gICAgICAgICAgICAgICAgY29uc3QgZmQgPSBuZXcgRm9ybURhdGEoKTtcbiAgICAgICAgICAgICAgICBmZC5hcHBlbmQoXCJmaWxlXCIsIGZpbGVzKTtcbiAgICAgICAgICAgICAgICBvcHRzLmJvZHkgPSBmZDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICBbXCJPUFRJT05TXCIsIFwiR0VUXCJdLmluZGV4T2YoXG4gICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb25EYXRhLm1ldGhvZC50b1VwcGVyQ2FzZSgpXG4gICAgICAgICAgICAgICAgICAgICkgPT09IC0xXG4gICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgIG9wdHMgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtZXRob2Q6IGFjdGlvbkRhdGEubWV0aG9kLFxuICAgICAgICAgICAgICAgICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVjb3JkLmdldERhdGEgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZW9mIHJlY29yZC5nZXREYXRhID09PSBcImZ1bmN0aW9uXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyByZWNvcmQuZ2V0RGF0YSgpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogcmVjb3JkXG4gICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFjY2VwdDogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG9wdHMubWV0aG9kID0gYWN0aW9uRGF0YS5tZXRob2QudG9VcHBlckNhc2UoKTtcbiAgICAgICAgICAgIGlmIChoZWFkZXJzICYmIE9iamVjdC5rZXlzKGhlYWRlcnMpLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIG9wdHMuaGVhZGVycyA9IGhlYWRlcnM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZmV0Y2goYXBpU2VydmVyVVJMICsgdXJsICsgcmVxdWVzdFBhcmFtc0VuY29kZWQsIG9wdHMpLnRoZW4oXG4gICAgICAgICAgICAgICAgKHJlc3BvbnNlKSA9PiByZXNwb25zZS5qc29uKClcbiAgICAgICAgICAgICk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIG5vdENvbW1vbi5lcnJvcihlKTtcbiAgICAgICAgICAgIG5vdENvbW1vbi5yZXBvcnQoZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXF1ZXN0V1MocmVjb3JkLCBhY3Rpb25OYW1lKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBsZXQgYWN0aW9uRGF0YSA9IHRoaXMuZ2V0QWN0aW9uRGF0YShhY3Rpb25OYW1lKSxcbiAgICAgICAgICAgICAgICByZXF1ZXN0UGFyYW1zID0gdGhpcy5jb2xsZWN0UmVxdWVzdERhdGEoYWN0aW9uRGF0YSk7XG4gICAgICAgICAgICBjb25zdCBXUyA9IG5vdENvbW1vbi5nZXRBcHAoKS5nZXRXU0NsaWVudCgpO1xuICAgICAgICAgICAgY29uc3QgbWVzc2FnZU5hbWUgPSB0aGlzLmdldFdTUmVxdWVzdE5hbWUoYWN0aW9uTmFtZSk7XG4gICAgICAgICAgICBjb25zdCBwYXlsb2FkID0gT2JqZWN0LmFzc2lnbih7fSwgcmVxdWVzdFBhcmFtcywgcmVjb3JkLmdldERhdGEoKSk7XG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgbm90Q29tbW9uLm9iakhhcyhhY3Rpb25EYXRhLCBcInR5cGVcIikgJiZcbiAgICAgICAgICAgICAgICB0eXBlb2YgYWN0aW9uRGF0YS50eXBlID09PSBcInN0cmluZ1wiICYmXG4gICAgICAgICAgICAgICAgYWN0aW9uRGF0YS50eXBlLmxlbmd0aCAmJlxuICAgICAgICAgICAgICAgIGFjdGlvbkRhdGEudHlwZSAhPT0gXCJyZXF1ZXN0XCJcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIHJldHVybiBXUy5tZXNzYWdlKGFjdGlvbkRhdGEudHlwZSwgbWVzc2FnZU5hbWUsIHBheWxvYWQpLnRoZW4oXG4gICAgICAgICAgICAgICAgICAgIChyZXNwb25zZSkgPT4gcmVzcG9uc2UucGF5bG9hZFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBXUy5yZXF1ZXN0KG1lc3NhZ2VOYW1lLCBwYXlsb2FkKS50aGVuKFxuICAgICAgICAgICAgICAgICAgICAocmVzcG9uc2UpID0+IHJlc3BvbnNlLnBheWxvYWRcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBub3RDb21tb24uZXJyb3IoZSk7XG4gICAgICAgICAgICBub3RDb21tb24ucmVwb3J0KGUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmVxdWVzdCgpIHtcbiAgICAgICAgbGV0IGFjdGlvbkRhdGEgPSB0aGlzLmdldEFjdGlvbkRhdGEoYXJndW1lbnRzWzFdKTtcbiAgICAgICAgc3dpdGNoICh0aGlzLnNlbGVjdFRyYW5zcG9ydChhY3Rpb25EYXRhKSkge1xuICAgICAgICAgICAgY2FzZSBcIndzXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVxdWVzdFdTKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgICAgICBjYXNlIFwiaHR0cFwiOlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnJlcXVlc3RIVFRQKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIk9mZmxpbmVcIik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB3c0lzVXAoYWN0aW9uRGF0YSkge1xuICAgICAgICBpZiAoYWN0aW9uRGF0YS53cyA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgbGV0IGNsaWVudDtcbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICBub3RDb21tb24ub2JqSGFzKGFjdGlvbkRhdGEsIFwid3NDbGllbnRcIikgJiZcbiAgICAgICAgICAgICAgICBhY3Rpb25EYXRhLndzQ2xpZW50XG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICBjbGllbnQgPSBub3RDb21tb24uZ2V0QXBwKCkuZ2V0V1NDbGllbnQoYWN0aW9uRGF0YS53c0NsaWVudCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNsaWVudCA9IG5vdENvbW1vbi5nZXRBcHAoKS5nZXRXU0NsaWVudCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGNsaWVudCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBzZWxlY3RUcmFuc3BvcnQoYWN0aW9uRGF0YSkge1xuICAgICAgICBpZiAodGhpcy53c0lzVXAoYWN0aW9uRGF0YSkpIHtcbiAgICAgICAgICAgIHJldHVybiBcIndzXCI7IC8vZm9yIHdzL3dzc1xuICAgICAgICB9XG4gICAgICAgIGlmIChub3RDb21tb24ub2JqSGFzKGFjdGlvbkRhdGEsIFwibWV0aG9kXCIpKSB7XG4gICAgICAgICAgICByZXR1cm4gXCJodHRwXCI7IC8vZm9yIGh0dHAvaHR0cHNcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7IC8vZm9yIG9mZmxpbmVcbiAgICB9XG5cbiAgICBnZXRNb2RlbE5hbWUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzICYmIHRoaXMubWFuaWZlc3QgPyB0aGlzLm1hbmlmZXN0Lm1vZGVsIDogbnVsbDtcbiAgICB9XG5cbiAgICBnZXRBY3Rpb25EYXRhKGFjdGlvbk5hbWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0QWN0aW9ucygpICYmIHRoaXMuZ2V0QWN0aW9ucygpW2FjdGlvbk5hbWVdXG4gICAgICAgICAgICA/IHRoaXMuZ2V0QWN0aW9ucygpW2FjdGlvbk5hbWVdXG4gICAgICAgICAgICA6IG51bGw7XG4gICAgfVxuXG4gICAgZ2V0QWN0aW9uc0NvdW50KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRBY3Rpb25zKCkgPyBPYmplY3Qua2V5cyh0aGlzLmdldEFjdGlvbnMoKSkubGVuZ3RoIDogMDtcbiAgICB9XG5cbiAgICBnZXRBY3Rpb25zKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5tYW5pZmVzdCAmJiB0aGlzLm1hbmlmZXN0LmFjdGlvbnNcbiAgICAgICAgICAgID8gdGhpcy5tYW5pZmVzdC5hY3Rpb25zXG4gICAgICAgICAgICA6IHt9O1xuICAgIH1cblxuICAgIHBhcnNlUGFyYW1zKHN0YXJ0LCBlbmQsIGxpbmUsIHJlY29yZCkge1xuICAgICAgICBsZXQgZmllbGROYW1lID0gXCJcIjtcbiAgICAgICAgbGV0IGxlbiA9IHN0YXJ0Lmxlbmd0aDtcbiAgICAgICAgd2hpbGUgKGxpbmUuaW5kZXhPZihzdGFydCkgPiAtMSkge1xuICAgICAgICAgICAgbGV0IGluZCA9IGxpbmUuaW5kZXhPZihzdGFydCk7XG4gICAgICAgICAgICBsZXQgc3RhcnRTbGljZSA9IGluZCArIGxlbjtcbiAgICAgICAgICAgIGxldCBlbmRTbGljZSA9IGxpbmUuaW5kZXhPZihlbmQpO1xuICAgICAgICAgICAgaWYgKGluZCA+IGVuZFNsaWNlKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmaWVsZE5hbWUgPSBsaW5lLnNsaWNlKHN0YXJ0U2xpY2UsIGVuZFNsaWNlKTtcbiAgICAgICAgICAgIGlmIChmaWVsZE5hbWUgPT0gXCJcIikgYnJlYWs7XG4gICAgICAgICAgICB0aGlzLmxvZyAmJlxuICAgICAgICAgICAgICAgIHRoaXMubG9nKFxuICAgICAgICAgICAgICAgICAgICBzdGFydCArIGZpZWxkTmFtZSArIGVuZCxcbiAgICAgICAgICAgICAgICAgICAgbm90UGF0aC5nZXQoZmllbGROYW1lLCByZWNvcmQpXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGxpbmUgPSBsaW5lLnJlcGxhY2UoXG4gICAgICAgICAgICAgICAgc3RhcnQgKyBmaWVsZE5hbWUgKyBlbmQsXG4gICAgICAgICAgICAgICAgbm90UGF0aC5nZXQoZmllbGROYW1lLCByZWNvcmQpXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBsaW5lO1xuICAgIH1cblxuICAgIHBhcnNlTGluZShsaW5lLCByZWNvcmQsIGFjdGlvbk5hbWUpIHtcbiAgICAgICAgbGluZSA9IGxpbmUucmVwbGFjZShcIjptb2RlbE5hbWVcIiwgdGhpcy5tYW5pZmVzdC5tb2RlbCk7XG4gICAgICAgIGxpbmUgPSBsaW5lLnJlcGxhY2UoXCI6YWN0aW9uTmFtZVwiLCBhY3Rpb25OYW1lKTtcbiAgICAgICAgbGluZSA9IHRoaXMucGFyc2VQYXJhbXMoXCI6cmVjb3JkW1wiLCBcIl1cIiwgbGluZSwgcmVjb3JkKTtcbiAgICAgICAgbGluZSA9IHRoaXMucGFyc2VQYXJhbXMoXCI6XCIsIFwiP1wiLCBsaW5lLCByZWNvcmQpO1xuICAgICAgICByZXR1cm4gbGluZTtcbiAgICB9XG5cbiAgICBnZXRVUkwocmVjb3JkLCBhY3Rpb25EYXRhLCBhY3Rpb25OYW1lKSB7XG4gICAgICAgIHZhciBsaW5lID1cbiAgICAgICAgICAgIHRoaXMucGFyc2VMaW5lKHRoaXMubWFuaWZlc3QudXJsLCByZWNvcmQsIGFjdGlvbk5hbWUpICtcbiAgICAgICAgICAgIChub3RDb21tb24ub2JqSGFzKGFjdGlvbkRhdGEsIFwicG9zdEZpeFwiKVxuICAgICAgICAgICAgICAgID8gdGhpcy5wYXJzZUxpbmUoYWN0aW9uRGF0YS5wb3N0Rml4LCByZWNvcmQsIGFjdGlvbk5hbWUpXG4gICAgICAgICAgICAgICAgOiBcIlwiKTtcbiAgICAgICAgcmV0dXJuIGxpbmU7XG4gICAgfVxuXG4gICAgZ2V0U2VydmVyVVJMKCkge1xuICAgICAgICByZXR1cm4gbm90Q29tbW9uLmdldEFwcCgpXG4gICAgICAgICAgICA/IG5vdENvbW1vbi5nZXRBcHAoKS5nZXRPcHRpb25zKFwiYXBpLnNlcnZlci51cmxcIiwgXCJcIilcbiAgICAgICAgICAgIDogXCJcIjtcbiAgICB9XG5cbiAgICBnZXRXU1JlcXVlc3ROYW1lKGFjdGlvbk5hbWUpIHtcbiAgICAgICAgY29uc3QgbW9kZWxOYW1lID0gdGhpcy5tYW5pZmVzdC5tb2RlbDtcbiAgICAgICAgcmV0dXJuIGAke21vZGVsTmFtZX0ke0RFRkFVTFRfV1NfUk9VVEVfQUNUSU9OX1NQTElUVEVSfSR7YWN0aW9uTmFtZX1gO1xuICAgIH1cblxuICAgIGVuY29kZVJlcXVlc3QoZGF0YSkge1xuICAgICAgICBsZXQgcCA9IFwiP1wiO1xuICAgICAgICBmb3IgKGxldCB0IGluIGRhdGEpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZGF0YVt0XSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkYXRhW3RdICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcCArPVxuICAgICAgICAgICAgICAgICAgICBlbmNvZGVVUklDb21wb25lbnQodCkgK1xuICAgICAgICAgICAgICAgICAgICBcIj1cIiArXG4gICAgICAgICAgICAgICAgICAgIGVuY29kZVVSSUNvbXBvbmVudChcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFbdF0uY29uc3RydWN0b3IgPT09IE9iamVjdFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gSlNPTi5zdHJpbmdpZnkoZGF0YVt0XSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGRhdGFbdF1cbiAgICAgICAgICAgICAgICAgICAgKSArXG4gICAgICAgICAgICAgICAgICAgIFwiJlwiO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vZm9yIHRlc3QgcHVycG9zZSBvbmx5LCBzcGVjaWFsIHRlc3Qgc2VydmVyIG5lZWRlZFxuICAgICAgICBpZiAodGhpcy5nZXRPcHRpb25zKFwidGVzdFwiKSkge1xuICAgICAgICAgICAgcCArPSBcIiZ0ZXN0PTFcIjtcbiAgICAgICAgICAgIGlmICh0aGlzLmdldE9wdGlvbnMoXCJ0ZXN0LnNlc3Npb25cIikpIHtcbiAgICAgICAgICAgICAgICBwICs9IFwiJnNlc3Npb249XCIgKyB0aGlzLmdldE9wdGlvbnMoXCJ0ZXN0LnNlc3Npb25cIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5nZXRPcHRpb25zKFwidGVzdC5zZXNzaW9uXCIpKSB7XG4gICAgICAgICAgICAgICAgcCArPSBcIiZyb2xlPVwiICsgdGhpcy5nZXRPcHRpb25zKFwidGVzdC5yb2xlXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwO1xuICAgIH1cblxuICAgIGNvbGxlY3RSZXF1ZXN0RGF0YShhY3Rpb25EYXRhKSB7XG4gICAgICAgIGxldCByZXF1ZXN0RGF0YSA9IHt9O1xuICAgICAgICBpZiAoXG4gICAgICAgICAgICBub3RDb21tb24ub2JqSGFzKGFjdGlvbkRhdGEsIFwiZGF0YVwiKSAmJlxuICAgICAgICAgICAgQXJyYXkuaXNBcnJheShhY3Rpb25EYXRhLmRhdGEpXG4gICAgICAgICkge1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhY3Rpb25EYXRhLmRhdGEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBsZXQgZGF0YVByb3ZpZGVyTmFtZSA9XG4gICAgICAgICAgICAgICAgICAgIFwiZ2V0XCIgKyBub3RDb21tb24uY2FwaXRhbGl6ZUZpcnN0TGV0dGVyKGFjdGlvbkRhdGEuZGF0YVtpXSk7XG4gICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICB0aGlzW2RhdGFQcm92aWRlck5hbWVdICYmXG4gICAgICAgICAgICAgICAgICAgIHR5cGVvZiB0aGlzW2RhdGFQcm92aWRlck5hbWVdID09PSBcImZ1bmN0aW9uXCJcbiAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGRhdGEgPSB0aGlzW2RhdGFQcm92aWRlck5hbWVdKCksXG4gICAgICAgICAgICAgICAgICAgICAgICByZXMgPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwicGFnZXJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInNvcnRlclwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiZmlsdGVyXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJzZWFyY2hcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInJldHVyblwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXS5pbmRleE9mKGFjdGlvbkRhdGEuZGF0YVtpXSkgPiAtMVxuICAgICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc1thY3Rpb25EYXRhLmRhdGFbaV1dID0gZGF0YTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcyA9IGRhdGE7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmVxdWVzdERhdGEgPSBPYmplY3QuYXNzaWduKHJlcXVlc3REYXRhLCByZXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVxdWVzdERhdGE7XG4gICAgfVxuXG4gICAgZ2V0SUQocmVjb3JkLCBhY3Rpb25EYXRhKSB7XG4gICAgICAgIGxldCByZXN1bHRJZCxcbiAgICAgICAgICAgIGxpc3QgPSBPUFRfREVGQVVMVF9JTkRFWF9GSUVMRF9OQU1FX1BSSU9SSVRZLFxuICAgICAgICAgICAgcHJlZml4ZXMgPSBbXCJcIiwgdGhpcy5tYW5pZmVzdC5tb2RlbF07XG4gICAgICAgIGlmIChub3RDb21tb24ub2JqSGFzKGFjdGlvbkRhdGEsIFwiaW5kZXhcIikgJiYgYWN0aW9uRGF0YS5pbmRleCkge1xuICAgICAgICAgICAgbGlzdCA9IFthY3Rpb25EYXRhLmluZGV4XS5jb25jYXQoXG4gICAgICAgICAgICAgICAgT1BUX0RFRkFVTFRfSU5ERVhfRklFTERfTkFNRV9QUklPUklUWVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGxldCBwcmUgb2YgcHJlZml4ZXMpIHtcbiAgICAgICAgICAgIGZvciAobGV0IHQgb2YgbGlzdCkge1xuICAgICAgICAgICAgICAgIGlmIChub3RDb21tb24ub2JqSGFzKHJlY29yZCwgcHJlICsgdCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0SWQgPSByZWNvcmRbcHJlICsgdF07XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0SWQ7XG4gICAgfVxuXG4gICAgc2V0RmluZEJ5KGtleSwgdmFsdWUpIHtcbiAgICAgICAgdmFyIG9iaiA9IHt9O1xuICAgICAgICBvYmpba2V5XSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gdGhpcy5zZXRGaWx0ZXIob2JqKTtcbiAgICB9XG5cbiAgICBzZXRGaWx0ZXIoZmlsdGVyRGF0YSA9IERFRkFVTFRfRklMVEVSKSB7XG4gICAgICAgIHRoaXMuc2V0V29ya2luZyhcImZpbHRlclwiLCBmaWx0ZXJEYXRhKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgcmVzZXRGaWx0ZXIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNldEZpbHRlcigpO1xuICAgIH1cblxuICAgIGdldEZpbHRlcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0V29ya2luZyhcImZpbHRlclwiKTtcbiAgICB9XG5cbiAgICBzZXRTZWFyY2goc2VhcmNoRGF0YSA9IERFRkFVTFRfU0VBUkNIKSB7XG4gICAgICAgIHRoaXMuc2V0V29ya2luZyhcInNlYXJjaFwiLCBzZWFyY2hEYXRhKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgcmVzZXRTZWFyY2goKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNldFNlYXJjaCgpO1xuICAgIH1cblxuICAgIGdldFNlYXJjaCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0V29ya2luZyhcInNlYXJjaFwiKTtcbiAgICB9XG5cbiAgICBzZXRTb3J0ZXIoc29ydGVyRGF0YSkge1xuICAgICAgICB0aGlzLnNldFdvcmtpbmcoXCJzb3J0ZXJcIiwgc29ydGVyRGF0YSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHJlc2V0U29ydGVyKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zZXRTb3J0ZXIoe30pO1xuICAgIH1cblxuICAgIGdldFNvcnRlcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0V29ya2luZyhcInNvcnRlclwiKTtcbiAgICB9XG5cbiAgICBzZXRSZXR1cm4ocmV0dXJuRGF0YSA9IERFRkFVTFRfUkVUVVJOKSB7XG4gICAgICAgIHRoaXMuc2V0V29ya2luZyhcInJldHVyblwiLCByZXR1cm5EYXRhKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgcmVzZXRSZXR1cm4oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNldFJldHVybih7fSk7XG4gICAgfVxuXG4gICAgZ2V0UmV0dXJuKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRXb3JraW5nKFwicmV0dXJuXCIpO1xuICAgIH1cblxuICAgIHNldFBhZ2VOdW1iZXIocGFnZU51bWJlcikge1xuICAgICAgICB0aGlzLnNldFdvcmtpbmcoXCJwYWdlci5wYWdlXCIsIHBhZ2VOdW1iZXIpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBzZXRQYWdlU2l6ZShwYWdlU2l6ZSkge1xuICAgICAgICB0aGlzLnNldFdvcmtpbmcoXCJwYWdlci5zaXplXCIsIHBhZ2VTaXplKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLy9wYWdlU2l6ZSA9IERFRkFVTFRfUEFHRV9TSVpFLCBwYWdlTnVtYmVyID0gREVGQVVMVF9QQUdFX05VTUJFUlxuICAgIHNldFBhZ2VyKCkge1xuICAgICAgICBpZiAoXG4gICAgICAgICAgICAoYXJndW1lbnRzLmxlbmd0aCA8IDIgfHxcbiAgICAgICAgICAgICAgICBpc05hTihhcmd1bWVudHNbMF0pIHx8XG4gICAgICAgICAgICAgICAgaXNOYU4oYXJndW1lbnRzWzFdKSkgJiZcbiAgICAgICAgICAgIGFyZ3VtZW50c1swXS5jb25zdHJ1Y3RvciA9PT0gT2JqZWN0ICYmXG4gICAgICAgICAgICBub3RDb21tb24ub2JqSGFzKGFyZ3VtZW50c1swXSwgXCJwYWdlXCIpICYmXG4gICAgICAgICAgICBub3RDb21tb24ub2JqSGFzKGFyZ3VtZW50c1swXSwgXCJzaXplXCIpXG4gICAgICAgICkge1xuICAgICAgICAgICAgY29uc3QgcGFnZXIgPSBhcmd1bWVudHNbMF07XG4gICAgICAgICAgICB0aGlzLnNldFdvcmtpbmcoXCJwYWdlclwiLCB7XG4gICAgICAgICAgICAgICAgc2l6ZTogcGFnZXIuc2l6ZSB8fCBERUZBVUxUX1BBR0VfU0laRSxcbiAgICAgICAgICAgICAgICBwYWdlOiBwYWdlci5wYWdlIHx8IERFRkFVTFRfUEFHRV9OVU1CRVIsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICAgIGFyZ3VtZW50cy5sZW5ndGggPT09IDIgJiZcbiAgICAgICAgICAgICFpc05hTihhcmd1bWVudHNbMF0pICYmXG4gICAgICAgICAgICAhaXNOYU4oYXJndW1lbnRzWzFdKVxuICAgICAgICApIHtcbiAgICAgICAgICAgIHRoaXMuc2V0V29ya2luZyhcInBhZ2VyXCIsIHtcbiAgICAgICAgICAgICAgICBzaXplOiBhcmd1bWVudHNbMF0gfHwgREVGQVVMVF9QQUdFX1NJWkUsXG4gICAgICAgICAgICAgICAgcGFnZTogYXJndW1lbnRzWzFdIHx8IERFRkFVTFRfUEFHRV9OVU1CRVIsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICByZXNldFBhZ2VyKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zZXRQYWdlcigpO1xuICAgIH1cblxuICAgIGdldFBhZ2VyKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRXb3JraW5nKFwicGFnZXJcIik7XG4gICAgfVxuXG4gICAgZ2V0UmVjb3JkKCkge1xuICAgICAgICB0aGlzLmdldERhdGEoKTtcbiAgICB9XG5cbiAgICBnZXREZWZhdWx0QXNQbGFpbk9iamVjdCgpIHtcbiAgICAgICAgaWYgKCF0aGlzLm1hbmlmZXN0IHx8ICF0aGlzLm1hbmlmZXN0LmZpZWxkcykge1xuICAgICAgICAgICAgcmV0dXJuIHt9O1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHt9O1xuICAgICAgICBmb3IgKGNvbnN0IGZpZWxkTmFtZSBvZiBPYmplY3Qua2V5cyh0aGlzLm1hbmlmZXN0LmZpZWxkcykpIHtcbiAgICAgICAgICAgIGlmIChPYmplY3QuaGFzT3duKHRoaXMubWFuaWZlc3QuZmllbGRzW2ZpZWxkTmFtZV0sIFwiZGVmYXVsdFwiKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGRlZmF1bHRWYWx1ZSA9IHRoaXMubWFuaWZlc3QuZmllbGRzW2ZpZWxkTmFtZV0uZGVmYXVsdDtcbiAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShkZWZhdWx0VmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdFtmaWVsZE5hbWVdID0gWy4uLmRlZmF1bHRWYWx1ZV07XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgZGVmYXVsdFZhbHVlID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdFtmaWVsZE5hbWVdID0geyAuLi5kZWZhdWx0VmFsdWUgfTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHRbZmllbGROYW1lXSA9IGRlZmF1bHRWYWx1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IG5vdEludGVyZmFjZTtcbiIsImltcG9ydCBub3RCYXNlIGZyb20gXCIuL2Jhc2UuanNcIjtcbmltcG9ydCBub3RDb21tb24gZnJvbSBcIi4vY29tbW9uLmpzXCI7XG5cbmltcG9ydCB7XG4gICAgTUVUQV9JTlRFUkZBQ0UsXG4gICAgTUVUQV9NQVBfVE9fSU5URVJGQUNFLFxuICAgIERFRkFVTFRfQUNUSU9OX1BSRUZJWCxcbn0gZnJvbSBcIi4vb3B0aW9uc1wiO1xuXG5pbXBvcnQgbm90SW50ZXJmYWNlIGZyb20gXCIuL2ludGVyZmFjZVwiO1xuXG5jbGFzcyBub3RSZWNvcmQgZXh0ZW5kcyBub3RCYXNlIHtcbiAgICBjb25zdHJ1Y3RvcihtYW5pZmVzdCwgaXRlbSkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICBpZiAoXG4gICAgICAgICAgICB0eXBlb2YgaXRlbSA9PT0gXCJ1bmRlZmluZWRcIiB8fFxuICAgICAgICAgICAgaXRlbSA9PT0gbnVsbCB8fFxuICAgICAgICAgICAgdHlwZW9mIGl0ZW0gIT09IFwib2JqZWN0XCJcbiAgICAgICAgKSB7XG4gICAgICAgICAgICByZXR1cm4gaXRlbTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXRlbSAmJiBpdGVtLmlzUHJveHkpIHtcbiAgICAgICAgICAgIG5vdENvbW1vbi5lcnJvcihcInRoaXMgaXMgUHJveHkgaXRlbVwiKTtcbiAgICAgICAgICAgIHJldHVybiBpdGVtO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpdGVtICYmIChpdGVtLmlzUmVjb3JkIHx8IGl0ZW0uaXNQcm9wZXJ0eSkpIHtcbiAgICAgICAgICAgIHJldHVybiBpdGVtO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoaXRlbSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVDb2xsZWN0aW9uKG1hbmlmZXN0LCBpdGVtKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNldE9wdGlvbnMoe30pO1xuICAgICAgICB0aGlzW01FVEFfSU5URVJGQUNFXSA9IG5ldyBub3RJbnRlcmZhY2UobWFuaWZlc3QsIHt9KTtcbiAgICAgICAgdGhpcy5zZXREYXRhKGl0ZW0pO1xuICAgICAgICB0aGlzLmludGVyZmFjZVVwKCk7XG4gICAgICAgIHRoaXMubWFwVG9JbnRlcmZhY2UoKTtcbiAgICAgICAgdGhpcy5tYXBUb01ldGhvZHMoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgdG9EZWZhdWx0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zZXREYXRhKHRoaXNbTUVUQV9JTlRFUkZBQ0VdLmdldERlZmF1bHRBc1BsYWluT2JqZWN0KCkpO1xuICAgIH1cblxuICAgIG1hcFRvSW50ZXJmYWNlKCkge1xuICAgICAgICBsZXQgcmVjID0gdGhpcztcbiAgICAgICAgZm9yIChsZXQgdCBvZiBNRVRBX01BUF9UT19JTlRFUkZBQ0UpIHtcbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICB0aGlzW01FVEFfSU5URVJGQUNFXVt0XSAmJlxuICAgICAgICAgICAgICAgIHR5cGVvZiB0aGlzW01FVEFfSU5URVJGQUNFXVt0XSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICB0aGlzW3RdID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgcmVzID0gcmVjW01FVEFfSU5URVJGQUNFXVt0XSguLi5hcmd1bWVudHMpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzID09IHJlY1tNRVRBX0lOVEVSRkFDRV0gPyByZWMgOiByZXM7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIG1hcFRvTWV0aG9kcygpIHtcbiAgICAgICAgbGV0IG1hbmlmZXN0ID0gdGhpc1tNRVRBX0lOVEVSRkFDRV0ubWFuaWZlc3QsXG4gICAgICAgICAgICBhcHAgPSBub3RDb21tb24uZ2V0QXBwKCksXG4gICAgICAgICAgICBtZXRob2RzID0ge307XG4gICAgICAgIGlmIChtYW5pZmVzdC5tZXRob2RzKSB7XG4gICAgICAgICAgICBtZXRob2RzID0gbWFuaWZlc3QubWV0aG9kcztcbiAgICAgICAgfSBlbHNlIGlmIChhcHApIHtcbiAgICAgICAgICAgIG1ldGhvZHMgPSBhcHAuZ2V0T3B0aW9ucyhcbiAgICAgICAgICAgICAgICBbXCJtb2RlbHNcIiwgdGhpc1tNRVRBX0lOVEVSRkFDRV0ubWFuaWZlc3QubW9kZWxdLmpvaW4oXCIuXCIpLFxuICAgICAgICAgICAgICAgIHt9XG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXRob2RzKSB7XG4gICAgICAgICAgICBmb3IgKGxldCB0IGluIG1ldGhvZHMpIHtcbiAgICAgICAgICAgICAgICBpZiAoT2JqZWN0Lmhhc093bihtZXRob2RzLCB0KSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzW3RdID0gbWV0aG9kc1t0XTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjcmVhdGVDb2xsZWN0aW9uKG1hbmlmZXN0LCBpdGVtcykge1xuICAgICAgICB2YXIgY29sbGVjdGlvbiA9IFtdO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGl0ZW1zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb2xsZWN0aW9uLnB1c2gobmV3IG5vdFJlY29yZChtYW5pZmVzdCwgaXRlbXNbaV0pKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29sbGVjdGlvbjtcbiAgICB9XG5cbiAgICBpbnRlcmZhY2VVcCgpIHtcbiAgICAgICAgaWYgKHRoaXNbTUVUQV9JTlRFUkZBQ0VdLmdldEFjdGlvbnNDb3VudCgpID4gMCkge1xuICAgICAgICAgICAgbGV0IGFjdGlvbnMgPSB0aGlzW01FVEFfSU5URVJGQUNFXS5nZXRBY3Rpb25zKCk7XG4gICAgICAgICAgICBmb3IgKGxldCBpIGluIGFjdGlvbnMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmFjdGlvblVwKGksIGFjdGlvbnNbaV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgYWN0aW9uVXAoaW5kZXgpIHtcbiAgICAgICAgaWYgKCFPYmplY3QuaGFzT3duKHRoaXMsIFtERUZBVUxUX0FDVElPTl9QUkVGSVggKyBpbmRleF0pKSB7XG4gICAgICAgICAgICB0aGlzW0RFRkFVTFRfQUNUSU9OX1BSRUZJWCArIGluZGV4XSA9ICguLi5wYXJhbXMpID0+XG4gICAgICAgICAgICAgICAgdGhpc1tNRVRBX0lOVEVSRkFDRV0ucmVxdWVzdCh0aGlzLCBpbmRleCwgLi4ucGFyYW1zKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKlxuICAtPiAncGF0aC50by5rZXknLCB2YWx1ZU9mS2V5XG4gIDwtIG9rLCB3aXRoIG9uZSBvbkNoYW5nZSBldmVudCB0cmlnZ2VyZWRcbiAgKi9cblxuICAgIHNldEF0dHIoa2V5LCB2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5zZXREYXRhKGtleSwgdmFsdWUpO1xuICAgIH1cblxuICAgIC8qXG4gIC0+XG4gIHtcbiAgICAna2V5UGF0aCc6IHZhbHVlLFxuICAgICdrZXkuc3ViUGF0aCc6IHZhbHVlMixcbiAgICAna2V5UGF0aC4wLnRpdGxlJzogdmFsdWUzXG4gIH1cbiAgPC0gb2ssIHdpdGggYnVuY2ggb2Ygb25DaGFuZ2UgZXZlbnRzIHRyaWdnZXJlZFxuICAqL1xuICAgIHNldEF0dHJzKG9iamVjdFBhcnQpIHtcbiAgICAgICAgLy9ub3RDb21tb24ubG9nKCdzZXRBdHRycycsIG9iamVjdFBhcnQsIE9iamVjdC5rZXlzKG9iamVjdFBhcnQpKTtcbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgb2JqZWN0UGFydCAmJlxuICAgICAgICAgICAgdHlwZW9mIG9iamVjdFBhcnQgPT09IFwib2JqZWN0XCIgJiZcbiAgICAgICAgICAgIE9iamVjdC5rZXlzKG9iamVjdFBhcnQpLmxlbmd0aCA+IDBcbiAgICAgICAgKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBwYXRoIGluIG9iamVjdFBhcnQpIHtcbiAgICAgICAgICAgICAgICAvL25vdENvbW1vbi5sb2coJ3NldEF0dHJzIG9uZSB0byBnbycsIHBhdGgpO1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0QXR0cihwYXRoLCBvYmplY3RQYXJ0W3BhdGhdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qXG4gIC0+ICdwYXRoVG9LZXknXG4gIDwtIHZhbHVlMVxuICAqL1xuICAgIGdldEF0dHIod2hhdCwgcGxhaW4gPSBmYWxzZSkge1xuICAgICAgICBsZXQgcHJ4ID0gdGhpcy5nZXREYXRhKHdoYXQsIHt9KTtcbiAgICAgICAgaWYgKHBsYWluKSB7XG4gICAgICAgICAgICByZXR1cm4gbm90Q29tbW9uLnN0cmlwUHJveHkocHJ4KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBwcng7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKlxuICAtPiBbJ3BhdGhUb0tleScsICdwYXRoLnRvLmtleScsICdzaW1wbGVLZXknLC4uLl1cbiAgPC0gW3ZhbHVlMSwgdmFsdWUyLCB2YWx1ZTMsLi4uXVxuICAqL1xuICAgIGdldEF0dHJzKHdoYXQpIHtcbiAgICAgICAgbGV0IHJlc3VsdCA9IFtdO1xuICAgICAgICBpZiAod2hhdCAmJiB3aGF0Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGZvciAobGV0IHBhdGggb2Ygd2hhdCkge1xuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHRoaXMuZ2V0QXR0cihwYXRoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICBnZXRNYW5pZmVzdCgpIHtcbiAgICAgICAgaWYgKHRoaXNbTUVUQV9JTlRFUkZBQ0VdKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpc1tNRVRBX0lOVEVSRkFDRV0ubWFuaWZlc3Q7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4ge307XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzZXRJdGVtKGl0ZW0pIHtcbiAgICAgICAgdGhpcy5zZXREYXRhKGl0ZW0pO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IG5vdFJlY29yZDtcbiIsImltcG9ydCBub3RDb21tb24gZnJvbSBcIi4vY29tbW9uLmpzXCI7XG5pbXBvcnQgbm90UmVjb3JkIGZyb20gXCIuL3JlY29yZC5qc1wiO1xuaW1wb3J0IG5vdEJhc2UgZnJvbSBcIi4vYmFzZS5qc1wiO1xuaW1wb3J0IG5vdFJvdXRlciBmcm9tIFwiLi9yb3V0ZXIuanNcIjtcblxuLyoqXG4gKiBAY29uc3Qge3N0cmluZ30gW09QVF9DT05UUk9MTEVSX1BSRUZJWCA9IFwibmNcIl0gY29udHJvbGxlciBuYW1lcyBwcmVmaXggbmMgYWthIE5vdENvbnRyb2xsZXJcbiAqL1xuY29uc3QgT1BUX0NPTlRST0xMRVJfUFJFRklYID0gXCJuY1wiO1xuLyoqXG4gKiBAY29uc3Qge3N0cmluZ30gW09QVF9SRUNPUkRfUFJFRklYID0gXCJuclwiXSByZWNvcmQgbmFtZXMgcHJlZml4IG5yIGFrYSBOb3RSZWNvcmRcbiAqL1xuY29uc3QgT1BUX1JFQ09SRF9QUkVGSVggPSBcIm5yXCI7XG4vKipcbiAqIEBjb25zdCB7c3RyaW5nfSBbREVGQVVMVF9XU19DTElFTlRfTkFNRSA9IFwibWFpblwiXSBkZWZhdWx0IG5hbWUgb2YgV1MgY2xpZW50XG4gKi9cbmNvbnN0IERFRkFVTFRfV1NfQ0xJRU5UX05BTUUgPSBcIm1haW5cIjtcblxuLyoqXG4gKiBDbGFzcyBvZiBhcHBsaWNhdGlvblxuICogQGNsYXNzXG4gKi9cbmNsYXNzIG5vdEFwcCBleHRlbmRzIG5vdEJhc2Uge1xuICAgIC8qKlxuICAgICAqICBAc3RhdGljIHtmdW5jdGlvbn0gREVGQVVMVF9XU19DTElFTlRfTkFNRSAgZnVuY3Rpb24gdG8gcGVyZm9ybSBkZWVwIG1lcmdlcyBvZiBvYmplY3RzXG4gICAgICovXG4gICAgc3RhdGljIERFRkFVTFRfV1NfQ0xJRU5UX05BTUUgPSBERUZBVUxUX1dTX0NMSUVOVF9OQU1FO1xuICAgIC8qKlxuICAgICAqIEBjbGFzc1xuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zICAgICAgICAgICAgICBhcHBsaWNhdGlvbiBvcHRpb25zXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG9wdGlvbnMubmFtZSAgICAgICAgIG5hbWVcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gb3B0aW9ucy5jb250cm9sbGVycyAgY29udHJvbGxlcnNcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gIG9wdGlvbnMubWFuaWZlc3RVUkwgVVJMIG9mIG5ldHdvcmsgbWFuaWZlc3Qgd2l0aCBhbGwgYXZhaWxhYmxlIG1vZGVscy9hY3Rpb25zL2ZpZWxkcyByZXF1ZXN0cyBvcHRpb25zXG4gICAgICovXG4gICAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICB3b3JraW5nOiB7XG4gICAgICAgICAgICAgICAgbmFtZTogb3B0aW9ucy5uYW1lLFxuICAgICAgICAgICAgICAgIGludGVyZmFjZXM6IHt9LFxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXJzOiBub3RDb21tb24ub2JqSGFzKG9wdGlvbnMsIFwiY29udHJvbGxlcnNcIilcbiAgICAgICAgICAgICAgICAgICAgPyBvcHRpb25zLmNvbnRyb2xsZXJzXG4gICAgICAgICAgICAgICAgICAgIDoge30sXG4gICAgICAgICAgICAgICAgaW5pdENvbnRyb2xsZXI6IG51bGwsXG4gICAgICAgICAgICAgICAgY3VycmVudENvbnRyb2xsZXI6IG51bGwsXG4gICAgICAgICAgICAgICAgdWlzOiB7fSxcbiAgICAgICAgICAgICAgICB3c2M6IHt9LFxuICAgICAgICAgICAgICAgIHdzczoge30sXG4gICAgICAgICAgICAgICAgc2VydmljZXM6IHt9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG9wdGlvbnMsXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzPy5sb2cgJiYgdGhpcy5sb2coXCJzdGFydCBhcHBcIik7XG4gICAgICAgIG5vdENvbW1vbi5yZWdpc3RlcihcImFwcFwiLCB0aGlzKTtcbiAgICAgICAgdGhpcy5pbml0TWFuaWZlc3QoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZXMgYXBwbGljYXRpb24gYWNjb3JkaW5nIHRvIG5ldHdvcmsgbWFuaWZlc3QsIHdoaWNoIGlzIHJldHJpZXZlZCBmcm9tIHNlcnZlclxuICAgICAqL1xuICAgIGluaXRNYW5pZmVzdCgpIHtcbiAgICAgICAgbm90Q29tbW9uXG4gICAgICAgICAgICAuZ2V0SlNPTih0aGlzLmdldE9wdGlvbnMoXCJtYW5pZmVzdFVSTFwiKSlcbiAgICAgICAgICAgIC50aGVuKChtYW5pZmVzdCkgPT4gdGhpcy5zZXRJbnRlcmZhY2VNYW5pZmVzdChtYW5pZmVzdCkpXG4gICAgICAgICAgICAuY2F0Y2goKGUpID0+IG5vdENvbW1vbi5yZXBvcnQoZSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE9uZSBwYWdlIHJvdXRpbmcgaW5pdGlhbGl6YXRpb25cbiAgICAgKi9cbiAgICBpbml0Um91dGVyKCkge1xuICAgICAgICB0aGlzLnNldFdvcmtpbmcoXCJyb3V0ZXJcIiwgbm90Um91dGVyKTtcbiAgICAgICAgdGhpcy5nZXRXb3JraW5nKFwicm91dGVyXCIpLnNldFJvb3QodGhpcy5nZXRPcHRpb25zKFwicm91dGVyLnJvb3RcIikpO1xuICAgICAgICBub3RSb3V0ZXIucmVSb3V0ZUV4aXN0ZWQoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFsbCB0aGUgcm91dGVzIGhhbmRsZXJzIGFuZCBwdXNoZXMgdGhlbSBpbnRvIHJvdXRlclxuICAgICAqL1xuICAgIGV4ZWNSb3V0ZXIoKSB7XG4gICAgICAgIHZhciByb3V0aWVJbnB1dCA9IHt9O1xuICAgICAgICBmb3IgKGxldCB0ID0gMDsgdCA8IHRoaXMuZ2V0T3B0aW9ucyhcInJvdXRlci5tYW5pZmVzdFwiKS5sZW5ndGg7IHQrKykge1xuICAgICAgICAgICAgbGV0IHJvdXRlQmxvY2sgPSB0aGlzLmdldE9wdGlvbnMoXCJyb3V0ZXIubWFuaWZlc3RcIilbdF0sXG4gICAgICAgICAgICAgICAgcGF0aHMgPSByb3V0ZUJsb2NrLnBhdGhzLFxuICAgICAgICAgICAgICAgIHNjaGVtZXMgPSByb3V0ZUJsb2NrLnNjaGVtZXMsXG4gICAgICAgICAgICAgICAgY29udHJvbGxlciA9IHJvdXRlQmxvY2suY29udHJvbGxlcjtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGF0aHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBsZXQgcGF0aFNjaGVtZSA9XG4gICAgICAgICAgICAgICAgICAgIHNjaGVtZXMgJiYgQXJyYXkuaXNBcnJheShzY2hlbWVzKSAmJiBzY2hlbWVzLmxlbmd0aCA+IGlcbiAgICAgICAgICAgICAgICAgICAgICAgID8gc2NoZW1lc1tpXVxuICAgICAgICAgICAgICAgICAgICAgICAgOiBmYWxzZTtcbiAgICAgICAgICAgICAgICByb3V0aWVJbnB1dFtwYXRoc1tpXV0gPSB0aGlzLmJpbmRDb250cm9sbGVyKFxuICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyLFxuICAgICAgICAgICAgICAgICAgICBwYXRoU2NoZW1lXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLmdldFdvcmtpbmcoXCJyb3V0ZXJcIikuYWRkTGlzdChyb3V0aWVJbnB1dCkubGlzdGVuKCk7IC8vLm5hdmlnYXRlKHRoaXMuZ2V0T3B0aW9ucygncm91dGVyLmluZGV4JykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgaW50ZXJmYWNlIG1hbmlmZXN0IG9wdGlvblxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSAgbWFuaWZlc3QgICAgaW50ZXJmYWNlIG1hbmlmZXN0XG4gICAgICovXG4gICAgc2V0SW50ZXJmYWNlTWFuaWZlc3QobWFuaWZlc3QpIHtcbiAgICAgICAgT2JqZWN0LmZyZWV6ZShtYW5pZmVzdCk7XG4gICAgICAgIHRoaXMuc2V0T3B0aW9ucyhcImludGVyZmFjZU1hbmlmZXN0XCIsIG1hbmlmZXN0KTtcbiAgICAgICAgdGhpcy5pbml0Um91dGVyKCk7XG4gICAgICAgIHRoaXMudXBkYXRlKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogcmV0dXJucyBjb25zdHJ1Y3RvciBvZiBpbnRlcmZhY2UgbW9kZWxcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gIG1vZGVsTmFtZSAgIG1vZGVsIG5hbWVcbiAgICAgKiBAcmV0dXJucyB7b2JqZWN0fSAgICBpbnRlcmZhY2UgbW9kZWwgY29uc3RydWN0b3JcbiAgICAgKi9cbiAgICBnZXRJbnRlcmZhY2VNYW5pZmVzdChtb2RlbE5hbWUpIHtcbiAgICAgICAgaWYgKG1vZGVsTmFtZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0T3B0aW9ucyhcImludGVyZmFjZU1hbmlmZXN0XCIpW21vZGVsTmFtZV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRPcHRpb25zKFwiaW50ZXJmYWNlTWFuaWZlc3RcIik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVcGRhdGluZyBBcHBsaWNhdGlvbiwgcmVsb2FkcyBpbnRlcmZhY2VzLCBpbml0IGNvbnRyb2xsZXIgbGF1bmNoZWQsIHN0YXJ0IGFnYWluXG4gICAgICovXG4gICAgdXBkYXRlKCkge1xuICAgICAgICAvL9C90YPQttC90L4g0LjQvdC40YbQuNCw0LvQuNC30LjRgNC+0LLQsNGC0YxcbiAgICAgICAgLy/QvNC+0LTQtdC70Lgg0L/QvtC70YPRh9C10L3QvdGL0LzQuCDQuNC90YLQtdGA0YTQtdC50YHQsNC80LhcbiAgICAgICAgdGhpcy51cGRhdGVJbnRlcmZhY2VzKCk7XG4gICAgICAgIC8v0LjQvdC40YbQuNC70LjRhtC40YDQvtCy0LDRgtGMINC4INC30LDQv9GD0YHRgtC40YLRjCDQutC+0L3RgtGA0L7Qu9C70LXRgCDQuNC90LjRhtC40LDQu9C40LfQsNGG0LjQuFxuICAgICAgICB0aGlzLmluaXRDb250cm9sbGVyKCk7XG4gICAgICAgIHRoaXMuc3RhcnRBcHAoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXphdGlvbiBvZiBzZXJ2aWNlcywgc3RhcnR1cCBvZiByb3V0aW5nXG4gICAgICovXG4gICAgc3RhcnRBcHAoKSB7XG4gICAgICAgIHRoaXMuaW5pdFNlcnZpY2VzKCk7XG4gICAgICAgIC8v0YHQvtC30LTQsNGC0Ywg0LrQvtC90YLRgNC+0LvQu9C10YDRi1xuICAgICAgICAvL9GA0L7Rg9GC0LXRgCDQuCDQv9GA0LjQstGP0LfQsNGC0Ywg0Log0L3QtdC80YMg0LrQvtC90YLRgNC+0LvQu9C10YDRi1xuICAgICAgICB0aGlzLmV4ZWNSb3V0ZXIoKTtcbiAgICAgICAgdGhpcy5lbWl0KFwiYWZ0ZXJTdGFydGVkXCIsIHRoaXMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHBhcmFtIHtvYmplY3R9IGNvbnRyb2xsZXJOYW1lIGNvbnRyb2xsZXIgY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0ge3N0cmluZ1tdfSBjb250cm9sbGVyUGF0aFNjaGVtZVxuICAgICAqIEByZXR1cm5zIHtmdW5jdGlvbn0gZnVuY3Rpb24gY3JlYXRlcyBuZXcgY29udHJvbGxlciBpbnN0YW5jZSBhbmQgcGFzcyBpbiBub3RBcHAgaW5zdGFuY2UsIGFyZ3VtZW50cyBmcm9tIHJvdXRlciBwYXJzZXIgYW5kIHBhdGhTY2hlbWVcbiAgICAgKi9cbiAgICBiaW5kQ29udHJvbGxlcihjb250cm9sbGVyTmFtZSwgY29udHJvbGxlclBhdGhTY2hlbWUpIHtcbiAgICAgICAgbGV0IGFwcCA9IHRoaXM7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBuZXcgY29udHJvbGxlck5hbWUoYXBwLCBhcmd1bWVudHMsIGNvbnRyb2xsZXJQYXRoU2NoZW1lKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplcyAnaW5pdGlhbGl6YXRpb24nIGNvbnRyb2xsZXIgd2hpY2ggaXMgcnVucyBvbmNlLFxuICAgICAqIHRvIHBlcmZvcm0gY3VzdG9tIGluaXRpYWxpemF0aW9ucyByb3V0aW5lcyBieSBhcHBsaWNhdGlvbiBjb2RlXG4gICAgICovXG4gICAgaW5pdENvbnRyb2xsZXIoKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5nZXRPcHRpb25zKFwiaW5pdENvbnRyb2xsZXJcIikgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICAgIGxldCBpbml0Q29udHJvbGxlciA9IHRoaXMuZ2V0T3B0aW9ucyhcImluaXRDb250cm9sbGVyXCIpO1xuICAgICAgICAgICAgdGhpcy5zZXRXb3JraW5nKFwiaW5pdENvbnRyb2xsZXJcIiwgbmV3IGluaXRDb250cm9sbGVyKHRoaXMpKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgd29ya2luZyBjb250cm9sbGVyXG4gICAgICogQHJldHVybnMge29iamVjdH0gd29ya2luZyBjb250cm9sbGVyXG4gICAgICovXG4gICAgZ2V0Q3VycmVudENvbnRyb2xsZXIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFdvcmtpbmcoXCJjdXJyZW50Q29udHJvbGxlclwiKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEZXN0cm95ZXMgd29ya2luZyBjb250cm9sbGVyIHRoZW4gc2V0cyBwcm92aWRlZCBhcyB3b3JraW5nXG4gICAgICogQHBhcmFtIHtvYmplY3R9IGN0cmwgY29udHJvbGxlciBpbnN0YW5jZVxuICAgICAqIEByZXR1cm5zIHtvYmplY3R9IG5vdEFwcCBpbnN0YW5jZVxuICAgICAqL1xuICAgIHNldEN1cnJlbnRDb250cm9sbGVyKGN0cmwpIHtcbiAgICAgICAgbGV0IG9sZEN0cmwgPSB0aGlzLmdldEN1cnJlbnRDb250cm9sbGVyKCk7XG4gICAgICAgIGlmIChvbGRDdHJsICYmIG9sZEN0cmwuZGVzdHJveSkge1xuICAgICAgICAgICAgb2xkQ3RybC5kZXN0cm95KCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zZXRXb3JraW5nKFwiY3VycmVudENvbnRyb2xsZXJcIiwgY3RybCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYXJyb3cgZnVuY3Rpb246IChtb2RlbEluaXREYXRhID0ge30pID0+IG5vdFJlY29yZFxuICAgICAqIEZhY3RvcnkgdGhhdCBjcmVhdGVzIG5vdFJlY29yZCBpbnN0YW5jZXMgd2l0aCBiaW5kZWRcbiAgICAgKiByZWNvcmRNYW5pZmVzdCBhbmQgcHJvdmlkZWQgZGF0YSB0byBpbml0aWFsaXplIHJlY29yZFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSByZWNvcmRNYW5pZmVzdFxuICAgICAqIEByZXR1cm4ge2Z1bmN0aW9ufVxuICAgICAqIEBtZW1iZXJvZiBub3RBcHBcbiAgICAgKi9cbiAgICBjcmVhdGVJbnRlcmZhY2VNb2RlbEZhY3RvcnkocmVjb3JkTWFuaWZlc3QpIHtcbiAgICAgICAgcmV0dXJuIChyZWNvcmREYXRhKSA9PiBuZXcgbm90UmVjb3JkKHJlY29yZE1hbmlmZXN0LCByZWNvcmREYXRhKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDbGVhcnMgaW50ZXJmYWNlcywgcmVjcmVhdGVzIGFsbCBhY2NvcmRpbmcgdG8gT3B0aW9ucy5pbnRlcmFmYWNlTWFuaWZlc3RcbiAgICAgKi9cbiAgICB1cGRhdGVJbnRlcmZhY2VzKCkge1xuICAgICAgICB0aGlzLmNsZWFySW50ZXJmYWNlcygpO1xuICAgICAgICBsZXQgbWFuaWZlc3RzID0gdGhpcy5nZXRPcHRpb25zKFwiaW50ZXJmYWNlTWFuaWZlc3RcIik7XG4gICAgICAgIGlmIChtYW5pZmVzdHMpIHtcbiAgICAgICAgICAgIGZvciAobGV0IG5hbWUgaW4gbWFuaWZlc3RzKSB7XG4gICAgICAgICAgICAgICAgbGV0IHJlY29yZE1hbmlmZXN0ID0gbWFuaWZlc3RzW25hbWVdLFxuICAgICAgICAgICAgICAgICAgICByZWNvcmRNZXRob2RzID0gdGhpcy5nZXRPcHRpb25zKFxuICAgICAgICAgICAgICAgICAgICAgICAgW1wibW9kZWxzXCIsIG5hbWVdLmpvaW4oXCIuXCIpLFxuICAgICAgICAgICAgICAgICAgICAgICAge31cbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICByZWNvcmRNYW5pZmVzdC5tZXRob2RzID0gcmVjb3JkTWV0aG9kcztcbiAgICAgICAgICAgICAgICBjb25zdCBuYW1lSW50ID1cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jcmVhdGVJbnRlcmZhY2VNb2RlbEZhY3RvcnkocmVjb3JkTWFuaWZlc3QpO1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0SW50ZXJmYWNlKG5hbWUsIG5hbWVJbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgaW50ZXJmYWNlIG5hbWUgKG1vZGVsTmFtZSkgdG8gc3RhbmRhcnRpemllZCBwcmVmaXhNb2RlbE5hbWVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBpbnRlcmZhY2UgbW9kZWwgbmFtZVxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9ICAgIG5vdCByZWNvcmQgbmFtZVxuICAgICAqL1xuICAgIGdldFJlY29yZE5hbWUobmFtZSkge1xuICAgICAgICByZXR1cm4gT1BUX1JFQ09SRF9QUkVGSVggKyBub3RDb21tb24uY2FwaXRhbGl6ZUZpcnN0TGV0dGVyKG5hbWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGNvbnRyb2xsZXIgbmFtZSAoY29udHJvbGxlck5hbWUpIHRvIHN0YW5kYXJ0aXppZWQgcHJlZml4Q29udHJvbGxlck5hbWVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBjb250cm9sbGVyIG5hbWVcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSAgICBub3QgY29udHJvbGxlciBuYW1lXG4gICAgICovXG4gICAgZ2V0Q29udHJvbGxlck5hbWUobmFtZSkge1xuICAgICAgICByZXR1cm4gT1BUX0NPTlRST0xMRVJfUFJFRklYICsgbm90Q29tbW9uLmNhcGl0YWxpemVGaXJzdExldHRlcihuYW1lKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIG5hbWVkIGludGVyZmFjZSBmYWN0b3J5IGZ1bmN0aW9uXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IG1vZGVsRmFjdG9yeVxuICAgICAqIEByZXR1cm4ge25vdEFwcH1cbiAgICAgKiBAbWVtYmVyb2Ygbm90QXBwXG4gICAgICovXG4gICAgc2V0SW50ZXJmYWNlKG5hbWUsIG1vZGVsRmFjdG9yeSkge1xuICAgICAgICByZXR1cm4gdGhpcy5zZXRXb3JraW5nKGBpbnRlcmZhY2VzLiR7bmFtZX1gLCBtb2RlbEZhY3RvcnkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYWxsIG5ldHdvcmsgaW50ZXJmYWNlc1xuICAgICAqIEByZXR1cm5zIHtvYmplY3R9IGFsbCBuZXR3b3JrIGluc3RlcmZhY2VzXG4gICAgICovXG4gICAgZ2V0SW50ZXJmYWNlcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0V29ya2luZyhcImludGVyZmFjZXNcIik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyBpbnRlcmZhY2VzIGxpc3QgY2xlYXJcbiAgICAgKiBAcmV0dXJucyB7b2JqZWN0fSBub3RBcHAgaW5zdGFuY2VcbiAgICAgKi9cbiAgICBjbGVhckludGVyZmFjZXMoKSB7XG4gICAgICAgIHRoaXMuc2V0V29ya2luZyhcImludGVyZmFjZXNcIiwge30pO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIFdlYlNvY2tldHMgY2xpZW50XG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtuYW1lPURFRkFVTFRfV1NfQ0xJRU5UX05BTUVdIG5hbWUgb2YgY2xpZW50XG4gICAgICogQHBhcmFtIHtvYmplY3R9IHdzYyAgbm90V1NDbGllbnQgaW5zdGFuY2VcbiAgICAgKiBAcmV0dXJucyB7b2JqZWN0fSBub3RBcHAgaW5zdGFuY2VcbiAgICAgKi9cbiAgICAvLyBAdHMtaWdub3JlXG4gICAgc2V0V1NDbGllbnQobmFtZSA9IERFRkFVTFRfV1NfQ0xJRU5UX05BTUUsIHdzYykge1xuICAgICAgICByZXR1cm4gdGhpcy5zZXRXb3JraW5nKGB3c2MuJHtuYW1lfWAsIHdzYyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB3ZWIgc29ja2V0cyBjbGllbnQgaW5zdGFuY2UgYnkgbmFtZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbbmFtZT1ERUZBVUxUX1dTX0NMSUVOVF9OQU1FXVxuICAgICAqIEByZXR1cm5zIHtvYmplY3R9IGluc3RhbmNlIG9mIG5vdFdTQ2xpZW50XG4gICAgICovXG4gICAgZ2V0V1NDbGllbnQobmFtZSA9IERFRkFVTFRfV1NfQ0xJRU5UX05BTUUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0V29ya2luZyhgd3NjLiR7bmFtZX1gKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiByZXR1cm5zIG5ldHdvcmsgaW50ZXJmYWNlIGNsYXNzIGluaXRpYWxpemF0b3JcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBuYW1lIG9mIG5ldHdvcmsgaW50ZXJmYWNlXG4gICAgICogQHJldHVybnMge2Z1bmN0aW9ufSBpbnRlcmZhY2UgY2xhc3MgaW5pdGlhbGl6YXRvclxuICAgICAqL1xuICAgIGdldEludGVyZmFjZShuYW1lKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldEludGVyZmFjZXMoKVtuYW1lXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIG5ldHdvcmsgaW50ZXJmYWNlIChtb2RlbCkgaW5pdGlhbGl6ZWQgd2l0aCBwcm92aWRlZCBkYXRhXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgaW50ZXJmYWNlKG1vZGVsTmFtZSlcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gW2RhdGE9e31dICAgIG1vZGVsIGRhdGFcbiAgICAgKiBAcmV0dXJucyBuZXR3b3JrIGludGVyZmFjZSBpbml0aWFsaXplcyB3aXRoIHByb3ZpZGVkIGRhdGFcbiAgICAgKi9cbiAgICBnZXRNb2RlbChuYW1lLCBkYXRhID0ge30pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0SW50ZXJmYWNlKG5hbWUpKGRhdGEpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgc2VydmljZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIG5hbWUgb2YgdGhlIHNlcnZpY2VcbiAgICAgKiBAcGFyYW0ge29iamVjdHxmdW5jdGlvbn0gdmFsIHNlcnZpY2VcbiAgICAgKi9cbiAgICBzZXRTZXJ2aWNlKG5hbWUsIHZhbCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zZXRXb3JraW5nKGBzZXJ2aWNlcy4ke25hbWV9YCwgdmFsKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHNlcnZpY2VcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBuYW1lIG9mIHRoZSBzZXJ2aWNlXG4gICAgICogQHJldHVybnMge29iamVjdHxmdW5jdGlvbn0gc2VydmljZVxuICAgICAqL1xuICAgIGdldFNlcnZpY2UobmFtZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRXb3JraW5nKGBzZXJ2aWNlcy4ke25hbWV9YCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZXMgYWxsIHByb3ZpZGVkIHNlcnZpY2VzXG4gICAgICovXG4gICAgaW5pdFNlcnZpY2VzKCkge1xuICAgICAgICBpZiAodGhpcy5nZXRPcHRpb25zKFwic2VydmljZXNcIikpIHtcbiAgICAgICAgICAgIGZvciAobGV0IHNlcnZOYW1lIGluIHRoaXMuZ2V0T3B0aW9ucyhcInNlcnZpY2VzXCIpKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHNlcnYgPSB0aGlzLmdldE9wdGlvbnMoYHNlcnZpY2VzLiR7c2Vydk5hbWV9YCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHNlcnZUeXBlID0gbm90Q29tbW9uLmRldGVjdFR5cGUoc2Vydik7XG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoc2VydlR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJmdW5jdGlvblwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcImNsYXNzXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRTZXJ2aWNlKHNlcnZOYW1lLCBuZXcgc2Vydih0aGlzKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0U2VydmljZShzZXJ2TmFtZSwgc2Vydik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXM/LmVycm9yICYmXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVycm9yKGBTZXJ2aWNlICgke3NlcnZOYW1lfSkgaW5pdCBlcnJvcmAsIGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgbW9kdWxlIGRlZGljYXRlZCBvcHRpb25zIHJlYWRlclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtb2R1bGVOYW1lICAgbW9kdWxlIG5hbWVcbiAgICAgKiBAcmV0dXJucyB7b2JqZWN0fSByZWFkZXIgb2JqZWN0IHtnZXQocGF0aFRvVmFsdWUsIGRlZmF1bHRWYWx1ZSl9XG4gICAgICovXG4gICAgZ2V0Q29uZmlnUmVhZGVyRm9yTW9kdWxlKG1vZHVsZU5hbWUgPSBcIlwiKSB7XG4gICAgICAgIGNvbnN0IG1vZENvbmZQYXRoID0gW1wibW9kdWxlc1wiLCBtb2R1bGVOYW1lXS5qb2luKFwiLlwiKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGdldDogKHN1YlBhdGgsIGZhbGxiYWNrKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHN1YlBhdGggJiYgdHlwZW9mIHN1YlBhdGggPT0gXCJzdHJpbmdcIiAmJiBzdWJQYXRoLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRPcHRpb25zKFxuICAgICAgICAgICAgICAgICAgICAgICAgW21vZENvbmZQYXRoLCBzdWJQYXRoXS5qb2luKFwiLlwiKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZhbGxiYWNrXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0T3B0aW9ucyhtb2RDb25mUGF0aCwgZmFsbGJhY2spO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBtb2R1bGUgZGVkaWNhdGVkIG9wdGlvbnMgcmVhZGVyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFttb2R1bGVOYW1lPScnXSAgIG1vZHVsZSBuYW1lXG4gICAgICogQHJldHVybnMge29iamVjdH0gcmVhZGVyIG9iamVjdCB7Z2V0KHBhdGhUb1ZhbHVlLCBkZWZhdWx0VmFsdWUpfVxuICAgICAqL1xuICAgIG1vZHVsZUNvbmZpZyhtb2R1bGVOYW1lID0gXCJcIikge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRDb25maWdSZWFkZXJGb3JNb2R1bGUobW9kdWxlTmFtZSk7XG4gICAgfVxufVxuZXhwb3J0IGRlZmF1bHQgbm90QXBwO1xuIiwiaW1wb3J0IG5vdENvbW1vbiBmcm9tIFwiLi9jb21tb24uanNcIjtcbmltcG9ydCBub3RCYXNlIGZyb20gXCIuL2Jhc2UuanNcIjtcbmltcG9ydCB7IE5BVklHQVRJT05fREVMQVlfREVGQVVMVCB9IGZyb20gXCIuL2NvbnN0LmpzXCI7XG5cbi8qKlxuICogQGNvbnN0IHtzdHJpbmd9ICBbT1BUX0RFRkFVTFRfQUNUSU9OX05BTUUgPSBcImRlZmF1bHRcIl0gICAgICBkZWZhdWx0IGFjdGlvbiBuYW1lXG4gKi9cbmNvbnN0IE9QVF9ERUZBVUxUX0FDVElPTl9OQU1FID0gXCJkZWZhdWx0XCI7XG5cbi8qKlxuICogQGNvbnN0IHtzdHJpbmd9ICBbT1BUX0RFRkFVTFRfQ09OVEFJTkVSX1NFTEVDVE9SID0gXCJtYWluLmNvbnRlbnRcIl0gIHNlbGVjdG9yIG9mIGNvbnRhaW5lciBIVE1MXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudFxuICovXG5jb25zdCBPUFRfREVGQVVMVF9DT05UQUlORVJfU0VMRUNUT1IgPSBcIm1haW4uY29udGVudFwiO1xuXG4vKipcbiAqIEBjb25zdCB7c3RyaW5nfSAgW09QVF9ERUZBVUxUX1BMVVJBTF9OQU1FID0gXCJNb2RlbHNcIl0gIGRlZmF1bHQgcGx1cmFsIG5hbWUgb2YgZW50aXRpZXNcbiAqL1xuY29uc3QgT1BUX0RFRkFVTFRfUExVUkFMX05BTUUgPSBcIk1vZGVsc1wiO1xuXG4vKipcbiAqIEBjb25zdCB7c3RyaW5nfSAgW09QVF9ERUZBVUxUX1NJTkdMRV9OQU1FID0gXCJNb2RlbFwiXSAgZGVmYXVsdCBzaW5nbGUgbmFtZSBvZiBlbnRpdGllc1xuICovXG5jb25zdCBPUFRfREVGQVVMVF9TSU5HTEVfTkFNRSA9IFwiTW9kZWxcIjtcblxuLyoqXG4gKiBAY29uc3Qge3N0cmluZ30gIFtPUFRfREVGQVVMVF9NT0RVTEVfTkFNRT1cIm1haW5cIl0gIGRlZmF1bHQgbW9kdWxlIG5hbWVcbiAqL1xuY29uc3QgT1BUX0RFRkFVTFRfTU9EVUxFX05BTUUgPSBcIm1haW5cIjtcblxuLyoqXG4gKiBAY29uc3Qge2Jvb2xlYW59ICBbT1BUX0RFRkFVTFRfQVVUT19OQU1FID0gdHJ1ZV0gIGlmIHNob291bGQgYmUgdXNlZCBhdXRvIG5hbWUgZ2VuZXJhdG9yXG4gKi9cbmNvbnN0IE9QVF9ERUZBVUxUX0FVVE9fTkFNRSA9IHRydWU7XG5cbi8qKlxuICogIEJhc2ljIGNsYXNzIGZvciB1c2VyIGNvbnRyb2xsZXJcbiAqICBAZXh0ZW5kcyBub3RCYXNlXG4gKi9cbmNsYXNzIG5vdENvbnRyb2xsZXIgZXh0ZW5kcyBub3RCYXNlIHtcbiAgICAvKipcbiAgICAgKiAgQHN0YXRpYyB7bnVtYmVyfSBQQVJBTVNfTEVOR1RIICBudW1iZXIgb2YgcGFyYW1zIGluIFVSTCBwYXRoXG4gICAgICovXG4gICAgc3RhdGljIFBBUkFNU19MRU5HVEggPSAyO1xuICAgIC8qKlxuICAgICAqICBAc3RhdGljIHtzdHJpbmd9IE1PRFVMRV9OQU1FICBuYW1lIG9mIG1vZHVsZVxuICAgICAqL1xuICAgIHN0YXRpYyBnZXQgTU9EVUxFX05BTUUoKSB7XG4gICAgICAgIHJldHVybiBPUFRfREVGQVVMVF9NT0RVTEVfTkFNRTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIEBzdGF0aWMge3N0cmluZ30gTU9ERUxfTkFNRSAgbmFtZSBvZiBtb2RlbFxuICAgICAqL1xuICAgIHN0YXRpYyBnZXQgTU9ERUxfTkFNRSgpIHtcbiAgICAgICAgcmV0dXJuIFwiTW9kZWxOYW1lXCI7XG4gICAgfVxuXG4gICAgc3RhdGljIGdldCBMQUJFTFMoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBwbHVyYWw6IGAke09QVF9ERUZBVUxUX01PRFVMRV9OQU1FfTptb2RlbF9sYWJlbF9wbHVyYWxgLFxuICAgICAgICAgICAgc2luZ2xlOiBgJHtPUFRfREVGQVVMVF9NT0RVTEVfTkFNRX06bW9kZWxfbGFiZWxfc2luZ2xlYCxcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEB0eXBlICAgIHtvYmplY3R8bnVsbH1cbiAgICAgKiBAbWVtYmVyb2Ygbm90Q29udHJvbGxlclxuICAgICAqL1xuICAgIGVscztcbiAgICAvKipcbiAgICAgKlxuICAgICAqIEB0eXBlICAgIHtvYmplY3R8bnVsbH1cbiAgICAgKiBAbWVtYmVyb2Ygbm90Q29udHJvbGxlclxuICAgICAqL1xuICAgIG1ha2U7XG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAdHlwZSAgICB7bnVsbHxpbXBvcnQoJy4vYXBwLmpzJykuZGVmYXVsdH1cbiAgICAgKiBAbWVtYmVyb2Ygbm90Q29udHJvbGxlclxuICAgICAqL1xuICAgIGFwcDtcbiAgICAvKipcbiAgICAgKiAgQGNsYXNzXG4gICAgICogIEBwYXJhbSB7aW1wb3J0KCcuL2FwcC5qcycpLmRlZmF1bHR9IGFwcFxuICAgICAqICBAcGFyYW0gIHtzdHJpbmd9ICAgIG5hbWVcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihhcHAsIG5hbWUpIHtcbiAgICAgICAgc3VwZXIoe30pO1xuICAgICAgICB0aGlzLmFwcCA9IGFwcDtcbiAgICAgICAgdGhpcy5hcHAuc2V0Q3VycmVudENvbnRyb2xsZXIodGhpcyk7XG4gICAgICAgIHRoaXMuc2V0V29ya2luZyh7XG4gICAgICAgICAgICBuYW1lLFxuICAgICAgICAgICAgcmVhZHk6IGZhbHNlLFxuICAgICAgICAgICAgdmlld3M6IHt9LFxuICAgICAgICAgICAgbGliczoge30sXG4gICAgICAgICAgICBoZWxwZXJzOiB7fSxcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMudWkgPSB7fTtcbiAgICAgICAgdGhpcy5lbHMgPSB7fTtcbiAgICAgICAgdGhpcy5zZXREYXRhKHt9KTtcbiAgICAgICAgdGhpcy5zZXRPcHRpb25zKHtcbiAgICAgICAgICAgIG1vZHVsZU5hbWU6IE9QVF9ERUZBVUxUX01PRFVMRV9OQU1FLFxuICAgICAgICAgICAgY29udGFpbmVyU2VsZWN0b3I6IE9QVF9ERUZBVUxUX0NPTlRBSU5FUl9TRUxFQ1RPUixcbiAgICAgICAgICAgIHByZWZpeDogYXBwLmdldE9wdGlvbnMoXCJwYXRocy5tb2R1bGVcIiksXG4gICAgICAgICAgICBuYW1lczoge1xuICAgICAgICAgICAgICAgIHBsdXJhbDogT1BUX0RFRkFVTFRfUExVUkFMX05BTUUsXG4gICAgICAgICAgICAgICAgc2luZ2xlOiBPUFRfREVGQVVMVF9TSU5HTEVfTkFNRSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnNldFVSTFByZWZpeChhcHAuZ2V0T3B0aW9ucyhcInJvdXRlci5yb290XCIpKTtcbiAgICAgICAgLypcbiAgICAgINGB0YDQsNC30YMg0LTQtdC70LDQtdC8INC00L7RgdGC0YPQv9C90YvQvNC4INC80L7QtNC10LvQuCBub3RSZWNvcmQg0LjQtyBuY2BDb250cm9sbGVyTmFtZWAg0LHRg9C00YPRgiDQtNC+0YHRgtGD0L/QvdGLINC60LDQuiB0aGlzLm5yYE1vZGVsTmFtZWBcbiAgICAqL1xuICAgICAgICBsZXQgaW50ZXJmYWNlcyA9IGFwcC5nZXRJbnRlcmZhY2VzKCk7XG4gICAgICAgIHRoaXMubWFrZSA9IHt9O1xuICAgICAgICBmb3IgKGxldCB0IGluIGludGVyZmFjZXMpIHtcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgIGlmIChPYmplY3QuaGFzT3duKGludGVyZmFjZXMsIHQpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5tYWtlW3RdID0gaW50ZXJmYWNlc1t0XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLm9uKFwiZGVzdHJveVwiLCAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmFwcCA9IG51bGw7XG4gICAgICAgICAgICBmb3IgKGxldCB1aU5hbWUgaW4gdGhpcy51aSkge1xuICAgICAgICAgICAgICAgIHRoaXMudWlbdWlOYW1lXS5kZXN0cm95ICYmIHRoaXMudWlbdWlOYW1lXS5kZXN0cm95KCk7XG4gICAgICAgICAgICAgICAgdGhpcy51aVt1aU5hbWVdLiRkZXN0cm95ICYmIHRoaXMudWlbdWlOYW1lXS4kZGVzdHJveSgpO1xuICAgICAgICAgICAgICAgIHRoaXMudWlbdWlOYW1lXSA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmVscyA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLm1ha2UgPSBudWxsO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogIFJldHVybnMgY3VycmVudCBub3RBcHBcbiAgICAgKiAgQHJldHVybiB7aW1wb3J0KCcuL2FwcC5qcycpLmRlZmF1bHR9XG4gICAgICovXG4gICAgZ2V0QXBwKCkge1xuICAgICAgICByZXR1cm4gbm90Q29tbW9uLmdldEFwcCgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqICBTZXRzIGRlZmF1bHQgY29udHJvbGxlciBtb2RlbFxuICAgICAqICBAcGFyYW0ge2ltcG9ydCgnLi9yZWNvcmQuanMnKX0gIG1vZGVsICBub3RSZWNvcmQgaW50ZXJmYWNlIG9iamVjdFxuICAgICAqICBAcmV0dXJuIHtub3RDb250cm9sbGVyfVxuICAgICAqL1xuICAgIHNldE1vZGVsKG1vZGVsKSB7XG4gICAgICAgIHRoaXMuc2V0V29ya2luZyhcIm1vZGVsXCIsIG1vZGVsKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogIElmIHplcm8gb3Igb25lIGFyZ3VtZW50IHByb3ZpZGVkIHRoaXMgbW9kZWxOYW1lIGluc3RhbmNlIHdpbGwgYmUgcmV0dXJuZWRcbiAgICAgKiAgSWYgdHdvIHByb3ZpZGVkIGFuZCBmaXJzdCBpcyBhIHN0cmluZyB0aGFuIGluc3RhbmNlIG9mIG5hbWUgd2lsbCBiZSByZXR1cm5lZCBpbml0aWFsaXplZCB3aXRoIHNlY29uZCBvYmplY3QgcGFyYW0gb3IgZW1wdHkgb2JqZWN0XG4gICAgICogIEBwYXJhbSB7c3RyaW5nfG9iamVjdH0gICAgICBbbmFtZV0gICAgbW9kZWxOYW1lIG9mIGluc3RhbmNlIHRvIHJldHVybiBvciBpbml0aWFsIGRhdGEgZm9yIGluc3RhbmNlXG4gICAgICogIEBwYXJhbSB7b2JqZWN0fSAgICAgICAgICAgICBbZGF0YV0gICAgbW9kZWwgZGF0YVxuICAgICAqICBAcmV0dXJuIHtpbXBvcnQoJy4vcmVjb3JkLmpzJykuZGVmYXVsdH1cbiAgICAgKi9cbiAgICBnZXRNb2RlbChuYW1lLCBkYXRhKSB7XG4gICAgICAgIGlmICh0eXBlb2YgbmFtZSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgY29uc3QgaW50ID0gdGhpcy5nZXRJbnRlcmZhY2UobmFtZSk7XG4gICAgICAgICAgICByZXR1cm4gaW50ICYmIGludChkYXRhIHx8IHt9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGludCA9IHRoaXMuZ2V0SW50ZXJmYWNlKCk7XG4gICAgICAgICAgICByZXR1cm4gaW50ICYmIGludChuYW1lIHx8IHt9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgY29udHJvbGxlciBpbnRlcmZhY2UgaWYgbmFtZSBpcyBub3Qgc3BlY2lmaWVkIG9yIGludGVyZmFjZSBvZiBzcGVjaWZpZWRcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbbmFtZT1cIlwiXVxuICAgICAqIEByZXR1cm4geyp9XG4gICAgICogQG1lbWJlcm9mIG5vdENvbnRyb2xsZXJcbiAgICAgKi9cbiAgICBnZXRJbnRlcmZhY2UobmFtZSA9IFwiXCIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYXBwPy5nZXRJbnRlcmZhY2UobmFtZSB8fCB0aGlzLmdldE1vZGVsTmFtZSgpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiAgUmV0dXJucyBjdXJyZW50IG1vZGVsIG5hbWVcbiAgICAgKiAgQHJldHVybiB7c3RyaW5nfVxuICAgICAqL1xuICAgIGdldE1vZGVsTmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0V29ya2luZyhcIm1vZGVsTmFtZVwiKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIFNldHMgZGVmYXVsdCBjb250cm9sbGVyIG1vZGVsIG5hbWVcbiAgICAgKiAgQHBhcmFtIHtzdHJpbmd9ICBtb2RlbE5hbWUgIG5vdFJlY29yZCBpbnRlcmZhY2Ugb2JqZWN0XG4gICAgICogIEByZXR1cm4ge25vdENvbnRyb2xsZXJ9XG4gICAgICovXG4gICAgc2V0TW9kZWxOYW1lKG1vZGVsTmFtZSkge1xuICAgICAgICB0aGlzLnNldFdvcmtpbmcoXCJtb2RlbE5hbWVcIiwgbm90Q29tbW9uLmxvd2VyRmlyc3RMZXR0ZXIobW9kZWxOYW1lKSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqICBSZXR1cm5zIGN1cnJlbnQgbW9kZWwgcHJpbWFyeSBJRCBmaWVsZCBuYW1lXG4gICAgICogIEByZXR1cm4ge2ltcG9ydCgnLi9yZWNvcmQuanMnKX1cbiAgICAgKi9cbiAgICBnZXRNb2RlbElERmllbGROYW1lKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRXb3JraW5nKFwibW9kZWxJREZpZWxkTmFtZVwiLCBcIl9pZFwiKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiAgU2V0cyBjdXJyZW50IG1vZGVsIHByaW1hcnkgSUQgZmllbGQgbmFtZVxuICAgICAqICBAcmV0dXJuIHtub3RDb250cm9sbGVyfVxuICAgICAqL1xuICAgIHNldE1vZGVsSURGaWVsZE5hbWUodmFsID0gXCJfaWRcIikge1xuICAgICAgICByZXR1cm4gdGhpcy5zZXRXb3JraW5nKFwibW9kZWxJREZpZWxkTmFtZVwiLCB2YWwpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqICBNYXJrcyB0aGlzIGNvbnRyb2xsZXIgYXMgcmVhZHlcbiAgICAgKiAgZW1pdHMgXCJyZWFkeVwiL1wiYnVzeVwiIGV2ZW50c1xuICAgICAqICBAcGFyYW0ge0Jvb2xlYW59ICB2YWwgIHRydWUvZmFsc2VcbiAgICAgKi9cbiAgICBzZXRSZWFkeSh2YWwgPSB0cnVlKSB7XG4gICAgICAgIHRoaXMuc2V0V29ya2luZyhcInJlYWR5XCIsIHZhbCk7XG4gICAgICAgIHZhbCA/IHRoaXMuZW1pdChcInJlYWR5XCIpIDogdGhpcy5lbWl0KFwiYnVzeVwiKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiAgU2V0cyBtb2R1bGUgVVJMIHByZWZpeFxuICAgICAqICBAcGFyYW0ge3N0cmluZ30gdmFsIFVSTCBwcmVmaXhcbiAgICAgKiAgQHJldHVybiB7bm90Q29udHJvbGxlcn0gdGhpc1xuICAgICAqL1xuICAgIHNldFVSTFByZWZpeCh2YWwpIHtcbiAgICAgICAgdGhpcy5zZXRPcHRpb25zKFwidXJsUHJlZml4XCIsIHZhbCk7XG4gICAgICAgIHRoaXMudXBkYXRlQXV0b05hbWUoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogIFJldHVybnMgbW9kdWxlIHVybCBwcmVmaXhcbiAgICAgKiAgQHJldHVybiAge3N0cmluZ30gcHJlZml4XG4gICAgICovXG4gICAgZ2V0VVJMUHJlZml4KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRPcHRpb25zKFwidXJsUHJlZml4XCIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqICBTZXRzIG1vZHVsZSBuYW1lXG4gICAgICogIEBwYXJhbSB7c3RyaW5nfSB2YWwgbmFtZSBvZiB0aGUgbW9kdWxlXG4gICAgICogIEByZXR1cm4ge25vdENvbnRyb2xsZXJ9IHRoaXNcbiAgICAgKi9cbiAgICBzZXRNb2R1bGVOYW1lKHZhbCkge1xuICAgICAgICB0aGlzLnNldE9wdGlvbnMoXCJtb2R1bGVOYW1lXCIsIG5vdENvbW1vbi5sb3dlckZpcnN0TGV0dGVyKHZhbCkpO1xuICAgICAgICB0aGlzLnVwZGF0ZUF1dG9OYW1lKCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgUmV0dXJucyBtb2R1bGUgbmFtZVxuICAgICAqICBAcmV0dXJuICB7c3RyaW5nfSBtb2R1bGUgbmFtZVxuICAgICAqL1xuICAgIGdldE1vZHVsZU5hbWUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldE9wdGlvbnMoXCJtb2R1bGVOYW1lXCIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqICBSZXR1cm5zIHRoaXMgbW9kdWxlIHBhdGggcHJlZml4XG4gICAgICogIEByZXR1cm4ge3N0cmluZ30gIHBhdGggdG8gbW9kdWxlIGRpclxuICAgICAqL1xuICAgIGdldE1vZHVsZVByZWZpeCgpIHtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIG5vdENvbW1vbi5nZXRBcHAoKS5nZXRPcHRpb25zKFwicGF0aHMubW9kdWxlc1wiKSxcbiAgICAgICAgICAgIHRoaXMuZ2V0TW9kdWxlTmFtZSgpLFxuICAgICAgICBdLmpvaW4oXCIvXCIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqICBSZXR1cm5zIHRoaXMgbW9kZWwgVVJMIHdpdGggVVJMIHByZWZpeFxuICAgICAqICBAcmV0dXJuIHtzdHJpbmd9ICB1cmwgcGF0aFxuICAgICAqL1xuICAgIGdldE1vZGVsVVJMKCkge1xuICAgICAgICByZXR1cm4gbm90Q29tbW9uLmJ1aWxkVVJMKHtcbiAgICAgICAgICAgIHByZWZpeDogdGhpcy5nZXRVUkxQcmVmaXgoKSxcbiAgICAgICAgICAgIG1vZHVsZTogdGhpcy5nZXRNb2R1bGVOYW1lKCksXG4gICAgICAgICAgICBtb2RlbDogdGhpcy5nZXRNb2RlbE5hbWUoKSxcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogIFJldHVybnMgdGhpcyBtb2RlbCBhY3Rpb24gVVJMIHdpdGggVVJMIHByZWZpeFxuICAgICAqIEBwYXJhbSAge3N0cmluZ30gICBpZCAgICAgICBzb21lIGlkZW50aWZpY2F0b3Igb2YgbW9kZWxcbiAgICAgKiBAcGFyYW0gIHtzdHJpbmd9ICAgYWN0aW9uICAgYWN0aW9uIG5hbWVcbiAgICAgKiAgQHJldHVybiB7c3RyaW5nfSAgdXJsIHBhdGhcbiAgICAgKi9cbiAgICBnZXRNb2RlbEFjdGlvblVSTChpZCwgYWN0aW9uID0gXCJcIikge1xuICAgICAgICByZXR1cm4gbm90Q29tbW9uLmJ1aWxkVVJMKHtcbiAgICAgICAgICAgIHByZWZpeDogdGhpcy5nZXRVUkxQcmVmaXgoKSxcbiAgICAgICAgICAgIG1vZHVsZTogdGhpcy5nZXRNb2R1bGVOYW1lKCksXG4gICAgICAgICAgICBtb2RlbDogdGhpcy5nZXRNb2RlbE5hbWUoKSxcbiAgICAgICAgICAgIGlkLFxuICAgICAgICAgICAgYWN0aW9uLFxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIHVybCBmcm9tIHZhbHVlIGNvbnRlbnRcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gIHZhbFxuICAgICAqKi9cbiAgICBidWlsZFVSTCh2YWwpIHtcbiAgICAgICAgcmV0dXJuIG5vdENvbW1vbi5idWlsZFVSTCh2YWwpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqICBVcGRhdGVzIHdvcmtpbmcgbmFtZVxuICAgICAqICBAcmV0dXJuIHtub3RDb250cm9sbGVyfSB0aGlzXG4gICAgICovXG4gICAgdXBkYXRlQXV0b05hbWUoKSB7XG4gICAgICAgIGlmICh0aGlzLmdldE9wdGlvbnMoXCJhdXRvTmFtZVwiLCBPUFRfREVGQVVMVF9BVVRPX05BTUUpKSB7XG4gICAgICAgICAgICAvL3RoaXMuc2V0V29ya2luZygnbmFtZScsIHRoaXMuZ2V0TW9kZWxVUkwoKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogIFNldHMgb2JqZWN0IG5hbWVcbiAgICAgKiAgQHBhcmFtIHtzdHJpbmd9IHZhbCBuYW1lIG9mIHRoZSBvYmplY3RcbiAgICAgKiAgQHJldHVybiB7bm90Q29udHJvbGxlcn0gdGhpc1xuICAgICAqL1xuICAgIHNldE5hbWUodmFsKSB7XG4gICAgICAgIHRoaXMuc2V0V29ya2luZyhcIm5hbWVcIiwgdmFsKTtcbiAgICAgICAgdGhpcy5zZXRPcHRpb25zKFwiYXV0b05hbWVcIiwgZmFsc2UpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiAgR2V0cyBvYmplY3QgbmFtZVxuICAgICAqICBAcmV0dXJuIHtzdHJpbmd9XG4gICAgICovXG4gICAgZ2V0TmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0V29ya2luZyhcIm5hbWVcIik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogIFByZWxvYWQgcmVjb3JkcyBmcm9tIHNlcnZlciwgdXNpbmcgbGlzdEFsbCBtZXRob2QsXG4gICAgICogIHJldHVybnMgUHJvbWlzZVxuICAgICAqICBAcGFyYW0ge29iamVjdH0gIGxpc3QgIG1hcCBvZiBwcmVsb2FkZWQgcmVjb3Jkc1xuICAgICAqICBAcmV0dXJuIHtQcm9taXNlfVxuICAgICAqL1xuICAgIHByZWxvYWRMaWIobGlzdCA9IHt9KSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGxpc3QgIT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgICAgICAgICByZXNvbHZlKHVuZGVmaW5lZCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0V29ya2luZyhcImxvYWRpbmdcIiwgW10pO1xuICAgICAgICAgICAgICAgIGZvciAobGV0IHQgaW4gbGlzdCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmdldFdvcmtpbmcoXCJsb2FkaW5nXCIpLnB1c2gobGlzdFt0XSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubWFrZVtsaXN0W3RdXSh7fSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC4kbGlzdEFsbCgpXG4gICAgICAgICAgICAgICAgICAgICAgICAudGhlbigoZGF0YSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5nZXRPcHRpb25zKFwibGlic1wiKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldE9wdGlvbnMoXCJsaWJzXCIsIHt9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5nZXRPcHRpb25zKFwibGlic1wiKVt0XSA9IGRhdGE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmdldFdvcmtpbmcoXCJsb2FkaW5nXCIpLmluZGV4T2YobGlzdFt0XSkgPiAtMVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmdldFdvcmtpbmcoXCJsb2FkaW5nXCIpLnNwbGljZShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZ2V0V29ya2luZyhcImxvYWRpbmdcIikuaW5kZXhPZihsaXN0W3RdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZ2V0V29ya2luZyhcImxvYWRpbmdcIikubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUodW5kZWZpbmVkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgLmNhdGNoKChlcnIpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlcG9ydChlcnIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmdldFdvcmtpbmcoXCJsb2FkaW5nXCIpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHVuZGVmaW5lZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBlbWl0cyBhZnRlclJlbmRlciBldmVudFxuICAgICAqL1xuICAgIG9uQWZ0ZXJSZW5kZXIoKSB7XG4gICAgICAgIHRoaXMuZW1pdChcImFmdGVyUmVuZGVyXCIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqICBUcmFuc2Zvcm0gcm91dGUgbmFtZSBpbiBhY3Rpb24gbmFtZVxuICAgICAqICBAcGFyYW0ge1N0cmluZ30gICBuYW1lIHRyYW5mb3JtIGFjdGlvbiBuYW1lXG4gICAgICogIEByZXR1cm4ge1N0cmluZ31cbiAgICAgKi9cbiAgICBnZXRBY3Rpb25OYW1lKG5hbWUgPSBPUFRfREVGQVVMVF9BQ1RJT05fTkFNRSkge1xuICAgICAgICByZXR1cm4gXCJydW5cIiArIG5vdENvbW1vbi5jYXBpdGFsaXplRmlyc3RMZXR0ZXIobmFtZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogIEdldCBkZWZhdWx0IGNvbnRyb2xsZXIgYWN0aW9uIG5hbWVcbiAgICAgKiAgQHJldHVybiB7U3RyaW5nfSBkZWZhdWx0IGFjdGlvbiBmcm9tIG9wdGlvbnNcbiAgICAgKi9cbiAgICBnZXREZWZhdWx0QWN0aW9uTmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0QWN0aW9uTmFtZShcbiAgICAgICAgICAgIHRoaXMuZ2V0T3B0aW9ucyhcImRlZmF1bHRBY3Rpb25cIiwgT1BUX0RFRkFVTFRfQUNUSU9OX05BTUUpXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogIFJvdXRlIHBhcmFtcyBpbnRvIHNwZWNpZmljIHJ1bltSb3V0ZV9uYW1lXSBmdW5jdGlvblxuICAgICAqICBAcGFyYW0ge2FycmF5fSAgIHBhcmFtcyAgIGNvbnRyb2xsZXIgaW5wdXQgcGFyYW1zXG4gICAgICogIEByZXR1cm4ge3VuZGVmaW5lZH1cbiAgICAgKi9cbiAgICByb3V0ZShwYXJhbXMpIHtcbiAgICAgICAgbGV0IFtyb3V0ZXJOYW1lLCAuLi5zdWJQYXJhbXNdID0gcGFyYW1zLFxuICAgICAgICAgICAgYWN0aW9uTmFtZSA9IHRoaXMuZ2V0QWN0aW9uTmFtZShcbiAgICAgICAgICAgICAgICByb3V0ZXJOYW1lID8gcm91dGVyTmFtZSA6IE9QVF9ERUZBVUxUX0FDVElPTl9OQU1FXG4gICAgICAgICAgICApO1xuICAgICAgICBpZiAodHlwZW9mIHRoaXNbYWN0aW9uTmFtZV0gPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgdGhpcy5zZXRDdXJyZW50QWN0aW9uKGFjdGlvbk5hbWUpO1xuICAgICAgICAgICAgdGhpc1thY3Rpb25OYW1lXShzdWJQYXJhbXMpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXNbdGhpcy5nZXREZWZhdWx0QWN0aW9uTmFtZSgpXSkge1xuICAgICAgICAgICAgdGhpcy5zZXRDdXJyZW50QWN0aW9uKHRoaXMuZ2V0RGVmYXVsdEFjdGlvbk5hbWUoKSk7XG4gICAgICAgICAgICB0aGlzW3RoaXMuZ2V0RGVmYXVsdEFjdGlvbk5hbWUoKV0oc3ViUGFyYW1zKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc2V0Q3VycmVudEFjdGlvbih1bmRlZmluZWQpO1xuICAgICAgICAgICAgdGhpcy5lcnJvciAmJiB0aGlzLmVycm9yKFwiTm8gYWN0aW9uIGluIHJvdXRlclwiLCBwYXJhbXMpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyB3b3JraW5nIGFjdGlvblxuICAgICAqIEBwYXJhbXMge3N0cmluZ30gYWN0aW9uTmFtZSBjdXJyZW50IGFjdGlvbiBuYW1lXG4gICAgICovXG4gICAgc2V0Q3VycmVudEFjdGlvbihhY3Rpb25OYW1lKSB7XG4gICAgICAgIHRoaXMuc2V0V29ya2luZyhcImFjdGlvblwiLCBhY3Rpb25OYW1lKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHdvcmtpbmcgYWN0aW9uXG4gICAgICogQHJldHVybnMge3N0cmluZ30gY3VycmVudCBhY3Rpb24gbmFtZVxuICAgICAqL1xuICAgIGdldEN1cnJlbnRBY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFdvcmtpbmcoXCJhY3Rpb25cIik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogIFJldHVybiBhcHBsaWNhdGlvbiBvcHRpb25zXG4gICAgICogIEByZXR1cm4ge29iamVjdH1cbiAgICAgKi9cbiAgICBnZXRBcHBPcHRpb25zKCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0QXBwKCkuZ2V0T3B0aW9ucygpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICB0aGlzLmVycm9yICYmIHRoaXMuZXJyb3IoZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiAgUmV0dXJucyBtb2R1bGUgb3B0aW9uc1xuICAgICAqICBAcGFyYW0gIHtzdHJpbmd9ICAgW21vZHVsZU5hbWVdICAgIG5hbWUgb2YgdGhlIG1vZHVsZSB3aGljaCBvcHRpb25zIHJlcXVlc3RlZFxuICAgICAqICBAcmV0dXJuIHtvYmplY3R9XG4gICAgICovXG5cbiAgICBnZXRNb2R1bGVPcHRpb25zKG1vZHVsZU5hbWUpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldEFwcCgpLmdldE9wdGlvbnMoXG4gICAgICAgICAgICAgICAgW1wibW9kdWxlc1wiLCBtb2R1bGVOYW1lIHx8IHRoaXMuZ2V0TW9kdWxlTmFtZSgpXS5qb2luKFwiLlwiKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgdGhpcy5lcnJvciAmJiB0aGlzLmVycm9yKGUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogIFJldHVybnMgbW9kdWxlIHNlcnZpY2VzXG4gICAgICogIEBwYXJhbSAge3N0cmluZ30gICBtb2R1bGVOYW1lICAgIG5hbWUgb2YgdGhlIG1vZHVsZSB3aGljaCBzZXJ2aWNlcyByZXF1ZXN0ZWRcbiAgICAgKiAgQHJldHVybiB7b2JqZWN0fVxuICAgICAqL1xuXG4gICAgZ2V0U2VydmljZXMobW9kdWxlTmFtZSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0QXBwKCkuZ2V0T3B0aW9ucyhcbiAgICAgICAgICAgICAgICBbXCJzZXJ2aWNlc1wiLCBtb2R1bGVOYW1lIHx8IHRoaXMuZ2V0TW9kdWxlTmFtZSgpXS5qb2luKFwiLlwiKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgdGhpcy5lcnJvciAmJiB0aGlzLmVycm9yKGUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogIFJldHVybnMgbW9kdWxlIGNvbXBvbmVudHNcbiAgICAgKiAgQHBhcmFtICB7c3RyaW5nfSAgIG1vZHVsZU5hbWUgICAgbmFtZSBvZiB0aGUgbW9kdWxlIHdoaWNoIGNvbXBvbmVudHMgcmVxdWVzdGVkXG4gICAgICogIEByZXR1cm4ge29iamVjdH1cbiAgICAgKi9cblxuICAgIGdldENvbXBvbmVudHMobW9kdWxlTmFtZSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0QXBwKCkuZ2V0T3B0aW9ucyhcbiAgICAgICAgICAgICAgICBbXCJjb21wb25lbnRzXCIsIG1vZHVsZU5hbWUgfHwgdGhpcy5nZXRNb2R1bGVOYW1lKCldLmpvaW4oXCIuXCIpXG4gICAgICAgICAgICApO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICB0aGlzLmVycm9yICYmIHRoaXMuZXJyb3IoZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiAgUmVmcmVzaGVzIGN1cnJlbnQgVVJMLCByZS1ydW4gYWxsIGFjdGlvblxuICAgICAqICBAcGFyYW0ge251bWJlcn0gdGltZW91dCB0aW1lIHRvIHdhaXQgaW4gbXNcbiAgICAgKi9cbiAgICByZWZyZXNoKHRpbWVvdXQgPSAwKSB7XG4gICAgICAgIHRoaXMuYXBwPy5nZXRXb3JraW5nKFwicm91dGVyXCIpLnJlZnJlc2godGltZW91dCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBwYXRoIHBhdHRlcm4gZm9yIHJvdXRlclxuICAgICAqIEBwYXJhbXMge251bWJlcn0gWzBdIHBhcmFtc0NvdW50ICAgbnVtYmVyIG9mIHBhcmFtc1xuICAgICAqIEByZXR1cm4ge3N0cmluZ30gIHBhdHRlcm4gZm9yIGNvbnRyb2xsZXIgc3VwcG9ydGVkIHVybFxuICAgICAqL1xuICAgIHN0YXRpYyBnZXRDb250cm9sbGVyUm91dGUocGFyYW1zQ291bnQgPSAwKSB7XG4gICAgICAgIGxldCBwYXRoID0gW107XG4gICAgICAgIGlmICh0aGlzLk1PRFVMRV9OQU1FICYmIHRoaXMuTU9EVUxFX05BTUUubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgcGF0aC5wdXNoKG5vdENvbW1vbi5sb3dlckZpcnN0TGV0dGVyKHRoaXMuTU9EVUxFX05BTUUpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5NT0RFTF9OQU1FICYmIHRoaXMuTU9ERUxfTkFNRS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBwYXRoLnB1c2gobm90Q29tbW9uLmxvd2VyRmlyc3RMZXR0ZXIodGhpcy5NT0RFTF9OQU1FKSk7XG4gICAgICAgIH1cbiAgICAgICAgcGF0aCA9IFtwYXRoLmpvaW4oXCIvXCIpXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYXJhbXNDb3VudDsgaSsrKSB7XG4gICAgICAgICAgICBwYXRoLnB1c2goXCIvKFteL10rKVwiKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcGF0aC5qb2luKFwiXCIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgcGF0aCBwYXR0ZXJucyBmb3Igcm91dGVyXG4gICAgICogQHBhcmFtcyB7bnVtYmVyfSBbMF0gcGFyYW1zRGVlcCAgIGhvdyBtYW55IHBhdGhzIHdpdGggcGFyYW1zIGluIHRoZSBlbmRcbiAgICAgKiBAcmV0dXJuIHtzdHJpbmdbXX0gIHBhdHRlcm5zIGZvciBjb250cm9sbGVyIHN1cHBvcnRlZCB1cmwgaW4gb3JkZXIgb2Ygc2ltcGxpZmljYXRpb25cbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0Q29udHJvbGxlclJvdXRlcyhwYXJhbXNEZWVwID0gMCkge1xuICAgICAgICBsZXQgcm91dGVzID0gW3RoaXMuZ2V0Q29udHJvbGxlclJvdXRlKDApXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYXJhbXNEZWVwOyBpKyspIHtcbiAgICAgICAgICAgIHJvdXRlcy51bnNoaWZ0KHRoaXMuZ2V0Q29udHJvbGxlclJvdXRlKGkgKyAxKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJvdXRlcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHJvdXRlciBydWxlLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IHJvdXRlciBydWxlIHtwYXRoczpTdHJpbmdbXSwgY29udHJvbGxlcjpub3RDb250cm9sbGVyfVxuICAgICAqL1xuICAgIHN0YXRpYyBnZXRSb3V0ZXMoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBwYXRoczogdGhpcy5nZXRDb250cm9sbGVyUm91dGVzKHRoaXMuUEFSQU1TX0xFTkdUSCksXG4gICAgICAgICAgICBjb250cm9sbGVyOiB0aGlzLFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgQXBwbGljYXRpb24gcm91dGVyXG4gICAgICogQHJldHVybnMge2ltcG9ydCgnLi9yb3V0ZXIuanMnKS5kZWZhdWx0fVxuICAgICAqL1xuICAgIGdldFJvdXRlcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYXBwPy5nZXRXb3JraW5nKFwicm91dGVyXCIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoYW5nZXMgbG9jYXRpb24gdG8gYHVybGAgYWZ0ZXIgYGRlbGF5YCBtc1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB1cmxcbiAgICAgKiBAcGFyYW0ge251bWJlcnxzdHJpbmd9ICAgZGVsYXkgICBudW1iZXIgaW4gbXMgb3IgbmFtZSBvZiBkZWxheVxuICAgICAqL1xuICAgIG5hdmlnYXRlV2l0aERlbGF5KFxuICAgICAgICB1cmwsXG4gICAgICAgIGRlbGF5ID0gTkFWSUdBVElPTl9ERUxBWV9ERUZBVUxULFxuICAgICAgICBkb0JlZm9yZSA9ICgpID0+IHt9XG4gICAgKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFJvdXRlcigpLm5hdmlnYXRlV2l0aERlbGF5KHVybCwgZGVsYXksIGRvQmVmb3JlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGFuZ2VzIGxvY2F0aW9uIHRvIGB1cmxgXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHVybFxuICAgICAqL1xuICAgIG5hdmlnYXRlKHVybCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRSb3V0ZXIoKS5uYXZpZ2F0ZSh1cmwpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqICBOYXZpZ2F0aW5nIHRvIHRoaXMgY29udHJvbGxlciBtYWluIG1vZGVsIGBhY3Rpb25gIHdpdGggcHJvdmlkZWQgYGlkYCxcbiAgICAgKiAgZW1wdHkgYGlkYCB3aWxsIGJlIGRyb3BwZWQgZnJvbSByZXN1bHRpbmcgdXJsXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gaWRcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2FjdGlvbj1cIlwiXVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZGVsYXk9MF0gICAgICAgICAgICBkZWxheSBpbiBtcyBiZWZvcmUgbmF2aWdhdGVcbiAgICAgKiBAcGFyYW0gICB7ZnVuY3Rpb259ICBbZG9CZWZvcmVdICAgICAgd2lsbCBleGVjdXRlZCBvbmx5IGlmIGRlbGF5ZWQgYWZ0ZXIgZGVsYXkgYnV0IGJlZm9yZSBuYXZpZ2F0ZVxuICAgICAqIEByZXR1cm4geyp9XG4gICAgICogQG1lbWJlcm9mIG5vdENvbnRyb2xsZXJcbiAgICAgKi9cbiAgICBuYXZpZ2F0ZUFjdGlvbihpZCwgYWN0aW9uID0gXCJcIiwgZGVsYXkgPSAwLCBkb0JlZm9yZSA9ICgpID0+IHt9KSB7XG4gICAgICAgIHJldHVybiB0aGlzLm5hdmlnYXRlTW9kdWxlQWN0aW9uKFxuICAgICAgICAgICAgdGhpcy5nZXRNb2R1bGVOYW1lKCksXG4gICAgICAgICAgICB0aGlzLmdldE1vZGVsTmFtZSgpLFxuICAgICAgICAgICAgaWQsXG4gICAgICAgICAgICBhY3Rpb24sXG4gICAgICAgICAgICBkZWxheSxcbiAgICAgICAgICAgIGRvQmVmb3JlXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogIE5hdmlnYXRpbmcgdG8gdGhpcyBjb250cm9sbGVyIG1vZHVsZSBtb2RlbCBvZiBgbW9kZWxOYW1lYCBgYWN0aW9uYCB3aXRoIHByb3ZpZGVkIGBpZGAsXG4gICAgICogIGVtcHR5IGBpZGAgd2lsbCBiZSBkcm9wcGVkIGZyb20gcmVzdWx0aW5nIHVybFxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG1vZGVsTmFtZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbYWN0aW9uPVwiXCJdXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtkZWxheT0wXSAgICAgICAgICAgIGRlbGF5IGluIG1zIGJlZm9yZSBuYXZpZ2F0ZVxuICAgICAqIEBwYXJhbSAgIHtmdW5jdGlvbn0gIFtkb0JlZm9yZV0gICAgICB3aWxsIGV4ZWN1dGVkIG9ubHkgaWYgZGVsYXllZCBhZnRlciBkZWxheSBidXQgYmVmb3JlIG5hdmlnYXRlXG4gICAgICogQHJldHVybiB7Kn1cbiAgICAgKiBAbWVtYmVyb2Ygbm90Q29udHJvbGxlclxuICAgICAqL1xuICAgIG5hdmlnYXRlTW9kZWxBY3Rpb24oXG4gICAgICAgIG1vZGVsTmFtZSxcbiAgICAgICAgaWQsXG4gICAgICAgIGFjdGlvbiA9IFwiXCIsXG4gICAgICAgIGRlbGF5ID0gMCxcbiAgICAgICAgZG9CZWZvcmUgPSAoKSA9PiB7fVxuICAgICkge1xuICAgICAgICByZXR1cm4gdGhpcy5uYXZpZ2F0ZU1vZHVsZUFjdGlvbihcbiAgICAgICAgICAgIHRoaXMuZ2V0TW9kdWxlTmFtZSgpLFxuICAgICAgICAgICAgbW9kZWxOYW1lLFxuICAgICAgICAgICAgaWQsXG4gICAgICAgICAgICBhY3Rpb24sXG4gICAgICAgICAgICBkZWxheSxcbiAgICAgICAgICAgIGRvQmVmb3JlXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogIE5hdmlnYXRpbmcgdG8gYG1vZHVsZU5hbWVgIGBtb2RlbE5hbWVgIGBhY3Rpb25gIHdpdGggcHJvdmlkZWQgYGlkYCxcbiAgICAgKiAgZW1wdHkgYGlkYCB3aWxsIGJlIGRyb3BwZWQgZnJvbSByZXN1bHRpbmcgdXJsXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbW9kdWxlTmFtZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtb2RlbE5hbWVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gaWRcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2FjdGlvbj1cIlwiXVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZGVsYXk9MF0gICAgICAgICAgICBkZWxheSBpbiBtcyBiZWZvcmUgbmF2aWdhdGVcbiAgICAgKiBAcGFyYW0gICB7ZnVuY3Rpb259ICBbZG9CZWZvcmVdICAgICAgd2lsbCBleGVjdXRlZCBvbmx5IGlmIGRlbGF5ZWQgYWZ0ZXIgZGVsYXkgYnV0IGJlZm9yZSBuYXZpZ2F0ZVxuICAgICAqIEByZXR1cm4geyp9XG4gICAgICogQG1lbWJlcm9mIG5vdENvbnRyb2xsZXJcbiAgICAgKi9cbiAgICBuYXZpZ2F0ZU1vZHVsZUFjdGlvbihcbiAgICAgICAgbW9kdWxlTmFtZSxcbiAgICAgICAgbW9kZWxOYW1lLFxuICAgICAgICBpZCxcbiAgICAgICAgYWN0aW9uID0gXCJcIixcbiAgICAgICAgZGVsYXkgPSAwLFxuICAgICAgICBkb0JlZm9yZSA9ICgpID0+IHt9XG4gICAgKSB7XG4gICAgICAgIGlmIChkZWxheSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Um91dGVyKCkubmF2aWdhdGVXaXRoRGVsYXkoXG4gICAgICAgICAgICAgICAgbm90Q29tbW9uLmJ1aWxkVVJMKHtcbiAgICAgICAgICAgICAgICAgICAgcHJlZml4OiB0aGlzLmdldFVSTFByZWZpeCgpLFxuICAgICAgICAgICAgICAgICAgICBtb2R1bGU6IG1vZHVsZU5hbWUsXG4gICAgICAgICAgICAgICAgICAgIG1vZGVsOiBtb2RlbE5hbWUsXG4gICAgICAgICAgICAgICAgICAgIGlkLFxuICAgICAgICAgICAgICAgICAgICBhY3Rpb24sXG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgZGVsYXksXG4gICAgICAgICAgICAgICAgZG9CZWZvcmVcbiAgICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRSb3V0ZXIoKS5uYXZpZ2F0ZShcbiAgICAgICAgICAgICAgICBub3RDb21tb24uYnVpbGRVUkwoe1xuICAgICAgICAgICAgICAgICAgICBwcmVmaXg6IHRoaXMuZ2V0VVJMUHJlZml4KCksXG4gICAgICAgICAgICAgICAgICAgIG1vZHVsZTogbW9kdWxlTmFtZSxcbiAgICAgICAgICAgICAgICAgICAgbW9kZWw6IG1vZGVsTmFtZSxcbiAgICAgICAgICAgICAgICAgICAgaWQsXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbixcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgbWVudSBpdGVtIGZyb20gY2hpbGQgY2xhc3MgY29uc3RydWN0b3JcbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAcGFyYW0ge25vdENvbnRyb2xsZXJ9IGNoaWxkQ29uc3RydWN0b3JcbiAgICAgKiBAcmV0dXJuIHtBcnJheTxpbXBvcnQoJy4vdHlwZXMuanMnKS5OYXZpZ2F0aW9uSXRlbT59XG4gICAgICogQG1lbWJlcm9mIG5vdENvbnRyb2xsZXJcbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0Q29tbW9uTWVudShjaGlsZENvbnN0cnVjdG9yKSB7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgICAgIHNlY3Rpb246IGNoaWxkQ29uc3RydWN0b3IuTU9EVUxFX05BTUUsXG4gICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgICAgIHRpdGxlOiBjaGlsZENvbnN0cnVjdG9yLkxBQkVMUy5wbHVyYWwsXG4gICAgICAgICAgICAgICAgdXJsOiBgLyR7bm90Q29tbW9uLmxvd2VyRmlyc3RMZXR0ZXIoXG4gICAgICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgICAgICAgICAgY2hpbGRDb25zdHJ1Y3Rvci5NT0RVTEVfTkFNRVxuICAgICAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICAgICAgKX0vJHtub3RDb21tb24ubG93ZXJGaXJzdExldHRlcihjaGlsZENvbnN0cnVjdG9yLk1PREVMX05BTUUpfWAsXG4gICAgICAgICAgICB9LFxuICAgICAgICBdO1xuICAgIH1cblxuICAgIHN0YXRpYyBnZXRNZW51KCkge31cbn1cblxuZXhwb3J0IGRlZmF1bHQgbm90Q29udHJvbGxlcjtcbiIsImltcG9ydCB7IHdyaXRhYmxlIH0gZnJvbSBcInN2ZWx0ZS9zdG9yZVwiO1xuXG5jb25zdCBBTEwgPSB7fTtcblxuZnVuY3Rpb24gZXhpc3Qoa2V5KSB7XG4gICAgcmV0dXJuIE9iamVjdC5oYXNPd24oQUxMLCBrZXkpO1xufVxuXG5mdW5jdGlvbiBnZXQoa2V5KSB7XG4gICAgaWYgKGV4aXN0KGtleSkpIHtcbiAgICAgICAgcmV0dXJuIEFMTFtrZXldO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZShcbiAgICBrZXksXG4gICAgcHJvcHMgPSB7XG4gICAgICAgIHJhdzogW10sXG4gICAgICAgIGZpbHRlcmVkOiBbXSxcbiAgICAgICAgc2VsZWN0ZWQ6IHt9LFxuICAgIH1cbikge1xuICAgIGlmICghZXhpc3Qoa2V5KSkge1xuICAgICAgICBpZiAoT2JqZWN0LmtleXMocHJvcHMpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIEFMTFtrZXldID0ge307XG4gICAgICAgICAgICBPYmplY3Qua2V5cyhwcm9wcykuZm9yRWFjaCgobmFtZSkgPT4ge1xuICAgICAgICAgICAgICAgIEFMTFtrZXldW25hbWVdID0gd3JpdGFibGUocHJvcHNbbmFtZV0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJzdG9yZSdzIHByb3BzIHdhc24ndCBzcGVjaWZpZWRcIik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIEFMTFtrZXldO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgb2JqZWN0IHRoYXQgaXMgZmFrZSBTdG9yZVxuICogU29tZSB0aW1lIHRoaXMgaXMgdXNlZnVsIHdoZW4geW91IG5lZWQgdG8gaW5pdGlhbGl6ZSBsb2NhbCB2YXIsXG4gKiBiZWZvcmUgeW91IGNvdWxkIGdldCBhY3R1YWwgU3RvcmVzIGZyb20gY2VudHJhbCBzdG9yYWdlIGJ5IGl0cyBJRFxuICpcdEBwYXJhbXMge21peGVkfSB2YWwgXHRkYXRhIG9mIHR5cGUgdGhhdCBpcyBhY3R1YWwgc3RvcmFnZSB3aWxsIGNvbnRhaW5cbiAqIEByZXR1cm5zIHtPYmplY3R9XG4gKi9cblxuZnVuY3Rpb24gZmFrZSh2YWwpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBzdWJzY3JpYmUoZikge1xuICAgICAgICAgICAgZih2YWwpO1xuICAgICAgICAgICAgcmV0dXJuICgpID0+IHt9O1xuICAgICAgICB9LFxuICAgICAgICBzZXQoKSB7fSxcbiAgICB9O1xufVxuXG5leHBvcnQgeyBjcmVhdGUsIGdldCwgZmFrZSB9O1xuIiwiPHNjcmlwdD5cbiAgaW1wb3J0ICdidWxtYS1zd2l0Y2gnO1xuXG4gIGltcG9ydCB7IGNyZWF0ZUV2ZW50RGlzcGF0Y2hlciB9IGZyb20gJ3N2ZWx0ZSc7XG4gIGxldCBkaXNwYXRjaCA9IGNyZWF0ZUV2ZW50RGlzcGF0Y2hlcigpO1xuXG4gIC8qKlxuICAgKiBAdHlwZWRlZiB7T2JqZWN0fSBQcm9wc1xuICAgKiBAcHJvcGVydHkge3N0cmluZ30gW2lkXVxuICAgKiBAcHJvcGVydHkge2Jvb2xlYW59IFt2YWx1ZV1cbiAgICogQHByb3BlcnR5IHtzdHJpbmd9IFtmaWVsZG5hbWVdXG4gICAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW2Rpc2FibGVkXVxuICAgKiBAcHJvcGVydHkge2Jvb2xlYW59IFtyZWFkb25seV1cbiAgICogQHByb3BlcnR5IHtzdHJpbmd9IFtzdHlsaW5nXVxuICAgKi9cblxuICAvKiogQHR5cGUge1Byb3BzfSAqL1xuICBsZXQge1xuICAgICAgaWQgPSAnJyxcbiAgICAgIHZhbHVlID0gJGJpbmRhYmxlKGZhbHNlKSxcbiAgICAgIGZpZWxkbmFtZSA9ICdzd2l0Y2gnLFxuICAgICAgZGlzYWJsZWQgPSBmYWxzZSxcbiAgICAgIHJlYWRvbmx5ID0gZmFsc2UsXG4gICAgICBzdHlsaW5nID0gXCIgaXMtcm91bmRlZCBpcy1zdWNjZXNzIFwiXG4gIH0gPSAkcHJvcHMoKTtcblxuZnVuY3Rpb24gb25JbnB1dChldil7XG4gICAgbGV0IGRhdGEgPSB7XG4gICAgICAgIGlkLFxuICAgICAgICBmaWVsZDogZmllbGRuYW1lLFxuICAgICAgICB2YWx1ZTogZXYudGFyZ2V0LnR5cGUgPT09ICdjaGVja2JveCcgPyBldi50YXJnZXQuY2hlY2tlZDpldi50YXJnZXQudmFsdWVcbiAgICB9O1xuICAgIGRpc3BhdGNoKCdjaGFuZ2UnLCBkYXRhKTtcbiAgICByZXR1cm4gdHJ1ZTtcbn1cblxuPC9zY3JpcHQ+XG5cbjxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIlxuICBjbGFzcz1cInN3aXRjaCB7c3R5bGluZ31cIlxuICBpZD1cImVkaXQtdGFibGUtcm93LWNlbGwtaW5saW5lLXN3aXRjaC17ZmllbGRuYW1lfS17aWR9XCJcbiAgYmluZDpjaGVja2VkPXt2YWx1ZX1cbiAgbmFtZT1cIntmaWVsZG5hbWV9XCJcbiAge3JlYWRvbmx5fSB7ZGlzYWJsZWR9XG4gIG9uaW5wdXQ9e29uSW5wdXR9XG4gIC8+XG48bGFiZWwgY2xhc3M9XCJsYWJlbFwiIGZvcj1cImVkaXQtdGFibGUtcm93LWNlbGwtaW5saW5lLXN3aXRjaC17ZmllbGRuYW1lfS17aWR9XCI+PC9sYWJlbD5cbiIsIjxzY3JpcHQ+XG4gICAgLypcbiAgaW1wb3J0IHsgY3JlYXRlRXZlbnREaXNwYXRjaGVyIH0gZnJvbSAnc3ZlbHRlJztcbiAgbGV0IGRpc3BhdGNoID0gY3JlYXRlRXZlbnREaXNwYXRjaGVyKCk7XG4qL1xuICAgIFxuXG4gIC8qKlxuICAgKiBAdHlwZWRlZiB7T2JqZWN0fSBQcm9wc1xuICAgKiBAcHJvcGVydHkge2FueX0gW3ZhbHVlc10gLSBpdGVtID0ge1xuaWQsICAgICAgICAvL3VuaXF1ZVxudGl0bGUsICAgICAvL3NvbWUgdGV4dFxudmFsdWUsICAgICAgLy9mb3IgZG91YmxlIHRhZ3NcbmNvbG9yICAgICAgIC8vY29sb3Jpbmdcbn1cbiAgICovXG5cbiAgLyoqIEB0eXBlIHtQcm9wc30gKi9cbiAgbGV0IHsgdmFsdWVzID0gW10gfSA9ICRwcm9wcygpO1xuPC9zY3JpcHQ+XG5cbnsjZWFjaCB2YWx1ZXMgYXMgaXRlbSAoaXRlbS5pZCl9XG4gICAgeyNpZiBPYmplY3QuaGFzT3duKGl0ZW0sIFwidmFsdWVcIil9XG4gICAgICAgIDxkaXYgY2xhc3M9XCJteC0xIHRhZ3MgaGFzLWFkZG9uc1wiPlxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJ0YWdcIj57aXRlbS50aXRsZX08L3NwYW4+XG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cInRhZyBpcy17aXRlbS5jb2xvcn0ge2l0ZW0uY3VzdG9tQ2xhc3Nlc31cIj5cbiAgICAgICAgICAgICAgICB7I2lmIGl0ZW0udXJsfVxuICAgICAgICAgICAgICAgICAgICA8YSBocmVmPXtpdGVtLnVybH0gY2xhc3M9e2l0ZW0udXJsQ3VzdG9tQ2xhc3Nlc31cbiAgICAgICAgICAgICAgICAgICAgICAgID57aXRlbS52YWx1ZX08L2FcbiAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIHs6ZWxzZX1cbiAgICAgICAgICAgICAgICAgICAge2l0ZW0udmFsdWV9XG4gICAgICAgICAgICAgICAgey9pZn1cbiAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgPC9kaXY+XG4gICAgezplbHNlfVxuICAgICAgICA8c3BhbiBjbGFzcz1cIm14LTEgdGFnIGlzLXtpdGVtLmNvbG9yfSB7aXRlbS5jdXN0b21DbGFzc2VzfVwiPlxuICAgICAgICAgICAgeyNpZiBpdGVtLnVybH1cbiAgICAgICAgICAgICAgICA8YSBocmVmPXtpdGVtLnVybH0gY2xhc3M9e2l0ZW0udXJsQ3VzdG9tQ2xhc3Nlc30+e2l0ZW0udGl0bGV9PC9hXG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgezplbHNlfVxuICAgICAgICAgICAgICAgIHtpdGVtLnRpdGxlfVxuICAgICAgICAgICAgey9pZn1cbiAgICAgICAgPC9zcGFuPlxuICAgIHsvaWZ9XG57L2VhY2h9XG5cbjxzdHlsZT5cbiAgICAudGFnczpub3QoOmxhc3QtY2hpbGQpIHtcbiAgICAgICAgbWFyZ2luLWJvdHRvbTogbm9uZTtcbiAgICB9XG48L3N0eWxlPlxuIiwiPHNjcmlwdD5cbiAgICBpbXBvcnQgbm90UGF0aCBmcm9tIFwibm90LXBhdGhcIjtcbiAgICBpbXBvcnQgeyBvbk1vdW50IH0gZnJvbSBcInN2ZWx0ZVwiO1xuXG4gICAgbGV0IHRpdGxlID0gJHN0YXRlKFwiXCIpO1xuXG4gICAgb25Nb3VudCgoKSA9PiB7XG4gICAgICAgIGlmICh0eXBlb2YgZmllbGQudHlwZSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgaWYgKE9iamVjdC5oYXNPd24oZmllbGQsIFwidGl0bGVQYXRoXCIpKSB7XG4gICAgICAgICAgICAgICAgdGl0bGUgPSBub3RQYXRoLmdldChmaWVsZC50aXRsZVBhdGgsIGl0ZW0sIGhlbHBlcnMpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICAgICAgICBPYmplY3QuaGFzT3duKGZpZWxkLCBcInRpdGxlQ29tcG9zZXJcIikgJiZcbiAgICAgICAgICAgICAgICB0eXBlb2YgZmllbGQudGl0bGVDb21wb3NlciA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICB0aXRsZSA9IGZpZWxkLnRpdGxlQ29tcG9zZXIoaXRlbSwgaGVscGVycyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRpdGxlID0gbm90UGF0aC5nZXQoZmllbGQucGF0aCwgaXRlbSwgaGVscGVycyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIGltcG9ydCBub3RDb21tb24gZnJvbSBcIi4uLy4uL2NvbW1vblwiO1xuXG4gICAgaW1wb3J0IHsgTE9DQUxFIH0gZnJvbSBcIi4uLy4uLy4uL2xvY2FsZVwiO1xuXG4gICAgaW1wb3J0IFVJQnV0dG9ucyBmcm9tIFwiLi4vLi4vLi4vZWxlbWVudHMvYnV0dG9uL3VpLmJ1dHRvbnMuc3ZlbHRlXCI7XG4gICAgaW1wb3J0IFVJTGlua3MgZnJvbSBcIi4uLy4uLy4uL2VsZW1lbnRzL2xpbmsvdWkubGlua3Muc3ZlbHRlXCI7XG4gICAgaW1wb3J0IFVJSW1hZ2VzIGZyb20gXCIuLi8uLi8uLi9lbGVtZW50cy9pbWFnZS91aS5pbWFnZXMuc3ZlbHRlXCI7XG4gICAgaW1wb3J0IFVJQm9vbGVhbnMgZnJvbSBcIi4uLy4uLy4uL2VsZW1lbnRzL3ZhcmlvdXMvdWkuYm9vbGVhbnMuc3ZlbHRlXCI7XG5cbiAgICBpbXBvcnQgVGFibGVTd2l0Y2ggZnJvbSBcIi4vY29udHJvbHMvdWkuc3dpdGNoLnN2ZWx0ZVwiO1xuICAgIGltcG9ydCBUYWJsZVRhZ3MgZnJvbSBcIi4vY29udHJvbHMvdWkudGFncy5zdmVsdGVcIjtcblxuICAgIGxldCB7XG4gICAgICAgIGdldEl0ZW1JZCA9IChpdGVtKSA9PiBpdGVtLl9pZCxcbiAgICAgICAgZmllbGQgPSB7fSxcbiAgICAgICAgaXRlbSA9IHt9LFxuICAgICAgICBoZWxwZXJzID0ge31cbiAgICB9ID0gJHByb3BzKCk7XG48L3NjcmlwdD5cblxuPHRkXG4gICAgY2xhc3M9eyhmaWVsZC5oaWRlT25Nb2JpbGUgPyBcIiBpcy1oaWRkZW4tdG91Y2ggXCIgOiBcIlwiKSArXG4gICAgICAgIChmaWVsZC5jbGFzc2VzID8gYCAke2ZpZWxkLmNsYXNzZXN9IGAgOiBcIlwiKX1cbiAgICB7dGl0bGV9XG4+XG4gICAgeyNpZiBmaWVsZC50eXBlID09PSBcImxpbmtcIn1cbiAgICAgICAgPFVJTGlua3MgdmFsdWVzPXtub3RQYXRoLmdldChmaWVsZC5wYXRoLCBpdGVtLCBoZWxwZXJzKX0gLz5cbiAgICB7OmVsc2UgaWYgZmllbGQudHlwZSA9PT0gXCJidXR0b25cIn1cbiAgICAgICAgPFVJQnV0dG9ucyB2YWx1ZXM9e25vdFBhdGguZ2V0KGZpZWxkLnBhdGgsIGl0ZW0sIGhlbHBlcnMpfSAvPlxuICAgIHs6ZWxzZSBpZiBmaWVsZC50eXBlID09PSBcImltYWdlXCJ9XG4gICAgICAgIDxVSUltYWdlcyB2YWx1ZXM9e25vdFBhdGguZ2V0KGZpZWxkLnBhdGgsIGl0ZW0sIGhlbHBlcnMpfSAvPlxuICAgIHs6ZWxzZSBpZiBmaWVsZC50eXBlID09PSBcImJvb2xlYW5cIn1cbiAgICAgICAgPFVJQm9vbGVhbnMgdmFsdWVzPXtub3RQYXRoLmdldChmaWVsZC5wYXRoLCBpdGVtLCBoZWxwZXJzKX0gLz5cbiAgICB7OmVsc2UgaWYgZmllbGQudHlwZSA9PT0gXCJ0YWdcIn1cbiAgICAgICAgPFRhYmxlVGFncyB2YWx1ZXM9e25vdFBhdGguZ2V0KGZpZWxkLnBhdGgsIGl0ZW0sIGhlbHBlcnMpfSAvPlxuICAgIHs6ZWxzZSBpZiBmaWVsZC50eXBlID09PSBcInN3aXRjaFwifVxuICAgICAgICA8VGFibGVTd2l0Y2hcbiAgICAgICAgICAgIGlkPXtnZXRJdGVtSWQoaXRlbSl9XG4gICAgICAgICAgICBmaWVsZG5hbWU9e2ZpZWxkLnBhdGh9XG4gICAgICAgICAgICBvbjpjaGFuZ2U9e2ZpZWxkLm9uQ2hhbmdlfVxuICAgICAgICAgICAgdmFsdWU9e25vdFBhdGguZ2V0KGZpZWxkLnBhdGgsIGl0ZW0sIGhlbHBlcnMpfVxuICAgICAgICAgICAgZGlzYWJsZWQ9e2ZpZWxkLmRpc2FibGVkfVxuICAgICAgICAgICAgcmVhZG9ubHk9e2ZpZWxkLnJlYWRvbmx5fVxuICAgICAgICAvPlxuICAgIHs6ZWxzZSBpZiBmaWVsZC5jb21wb25lbnR9XG4gICAgICAgIDxmaWVsZC5jb21wb25lbnRcbiAgICAgICAgICAgIGlkPXtnZXRJdGVtSWQoaXRlbSl9XG4gICAgICAgICAgICBvbjpjaGFuZ2U9e2ZpZWxkLm9uQ2hhbmdlfVxuICAgICAgICAgICAgZmllbGRuYW1lPXtmaWVsZC5wYXRofVxuICAgICAgICAgICAgZGlzYWJsZWQ9e2ZpZWxkLmRpc2FibGVkfVxuICAgICAgICAgICAgcmVhZG9ubHk9e2ZpZWxkLnJlYWRvbmx5fVxuICAgICAgICAgICAgdmFsdWU9e25vdFBhdGguZ2V0KGZpZWxkLnBhdGgsIGl0ZW0sIGhlbHBlcnMpfVxuICAgICAgICAgICAgey4uLmZpZWxkLm9wdGlvbnN9XG4gICAgICAgIC8+XG4gICAgezplbHNlIGlmIGZpZWxkICYmIHR5cGVvZiBmaWVsZCAhPT0gXCJ1bmRlZmluZWRcIiAmJiAhaXNOYU4oZmllbGQubWF4TGVuZ3RoKSAmJiBmaWVsZC5tYXhMZW5ndGh9XG4gICAgICAgIHtub3RDb21tb24uc3RyTGVuZ3RoQ2FwKFxuICAgICAgICAgICAgbm90UGF0aC5nZXQoZmllbGQucGF0aCwgaXRlbSwgaGVscGVycyksXG4gICAgICAgICAgICBmaWVsZC5tYXhMZW5ndGhcbiAgICAgICAgKX1cbiAgICB7OmVsc2V9XG4gICAgICAgIHskTE9DQUxFW25vdFBhdGguZ2V0KGZpZWxkLnBhdGgsIGl0ZW0sIGhlbHBlcnMpXX1cbiAgICB7L2lmfVxuPC90ZD5cbiIsIjxzY3JpcHQ+XG4gIGltcG9ydCBVSVRhYmxlQ2VsbCBmcm9tICcuL25vdFRhYmxlQ2VsbC5zdmVsdGUnO1xuICBpbXBvcnQgKiBhcyBTdG9yZXMgZnJvbSAnLi9zdG9yZXMuanMnO1xuICBcbiAgaW1wb3J0IHtvbk1vdW50LCBjcmVhdGVFdmVudERpc3BhdGNoZXJ9IGZyb20gJ3N2ZWx0ZSc7XG4gIGxldCBkaXNwYXRjaCA9IGNyZWF0ZUV2ZW50RGlzcGF0Y2hlcigpO1xuXG4gIGxldCBpdGVtSWQgPSAkc3RhdGUoKSwgc2VsZWN0ZWRMaXN0O1xuXG4gIG9uTW91bnQoKCkgPT4ge1xuICAgICAgaXRlbUlkID0gZ2V0SXRlbUlkKGl0ZW0pO1xuICAgICAgc2VsZWN0ZWRMaXN0ID0gU3RvcmVzLmdldChpZCkuc2VsZWN0ZWQ7XG4gIH0pO1xuXG5cbiAgLyoqXG4gICAqIEB0eXBlZGVmIHtPYmplY3R9IFByb3BzXG4gICAqIEBwcm9wZXJ0eSB7YW55fSBpZFxuICAgKiBAcHJvcGVydHkge2FueX0gW2l0ZW1dXG4gICAqIEBwcm9wZXJ0eSB7YW55fSBbaGVscGVyc11cbiAgICogQHByb3BlcnR5IHthbnl9IFtmaWVsZHNdXG4gICAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW3Nob3dTZWxlY3RdXG4gICAqIEBwcm9wZXJ0eSB7YW55fSBbZ2V0SXRlbUlkXVxuICAgKi9cblxuICAvKiogQHR5cGUge1Byb3BzfSAqL1xuICBsZXQge1xuICAgICAgaWQsXG4gICAgICBpdGVtID0ge30sXG4gICAgICBoZWxwZXJzID0ge30sXG4gICAgICBmaWVsZHMgPSBbXSxcbiAgICAgIHNob3dTZWxlY3QgPSBmYWxzZSxcbiAgICAgIGdldEl0ZW1JZCA9ICgpPT57fVxuICB9ID0gJHByb3BzKCk7XG5cbiAgZnVuY3Rpb24gb25Sb3dTZWxlY3QoZSl7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBkaXNwYXRjaCgncm93U2VsZWN0Q2hhbmdlJywge1xuICAgICAgICAgIGlkOiAgICAgICBpdGVtSWQsXG4gICAgICAgICAgc2VsZWN0ZWQ6ICRzZWxlY3RlZExpc3RbaXRlbUlkXVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuXG48L3NjcmlwdD5cblxuPHRyPlxuICB7I2lmIHNob3dTZWxlY3QgJiYgJHNlbGVjdGVkTGlzdCB9XG4gIDx0ZD5cbiAgICA8aW5wdXQgaWQ9XCJ0YWJsZS1yb3ctc2VsZWN0LXtnZXRJdGVtSWQoaXRlbSl9XCIgdHlwZT1cImNoZWNrYm94XCIgZGF0YS1pZD1cIntnZXRJdGVtSWQoaXRlbSl9XCIgYmluZDpjaGVja2VkPXskc2VsZWN0ZWRMaXN0W2l0ZW1JZF19IHBsYWNlaG9sZGVyPVwiXCIgbmFtZT1cInJvd19zZWxlY3RlZF97Z2V0SXRlbUlkKGl0ZW0pfVwiIG9uY2hhbmdlPXtvblJvd1NlbGVjdH0gLz5cbiAgPC90ZD5cbiAgey9pZn1cbiAgeyNlYWNoIGZpZWxkcyBhcyBmaWVsZCB9XG4gIDxVSVRhYmxlQ2VsbCB7ZmllbGR9IHtoZWxwZXJzfSB7aXRlbX0ge2dldEl0ZW1JZH0gLz5cbiAgey9lYWNofVxuPC90cj5cbiIsIjxzY3JpcHQ+XG4gICAgaW1wb3J0IHsgTE9DQUxFIH0gZnJvbSBcIi4uLy4uLy4uL2xvY2FsZVwiO1xuXG4gICAgaW1wb3J0ICogYXMgU3RvcmVzIGZyb20gXCIuL3N0b3Jlcy5qc1wiO1xuXG4gICAgaW1wb3J0IFVJVGFibGVSb3cgZnJvbSBcIi4vbm90VGFibGVSb3cuc3ZlbHRlXCI7XG5cbiAgICBpbXBvcnQgeyBVSUxpbmtzIH0gZnJvbSBcIi4uLy4uLy4uL2VsZW1lbnRzL2xpbmtcIjtcbiAgICBpbXBvcnQgeyBVSUJ1dHRvbnMgfSBmcm9tIFwiLi4vLi4vLi4vZWxlbWVudHMvYnV0dG9uXCI7XG4gICAgaW1wb3J0IFVJSWNvbiBmcm9tIFwiLi4vLi4vLi4vZWxlbWVudHMvaWNvbi91aS5pY29uLmZvbnQuc3ZlbHRlXCI7XG5cbiAgICBpbXBvcnQgeyBvbk1vdW50LCBjcmVhdGVFdmVudERpc3BhdGNoZXIgfSBmcm9tIFwic3ZlbHRlXCI7XG4gICAgbGV0IGRpc3BhdGNoID0gY3JlYXRlRXZlbnREaXNwYXRjaGVyKCk7XG5cbiAgICAvKipcbiAgICAgKiBAdHlwZWRlZiB7T2JqZWN0fSBQcm9wc1xuICAgICAqIEBwcm9wZXJ0eSB7YW55fSBpZFxuICAgICAqIEBwcm9wZXJ0eSB7YW55fSBmaWx0ZXJVSVxuICAgICAqIEBwcm9wZXJ0eSB7YW55fSBbaGVscGVyc11cbiAgICAgKiBAcHJvcGVydHkge2FueX0gW3N0YXRlXVxuICAgICAqIEBwcm9wZXJ0eSB7YW55fSBbZmlsdGVyXVxuICAgICAqIEBwcm9wZXJ0eSB7YW55fSBbc29ydGVyXVxuICAgICAqIEBwcm9wZXJ0eSB7YW55fSBbZmllbGRzXVxuICAgICAqIEBwcm9wZXJ0eSB7YW55fSBbc2VsZWN0ZWRdXG4gICAgICogQHByb3BlcnR5IHthbnl9IFtpdGVtc11cbiAgICAgKiBAcHJvcGVydHkge2FueX0gW2FjdGlvbnNdXG4gICAgICogQHByb3BlcnR5IHthbnl9IFtsaW5rc11cbiAgICAgKiBAcHJvcGVydHkge3N0cmluZ30gW3NlYXJjaF1cbiAgICAgKiBAcHJvcGVydHkge2Jvb2xlYW59IFtzaG93U2VhcmNoXVxuICAgICAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW3Nob3dTZWxlY3RdXG4gICAgICogQHByb3BlcnR5IHtib29sZWFufSBbc2VsZWN0QWxsXVxuICAgICAqIEBwcm9wZXJ0eSB7YW55fSBbZ2V0SXRlbUlkXVxuICAgICAqL1xuXG4gICAgLyoqIEB0eXBlIHtQcm9wc30gKi9cbiAgICBsZXQge1xuICAgICAgICBpZCxcbiAgICAgICAgZmlsdGVyVUksXG4gICAgICAgIGhlbHBlcnMgPSB7fSxcbiAgICAgICAgc3RhdGUgPSAkYmluZGFibGUoe30pLFxuICAgICAgICBmaWx0ZXIgPSAkYmluZGFibGUoe30pLFxuICAgICAgICBzb3J0ZXIgPSAkYmluZGFibGUoe30pLFxuICAgICAgICBmaWVsZHMgPSBbXSxcbiAgICAgICAgc2VsZWN0ZWQgPSAkYmluZGFibGUoe30pLFxuICAgICAgICBpdGVtcyA9ICRiaW5kYWJsZShbXSksXG4gICAgICAgIGFjdGlvbnMgPSBbXSxcbiAgICAgICAgbGlua3MgPSBbXSxcbiAgICAgICAgc2VhcmNoID0gJGJpbmRhYmxlKFwiXCIpLFxuICAgICAgICBzaG93U2VhcmNoID0gdHJ1ZSxcbiAgICAgICAgc2hvd1NlbGVjdCA9IHRydWUsXG4gICAgICAgIHNlbGVjdEFsbCA9ICRiaW5kYWJsZShmYWxzZSksXG4gICAgICAgIGdldEl0ZW1JZCA9IChpdGVtKSA9PiBpdGVtLl9pZCxcbiAgICB9ID0gJHByb3BzKCk7XG5cbiAgICBvbk1vdW50KCgpID0+IHtcbiAgICAgICAgaWYgKHNob3dTZWxlY3QpIHtcbiAgICAgICAgICAgIFN0b3Jlcy5nZXQoaWQpLnNlbGVjdGVkLnN1YnNjcmliZSgodmFsdWUpID0+IHtcbiAgICAgICAgICAgICAgICBzZWxlY3RlZCA9IHZhbHVlO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgU3RvcmVzLmdldChpZCkucmVmaW5lZC5zdWJzY3JpYmUoKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICBpdGVtcyA9IHZhbHVlO1xuICAgICAgICAgICAgaWYgKHNob3dTZWxlY3QpIHtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpdGVtSWQgaW4gc2VsZWN0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpdGVtcy5zb21lKChpdGVtKSA9PiBnZXRJdGVtSWQoaXRlbSkgPT09IGl0ZW1JZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBzZWxlY3RlZFtpdGVtSWRdO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFPYmplY3QuaGFzT3duKHNlbGVjdGVkLCBpdGVtSWQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWRbaXRlbUlkXSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHNlbGVjdGVkID0gc2VsZWN0ZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBTdG9yZXMuZ2V0KGlkKS5zdGF0ZS5zdWJzY3JpYmUoKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICBzdGF0ZSA9IHZhbHVlO1xuICAgICAgICB9KTtcbiAgICB9KTtcblxuICAgIGZ1bmN0aW9uIG9uU2VhcmNoSW5wdXQoZXYpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGxldCBkYXRhID0gZXYuY3VycmVudFRhcmdldC52YWx1ZS50cmltKCk7XG4gICAgICAgICAgICBkaXNwYXRjaChcInNlYXJjaENoYW5nZVwiLCBkYXRhKTtcbiAgICAgICAgfSBjYXRjaCB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBvblNlYXJjaENoYW5nZSh7IGRldGFpbCB9KSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBkaXNwYXRjaChcInNlYXJjaENoYW5nZVwiLCBkZXRhaWwpO1xuICAgICAgICB9IGNhdGNoIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIG9uRmlsdGVyQ2hhbmdlKHsgZGV0YWlsIH0pIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGRpc3BhdGNoKFwiZmlsdGVyQ2hhbmdlXCIsIGRldGFpbCk7XG4gICAgICAgIH0gY2F0Y2gge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ29QcmV2KCkge1xuICAgICAgICBkaXNwYXRjaChcImdvVG9QcmV2UGFnZVwiKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnb05leHQoKSB7XG4gICAgICAgIGRpc3BhdGNoKFwiZ29Ub05leHRQYWdlXCIpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdvVG8oZSkge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGxldCBlbCA9IGUudGFyZ2V0O1xuICAgICAgICBkaXNwYXRjaChcImdvVG9QYWdlXCIsIHBhcnNlSW50KGVsLmRhdGFzZXQucGFnZSkpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gb25TZWxlY3RBbGwoKSB7XG4gICAgICAgIFN0b3Jlcy5nZXQoaWQpLnNlbGVjdGVkLnVwZGF0ZSgodmFsdWUpID0+IHtcbiAgICAgICAgICAgIGl0ZW1zLmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICAgICAgICAgICAgICB2YWx1ZVtnZXRJdGVtSWQoaXRlbSldID0gc2VsZWN0QWxsO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG9uRmllbGRIZWFkQ2xpY2soZmllbGQpIHtcbiAgICAgICAgY29uc3QgcHJvcFBhdGggPSBmaWVsZC5wYXRoLnN1YnN0cmluZygxKTtcbiAgICAgICAgaWYgKE9iamVjdC5oYXNPd24oc29ydGVyLCBwcm9wUGF0aCkpIHtcbiAgICAgICAgICAgIHNvcnRlcltwcm9wUGF0aF0gPSBwYXJzZUludChzb3J0ZXJbcHJvcFBhdGhdKSAqIC0xO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc29ydGVyID0ge1xuICAgICAgICAgICAgICAgIFtwcm9wUGF0aF06IDEsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGRpc3BhdGNoKFwic29ydGVyQ2hhbmdlXCIsIHNvcnRlcik7XG4gICAgfVxuPC9zY3JpcHQ+XG5cbnsjaWYgbGlua3MubGVuZ3RofVxuICAgIDxkaXYgY2xhc3M9XCJmaWVsZCBpcy1ncm91cGVkXCI+XG4gICAgICAgIDxVSUxpbmtzIHZhbHVlcz17bGlua3N9IC8+XG4gICAgPC9kaXY+XG57L2lmfVxueyNpZiBhY3Rpb25zLmxlbmd0aH1cbiAgICA8ZGl2IGNsYXNzPVwiZmllbGQgaXMtZ3JvdXBlZFwiPlxuICAgICAgICA8VUlCdXR0b25zIHZhbHVlcz17YWN0aW9uc30gLz5cbiAgICA8L2Rpdj5cbnsvaWZ9XG57I2lmIHNob3dTZWFyY2h9XG4gICAgeyNpZiBmaWx0ZXJVSX1cbiAgICAgICAge0Bjb25zdCBTdmVsdGVDb21wb25lbnQgPSBmaWx0ZXJVSX1cbiAgICAgICAgPFN2ZWx0ZUNvbXBvbmVudFxuICAgICAgICAgICAgYmluZDpmaWx0ZXJcbiAgICAgICAgICAgIG9uOmNoYW5nZT17b25GaWx0ZXJDaGFuZ2V9XG4gICAgICAgICAgICBvbjpzZWFyY2hDaGFuZ2U9e29uU2VhcmNoQ2hhbmdlfVxuICAgICAgICAvPlxuICAgIHs6ZWxzZX1cbiAgICAgICAgPGRpdiBjbGFzcz1cImZpZWxkXCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29udHJvbFwiPlxuICAgICAgICAgICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgICAgICAgICBjbGFzcz1cImlucHV0XCJcbiAgICAgICAgICAgICAgICAgICAgdHlwZT1cInRleHRcIlxuICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cItCf0L7QuNGB0LpcIlxuICAgICAgICAgICAgICAgICAgICBiaW5kOnZhbHVlPXtzZWFyY2h9XG4gICAgICAgICAgICAgICAgICAgIG9uaW5wdXQ9e29uU2VhcmNoSW5wdXR9XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICB7L2lmfVxuey9pZn1cbjx0YWJsZSBjbGFzcz1cInRhYmxlXCI+XG4gICAgPHRoZWFkPlxuICAgICAgICA8dHI+XG4gICAgICAgICAgICB7I2lmIHNob3dTZWxlY3R9XG4gICAgICAgICAgICAgICAgPHRoXG4gICAgICAgICAgICAgICAgICAgID48aW5wdXRcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9XCJjaGVja2JveFwiXG4gICAgICAgICAgICAgICAgICAgICAgICBpZD1cInRhYmxlLXJvdy1zZWxlY3QtcGFnZVwiXG4gICAgICAgICAgICAgICAgICAgICAgICBiaW5kOmNoZWNrZWQ9e3NlbGVjdEFsbH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU9XCJyb3dfc2VsZWN0ZWRfYWxsXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uY2hhbmdlPXtvblNlbGVjdEFsbH1cbiAgICAgICAgICAgICAgICAgICAgLz48L3RoXG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgey9pZn1cbiAgICAgICAgICAgIHsjZWFjaCBmaWVsZHMgYXMgZmllbGR9XG4gICAgICAgICAgICAgICAge0Bjb25zdCBwcm9wUGF0aCA9IGZpZWxkLnBhdGguc3Vic3RyaW5nKDEpfVxuICAgICAgICAgICAgICAgIDx0aFxuICAgICAgICAgICAgICAgICAgICBjbGFzcz17KGZpZWxkLmhpZGVPbk1vYmlsZSA/IFwiIGlzLWhpZGRlbi10b3VjaFwiIDogXCJcIikgK1xuICAgICAgICAgICAgICAgICAgICAgICAgKGZpZWxkLnNvcnRhYmxlID8gXCIgaXMtY2xpY2thYmxlXCIgOiBcIlwiKX1cbiAgICAgICAgICAgICAgICAgICAgb25jbGljaz17b25GaWVsZEhlYWRDbGljayhmaWVsZCl9XG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICB7I2lmIGZpZWxkLnNvcnRhYmxlICYmIE9iamVjdC5oYXNPd24oc29ydGVyLCBwcm9wUGF0aCl9XG4gICAgICAgICAgICAgICAgICAgICAgICA8VUlJY29uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9udD17c29ydGVyW3Byb3BQYXRoXSA+IDBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBcInNvcnQtdXBcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IFwic29ydC1kb3duXCJ9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU9e2ZpZWxkLnRpdGxlfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50YWJsZT17dHJ1ZX1cbiAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgIHs6ZWxzZX1cbiAgICAgICAgICAgICAgICAgICAgICAgIHskTE9DQUxFW2ZpZWxkLnRpdGxlXX1cbiAgICAgICAgICAgICAgICAgICAgey9pZn1cbiAgICAgICAgICAgICAgICA8L3RoPlxuICAgICAgICAgICAgey9lYWNofVxuICAgICAgICA8L3RyPlxuICAgIDwvdGhlYWQ+XG4gICAgPHRib2R5PlxuICAgICAgICB7I2VhY2ggaXRlbXMgYXMgaXRlbSAoaXRlbS5faWQpfVxuICAgICAgICAgICAgPFVJVGFibGVSb3dcbiAgICAgICAgICAgICAgICB7aWR9XG4gICAgICAgICAgICAgICAge2l0ZW19XG4gICAgICAgICAgICAgICAge2ZpZWxkc31cbiAgICAgICAgICAgICAgICB7aGVscGVyc31cbiAgICAgICAgICAgICAgICB7c2hvd1NlbGVjdH1cbiAgICAgICAgICAgICAgICB7Z2V0SXRlbUlkfVxuICAgICAgICAgICAgICAgIG9uOnJvd1NlbGVjdENoYW5nZVxuICAgICAgICAgICAgLz5cbiAgICAgICAgey9lYWNofVxuICAgIDwvdGJvZHk+XG48L3RhYmxlPlxueyNpZiBzdGF0ZT8ucGFnaW5hdGlvbj8ucGFnZXM/Lmxpc3QubGVuZ3RoID4gMX1cbiAgICA8bmF2IGNsYXNzPVwicGFnaW5hdGlvbiBpcy1jZW50ZXJlZFwiIGFyaWEtbGFiZWw9XCJwYWdpbmF0aW9uXCI+XG4gICAgICAgIDxhIGhyZWYgY2xhc3M9XCJwYWdpbmF0aW9uLXByZXZpb3VzXCIgb25jbGljaz17Z29QcmV2fT7QndCw0LfQsNC0PC9hPlxuICAgICAgICA8YSBocmVmIGNsYXNzPVwicGFnaW5hdGlvbi1uZXh0XCIgb25jbGljaz17Z29OZXh0fT7QktC/0LXRgNC10LQ8L2E+XG4gICAgICAgIDx1bCBjbGFzcz1cInBhZ2luYXRpb24tbGlzdFwiPlxuICAgICAgICAgICAgeyNpZiBzdGF0ZS5wYWdpbmF0aW9uICYmIHN0YXRlLnBhZ2luYXRpb24ucGFnZXMgJiYgc3RhdGUucGFnaW5hdGlvbi5wYWdlcy5saXN0fVxuICAgICAgICAgICAgICAgIHsjZWFjaCBzdGF0ZS5wYWdpbmF0aW9uLnBhZ2VzLmxpc3QgYXMgcGFnZX1cbiAgICAgICAgICAgICAgICAgICAgPGxpPlxuICAgICAgICAgICAgICAgICAgICAgICAgeyNpZiBwYWdlLmFjdGl2ZX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBocmVmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPVwicGFnaW5hdGlvbi1saW5rIGlzLWN1cnJlbnRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmlhLWxhYmVsPVwi0KHRgtGA0LDQvdC40YbQsCB7cGFnZS5pbmRleH1cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmlhLWN1cnJlbnQ9XCJwYWdlXCI+e3BhZ2UuaW5kZXggKyAxfTwvYVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICAgIHs6ZWxzZX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBocmVmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPVwicGFnaW5hdGlvbi1saW5rXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJpYS1sYWJlbD1cItCh0YLRgNCw0L3QuNGG0LAge3BhZ2UuaW5kZXh9XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1wYWdlPXtwYWdlLmluZGV4fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbmNsaWNrPXtnb1RvfT57cGFnZS5pbmRleCArIDF9PC9hXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICAgICAgey9pZn1cbiAgICAgICAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgICAgICB7L2VhY2h9XG4gICAgICAgICAgICB7L2lmfVxuICAgICAgICA8L3VsPlxuICAgIDwvbmF2Plxuey9pZn1cbiIsImltcG9ydCBFdmVudEVtaXR0ZXIgZnJvbSBcIndvbGZ5ODctZXZlbnRlbWl0dGVyXCI7XG5pbXBvcnQgbm90UGF0aCBmcm9tIFwibm90LXBhdGhcIjtcbmltcG9ydCBub3RDb21tb24gZnJvbSBcIi4uLy4uL2NvbW1vbi5qc1wiO1xuXG5pbXBvcnQgKiBhcyBTdG9yZXMgZnJvbSBcIi4vc3RvcmVzLmpzXCI7XG5pbXBvcnQgVUlUYWJsZSBmcm9tIFwiLi9ub3RUYWJsZS5zdmVsdGVcIjtcblxuY29uc3QgQ09OU1RfSURfRFVCTElDQVRFX1BPU1RGSVggPSBcIl9fZHVibGljYXRlX19cIjtcblxuY29uc3QgT1BUX0RFRkFVTFRfUEFHRV9TSVpFID0gMjAsXG4gICAgT1BUX0RFRkFVTFRfUEFHRV9OVU1CRVIgPSAwLFxuICAgIE9QVF9ERUZBVUxUX1BBR0VfUkFOR0UgPSA2LFxuICAgIE9QVF9ERUZBVUxUX1NPUlRfRElSRUNUSU9OID0gMSxcbiAgICBPUFRfREVGQVVMVF9TRUFSQ0ggPSBcIlwiLFxuICAgIE9QVF9ERUZBVUxUX1JFVFVSTiA9IHt9LFxuICAgIE9QVF9ERUZBVUxUX0NPTUJJTkVEID0gZmFsc2UsXG4gICAgT1BUX0RFRkFVTFRfQ09NQklORURfQUNUSU9OID0gXCJsaXN0QW5kQ291bnRcIixcbiAgICBPUFRfREVGQVVMVF9DT1VOVF9BQ1RJT04gPSBcImNvdW50XCIsXG4gICAgT1BUX0RFRkFVTFRfTElTVF9BQ1RJT04gPSBcImxpc3RcIixcbiAgICBPUFRfREVGQVVMVF9TT1JUX0ZJRUxEID0gXCJfaWRcIixcbiAgICBPUFRfRklFTERfTkFNRV9QUkVfUFJPQyA9IFwicHJlcHJvY2Vzc29yXCI7XG5cbmNvbnN0IERFRkFVTFRfT1BUSU9OUyA9IHtcbiAgICB1aTogVUlUYWJsZSxcbiAgICBsaW5rczogW10sXG4gICAgYWN0aW9uczogW10sXG4gICAgZW5kbGVzczogZmFsc2UsXG4gICAgaWRGaWVsZDogXCJfaWRcIixcbiAgICBnZXRJdGVtSWQ6IChpdGVtKSA9PiB7XG4gICAgICAgIHJldHVybiBpdGVtLl9pZDtcbiAgICB9LFxufTtcblxuY2xhc3Mgbm90VGFibGUgZXh0ZW5kcyBFdmVudEVtaXR0ZXIge1xuICAgIGNvbnN0cnVjdG9yKGlucHV0ID0ge30pIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5pZCA9IFwidGFibGUtXCIgKyBNYXRoLnJhbmRvbSgpO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSB7XG4gICAgICAgICAgICAuLi5ERUZBVUxUX09QVElPTlMsXG4gICAgICAgICAgICAuLi4oaW5wdXQub3B0aW9ucyA/IGlucHV0Lm9wdGlvbnMgOiB7fSksXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMudWkgPSB7fTtcbiAgICAgICAgdGhpcy5kYXRhID0ge1xuICAgICAgICAgICAgcmF3OiBbXSxcbiAgICAgICAgICAgIGZpbHRlcmVkOiBbXSxcbiAgICAgICAgICAgIHJlZmluZWQ6IFtdLFxuICAgICAgICAgICAgc2VsZWN0ZWQ6IHt9LFxuICAgICAgICB9O1xuICAgICAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgICAgICAgcGFnaW5hdGlvbjoge1xuICAgICAgICAgICAgICAgIGl0ZW1zOiB7XG4gICAgICAgICAgICAgICAgICAgIGNvdW50OiAwLFxuICAgICAgICAgICAgICAgICAgICBmcm9tOiAwLFxuICAgICAgICAgICAgICAgICAgICB0bzogMCxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHBhZ2VzOiB7XG4gICAgICAgICAgICAgICAgICAgIGNvdW50OiAwLFxuICAgICAgICAgICAgICAgICAgICBmcm9tOiAwLFxuICAgICAgICAgICAgICAgICAgICB0bzogMCxcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudDogMCxcbiAgICAgICAgICAgICAgICAgICAgbGlzdDogW10sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMud29ya2luZyA9IHt9O1xuXG4gICAgICAgIHRoaXMuc3RvcmVzID0gU3RvcmVzLmNyZWF0ZSh0aGlzLmlkLCB7XG4gICAgICAgICAgICByYXc6IFtdLFxuICAgICAgICAgICAgZmlsdGVyZWQ6IFtdLFxuICAgICAgICAgICAgcmVmaW5lZDogW10sXG4gICAgICAgICAgICBzZWxlY3RlZDoge30sXG4gICAgICAgICAgICBzdGF0ZTogdGhpcy5zdGF0ZSxcbiAgICAgICAgICAgIHdvcmtpbmc6IHRoaXMud29ya2luZyxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5zdG9yZXMud29ya2luZy5zdWJzY3JpYmUodGhpcy5vbldvcmtpbmdVcGRhdGUuYmluZCh0aGlzKSk7XG4gICAgICAgIC8v0L/QvtC70YPRh9C10L3QvdGL0LUg0LjQtyDRgdC10YLQuFxuICAgICAgICB0aGlzLnN0b3Jlcy5yYXcuc3Vic2NyaWJlKHRoaXMub25SYXdVcGRhdGUuYmluZCh0aGlzKSk7XG4gICAgICAgIC8v0L/RgNC40LzQtdC90LXQvdGLINGE0LjQu9GM0YLRgNGLLCDRgdC+0YDRgtC40YDQvtCy0LrQuCDQuCDRgi7QtC5cbiAgICAgICAgdGhpcy5zdG9yZXMuZmlsdGVyZWQuc3Vic2NyaWJlKHRoaXMub25GaWx0ZXJlZFVwZGF0ZS5iaW5kKHRoaXMpKTtcbiAgICAgICAgLy/Rg9GA0LXQt9Cw0L3RiyDQtNC+INC80LjQvdC40LzQsNC70YzQvdC+0LPQviDQvdCw0LHQvtGA0LAsINGC0L7Rh9C90L4g0YHQvtC+0YLQstC10YHRgtCy0YPRjtGJ0LXQs9C+INGC0LDQsdC70LjRh9C90L7QvNGDINGE0L7RgNC80LDRgtGDXG4gICAgICAgIHRoaXMuc3RvcmVzLnJlZmluZWQuc3Vic2NyaWJlKHRoaXMub25SZWZpbmVkVXBkYXRlLmJpbmQodGhpcykpO1xuICAgICAgICAvL9GB0LvQvtCy0LDRgNGMINGBINC40LTQtdC90YLQuNGE0LjQutCw0YLQvtGA0LDQvNC4INCy0YvQsdGA0LDQvdC90YvRhSDRgdGC0YDQvtC6XG4gICAgICAgIHRoaXMuc3RvcmVzLnNlbGVjdGVkLnN1YnNjcmliZSh0aGlzLm9uU2VsZWN0ZWRVcGRhdGUuYmluZCh0aGlzKSk7XG4gICAgICAgIC8vcGFnaW5hdGlvbiwgaXRlbXMgaW5mb3JtYXRpb25cbiAgICAgICAgdGhpcy5zdG9yZXMuc3RhdGUuc3Vic2NyaWJlKHRoaXMub25TdGF0ZVVwZGF0ZS5iaW5kKHRoaXMpKTtcblxuICAgICAgICBpZiAobm90Q29tbW9uLm9iakhhcyhpbnB1dCwgXCJkYXRhXCIpICYmIEFycmF5LmlzQXJyYXkoaW5wdXQuZGF0YSkpIHtcbiAgICAgICAgICAgIHRoaXMuc3RvcmVzLnJhdy51cGRhdGUoKHZhbCkgPT4ge1xuICAgICAgICAgICAgICAgIHZhbCA9IGlucHV0LmRhdGE7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5zZXRDb21iaW5lZEFjdGlvbk5hbWUoXG4gICAgICAgICAgICB0aGlzLmdldE9wdGlvbnMoXG4gICAgICAgICAgICAgICAgXCJpbnRlcmZhY2UuY29tYmluZWRBY3Rpb25cIixcbiAgICAgICAgICAgICAgICBPUFRfREVGQVVMVF9DT01CSU5FRF9BQ1RJT05cbiAgICAgICAgICAgIClcbiAgICAgICAgKTtcblxuICAgICAgICBpZiAobm90Q29tbW9uLm9iakhhcyh0aGlzLm9wdGlvbnMsIFwiZmlsdGVyXCIpKSB7XG4gICAgICAgICAgICB0aGlzLnNldEZpbHRlcih0aGlzLm9wdGlvbnMuZmlsdGVyLCB0cnVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMucmVzZXRGaWx0ZXIoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobm90Q29tbW9uLm9iakhhcyh0aGlzLm9wdGlvbnMsIFwicGFnZXJcIikpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0UGFnZXIodGhpcy5vcHRpb25zLnBhZ2VyLCB0cnVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMucmVzZXRQYWdlcigpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChub3RDb21tb24ub2JqSGFzKHRoaXMub3B0aW9ucywgXCJzb3J0ZXJcIikpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0U29ydGVyKHRoaXMub3B0aW9ucy5zb3J0ZXIsIHRydWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5yZXNldFNvcnRlcih0cnVlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobm90Q29tbW9uLm9iakhhcyh0aGlzLm9wdGlvbnMsIFwicmV0dXJuXCIpKSB7XG4gICAgICAgICAgICB0aGlzLnNldFJldHVybih0aGlzLm9wdGlvbnMucmV0dXJuKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc2V0UmV0dXJuKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG5vdENvbW1vbi5vYmpIYXModGhpcy5vcHRpb25zLCBcInNlYXJjaFwiKSkge1xuICAgICAgICAgICAgdGhpcy5zZXRTZWFyY2godGhpcy5vcHRpb25zLnNlYXJjaCwgdHJ1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnNldFNlYXJjaCgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucmVuZGVyKCk7XG4gICAgICAgIHRoaXMudXBkYXRlRGF0YSgpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBvbldvcmtpbmdVcGRhdGUodmFsKSB7XG4gICAgICAgIHRoaXMud29ya2luZyA9IHZhbDtcbiAgICAgICAgcmV0dXJuIHZhbDtcbiAgICB9XG5cbiAgICBvblJhd1VwZGF0ZSh2YWwpIHtcbiAgICAgICAgdGhpcy5kYXRhLnJhdyA9IHZhbDtcbiAgICAgICAgcmV0dXJuIHZhbDtcbiAgICB9XG5cbiAgICBvbkZpbHRlcmVkVXBkYXRlKHZhbCkge1xuICAgICAgICB0aGlzLmRhdGEuZmlsdGVyZWQgPSB2YWw7XG4gICAgICAgIHRoaXMucmVmaW5lRmlsdGVyZWQoKTtcbiAgICAgICAgcmV0dXJuIHZhbDtcbiAgICB9XG5cbiAgICBvblJlZmluZWRVcGRhdGUodmFsKSB7XG4gICAgICAgIHRoaXMuZGF0YS5yZWZpbmVkID0gdmFsO1xuICAgICAgICB0aGlzLmNsZWFyU2VsZWN0ZWQoKTtcbiAgICAgICAgcmV0dXJuIHZhbDtcbiAgICB9XG5cbiAgICBvblN0YXRlVXBkYXRlKHZhbCkge1xuICAgICAgICB0aGlzLnN0YXRlID0gdmFsO1xuICAgICAgICByZXR1cm4gdmFsO1xuICAgIH1cblxuICAgIG9uU2VhcmNoQ2hhbmdlKGxpbmUpIHtcbiAgICAgICAgaWYgKGxpbmUubGVuZ3RoID4gMykge1xuICAgICAgICAgICAgdGhpcy5zZXRTZWFyY2gobGluZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnNldFNlYXJjaCgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgb25Tb3J0ZXJDaGFuZ2Uoc29ydGVyKSB7XG4gICAgICAgIGlmIChzb3J0ZXIpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0U29ydGVyKHNvcnRlcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnJlc2V0U29ydGVyKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBvbkZpbHRlckNoYW5nZSh7IGZpbHRlciwgYWN0aW9uTmFtZSB9KSB7XG4gICAgICAgIGlmIChhY3Rpb25OYW1lLmluZGV4T2YoT1BUX0RFRkFVTFRfQ09NQklORURfQUNUSU9OKSA9PT0gMCkge1xuICAgICAgICAgICAgdGhpcy5zZXRDb21iaW5lZEFjdGlvbk5hbWUoYWN0aW9uTmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZpbHRlcikge1xuICAgICAgICAgICAgdGhpcy5zZXRGaWx0ZXIoZmlsdGVyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMucmVzZXRGaWx0ZXIoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIG9uU2VsZWN0ZWRVcGRhdGUodmFsKSB7XG4gICAgICAgIHRoaXMuZGF0YS5zZWxlY3RlZCA9IHZhbDtcbiAgICB9XG5cbiAgICBjbGVhclNlbGVjdGVkKCkge1xuICAgICAgICB0aGlzLmRhdGEuc2VsZWN0ZWQgPSB7fTtcbiAgICB9XG5cbiAgICBnZXRTZWxlY3RlZChvYmplY3QgPSBmYWxzZSwgc3RvcmUgPSBcInJlZmluZWRcIikge1xuICAgICAgICBsZXQgcmVzID0gW107XG4gICAgICAgIGZvciAobGV0IGlkIGluIHRoaXMuZGF0YS5zZWxlY3RlZCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuZGF0YS5zZWxlY3RlZFtpZF0pIHtcbiAgICAgICAgICAgICAgICBpZiAob2JqZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBpbmR4ID0gdGhpcy5kYXRhW3N0b3JlXS5maW5kSW5kZXgoXG4gICAgICAgICAgICAgICAgICAgICAgICAoaXRlbSkgPT4gaXRlbS5faWQgPT09IGlkXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpbmR4ID4gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcy5wdXNoKHRoaXMuZGF0YVtzdG9yZV1baW5keF0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzLnB1c2goaWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH1cblxuICAgIGdldEl0ZW1JZChpdGVtKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldE9wdGlvbnMoXCJnZXRJdGVtSWRcIiwgREVGQVVMVF9PUFRJT05TLmdldEl0ZW1JZCkoaXRlbSk7XG4gICAgfVxuXG4gICAgc2VsZWN0QWxsKCkge1xuICAgICAgICB0aGlzLnN0b3Jlcy5zZWxlY3RlZC51cGRhdGUoKCkgPT4ge1xuICAgICAgICAgICAgbGV0IHZhbHVlID0ge307XG4gICAgICAgICAgICB0aGlzLmRhdGEuZmlsdGVyZWQuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgICAgICAgICAgIHZhbHVlW3RoaXMuZ2V0SXRlbUlkKGl0ZW0pXSA9IHRydWU7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgc2VsZWN0Tm9uZSgpIHtcbiAgICAgICAgdGhpcy5zdG9yZXMuc2VsZWN0ZWQudXBkYXRlKCgpID0+IHtcbiAgICAgICAgICAgIGxldCB2YWx1ZSA9IHt9O1xuICAgICAgICAgICAgdGhpcy5kYXRhLmZpbHRlcmVkLmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICAgICAgICAgICAgICB2YWx1ZVt0aGlzLmdldEl0ZW1JZChpdGVtKV0gPSBmYWxzZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIGlmICghdGhpcy51aS50YWJsZSkge1xuICAgICAgICAgICAgdGhpcy51aS50YWJsZSA9IG5ldyB0aGlzLm9wdGlvbnMudWkoe1xuICAgICAgICAgICAgICAgIHRhcmdldDogdGhpcy5vcHRpb25zLnRhcmdldEVsLFxuICAgICAgICAgICAgICAgIHByb3BzOiB7XG4gICAgICAgICAgICAgICAgICAgIGZpbHRlclVJOiB0aGlzLmdldE9wdGlvbnMoXCJmaWx0ZXJVSVwiLCB1bmRlZmluZWQpLFxuICAgICAgICAgICAgICAgICAgICBpZDogdGhpcy5pZCxcbiAgICAgICAgICAgICAgICAgICAgaGVscGVyczogT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5nZXRIZWxwZXJzKCkpLFxuICAgICAgICAgICAgICAgICAgICBmaWVsZHM6IHRoaXMuZ2V0T3B0aW9ucyhcImZpZWxkc1wiKSxcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uczogdGhpcy5nZXRBY3Rpb25zKCksXG4gICAgICAgICAgICAgICAgICAgIGxpbmtzOiB0aGlzLmdldExpbmtzKCksXG4gICAgICAgICAgICAgICAgICAgIHNlYXJjaDogXCJcIixcbiAgICAgICAgICAgICAgICAgICAgc2hvd1NlbGVjdDogdGhpcy5nZXRPcHRpb25zKFwic2hvd1NlbGVjdFwiKSxcbiAgICAgICAgICAgICAgICAgICAgc2hvd1NlYXJjaDogdGhpcy5nZXRPcHRpb25zKFwic2hvd1NlYXJjaFwiKSxcbiAgICAgICAgICAgICAgICAgICAgc2hvd1NvcnQ6IHRoaXMuZ2V0T3B0aW9ucyhcInNob3dTb3J0XCIpLFxuICAgICAgICAgICAgICAgICAgICBpZEZpZWxkOiB0aGlzLmdldE9wdGlvbnMoXCJpZEZpZWxkXCIpLFxuICAgICAgICAgICAgICAgICAgICBnZXRJdGVtSWQ6IHRoaXMuZ2V0T3B0aW9ucyhcImdldEl0ZW1JZFwiKSxcbiAgICAgICAgICAgICAgICAgICAgZmlsdGVyOiB0aGlzLmdldEZpbHRlcigpLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnVpLnRhYmxlLiRvbihcInNlYXJjaENoYW5nZVwiLCAoZSkgPT4gdGhpcy5vblNlYXJjaENoYW5nZShlLmRldGFpbCkpO1xuICAgICAgICB0aGlzLnVpLnRhYmxlLiRvbihcInNvcnRlckNoYW5nZVwiLCAoZSkgPT4gdGhpcy5vblNvcnRlckNoYW5nZShlLmRldGFpbCkpO1xuICAgICAgICB0aGlzLnVpLnRhYmxlLiRvbihcImZpbHRlckNoYW5nZVwiLCAoZSkgPT4gdGhpcy5vbkZpbHRlckNoYW5nZShlLmRldGFpbCkpO1xuICAgICAgICB0aGlzLnVpLnRhYmxlLiRvbihcImdvVG9QYWdlXCIsIChlKSA9PiB0aGlzLmdvVG9QYWdlKGUuZGV0YWlsKSk7XG4gICAgICAgIHRoaXMudWkudGFibGUuJG9uKFwiZ29Ub05leHRQYWdlXCIsICgpID0+IHRoaXMuZ29Ub05leHQoKSk7XG4gICAgICAgIHRoaXMudWkudGFibGUuJG9uKFwiZ29Ub1ByZXZQYWdlXCIsICgpID0+IHRoaXMuZ29Ub1ByZXYoKSk7XG4gICAgfVxuXG4gICAgZ2V0QWN0aW9ucygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0T3B0aW9ucyhcImFjdGlvbnNcIiwgW10pO1xuICAgIH1cblxuICAgIGdldExpbmtzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRPcHRpb25zKFwibGlua3NcIiwgW10pO1xuICAgIH1cblxuICAgIGdldEhlbHBlcnMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMuaGVscGVycyB8fCB7fTtcbiAgICB9XG5cbiAgICBzZXRXb3JraW5nKGtleSwgdmFsdWUpIHtcbiAgICAgICAgdGhpcy5zdG9yZXMud29ya2luZy51cGRhdGUoKHZhbCkgPT4ge1xuICAgICAgICAgICAgbm90UGF0aC5zZXQoa2V5LCB2YWwsIHRoaXMuZ2V0SGVscGVycygpLCB2YWx1ZSk7XG4gICAgICAgICAgICByZXR1cm4gdmFsO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZ2V0V29ya2luZyhrZXksIGRlZikge1xuICAgICAgICBsZXQgcmVzID0gbm90UGF0aC5nZXQoa2V5LCB0aGlzLndvcmtpbmcsIHRoaXMuZ2V0SGVscGVycygpKTtcbiAgICAgICAgaWYgKHJlcyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gZGVmO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHNldFN0YXRlKGtleSwgdmFsdWUpIHtcbiAgICAgICAgdGhpcy5zdG9yZXMuc3RhdGUudXBkYXRlKCh2YWwpID0+IHtcbiAgICAgICAgICAgIG5vdFBhdGguc2V0KGtleSwgdmFsLCB0aGlzLmdldEhlbHBlcnMoKSwgdmFsdWUpO1xuICAgICAgICAgICAgcmV0dXJuIHZhbDtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGdldFN0YXRlKGtleSwgZGVmKSB7XG4gICAgICAgIGxldCByZXMgPSBub3RQYXRoLmdldChrZXksIHRoaXMuc3RhdGUsIHRoaXMuZ2V0SGVscGVycygpKTtcbiAgICAgICAgaWYgKHJlcyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gZGVmO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHNldE9wdGlvbnMoa2V5LCB2YWx1ZSkge1xuICAgICAgICBub3RQYXRoLnNldChrZXksIHRoaXMub3B0aW9ucywgdGhpcy5nZXRIZWxwZXJzKCksIHZhbHVlKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZ2V0T3B0aW9ucyhrZXksIGRlZikge1xuICAgICAgICBsZXQgcmVzID0gbm90UGF0aC5nZXQoa2V5LCB0aGlzLm9wdGlvbnMsIHRoaXMuZ2V0SGVscGVycygpKTtcbiAgICAgICAgaWYgKHJlcyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gZGVmO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHNldEZpbHRlcihoYXNoLCB3aXRob3V0SW52YWxpZGF0aW9uID0gZmFsc2UpIHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZShcImZpbHRlclwiLCBoYXNoKTtcbiAgICAgICAgaWYgKHdpdGhvdXRJbnZhbGlkYXRpb24pIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaW52YWxpZGF0ZURhdGEoKTtcbiAgICAgICAgdGhpcy51cGRhdGVEYXRhKCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHJlc2V0RmlsdGVyKCkge1xuICAgICAgICB0aGlzLnNldFN0YXRlKFwiZmlsdGVyXCIsIHt9KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZ2V0RmlsdGVyKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRTdGF0ZShcImZpbHRlclwiKTtcbiAgICB9XG5cbiAgICBzZXRQYWdlcihoYXNoLCB3aXRob3V0SW52YWxpZGF0aW9uID0gZmFsc2UpIHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZShcInBhZ2VyXCIsIGhhc2gpO1xuICAgICAgICBpZiAod2l0aG91dEludmFsaWRhdGlvbikge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy51cGRhdGVEYXRhKCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGdldERlZmF1bHRQYWdlTnVtYmVyKCkge1xuICAgICAgICByZXR1cm4gaXNOYU4odGhpcy5nZXRPcHRpb25zKFwicGFnZXIucGFnZVwiKSlcbiAgICAgICAgICAgID8gT1BUX0RFRkFVTFRfUEFHRV9OVU1CRVJcbiAgICAgICAgICAgIDogdGhpcy5nZXRPcHRpb25zKFwicGFnZXIucGFnZVwiKTtcbiAgICB9XG5cbiAgICBnZXREZWZhdWx0UGFnZVNpemUoKSB7XG4gICAgICAgIHJldHVybiBpc05hTih0aGlzLmdldE9wdGlvbnMoXCJwYWdlci5zaXplXCIpKVxuICAgICAgICAgICAgPyBPUFRfREVGQVVMVF9QQUdFX1NJWkVcbiAgICAgICAgICAgIDogdGhpcy5nZXRPcHRpb25zKFwicGFnZXIuc2l6ZVwiKTtcbiAgICB9XG5cbiAgICByZXNldFBhZ2VyKCkge1xuICAgICAgICB0aGlzLnNldFN0YXRlKFwicGFnZXJcIiwge1xuICAgICAgICAgICAgc2l6ZTogdGhpcy5nZXREZWZhdWx0UGFnZVNpemUoKSxcbiAgICAgICAgICAgIHBhZ2U6IHRoaXMuZ2V0RGVmYXVsdFBhZ2VOdW1iZXIoKSxcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZ2V0UGFnZXIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFN0YXRlKFwicGFnZXJcIik7XG4gICAgfVxuXG4gICAgc2V0U29ydGVyKGhhc2gsIHdpdGhvdXRJbnZhbGlkYXRpb24gPSBmYWxzZSkge1xuICAgICAgICB0aGlzLnNldFdvcmtpbmcoXCJzb3J0ZXJcIiwgaGFzaCk7XG4gICAgICAgIGlmICh3aXRob3V0SW52YWxpZGF0aW9uKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmludmFsaWRhdGVEYXRhKCk7XG4gICAgICAgIHRoaXMudXBkYXRlRGF0YSgpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICByZXNldFNvcnRlcih3aXRob3V0SW52YWxpZGF0aW9uID0gZmFsc2UpIHtcbiAgICAgICAgbGV0IHQgPSB7fTtcbiAgICAgICAgdFtPUFRfREVGQVVMVF9TT1JUX0ZJRUxEXSA9IE9QVF9ERUZBVUxUX1NPUlRfRElSRUNUSU9OO1xuICAgICAgICByZXR1cm4gdGhpcy5zZXRTb3J0ZXIodCwgd2l0aG91dEludmFsaWRhdGlvbik7XG4gICAgfVxuXG4gICAgZ2V0U29ydGVyKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRXb3JraW5nKFwic29ydGVyXCIpO1xuICAgIH1cblxuICAgIGdldFNvcnRlckRpcmVjdGlvbigpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGxldCBuYW1lcyA9IE9iamVjdC5rZXlzKHRoaXMuZ2V0U29ydGVyKCkpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0U29ydGVyKClbbmFtZXNbMF1dO1xuICAgICAgICB9IGNhdGNoIHtcbiAgICAgICAgICAgIHJldHVybiBPUFRfREVGQVVMVF9TT1JUX0RJUkVDVElPTjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdldFNlYXJjaCgpIHtcbiAgICAgICAgbGV0IHNlYXJjaCA9XG4gICAgICAgICAgICB0eXBlb2YgdGhpcy5nZXRXb3JraW5nKFwic2VhcmNoXCIpICE9PSBcInVuZGVmaW5lZFwiICYmXG4gICAgICAgICAgICB0aGlzLmdldFdvcmtpbmcoXCJzZWFyY2hcIikgIT09IG51bGw7XG4gICAgICAgIHJldHVybiBzZWFyY2ggPyB0aGlzLmdldFdvcmtpbmcoXCJzZWFyY2hcIikgOiBcIlwiO1xuICAgIH1cblxuICAgIHNldFNlYXJjaChsaW5lID0gT1BUX0RFRkFVTFRfU0VBUkNILCB3aXRob3V0SW52YWxpZGF0aW9uID0gZmFsc2UpIHtcbiAgICAgICAgdGhpcy5zZXRXb3JraW5nKFwic2VhcmNoXCIsIGxpbmUpO1xuICAgICAgICBpZiAod2l0aG91dEludmFsaWRhdGlvbikge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5pbnZhbGlkYXRlRGF0YSgpO1xuICAgICAgICB0aGlzLnVwZGF0ZURhdGEoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZ2V0UmV0dXJuKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRXb3JraW5nKFwicmV0dXJuXCIpO1xuICAgIH1cblxuICAgIHNldFJldHVybihyZXQgPSBPUFRfREVGQVVMVF9SRVRVUk4pIHtcbiAgICAgICAgdGhpcy5zZXRXb3JraW5nKFwicmV0dXJuXCIsIHJldCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGNsZWFyRmlsdGVyZWREYXRhKCkge1xuICAgICAgICB0aGlzLnN0b3Jlcy5maWx0ZXJlZC51cGRhdGUoKHZhbCkgPT4ge1xuICAgICAgICAgICAgdmFsLnNwbGljZSgwLCB2YWwubGVuZ3RoKTtcbiAgICAgICAgICAgIHJldHVybiB2YWw7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGNsZWFyUmF3RGF0YSgpIHtcbiAgICAgICAgdGhpcy5zdG9yZXMucmF3LnVwZGF0ZSgodmFsKSA9PiB7XG4gICAgICAgICAgICB2YWwuc3BsaWNlKDAsIHZhbC5sZW5ndGgpO1xuICAgICAgICAgICAgcmV0dXJuIHZhbDtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgY2xlYXJSZWZpbmVkRGF0YSgpIHtcbiAgICAgICAgdGhpcy5zdG9yZXMucmVmaW5lZC51cGRhdGUoKHZhbCkgPT4ge1xuICAgICAgICAgICAgdmFsLnNwbGljZSgwLCB2YWwubGVuZ3RoKTtcbiAgICAgICAgICAgIHJldHVybiB2YWw7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGludmFsaWRhdGVEYXRhKCkge1xuICAgICAgICAvL2NsZWFyaW5nIGZpbHRlcmVkIGFuZCBzb3J0ZWRcbiAgICAgICAgdGhpcy5jbGVhckZpbHRlcmVkRGF0YSgpO1xuICAgICAgICAvL2luIGNhc2UgbGl2ZSBsb2FkaW5nIGZyb20gc2VydmVyXG4gICAgICAgIGlmICh0aGlzLmlzTGl2ZSgpKSB7XG4gICAgICAgICAgICAvL2NsZWFyaW5nIGxvYWRlZCBkYXRhXG4gICAgICAgICAgICB0aGlzLmNsZWFyUmF3RGF0YSgpO1xuICAgICAgICB9XG4gICAgICAgIC8vcmVzc2V0IHBhZ2VyIGFueXdheVxuICAgICAgICB0aGlzLnJlc2V0UGFnZXIoKTtcbiAgICB9XG5cbiAgICBpc0xpdmUoKSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICB0aGlzLmdldE9wdGlvbnMoXCJpbnRlcmZhY2VcIikgJiYgdGhpcy5nZXRPcHRpb25zKFwiaW50ZXJmYWNlLmZhY3RvcnlcIilcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBzZXRVcGRhdGluZygpIHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZShcInVwZGF0aW5nXCIsIHRydWUpO1xuICAgIH1cblxuICAgIHNldFVwZGF0ZWQoKSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoXCJ1cGRhdGluZ1wiLCBmYWxzZSk7XG4gICAgfVxuXG4gICAgaWZVcGRhdGluZygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0U3RhdGUoXCJ1cGRhdGluZ1wiKTtcbiAgICB9XG5cbiAgICBnZXREYXRhSW50ZXJmYWNlKCkge1xuICAgICAgICBsZXQgZmFjdG9yeSA9IHRoaXMuZ2V0T3B0aW9ucyhcImludGVyZmFjZS5mYWN0b3J5XCIpO1xuICAgICAgICBpZiAodHlwZW9mIGZhY3RvcnkgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgcmV0dXJuIGZhY3Rvcnkoe30pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGZhY3Rvcnk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXRMb2FkRGF0YUFjdGlvbk5hbWUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldE9wdGlvbnMoXCJpbnRlcmZhY2UubGlzdEFjdGlvblwiKVxuICAgICAgICAgICAgPyB0aGlzLmdldE9wdGlvbnMoXCJpbnRlcmZhY2UubGlzdEFjdGlvblwiKVxuICAgICAgICAgICAgOiBPUFRfREVGQVVMVF9MSVNUX0FDVElPTjtcbiAgICB9XG5cbiAgICBzZXRDb21iaW5lZEFjdGlvbk5hbWUoYWN0aW9uTmFtZSA9IE9QVF9ERUZBVUxUX0NPVU5UX0FDVElPTikge1xuICAgICAgICB0aGlzLnNldFdvcmtpbmcoXCJpbnRlcmZhY2UuY29tYmluZWRBY3Rpb25cIiwgYWN0aW9uTmFtZSk7XG4gICAgfVxuXG4gICAgZ2V0Q29tYmluZWRBY3Rpb25OYW1lKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRXb3JraW5nKFwiaW50ZXJmYWNlLmNvbWJpbmVkQWN0aW9uXCIpXG4gICAgICAgICAgICA/IHRoaXMuZ2V0V29ya2luZyhcImludGVyZmFjZS5jb21iaW5lZEFjdGlvblwiKVxuICAgICAgICAgICAgOiBPUFRfREVGQVVMVF9DT01CSU5FRF9BQ1RJT047XG4gICAgfVxuXG4gICAgZ2V0Q291bnRBY3Rpb25OYW1lKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRPcHRpb25zKFwiaW50ZXJmYWNlLmNvdW50QWN0aW9uXCIpXG4gICAgICAgICAgICA/IHRoaXMuZ2V0T3B0aW9ucyhcImludGVyZmFjZS5jb3VudEFjdGlvblwiKVxuICAgICAgICAgICAgOiBPUFRfREVGQVVMVF9DT1VOVF9BQ1RJT047XG4gICAgfVxuXG4gICAgbG9hZERhdGEoKSB7XG4gICAgICAgIC8vbG9hZCBmcm9tIHNlcnZlclxuICAgICAgICBsZXQgcXVlcnkgPSB0aGlzLmdldERhdGFJbnRlcmZhY2UoKVxuICAgICAgICAgICAgICAgIC5zZXRGaWx0ZXIodGhpcy5nZXRGaWx0ZXIoKSlcbiAgICAgICAgICAgICAgICAuc2V0U29ydGVyKHRoaXMuZ2V0U29ydGVyKCkpXG4gICAgICAgICAgICAgICAgLnNldFJldHVybih0aGlzLmdldFJldHVybigpKVxuICAgICAgICAgICAgICAgIC5zZXRTZWFyY2godGhpcy5nZXRTZWFyY2goKSlcbiAgICAgICAgICAgICAgICAuc2V0UGFnZXIodGhpcy5nZXRQYWdlcigpKSxcbiAgICAgICAgICAgIGFjdGlvbk5hbWU7XG4gICAgICAgIGlmICh0aGlzLmdldE9wdGlvbnMoXCJpbnRlcmZhY2UuY29tYmluZWRcIiwgT1BUX0RFRkFVTFRfQ09NQklORUQpKSB7XG4gICAgICAgICAgICBhY3Rpb25OYW1lID0gdGhpcy5nZXRDb21iaW5lZEFjdGlvbk5hbWUoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGFjdGlvbk5hbWUgPSB0aGlzLmdldExvYWREYXRhQWN0aW9uTmFtZSgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBxdWVyeVtcIiRcIiArIGFjdGlvbk5hbWVdKCk7XG4gICAgfVxuXG4gICAgZ29Ub05leHQoKSB7XG4gICAgICAgIGxldCBuZXh0ID0gaXNOYU4odGhpcy5nZXRTdGF0ZShcInBhZ2VyLnBhZ2VcIikpXG4gICAgICAgICAgICA/IHRoaXMuZ2V0RGVmYXVsdFBhZ2VOdW1iZXIoKVxuICAgICAgICAgICAgOiB0aGlzLmdldFN0YXRlKFwicGFnZXIucGFnZVwiKSArIDE7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoXG4gICAgICAgICAgICBcInBhZ2VyLnBhZ2VcIixcbiAgICAgICAgICAgIE1hdGgubWluKG5leHQsIHRoaXMuZ2V0U3RhdGUoXCJwYWdpbmF0aW9uLnBhZ2VzLnRvXCIpKVxuICAgICAgICApO1xuICAgICAgICB0aGlzLnVwZGF0ZURhdGEoKTtcbiAgICB9XG5cbiAgICBnb1RvUHJldigpIHtcbiAgICAgICAgbGV0IHByZXYgPSBpc05hTih0aGlzLmdldFN0YXRlKFwicGFnZXIucGFnZVwiKSlcbiAgICAgICAgICAgID8gdGhpcy5nZXREZWZhdWx0UGFnZU51bWJlcigpXG4gICAgICAgICAgICA6IHRoaXMuZ2V0U3RhdGUoXCJwYWdlci5wYWdlXCIpIC0gMTtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZShcbiAgICAgICAgICAgIFwicGFnZXIucGFnZVwiLFxuICAgICAgICAgICAgTWF0aC5tYXgocHJldiwgdGhpcy5nZXRTdGF0ZShcInBhZ2luYXRpb24ucGFnZXMuZnJvbVwiKSlcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy51cGRhdGVEYXRhKCk7XG4gICAgfVxuXG4gICAgZ29Ub0ZpcnN0KCkge1xuICAgICAgICB0aGlzLnNldFN0YXRlKFwicGFnZXIucGFnZVwiLCB0aGlzLmdldFN0YXRlKFwicGFnaW5hdGlvbi5wYWdlcy5mcm9tXCIpKTtcbiAgICAgICAgdGhpcy51cGRhdGVEYXRhKCk7XG4gICAgfVxuXG4gICAgZ29Ub0xhc3QoKSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoXCJwYWdlci5wYWdlXCIsIHRoaXMuZ2V0U3RhdGUoXCJwYWdpbmF0aW9uLnBhZ2VzLnRvXCIpKTtcbiAgICAgICAgdGhpcy51cGRhdGVEYXRhKCk7XG4gICAgfVxuXG4gICAgZ29Ub1BhZ2UocGFnZU51bWJlcikge1xuICAgICAgICB0aGlzLnNldFN0YXRlKFwicGFnZXIucGFnZVwiLCBwYWdlTnVtYmVyKTtcbiAgICAgICAgdGhpcy51cGRhdGVEYXRhKCk7XG4gICAgfVxuXG4gICAgdGVzdERhdGFJdGVtKGl0ZW0pIHtcbiAgICAgICAgdmFyIHN0clZhbHVlID0gdGhpcy5nZXRTZWFyY2goKS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBmb3IgKHZhciBrIGluIGl0ZW0pIHtcbiAgICAgICAgICAgIHZhciB0b0NvbXAgPSBpdGVtW2tdLnRvU3RyaW5nKCkudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgIGlmICh0b0NvbXAuaW5kZXhPZihzdHJWYWx1ZSkgPiAtMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBnZXRSb3dzQ291bnQoKSB7XG4gICAgICAgIGxldCBxdWVyeSA9IHRoaXMuZ2V0RGF0YUludGVyZmFjZSgpLnNldEZpbHRlcih0aGlzLmdldEZpbHRlcigpKTtcbiAgICAgICAgcmV0dXJuIHF1ZXJ5W1wiJFwiICsgdGhpcy5nZXRDb3VudEFjdGlvbk5hbWUoKV0oKVxuICAgICAgICAgICAgLnRoZW4oKGRhdGEpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZVBhZ2luYXRpb24oZGF0YS5jb3VudCk7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmNhdGNoKChlKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5lcnJvcihlKTtcbiAgICAgICAgICAgIH0pO1xuICAgIH1cblxuICAgIHVwZGF0ZVBhZ2luYXRpb24oaXRlbXNDb3VudCkge1xuICAgICAgICB0aGlzLmxvZyhcInVwZGF0ZSBwYWdpbmF0aW9uXCIsIGl0ZW1zQ291bnQpO1xuICAgICAgICB0aGlzLnN0YXRlLnBhZ2luYXRpb24ucGFnZXMubGlzdC5zcGxpY2UoXG4gICAgICAgICAgICAwLFxuICAgICAgICAgICAgdGhpcy5zdGF0ZS5wYWdpbmF0aW9uLnBhZ2VzLmxpc3QubGVuZ3RoXG4gICAgICAgICk7XG4gICAgICAgIGxldCBpdGVtc0Zyb20gPVxuICAgICAgICAgICAgICAgICh0aGlzLmdldFBhZ2VyKCkucGFnZSAtIE9QVF9ERUZBVUxUX1BBR0VfTlVNQkVSKSAqXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZ2V0UGFnZXIoKS5zaXplICtcbiAgICAgICAgICAgICAgICAxLFxuICAgICAgICAgICAgcGFnZXNDb3VudCA9XG4gICAgICAgICAgICAgICAgaXRlbXNDb3VudCAlIHRoaXMuZ2V0UGFnZXIoKS5zaXplXG4gICAgICAgICAgICAgICAgICAgID8gTWF0aC5mbG9vcihpdGVtc0NvdW50IC8gdGhpcy5nZXRQYWdlcigpLnNpemUpICsgMVxuICAgICAgICAgICAgICAgICAgICA6IE1hdGgucm91bmQoaXRlbXNDb3VudCAvIHRoaXMuZ2V0UGFnZXIoKS5zaXplKSxcbiAgICAgICAgICAgIHBhZ2VzRnJvbSA9IE1hdGgubWF4KFxuICAgICAgICAgICAgICAgIE9QVF9ERUZBVUxUX1BBR0VfTlVNQkVSLFxuICAgICAgICAgICAgICAgIHRoaXMuZ2V0UGFnZXIoKS5wYWdlIC0gT1BUX0RFRkFVTFRfUEFHRV9SQU5HRVxuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIHBhZ2VzVG8gPSBNYXRoLm1pbihcbiAgICAgICAgICAgICAgICBwYWdlc0NvdW50IC0gKDEgLSBPUFRfREVGQVVMVF9QQUdFX05VTUJFUiksXG4gICAgICAgICAgICAgICAgdGhpcy5nZXRQYWdlcigpLnBhZ2UgKyBPUFRfREVGQVVMVF9QQUdFX1JBTkdFXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgbGlzdCA9IFtdLFxuICAgICAgICAgICAgaXRlbXNUbyA9IE1hdGgubWluKFxuICAgICAgICAgICAgICAgIGl0ZW1zRnJvbSArIHRoaXMuZ2V0UGFnZXIoKS5zaXplIC0gMSxcbiAgICAgICAgICAgICAgICBpdGVtc0NvdW50XG4gICAgICAgICAgICApO1xuICAgICAgICBmb3IgKGxldCB0ID0gcGFnZXNGcm9tOyB0IDw9IHBhZ2VzVG87IHQrKykge1xuICAgICAgICAgICAgbGlzdC5wdXNoKHtcbiAgICAgICAgICAgICAgICBpbmRleDogdCxcbiAgICAgICAgICAgICAgICBhY3RpdmU6IHQgPT09IHRoaXMuZ2V0UGFnZXIoKS5wYWdlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnN0b3Jlcy5zdGF0ZS51cGRhdGUoKHZhbCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5sb2coXCJ1cGRhdGUgcGFnaW5hdGlvblwiLCB2YWwpO1xuICAgICAgICAgICAgdmFsLnBhZ2luYXRpb24uaXRlbXMuY291bnQgPSBpdGVtc0NvdW50O1xuICAgICAgICAgICAgdmFsLnBhZ2luYXRpb24uaXRlbXMuZnJvbSA9IGl0ZW1zRnJvbTtcbiAgICAgICAgICAgIHZhbC5wYWdpbmF0aW9uLml0ZW1zLnRvID0gaXRlbXNUbztcbiAgICAgICAgICAgIHZhbC5wYWdpbmF0aW9uLnBhZ2VzLmNvdW50ID0gcGFnZXNDb3VudDtcbiAgICAgICAgICAgIHZhbC5wYWdpbmF0aW9uLnBhZ2VzLmZyb20gPSBwYWdlc0Zyb207XG4gICAgICAgICAgICB2YWwucGFnaW5hdGlvbi5wYWdlcy50byA9IHBhZ2VzVG87XG4gICAgICAgICAgICB2YWwucGFnaW5hdGlvbi5wYWdlcy5jdXJyZW50ID0gdGhpcy5nZXRQYWdlcigpLnBhZ2U7XG4gICAgICAgICAgICB2YWwucGFnaW5hdGlvbi5wYWdlcy5saXN0LnNwbGljZShcbiAgICAgICAgICAgICAgICAwLFxuICAgICAgICAgICAgICAgIHZhbC5wYWdpbmF0aW9uLnBhZ2VzLmxpc3QubGVuZ3RoLFxuICAgICAgICAgICAgICAgIC4uLmxpc3RcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICByZXR1cm4gdmFsO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICB1cGRhdGVEYXRhKCkge1xuICAgICAgICBpZiAodGhpcy5pc0xpdmUoKSkge1xuICAgICAgICAgICAgaWYgKHRoaXMuaWZVcGRhdGluZygpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCF0aGlzLmdldE9wdGlvbnMoXCJlbmRsZXNzXCIsIGZhbHNlKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuY2xlYXJSYXdEYXRhKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnNldFVwZGF0aW5nKCk7XG4gICAgICAgICAgICBpZiAodGhpcy5nZXRPcHRpb25zKFwiaW50ZXJmYWNlLmNvbWJpbmVkXCIsIE9QVF9ERUZBVUxUX0NPTUJJTkVEKSkge1xuICAgICAgICAgICAgICAgIHRoaXMubG9hZERhdGEoKVxuICAgICAgICAgICAgICAgICAgICAudGhlbigoZGF0YSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGZ1bGwgPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vdENvbW1vbi5vYmpIYXMoZGF0YSwgXCJzdGF0dXNcIikgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBub3RDb21tb24ub2JqSGFzKGRhdGEsIFwicmVzdWx0XCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdG9yZXMuZmlsdGVyZWQudXBkYXRlKCh2YWwpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuZ2V0T3B0aW9ucyhcImVuZGxlc3NcIiwgZmFsc2UpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2xlYXJGaWx0ZXJlZERhdGEoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZ1bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsLnB1c2goLi4uZGF0YS5yZXN1bHQubGlzdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm90Q29tbW9uLm9iakhhcyhkYXRhLCBcImxpc3RcIikgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFycmF5LmlzQXJyYXkoZGF0YS5saXN0KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbC5wdXNoKC4uLmRhdGEubGlzdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShkYXRhKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsLnB1c2goLi4uZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRXb3JraW5nKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwibGFzdENvdW50XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVsbCA/IGRhdGEucmVzdWx0LmNvdW50IDogZGF0YS5jb3VudFxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy51cGRhdGVQYWdpbmF0aW9uKHRoaXMuZ2V0V29ya2luZyhcImxhc3RDb3VudFwiKSk7XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIC5jYXRjaCh0aGlzLmVycm9yLmJpbmQodGhpcykpXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKHRoaXMuc2V0VXBkYXRlZC5iaW5kKHRoaXMpKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5sb2FkRGF0YSgpXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKChkYXRhKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0b3Jlcy5maWx0ZXJlZC51cGRhdGUoKHZhbCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbC5wdXNoKC4uLmRhdGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWw7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4odGhpcy5nZXRSb3dzQ291bnQuYmluZCh0aGlzKSlcbiAgICAgICAgICAgICAgICAgICAgLmNhdGNoKHRoaXMuZXJyb3IuYmluZCh0aGlzKSlcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4odGhpcy5zZXRVcGRhdGVkLmJpbmQodGhpcykpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy9sb2NhbCBtYWdpY1xuICAgICAgICAgICAgdGhpcy5zZXRVcGRhdGluZygpO1xuICAgICAgICAgICAgdGhpcy5wcm9jZXNzRGF0YSgpO1xuICAgICAgICAgICAgdGhpcy5zZXRVcGRhdGVkKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXREYXRhKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kYXRhO1xuICAgIH1cblxuICAgIHByb2Nlc3NEYXRhKCkge1xuICAgICAgICBsZXQgdGhhdEZpbHRlciA9IHRoaXMuZ2V0RmlsdGVyKCk7XG4gICAgICAgIC8vdGhpcy5nZXREYXRhKCdyb3dzJykuX19zZXRQYXNzaXZlO1xuICAgICAgICB0aGlzLmxvZyh0aGlzLmdldERhdGEoKSk7XG4gICAgICAgIGlmIChcbiAgICAgICAgICAgIHR5cGVvZiB0aGF0RmlsdGVyICE9PSBcInVuZGVmaW5lZFwiICYmXG4gICAgICAgICAgICB0aGF0RmlsdGVyICE9PSBudWxsICYmXG4gICAgICAgICAgICB0eXBlb2YgdGhhdEZpbHRlci5maWx0ZXJTZWFyY2ggIT09IFwidW5kZWZpbmVkXCIgJiZcbiAgICAgICAgICAgIHRoYXRGaWx0ZXIuZmlsdGVyU2VhcmNoICE9PSBudWxsICYmXG4gICAgICAgICAgICB0aGF0RmlsdGVyLmZpbHRlclNlYXJjaC5sZW5ndGggPiAwXG4gICAgICAgICkge1xuICAgICAgICAgICAgdGhpcy5zdG9yZXMuZmlsdGVyZWQudXBkYXRlKCh2YWwpID0+IHtcbiAgICAgICAgICAgICAgICB2YWwuc3BsaWNlKFxuICAgICAgICAgICAgICAgICAgICAwLFxuICAgICAgICAgICAgICAgICAgICB2YWwubGVuZ3RoLFxuICAgICAgICAgICAgICAgICAgICAuLi50aGlzLmRhdGEucmF3LmZpbHRlcih0aGlzLnRlc3REYXRhSXRlbS5iaW5kKHRoaXMpKVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zdG9yZXMuZmlsdGVyZWQudXBkYXRlKCh2YWwpID0+IHtcbiAgICAgICAgICAgICAgICB2YWwuc3BsaWNlKDAsIHZhbC5sZW5ndGgsIC4uLnRoaXMuZGF0YS5yYXcpO1xuICAgICAgICAgICAgICAgIHJldHVybiB2YWw7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICAvLy8vc29ydGVyXG4gICAgICAgIGxldCB0aGF0U29ydGVyID0gdGhpcy5nZXRTb3J0ZXIoKTtcbiAgICAgICAgaWYgKHR5cGVvZiB0aGF0U29ydGVyICE9PSBcInVuZGVmaW5lZFwiICYmIHRoYXRTb3J0ZXIgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuc3RvcmVzLmZpbHRlcmVkLnVwZGF0ZSgodmFsKSA9PiB7XG4gICAgICAgICAgICAgICAgdmFsLnNvcnQoKGl0ZW0xLCBpdGVtMikgPT4ge1xuICAgICAgICAgICAgICAgICAgICBsZXQgdDEgPSBub3RQYXRoLmdldCh0aGF0U29ydGVyLnNvcnRCeUZpZWxkLCBpdGVtMSwge30pLFxuICAgICAgICAgICAgICAgICAgICAgICAgdDIgPSBub3RQYXRoLmdldCh0aGF0U29ydGVyLnNvcnRCeUZpZWxkLCBpdGVtMiwge30pO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXNOYU4odDEpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZW9mIHQxICE9PSBcInVuZGVmaW5lZFwiICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZW9mIHQyICE9PSBcInVuZGVmaW5lZFwiICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdDEubG9jYWxlQ29tcGFyZVxuICAgICAgICAgICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdDEubG9jYWxlQ29tcGFyZSgpICogLXRoYXRTb3J0ZXIuc29ydERpcmVjdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICh0MSA8IHQyID8gMSA6IC0xKSAqIHRoYXRTb3J0ZXIuc29ydERpcmVjdGlvbjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiB2YWw7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGVycm9yKCkge1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLmxvZ2dlcikge1xuICAgICAgICAgICAgdGhpcy5vcHRpb25zLmxvZ2dlci5lcnJvciguLi5hcmd1bWVudHMpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgbG9nKCkge1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLmxvZ2dlcikge1xuICAgICAgICAgICAgdGhpcy5vcHRpb25zLmxvZ2dlci5sb2coLi4uYXJndW1lbnRzKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNoZWNrRmllbGRzTmFtZXMoKSB7XG4gICAgICAgIGNvbnN0IGZpZWxkSWQgPSB0aGlzLmdldE9wdGlvbnMoXCJpZEZpZWxkXCIpO1xuICAgICAgICBjb25zdCBwYXRoSWQgPSBcIjpcIiArIGZpZWxkSWQ7XG4gICAgICAgIGxldCBmaWVsZHMgPSB0aGlzLmdldE9wdGlvbnMoXCJmaWVsZHNcIiwgW10pO1xuICAgICAgICBmaWVsZHMuZm9yRWFjaCgoZmllbGQpID0+IHtcbiAgICAgICAgICAgIGlmIChwYXRoSWQgPT09IGZpZWxkLnBhdGgpIHtcbiAgICAgICAgICAgICAgICBmaWVsZC5wYXRoID0gZmllbGQucGF0aCArIENPTlNUX0lEX0RVQkxJQ0FURV9QT1NURklYO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICByZWFkRmllbGRWYWx1ZShwYXRoLCBpdGVtLCBoZWxwZXJzKSB7XG4gICAgICAgIGlmIChwYXRoLmluZGV4T2YoQ09OU1RfSURfRFVCTElDQVRFX1BPU1RGSVgpID4gLTEpIHtcbiAgICAgICAgICAgIGNvbnN0IGZpZWxkSWQgPSB0aGlzLmdldE9wdGlvbnMoXCJpZEZpZWxkXCIpO1xuICAgICAgICAgICAgY29uc3QgcGF0aElkID0gXCI6XCIgKyBmaWVsZElkO1xuICAgICAgICAgICAgcmV0dXJuIG5vdFBhdGguZ2V0KHBhdGhJZCwgaXRlbSwgaGVscGVycyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbm90UGF0aC5nZXQocGF0aCwgaXRlbSwgaGVscGVycyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZWZpbmVGaWx0ZXJlZCgpIHtcbiAgICAgICAgbGV0IHJlc3VsdCA9IFtdO1xuICAgICAgICB0aGlzLmNoZWNrRmllbGRzTmFtZXMoKTtcbiAgICAgICAgdGhpcy5kYXRhLmZpbHRlcmVkLmZvckVhY2goKGl0ZW0sIGluZGV4KSA9PiB7XG4gICAgICAgICAgICBsZXQgcmVmaW5lZCA9IHt9O1xuICAgICAgICAgICAgaWYgKHRoaXMuZ2V0T3B0aW9ucyhcImlkRmllbGRcIikpIHtcbiAgICAgICAgICAgICAgICByZWZpbmVkW3RoaXMuZ2V0T3B0aW9ucyhcImlkRmllbGRcIildID1cbiAgICAgICAgICAgICAgICAgICAgaXRlbVt0aGlzLmdldE9wdGlvbnMoXCJpZEZpZWxkXCIpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuZ2V0T3B0aW9ucyhcImZpZWxkc1wiLCBbXSkuZm9yRWFjaCgoZmllbGQpID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgcHJlcHJvY2Vzc2VkID0gbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgdmFsID0gdGhpcy5yZWFkRmllbGRWYWx1ZShcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpZWxkLnBhdGgsXG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVtLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5nZXRPcHRpb25zKFwiaGVscGVyc1wiKVxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIGlmIChub3RDb21tb24ub2JqSGFzKGZpZWxkLCBPUFRfRklFTERfTkFNRV9QUkVfUFJPQykpIHtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHByZXByb2Nlc3NlZCA9IGZpZWxkW09QVF9GSUVMRF9OQU1FX1BSRV9QUk9DXShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmRleFxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lcnJvcihcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIkVycm9yIHdoaWxlIHByZXByb2Nlc3NpbmcgY2VsbCB2YWx1ZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4XG4gICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lcnJvcihlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBub3RQYXRoLnNldChmaWVsZC5wYXRoLCByZWZpbmVkLCBwcmVwcm9jZXNzZWQpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIG5vdFBhdGguc2V0KGZpZWxkLnBhdGgsIHJlZmluZWQsIHZhbCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXN1bHQucHVzaChyZWZpbmVkKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuc3RvcmVzLnJlZmluZWQudXBkYXRlKCh2YWwpID0+IHtcbiAgICAgICAgICAgIHZhbC5zcGxpY2UoMCwgdmFsLmxlbmd0aCwgLi4ucmVzdWx0KTtcbiAgICAgICAgICAgIHJldHVybiB2YWw7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgICRkZXN0cm95KCkge1xuICAgICAgICBmb3IgKGxldCBuYW1lIGluIHRoaXMudWkpIHtcbiAgICAgICAgICAgIHRoaXMudWlbbmFtZV0uJGRlc3Ryb3kgJiYgdGhpcy51aVtuYW1lXS4kZGVzdHJveSgpO1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMudWlbbmFtZV07XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IG5vdFRhYmxlO1xuIiwiPHNjcmlwdD5cbiAgICBpbXBvcnQgVUlMb2FkZXIgZnJvbSBcIi4uLy4uLy4uL2VsZW1lbnRzL3ZhcmlvdXMvdWkubG9hZGVyLnN2ZWx0ZVwiO1xuICAgIGltcG9ydCBVSUNvbnRhaW5lciBmcm9tIFwiLi4vLi4vLi4vZWxlbWVudHMvbGF5b3V0L3VpLmNvbnRhaW5lci5zdmVsdGVcIjtcbiAgICBpbXBvcnQgVUlOb3RpZmljYXRpb25FcnJvciBmcm9tIFwiLi4vLi4vLi4vZWxlbWVudHMvbm90aWZpY2F0aW9uL3VpLmVycm9yLnN2ZWx0ZVwiO1xuICAgIGltcG9ydCBVSU5vdGlmaWNhdGlvblN1Y2Nlc3MgZnJvbSBcIi4uLy4uLy4uL2VsZW1lbnRzL25vdGlmaWNhdGlvbi91aS5zdWNjZXNzLnN2ZWx0ZVwiO1xuXG4gICAgLy9oaWRkZW4gLSBubyBsb2FkZXJcbiAgICAvL2NvbnRhaW5lciAtIHBhcmVudCBjb250YWluZXIgb2YgZm9ybVxuXG4gICAgbGV0IHN1Y2Nlc3MgPSAkc3RhdGUoZmFsc2UpO1xuXG4gICAgbGV0IGVycm9yID0gJHN0YXRlKGZhbHNlKTtcbiAgICAvKipcbiAgICAgKiBAdHlwZWRlZiB7T2JqZWN0fSBQcm9wc1xuICAgICAqIEBwcm9wZXJ0eSB7YW55fSBbY29udGFpbmVyXVxuICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbbG9hZGVyVGl0bGVdXG4gICAgICogQHByb3BlcnR5IHtib29sZWFufSBbbG9hZGVyQWN0aXZlXSAtIHN0YXRlIGlmIGZvcm0gbG9hZGluZ1xuICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbbG9hZGVyU2l6ZV0gLSBwYWdlIC0gd2hvbGUgcGFnZVxuICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbc3VjY2Vzc1RpdGxlXVxuICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbc3VjY2Vzc01lc3NhZ2VdXG4gICAgICogQHByb3BlcnR5IHtzdHJpbmd9IFtlcnJvclRpdGxlXVxuICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbZXJyb3JNZXNzYWdlXVxuICAgICAqL1xuXG4gICAgLyoqIEB0eXBlIHtQcm9wc30gKi9cbiAgICBsZXQge1xuICAgICAgICBjb250YWluZXIgPSB7fSxcbiAgICAgICAgbG9hZGVyVGl0bGUgPSAkYmluZGFibGUoXCLQntGC0L/RgNCw0LLQutCwINC00LDQvdC90YvRhSDQvdCwINGB0LXRgNCy0LXRgFwiKSxcbiAgICAgICAgbG9hZGVyQWN0aXZlID0gJGJpbmRhYmxlKGZhbHNlKSxcbiAgICAgICAgbG9hZGVyU2l6ZSA9ICRiaW5kYWJsZShcImNvbnRhaW5lclwiKSxcbiAgICAgICAgc3VjY2Vzc1RpdGxlID0gJGJpbmRhYmxlKFwiT0tcIiksXG4gICAgICAgIHN1Y2Nlc3NNZXNzYWdlID0gJGJpbmRhYmxlKFwiXCIpLFxuICAgICAgICBlcnJvclRpdGxlID0gJGJpbmRhYmxlKFwiRXJyb3JcIiksXG4gICAgICAgIGVycm9yTWVzc2FnZSA9ICRiaW5kYWJsZShcIlwiKSxcbiAgICB9ID0gJHByb3BzKCk7XG5cbiAgICBleHBvcnQgZnVuY3Rpb24gc2hvd1N1Y2Nlc3ModGl0bGUsIG1lc3NhZ2UpIHtcbiAgICAgICAgZXJyb3IgPSBmYWxzZTtcbiAgICAgICAgc3VjY2VzcyA9IHRydWU7XG4gICAgICAgIGlmIChtZXNzYWdlICE9IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgc3VjY2Vzc01lc3NhZ2UgPSBtZXNzYWdlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aXRsZSAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHN1Y2Nlc3NUaXRsZSA9IHRpdGxlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZXhwb3J0IGZ1bmN0aW9uIHNob3dFcnJvcih0aXRsZSwgbWVzc2FnZSkge1xuICAgICAgICBzdWNjZXNzID0gZmFsc2U7XG4gICAgICAgIGVycm9yID0gdHJ1ZTtcbiAgICAgICAgaWYgKG1lc3NhZ2UgIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBlcnJvck1lc3NhZ2UgPSBtZXNzYWdlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aXRsZSAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGVycm9yVGl0bGUgPSB0aXRsZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGV4cG9ydCBmdW5jdGlvbiBzZXRMb2FkaW5nKCkge1xuICAgICAgICBsb2FkZXJBY3RpdmUgPSB0cnVlO1xuICAgICAgICBzdWNjZXNzID0gZmFsc2U7XG4gICAgICAgIGVycm9yID0gZmFsc2U7XG4gICAgfVxuXG4gICAgZXhwb3J0IGZ1bmN0aW9uIHJlc2V0TG9hZGluZygpIHtcbiAgICAgICAgbG9hZGVyQWN0aXZlID0gZmFsc2U7XG4gICAgfVxuXG4gICAgZXhwb3J0IGZ1bmN0aW9uIGhpZGVBbGwoKSB7XG4gICAgICAgIGxvYWRlckFjdGl2ZSA9IGZhbHNlO1xuICAgICAgICBzdWNjZXNzID0gZmFsc2U7XG4gICAgICAgIGVycm9yID0gZmFsc2U7XG4gICAgfVxuPC9zY3JpcHQ+XG5cbjxVSUxvYWRlclxuICAgIGJpbmQ6bG9hZGluZz17bG9hZGVyQWN0aXZlfVxuICAgIGJpbmQ6dGl0bGU9e2xvYWRlclRpdGxlfVxuICAgIGJpbmQ6c2l6ZT17bG9hZGVyU2l6ZX1cbi8+XG48VUlDb250YWluZXIgey4uLmNvbnRhaW5lcn0+XG4gICAgeyNpZiBlcnJvcn1cbiAgICAgICAgPFVJTm90aWZpY2F0aW9uRXJyb3JcbiAgICAgICAgICAgIGJpbmQ6dGl0bGU9e2Vycm9yVGl0bGV9XG4gICAgICAgICAgICBiaW5kOm1lc3NhZ2U9e2Vycm9yTWVzc2FnZX1cbiAgICAgICAgLz5cbiAgICB7L2lmfVxuICAgIHsjaWYgc3VjY2Vzc31cbiAgICAgICAgPFVJTm90aWZpY2F0aW9uU3VjY2Vzc1xuICAgICAgICAgICAgYmluZDp0aXRsZT17c3VjY2Vzc1RpdGxlfVxuICAgICAgICAgICAgYmluZDptZXNzYWdlPXtzdWNjZXNzTWVzc2FnZX1cbiAgICAgICAgLz5cbiAgICB7L2lmfVxuPC9VSUNvbnRhaW5lcj5cbiIsImltcG9ydCBub3RCYXNlIGZyb20gXCIuLi8uLi9iYXNlXCI7XG5cbmltcG9ydCBVSUFjdGlvbkNvbnRhaW5lciBmcm9tIFwiLi91aS5hY3Rpb24uY29udGFpbmVyLnN2ZWx0ZVwiO1xuY29uc3QgREVGQVVMVF9DT05UQUlORVJfU0VMRUNUT1IgPSBcIi5jb250YWluZXJcIjtcbmltcG9ydCB7IERFRkFVTFRfU1RBVFVTX1NVQ0NFU1MgfSBmcm9tIFwiLi4vLi4vY29uc3RcIjtcblxuY2xhc3Mgbm90QWN0aW9uVUkgZXh0ZW5kcyBub3RCYXNlIHtcbiAgICAvL1VJIHJlbmRlcmVyIGNvbXBvbmVudCBjbGFzcyBjb25zdHJ1Y3RvclxuICAgICN1aUNvbXBvbmVudCA9IG51bGw7XG4gICAgI3VpID0gbnVsbDtcblxuICAgIGNvbnN0cnVjdG9yKHtcbiAgICAgICAgdGFyZ2V0ID0gbnVsbCxcbiAgICAgICAgbmFtZSA9IFwiRGVmYXVsdFwiLFxuICAgICAgICBvcHRpb25zID0ge30sXG4gICAgICAgIHdvcmtpbmcgPSB7fSxcbiAgICAgICAgZGF0YSA9IHt9LFxuICAgICAgICB1aSA9IFVJQWN0aW9uQ29udGFpbmVyLCAvL2RlZmF1bHQgVUlcbiAgICB9KSB7XG4gICAgICAgIHN1cGVyKHtcbiAgICAgICAgICAgIHdvcmtpbmc6IHtcbiAgICAgICAgICAgICAgICBuYW1lOiBgJHtuYW1lfUFjdGlvblVJYCxcbiAgICAgICAgICAgICAgICAuLi53b3JraW5nLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG9wdGlvbnMsXG4gICAgICAgICAgICBkYXRhLFxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKHRhcmdldCkge1xuICAgICAgICAgICAgdGhpcy5zZXRPcHRpb25zKFwidGFyZ2V0XCIsIHRhcmdldCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy4jdWlDb21wb25lbnQgPSB1aTtcbiAgICAgICAgdGhpcy5pbml0VUkoKTtcbiAgICB9XG5cbiAgICBpbml0VUkoKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCB0YXJnZXQgPSB0aGlzLmdldFRhcmdldEVsKCk7XG4gICAgICAgICAgICB3aGlsZSAodGFyZ2V0LmNoaWxkcmVuLmxlbmd0aClcbiAgICAgICAgICAgICAgICB0YXJnZXQucmVtb3ZlQ2hpbGQodGFyZ2V0LmZpcnN0Q2hpbGQpO1xuICAgICAgICAgICAgdGhpcy4jdWkgPSBuZXcgdGhpcy4jdWlDb21wb25lbnQoe1xuICAgICAgICAgICAgICAgIHRhcmdldCxcbiAgICAgICAgICAgICAgICBwcm9wczogdGhpcy5nZXRPcHRpb25zKCksXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgdGhpcy5lcnJvcihlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHNldExvYWRpbmcoKSB7XG4gICAgICAgIHRoaXMuZW1pdChcImxvYWRpbmdcIik7XG4gICAgICAgIHRoaXMuI3VpLnNldExvYWRpbmcoKTtcbiAgICB9XG5cbiAgICByZXNldExvYWRpbmcoKSB7XG4gICAgICAgIHRoaXMuZW1pdChcImxvYWRlZFwiKTtcbiAgICAgICAgdGhpcy4jdWkucmVzZXRMb2FkaW5nKCk7XG4gICAgfVxuXG4gICAgZGVzdHJveSgpIHtcbiAgICAgICAgdGhpcy5lbWl0KFwiZGVzdHJveVwiKTtcbiAgICAgICAgaWYgKHRoaXMuI3VpKSB7XG4gICAgICAgICAgICB0aGlzLiN1aS4kZGVzdHJveSAmJiB0aGlzLiN1aS4kZGVzdHJveSgpO1xuICAgICAgICAgICAgdGhpcy4jdWkuZGVzdHJveSAmJiB0aGlzLiN1aS5kZXN0cm95KCk7XG4gICAgICAgICAgICB0aGlzLiN1aSA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zZXRPcHRpb25zKG51bGwpO1xuICAgICAgICB0aGlzLnNldFdvcmtpbmcobnVsbCk7XG4gICAgICAgIHRoaXMuc2V0RGF0YShudWxsKTtcbiAgICB9XG5cbiAgICBwcm9jZXNzUmVzdWx0KHJlc3VsdCkge1xuICAgICAgICBpZiAocmVzdWx0LnN0YXR1cyA9PT0gREVGQVVMVF9TVEFUVVNfU1VDQ0VTUykge1xuICAgICAgICAgICAgdGhpcy5zZXRGb3JtU3VjY2VzcygpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnNldEZvcm1FcnJvcnMocmVzdWx0KTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqICAgRm9ybSB2YWxpZGF0aW9uIHJlc3VsdFxuICAgICAqKi9cbiAgICBzZXRGb3JtU3VjY2VzcygpIHtcbiAgICAgICAgdGhpcy4jdWkuc2hvd1N1Y2Nlc3MoKTtcbiAgICAgICAgdGhpcy5lbWl0KFwic3VjY2Vzc1wiKTtcbiAgICB9XG5cbiAgICBzZXRGb3JtRXJyb3JzKHJlc3VsdCkge1xuICAgICAgICBjb25zdCBzdGF0dXMgPSB7XG4gICAgICAgICAgICBmb3JtOiBbXSxcbiAgICAgICAgICAgIGZpZWxkczoge30sXG4gICAgICAgIH07XG4gICAgICAgIGlmIChyZXN1bHQubWVzc2FnZSkge1xuICAgICAgICAgICAgc3RhdHVzLmZvcm0ucHVzaChyZXN1bHQubWVzc2FnZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlc3VsdC5lcnJvcnMgJiYgT2JqZWN0LmtleXMocmVzdWx0LmVycm9ycykubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgc3RhdHVzLmZpZWxkcyA9IHsgLi4ucmVzdWx0LmVycm9ycyB9O1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuI3VpLnNob3dFcnJvcihzdGF0dXMpO1xuICAgICAgICB0aGlzLmVtaXQoXCJlcnJvclwiLCBzdGF0dXMpO1xuICAgIH1cblxuICAgIC8qKipcbiAgICAgKiBSZWRlZmluYWJsZSBnZXR0ZXJzXG4gICAgICoqL1xuICAgIGdldFRhcmdldEVsKCkge1xuICAgICAgICBjb25zdCB0YXJnZXRFbCA9IHRoaXMuZ2V0T3B0aW9ucyhcInRhcmdldFwiLCBERUZBVUxUX0NPTlRBSU5FUl9TRUxFQ1RPUik7XG4gICAgICAgIGlmICh0YXJnZXRFbCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KSB7XG4gICAgICAgICAgICByZXR1cm4gdGFyZ2V0RWw7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHRhcmdldEVsID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICByZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXRFbCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJBY3Rpb25VSSBwYXJlbnQgZWxlbWVudCBpcyBub3QgZGVmaW5lZFwiKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgbm90QWN0aW9uVUk7XG4iLCJpbXBvcnQgbm90Q29tbW9uIGZyb20gXCIuLi8uLi9jb21tb25cIjtcblxuaW1wb3J0IHsgRklFTERTLCBDT01QT05FTlRTLCBWQVJJQU5UUyB9IGZyb20gXCIuLi8uLi9MSUIuanNcIjtcblxuY2xhc3Mgbm90Rm9ybVV0aWxzIHtcbiAgICBzdGF0aWMgdmFsaWRhdG9yID0gbnVsbDtcblxuICAgIHN0YXRpYyBhZGRDb21wb25lbnQobmFtZSwgdmFsdWUpIHtcbiAgICAgICAgQ09NUE9ORU5UUy5hZGQobmFtZSwgdmFsdWUpO1xuICAgIH1cblxuICAgIHN0YXRpYyBhZGRWYXJpYW50cyhuYW1lLCB2YWx1ZSkge1xuICAgICAgICBWQVJJQU5UUy5hZGQobmFtZSwgdmFsdWUpO1xuICAgIH1cblxuICAgIHN0YXRpYyBhZGRGaWVsZChuYW1lLCBmaWVsZCkge1xuICAgICAgICBGSUVMRFMuYWRkKG5hbWUsIGZpZWxkKTtcbiAgICB9XG5cbiAgICBzdGF0aWMgYWN0aW9uRmllbGRzSW5pdChmaWVsZE5hbWUsIG9wdGlvbnMsIGRhdGEpIHtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoZmllbGROYW1lKSkge1xuICAgICAgICAgICAgZmllbGROYW1lLmZvckVhY2goKHN1YkZpZWxkTmFtZSkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuYWN0aW9uRmllbGRzSW5pdChzdWJGaWVsZE5hbWUsIG9wdGlvbnMsIGRhdGEpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoIW5vdENvbW1vbi5vYmpIYXMob3B0aW9ucywgXCJmaWVsZHNcIikpIHtcbiAgICAgICAgICAgICAgICBvcHRpb25zLmZpZWxkcyA9IHt9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFub3RDb21tb24ub2JqSGFzKG9wdGlvbnMuZmllbGRzLCBmaWVsZE5hbWUpKSB7XG4gICAgICAgICAgICAgICAgb3B0aW9ucy5maWVsZHNbZmllbGROYW1lXSA9IHt9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy9jb3B5aW5nIGluaXRpYWwgZGF0YVxuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgIHR5cGVvZiBkYXRhICE9PSBcInVuZGVmaW5lZFwiICYmXG4gICAgICAgICAgICAgICAgZGF0YSAhPT0gbnVsbCAmJlxuICAgICAgICAgICAgICAgIHR5cGVvZiBkYXRhW2ZpZWxkTmFtZV0gIT09IFwidW5kZWZpbmVkXCIgJiZcbiAgICAgICAgICAgICAgICBkYXRhW2ZpZWxkTmFtZV0gIT09IG51bGxcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIG9wdGlvbnMuZmllbGRzW2ZpZWxkTmFtZV0udmFsdWUgPSBkYXRhW2ZpZWxkTmFtZV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IG5vdEZvcm1VdGlscztcbiIsImltcG9ydCBub3RDb21tb24gZnJvbSBcIi4uLy4uL2NvbW1vblwiO1xuXG5jb25zdCBERUZBVUxUX0ZJRUxEID0ge1xuICAgIGxhYmVsOiBcIlwiLFxuICAgIHBsYWNlaG9sZGVyOiBcIlwiLFxuICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgdmlzaWJsZTogdHJ1ZSxcbiAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICB2YWxpZGF0ZWQ6IGZhbHNlLFxuICAgIHZhbGlkOiBmYWxzZSxcbiAgICBlcnJvcnM6IGZhbHNlLFxufTtcblxuLyoqXG4gKiBDcmVhdGVzIGZpZWxkIG1hbmlmZXN0XG4gKiBAcGFyYW0ge3N0cmluZ30gdHlwZSAgICAgIG5hbWUvdHlwZSBvZiB0aGUgZmllbGRcbiAqIEBwYXJhbSB7T2JqZWN0fSBtdXRhdGlvbiAgbXV0YXRpb24gdG8gbWFuaWZlc3QgZnJvbSBsaWJyYXJ5XG4gKiBAcGFyYW0ge09iamVjdH0gVkFSSUFOVFMgIHN0b3JlIHdoaWNoIGNvbnRhaW5zIG5hbWVkIGxpc3RzIG9mIGZpZWxkIHZhbHVlIHZhcmlhbnRzXG4gKiBAcGFyYW0ge09iamVjdH0gRklFTERTICAgIHN0b3JlIHdoaWNoIGNvbnRhaW5zIG5hbWVkIGxpc3RzIG9mIGZpZWxkIG1hbmlmZXN0c1xuICogQHJldHVybiB7T2JqZWN0fSAgICAgICAgICBmaWVsZCBtYW5pZmVzdFxuICoqL1xuZnVuY3Rpb24gZmllbGRJbml0KHR5cGUsIG11dGF0aW9uID0ge30sIFZBUklBTlRTLCBGSUVMRFMpIHtcbiAgICBsZXQgZmllbGQgPSB7IC4uLkRFRkFVTFRfRklFTEQgfTtcbiAgICAvL2dldHRpbmcgZmllbGQgY29yZSBtYW5pZmVzdFxuICAgIGlmIChGSUVMRFMuY29udGFpbnModHlwZSkpIHtcbiAgICAgICAgZmllbGQgPSB7XG4gICAgICAgICAgICAuLi5maWVsZCxcbiAgICAgICAgICAgIC4uLkZJRUxEUy5nZXQodHlwZSksXG4gICAgICAgIH07XG4gICAgfVxuICAgIC8vYWRkaW5nIG11dGF0aW9uc1xuICAgIGlmIChtdXRhdGlvbikge1xuICAgICAgICBmaWVsZCA9IHtcbiAgICAgICAgICAgIC4uLmZpZWxkLFxuICAgICAgICAgICAgLi4ubXV0YXRpb24sXG4gICAgICAgIH07XG4gICAgfVxuICAgIC8vYWRkaW5nIHZhcmlhbnRzIGxpc3QgdG8gZmllbGQgZnJvbSBWQVJJQU5UUyBzdG9yZVxuICAgIGlmIChcbiAgICAgICAgbm90Q29tbW9uLm9iakhhcyhmaWVsZCwgXCJ2YXJpYW50c1NvdXJjZVwiKSAmJlxuICAgICAgICBWQVJJQU5UUy5jb250YWlucyhmaWVsZC52YXJpYW50c1NvdXJjZSlcbiAgICApIHtcbiAgICAgICAgZmllbGQudmFyaWFudHMgPSBWQVJJQU5UUy5nZXQoZmllbGQudmFyaWFudHNTb3VyY2UpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICghZmllbGQudmFyaWFudHMgfHwgZmllbGQudmFyaWFudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBmaWVsZC52YXJpYW50cyA9IFtdO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmaWVsZDtcbn1cblxuLyoqXG4gKiBJbml0aWFsaXphdGlvbiBvZiBmb3JtIHN0cnVjdHVyZSBvYmplY3RcbiAqIEBwYXJhbSB7b2JqZWN0fSAgICAgICAgICAgICAgIGZvcm0gICAgICAgICAgZm9ybSBzdHJ1Y3R1cmUgb2JqZWN0XG4gKiBAcGFyYW0ge3N0cmluZ3xBcnJheTxzdHJpbmc+fSBmaWVsZE5hbWUgICAgIG5hbWUgb2YgdGhlIGZpZWxkIHR5cGUgaWYgc3RyaW5nLCBhcnJheSBvZiBzdHJpbmdzID0gc3ViZm9ybVxuICogQHBhcmFtIHtPYmplY3R9ICAgICAgICAgICAgICAgVkFSSUFOVFMgICAgICBzdG9yZSB3aGljaCBjb250YWlucyBuYW1lZCBsaXN0cyBvZiBmaWVsZCB2YWx1ZSB2YXJpYW50c1xuICogQHBhcmFtIHtPYmplY3R9ICAgICAgICAgICAgICAgRklFTERTICAgICAgICBzdG9yZSB3aGljaCBjb250YWlucyBuYW1lZCBsaXN0cyBvZiBmaWVsZCBtYW5pZmVzdHNcbiAqIEBwYXJhbSB7T2JqZWN0fSAgICAgICAgICAgICAgIGZvcm1GaWVsZHNPcHRpb25zICAgZm9ybSB3aWRlIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtPYmplY3R9ICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9ybSBzdHJ1Y3R1cmUgb2JqZWN0XG4gKiovXG5mdW5jdGlvbiBpbml0Rm9ybUJ5RmllbGQoXG4gICAgZm9ybSA9IHt9LFxuICAgIGZpZWxkTmFtZSA9IFtdLFxuICAgIFZBUklBTlRTLFxuICAgIEZJRUxEUyxcbiAgICBmb3JtRmllbGRzT3B0aW9ucyxcbiAgICBkYXRhXG4pIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShmaWVsZE5hbWUpKSB7XG4gICAgICAgIGZpZWxkTmFtZS5mb3JFYWNoKChzdWJGb3JtRmllbGROYW1lKSA9PlxuICAgICAgICAgICAgaW5pdEZvcm1CeUZpZWxkKFxuICAgICAgICAgICAgICAgIGZvcm0sXG4gICAgICAgICAgICAgICAgc3ViRm9ybUZpZWxkTmFtZSxcbiAgICAgICAgICAgICAgICBWQVJJQU5UUyxcbiAgICAgICAgICAgICAgICBGSUVMRFMsXG4gICAgICAgICAgICAgICAgZm9ybUZpZWxkc09wdGlvbnMsXG4gICAgICAgICAgICAgICAgZGF0YVxuICAgICAgICAgICAgKVxuICAgICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGxldCBvcHRzID0ge307XG4gICAgICAgIGlmIChcbiAgICAgICAgICAgIGZvcm1GaWVsZHNPcHRpb25zICYmXG4gICAgICAgICAgICBub3RDb21tb24ub2JqSGFzKGZvcm1GaWVsZHNPcHRpb25zLCBcIm11dGF0aW9uc1wiKSAmJlxuICAgICAgICAgICAgbm90Q29tbW9uLm9iakhhcyhmb3JtRmllbGRzT3B0aW9ucy5tdXRhdGlvbnMsIGZpZWxkTmFtZSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgICBvcHRzID0gZm9ybUZpZWxkc09wdGlvbnMubXV0YXRpb25zW2ZpZWxkTmFtZV07IC8vb3B0aW9uIG11dGF0aW9uIGZvciBmaWVsZFxuICAgICAgICB9XG4gICAgICAgIGlmIChkYXRhICYmIG5vdENvbW1vbi5vYmpIYXMoZGF0YSwgZmllbGROYW1lKSkge1xuICAgICAgICAgICAgb3B0cy52YWx1ZSA9IGRhdGFbZmllbGROYW1lXTtcbiAgICAgICAgfVxuICAgICAgICBmb3JtW2ZpZWxkTmFtZV0gPSBmaWVsZEluaXQoZmllbGROYW1lLCBvcHRzLCBWQVJJQU5UUywgRklFTERTKTtcbiAgICAgICAgLy9pZiBmb3JtIHJlYWRvbmx5LCBtYXJraW5nIGV2ZXJ5IGZpZWxkIGFzIHJlYWRvbmx5XG4gICAgICAgIGlmIChmb3JtRmllbGRzT3B0aW9ucyAmJiBmb3JtRmllbGRzT3B0aW9ucy5yZWFkb25seSkge1xuICAgICAgICAgICAgZm9ybVtmaWVsZE5hbWVdLnJlYWRvbmx5ID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZm9ybTtcbn1cblxuLyoqXG4gKiAgTWFya2luZyBmaWVsZCBhcyBpbnZhbGlkIGJ5IG93biB2YWxpZGF0b3JcbiAqIEBwYXJhbSB7T2JqZWN0fSAgICAgICAgICAgZm9ybSAgICAgICAgICBmb3JtIHN0cnVjdHVyZSBvYmplY3RcbiAqIEBwYXJhbSB7c3RyaW5nfSAgICAgICAgICAgZmllbGROYW1lICAgICBuYW1lIG9mIHRoZSBmaWVsZFxuICogQHBhcmFtIHthbnl9ICAgICAgICAgICAgICB2YWx1ZSAgICAgICAgIHZhbHVlIG9mIGZpZWxkXG4gKiBAcGFyYW0gIHtBcnJheTxzdHJpbmc+fSAgIGVycm9ycyAgICAgICAgbGlzdCBvZiBlcnJvcnNcbiAqIEByZXR1cm4ge09iamVjdH0gICAgICAgICAgICAgICAgICAgICAgICBmb3JtIHN0cnVjdHVyZSBvYmplY3RcbiAqKi9cbmZ1bmN0aW9uIHNldEZpZWxkSW52YWxpZChmb3JtLCBmaWVsZE5hbWUsIHZhbHVlLCBlcnJvcnMpIHtcbiAgICBmb3JtW2ZpZWxkTmFtZV0uZXJyb3JzID0gWy4uLmVycm9yc107XG4gICAgZm9ybVtmaWVsZE5hbWVdLnZhbGlkYXRlZCA9IHRydWU7XG4gICAgZm9ybVtmaWVsZE5hbWVdLnZhbGlkID0gZmFsc2U7XG4gICAgZm9ybVtmaWVsZE5hbWVdLnZhbHVlID0gdmFsdWU7XG4gICAgcmV0dXJuIGZvcm07XG59XG5cbi8qKlxuICogIE1hcmtpbmcgZmllbGQgYXMgdmFsaWQgYnkgb3duIHZhbGlkYXRvclxuICogQHBhcmFtIHtPYmplY3R9ICAgICAgICAgICBmb3JtICAgICAgICAgIGZvcm0gc3RydWN0dXJlIG9iamVjdFxuICogQHBhcmFtIHtzdHJpbmd9ICAgICAgICAgICBmaWVsZE5hbWUgICAgIG5hbWUgb2YgdGhlIGZpZWxkXG4gKiBAcGFyYW0ge2FueX0gICAgICAgICAgICAgIHZhbHVlICAgICAgICAgdmFsdWUgb2YgZmllbGRcbiAqIEByZXR1cm4ge09iamVjdH0gICAgICAgICAgICAgICAgICAgICAgICBmb3JtIHN0cnVjdHVyZSBvYmplY3RcbiAqKi9cbmZ1bmN0aW9uIHNldEZpZWxkVmFsaWQoZm9ybSwgZmllbGROYW1lLCB2YWx1ZSkge1xuICAgIGZvcm1bZmllbGROYW1lXS5lcnJvcnMgPSBmYWxzZTtcbiAgICBmb3JtW2ZpZWxkTmFtZV0udmFsaWRhdGVkID0gdHJ1ZTtcbiAgICBmb3JtW2ZpZWxkTmFtZV0udmFsaWQgPSB0cnVlO1xuICAgIGZvcm1bZmllbGROYW1lXS52YWx1ZSA9IHZhbHVlO1xuXG4gICAgZm9yIChsZXQgZm5hbWUgaW4gZm9ybSkge1xuICAgICAgICBpZiAoZm5hbWUgIT09IGZpZWxkTmFtZSkge1xuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgIEFycmF5LmlzQXJyYXkoZm9ybVtmbmFtZV0uZXJyb3JzKSAmJlxuICAgICAgICAgICAgICAgIGZvcm1bZm5hbWVdLmVycm9ycy5sZW5ndGggPT09IDBcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIGZvcm1bZm5hbWVdLmVycm9ycyA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGZvcm1bZm5hbWVdLmVycm9ycyAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZm9ybTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgZmllbGQgaGFzIGVycm9yc1xuICogQHBhcmFtIHtPYmplY3R9ICAgICAgICAgICBmb3JtICAgICAgICAgIGZvcm0gc3RydWN0dXJlIG9iamVjdFxuICogQHBhcmFtIHtzdHJpbmd9ICAgICAgICAgICBmaWVsZE5hbWUgICAgIG5hbWUgb2YgdGhlIGZpZWxkXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gICAgICAgICAgICAgICAgICAgICAgdHJ1ZSAtIHZhbGlkLCBmYWxzZSAtaW52YWxpZFxuICoqL1xuZnVuY3Rpb24gaXNGaWVsZFZhbGlkKGZvcm0sIGZpZWxkTmFtZSkge1xuICAgIHJldHVybiAhQXJyYXkuaXNBcnJheShmb3JtW2ZpZWxkTmFtZV0uZXJyb3JzKTtcbn1cblxuLyoqXG4gKiBGb3JtIGxldmVsIHZhbGlkYXRvciBlcnJvciBpbiB0aGlzIGZpZWxkXG4gKiBAcGFyYW0ge09iamVjdH0gICAgICAgICAgIGZvcm0gICAgICAgICAgZm9ybSBzdHJ1Y3R1cmUgb2JqZWN0XG4gKiBAcGFyYW0ge3N0cmluZ30gICAgICAgICAgIGZpZWxkTmFtZSAgICAgbmFtZSBvZiB0aGUgZmllbGRcbiAqIEBwYXJhbSAge0FycmF5PHN0cmluZz59ICAgZXJyb3JzICAgICAgICBsaXN0IG9mIGVycm9yc1xuICogQHJldHVybiB7T2JqZWN0fSAgICAgICAgICAgICAgICAgICAgICAgIGZvcm0gc3RydWN0dXJlIG9iamVjdFxuICoqL1xuZnVuY3Rpb24gc2V0Rm9ybUZpZWxkSW52YWxpZChmb3JtLCBmaWVsZE5hbWUsIGVycm9ycykge1xuICAgIGZvcm1bZmllbGROYW1lXS5mb3JtRXJyb3JzID0gWy4uLmVycm9yc107XG4gICAgZm9ybVtmaWVsZE5hbWVdLnZhbGlkYXRlZCA9IHRydWU7XG4gICAgZm9ybVtmaWVsZE5hbWVdLmlucHV0U3RhcnRlZCA9IHRydWU7XG4gICAgZm9ybVtmaWVsZE5hbWVdLnZhbGlkID0gZmFsc2U7XG4gICAgZm9ybVtmaWVsZE5hbWVdLmZvcm1MZXZlbEVycm9yID0gdHJ1ZTtcbiAgICByZXR1cm4gZm9ybTtcbn1cbi8qKlxuICogRm9ybSBsZXZlbCB2YWxpZGF0b3Igc3VjY2VzcyBpbiB0aGlzIGZpZWxkXG4gKiBAcGFyYW0ge09iamVjdH0gICAgICAgICAgIGZvcm0gICAgICAgICAgZm9ybSBzdHJ1Y3R1cmUgb2JqZWN0XG4gKiBAcGFyYW0ge3N0cmluZ30gICAgICAgICAgIGZpZWxkTmFtZSAgICAgbmFtZSBvZiB0aGUgZmllbGRcbiAqIEByZXR1cm4ge09iamVjdH0gICAgICAgICAgICAgICAgICAgICAgICBmb3JtIHN0cnVjdHVyZSBvYmplY3RcbiAqKi9cbmZ1bmN0aW9uIHNldEZvcm1GaWVsZFZhbGlkKGZvcm0sIGZpZWxkTmFtZSkge1xuICAgIGZvcm1bZmllbGROYW1lXS5mb3JtRXJyb3JzID0gZmFsc2U7XG4gICAgZm9ybVtmaWVsZE5hbWVdLnZhbGlkYXRlZCA9IHRydWU7XG4gICAgZm9ybVtmaWVsZE5hbWVdLnZhbGlkID0gdHJ1ZTtcbiAgICBmb3JtW2ZpZWxkTmFtZV0uZm9ybUxldmVsRXJyb3IgPSBmYWxzZTtcbiAgICByZXR1cm4gZm9ybTtcbn1cblxuLyoqXG4gKiBVcGRhdGVzIGZpZWxkcyBhbmQgZm9ybSBlcnJvciBsYWJlbHNcbiAqIEBwYXJhbSB7T2JqZWN0fSAgICAgICAgICAgZm9ybSAgICAgICAgICAgICAgICAgIGZvcm0gc3RydWN0dXJlIG9iamVjdFxuICogQHBhcmFtIHtPYmplY3R9ICAgICAgICAgICB2YWxpZGF0aW9uU3RhdHVzICAgICAgcmVzdWx0cyBvZiB2YWxpZGF0aW9uXG4gKiovXG5mdW5jdGlvbiB1cGRhdGVGb3JtVmFsaWRhdGlvblN0YXR1cyhcbiAgICB7XG4gICAgICAgIGZvcm0sXG4gICAgICAgIGZvcm1FcnJvcnMsXG4gICAgICAgIHZhbGlkYXRpb25TdGF0dXMsXG4gICAgfSAvKiBGb3JtVmFsaWRhdGlvblNlc3Npb24uZ2V0Q29tcGxldGVSZXN1bHQoKSAqL1xuKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkodmFsaWRhdGlvblN0YXR1cy5mb3JtKSAmJiB2YWxpZGF0aW9uU3RhdHVzLmZvcm0ubGVuZ3RoKSB7XG4gICAgICAgIGZvcm1FcnJvcnMuc3BsaWNlKDAsIGZvcm1FcnJvcnMubGVuZ3RoLCAuLi52YWxpZGF0aW9uU3RhdHVzLmZvcm0pO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGZvcm1FcnJvcnMuc3BsaWNlKDAsIGZvcm1FcnJvcnMubGVuZ3RoKTtcbiAgICB9XG4gICAgaWYgKHZhbGlkYXRpb25TdGF0dXMuZmllbGRzKSB7XG4gICAgICAgIGZvciAobGV0IGZpZWxkTmFtZSBpbiB2YWxpZGF0aW9uU3RhdHVzLmZpZWxkcykge1xuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgIEFycmF5LmlzQXJyYXkodmFsaWRhdGlvblN0YXR1cy5maWVsZHNbZmllbGROYW1lXSkgJiZcbiAgICAgICAgICAgICAgICB2YWxpZGF0aW9uU3RhdHVzLmZpZWxkc1tmaWVsZE5hbWVdLmxlbmd0aFxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgc2V0Rm9ybUZpZWxkSW52YWxpZChcbiAgICAgICAgICAgICAgICAgICAgZm9ybSxcbiAgICAgICAgICAgICAgICAgICAgZmllbGROYW1lLFxuICAgICAgICAgICAgICAgICAgICB2YWxpZGF0aW9uU3RhdHVzLmZpZWxkc1tmaWVsZE5hbWVdXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgc2V0Rm9ybUZpZWxkVmFsaWQoZm9ybSwgZmllbGROYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cblxuZnVuY3Rpb24gc2V0RmllbGRzVmlzaWJpbGl0eShmb3JtLCBmaWVsZHNMaXN0LCB2YWwpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShmaWVsZHNMaXN0KSkge1xuICAgICAgICBPYmplY3Qua2V5cyhmb3JtKS5mb3JFYWNoKChmaWVsZE5hbWUpID0+IHtcbiAgICAgICAgICAgIGZvcm1bZmllbGROYW1lXS52aXNpYmxlID0gZmllbGRzTGlzdC5pbmNsdWRlcyhmaWVsZE5hbWUpXG4gICAgICAgICAgICAgICAgPyB2YWxcbiAgICAgICAgICAgICAgICA6ICF2YWw7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBzZXRGaWVsZFZhbHVlKGZvcm0sIGZpZWxkTmFtZSwgdmFsdWUpIHtcbiAgICBpZiAobm90Q29tbW9uLm9iakhhcyhmb3JtLCBmaWVsZE5hbWUpKSB7XG4gICAgICAgIGZvcm1bZmllbGROYW1lXS52YWx1ZSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBmaWVsZElzVmlzaWJsZUFuZEZpbGxlZChmb3JtLCBmaWVsZE5hbWUpIHtcbiAgICByZXR1cm4gKFxuICAgICAgICBub3RDb21tb24ub2JqSGFzKGZvcm0sIGZpZWxkTmFtZSkgJiZcbiAgICAgICAgZm9ybVtmaWVsZE5hbWVdLmVuYWJsZWQgJiZcbiAgICAgICAgZm9ybVtmaWVsZE5hbWVdLnZpc2libGUgJiZcbiAgICAgICAgdHlwZW9mIGZvcm1bZmllbGROYW1lXS52YWx1ZSAhPT0gXCJ1bmRlZmluZWRcIlxuICAgICk7XG59XG5cbmZ1bmN0aW9uIGNvbGxlY3REYXRhKGZpZWxkcywgZm9ybSkge1xuICAgIGxldCByZXN1bHQgPSB7fTtcbiAgICBmaWVsZHMuZmxhdCgpLmZvckVhY2goKGZpZWxkTmFtZSkgPT4ge1xuICAgICAgICBpZiAoZmllbGRJc1Zpc2libGVBbmRGaWxsZWQoZm9ybSwgZmllbGROYW1lKSkge1xuICAgICAgICAgICAgcmVzdWx0W2ZpZWxkTmFtZV0gPSBmb3JtW2ZpZWxkTmFtZV0udmFsdWU7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCB7XG4gICAgZmllbGRJbml0LFxuICAgIGluaXRGb3JtQnlGaWVsZCxcbiAgICBzZXRGaWVsZEludmFsaWQsXG4gICAgc2V0RmllbGRWYWxpZCxcbiAgICBpc0ZpZWxkVmFsaWQsXG4gICAgc2V0Rm9ybUZpZWxkSW52YWxpZCxcbiAgICBzZXRGb3JtRmllbGRWYWxpZCxcbiAgICB1cGRhdGVGb3JtVmFsaWRhdGlvblN0YXR1cyxcbiAgICBmaWVsZElzVmlzaWJsZUFuZEZpbGxlZCxcbiAgICBzZXRGaWVsZHNWaXNpYmlsaXR5LFxuICAgIHNldEZpZWxkVmFsdWUsXG4gICAgY29sbGVjdERhdGEsXG59O1xuIiwiY29uc3QgZW1wdHlGaWVsZHNSZXN1bHRzID0gKGRhdGEpID0+IHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXMoZGF0YSkucmVkdWNlKChhY2MsIGN1cnIpID0+IHtcbiAgICAgICAgYWNjW2N1cnJdID0gW107XG4gICAgICAgIHJldHVybiBhY2M7XG4gICAgfSwge30pO1xufTtcblxuY29uc3QgRklFTERTID0gW1wiZmllbGRzXCIsIFwiZm9ybVwiXTtcblxubW9kdWxlLmV4cG9ydHMgPSBjbGFzcyBWYWxpZGF0aW9uUmVzdWx0IHtcbiAgICAjY2xlYW4gPSB0cnVlO1xuICAgICNyZXN1bHQ7XG5cbiAgICBjb25zdHJ1Y3RvcihyZXN1bHQpIHtcbiAgICAgICAgdGhpcy4jcmVzdWx0ID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShyZXN1bHQpKTtcbiAgICAgICAgT2JqZWN0LmtleXModGhpcy4jcmVzdWx0KS5mb3JFYWNoKChmaWVsZE5hbWUpID0+IHtcbiAgICAgICAgICAgIGlmICghRklFTERTLmluY2x1ZGVzKGZpZWxkTmFtZSkpIHtcbiAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy4jcmVzdWx0W2ZpZWxkTmFtZV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLiNjbGVhbiA9IHRoaXMuI3Jlc3VsdC5mb3JtLmVycm9ycy5sZW5ndGggPT09IDA7XG4gICAgICAgIGNvbnN0IGxpc3QgPSB0aGlzLiNnZXRGaWVsZHNMaXN0KCk7XG4gICAgICAgIGZvciAobGV0IGZpZWxkTmFtZSBvZiBsaXN0KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5pc0ZpZWxkRGlydHkoZmllbGROYW1lKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuI2NsZWFuID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBkZXN0cm95KCkge1xuICAgICAgICB0aGlzLiNyZXN1bHQgPSB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgZ2V0IGNsZWFuKCkge1xuICAgICAgICByZXR1cm4gdGhpcy4jY2xlYW47XG4gICAgfVxuXG4gICAgc3RhdGljIGdldERlZmF1bHRSZXN1bHQoZGF0YSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZmllbGRzOiBlbXB0eUZpZWxkc1Jlc3VsdHMoZGF0YSksXG4gICAgICAgICAgICBmb3JtOiB7XG4gICAgICAgICAgICAgICAgZmllbGRzOiBlbXB0eUZpZWxkc1Jlc3VsdHMoZGF0YSksXG4gICAgICAgICAgICAgICAgZXJyb3JzOiBbXSxcbiAgICAgICAgICAgICAgICBleGNlcHRpb25zOiBbXSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZ2V0UmVwb3J0KCkge1xuICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeSh0aGlzLiNnZXRDb21wbGV0ZVJlc3VsdCgpKSk7XG4gICAgfVxuXG4gICAgZ2V0RGV0YWlsZWRSZXBvcnQoKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy4jcmVzdWx0ID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeSh0aGlzLiNyZXN1bHQpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpc0ZpZWxkRGlydHkoZmllbGROYW1lKSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICAgIEFycmF5LmlzQXJyYXkodGhpcy4jcmVzdWx0LmZpZWxkc1tmaWVsZE5hbWVdKSAmJlxuICAgICAgICAgICAgdGhpcy4jcmVzdWx0LmZpZWxkc1tmaWVsZE5hbWVdLmxlbmd0aFxuICAgICAgICApIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChcbiAgICAgICAgICAgIEFycmF5LmlzQXJyYXkodGhpcy4jcmVzdWx0LmZvcm0uZmllbGRzW2ZpZWxkTmFtZV0pICYmXG4gICAgICAgICAgICB0aGlzLiNyZXN1bHQuZm9ybS5maWVsZHNbZmllbGROYW1lXS5sZW5ndGhcbiAgICAgICAgKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgZ2V0Q29tcGxldGVSZXN1bHRGb3JGaWVsZChmaWVsZE5hbWUpIHtcbiAgICAgICAgY29uc3QgZmllbGRSZXN1bHQgPSBbXTtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodGhpcy4jcmVzdWx0LmZpZWxkc1tmaWVsZE5hbWVdKSkge1xuICAgICAgICAgICAgZmllbGRSZXN1bHQucHVzaCguLi50aGlzLiNyZXN1bHQuZmllbGRzW2ZpZWxkTmFtZV0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHRoaXMuI3Jlc3VsdC5mb3JtLmZpZWxkc1tmaWVsZE5hbWVdKSkge1xuICAgICAgICAgICAgZmllbGRSZXN1bHQucHVzaCguLi50aGlzLiNyZXN1bHQuZm9ybS5maWVsZHNbZmllbGROYW1lXSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZpZWxkUmVzdWx0O1xuICAgIH1cblxuICAgICNnZXRDb21wbGV0ZVJlc3VsdCgpIHtcbiAgICAgICAgY29uc3QgcmVzdWx0Q29tcGxldGUgPSB7XG4gICAgICAgICAgICBjbGVhbjogdGhpcy4jY2xlYW4sXG4gICAgICAgICAgICBmaWVsZHM6IHt9LFxuICAgICAgICAgICAgZm9ybTogW10sXG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IGxpc3QgPSB0aGlzLiNnZXRGaWVsZHNMaXN0KCk7XG4gICAgICAgIGZvciAobGV0IGZpZWxkTmFtZSBvZiBsaXN0KSB7XG4gICAgICAgICAgICBjb25zdCBlcnJvcnMgPSB0aGlzLmdldENvbXBsZXRlUmVzdWx0Rm9yRmllbGQoZmllbGROYW1lKTtcbiAgICAgICAgICAgIGlmIChlcnJvcnMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0Q29tcGxldGUuZmllbGRzW2ZpZWxkTmFtZV0gPSBlcnJvcnM7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmVzdWx0Q29tcGxldGUuZm9ybSA9IFsuLi50aGlzLiNyZXN1bHQuZm9ybS5lcnJvcnNdO1xuICAgICAgICBpZiAocmVzdWx0Q29tcGxldGUuZm9ybS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGRlbGV0ZSByZXN1bHRDb21wbGV0ZS5mb3JtO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHRDb21wbGV0ZTtcbiAgICB9XG5cbiAgICAjZ2V0RmllbGRzTGlzdCgpIHtcbiAgICAgICAgY29uc3QgZmllbGRzID0gT2JqZWN0LmtleXModGhpcy4jcmVzdWx0LmZpZWxkcyk7XG4gICAgICAgIGNvbnN0IGZpZWxkc0luRm9ybSA9IE9iamVjdC5rZXlzKHRoaXMuI3Jlc3VsdC5mb3JtLmZpZWxkcyk7XG4gICAgICAgIHJldHVybiBbLi4ubmV3IFNldChbLi4uZmllbGRzSW5Gb3JtLCAuLi5maWVsZHNdKV07XG4gICAgfVxufTtcbiIsIi8qKlxuKlx0VGVtcGxhdGUgb2YgZXJyb3IuanNcbipcdEZvciBidWlsZGluZyBmb3Igc3BlY2lmaWMgZW52aXJvbm1lbnQuXG4qXHROb2RlLmpzIG9yIEJyb3dzZXJcbipcdEBwYXJhbSB7c3RyaW5nfVx0ZW52XHRub2RlfGJyb3dzZXIgaW4gd2ljaCBlbnYgaXQgd2lsbCBiZSBydW5uaW5nXG4qXHRAcGFyYW0ge3N0cmluZ31cdHVybFx0VVJMIG9mIHJlcG9ydCBjb2xsZWN0b3JcbipcdEBwYXJhbSB7c3RyaW5nfVx0a2V5XHRrZXkgdG8gaW5kZXRpZmljYXRlIHJlcG9ydGVyXG4qL1xuLyoqXG4qIEVycm9yIHJlcG9ydGluZyB3aXRoIGZlYXR1cmVzLCBzYXZpbmcgYnJvd3NlciBpbmZvLCB1cmkgYW5kIHNvIG9uLlxuKiBAbW9kdWxlIG5vdC1lcnJvci9lcnJvclxuKi9cbmNsYXNzIG5vdEVycm9yIGV4dGVuZHMgRXJyb3Ige1xuXHRjb25zdHJ1Y3RvcihtZXNzYWdlLCBvcHRpb25zID0ge30sIGVycm9yID0gbnVsbCl7XG5cdFx0c3VwZXIobWVzc2FnZSk7XG5cdFx0dGhpcy5vcHRpb25zID0gb3B0aW9ucztcblx0XHR0aGlzLmFkb3B0KGVycm9yKTtcblx0XHR0aGlzLmZpbGwoKTtcblx0XHR0aGlzLmdldFRpbWUoKTtcblx0XHRyZXR1cm4gdGhpcztcblx0fVxuXG5cdC8qKlxuXHQqXHRBZG9wdGluZyBuYXRpdmUgZXJyb3Igb2JqZWN0XG5cdCpcdEBwYXJhbSB7RXJyb3J9XHRlcnJvciBcdEVycm9yIG9iamVjdFxuXHQqXHRAcmV0dXJuIHtub3RFcnJvcn1cdFx0Y2hhaW5hYmxlXG5cdCovXG5cdGFkb3B0KGVycm9yKXtcblx0XHRpZihlcnJvciBpbnN0YW5jZW9mIEVycm9yKXtcblx0XHRcdHRoaXMucGFyZW50ID0gZXJyb3I7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cblx0Z2V0U3RhY2soKXtcblx0XHRpZih0aGlzLnBhcmVudCl7XG5cdFx0XHRyZXR1cm4gdGhpcy5wYXJlbnQuc3RhY2s7XG5cdFx0fWVsc2V7XG5cdFx0XHRyZXR1cm4gdGhpcy5zdGFjaztcblx0XHR9XG5cdH1cblxuXHRnZXREZXRhaWxzKCl7XG5cdFx0bGV0IHNyYyA9IHRoaXM7XG5cdFx0aWYodGhpcy5wYXJlbnQpe1xuXHRcdFx0c3JjID0gdGhpcy5wYXJlbnQ7XG5cdFx0fVxuXHRcdHJldHVybiB7XG5cdFx0XHRjb2x1bW5OdW1iZXI6ICAgIFx0c3JjLmNvbHVtbk51bWJlcixcblx0XHRcdGZpbGVOYW1lOiAgICAgICAgXHRzcmMuZmlsZU5hbWUsXG5cdFx0XHRsaW5lTnVtYmVyOiAgICAgIFx0c3JjLmxpbmVOdW1iZXIsXG5cdFx0XHRuYW1lOiAgICAgICAgICAgIFx0c3JjLm5hbWUsXG5cdFx0XHRtZXNzYWdlOiAgICAgICAgXHRzcmMubWVzc2FnZSxcblx0XHRcdHN0YWNrOiAgICAgICAgICBcdHNyYy5zdGFja1xuXHRcdH07XG5cdH1cblxuXHQvKipcblx0Klx0VXBkYXRpbmcgdGhpcy5lbnYuZGF0ZSBwcm9wZXJ0eVxuXHQqXHRAcmV0dXJuICB7b2JqZWN0fVx0e3RpbWVzdGFtcCwgb2Zmc2V0fVxuXHQqL1xuXHRnZXRUaW1lKCl7XG5cdFx0bGV0IGRhdGUgPSBuZXcgRGF0ZSgpO1xuXHRcdHRoaXMuZW52LmRhdGUgPSB7XG5cdFx0XHR0aW1lc3RhbXAgOiBkYXRlLmdldFRpbWUoKSxcblx0XHRcdG9mZnNldDogZGF0ZS5nZXRUaW1lem9uZU9mZnNldCgpXG5cdFx0fTtcblx0XHRyZXR1cm4gdGhpcy5lbnYuZGF0ZTtcblx0fVxuXG5cblx0LyoqXG5cdCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuXHQqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcblx0KioqXHROb2RlLmpzIFNlY3Rpb25cblx0KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG5cdCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuXHQqKi9cblxuXHQvKipcblx0Klx0RmlsdGVyaW5nIG91dCBrZXkgYnkgYHdoaXRlYCBsaXN0XG5cdCpcdEBwYXJhbSB7b2JqZWN0fSBvYmplY3QgaGFzaCB0byBiZSBjb3BpZWQgYWNjb3JkaW5nIGZpbHRlciBgd2hpdGVgIGxpc3Rcblx0Klx0QHBhcmFtIHthcnJheX0gZmlsdGVyIGFycmF5IG9mIHN0aW5nLCB3aGljaCByZXByZXNlbnRzIGtleXMgd2Ugd2FudCB0byBiZVxuXHQqXHRcdFx0XHRcdFx0Y29waWVkIGluIHJlc3VsdGluZyBvYmplY3QgZnJvbSBzb3VyY2Vcblx0Klx0QHJldHVybiB7b2JqZWN0fVx0XHR3aGl0ZSBsaXN0ZWQgaGFzaFxuXHQqL1xuXHRmaWx0ZXJFbnYob2JqZWN0LCBmaWx0ZXIpe1xuXHRcdGxldCByZXN1bHQgPSB7fTtcblx0XHRmb3IobGV0IHQgb2YgZmlsdGVyKXtcblx0XHRcdGlmKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHQpKXtcblx0XHRcdFx0cmVzdWx0W3RdID0gb2JqZWN0W3RdO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gcmVzdWx0O1xuXHR9XG5cblx0LyoqXG5cdCpcdENvbGxlY3RpbmcgaW5mb3JtYXRpb24gc3BlY2lmaWMgZm9yIE5vZGUuanMgVjhcblx0Klx0QHJldHVybiB7bm90RXJyb3J9XHRcdGNoYWluYWJsZVxuXHQqL1xuXHRmaWxsKCl7XG5cdFx0LyoqXG5cdFx0Klx0WW91IHdhbnQgc29tZSBmaWVsZHMgZnJvbSBlbnYgYnV0IG5vdCBhbGwsIGNhdXNlIHRoZXJlIGFyZSBwYXNzd29yZHNcblx0XHQqXHRmcm9tIGRiLCBhcGkga2V5cyBhbmQgZXRjXG5cdFx0Ki9cblx0XHR0aGlzLmVudiA9IHtcblx0XHRcdGJyb3dzZXI6IFx0ZmFsc2UsXG5cdFx0XHRub2RlOiBcdFx0dHJ1ZSxcblx0XHRcdHZlcnNpb25zOiBPYmplY3QuYXNzaWduKHt9LCBwcm9jZXNzLnZlcnNpb25zKSxcblx0XHRcdHZhcnM6IFx0XHR0aGlzLmZpbHRlckVudihwcm9jZXNzLmVudiwgdGhpcy5vcHRpb25zLndoaXRlbGlzdCB8fCBbJ05PREVfRU5WJ10pXG5cdFx0fTtcblx0XHRyZXR1cm4gdGhpcztcblx0fVxuXG5cbn1cblxuXG5tb2R1bGUuZXhwb3J0cyA9IG5vdEVycm9yO1xuXG4iLCJcbmNvbnN0IG5vdEVycm9yID0gcmVxdWlyZSgnLi9lcnJvci5ub2RlLmNqcycpO1xuXG5cbi8vcmVwb3J0YWJsZVxuY2xhc3Mgbm90VmFsaWRhdGlvbkVycm9yIGV4dGVuZHMgbm90RXJyb3J7XG4gIGNvbnN0cnVjdG9yKG1lc3NhZ2UsIGZpZWxkcyA9IHt9LCBlcnIgPSBudWxsLCBwYXJhbXMgPSB7fSl7XG4gICAgc3VwZXIobWVzc2FnZSwge2ZpZWxkcywgcGFyYW1zfSwgZXJyKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAqIFNldHMgaGFzaCBvZiBmaWVsZHMgZXJyb3JzIG1lc3NhZ2VzIGZvciB1c2FnZSBpbiBmb3Jtc1xuICAqXHRAcmV0dXJuIHtPYmplY3R9XHRoYXNoIG9mIGZpZWxkLT5lcnJvcnMgW2tleTpzdHJpbmddOiBBcnJheTxzdHJpbmc+XG4gICoqL1xuICBzZXRGaWVsZHNFcnJvcnMobWVzc2FnZXMpe1xuICAgIHRoaXMub3B0aW9ucy5maWVsZHMgPSBtZXNzYWdlcztcbiAgfVxuXG4gIC8qKlxuICAqIFJldHVybnMgaGFzaCBvZiBlcnJvcnNcbiAgKlx0QHJldHVybiB7T2JqZWN0fVx0aGFzaCBvZiBmaWVsZC0+ZXJyb3JzIFtrZXk6c3RyaW5nXTogQXJyYXk8c3RyaW5nPlxuICAqKi9cbiAgZ2V0RmllbGRzRXJyb3JzKCl7XG4gICAgcmV0dXJuIHRoaXMub3B0aW9ucy5maWVsZHM7XG4gIH1cblxufVxuXG5cbm1vZHVsZS5leHBvcnRzID0gbm90VmFsaWRhdGlvbkVycm9yO1xuXG4iLCIvKipcbiAqIFRlc3QgYXJndW1lbnQgdHlwZSB0byBiZSAnZnVuY3Rpb24nXG4gKiBAcGFyYW0ge2FueX0gIGZ1bmMgICAgcG9zc2libGUgZnVuY3Rpb25cbiAqIEByZXR1cm4ge2Jvb2xlYW59ICAgICBpZiB0aGlzIGlzIGEgZnVuY3Rpb25cbiAqKi9cbmNvbnN0IGlzRnVuYyA9IChmdW5jKSA9PiB7XG4gICAgcmV0dXJuIHR5cGVvZiBmdW5jID09PSBcImZ1bmN0aW9uXCI7XG59O1xuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiBhcmd1bWVudCBpcyBBc3luYyBmdW5jdGlvblxuICogQHBhcmFtIHtmdW5jdGlvbn0gZnVuYyAgdG8gdGVzdFxuICogQHJldHVybiB7Ym9vbGVhbn0gICAgICAgaWYgdGhpcyBmdW5jdGlvbiBpcyBjb25zdHJ1Y3RlZCBhcyBBc3luY0Z1bmN0aW9uXG4gKiovXG5jb25zdCBpc0FzeW5jID0gKGZ1bmMpID0+IHtcbiAgICByZXR1cm4gZnVuYy5jb25zdHJ1Y3Rvci5uYW1lID09PSBcIkFzeW5jRnVuY3Rpb25cIjtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gYXN5bmMgKHByb2MsIHBhcmFtcykgPT4ge1xuICAgIGlmIChpc0Z1bmMocHJvYykpIHtcbiAgICAgICAgaWYgKGlzQXN5bmMocHJvYykpIHtcbiAgICAgICAgICAgIHJldHVybiBhd2FpdCBwcm9jKC4uLnBhcmFtcyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gcHJvYyguLi5wYXJhbXMpO1xuICAgICAgICB9XG4gICAgfVxufTtcbiIsImNvbnN0IFZhbGlkYXRpb25SZXN1bHQgPSByZXF1aXJlKFwiLi9yZXN1bHRcIik7XG5jb25zdCBub3RWYWlsZGF0aW9uRXJyb3IgPSByZXF1aXJlKFwibm90LWVycm9yL3NyYy92YWxpZGF0aW9uLmVycm9yLm5vZGUuY2pzXCIpO1xuY29uc3QgZXhlY3V0ZU9iamVjdEZ1bmN0aW9uID0gcmVxdWlyZShcIi4vY29tbW9uLmpzXCIpO1xuXG5jb25zdCBWYWxpZGF0aW9uU2Vzc2lvbiA9IGFzeW5jICh2YWxpZGF0b3JzLCBkYXRhKSA9PiB7XG4gICAgY29uc3QgcmVzdWx0ID0gVmFsaWRhdGlvblJlc3VsdC5nZXREZWZhdWx0UmVzdWx0KGRhdGEpO1xuICAgIGF3YWl0IHZhbGlkYXRlRmllbGRzKHsgdmFsaWRhdG9ycywgZGF0YSwgcmVzdWx0IH0pO1xuICAgIGF3YWl0IHZhbGlkYXRlRm9ybSh7IHZhbGlkYXRvcnMsIGRhdGEsIHJlc3VsdCB9KTtcbiAgICByZXR1cm4gbmV3IFZhbGlkYXRpb25SZXN1bHQocmVzdWx0KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gVmFsaWRhdGlvblNlc3Npb247XG5cbmNvbnN0IHZhbGlkYXRlRmllbGRzID0gYXN5bmMgKHsgdmFsaWRhdG9ycywgZGF0YSwgcmVzdWx0IH0pID0+IHtcbiAgICBmb3IgKGxldCB0IGluIGRhdGEpIHtcbiAgICAgICAgYXdhaXQgdmFsaWRhdGVGaWVsZCh0LCBkYXRhW3RdLCB2YWxpZGF0b3JzLCByZXN1bHQpO1xuICAgIH1cbn07XG5cbmNvbnN0IHZhbGlkYXRlRmllbGQgPSBhc3luYyAoZmllbGROYW1lLCB2YWx1ZSwgdmFsaWRhdG9ycywgcmVzdWx0KSA9PiB7XG4gICAgY29uc3QgZmllbGRWYWxpZGF0b3JzID0gZ2V0RmllbGRWYWxpZGF0b3JzKGZpZWxkTmFtZSwgdmFsaWRhdG9ycyk7XG4gICAgcmV0dXJuIGF3YWl0IHJ1bkZpZWxkVmFsaWRhdG9ycyhmaWVsZE5hbWUsIHZhbHVlLCBmaWVsZFZhbGlkYXRvcnMsIHJlc3VsdCk7XG59O1xuXG5jb25zdCBnZXRGaWVsZFZhbGlkYXRvcnMgPSAobmFtZSwgdmFsaWRhdG9ycykgPT4ge1xuICAgIHJldHVybiB2YWxpZGF0b3JzICYmIHZhbGlkYXRvcnMuZmllbGRzICYmIHZhbGlkYXRvcnMuZmllbGRzW25hbWVdXG4gICAgICAgID8gdmFsaWRhdG9ycy5maWVsZHNbbmFtZV1cbiAgICAgICAgOiBbXTtcbn07XG5cbmNvbnN0IHJ1bkZpZWxkVmFsaWRhdG9ycyA9IGFzeW5jIChmaWVsZE5hbWUsIHZhbHVlLCB2YWxpZGF0b3JzLCByZXN1bHQpID0+IHtcbiAgICBmb3IgKGxldCB2YWxpZGF0b3JSdWxlIG9mIHZhbGlkYXRvcnMpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHZhbGlkID0gYXdhaXQgZXhlY3V0ZU9iamVjdEZ1bmN0aW9uKFxuICAgICAgICAgICAgICAgIHZhbGlkYXRvclJ1bGVbXCJ2YWxpZGF0b3JcIl0sXG4gICAgICAgICAgICAgICAgW3ZhbHVlXVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGlmICghdmFsaWQpIHtcbiAgICAgICAgICAgICAgICBzZXRGaWVsZEVycm9yKGZpZWxkTmFtZSwgdmFsaWRhdG9yUnVsZS5tZXNzYWdlLCByZXN1bHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBpZiAoZSBpbnN0YW5jZW9mIG5vdFZhaWxkYXRpb25FcnJvciB8fCAhdmFsaWRhdG9yUnVsZS5tZXNzYWdlKSB7XG4gICAgICAgICAgICAgICAgc2V0RmllbGRFcnJvcihmaWVsZE5hbWUsIGUubWVzc2FnZSwgcmVzdWx0KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgc2V0RmllbGRFcnJvcihmaWVsZE5hbWUsIHZhbGlkYXRvclJ1bGUubWVzc2FnZSwgcmVzdWx0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn07XG5cbmNvbnN0IHNldEZpZWxkRXJyb3IgPSAoZmllbGROYW1lLCBlcnJvck1lc3NhZ2UsIHJlc3VsdCkgPT4ge1xuICAgIGlmICghcmVzdWx0LmZpZWxkc1tmaWVsZE5hbWVdLmluY2x1ZGVzKGVycm9yTWVzc2FnZSkpIHtcbiAgICAgICAgcmVzdWx0LmZpZWxkc1tmaWVsZE5hbWVdLnB1c2goZXJyb3JNZXNzYWdlKTtcbiAgICB9XG59O1xuXG5jb25zdCB2YWxpZGF0ZUZvcm0gPSBhc3luYyAoeyB2YWxpZGF0b3JzLCBkYXRhLCByZXN1bHQgfSkgPT4ge1xuICAgIGNvbnN0IGZvcm1WYWxpZGF0b3JzID0gZ2V0Rm9ybVZhbGlkYXRvcnModmFsaWRhdG9ycyk7XG4gICAgYXdhaXQgcnVuRm9ybVZhbGlkYXRvcnMoZGF0YSwgZm9ybVZhbGlkYXRvcnMsIHJlc3VsdCk7XG59O1xuXG5jb25zdCBnZXRGb3JtVmFsaWRhdG9ycyA9ICh2YWxpZGF0b3JzKSA9PiB7XG4gICAgcmV0dXJuIHZhbGlkYXRvcnMgJiYgdmFsaWRhdG9ycy5mb3JtID8gdmFsaWRhdG9ycy5mb3JtIDogW107XG59O1xuXG5jb25zdCBydW5Gb3JtVmFsaWRhdG9ycyA9IGFzeW5jIChkYXRhLCBmb3JtVmFsaWRhdG9ycywgcmVzdWx0KSA9PiB7XG4gICAgZm9yIChsZXQgdmFsaWRhdG9yIG9mIGZvcm1WYWxpZGF0b3JzKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBhd2FpdCB2YWxpZGF0b3IoZGF0YSk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGlmIChlICYmIHR5cGVvZiBlLmdldEZpZWxkc0Vycm9ycyA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZm9ybUVycm9ycyA9IGUuZ2V0RmllbGRzRXJyb3JzKCk7XG4gICAgICAgICAgICAgICAgQXJyYXkuaXNBcnJheShmb3JtRXJyb3JzLmZvcm0pICYmXG4gICAgICAgICAgICAgICAgICAgIGFkZEZvcm1FcnJvcnMoZm9ybUVycm9ycy5mb3JtLCByZXN1bHQpO1xuICAgICAgICAgICAgICAgIGZvcm1FcnJvcnMuZmllbGRzICYmXG4gICAgICAgICAgICAgICAgICAgIGFkZEZvcm1GaWVsZHNFcnJvcnMoZm9ybUVycm9ycy5maWVsZHMsIHJlc3VsdCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRocm93IGU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59O1xuXG5jb25zdCBhZGRGb3JtRXJyb3JzID0gKGVycm9ycywgcmVzdWx0KSA9PiB7XG4gICAgZXJyb3JzLmZvckVhY2goKGVycm9yKSA9PiB7XG4gICAgICAgIGFkZEZvcm1FcnJvcihlcnJvciwgcmVzdWx0KTtcbiAgICB9KTtcbn07XG5cbmNvbnN0IGFkZEZvcm1FcnJvciA9IChlcnJvck1lc3NhZ2UsIHJlc3VsdCkgPT4ge1xuICAgIGlmICghcmVzdWx0LmZvcm0uZXJyb3JzLmluY2x1ZGVzKGVycm9yTWVzc2FnZSkpIHtcbiAgICAgICAgcmVzdWx0LmZvcm0uZXJyb3JzLnB1c2goZXJyb3JNZXNzYWdlKTtcbiAgICB9XG59O1xuXG5jb25zdCBhZGRGb3JtRmllbGRzRXJyb3JzID0gKGZpZWxkc0Vycm9ycywgcmVzdWx0KSA9PiB7XG4gICAgZm9yIChsZXQgZmllbGROYW1lIGluIGZpZWxkc0Vycm9ycykge1xuICAgICAgICBhZGRGb3JtRmllbGRFcnJvcnMoZmllbGROYW1lLCBmaWVsZHNFcnJvcnNbZmllbGROYW1lXSwgcmVzdWx0KTtcbiAgICB9XG59O1xuXG5jb25zdCBhZGRGb3JtRmllbGRFcnJvcnMgPSAoZmllbGROYW1lLCBlcnJvck1lc3NhZ2VzLCByZXN1bHQpID0+IHtcbiAgICBlcnJvck1lc3NhZ2VzLmZvckVhY2goKGVycm9yKSA9PiB7XG4gICAgICAgIGFkZEZvcm1GaWVsZEVycm9yKGZpZWxkTmFtZSwgZXJyb3IsIHJlc3VsdCk7XG4gICAgfSk7XG59O1xuXG5jb25zdCBhZGRGb3JtRmllbGRFcnJvciA9IChmaWVsZE5hbWUsIGVycm9yTWVzc2FnZSwgcmVzdWx0KSA9PiB7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KHJlc3VsdC5mb3JtLmZpZWxkc1tmaWVsZE5hbWVdKSkge1xuICAgICAgICByZXN1bHQuZm9ybS5maWVsZHNbZmllbGROYW1lXSA9IFtdO1xuICAgIH1cbiAgICBpZiAoIXJlc3VsdC5mb3JtLmZpZWxkc1tmaWVsZE5hbWVdLmluY2x1ZGVzKGVycm9yTWVzc2FnZSkpIHtcbiAgICAgICAgcmVzdWx0LmZvcm0uZmllbGRzW2ZpZWxkTmFtZV0ucHVzaChlcnJvck1lc3NhZ2UpO1xuICAgIH1cbn07XG4iLCJjb25zdCBjb21wb3NlRmllbGRzVmFsaWRhdG9ycyA9IChkYXRhLCB2YWxpZGF0b3JzTGliKSA9PiB7XG4gICAgaWYgKHZhbGlkYXRvcnNMaWIgJiYgdmFsaWRhdG9yc0xpYi5maWVsZHMpIHtcbiAgICAgICAgY29uc3QgbGlzdCA9IE9iamVjdC5rZXlzKGRhdGEpO1xuICAgICAgICBjb25zdCByZXN1bHQgPSB7fTtcbiAgICAgICAgbGlzdC5mb3JFYWNoKChmaWVsZE5hbWUpID0+IHtcbiAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbGlkYXRvcnNMaWIuZmllbGRzW2ZpZWxkTmFtZV0pKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0W2ZpZWxkTmFtZV0gPSB2YWxpZGF0b3JzTGliLmZpZWxkc1tmaWVsZE5hbWVdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4ge307XG4gICAgfVxufTtcblxuY29uc3QgY29tcG9zZUZvcm1WYWxpZGF0b3JzID0gKG5hbWUsIHZhbGlkYXRvcnNMaWIpID0+IHtcbiAgICBpZiAoIXZhbGlkYXRvcnNMaWIpIHJldHVybiBbXTtcbiAgICBpZiAodmFsaWRhdG9yc0xpYi5mb3JtcyAmJiBBcnJheS5pc0FycmF5KHZhbGlkYXRvcnNMaWIuZm9ybXNbbmFtZV0pKSB7XG4gICAgICAgIHJldHVybiB2YWxpZGF0b3JzTGliLmZvcm1zW25hbWVdO1xuICAgIH1cbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWxpZGF0b3JzTGliLmZvcm0pKSB7XG4gICAgICAgIHJldHVybiB2YWxpZGF0b3JzTGliLmZvcm07XG4gICAgfVxuICAgIHJldHVybiBbXTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIGNvbXBvc2VGaWVsZHNWYWxpZGF0b3JzLFxuICAgIGNvbXBvc2VGb3JtVmFsaWRhdG9ycyxcbn07XG4iLCJjb25zdCB7XG4gICAgY29tcG9zZUZpZWxkc1ZhbGlkYXRvcnMsXG4gICAgY29tcG9zZUZvcm1WYWxpZGF0b3JzLFxufSA9IHJlcXVpcmUoXCIuL3J1bm5lci51dGlscy5qc1wiKTtcblxuY29uc3QgVmFsaWRhdGlvblNlc3Npb24gPSByZXF1aXJlKFwiLi9zZXNzaW9uLmpzXCIpO1xuXG4vKipcbiAqIENyZWF0ZXMgdmFsaWRhdGlvbiBydW5uZXIgZnVuY3Rpb24gZnJvbSBwcm92aWRlZCB2YWxpZGF0aW9uIHJ1bGVzIGxpYlxuICogQHBhcmFtIHtvYmplY3R9ICAgICB2YWxpZGF0aW9uTGliIG9iamVjdCBjb250YWluaW5nIGZpZWxkcyB2YWxpZGF0aW9uIHJ1bGVzIGFuZCBmb3JtIHNwZWNpZmljIHJ1bGVzXG4gKiBAcmV0dXJucyB7ZnVuY3Rpb259IChkYXRhOiBvYmplY3QsIGZvcm1OYW1lOiBzdHJpbmcpPT5Qcm9taXNlPFZhbGlkYXRpb25SZXN1bHQ+XG4gKiovXG5jb25zdCBWYWxpZGF0aW9uUnVubmVyID0gKHZhbGlkYXRvcnNMaWIpID0+IHtcbiAgICAvKipcbiAgICAgKiBWYWxpZGF0aW9uIHNlc3Npb24gcnVubmVyXG4gICAgICogQHBhcmFtIHtvYmplY3R9IGRhdGEgICAgICBvYmplY3QgdG8gdmFsaWRhdGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZm9ybU5hbWVcbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZX1cbiAgICAgKiovXG4gICAgcmV0dXJuIChkYXRhLCBmb3JtTmFtZSkgPT4ge1xuICAgICAgICBjb25zdCB2YWxpZGF0b3JzID0ge1xuICAgICAgICAgICAgLy9maWVsZHMgc3BlY2lmaWMgdmFsaWRhdG9yc1xuICAgICAgICAgICAgZmllbGRzOiBjb21wb3NlRmllbGRzVmFsaWRhdG9ycyhkYXRhLCB2YWxpZGF0b3JzTGliKSxcbiAgICAgICAgICAgIC8vZm9ybSBzcGVjaWZpYyB2YWxpZGF0b3JzXG4gICAgICAgICAgICBmb3JtOiBjb21wb3NlRm9ybVZhbGlkYXRvcnMoZm9ybU5hbWUsIHZhbGlkYXRvcnNMaWIpLFxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gVmFsaWRhdGlvblNlc3Npb24odmFsaWRhdG9ycywgZGF0YSk7XG4gICAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gVmFsaWRhdGlvblJ1bm5lcjtcbiIsImNvbnN0IGF1Z21lbnRGaWVsZHNWYWxpZGF0b3JzID0gKGZpZWxkVmFsaWRhdG9ycywgZ2V0VmFsaWRhdG9yRW52KSA9PiB7XG4gICAgcmV0dXJuIGZpZWxkVmFsaWRhdG9ycy5tYXAoKGZpZWxkUnVsZSkgPT5cbiAgICAgICAgYXVnbWVudEZpZWxkVmFsaWRhdG9yKGZpZWxkUnVsZSwgZ2V0VmFsaWRhdG9yRW52KVxuICAgICk7XG59O1xuXG5jb25zdCBhdWdtZW50RmllbGRWYWxpZGF0b3IgPSAocnVsZSwgZ2V0VmFsaWRhdG9yRW52KSA9PiB7XG4gICAgaWYgKHJ1bGUudmFsaWRhdG9yICYmIHR5cGVvZiBydWxlLnZhbGlkYXRvciA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIGNvbnN0IHJ1bGVWYWxpZGF0b3IgPSBydWxlLnZhbGlkYXRvcjtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0ge1xuICAgICAgICAgICAgLi4ucnVsZSxcbiAgICAgICAgfTtcbiAgICAgICAgZGVsZXRlIHJlc3VsdC52YWxpZGF0b3I7XG4gICAgICAgIHJlc3VsdC52YWxpZGF0b3IgPSAodmFsKSA9PiBydWxlVmFsaWRhdG9yKHZhbCwgZ2V0VmFsaWRhdG9yRW52KCkpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICByZXR1cm4gcnVsZTtcbn07XG5cbmNvbnN0IGF1Z21lbnRGb3JtVmFsaWRhdG9ycyA9IChydWxlcywgZ2V0VmFsaWRhdG9yRW52KSA9PiB7XG4gICAgcmV0dXJuIHJ1bGVzLm1hcCgocnVsZSkgPT4gYXVnbWVudEZvcm1WYWxpZGF0b3IocnVsZSwgZ2V0VmFsaWRhdG9yRW52KSk7XG59O1xuXG5jb25zdCBhdWdtZW50Rm9ybVZhbGlkYXRvciA9IChydWxlLCBnZXRWYWxpZGF0b3JFbnYpID0+IHtcbiAgICByZXR1cm4gKHZhbCkgPT4gcnVsZSh2YWwsIGdldFZhbGlkYXRvckVudigpKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIGF1Z21lbnRGaWVsZHNWYWxpZGF0b3JzLFxuICAgIGF1Z21lbnRGaWVsZFZhbGlkYXRvcixcbiAgICBhdWdtZW50Rm9ybVZhbGlkYXRvcnMsXG4gICAgYXVnbWVudEZvcm1WYWxpZGF0b3IsXG59O1xuIiwiY29uc3Qgb2JqSGFzID0gKG9iaiwgbmFtZSkgPT4ge1xuICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBuYW1lKTtcbn07XG5jb25zdCB7XG4gICAgYXVnbWVudEZpZWxkc1ZhbGlkYXRvcnMsXG4gICAgYXVnbWVudEZvcm1WYWxpZGF0b3JzLFxufSA9IHJlcXVpcmUoXCIuL2J1aWxkZXIudXRpbHNcIik7XG5cbi8qKlxuICogQHR5cGVkZWYgICB7b2JqZWN0fSAgICBub3RWYWxpZGF0aW9uU2NoZW1hXG4gKiBAcHJvcGVydHkgIHtvYmplY3R9ICAgIFtmaWVsZHNdXG4gKiBAcHJvcGVydHkgIHthcnJheX0gICAgIFtmb3JtXVxuICogQHByb3BlcnR5ICB7b2JqZWN0fSAgICBbZm9ybXNdXG4gKi9cblxuLyoqXG4gKiByZXR1cm5zIHZhbGlkIGVtcHR5IHZhbGlkYXRpb24gc2NoZW1lXG4gKlxuICogQHJldHVybiB7bm90VmFsaWRhdGlvblNjaGVtYX1cbiAqL1xuY29uc3QgZW1wdHlTY2hlbWUgPSAoKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZmllbGRzOiB7fSxcbiAgICAgICAgZm9ybXM6IHt9LFxuICAgIH07XG59O1xuLyoqXG4gKlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSB2YWxpZGF0b3JzXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBnZXRWYWxpZGF0b3JFbnZcbiAqIEByZXR1cm4ge25vdFZhbGlkYXRpb25TY2hlbWF9XG4gKi9cbmNvbnN0IHZhbGlkYXRpb25CdWlsZGVyID0gKHZhbGlkYXRvcnMsIGdldFZhbGlkYXRvckVudikgPT4ge1xuICAgIGlmICh0eXBlb2YgdmFsaWRhdG9ycyA9PT0gXCJ1bmRlZmluZWRcIiB8fCB2YWxpZGF0b3JzID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBlbXB0eVNjaGVtZSgpO1xuICAgIH1cbiAgICBjb25zdCBhdWdtZW50ZWQgPSB7fTtcbiAgICBpZiAob2JqSGFzKHZhbGlkYXRvcnMsIFwiZmllbGRzXCIpKSB7XG4gICAgICAgIGF1Z21lbnRlZC5maWVsZHMgPSB0cmFuc2Zvcm1GaWVsZHNWYWxpZGF0b3JzKFxuICAgICAgICAgICAgdmFsaWRhdG9ycy5maWVsZHMsXG4gICAgICAgICAgICBnZXRWYWxpZGF0b3JFbnZcbiAgICAgICAgKTtcbiAgICB9XG4gICAgaWYgKG9iakhhcyh2YWxpZGF0b3JzLCBcImZvcm1zXCIpKSB7XG4gICAgICAgIGF1Z21lbnRlZC5mb3JtcyA9IHRyYW5zZm9ybUZvcm1zVmFsaWRhdG9ycyhcbiAgICAgICAgICAgIHZhbGlkYXRvcnMuZm9ybXMsXG4gICAgICAgICAgICBnZXRWYWxpZGF0b3JFbnZcbiAgICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBpZiAob2JqSGFzKHZhbGlkYXRvcnMsIFwiZm9ybVwiKSkge1xuICAgICAgICAgICAgYXVnbWVudGVkLmZvcm0gPSBhdWdtZW50Rm9ybVZhbGlkYXRvcnMoXG4gICAgICAgICAgICAgICAgdmFsaWRhdG9ycy5mb3JtLFxuICAgICAgICAgICAgICAgIGdldFZhbGlkYXRvckVudlxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYXVnbWVudGVkO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB2YWxpZGF0aW9uQnVpbGRlcjtcblxuY29uc3QgdHJhbnNmb3JtRmllbGRzVmFsaWRhdG9ycyA9IChmaWVsZHMsIGdldFZhbGlkYXRvckVudikgPT4ge1xuICAgIGNvbnN0IGF1Z21lbnRlZCA9IHt9O1xuICAgIGZvciAobGV0IGZpZWxkTmFtZSBpbiBmaWVsZHMpIHtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoZmllbGRzW2ZpZWxkTmFtZV0pKSB7XG4gICAgICAgICAgICBhdWdtZW50ZWRbZmllbGROYW1lXSA9IGF1Z21lbnRGaWVsZHNWYWxpZGF0b3JzKFxuICAgICAgICAgICAgICAgIGZpZWxkc1tmaWVsZE5hbWVdLFxuICAgICAgICAgICAgICAgIGdldFZhbGlkYXRvckVudlxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYXVnbWVudGVkO1xufTtcblxuY29uc3QgdHJhbnNmb3JtRm9ybXNWYWxpZGF0b3JzID0gKGZvcm1zVmFsaWRhdG9ycywgZ2V0VmFsaWRhdG9yRW52KSA9PiB7XG4gICAgY29uc3QgYXVnbWVudGVkID0ge307XG4gICAgZm9yIChsZXQgZm9ybU5hbWUgaW4gZm9ybXNWYWxpZGF0b3JzKSB7XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KGZvcm1zVmFsaWRhdG9yc1tmb3JtTmFtZV0pKSB7XG4gICAgICAgICAgICBhdWdtZW50ZWRbZm9ybU5hbWVdID0gYXVnbWVudEZvcm1WYWxpZGF0b3JzKFxuICAgICAgICAgICAgICAgIGZvcm1zVmFsaWRhdG9yc1tmb3JtTmFtZV0sXG4gICAgICAgICAgICAgICAgZ2V0VmFsaWRhdG9yRW52XG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBhdWdtZW50ZWQ7XG59O1xuIiwiY29uc3QgU2Vzc2lvbiA9IHJlcXVpcmUoXCIuL3Nlc3Npb25cIik7XG5jb25zdCBSdW5uZXIgPSByZXF1aXJlKFwiLi9ydW5uZXJcIik7XG5jb25zdCBCdWlsZGVyID0gcmVxdWlyZShcIi4vYnVpbGRlclwiKTtcbmNvbnN0IFJlc3VsdCA9IHJlcXVpcmUoXCIuL3Jlc3VsdFwiKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgbmFtZTogXCJub3QtdmFsaWRhdGlvblwiLFxuICAgIFNlc3Npb24sXG4gICAgUnVubmVyLFxuICAgIEJ1aWxkZXIsXG4gICAgUmVzdWx0LFxufTtcbiIsIjxzY3JpcHQ+XG4gICAgaW1wb3J0IFVJTGFiZWwgZnJvbSBcIi4uLy4uLy4uL2VsZW1lbnRzL2lucHV0L3VpLmxhYmVsLnN2ZWx0ZVwiO1xuXG4gICAgaW1wb3J0IHsgQ09NUE9ORU5UUyB9IGZyb20gXCIuLi8uLi9MSUIuanNcIjtcbiAgICBpbXBvcnQgeyBvbk1vdW50IH0gZnJvbSBcInN2ZWx0ZVwiO1xuXG4gICAgLyoqXG4gICAgICogQHR5cGVkZWYge09iamVjdH0gUHJvcHNcbiAgICAgKiBAcHJvcGVydHkge3N0cmluZ30gW2xhYmVsXVxuICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbbmFtZV1cbiAgICAgKiBAcHJvcGVydHkge2Jvb2xlYW59IFtyZWFkb25seV1cbiAgICAgKiBAcHJvcGVydHkge2Jvb2xlYW59IFtob3Jpem9udGFsXVxuICAgICAqIEBwcm9wZXJ0eSB7YW55fSBbY29udHJvbHNdXG4gICAgICogQHByb3BlcnR5IHtpbXBvcnQoJy4uLy4uLy4uL2VsZW1lbnRzL2V2ZW50cy50eXBlcycpLlVJRXZlbnRJbnB1dENoYW5nZUNhbGxiYWNrfSBvbmNoYW5nZVxuICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbY2xhc3Nlc10gLSBmaWVsZCBzdHlsZSBtb2RpZmljYXRpb25cbiAgICAgKiBAcHJvcGVydHkge2Jvb2xlYW59IFthZGRvbnNdIC0gLy9hZGRvbnNcbiAgICAgKiBAcHJvcGVydHkge2Jvb2xlYW59IFthZGRvbnNDZW50ZXJlZF1cbiAgICAgKiBAcHJvcGVydHkge2Jvb2xlYW59IFthZGRvbnNSaWdodF1cbiAgICAgKiBAcHJvcGVydHkge2Jvb2xlYW59IFtncm91cGVkXSAtIC8vZ3JvdXAgZmxhZ1xuICAgICAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW2dyb3VwZWRNdWx0aWxpbmVdXG4gICAgICogQHByb3BlcnR5IHtib29sZWFufSBbZ3JvdXBlZFJpZ2h0XVxuICAgICAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW2dyb3VwZWRDZW50ZXJlZF1cbiAgICAgKi9cblxuICAgIC8qKiBAdHlwZSB7UHJvcHN9ICovXG4gICAgbGV0IHtcbiAgICAgICAgbGFiZWwgPSBcIlwiLFxuICAgICAgICBuYW1lID0gXCJnZW5lcmljIGZpZWxkXCIsXG4gICAgICAgIHJlYWRvbmx5ID0gZmFsc2UsXG4gICAgICAgIGhvcml6b250YWwgPSBmYWxzZSxcbiAgICAgICAgY29udHJvbHMgPSBbXSxcbiAgICAgICAgY2xhc3NlcyA9IFwiXCIsXG4gICAgICAgIGFkZG9ucyA9IGZhbHNlLFxuICAgICAgICBhZGRvbnNDZW50ZXJlZCA9IGZhbHNlLFxuICAgICAgICBhZGRvbnNSaWdodCA9IGZhbHNlLFxuICAgICAgICBncm91cGVkID0gZmFsc2UsXG4gICAgICAgIGdyb3VwZWRNdWx0aWxpbmUgPSBmYWxzZSxcbiAgICAgICAgZ3JvdXBlZFJpZ2h0ID0gZmFsc2UsXG4gICAgICAgIGdyb3VwZWRDZW50ZXJlZCA9IGZhbHNlLFxuICAgICAgICBvbmNoYW5nZSA9ICgpID0+IHRydWUsXG4gICAgICAgIGZvcm1GaWVsZFByZWZpeCA9IFwiZm9ybS1maWVsZC1cIixcbiAgICB9ID0gJHByb3BzKCk7XG5cbiAgICBsZXQgZmllbGRDbGFzc2VzID0gJHN0YXRlKFwiXCIpO1xuICAgIGxldCBoaWRkZW4gPSAkc3RhdGUoZmFsc2UpO1xuICAgIGxldCBmaWVsZElkID0gJHN0YXRlKCk7XG5cbiAgICBvbk1vdW50KCgpID0+IHtcbiAgICAgICAgZmllbGRDbGFzc2VzICs9IFwiIFwiICsgY2xhc3NlcztcbiAgICAgICAgZmllbGRDbGFzc2VzICs9IGFkZG9ucyA/IFwiIGhhcy1hZGRvbnMgXCIgOiBcIlwiO1xuICAgICAgICBmaWVsZENsYXNzZXMgKz0gYWRkb25zQ2VudGVyZWQgPyBcIiBoYXMtYWRkb25zLWNlbnRlcmVkIFwiIDogXCJcIjtcbiAgICAgICAgZmllbGRDbGFzc2VzICs9IGFkZG9uc1JpZ2h0ID8gXCIgaGFzLWFkZG9ucy1yaWdodCBcIiA6IFwiXCI7XG5cbiAgICAgICAgZmllbGRDbGFzc2VzICs9IGdyb3VwZWQgPyBcIiBpcy1ncm91cGVkIFwiIDogXCJcIjtcbiAgICAgICAgZmllbGRDbGFzc2VzICs9IGdyb3VwZWRNdWx0aWxpbmUgPyBcIiBpcy1ncm91cGVkLW11bHRpbGluZSBcIiA6IFwiXCI7XG4gICAgICAgIGZpZWxkQ2xhc3NlcyArPSBncm91cGVkUmlnaHQgPyBcIiBpcy1ncm91cGVkLXJpZ2h0IFwiIDogXCJcIjtcbiAgICAgICAgZmllbGRDbGFzc2VzICs9IGdyb3VwZWRDZW50ZXJlZCA/IFwiIGlzLWdyb3VwZWQtY2VudGVyZWQgXCIgOiBcIlwiO1xuXG4gICAgICAgIGlmIChyZWFkb25seSkge1xuICAgICAgICAgICAgY29udHJvbHMuZm9yRWFjaCgoY29udHJvbCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnRyb2wucmVhZG9ubHkgPSB0cnVlO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgbm90SGlkZGVuID0gY29udHJvbHMuZmlsdGVyKFxuICAgICAgICAgICAgKGNvbnRyb2wpID0+IGNvbnRyb2wuY29tcG9uZW50ICE9PSBcIlVJSGlkZGVuXCJcbiAgICAgICAgKTtcbiAgICAgICAgaGlkZGVuID0gbm90SGlkZGVuLmxlbmd0aCA9PT0gMDtcbiAgICAgICAgbGV0IHRtcCA9IGNvbnRyb2xzLm1hcCgoaXRtKSA9PiBpdG0uY29tcG9uZW50KS5qb2luKFwiX1wiKTtcbiAgICAgICAgZmllbGRJZCA9IGAke2Zvcm1GaWVsZFByZWZpeH0ke3RtcH0tJHtuYW1lfWA7XG4gICAgfSk7XG48L3NjcmlwdD5cblxueyNpZiBoaWRkZW59XG4gICAgeyNlYWNoIGNvbnRyb2xzIGFzIGNvbnRyb2x9XG4gICAgICAgIHtAY29uc3QgU3ZlbHRlQ29tcG9uZW50ID0gQ09NUE9ORU5UUy5nZXQoY29udHJvbC5jb21wb25lbnQpfVxuICAgICAgICA8U3ZlbHRlQ29tcG9uZW50IHsuLi5jb250cm9sfSB7b25jaGFuZ2V9IGZpZWxkbmFtZT17bmFtZX0gLz5cbiAgICB7L2VhY2h9XG57OmVsc2UgaWYgaG9yaXpvbnRhbH1cbiAgICA8ZGl2IGNsYXNzPVwiZmllbGQgaXMtaG9yaXpvbnRhbCB7ZmllbGRDbGFzc2VzfSB7ZmllbGRJZH1cIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImZpZWxkLWxhYmVsIGlzLW5vcm1hbFwiPlxuICAgICAgICAgICAgPFVJTGFiZWwgZm9yPXtmaWVsZElkfSBsYWJlbD17bGFiZWwgfHwgY29udHJvbHNbMF0ubGFiZWx9IC8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPVwiZmllbGQtYm9keVwiIGlkPXtmaWVsZElkfT5cbiAgICAgICAgICAgIHsjZWFjaCBjb250cm9scyBhcyBjb250cm9sfVxuICAgICAgICAgICAgICAgIHtAY29uc3QgU3ZlbHRlQ29tcG9uZW50XzEgPSBDT01QT05FTlRTLmdldChjb250cm9sLmNvbXBvbmVudCl9XG4gICAgICAgICAgICAgICAgPFN2ZWx0ZUNvbXBvbmVudF8xIHsuLi5jb250cm9sfSB7b25jaGFuZ2V9IGZpZWxkbmFtZT17bmFtZX0gLz5cbiAgICAgICAgICAgIHsvZWFjaH1cbiAgICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG57OmVsc2V9XG4gICAgPGRpdiBjbGFzcz1cImZpZWxkIHtmaWVsZENsYXNzZXN9IHtmaWVsZElkfVwiPlxuICAgICAgICB7I2VhY2ggY29udHJvbHMgYXMgY29udHJvbH1cbiAgICAgICAgICAgIDxVSUxhYmVsXG4gICAgICAgICAgICAgICAgZm9yPVwiZm9ybS1maWVsZC17Y29udHJvbC5jb21wb25lbnR9LXtuYW1lfVwiXG4gICAgICAgICAgICAgICAgbGFiZWw9e2NvbnRyb2wubGFiZWx9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICAge0Bjb25zdCBTdmVsdGVDb21wb25lbnRfMiA9IENPTVBPTkVOVFMuZ2V0KGNvbnRyb2wuY29tcG9uZW50KX1cbiAgICAgICAgICAgIDxTdmVsdGVDb21wb25lbnRfMiB7Li4uY29udHJvbH0ge29uY2hhbmdlfSBmaWVsZG5hbWU9e25hbWV9IC8+XG4gICAgICAgIHsvZWFjaH1cbiAgICA8L2Rpdj5cbnsvaWZ9XG4iLCI8c2NyaXB0PlxuICAgIGltcG9ydCBcImJ1bG1hLXBhZ2Vsb2FkZXJcIjtcbiAgICBpbXBvcnQgeyBjcmVhdGVFdmVudERpc3BhdGNoZXIgfSBmcm9tIFwic3ZlbHRlXCI7XG4gICAgbGV0IGRpc3BhdGNoID0gY3JlYXRlRXZlbnREaXNwYXRjaGVyKCk7XG5cbiAgICBpbXBvcnQgeyBMT0NBTEUgfSBmcm9tIFwiLi4vLi4vLi4vbG9jYWxlXCI7XG5cbiAgICBpbXBvcnQgVUlGaWVsZCBmcm9tIFwiLi9maWVsZC5zdmVsdGVcIjtcbiAgICBpbXBvcnQgRm9ybUhlbHBlcnMgZnJvbSBcIi4vZm9ybS5oZWxwZXJzLmpzXCI7XG5cbiAgICAvL3ZhbGlkYXRpb24gc3RhdHVzXG4gICAgbGV0IGZvcm1FcnJvcnMgPSAkc3RhdGUoW10pO1xuICAgIGxldCBmb3JtSGFzRXJyb3JzID0gJHN0YXRlKGZhbHNlKTtcbiAgICBsZXQgZmllbGRzSGFzRXJyb3JzID0gJHN0YXRlKGZhbHNlKTtcbiAgICBsZXQgc3VjY2VzcyA9ICRzdGF0ZShmYWxzZSk7XG5cbiAgICAvL2lucHV0IGRhdGFcbiAgICAvL2Zvcm0gc3RydWN0dXJlIG9iamVjdFxuXG4gICAgLy9oaWRkZW4gLSBubyBsb2FkZXJcbiAgICAvL2NvbnRhaW5lciAtIHBhcmVudCBjb250YWluZXIgb2YgZm9ybVxuXG4gICAgLy9maWVsZHMgbGlzdCBzdHJ1Y3R1cmVcblxuICAgIC8qKlxuICAgICAqIEB0eXBlZGVmIHtPYmplY3R9IFByb3BzXG4gICAgICogQHByb3BlcnR5IHthbnl9IFtmb3JtXSAtIHtcbltmaWVsZE5hbWU6IHN0cmluZ10gPT4gZGVzY3JpcHRpb246IG9iamVjdFxufVxuICAgICAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW2xvYWRpbmddIC0gc3RhdGUgaWYgZm9ybSBsb2FkaW5nXG4gICAgICogQHByb3BlcnR5IHtzdHJpbmd9IFtsb2FkZXJdIC0gcGFnZSAtIHdob2xlIHBhZ2VcbiAgICAgKiBAcHJvcGVydHkge2FueX0gW2ZpZWxkc10gLSBlYWNoIGl0ZW0gaXMgYSByb3dcbmlmIGl0ZW0gaXMgYXJyYXksIHRoZW4gdGhlcmUgZmV3IGZpZWxkcyBpbiBhIHJvd1xuW1xuW25hbWUsIGFnZV0sXG5bZW1haWwsIHRlbGVwaG9uZV1cbmJpbyxcbmFncmVlZFxuXVxuICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbU1VDQ0VTU19URVhUXSAtIGZvcm0gcmVzdWx0IGxhYmVsc1xuICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbV0FJVElOR19URVhUXVxuICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbdGl0bGVdIC0gZm9ybSBsYWJlbHNcbiAgICAgKiBAcHJvcGVydHkge3N0cmluZ30gW2Rlc2NyaXB0aW9uXVxuICAgICAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW2J1dHRvbnNGaXJzdF0gLSBpZiB5b3Ugd2FudCBidXR0b24gb24gdG9wXG4gICAgICogQHByb3BlcnR5IHtib29sZWFufSBbaG9yaXpvbnRhbF0gLSBpZiBmb3JtIGZpZWxkcyBzaG91bGQgaGF2ZSBob3Jpem9udGFsIGxheW91dFxuICAgICAqIEBwcm9wZXJ0eSB7YW55fSBbc3VibWl0XSAtIGJ1dHRvbnMgbGFiZWxzIGFuZCBhdmFpbGFiaWxpdHlcbiAgICAgKiBAcHJvcGVydHkge2FueX0gW2NhbmNlbF1cbiAgICAgKi9cblxuICAgIC8qKiBAdHlwZSB7UHJvcHN9ICovXG4gICAgbGV0IHtcbiAgICAgICAgZm9ybSA9ICRiaW5kYWJsZSh7fSksXG4gICAgICAgIGxvYWRpbmcgPSAkYmluZGFibGUoZmFsc2UpLFxuICAgICAgICBsb2FkZXIgPSBcImNvbnRhaW5lclwiLFxuICAgICAgICBmaWVsZHMgPSBbXSxcbiAgICAgICAgU1VDQ0VTU19URVhUID0gXCLQntC/0LXRgNCw0YbQuNGPINC30LDQstC10YDRiNC10L3QsFwiLFxuICAgICAgICBXQUlUSU5HX1RFWFQgPSBcItCe0YLQv9GA0LDQstC60LAg0LTQsNC90L3Ri9GFINC90LAg0YHQtdGA0LLQtdGAXCIsXG4gICAgICAgIHRpdGxlID0gXCJcIixcbiAgICAgICAgZGVzY3JpcHRpb24gPSBcIlwiLFxuICAgICAgICBidXR0b25zRmlyc3QgPSBmYWxzZSxcbiAgICAgICAgaG9yaXpvbnRhbCA9IGZhbHNlLFxuICAgICAgICBzdWJtaXQgPSB7XG4gICAgICAgICAgICBjYXB0aW9uOiBcItCe0YLQv9GA0LDQstC40YLRjFwiLFxuICAgICAgICAgICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAgICAgfSxcbiAgICAgICAgY2FuY2VsID0ge1xuICAgICAgICAgICAgY2FwdGlvbjogXCLQndCw0LfQsNC0XCIsXG4gICAgICAgICAgICBlbmFibGVkOiB0cnVlLFxuICAgICAgICB9LFxuICAgIH0gPSAkcHJvcHMoKTtcblxuICAgIGxldCBmb3JtSW52YWxpZCA9ICRkZXJpdmVkKGZvcm1IYXNFcnJvcnMgfHwgZmllbGRzSGFzRXJyb3JzKTtcblxuICAgIGV4cG9ydCBmdW5jdGlvbiBjb2xsZWN0RGF0YSgpIHtcbiAgICAgICAgcmV0dXJuIEZvcm1IZWxwZXJzLmNvbGxlY3REYXRhKGZpZWxkcywgZm9ybSk7XG4gICAgfVxuXG4gICAgZXhwb3J0IGZ1bmN0aW9uIHNldEZpZWxkSW52YWxpZChmaWVsZE5hbWUsIHZhbHVlLCBlcnJvcnMpIHtcbiAgICAgICAgZm9ybSA9IEZvcm1IZWxwZXJzLnNldEZpZWxkSW52YWxpZChmb3JtLCBmaWVsZE5hbWUsIHZhbHVlLCBlcnJvcnMpO1xuICAgICAgICBmaWVsZHNIYXNFcnJvcnMgPSB0cnVlO1xuICAgIH1cblxuICAgIGV4cG9ydCBmdW5jdGlvbiBzZXRGaWVsZFZhbGlkKGZpZWxkTmFtZSwgdmFsdWUpIHtcbiAgICAgICAgZm9ybSA9IEZvcm1IZWxwZXJzLnNldEZpZWxkVmFsaWQoZm9ybSwgZmllbGROYW1lLCB2YWx1ZSk7XG4gICAgfVxuXG4gICAgZXhwb3J0IGZ1bmN0aW9uIGlzRmllbGRWYWxpZChmaWVsZE5hbWUpIHtcbiAgICAgICAgcmV0dXJuIEZvcm1IZWxwZXJzLmlzRmllbGRWYWxpZChmb3JtLCBmaWVsZE5hbWUpO1xuICAgIH1cblxuICAgIGV4cG9ydCBmdW5jdGlvbiBzZXRGb3JtRmllbGRJbnZhbGlkKGZpZWxkTmFtZSwgZXJyb3JzKSB7XG4gICAgICAgIGZvcm0gPSBGb3JtSGVscGVycy5zZXRGb3JtRmllbGRJbnZhbGlkKGZvcm0sIGZpZWxkTmFtZSwgZXJyb3JzKTtcbiAgICAgICAgZGlzcGF0Y2goYGZpZWxkLmludmFsaWRgLCB7XG4gICAgICAgICAgICBmaWVsZE5hbWUsXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGV4cG9ydCBmdW5jdGlvbiBzZXRGb3JtRmllbGRWYWxpZChmaWVsZE5hbWUpIHtcbiAgICAgICAgZm9ybSA9IEZvcm1IZWxwZXJzLnNldEZvcm1GaWVsZFZhbGlkKGZvcm0sIGZpZWxkTmFtZSk7XG4gICAgICAgIGRpc3BhdGNoKGBmaWVsZC52YWxpZGAsIHtcbiAgICAgICAgICAgIGZpZWxkTmFtZSxcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZUZvcm1WYWxpZGF0aW9uU3RhdHVzKFxuICAgICAgICB2YWxpZGF0aW9uU3RhdHVzIC8qIEZvcm1WYWxpZGF0aW9uU2Vzc2lvbi5nZXRDb21wbGV0ZVJlc3VsdCgpICovXG4gICAgKSB7XG4gICAgICAgIGZvcm1IYXNFcnJvcnMgPSBmYWxzZTtcbiAgICAgICAgZmllbGRzSGFzRXJyb3JzID0gZmFsc2U7XG4gICAgICAgIGlmIChcbiAgICAgICAgICAgIEFycmF5LmlzQXJyYXkodmFsaWRhdGlvblN0YXR1cy5mb3JtKSAmJlxuICAgICAgICAgICAgdmFsaWRhdGlvblN0YXR1cy5mb3JtLmxlbmd0aFxuICAgICAgICApIHtcbiAgICAgICAgICAgIGZvcm1FcnJvcnMuc3BsaWNlKDAsIGZvcm1FcnJvcnMubGVuZ3RoLCAuLi52YWxpZGF0aW9uU3RhdHVzLmZvcm0pO1xuICAgICAgICAgICAgZm9ybUhhc0Vycm9ycyA9IHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBmb3JtRXJyb3JzLnNwbGljZSgwLCBmb3JtRXJyb3JzLmxlbmd0aCk7XG4gICAgICAgIH1cbiAgICAgICAgZm9ybUVycm9ycyA9IGZvcm1FcnJvcnM7XG4gICAgICAgIGlmICh2YWxpZGF0aW9uU3RhdHVzLmZpZWxkcykge1xuICAgICAgICAgICAgZm9yIChsZXQgZmllbGROYW1lIG9mIE9iamVjdC5rZXlzKGZvcm0pKSB7XG4gICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICBBcnJheS5pc0FycmF5KHZhbGlkYXRpb25TdGF0dXMuZmllbGRzW2ZpZWxkTmFtZV0pICYmXG4gICAgICAgICAgICAgICAgICAgIHZhbGlkYXRpb25TdGF0dXMuZmllbGRzW2ZpZWxkTmFtZV0ubGVuZ3RoXG4gICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgIEZvcm1IZWxwZXJzLnNldEZvcm1GaWVsZEludmFsaWQoXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3JtLFxuICAgICAgICAgICAgICAgICAgICAgICAgZmllbGROYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGlvblN0YXR1cy5maWVsZHNbZmllbGROYW1lXVxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICBmaWVsZHNIYXNFcnJvcnMgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIEZvcm1IZWxwZXJzLnNldEZvcm1GaWVsZFZhbGlkKGZvcm0sIGZpZWxkTmFtZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZXhwb3J0IGZ1bmN0aW9uIHNob3dTdWNjZXNzKCkge1xuICAgICAgICBzdWNjZXNzID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBleHBvcnQgZnVuY3Rpb24gc2V0TG9hZGluZygpIHtcbiAgICAgICAgbG9hZGluZyA9IHRydWU7XG4gICAgfVxuXG4gICAgZXhwb3J0IGZ1bmN0aW9uIHJlc2V0TG9hZGluZygpIHtcbiAgICAgICAgbG9hZGluZyA9IGZhbHNlO1xuICAgIH1cblxuICAgIGV4cG9ydCBmdW5jdGlvbiBzZXRGaWVsZHNWaXNpYmlsaXR5KGZpZWxkc0xpc3QsIHZhbCkge1xuICAgICAgICBpZiAoRm9ybUhlbHBlcnMuc2V0RmllbGRzVmlzaWJpbGl0eShmb3JtLCBmaWVsZHNMaXN0LCB2YWwpKSB7XG4gICAgICAgICAgICBmb3JtID0gZm9ybTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGV4cG9ydCBmdW5jdGlvbiBzZXRWaXNpYmxlRmllbGRzKGZpZWxkc0xpc3QpIHtcbiAgICAgICAgc2V0RmllbGRzVmlzaWJpbGl0eShmaWVsZHNMaXN0LCB0cnVlKTtcbiAgICB9XG5cbiAgICBleHBvcnQgZnVuY3Rpb24gc2V0SW52aXNpYmxlRmllbGRzKGZpZWxkc0xpc3QpIHtcbiAgICAgICAgc2V0RmllbGRzVmlzaWJpbGl0eShmaWVsZHNMaXN0LCBmYWxzZSk7XG4gICAgfVxuXG4gICAgZXhwb3J0IGZ1bmN0aW9uIHNldEZpZWxkVmFsdWUoZmllbGROYW1lLCB2YWx1ZSkge1xuICAgICAgICBpZiAoRm9ybUhlbHBlcnMuc2V0RmllbGRWYWx1ZShmb3JtLCBmaWVsZE5hbWUsIHZhbHVlKSkge1xuICAgICAgICAgICAgb25GaWVsZENoYW5nZSh7XG4gICAgICAgICAgICAgICAgZGV0YWlsOiB7XG4gICAgICAgICAgICAgICAgICAgIGZpZWxkOiBmaWVsZE5hbWUsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGV4cG9ydCBmdW5jdGlvbiB1cGRhdGVGaWVsZChmaWVsZE5hbWUsIHByb3BzKSB7XG4gICAgICAgIGZvcm1bZmllbGROYW1lXSA9IHtcbiAgICAgICAgICAgIC4uLmZvcm1bZmllbGROYW1lXSxcbiAgICAgICAgICAgIC4uLnByb3BzLFxuICAgICAgICB9O1xuICAgICAgICBmb3JtID0gZm9ybTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBvbkZpZWxkQ2hhbmdlKGV2KSB7XG4gICAgICAgIGxldCBkYXRhID0gZXYuZGV0YWlsO1xuICAgICAgICBmb3JtW2RhdGEuZmllbGRdLnZhbHVlID0gZGF0YS52YWx1ZTtcbiAgICAgICAgZm9ybSA9IGZvcm07XG4gICAgICAgIGRpc3BhdGNoKFwiY2hhbmdlXCIsIGRhdGEpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHN1Ym1pdEZvcm0oZSkge1xuICAgICAgICBlICYmIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgZGlzcGF0Y2goXCJzdWJtaXRcIiwgY29sbGVjdERhdGEoKSk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZWplY3RGb3JtKCkge1xuICAgICAgICBkaXNwYXRjaChcInJlamVjdFwiKTtcbiAgICB9XG48L3NjcmlwdD5cblxuPGRpdiBjbGFzcz1cImZvcm0tY29udGFpbmVyXCI+XG4gICAgeyNpZiBsb2FkZXIgIT09IFwiaGlkZGVuXCJ9XG4gICAgICAgIDxkaXZcbiAgICAgICAgICAgIGNsYXNzPVwie2xvYWRlciA9PT0gJ3BhZ2UnXG4gICAgICAgICAgICAgICAgPyAncGFnZWxvYWRlcidcbiAgICAgICAgICAgICAgICA6ICdjb250YWluZXJsb2FkZXInfSB7bG9hZGluZyA/ICdpcy1hY3RpdmUnIDogJyd9XCJcbiAgICAgICAgPlxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJ0aXRsZVwiPnskTE9DQUxFW1dBSVRJTkdfVEVYVF19PC9zcGFuPlxuICAgICAgICA8L2Rpdj5cbiAgICB7L2lmfVxuXG4gICAgeyNpZiBzdWNjZXNzfVxuICAgICAgICA8ZGl2IGNsYXNzPVwibm90aWZpY2F0aW9uIGlzLXN1Y2Nlc3NcIj5cbiAgICAgICAgICAgIDxoMyBjbGFzcz1cImZvcm0tc3VjY2Vzcy1tZXNzYWdlXCI+eyRMT0NBTEVbU1VDQ0VTU19URVhUXX08L2gzPlxuICAgICAgICA8L2Rpdj5cbiAgICB7OmVsc2V9XG4gICAgICAgIHsjaWYgdGl0bGV9XG4gICAgICAgICAgICA8aDUgY2xhc3M9XCJ0aXRsZSBpcy01XCI+eyRMT0NBTEVbdGl0bGVdfTwvaDU+XG4gICAgICAgIHsvaWZ9XG4gICAgICAgIHsjaWYgZGVzY3JpcHRpb259XG4gICAgICAgICAgICA8aDYgY2xhc3M9XCJzdWJ0aXRsZSBpcy02XCI+eyRMT0NBTEVbZGVzY3JpcHRpb25dfTwvaDY+XG4gICAgICAgIHsvaWZ9XG4gICAgICAgIHsjaWYgYnV0dG9uc0ZpcnN0fVxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImJ1dHRvbnMgaXMtZ3JvdXBlZCBpcy1jZW50ZXJlZFwiPlxuICAgICAgICAgICAgICAgIHsjaWYgY2FuY2VsLmVuYWJsZWR9XG4gICAgICAgICAgICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPVwiYnV0dG9uIGlzLW91dGxpbmVkIHtjYW5jZWwuY2xhc3Nlc31cIlxuICAgICAgICAgICAgICAgICAgICAgICAgb25jbGljaz17cmVqZWN0Rm9ybX0+eyRMT0NBTEVbY2FuY2VsLmNhcHRpb25dfTwvYnV0dG9uXG4gICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICB7L2lmfVxuICAgICAgICAgICAgICAgIHsjaWYgc3VibWl0LmVuYWJsZWR9XG4gICAgICAgICAgICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgICAgICAgICAgICAgIG9uY2xpY2s9e3N1Ym1pdEZvcm19XG4gICAgICAgICAgICAgICAgICAgICAgICBkaXNhYmxlZD17Zm9ybUludmFsaWR9XG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz1cImJ1dHRvbiBpcy1wcmltYXJ5IGlzLWhvdmVyZWQge3N1Ym1pdC5jbGFzc2VzfVwiXG4gICAgICAgICAgICAgICAgICAgICAgICA+eyRMT0NBTEVbc3VibWl0LmNhcHRpb25dfTwvYnV0dG9uXG4gICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICB7L2lmfVxuICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgIHsjaWYgZm9ybUVycm9ycy5sZW5ndGggPiAwfVxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJlZGl0LWZvcm0tZXJyb3Igbm90aWZpY2F0aW9uIGlzLWRhbmdlclwiPlxuICAgICAgICAgICAgICAgICAgICB7Zm9ybUVycm9ycy5qb2luKFwiLCBcIil9XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICB7L2lmfVxuICAgICAgICB7L2lmfVxuXG4gICAgICAgIHsjZWFjaCBmaWVsZHMgYXMgZmllbGR9XG4gICAgICAgICAgICB7I2lmIEFycmF5LmlzQXJyYXkoZmllbGQpfVxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb2x1bW5zXCI+XG4gICAgICAgICAgICAgICAgICAgIHsjZWFjaCBmaWVsZCBhcyBzdWJmaWVsZH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHsjaWYgZm9ybVtzdWJmaWVsZF0gJiYgZm9ybVtzdWJmaWVsZF0uY29tcG9uZW50fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsjaWYgZm9ybVtzdWJmaWVsZF0udmlzaWJsZX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9XCJjb2x1bW4ge2Zvcm1bc3ViZmllbGRdLmZpZWxkU2l6ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gJ2lzLScgKyBmb3JtW3N1YmZpZWxkXS5maWVsZFNpemVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6ICcnfSBcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8VUlGaWVsZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xzPXtbZm9ybVtzdWJmaWVsZF1dfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uOmNoYW5nZT17b25GaWVsZENoYW5nZX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lPXtzdWJmaWVsZH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7aG9yaXpvbnRhbH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbD17Zm9ybVtzdWJmaWVsZF0ubGFiZWx9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7L2lmfVxuICAgICAgICAgICAgICAgICAgICAgICAgezplbHNlfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb2x1bW4gbm90aWZpY2F0aW9uIGlzLWRhbmdlclwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTdWJmaWVsZCAne3N1YmZpZWxkfScgaXMgbm90IHJlZ2lzdGVyZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIHsvaWZ9XG4gICAgICAgICAgICAgICAgICAgIHsvZWFjaH1cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIHs6ZWxzZSBpZiBmb3JtW2ZpZWxkXSAmJiBmb3JtW2ZpZWxkXS5jb21wb25lbnR9XG4gICAgICAgICAgICAgICAgeyNpZiBmb3JtW2ZpZWxkXS52aXNpYmxlfVxuICAgICAgICAgICAgICAgICAgICA8VUlGaWVsZFxuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbHM9e1tmb3JtW2ZpZWxkXV19XG4gICAgICAgICAgICAgICAgICAgICAgICBvbjpjaGFuZ2U9e29uRmllbGRDaGFuZ2V9XG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lPXtmaWVsZH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHtob3Jpem9udGFsfVxuICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw9e2Zvcm1bZmllbGRdLmxhYmVsfVxuICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgIHsvaWZ9XG4gICAgICAgICAgICB7OmVsc2V9XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm5vdGlmaWNhdGlvbiBpcy1kYW5nZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgRmllbGQgJ3tmaWVsZH0nIGlzIG5vdCByZWdpc3RlcmVkXG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICB7L2lmfVxuICAgICAgICB7L2VhY2h9XG5cbiAgICAgICAgeyNpZiAhYnV0dG9uc0ZpcnN0fVxuICAgICAgICAgICAgeyNpZiBmb3JtRXJyb3JzLmxlbmd0aCA+IDB9XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImVkaXQtZm9ybS1lcnJvciBub3RpZmljYXRpb24gaXMtZGFuZ2VyXCI+XG4gICAgICAgICAgICAgICAgICAgIHsjZWFjaCBmb3JtRXJyb3JzIGFzIGZvcm1FcnJvcn1cbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPnskTE9DQUxFW2Zvcm1FcnJvcl19PC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICB7L2VhY2h9XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICB7L2lmfVxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImJ1dHRvbnMgaXMtZ3JvdXBlZCBpcy1jZW50ZXJlZFwiPlxuICAgICAgICAgICAgICAgIHsjaWYgY2FuY2VsLmVuYWJsZWR9XG4gICAgICAgICAgICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPVwiYnV0dG9uIHtjYW5jZWwuY2xhc3NlcyA/IGNhbmNlbC5jbGFzc2VzIDogJyd9XCJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uY2xpY2s9e3JlamVjdEZvcm19PnskTE9DQUxFW2NhbmNlbC5jYXB0aW9uXX08L2J1dHRvblxuICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgey9pZn1cbiAgICAgICAgICAgICAgICB7I2lmIHN1Ym1pdC5lbmFibGVkfVxuICAgICAgICAgICAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICAgICAgICAgICAgICBvbmNsaWNrPXtzdWJtaXRGb3JtfVxuICAgICAgICAgICAgICAgICAgICAgICAgZGlzYWJsZWQ9e2Zvcm1JbnZhbGlkfVxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9XCJidXR0b24gaXMtcHJpbWFyeSBpcy1ob3ZlcmVkIHtzdWJtaXQuY2xhc3Nlc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gc3VibWl0LmNsYXNzZXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6ICcnfVwiPnskTE9DQUxFW3N1Ym1pdC5jYXB0aW9uXX08L2J1dHRvblxuICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgey9pZn1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICB7L2lmfVxuICAgIHsvaWZ9XG48L2Rpdj5cbiIsImltcG9ydCBub3RDb21tb24gZnJvbSBcIi4uLy4uL2NvbW1vblwiO1xuXG5jb25zdCBERUZBVUxUX1JVTEVTID0ge1xuICAgIG5vdFJlYWRvbmx5KHYpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHJlYWRvbmx5OiAhdixcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHJlYWRvbmx5KHYpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHJlYWRvbmx5OiB2LFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgZW5hYmxlKHYpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGRpc2FibGVkOiAhdixcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIGRpc2FibGUodikge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZGlzYWJsZWQ6IHYsXG4gICAgICAgIH07XG4gICAgfSxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIG5vdEZvcm1SdWxlcyB7XG4gICAgc3RhdGljICNSVUxFUyA9IHsgLi4uREVGQVVMVF9SVUxFUyB9O1xuXG4gICAgc3RhdGljIGFkZChuYW1lLCBmdW5jKSB7XG4gICAgICAgIGlmICghbm90Q29tbW9uLm9iakhhcyh0aGlzLiNSVUxFUywgbmFtZSkpIHtcbiAgICAgICAgICAgIHRoaXMuI1JVTEVTW25hbWVdID0gZnVuYztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHN0YXRpYyByZW1vdmUobmFtZSkge1xuICAgICAgICBpZiAoXG4gICAgICAgICAgICBub3RDb21tb24ub2JqSGFzKHRoaXMuI1JVTEVTLCBuYW1lKSAmJlxuICAgICAgICAgICAgIU9iamVjdC5rZXlzKERFRkFVTFRfUlVMRVMpLmluY2x1ZGVzKG5hbWUpXG4gICAgICAgICkge1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMuI1JVTEVTW25hbWVdO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc3RhdGljIGV4ZWMocnVsZSwgbWFzdGVyLCBzbGF2ZXMsIHZhbHVlLCBmb3JtKSB7XG4gICAgICAgIHJldHVybiB0aGlzLiNSVUxFU1tydWxlXSh2YWx1ZSwgbWFzdGVyLCBzbGF2ZXMsIGZvcm0pO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IFJ1bm5lciB9IGZyb20gXCJub3QtdmFsaWRhdGlvblwiO1xuXG5pbXBvcnQgeyBWQVJJQU5UUyB9IGZyb20gXCIuLi8uLi9MSUIuanNcIjtcbmltcG9ydCBMaWIgZnJvbSBcIi4uLy4uL2xpYi5qc1wiO1xuaW1wb3J0IG5vdENvbW1vbiBmcm9tIFwiLi4vLi4vY29tbW9uXCI7XG5pbXBvcnQgbm90QmFzZSBmcm9tIFwiLi4vLi4vYmFzZVwiO1xuXG5pbXBvcnQgVUlDb21tb24gZnJvbSBcIi4uLy4uLy4uL2VsZW1lbnRzL2NvbW1vbi5qc1wiO1xuaW1wb3J0IEZvcm1IZWxwZXJzIGZyb20gXCIuL2Zvcm0uaGVscGVycy5qc1wiO1xuaW1wb3J0IFVJRm9ybUNvbXBvbmVudCBmcm9tIFwiLi9mb3JtLnN2ZWx0ZVwiO1xuaW1wb3J0IG5vdEZvcm1SdWxlcyBmcm9tIFwiLi9mb3JtLnJ1bGVzLmpzXCI7XG5cbmltcG9ydCB7IERFRkFVTFRfU1RBVFVTX1NVQ0NFU1MgfSBmcm9tIFwiLi4vLi4vY29uc3RcIjtcblxuY29uc3QgREVGQVVMVF9DT05UQUlORVJfU0VMRUNUT1IgPSBcIi5mb3JtXCI7XG5jb25zdCBERUZBVUxUX0FDVElPTl9OQU1FID0gXCJkZWZhdWx0XCI7XG5cbmNsYXNzIG5vdEZvcm0gZXh0ZW5kcyBub3RCYXNlIHtcbiAgICAvL1VJIHJlbmRlcmVyIGNvbXBvbmVudCBjbGFzcyBjb25zdHJ1Y3RvclxuICAgICN1aUNvbXBvbmVudCA9IG51bGw7XG4gICAgLy9mb3JtIHZhbGlkYXRpb25cbiAgICAjdmFsaWRhdGlvblJ1bm5lciA9IG51bGw7XG4gICAgLy91aSBjb21wb25lbnRcbiAgICAjZm9ybSA9IG51bGw7XG4gICAgLy9tb2RlbC5hY3Rpb25cbiAgICAjYWN0aW9uID0gREVGQVVMVF9BQ1RJT05fTkFNRTtcbiAgICAvL2ZpZWxkcyBzY2hlbWFzXG4gICAgI2ZpZWxkcyA9IG5ldyBMaWIoKTsgLy9maWVsZHMgb2YgVUlcbiAgICAvL3ZhcmlhbnRzIHNldHMgZm9yIHNlbGVjdCBtZW51cyBhbmQgc28gb25cbiAgICAjdmFyaWFudHMgPSBudWxsOyAvL3ZhcmlhbnRzIGZvciBVSVxuXG4gICAgY29uc3RydWN0b3Ioe1xuICAgICAgICB0YXJnZXQgPSBudWxsLFxuICAgICAgICBuYW1lID0gXCJEZWZhdWx0XCIsXG4gICAgICAgIG9wdGlvbnMgPSB7fSxcbiAgICAgICAgd29ya2luZyA9IHt9LFxuICAgICAgICBkYXRhID0ge30sXG4gICAgICAgIHVpID0gVUlGb3JtQ29tcG9uZW50LCAvL2RlZmF1bHQgVUlcbiAgICB9KSB7XG4gICAgICAgIHN1cGVyKHtcbiAgICAgICAgICAgIHdvcmtpbmc6IHtcbiAgICAgICAgICAgICAgICBuYW1lOiBgJHtuYW1lfUZvcm1gLFxuICAgICAgICAgICAgICAgIC4uLndvcmtpbmcsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgb3B0aW9ucyxcbiAgICAgICAgICAgIGRhdGEsXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLiN2YXJpYW50cyA9IG5ldyBMaWIoVkFSSUFOVFMuZ2V0Q29udGVudCgpKTtcbiAgICAgICAgaWYgKHRhcmdldCkge1xuICAgICAgICAgICAgdGhpcy5zZXRPcHRpb25zKFwidGFyZ2V0XCIsIHRhcmdldCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy4jdWlDb21wb25lbnQgPSB1aTtcbiAgICAgICAgaWYgKG5vdENvbW1vbi5vYmpIYXMob3B0aW9ucywgXCJhY3Rpb25cIikpIHtcbiAgICAgICAgICAgIHRoaXMuI2FjdGlvbiA9IG9wdGlvbnMuYWN0aW9uO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaW5pdEZvcm0oKTtcbiAgICB9XG5cbiAgICBpbml0Rm9ybSgpIHtcbiAgICAgICAgaWYgKHRoaXMuZ2V0T3B0aW9ucyhcImF1dG9Jbml0XCIsIHRydWUpKSB7XG4gICAgICAgICAgICB0aGlzLmluaXRMaWJzKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuZ2V0T3B0aW9ucyhcImF1dG9SZW5kZXJcIiwgdHJ1ZSkpIHtcbiAgICAgICAgICAgIHRoaXMuaW5pdFVJKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpbml0TGlicygpIHtcbiAgICAgICAgdGhpcy5pbml0RmllbGRzKCk7XG4gICAgICAgIHRoaXMuaW5pdFZhcmlhbnRzKCk7XG4gICAgICAgIHRoaXMuaW5pdFZhbGlkYXRvcigpO1xuICAgIH1cblxuICAgIHJlSW5pdCgpIHtcbiAgICAgICAgdGhpcy5pbml0TGlicygpO1xuICAgICAgICB0aGlzLnVwZGF0ZVVJKCk7XG4gICAgICAgIHRoaXMucmVzZXRMb2FkaW5nKCk7XG4gICAgfVxuXG4gICAgaW5pdEZpZWxkcygpIHtcbiAgICAgICAgY29uc3QgbWFuaWZlc3QgPSB0aGlzLmdldEZvcm1NYW5pZmVzdCgpO1xuICAgICAgICBpZiAobm90Q29tbW9uLm9iakhhcyhtYW5pZmVzdCwgXCJmaWVsZHNcIikgJiYgdGhpcy4jZmllbGRzLmlzRW1wdHkoKSkge1xuICAgICAgICAgICAgdGhpcy4jZmllbGRzLmltcG9ydChtYW5pZmVzdC5maWVsZHMpOyAvL2FsbCBmaWVsZHMgYXZhaWxhYmxlIGluIG1vZGVsIG1hbmlmZXN0XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpbml0VmFyaWFudHMoKSB7XG4gICAgICAgIGlmICh0aGlzLmdldE9wdGlvbnMoXCJ2YXJpYW50c1wiKSkge1xuICAgICAgICAgICAgdGhpcy4jdmFyaWFudHMuaW1wb3J0KHRoaXMuZ2V0T3B0aW9ucyhcInZhcmlhbnRzXCIpKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vY3JlYXRpbmcgdmFsaWRhdG9ycyBydW5uZXIgZm9yIHRoaXMgc3BlY2lmaWMgZm9ybVxuICAgIGluaXRWYWxpZGF0b3IoKSB7XG4gICAgICAgIHRoaXMuI3ZhbGlkYXRpb25SdW5uZXIgPSBSdW5uZXIodGhpcy5nZXRGb3JtVmFsaWRhdG9ycygpKTtcbiAgICB9XG5cbiAgICBpbml0VUkoKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBwcm9wcyA9IHRoaXMuI2dldEZvcm1Qcm9wcyh7XG4gICAgICAgICAgICAgICAgbWFuaWZlc3Q6IHRoaXMuZ2V0Rm9ybU1hbmlmZXN0KCksXG4gICAgICAgICAgICAgICAgZm9ybU9wdGlvbnM6IHRoaXMuZ2V0Rm9ybU9wdGlvbnMoKSxcbiAgICAgICAgICAgICAgICBkYXRhOiB0aGlzLmdldEZvcm1EYXRhKCksXG4gICAgICAgICAgICAgICAgaW5qZWN0ZWRQcm9wczogdGhpcy5nZXRGb3JtSW5qZWN0ZWRQcm9wcygpLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBjb25zdCB0YXJnZXQgPSB0aGlzLmdldEZvcm1UYXJnZXRFbCgpO1xuICAgICAgICAgICAgd2hpbGUgKHRhcmdldC5jaGlsZHJlbi5sZW5ndGgpXG4gICAgICAgICAgICAgICAgdGFyZ2V0LnJlbW92ZUNoaWxkKHRhcmdldC5maXJzdENoaWxkKTtcbiAgICAgICAgICAgIHRoaXMuI2Zvcm0gPSBuZXcgdGhpcy4jdWlDb21wb25lbnQoe1xuICAgICAgICAgICAgICAgIHRhcmdldCxcbiAgICAgICAgICAgICAgICBwcm9wcyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy4jYmluZFVJRXZlbnRzKCk7XG4gICAgICAgICAgICB0aGlzLnZhbGlkYXRlRm9ybSgpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICB0aGlzLmVycm9yKGUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdXBkYXRlVUkoKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBwcm9wcyA9IHRoaXMuI2dldEZvcm1Qcm9wcyh7XG4gICAgICAgICAgICAgICAgbWFuaWZlc3Q6IHRoaXMuZ2V0Rm9ybU1hbmlmZXN0KCksXG4gICAgICAgICAgICAgICAgZm9ybU9wdGlvbnM6IHRoaXMuZ2V0Rm9ybU9wdGlvbnMoKSxcbiAgICAgICAgICAgICAgICBkYXRhOiB0aGlzLmdldEZvcm1EYXRhKCksXG4gICAgICAgICAgICAgICAgaW5qZWN0ZWRQcm9wczogdGhpcy5nZXRGb3JtSW5qZWN0ZWRQcm9wcygpLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLiNmb3JtLiRzZXQocHJvcHMpO1xuICAgICAgICAgICAgdGhpcy52YWxpZGF0ZUZvcm0oKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgdGhpcy5lcnJvcihlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgICNiaW5kVUlFdmVudHMoKSB7XG4gICAgICAgIHRoaXMuI2Zvcm0uJG9uKFwiY2hhbmdlXCIsICgpID0+IHRoaXMudmFsaWRhdGVGb3JtKCkpO1xuICAgICAgICB0aGlzLiNmb3JtLiRvbihcImNoYW5nZVwiLCAoZXYpID0+IHtcbiAgICAgICAgICAgIHRoaXMuZW1pdChcImNoYW5nZVwiLCBldi5kZXRhaWwpO1xuICAgICAgICAgICAgdGhpcy5lbWl0KGBjaGFuZ2UuJHtldi5kZXRhaWwuZmllbGR9YCwgZXYuZGV0YWlsLnZhbHVlKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuI2Zvcm0uJG9uKFwic3VibWl0XCIsIChldikgPT4gdGhpcy5zdWJtaXQoZXYuZGV0YWlsKSk7XG4gICAgICAgIHRoaXMuI2Zvcm0uJG9uKFwicmVqZWN0XCIsICgpID0+IHRoaXMucmVqZWN0KCkpO1xuICAgICAgICB0aGlzLiNmb3JtLiRvbihcImVycm9yXCIsICh7IGRldGFpbCB9KSA9PiB0aGlzLmVtaXQoXCJlcnJvclwiLCBkZXRhaWwpKTtcbiAgICAgICAgdGhpcy4jYmluZE1hc3RlclNsYXZlRXZlbnRzKCk7XG4gICAgfVxuXG4gICAgI2JpbmRNYXN0ZXJTbGF2ZUV2ZW50cygpIHtcbiAgICAgICAgY29uc3QgbWFzdGVycyA9IHRoaXMuZ2V0T3B0aW9ucyhcIm1hc3RlcnNcIiwgZmFsc2UpO1xuICAgICAgICBpZiAoIW1hc3RlcnMpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGxldCBtYXN0ZXIgaW4gbWFzdGVycykge1xuICAgICAgICAgICAgY29uc3QgcnVsZXMgPSBtYXN0ZXJzW21hc3Rlcl07XG4gICAgICAgICAgICBmb3IgKGxldCBydWxlTmFtZSBpbiBydWxlcykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJ1bGVTbGF2ZXMgPSBydWxlc1tydWxlTmFtZV07XG4gICAgICAgICAgICAgICAgdGhpcy4jYWRkTWFzdGVyU2xhdmVFdmVudHMocnVsZU5hbWUsIG1hc3RlciwgcnVsZVNsYXZlcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAjYWRkTWFzdGVyU2xhdmVFdmVudHMocnVsZSwgbWFzdGVyLCBzbGF2ZXMgPSBbXSkge1xuICAgICAgICB0aGlzLm9uKGBjaGFuZ2UuJHttYXN0ZXJ9YCwgKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICB0aGlzLiNleGVjU2xhdmVSdWxlKHJ1bGUsIG1hc3Rlciwgc2xhdmVzLCB2YWx1ZSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmVtaXQoYGNoYW5nZS4ke21hc3Rlcn1gLCB0aGlzLmdldEZvcm1EYXRhKClbbWFzdGVyXSk7XG4gICAgfVxuXG4gICAgI2V4ZWNTbGF2ZVJ1bGUocnVsZSwgbWFzdGVyLCBzbGF2ZXMsIHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IGNtZCA9IG5vdEZvcm1SdWxlcy5leGVjKHJ1bGUsIG1hc3Rlciwgc2xhdmVzLCB2YWx1ZSwgdGhpcyk7XG4gICAgICAgIHNsYXZlcy5mb3JFYWNoKChzbGF2ZUZpZWxkKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZUZpZWxkKHNsYXZlRmllbGQsIGNtZCk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGFzeW5jIHZhbGlkYXRlRm9ybSgpIHtcbiAgICAgICAgaWYgKHRoaXMuZ2V0T3B0aW9ucyhcInJlYWRvbmx5XCIsIGZhbHNlKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCB2YWxpZGF0aW9uUmVzdWx0ID0gYXdhaXQgdGhpcy4jdmFsaWRhdGlvblJ1bm5lcihcbiAgICAgICAgICAgICAgICB0aGlzLiNmb3JtLmNvbGxlY3REYXRhKCksXG4gICAgICAgICAgICAgICAgdGhpcy5nZXRGb3JtQWN0aW9uKClcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICB0aGlzLiNmb3JtLnVwZGF0ZUZvcm1WYWxpZGF0aW9uU3RhdHVzKHZhbGlkYXRpb25SZXN1bHQuZ2V0UmVwb3J0KCkpO1xuICAgICAgICAgICAgaWYgKCF2YWxpZGF0aW9uUmVzdWx0LmNsZWFuKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0KFwiZXJyb3JcIiwgdmFsaWRhdGlvblJlc3VsdC5nZXRSZXBvcnQoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGNvbnN0IHJlcG9ydCA9IHtcbiAgICAgICAgICAgICAgICBmb3JtOiBbVUlDb21tb24uRVJST1JfREVGQVVMVCwgZS5tZXNzYWdlXSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0aGlzLiNmb3JtICYmIHRoaXMuI2Zvcm0udXBkYXRlRm9ybVZhbGlkYXRpb25TdGF0dXMocmVwb3J0KTtcbiAgICAgICAgICAgIHRoaXMuZW1pdChcImVycm9yXCIsIHJlcG9ydCk7XG4gICAgICAgICAgICBub3RDb21tb24ucmVwb3J0KGUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc3VibWl0KGRhdGEpIHtcbiAgICAgICAgdGhpcy5lbWl0KFwic3VibWl0XCIsIGRhdGEpO1xuICAgIH1cblxuICAgIHJlamVjdCgpIHtcbiAgICAgICAgdGhpcy5lbWl0KFwicmVqZWN0XCIpO1xuICAgIH1cblxuICAgIC8vYmluZGluZyBldmVudCB0byBhY3R1YWwgVUlcbiAgICAkb24oKSB7XG4gICAgICAgIGlmICh0aGlzLiNmb3JtKSB7XG4gICAgICAgICAgICB0aGlzLiNmb3JtLiRvbiguLi5hcmd1bWVudHMpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc2V0TG9hZGluZygpIHtcbiAgICAgICAgdGhpcy5lbWl0KFwibG9hZGluZ1wiKTtcbiAgICAgICAgdGhpcy4jZm9ybS5zZXRMb2FkaW5nKCk7XG4gICAgfVxuXG4gICAgcmVzZXRMb2FkaW5nKCkge1xuICAgICAgICB0aGlzLmVtaXQoXCJsb2FkZWRcIik7XG4gICAgICAgIHRoaXMuI2Zvcm0ucmVzZXRMb2FkaW5nKCk7XG4gICAgfVxuXG4gICAgZGVzdHJveSgpIHtcbiAgICAgICAgdGhpcy5lbWl0KFwiZGVzdHJveVwiKTtcbiAgICAgICAgaWYgKHRoaXMuI2Zvcm0pIHtcbiAgICAgICAgICAgIHRoaXMuI2Zvcm0uJGRlc3Ryb3kgJiYgdGhpcy4jZm9ybS4kZGVzdHJveSgpO1xuICAgICAgICAgICAgdGhpcy4jZm9ybS5kZXN0cm95ICYmIHRoaXMuI2Zvcm0uZGVzdHJveSgpO1xuICAgICAgICAgICAgdGhpcy4jZm9ybSA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy4jdmFsaWRhdGlvblJ1bm5lciA9IG51bGw7XG4gICAgICAgIHRoaXMuI2FjdGlvbiA9IG51bGw7XG4gICAgICAgIHRoaXMuI2ZpZWxkcyA9IG51bGw7XG4gICAgICAgIHRoaXMuI3ZhcmlhbnRzID0gbnVsbDtcbiAgICAgICAgdGhpcy5zZXRPcHRpb25zKG51bGwpO1xuICAgICAgICB0aGlzLnNldFdvcmtpbmcobnVsbCk7XG4gICAgICAgIHRoaXMuc2V0RGF0YShudWxsKTtcbiAgICB9XG5cbiAgICAjZ2V0Rm9ybVByb3BzKHtcbiAgICAgICAgbWFuaWZlc3QsIC8vbW9kZWwgbWFuaWZlc3RcbiAgICAgICAgZm9ybU9wdGlvbnMgPSB7XG4gICAgICAgICAgICB1aToge30sXG4gICAgICAgICAgICBmaWVsZHM6IHt9LFxuICAgICAgICB9LCAvL3NvbWUgb3B0aW9uc1xuICAgICAgICBkYXRhID0gbnVsbCwgLy9pbml0aWFsIGRhdGEgZm9yIGZvcm1cbiAgICAgICAgaW5qZWN0ZWRQcm9wcyA9IHt9LFxuICAgIH0pIHtcbiAgICAgICAgY29uc3QgYWN0aW9uID0gdGhpcy4jYWN0aW9uO1xuICAgICAgICBpZiAodHlwZW9mIGZvcm1PcHRpb25zID09PSBcInVuZGVmaW5lZFwiIHx8IGZvcm1PcHRpb25zID09PSBudWxsKSB7XG4gICAgICAgICAgICBmb3JtT3B0aW9ucyA9IHtcbiAgICAgICAgICAgICAgICB1aToge30sXG4gICAgICAgICAgICAgICAgZmllbGRzOiB7fSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBmb3JtID0gRm9ybUhlbHBlcnMuaW5pdEZvcm1CeUZpZWxkKFxuICAgICAgICAgICAgLy9mb3JtIHNlZWQgb2JqZWN0XG4gICAgICAgICAgICB7fSxcbiAgICAgICAgICAgIC8qXG4gICAgICBGb3JtIHN0cnVjdHVyZVxuICAgICAgW1xuICAgICAgICAvL2VhY2ggaXRlbSBpcyBsaW5lIG9mIGZvcm1cbiAgICAgICAgLy9maWVsZCAtIGZpZWxkIHRha2VzIHdob2xlIGxpbmUgb2YgZm9ybVxuICAgICAgICAvL1tmaWVsZDEsIGZpZWxkMl0gLSBmZXcgZmllbGRzIGluIG9uZSBsaW5lXG4gICAgICAgIG5hbWVGaXJzdCwgbmFtZUxhc3RcbiAgICAgICAgW2FnZSwgY291bnRyeSwgbGFuZ3VhZ2VdLFxuICAgICAgICBbZW1haWwsIHRlbGVwaG9uZV1cbiAgICAgIF1cbiAgICAgICovXG4gICAgICAgICAgICBtYW5pZmVzdC5hY3Rpb25zW2FjdGlvbl0uZmllbGRzLCAvL2Zvcm0gZmllbGRzIHN0cnVjdHVyZVxuICAgICAgICAgICAgdGhpcy4jdmFyaWFudHMsIC8vdmFyaWFudHMgbGlicmFyeVxuICAgICAgICAgICAgdGhpcy4jZmllbGRzLCAvL2ZpZWxkcyBsaWJyYXJ5XG4gICAgICAgICAgICBmb3JtT3B0aW9ucy5maWVsZHMsIC8vZm9ybSB3aWRlIGZpZWxkcyBvcHRpb25zXG4gICAgICAgICAgICBkYXRhXG4gICAgICAgICk7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIC8vaWYgbm8gYXV0byBpbml0IG9mIGZvcm0gc3RydWN0dXJlLCBzZXQgdG8gbG9hZGluZyBzdGF0ZVxuICAgICAgICAgICAgbG9hZGluZzogIXRoaXMuZ2V0T3B0aW9ucyhcImF1dG9Jbml0XCIsIHRydWUpLFxuICAgICAgICAgICAgdGl0bGU6IG1hbmlmZXN0LmFjdGlvbnNbYWN0aW9uXS50aXRsZSxcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBtYW5pZmVzdC5hY3Rpb25zW2FjdGlvbl0uZGVzY3JpcHRpb24sXG4gICAgICAgICAgICBmaWVsZHM6IG1hbmlmZXN0LmFjdGlvbnNbYWN0aW9uXS5maWVsZHMsXG4gICAgICAgICAgICBmb3JtLFxuICAgICAgICAgICAgLy9pbmplY3Rpbmcgb3B0aW9ucyB0byBVSSBmcm9tIHRvcCBsZXZlbCBpbnB1dFxuICAgICAgICAgICAgLi4uZm9ybU9wdGlvbnMudWksIC8vZm9ybSBVSSBvcHRpb25zXG4gICAgICAgICAgICAuLi5pbmplY3RlZFByb3BzLFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIGdldE5hbWUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFdvcmtpbmcoXCJuYW1lXCIpO1xuICAgIH1cblxuICAgIGdldEZvcm1BY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLiNhY3Rpb247XG4gICAgfVxuXG4gICAgc2V0Rm9ybUFjdGlvbih2YWwpIHtcbiAgICAgICAgaWYgKHZhbCAmJiB2YWwgIT09IHRoaXMuI2FjdGlvbikge1xuICAgICAgICAgICAgdGhpcy4jYWN0aW9uID0gdmFsO1xuICAgICAgICAgICAgdGhpcy4jZm9ybSAmJiB0aGlzLiNmb3JtLiRkZXN0cm95KCk7XG4gICAgICAgICAgICB0aGlzLmluaXRGb3JtKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcm9jZXNzUmVzdWx0KHJlc3VsdCkge1xuICAgICAgICBpZiAocmVzdWx0LnN0YXR1cyA9PT0gREVGQVVMVF9TVEFUVVNfU1VDQ0VTUykge1xuICAgICAgICAgICAgdGhpcy5zZXRGb3JtU3VjY2VzcygpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnNldEZvcm1FcnJvcnMocmVzdWx0KTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqICAgRm9ybSB2YWxpZGF0aW9uIHJlc3VsdFxuICAgICAqKi9cbiAgICBzZXRGb3JtU3VjY2VzcygpIHtcbiAgICAgICAgdGhpcy4jZm9ybS5zaG93U3VjY2VzcygpO1xuICAgICAgICB0aGlzLmVtaXQoXCJzdWNjZXNzXCIpO1xuICAgIH1cblxuICAgIHNldEZvcm1FcnJvcnMocmVzdWx0KSB7XG4gICAgICAgIGlmICh0aGlzLmdldE9wdGlvbnMoXCJyZWFkb25seVwiLCBmYWxzZSkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzdGF0dXMgPSB7XG4gICAgICAgICAgICBmb3JtOiBbXSxcbiAgICAgICAgICAgIGZpZWxkczoge30sXG4gICAgICAgIH07XG4gICAgICAgIGlmIChyZXN1bHQubWVzc2FnZSkge1xuICAgICAgICAgICAgc3RhdHVzLmZvcm0ucHVzaChyZXN1bHQubWVzc2FnZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlc3VsdC5lcnJvcnMgJiYgT2JqZWN0LmtleXMocmVzdWx0LmVycm9ycykubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgc3RhdHVzLmZpZWxkcyA9IHsgLi4ucmVzdWx0LmVycm9ycyB9O1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuI2Zvcm0udXBkYXRlRm9ybVZhbGlkYXRpb25TdGF0dXMoc3RhdHVzKTtcbiAgICAgICAgdGhpcy5lbWl0KFwiZXJyb3JcIiwgc3RhdHVzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHZhcmlhbnQgYnkgY29sbGVjdGlvbiBuYW1lIGFuZCBpdGVtIGlkXG4gICAgICogQHBhcmFtIHtzdHJpbmd9ICAgICAgICAgbmFtZSAgbmFtZSBvZiB0aGUgdmFyaWFudHMgY29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7c3RyaW5nfG51bWJlcn0gIGlkICAgIGl0ZW0gaWRlbnRpZmljYXRvclxuICAgICAqIEByZXR1cm5zIHtvYmplY3R9ICAgICAgICAgICAgIGl0ZW1cbiAgICAgKiovXG4gICAgZ2V0VmFyaWFudChuYW1lLCBpZCkge1xuICAgICAgICBsZXQgbGliID0gdGhpcy4jdmFyaWFudHMuZ2V0KG5hbWUpO1xuICAgICAgICBsZXQgcmVzdWx0ID0gbGliLmZpbmQoKGl0ZW0pID0+IGl0ZW0uaWQgPT09IGlkKTtcbiAgICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICAvKioqXG4gICAgICogUmVkZWZpbmFibGUgZ2V0dGVyc1xuICAgICAqKi9cblxuICAgIGdldEZvcm1UYXJnZXRFbCgpIHtcbiAgICAgICAgY29uc3QgdGFyZ2V0RWwgPSB0aGlzLmdldE9wdGlvbnMoXCJ0YXJnZXRcIiwgREVGQVVMVF9DT05UQUlORVJfU0VMRUNUT1IpO1xuICAgICAgICBpZiAodGFyZ2V0RWwgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkge1xuICAgICAgICAgICAgcmV0dXJuIHRhcmdldEVsO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiB0YXJnZXRFbCA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0RWwpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRm9ybSBwYXJlbnQgZWxlbWVudCBpcyBub3QgZGVmaW5lZFwiKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdldEZvcm1WYWxpZGF0b3JzKCkge1xuICAgICAgICBpZiAodGhpcy5nZXRPcHRpb25zKFwidmFsaWRhdG9yc1wiKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0T3B0aW9ucyhcInZhbGlkYXRvcnNcIiwge30pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy4jbWlzc2luZ092ZXJyaWRlV2FybmluZyhcInZhbGlkYXRvcnNcIik7XG4gICAgICAgICAgICByZXR1cm4ge307XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXRGb3JtTWFuaWZlc3QoKSB7XG4gICAgICAgIGNvbnN0IG1vZGVsTmFtZSA9IHRoaXMuZ2V0TW9kZWxOYW1lKCk7XG4gICAgICAgIGlmIChtb2RlbE5hbWUgJiYgbm90Q29tbW9uLmdldEFwcCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gbm90Q29tbW9uLmdldEFwcCgpLmdldEludGVyZmFjZU1hbmlmZXN0KG1vZGVsTmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuZ2V0T3B0aW9ucyhcIm1hbmlmZXN0XCIsIHVuZGVmaW5lZCkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldE9wdGlvbnMoXCJtYW5pZmVzdFwiLCB7fSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLiNtaXNzaW5nT3ZlcnJpZGVXYXJuaW5nKFwibWFuaWZlc3RcIik7XG4gICAgICAgICAgICByZXR1cm4ge307XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXRGb3JtRGF0YSgpIHtcbiAgICAgICAgaWYgKHRoaXMuZ2V0RGF0YSgpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZXREYXRhKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLiNtaXNzaW5nT3ZlcnJpZGVXYXJuaW5nKFwiZGF0YVwiKTtcbiAgICAgICAgICAgIHJldHVybiB7fTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdldEZvcm1PcHRpb25zKCkge1xuICAgICAgICBpZiAoXG4gICAgICAgICAgICB0aGlzLmdldE9wdGlvbnMoXCJ1aVwiLCB1bmRlZmluZWQpIHx8XG4gICAgICAgICAgICB0aGlzLmdldE9wdGlvbnMoXCJmaWVsZHNcIiwgdW5kZWZpbmVkKVxuICAgICAgICApIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdWk6IHRoaXMuZ2V0T3B0aW9ucyhcInVpXCIsIHt9KSxcbiAgICAgICAgICAgICAgICBmaWVsZHM6IHRoaXMuZ2V0T3B0aW9ucyhcImZpZWxkc1wiLCB7fSksXG4gICAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy4jbWlzc2luZ092ZXJyaWRlV2FybmluZyhcIm9wdGlvbnNcIik7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHVpOiB7fSxcbiAgICAgICAgICAgICAgICBmaWVsZHM6IHt9LFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdldEZvcm1JbmplY3RlZFByb3BzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRPcHRpb25zKFwiaW5qZWN0ZWRcIiwge30pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE92ZXJyaWRlIGVtcHR5IG1lc3NhZ2VcbiAgICAgKiovXG4gICAgI21pc3NpbmdPdmVycmlkZVdhcm5pbmcobWlzc2luZykge1xuICAgICAgICB0aGlzLmVycm9yKFxuICAgICAgICAgICAgYCR7bWlzc2luZ30gZm9yICR7dGhpcy5nZXRXb3JraW5nKFwibmFtZVwiKX0gZm9ybSBpcyBub3QgZGVmaW5lZGBcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBGb3JtIG9wZXJhdGlvbnNcbiAgICAgKiovXG4gICAgY29sbGVjdERhdGEoKSB7XG4gICAgICAgIGlmICh0aGlzLmdldE9wdGlvbnMoXCJyZWFkb25seVwiLCBmYWxzZSkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldERhdGEoKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBkYXRhID0gdGhpcy4jZm9ybS5jb2xsZWN0RGF0YSgpO1xuICAgICAgICB0aGlzLnNldERhdGEoeyAuLi5kYXRhIH0pOyAvL3VwZGF0ZSBpbiBpbm5lciBzdG9yZVxuICAgICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG5cbiAgICB1cGRhdGVGaWVsZChmaWVsZE5hbWUsIHByb3BzKSB7XG4gICAgICAgIHRoaXMuI2Zvcm0udXBkYXRlRmllbGQoZmllbGROYW1lLCBwcm9wcyk7XG4gICAgfVxuXG4gICAgZ2V0TW9kZWwobmFtZSwgZGF0YSkge1xuICAgICAgICBpZiAodHlwZW9mIG5hbWUgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldEludGVyZmFjZShuYW1lKShkYXRhIHx8IHt9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldEludGVyZmFjZSgpKG5hbWUgfHwge30pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0SW50ZXJmYWNlKG5hbWUgPSBmYWxzZSkge1xuICAgICAgICByZXR1cm4gbm90Q29tbW9uLmdldEFwcCgpLmdldEludGVyZmFjZShuYW1lIHx8IHRoaXMuZ2V0TW9kZWxOYW1lKCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqICBSZXR1cm5zIGN1cnJlbnQgbW9kZWwgbmFtZVxuICAgICAqICBAcmV0dXJuIHtzdHJpbmd9XG4gICAgICovXG4gICAgZ2V0TW9kZWxOYW1lKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRPcHRpb25zKFwibW9kZWxcIik7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBub3RGb3JtO1xuIiwiPHNjcmlwdD5cblxuICBpbXBvcnQgVUlCdXR0b25zIGZyb20gJy4uLy4uLy4uL2VsZW1lbnRzL2J1dHRvbi91aS5idXR0b25zLnN2ZWx0ZSc7XG5cbiAgaW1wb3J0IHtcbiAgICAgIGNyZWF0ZUV2ZW50RGlzcGF0Y2hlcixcbiAgICAgIG9uTW91bnRcbiAgfSBmcm9tICdzdmVsdGUnO1xuXG4gIGxldCBkaXNwYXRjaCA9IGNyZWF0ZUV2ZW50RGlzcGF0Y2hlcigpO1xuXG5cbiAgLyoqXG4gICAqIEB0eXBlZGVmIHtPYmplY3R9IFByb3BzXG4gICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbbmFtZV1cbiAgICogQHByb3BlcnR5IHtib29sZWFufSBbc2hvd01vZGVzXVxuICAgKiBAcHJvcGVydHkge3N0cmluZ30gW21vZGVdXG4gICAqIEBwcm9wZXJ0eSB7YW55fSBbZm9ybXNdXG4gICAqL1xuXG4gIC8qKiBAdHlwZSB7UHJvcHN9ICovXG4gIGxldCB7XG4gICAgICBuYW1lID0gJ2RlZmF1bHQtZm9ybScsXG4gICAgICBzaG93TW9kZXMgPSBmYWxzZSxcbiAgICAgIG1vZGUgPSAkYmluZGFibGUoJ2RlZmF1bHQnKSxcbiAgICAgIGZvcm1zID0gW11cbiAgfSA9ICRwcm9wcygpO1xuXG4gIGZ1bmN0aW9uIHNldE1vZGUodmFsKSB7XG4gICAgICBtb2RlID0gdmFsO1xuICAgICAgZGlzcGF0Y2goJ21vZGUnLCB2YWwpO1xuICAgICAgdXBkYXRlTW9kZXNCdXR0b25zKCk7XG4gIH1cblxuICBsZXQgRk9STVNfQlVUVE9OUyA9ICRzdGF0ZShbXSk7XG5cbiAgZnVuY3Rpb24gdXBkYXRlTW9kZXNCdXR0b25zKCkge1xuICAgICAgRk9STVNfQlVUVE9OUyA9IGZvcm1zLmZpbHRlcihmb3JtID0+IHtcbiAgICAgICAgICByZXR1cm4gKG1vZGUgIT09IGZvcm0ubW9kZSk7XG4gICAgICB9KS5tYXAoZm9ybSA9PiB7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgdGl0bGU6IGZvcm0udGl0bGUsXG4gICAgICAgICAgICAgIG91dGxpbmVkOiB0cnVlLFxuICAgICAgICAgICAgICB0eXBlOiAnbGluaycsXG4gICAgICAgICAgICAgIGFjdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgIHNldE1vZGUoZm9ybS5tb2RlKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgIH07XG4gICAgICB9KTtcbiAgfVxuXG4gIG9uTW91bnQoKCkgPT4ge1xuICAgICAgdXBkYXRlTW9kZXNCdXR0b25zKCk7XG4gIH0pO1xuXG48L3NjcmlwdD5cblxuPGRpdiBjbGFzcz1cImJsb2NrLWNvbnRhaW5lclwiIGlkPVwie25hbWV9LWZvcm0tc2V0XCI+XG4gIDxkaXYgY2xhc3M9XCJmb3JtLXBhcGVyXCIgIGlkPVwie25hbWV9LWZvcm0tc2V0LWNvbnRhaW5lclwiPjwvZGl2PlxuICB7I2lmIHNob3dNb2Rlc31cbiAgPFVJQnV0dG9ucyBjZW50ZXJlZD17dHJ1ZX0gYmluZDp2YWx1ZXM9e0ZPUk1TX0JVVFRPTlN9IGNsYXNzZXM9J210LTQnIC8+XG4gIHsvaWZ9XG48L2Rpdj5cbiIsImltcG9ydCBub3RCYXNlIGZyb20gXCIuLi8uLi9iYXNlXCI7XG5cbmltcG9ydCBVSUZvcm1TZXRDb21wb25lbnQgZnJvbSBcIi4vZm9ybS5zZXQuc3ZlbHRlXCI7XG5pbXBvcnQgVUlGb3JtQ29tcG9uZW50IGZyb20gXCIuL2Zvcm0uc3ZlbHRlXCI7XG5cbmNvbnN0IERFRkFVTFRfQ09OVEFJTkVSX1NFTEVDVE9SID0gXCIuZm9ybS1zZXRcIjtcbmNvbnN0IERFRkFVTFRfRk9STV9TRVRfTkFNRSA9IFwiZm9ybS1zZXRcIjtcblxuY2xhc3Mgbm90Rm9ybVNldCBleHRlbmRzIG5vdEJhc2Uge1xuICAgICNmb3JtU2V0Q29tcG9uZW50ID0gbnVsbDtcbiAgICAjZm9ybUNvbXBvbmVudCA9IG51bGw7XG5cbiAgICAjZm9ybSA9IG51bGw7XG4gICAgI2ZyYW1lID0gbnVsbDtcblxuICAgIC8qXG4gIG5ldyBub3RGb3JtU2V0KHtcbiAgICBvcHRpb25zOntcbiAgICAgIHRhcmdldDogZWwsXG4gICAgICBmb3JtczogW3tcbiAgICAgICAgbW9kZTogJ2Zvcm0xJyxcbiAgICAgICAgdGl0bGU6ICdGb3JtIDEnLFxuICAgICAgICBmb3JtOiBmb3JtQ29uc3RydWN0b3IxIC8vY3VzdG9tIGNvbnN0cnVjdG9yc1xuICAgICAgfSx7XG4gICAgICAgIG1vZGU6ICdmb3JtMicsXG4gICAgICAgIHRpdGxlOiAnRm9ybSAyJyxcbiAgICAgICAgcHJvcHM6IHt9ICAgICAgICAgICAgIC8vcGFyYW1zIHRvIGNyZWF0ZSBub3RGb3JtIGluc3RhbmNlXG4gICAgICB9LHtcbiAgICAgICAgbW9kZTogJ2Zvcm0zJyxcbiAgICAgICAgdGl0bGU6ICdGb3JtIDMnLFxuICAgICAgICBmb3JtOiBmb3JtQ29uc3RydWN0b3IzIC8vY3VzdG9tIGNvbnN0cnVjdG9yc1xuICAgICAgfV1cbiAgICB9XG4gIH0pO1xuICAqL1xuXG4gICAgY29uc3RydWN0b3Ioe1xuICAgICAgICBvcHRpb25zID0ge30sXG4gICAgICAgIGZvcm1Db21wb25lbnQgPSBVSUZvcm1Db21wb25lbnQsXG4gICAgICAgIGZvcm1TZXRDb21wb25lbnQgPSBVSUZvcm1TZXRDb21wb25lbnQsXG4gICAgfSkge1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgICAgICAgbmFtZTogREVGQVVMVF9GT1JNX1NFVF9OQU1FLFxuICAgICAgICAgICAgICAgIG1vZGU6IFwiZGVmYXVsdFwiLFxuICAgICAgICAgICAgICAgIHNob3dNb2RlczogdHJ1ZSxcbiAgICAgICAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuI2Zvcm1Db21wb25lbnQgPSBmb3JtQ29tcG9uZW50O1xuICAgICAgICB0aGlzLiNmb3JtU2V0Q29tcG9uZW50ID0gZm9ybVNldENvbXBvbmVudDtcbiAgICAgICAgdGhpcy5zZXRGb3JtTW9kZSh0aGlzLmdldE9wdGlvbnMoXCJtb2RlXCIpKTtcbiAgICAgICAgdGhpcy5pbml0VUkoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbml0YWxpemluZyBmb3JtIGZyYW1lIG1vZGUsIHdpdGggc3dpdGNoZXJzIGJldHdlZW4gbW9kZXNcbiAgICAgKiovXG4gICAgaW5pdFVJKCkge1xuICAgICAgICBjb25zdCB0YXJnZXQgPSB0aGlzLmdldEZyYW1lVGFyZ2V0RWwoKTtcbiAgICAgICAgd2hpbGUgKHRhcmdldC5jaGlsZHJlbi5sZW5ndGgpIHRhcmdldC5yZW1vdmVDaGlsZCh0YXJnZXQuZmlyc3RDaGlsZCk7XG4gICAgICAgIHRoaXMuI2ZyYW1lID0gbmV3IHRoaXMuI2Zvcm1TZXRDb21wb25lbnQoe1xuICAgICAgICAgICAgdGFyZ2V0LFxuICAgICAgICAgICAgcHJvcHM6IHRoaXMuI2dldEZyYW1lUHJvcHMoKSxcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuI2ZyYW1lLiRvbihcIm1vZGVcIiwgKGV2KSA9PiB7XG4gICAgICAgICAgICB0aGlzLnNldEZvcm1Nb2RlKGV2LmRldGFpbCk7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZUZvcm0oKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMudXBkYXRlRm9ybSgpO1xuICAgIH1cblxuICAgIHNldEZvcm1Nb2RlKG5hbWUpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNNb2RlRXhpc3RzKG5hbWUpKSB7XG4gICAgICAgICAgICB0aGlzLnNldFdvcmtpbmcoXCJtb2RlXCIsIG5hbWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zZXRXb3JraW5nKFwibW9kZVwiLCB0aGlzLmdldEZpcnN0TW9kZSgpKTtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlRm9ybU1vZGVJblVJKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB1cGRhdGVGb3JtTW9kZUluVUkoKSB7XG4gICAgICAgIGlmICh0aGlzLiNmcmFtZSAmJiB0aGlzLmdldFdvcmtpbmcoXCJtb2RlXCIpICE9PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLiNmcmFtZS4kc2V0KHsgbW9kZTogdGhpcy5nZXRXb3JraW5nKFwibW9kZVwiKSB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdldEZvcm1Nb2RlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRXb3JraW5nKFwibW9kZVwiKTtcbiAgICB9XG5cbiAgICB1cGRhdGVGb3JtKCkge1xuICAgICAgICB0aGlzLmRlc3Ryb3lGb3JtKCk7XG4gICAgICAgIGlmICh0aGlzLmdldFdvcmtpbmcoXCJtb2RlXCIpICE9PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLnJlbmRlckZvcm0oKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJlbmRlckZvcm0oKSB7XG4gICAgICAgIGNvbnN0IHRhcmdldEVsID0gdGhpcy5nZXRGb3JtVGFyZ2V0RWwoKTtcbiAgICAgICAgY29uc3QgZm9ybUNvbmZpZyA9IHRoaXMuZ2V0Rm9ybUNvbmZpZygpO1xuICAgICAgICBpZiAoISh0YXJnZXRFbCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50ICYmIGZvcm1Db25maWcpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJlcnJvciB3aGlsZSBmb3JtIHJlbmRlcmluZ1wiKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjaGFuZ2VNb2RlID0gKG1vZGUpID0+IHtcbiAgICAgICAgICAgIHRoaXMuc2V0Rm9ybU1vZGUobW9kZSk7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZUZvcm0oKTtcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKGZvcm1Db25maWcuZm9ybSkge1xuICAgICAgICAgICAgd2hpbGUgKHRhcmdldEVsLmNoaWxkcmVuLmxlbmd0aClcbiAgICAgICAgICAgICAgICB0YXJnZXRFbC5yZW1vdmVDaGlsZCh0YXJnZXRFbC5maXJzdENoaWxkKTtcbiAgICAgICAgICAgIHRoaXMuI2Zvcm0gPSBuZXcgZm9ybUNvbmZpZy5mb3JtKHtcbiAgICAgICAgICAgICAgICBvcHRpb25zOiB7IHRhcmdldDogdGFyZ2V0RWwsIGNoYW5nZU1vZGUgfSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2UgaWYgKGZvcm1Db25maWcucHJvcHMpIHtcbiAgICAgICAgICAgIHRoaXMuI2Zvcm0gPSBuZXcgdGhpcy4jZm9ybUNvbXBvbmVudCh7XG4gICAgICAgICAgICAgICAgdGFyZ2V0OiB0YXJnZXRFbCxcbiAgICAgICAgICAgICAgICAuLi5mb3JtQ29uZmlnLnByb3BzLFxuICAgICAgICAgICAgICAgIGNoYW5nZU1vZGUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdldEZvcm1Db25maWcoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldE9wdGlvbnMoXCJmb3Jtc1wiKS5maW5kKFxuICAgICAgICAgICAgKGZvcm0pID0+IGZvcm0ubW9kZSA9PT0gdGhpcy5nZXRGb3JtTW9kZSgpXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgZGVzdHJveUZvcm0oKSB7XG4gICAgICAgIGNvbnN0IGNvbnRhaW5lckVsID0gdGhpcy5nZXRGb3JtVGFyZ2V0RWwoKTtcbiAgICAgICAgaWYgKGNvbnRhaW5lckVsKSB7XG4gICAgICAgICAgICB3aGlsZSAoY29udGFpbmVyRWwuZmlyc3RDaGlsZCkge1xuICAgICAgICAgICAgICAgIGNvbnRhaW5lckVsLnJlbW92ZUNoaWxkKGNvbnRhaW5lckVsLmxhc3RDaGlsZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuI2Zvcm0gJiYgdGhpcy4jZm9ybS4kZGVzdHJveSkge1xuICAgICAgICAgICAgdGhpcy4jZm9ybS4kZGVzdHJveSgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuI2Zvcm0gPSBudWxsO1xuICAgIH1cblxuICAgIGRlc3Ryb3lGcmFtZSgpIHtcbiAgICAgICAgaWYgKHRoaXMuI2ZyYW1lICYmIHRoaXMuI2ZyYW1lLiRkZXN0cm95KSB7XG4gICAgICAgICAgICB0aGlzLiNmcmFtZS4kZGVzdHJveSgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuI2ZyYW1lID0gbnVsbDtcbiAgICB9XG5cbiAgICBpc01vZGVFeGlzdHMobW9kZSkge1xuICAgICAgICBjb25zdCBmb3JtcyA9IHRoaXMuZ2V0T3B0aW9ucyhcImZvcm1zXCIsIFtdKTtcbiAgICAgICAgcmV0dXJuIGZvcm1zLnNvbWUoKGl0ZW0pID0+IGl0ZW0ubW9kZSA9PT0gbW9kZSk7XG4gICAgfVxuXG4gICAgZ2V0Rmlyc3RNb2RlKCkge1xuICAgICAgICBjb25zdCBmb3JtcyA9IHRoaXMuZ2V0T3B0aW9ucyhcImZvcm1zXCIsIFtdKTtcbiAgICAgICAgaWYgKGZvcm1zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHJldHVybiBmb3Jtc1swXS5tb2RlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGRlc3Ryb3koKSB7XG4gICAgICAgIHRoaXMuI2Zvcm1TZXRDb21wb25lbnQgPSBudWxsO1xuICAgICAgICB0aGlzLiNmb3JtQ29tcG9uZW50ID0gbnVsbDtcbiAgICAgICAgdGhpcy5kZXN0cm95Rm9ybSgpO1xuICAgICAgICB0aGlzLmRlc3Ryb3lGcmFtZSgpO1xuICAgICAgICB0aGlzLnNldERhdGEobnVsbCk7XG4gICAgICAgIHRoaXMuc2V0T3B0aW9ucyhudWxsKTtcbiAgICAgICAgdGhpcy5zZXRXb3JraW5nKG51bGwpO1xuICAgIH1cblxuICAgIGdldEZyYW1lVGFyZ2V0RWwoKSB7XG4gICAgICAgIGNvbnN0IHRhcmdldCA9IHRoaXMuZ2V0T3B0aW9ucyhcInRhcmdldFwiLCBERUZBVUxUX0NPTlRBSU5FUl9TRUxFQ1RPUik7XG4gICAgICAgIGlmICh0YXJnZXQgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkge1xuICAgICAgICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdGFyZ2V0ID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICByZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiZm9ybSBzZXQgdGFyZ2V0IGlzIG5vdCBIVE1MRWxlbWVudCBvciBzdHJpbmdcIik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXRGb3JtVGFyZ2V0RWwoKSB7XG4gICAgICAgIGNvbnN0IG5hbWUgPSB0aGlzLmdldE9wdGlvbnMoXCJuYW1lXCIsIERFRkFVTFRfRk9STV9TRVRfTkFNRSk7XG4gICAgICAgIHJldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAjJHtuYW1lfS1mb3JtLXNldC1jb250YWluZXJgKTtcbiAgICB9XG5cbiAgICAjZ2V0RnJhbWVQcm9wcygpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHNob3dNb2RlczogdGhpcy5nZXRPcHRpb25zKFwic2hvd01vZGVzXCIsIHRydWUpLFxuICAgICAgICAgICAgbW9kZTogdGhpcy5nZXRGb3JtTW9kZSgpLFxuICAgICAgICAgICAgZm9ybXM6IHRoaXMuZ2V0T3B0aW9ucyhcImZvcm1zXCIsIFtdKSxcbiAgICAgICAgICAgIG5hbWU6IHRoaXMuZ2V0T3B0aW9ucyhcIm5hbWVcIiwgREVGQVVMVF9GT1JNX1NFVF9OQU1FKSxcbiAgICAgICAgfTtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IG5vdEZvcm1TZXQ7XG4iLCI8c2NyaXB0PlxuXG4gIGltcG9ydCB7TE9DQUxFfSBmcm9tICcuLi8uLi8uLi9sb2NhbGUnO1xuXG4gIC8qKlxuICAgKiBAdHlwZWRlZiB7T2JqZWN0fSBQcm9wc1xuICAgKiBAcHJvcGVydHkge3N0cmluZ30gW3Jvb3RdXG4gICAqIEBwcm9wZXJ0eSB7YW55fSBbaXRlbXNdXG4gICAqIEBwcm9wZXJ0eSB7YW55fSBbZ29dXG4gICAqL1xuXG4gIC8qKiBAdHlwZSB7UHJvcHN9ICovXG4gIGxldCB7IHJvb3QgPSAnJywgaXRlbXMgPSBbXSwgZ28gPSBudWxsIH0gPSAkcHJvcHMoKTtcblxuICBmdW5jdGlvbiBvbkNsaWNrKGV2KXtcbiAgICAgIGlmKHR5cGVvZiBnbyA9PT0gJ2Z1bmN0aW9uJyl7XG4gICAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICBnbyhldi5jdXJyZW50VGFyZ2V0LmRhdGFzZXQuaHJlZik7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfWVsc2V7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gIH1cblxuPC9zY3JpcHQ+XG5cbjxuYXYgY2xhc3M9XCJicmVhZGNydW1iXCIgYXJpYS1sYWJlbD1cImJyZWFkY3J1bWJzXCI+XG4gIDx1bD5cbiAgICB7I2VhY2ggaXRlbXMgYXMgbGluaywgaW5kZXh9XG4gICAgeyNpZiAoaXRlbXMubGVuZ3RoID09PSAoaW5kZXggKyAxKSkgfVxuICAgIDxsaSBjbGFzcz1cImlzLWFjdGl2ZVwiPjxhIGhyZWY9XCJ7cm9vdH17bGluay51cmx9XCIgZGF0YS1ocmVmPVwie2xpbmsudXJsfVwiIGFyaWEtY3VycmVudD1cInBhZ2VcIj57JExPQ0FMRVtsaW5rLnRpdGxlXX08L2E+PC9saT5cbiAgICB7OmVsc2UgfVxuICAgIHsjaWYgbGluay51cmwgPT09IGZhbHNlIH1cbiAgICA8bGkgY2xhc3M9XCJpcy1wbGFpbi1jcnVtYlwiPnskTE9DQUxFW2xpbmsudGl0bGVdfTwvbGk+XG4gICAgezplbHNlfVxuICAgIDxsaT48YSBocmVmPVwie3Jvb3R9e2xpbmsudXJsfVwiIGRhdGEtaHJlZj1cIntsaW5rLnVybH1cIiBvbmNsaWNrPXtvbkNsaWNrfT57JExPQ0FMRVtsaW5rLnRpdGxlXX08L2E+PC9saT5cbiAgICB7L2lmfVxuICAgIHsvaWZ9XG4gICAgey9lYWNofVxuICA8L3VsPlxuPC9uYXY+XG4iLCJjbGFzcyBub3RCcmVhZGNydW1ic3tcblxuICAgIHN0YXRpYyBVSUNvbnN0cnVjdG9yID0gbnVsbDtcbiAgICBzdGF0aWMgdWkgPSBudWxsO1xuICAgIHN0YXRpYyBoZWFkID0gW107XG4gICAgc3RhdGljIHRhaWwgPSBbXTtcblxuICAgIHN0YXRpYyByZW5kZXIoe3RhcmdldCwgcm9vdCA9ICcnLCBuYXZpZ2F0ZX0pe1xuICAgICAgICB0aGlzLnJlbW92ZSgpO1xuICAgICAgICBpZihub3RCcmVhZGNydW1icy5VSUNvbnN0cnVjdG9yKXtcbiAgICAgICAgICAgIHRoaXMudWkgPSBuZXcgbm90QnJlYWRjcnVtYnMuVUlDb25zdHJ1Y3Rvcih7XG4gICAgICAgICAgICAgICAgdGFyZ2V0LFxuICAgICAgICAgICAgICAgIHByb3BzOntcbiAgICAgICAgICAgICAgICAgICAgaXRlbXM6ICB0aGlzLmdldEJyZWFkY3J1bWJzKCksXG4gICAgICAgICAgICAgICAgICAgIHJvb3Q6ICAgcm9vdCxcbiAgICAgICAgICAgICAgICAgICAgZ286ICAgICAgbmF2aWdhdGVcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHN0YXRpYyBzZXRIZWFkKGhlYWQpe1xuICAgICAgICB0aGlzLmhlYWQuc3BsaWNlKDAsdGhpcy5oZWFkLmxlbmd0aCwuLi5oZWFkKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgc3RhdGljIHNldFRhaWwodGFpbCl7XG4gICAgICAgIHRoaXMudGFpbC5zcGxpY2UoMCwgdGhpcy50YWlsLmxlbmd0aCwuLi50YWlsKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgc3RhdGljIGdldEJyZWFkY3J1bWJzKCl7XG4gICAgICAgIGxldCBjcnVtYnMgPSBbXTtcbiAgICAgICAgY3J1bWJzLnB1c2goLi4udGhpcy5oZWFkKTtcbiAgICAgICAgY3J1bWJzLnB1c2goLi4udGhpcy50YWlsKTtcbiAgICAgICAgcmV0dXJuIGNydW1icztcbiAgICB9XG5cbiAgICBzdGF0aWMgdXBkYXRlKCl7XG4gICAgICAgIGlmKHRoaXMudWkpe1xuICAgICAgICAgICAgdGhpcy51aS4kc2V0KHsgaXRlbXM6IHRoaXMuZ2V0QnJlYWRjcnVtYnMoKSB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHN0YXRpYyByZW1vdmUoKXtcbiAgICAgICAgaWYgKHRoaXMudWkpIHtcbiAgICAgICAgICAgIHRoaXMudWkuJGRlc3Ryb3koKTtcbiAgICAgICAgICAgIHRoaXMudWkgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBub3RCcmVhZGNydW1icztcbiIsImltcG9ydCBVSUJyZWFkY3J1bWJzIGZyb20gJy4vdWkuYnJlYWRjcnVtYnMuc3ZlbHRlJztcbmltcG9ydCBub3RCcmVhZGNydW1icyBmcm9tICcuL2JyZWFkY3J1bWJzLmpzJztcblxubm90QnJlYWRjcnVtYnMuVUlDb25zdHJ1Y3RvciA9IFVJQnJlYWRjcnVtYnM7XG5cbmV4cG9ydCBkZWZhdWx0IG5vdEJyZWFkY3J1bWJzO1xuIiwiaW1wb3J0IHsgQ09NUE9ORU5UUyB9IGZyb20gXCIuLi8uLi9MSUIuanNcIjtcbmltcG9ydCBVSUNvbW1vbiBmcm9tIFwiLi4vLi4vLi4vZWxlbWVudHMvY29tbW9uLmpzXCI7XG5cbmNsYXNzIE1lbnUge1xuICAgIHN0YXRpYyBNQVhfVE9VQ0hfV0lEVEggPSAxMDIzO1xuXG4gICAgc3RhdGljIERFRkFVTFQgPSB7XG4gICAgICAgIHNlY3Rpb246IFwiYW55XCIsXG4gICAgICAgIHNlY3Rpb25UaXRsZTogXCLQnNC10L3RjlwiLFxuICAgICAgICBwcmlvcml0eTogMCxcbiAgICAgICAgLy9saW5rLCBidXR0b24sIGRyb3Bkb3duLCBjb21wb25lbnRcbiAgICAgICAgdHlwZTogXCJsaW5rXCIsXG4gICAgICAgIG9wZW46IGZhbHNlLFxuICAgIH07XG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAdHlwZSB7aW1wb3J0KCcuLi8uLi9hcHAuanMnKS5kZWZhdWx0IHwgbnVsbH1cbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlcm9mIE1lbnVcbiAgICAgKi9cbiAgICBzdGF0aWMgYXBwID0gbnVsbDtcbiAgICBzdGF0aWMgZGlyZWN0TmF2aWdhdGlvbiA9IGZhbHNlO1xuICAgIHN0YXRpYyBtZW51O1xuICAgIHN0YXRpYyBvcHRpb25zID0ge1xuICAgICAgICBkaXJlY3ROYXZpZ2F0aW9uOiBmYWxzZSxcbiAgICAgICAgbmF2aWdhdGU6ICh1cmxzKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmhpZGUoKTtcbiAgICAgICAgICAgIGlmICghdGhpcy5pc0RpcmVjdE5hdmlnYXRpb24oKSAmJiB0aGlzLmFwcCkge1xuICAgICAgICAgICAgICAgIGxldCBmdW5jID0gdGhpcy5hcHAuZ2V0V29ya2luZyhcInJvdXRlclwiKTtcbiAgICAgICAgICAgICAgICBpZiAoZnVuYykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZnVuYy5uYXZpZ2F0ZSh1cmxzLnNob3J0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkb2N1bWVudC5sb2NhdGlvbi5hc3NpZ24odXJscy5mdWxsKTtcbiAgICAgICAgfSxcbiAgICB9O1xuXG4gICAgc3RhdGljIGhpZGUoKSB7fVxuXG4gICAgc3RhdGljIGl0ZW1zID0gW107XG4gICAgc3RhdGljIHNlY3Rpb25zID0gW107XG4gICAgc3RhdGljIGxvY2F0aW9uO1xuICAgIHN0YXRpYyBpbnRlcnZhbDtcblxuICAgIHN0YXRpYyBzZXRBcHAoYXBwKSB7XG4gICAgICAgIGlmICghdGhpcy5hcHApIHtcbiAgICAgICAgICAgIHRoaXMuYXBwID0gYXBwO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHN0YXRpYyBzZXRPcHRpb25zKG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5vcHRpb25zID0geyAuLi50aGlzLm9wdGlvbnMsIC4uLm9wdGlvbnMgfTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgc3RhdGljIGdldE9wdGlvbnNQYXRoVG8od2hhdCkge1xuICAgICAgICByZXR1cm4gYG1lbnUuJHt0aGlzLm9wdGlvbnMudHlwZX0uJHt3aGF0fWA7XG4gICAgfVxuXG4gICAgc3RhdGljIGlzRGlyZWN0TmF2aWdhdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYXBwXG4gICAgICAgICAgICA/IHRoaXMuYXBwLmdldE9wdGlvbnMoXG4gICAgICAgICAgICAgICAgdGhpcy5nZXRPcHRpb25zUGF0aFRvKFwiZGlyZWN0TmF2aWdhdGlvblwiKSxcbiAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnMuZGlyZWN0TmF2aWdhdGlvblxuICAgICAgICAgICAgKVxuICAgICAgICAgICAgOiB0aGlzLm9wdGlvbnMuZGlyZWN0TmF2aWdhdGlvbjtcbiAgICB9XG5cbiAgICBzdGF0aWMgZ2V0T3B0aW9ucygpIHtcbiAgICAgICAgaWYgKHRoaXMuYXBwKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGJyYW5kOiB0aGlzLmFwcC5nZXRPcHRpb25zKFwiYnJhbmRcIiwgdGhpcy5vcHRpb25zLmJyYW5kKSxcbiAgICAgICAgICAgICAgICBpdGVtczogdGhpcy5hcHAuZ2V0T3B0aW9ucyhcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5nZXRPcHRpb25zUGF0aFRvKFwiaXRlbXNcIiksXG4gICAgICAgICAgICAgICAgICAgIHRoaXMub3B0aW9ucy5pdGVtc1xuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgc2VjdGlvbnM6IHRoaXMuYXBwLmdldE9wdGlvbnMoXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZ2V0T3B0aW9uc1BhdGhUbyhcInNlY3Rpb25zXCIpLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnMuc2VjdGlvbnNcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgIHRhcmdldFNlbGVjdG9yOiB0aGlzLmFwcC5nZXRPcHRpb25zKFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmdldE9wdGlvbnNQYXRoVG8oXCJ0YXJnZXRTZWxlY3RvclwiKSxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vcHRpb25zLnRhcmdldFNlbGVjdG9yXG4gICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICB0b2dnbGVTZWxlY3RvcjogdGhpcy5hcHAuZ2V0T3B0aW9ucyhcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5nZXRPcHRpb25zUGF0aFRvKFwidG9nZ2xlU2VsZWN0b3JcIiksXG4gICAgICAgICAgICAgICAgICAgIHRoaXMub3B0aW9ucy50b2dnbGVTZWxlY3RvclxuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgb3BlbjogdGhpcy5hcHAuZ2V0T3B0aW9ucyhcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5nZXRPcHRpb25zUGF0aFRvKFwib3BlblwiKSxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vcHRpb25zLm9wZW5cbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgIGRpcmVjdE5hdmlnYXRpb246IHRoaXMuYXBwLmdldE9wdGlvbnMoXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZ2V0T3B0aW9uc1BhdGhUbyhcImRpcmVjdE5hdmlnYXRpb25cIiksXG4gICAgICAgICAgICAgICAgICAgIHRoaXMub3B0aW9ucy5kaXJlY3ROYXZpZ2F0aW9uXG4gICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICByb290OiB0aGlzLmFwcC5nZXRPcHRpb25zKFwicm91dGVyLnJvb3RcIiwgdGhpcy5vcHRpb25zLnJvb3QpLFxuICAgICAgICAgICAgICAgIG5hdmlnYXRlOiB0aGlzLm9wdGlvbnMubmF2aWdhdGUuYmluZCh0aGlzKSxcbiAgICAgICAgICAgICAgICBnZXRDb21wb25lbnQ6IHRoaXMuZ2V0Q29tcG9uZW50LmJpbmQodGhpcyksXG4gICAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHN0YXRpYyBnZXRDb21wb25lbnQobmFtZSkge1xuICAgICAgICBpZiAoQ09NUE9ORU5UUy5jb250YWlucyhuYW1lKSkge1xuICAgICAgICAgICAgcmV0dXJuIENPTVBPTkVOVFMuZ2V0KG5hbWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc3RhdGljIGluaXRGaWVsZChsaXN0LCBmaWVsZHMgPSBbXSkge1xuICAgICAgICBsaXN0LmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICAgICAgICAgIGZpZWxkcy5mb3JFYWNoKChmaWVsZCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICghT2JqZWN0Lmhhc093bihpdGVtLCBmaWVsZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgaXRlbVtmaWVsZF0gPSB0aGlzLkRFRkFVTFRbZmllbGRdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKE9iamVjdC5oYXNPd24oaXRlbSwgXCJpdGVtc1wiKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuaW5pdEZpZWxkKGl0ZW0uaXRlbXMsIGZpZWxkcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHN0YXRpYyBzb3J0TGlzdChsaXN0KSB7XG4gICAgICAgIGxpc3Quc29ydCgoaXRlbTEsIGl0ZW0yKSA9PiB7XG4gICAgICAgICAgICBpZiAoT2JqZWN0Lmhhc093bihpdGVtMSwgXCJpdGVtc1wiKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuc29ydExpc3QoaXRlbTEuaXRlbXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKE9iamVjdC5oYXNPd24oaXRlbTIsIFwiaXRlbXNcIikpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNvcnRMaXN0KGl0ZW0yLml0ZW1zKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpdGVtMS5wcmlvcml0eSA9PT0gaXRlbTIucHJpb3JpdHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaXRlbTEudGl0bGUgPiBpdGVtMi50aXRsZSA/IDEgOiAtMTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGl0ZW0xLnByaW9yaXR5IDwgaXRlbTIucHJpb3JpdHkgPyAxIDogLTE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHN0YXRpYyByZW1vdmVEdWJsaWNhdGVzKHNlY3Rpb25zKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2VjdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGxldCBwcmlvcml0eSA9IHNlY3Rpb25zW2ldLnByaW9yaXR5O1xuICAgICAgICAgICAgc2VjdGlvbnNcbiAgICAgICAgICAgICAgICAuZmlsdGVyKChzZWN0aW9uKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzZWN0aW9uLmlkID09PSBzZWN0aW9uc1tpXS5pZDtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5mb3JFYWNoKChpdGVtLCBpbmR4KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpbmR4ID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW0ucHJpb3JpdHkgPCBwcmlvcml0eSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcHJpb3JpdHkgPSBpdGVtLnByaW9yaXR5O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHNlY3Rpb25zLnNwbGljZShzZWN0aW9ucy5pbmRleE9mKGl0ZW0pLCAxKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHNlY3Rpb25zW2ldLnByaW9yaXR5ID0gcHJpb3JpdHk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNlY3Rpb25zO1xuICAgIH1cblxuICAgIHN0YXRpYyBwcmVwYXJlRGF0YSgpIHtcbiAgICAgICAgbGV0IGl0ZW1zID0gW107XG4gICAgICAgIGl0ZW1zLnB1c2goLi4udGhpcy5nZXRPcHRpb25zKCkuaXRlbXMpO1xuICAgICAgICBsZXQgc2VjdGlvbnMgPSBbXTtcbiAgICAgICAgc2VjdGlvbnMucHVzaCguLi50aGlzLmdldE9wdGlvbnMoKS5zZWN0aW9ucyk7XG5cbiAgICAgICAgdGhpcy5pbml0RmllbGQoc2VjdGlvbnMsIFtcInByaW9yaXR5XCJdKTtcbiAgICAgICAgdGhpcy5yZW1vdmVEdWJsaWNhdGVzKHNlY3Rpb25zKTtcbiAgICAgICAgdGhpcy5pbml0RmllbGQoaXRlbXMsIFtcInByaW9yaXR5XCIsIFwic2VjdGlvblwiLCBcInR5cGVcIl0pO1xuICAgICAgICB0aGlzLnNvcnRMaXN0KHNlY3Rpb25zKTtcblxuICAgICAgICBzZWN0aW9ucy5wdXNoKHtcbiAgICAgICAgICAgIGlkOiB0aGlzLkRFRkFVTFQuc2VjdGlvbixcbiAgICAgICAgICAgIHRpdGxlOiB0aGlzLkRFRkFVTFQuc2VjdGlvblRpdGxlLFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5zb3J0TGlzdChpdGVtcyk7XG5cbiAgICAgICAgdGhpcy5zZWN0aW9ucyA9IHNlY3Rpb25zO1xuICAgICAgICB0aGlzLml0ZW1zID0gaXRlbXM7XG4gICAgfVxuXG4gICAgc3RhdGljIHJlbW92ZSgpIHtcbiAgICAgICAgaWYgKHRoaXMubWVudSkge1xuICAgICAgICAgICAgdGhpcy5tZW51LiRkZXN0cm95KCk7XG4gICAgICAgICAgICB0aGlzLm1lbnUgPSBudWxsO1xuICAgICAgICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLmludGVydmFsKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHN0YXRpYyB1cGRhdGVJbmRpY2F0b3Ioc2VjdGlvbklkLCBpdGVtSWQsIHN0YXRlKSB7XG4gICAgICAgIHRoaXMudXBkYXRlU2VjdGlvbihzZWN0aW9uSWQsIChzZWN0aW9uKSA9PiB7XG4gICAgICAgICAgICBzZWN0aW9uLmluZGljYXRvci5zdGF0ZSA9IHN0YXRlO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy51cGRhdGVJdGVtKGl0ZW1JZCwgKGl0ZW0pID0+IHtcbiAgICAgICAgICAgIGl0ZW0uaW5kaWNhdG9yLnN0YXRlID0gc3RhdGU7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHN0YXRpYyB1cGRhdGVUYWcoc2VjdGlvbklkLCBpdGVtSWQsIHRhZykge1xuICAgICAgICB0aGlzLnVwZGF0ZVNlY3Rpb24oc2VjdGlvbklkLCAoc2VjdGlvbikgPT4ge1xuICAgICAgICAgICAgc2VjdGlvbi50YWcgPSB0YWc7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnVwZGF0ZUl0ZW0oaXRlbUlkLCAoaXRlbSkgPT4ge1xuICAgICAgICAgICAgaXRlbS50YWcgPSB0YWc7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHN0YXRpYyB1cGRhdGVTZWN0aW9uVGFnKHNlY3Rpb25JZCwgdGFnKSB7XG4gICAgICAgIHRoaXMudXBkYXRlU2VjdGlvbihzZWN0aW9uSWQsIChzZWN0aW9uKSA9PiB7XG4gICAgICAgICAgICBzZWN0aW9uLnRhZyA9IHsgLi4uc2VjdGlvbi50YWcsIC4uLnRhZyB9O1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBzdGF0aWMgdXBkYXRlSXRlbVRhZyhpdGVtSWQsIHRhZykge1xuICAgICAgICB0aGlzLnVwZGF0ZUl0ZW0oaXRlbUlkLCAoaXRlbSkgPT4ge1xuICAgICAgICAgICAgaXRlbS50YWcgPSB7IC4uLml0ZW0udGFnLCAuLi50YWcgfTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgc3RhdGljIHVwZGF0ZVNlY3Rpb24oc2VjdGlvbklkLCBwcm9jKSB7XG4gICAgICAgIGlmICh0aGlzLnNlY3Rpb25zICYmIHNlY3Rpb25JZCkge1xuICAgICAgICAgICAgZm9yIChsZXQgc2VjdGlvbiBpbiB0aGlzLnNlY3Rpb25zKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuc2VjdGlvbnNbc2VjdGlvbl0uaWQgIT09IHNlY3Rpb25JZCkgY29udGludWU7XG4gICAgICAgICAgICAgICAgcHJvYyh0aGlzLnNlY3Rpb25zW3NlY3Rpb25dKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLm1lbnUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm1lbnUuJHNldCh7IHNlY3Rpb25zOiB0aGlzLnNlY3Rpb25zIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgc3RhdGljIHVwZGF0ZVNlY3Rpb25JdGVtcyhzZWN0aW9uSWQsIHByb2MpIHtcbiAgICAgICAgaWYgKHRoaXMuc2VjdGlvbnMgJiYgc2VjdGlvbklkKSB7XG4gICAgICAgICAgICBsZXQgb2xkTGlzdCA9IHRoaXMuaXRlbXMuZmlsdGVyKFxuICAgICAgICAgICAgICAgIChpdGVtKSA9PiBpdGVtLnNlY3Rpb24gPT09IHNlY3Rpb25JZFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgb2Ygb2xkTGlzdCkge1xuICAgICAgICAgICAgICAgIHRoaXMuaXRlbXMuc3BsaWNlKHRoaXMuaXRlbXMuaW5kZXhPZihpKSwgMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLml0ZW1zLnB1c2goLi4ucHJvYyhvbGRMaXN0KSk7XG4gICAgICAgICAgICBpZiAodGhpcy5tZW51KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5tZW51LiRzZXQoeyBpdGVtczogdGhpcy5pdGVtcyB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHN0YXRpYyB1cGRhdGVJdGVtKGl0ZW1JZCwgcHJvYykge1xuICAgICAgICBpZiAoaXRlbUlkICYmIHRoaXMuaXRlbXMpIHtcbiAgICAgICAgICAgIHRoaXMuaXRlbXMuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChpdGVtLmlkICE9PSBpdGVtSWQpIHJldHVybjtcbiAgICAgICAgICAgICAgICBwcm9jKGl0ZW0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAodGhpcy5tZW51KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5tZW51LiRzZXQoeyBpdGVtczogdGhpcy5pdGVtcyB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHN0YXRpYyBpc1RvdWNoKCkge1xuICAgICAgICByZXR1cm4gVUlDb21tb24uaXNNb2JpbGUodHJ1ZSk7XG4gICAgfVxuXG4gICAgc3RhdGljIGdldFNlY3Rpb25Db21wb25lbnQoKSB7fVxufVxuXG5leHBvcnQgZGVmYXVsdCBNZW51O1xuIiwiPHNjcmlwdD5cbiAgICBpbXBvcnQgeyBMT0NBTEUgfSBmcm9tIFwiLi4vLi4vLi4vLi4vbG9jYWxlXCI7XG4gICAgaW1wb3J0IFVJSW5kaWNhdG9yIGZyb20gXCIuLi8uLi8uLi8uLi9lbGVtZW50cy92YXJpb3VzL3VpLmluZGljYXRvci5zdmVsdGVcIjtcblxuICAgIC8qKlxuICAgICAqIEB0eXBlZGVmIHtPYmplY3R9IFByb3BzXG4gICAgICogQHByb3BlcnR5IHtzdHJpbmd9IFtyb290XVxuICAgICAqIEBwcm9wZXJ0eSB7YW55fSBbaXRlbV1cbiAgICAgKi9cblxuICAgIC8qKiBAdHlwZSB7UHJvcHN9ICovXG4gICAgbGV0IHsgcm9vdCA9IFwiXCIsIGl0ZW0gPSB7fSwgb25uYXZpZ2F0ZSA9ICgpID0+IHt9IH0gPSAkcHJvcHMoKTtcblxuICAgIGZ1bmN0aW9uIG9uQ2xpY2soZXYpIHtcbiAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgb25uYXZpZ2F0ZSh7XG4gICAgICAgICAgICBmdWxsOiBldi50YXJnZXQuZ2V0QXR0cmlidXRlKFwiaHJlZlwiKSxcbiAgICAgICAgICAgIHNob3J0OiBldi50YXJnZXQuZGF0YXNldC5ocmVmLFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbjwvc2NyaXB0PlxuXG57I2lmIHR5cGVvZiBpdGVtLnVybCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBpdGVtLnVybCAhPT0gZmFsc2V9XG4gICAgPGxpIGNsYXNzPXtpdGVtLmNsYXNzZXN9PlxuICAgICAgICA8YSBocmVmPVwie3Jvb3R9e2l0ZW0udXJsfVwiIGRhdGEtaHJlZj17aXRlbS51cmx9IG9uY2xpY2s9e29uQ2xpY2t9PlxuICAgICAgICAgICAgeyRMT0NBTEVbaXRlbS50aXRsZV19XG4gICAgICAgICAgICB7I2lmIGl0ZW0udGFnfVxuICAgICAgICAgICAgICAgIDxVSUluZGljYXRvciBpZD17aXRlbS5pZH0gey4uLml0ZW0udGFnfSAvPlxuICAgICAgICAgICAgey9pZn1cbiAgICAgICAgICAgIHsjaWYgaXRlbS5pbmRpY2F0b3J9XG4gICAgICAgICAgICAgICAgPFVJSW5kaWNhdG9yIGlkPXtpdGVtLmlkfSB7Li4uaXRlbS5pbmRpY2F0b3J9IC8+XG4gICAgICAgICAgICB7L2lmfVxuICAgICAgICA8L2E+XG4gICAgPC9saT5cbns6ZWxzZX1cbiAgICA8bGkgY2xhc3M9XCJpcy1uby1mb2xsb3ctc3VidGl0bGUge2l0ZW0uY2xhc3Nlc31cIj5cbiAgICAgICAgeyRMT0NBTEVbaXRlbS50aXRsZV19XG4gICAgICAgIHsjaWYgaXRlbS50YWd9XG4gICAgICAgICAgICA8VUlJbmRpY2F0b3IgaWQ9e2l0ZW0uaWR9IHsuLi5pdGVtLnRhZ30gLz5cbiAgICAgICAgey9pZn1cbiAgICAgICAgeyNpZiBpdGVtLmluZGljYXRvcn1cbiAgICAgICAgICAgIDxVSUluZGljYXRvciBpZD17aXRlbS5pZH0gey4uLml0ZW0uaW5kaWNhdG9yfSAvPlxuICAgICAgICB7L2lmfVxuICAgIDwvbGk+XG57L2lmfVxuIiwiPHNjcmlwdD5cbiAgICBjb25zdCBDTEFTU19JQ09OID0ge1xuICAgICAgICBPUEVORUQ6IFwiZmEtYW5nbGUtZG93blwiLFxuICAgICAgICBDTE9TRUQ6IFwiZmEtYW5nbGUtdXBcIixcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQHR5cGVkZWYge09iamVjdH0gUHJvcHNcbiAgICAgKiBAcHJvcGVydHkge2FueX0gW2ljb25fb3BlbmVkXVxuICAgICAqIEBwcm9wZXJ0eSB7YW55fSBbaWNvbl9jbG9zZWRdXG4gICAgICogQHByb3BlcnR5IHtib29sZWFufSBbY2xvc2VkXSAgICByZXR1cm5zIGlmIHdlIHNob3VsZCBhcHBseSB0b2dnbGUgb3IgaWYgZmFsc2UgLSByZWplY3QgaXQgYW5kIHRvZ2dsZSBiYWNrd2FyZFxuICAgICAqL1xuXG4gICAgLyoqIEB0eXBlIHtQcm9wc30gKi9cbiAgICBsZXQge1xuICAgICAgICBpY29uX29wZW5lZCA9IENMQVNTX0lDT04uT1BFTkVELFxuICAgICAgICBpY29uX2Nsb3NlZCA9IENMQVNTX0lDT04uQ0xPU0VELFxuICAgICAgICBjbG9zZWQsXG4gICAgICAgIG9udG9nZ2xlID0gKCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0sXG4gICAgfSA9ICRwcm9wcygpO1xuXG4gICAgZnVuY3Rpb24gb25DbGljayhlKSB7XG4gICAgICAgIGUgJiYgZS5wcmV2ZW50RGVmYXVsdCgpICYmIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIGNsb3NlZCA9ICFjbG9zZWQ7XG4gICAgICAgIGlmICghb250b2dnbGUoY2xvc2VkKSkge1xuICAgICAgICAgICAgY2xvc2VkID0gIWNsb3NlZDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuPC9zY3JpcHQ+XG5cbjxzcGFuXG4gICAgY2xhc3M9XCJpY29uIGlzLXNtYWxsIGlzLXRvZ2dsZS1zdWJtZW51IGlzLXB1bGxlZC1yaWdodFwiXG4gICAgb25jbGljaz17b25DbGlja31cbiAgICBvbmtleXVwPXtvbkNsaWNrfVxuICAgIHJvbGU9XCJidXR0b25cIlxuICAgIHRhYmluZGV4PVwiMFwiXG4+XG4gICAgPGkgY2xhc3M9XCJmYXMge2Nsb3NlZCA/IGljb25fY2xvc2VkIDogaWNvbl9vcGVuZWR9XCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9pPlxuPC9zcGFuPlxuIiwiPHNjcmlwdD5cbiAgICBpbXBvcnQgeyBMT0NBTEUgfSBmcm9tIFwiLi4vLi4vLi4vLi4vbG9jYWxlXCI7XG4gICAgaW1wb3J0IFVJSWNvbiBmcm9tIFwiLi4vLi4vLi4vLi4vZWxlbWVudHMvaWNvbi91aS5pY29uLmZvbnQuc3ZlbHRlXCI7XG4gICAgaW1wb3J0IFVJSW5kaWNhdG9yIGZyb20gXCIuLi8uLi8uLi8uLi9lbGVtZW50cy92YXJpb3VzL3VpLmluZGljYXRvci5zdmVsdGVcIjtcbiAgICBpbXBvcnQgVUlUYWcgZnJvbSBcIi4uLy4uLy4uLy4uL2VsZW1lbnRzL3ZhcmlvdXMvdWkudGFnLnN2ZWx0ZVwiO1xuICAgIGltcG9ydCB7IENPTVBPTkVOVFMgfSBmcm9tIFwiLi4vLi4vLi4vTElCLmpzXCI7XG4gICAgbGV0IHsgaXRlbSA9IHt9LCBjaGlsZHJlbiB9ID0gJHByb3BzKCk7XG48L3NjcmlwdD5cblxueyNpZiBpdGVtLmljb259XG4gICAgPFVJSWNvbiB7Li4uaXRlbS5pY29ufSAvPlxuezplbHNlIGlmIGl0ZW0udHlwZSA9PT0gXCJjb21wb25lbnRcIiAmJiBpdGVtLmNvbXBvbmVudCAmJiBDT01QT05FTlRTLmNvbnRhaW5zKGl0ZW0uY29tcG9uZW50KX1cbiAgICB7QGNvbnN0IFN2ZWx0ZUNvbXBvbmVudCA9IENPTVBPTkVOVFMuZ2V0KGl0ZW0uY29tcG9uZW50KX1cbiAgICA8U3ZlbHRlQ29tcG9uZW50IGlkPXtpdGVtLmlkfSB7Li4uaXRlbS5wcm9wc30gLz5cbns6ZWxzZX1cbiAgICA8c3BhbiBjbGFzcz1cImlzLW5vLWxpbmtcIj57JExPQ0FMRVtpdGVtLnRpdGxlXX08L3NwYW4+XG57L2lmfVxueyNpZiBpdGVtLnRhZ31cbiAgICA8VUlUYWcgaWQ9e2l0ZW0uaWR9IHsuLi5pdGVtLnRhZ30gLz5cbnsvaWZ9XG57I2lmIGl0ZW0uaW5kaWNhdG9yfVxuICAgIDxVSUluZGljYXRvciBpZD17aXRlbS5pZH0gey4uLml0ZW0uaW5kaWNhdG9yfSAvPlxuey9pZn1cbntAcmVuZGVyIGNoaWxkcmVuPy4oKX1cbiIsIjxzY3JpcHQ+XG4gICAgaW1wb3J0IFVpX2l0ZW1zIGZyb20gXCIuL3VpLml0ZW1zLnN2ZWx0ZVwiO1xuXG4gICAgaW1wb3J0IFVJU2lkZU1lbnVJdGVtV2l0aG91dENoaWxkcmVuIGZyb20gXCIuL3VpLml0ZW0ud2l0aG91dC5jaGlsZHJlbi5zdmVsdGVcIjtcblxuICAgIGltcG9ydCBVSVNpZGVNZW51VHJpZ2dlciBmcm9tIFwiLi91aS50cmlnZ2VyLnN2ZWx0ZVwiO1xuICAgIGltcG9ydCBVSVNpZGVNZW51SXRlbUxhYmVsIGZyb20gXCIuL3VpLml0ZW0ubGFiZWwuc3ZlbHRlXCI7XG5cbiAgICAvKipcbiAgICAgKiBAdHlwZWRlZiB7T2JqZWN0fSBQcm9wc1xuICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbcm9vdF1cbiAgICAgKiBAcHJvcGVydHkge2FueX0gW2l0ZW1zXVxuICAgICAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW2Nsb3NlZF1cbiAgICAgKiBAcHJvcGVydHkge2Z1bmN0aW9ufSBbb25uYXZpZ2F0ZV1cbiAgICAgKi9cblxuICAgIC8qKiBAdHlwZSB7UHJvcHN9ICovXG4gICAgbGV0IHsgcm9vdCA9IFwiXCIsIGl0ZW1zID0gW10sIGNsb3NlZCwgb25uYXZpZ2F0ZSA9ICgpID0+IHt9IH0gPSAkcHJvcHMoKTtcblxuICAgIGNvbnN0IGNyZWF0ZUNsb3NlZEl0ZW1zTGliID0gKGxzdCkgPT4ge1xuICAgICAgICBjb25zdCBsaWIgPSB7fTtcbiAgICAgICAgbHN0LmZvckVhY2goKGl0bSwgaW5kZXgpID0+IChsaWJbaW5kZXhdID0gaXRtLmNsb3NlZCkpO1xuICAgICAgICByZXR1cm4gbGliO1xuICAgIH07XG5cbiAgICBsZXQgY2xvc2VkQ2hpbGRyZW4gPSAkc3RhdGUoY3JlYXRlQ2xvc2VkSXRlbXNMaWIoaXRlbXMpKTtcblxuICAgIGZ1bmN0aW9uIG9uQ2xpY2soZXYpIHtcbiAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgb25uYXZpZ2F0ZSh7XG4gICAgICAgICAgICBmdWxsOiBldi50YXJnZXQuZ2V0QXR0cmlidXRlKFwiaHJlZlwiKSxcbiAgICAgICAgICAgIHNob3J0OiBldi50YXJnZXQuZGF0YXNldC5ocmVmLFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbjwvc2NyaXB0PlxuXG48dWwgY2xhc3M9XCJtZW51LWxpc3Qge2Nsb3NlZCA/ICdpcy1jbG9zZWQnIDogJyd9XCI+XG4gICAgeyNlYWNoIGl0ZW1zIGFzIGl0ZW0sIGluZGV4fVxuICAgICAgICB7I2lmIGl0ZW0uaXRlbXMgJiYgaXRlbS5pdGVtcy5sZW5ndGh9XG4gICAgICAgICAgICA8bGkgY2xhc3M9XCJpcy1uby1mb2xsb3ctc3VidGl0bGUge2l0ZW0uY2xhc3Nlc31cIj5cbiAgICAgICAgICAgICAgICB7I2lmIHR5cGVvZiBpdGVtLnVybCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBpdGVtLnVybCAhPT0gZmFsc2V9XG4gICAgICAgICAgICAgICAgICAgIDxhXG4gICAgICAgICAgICAgICAgICAgICAgICBocmVmPVwie3Jvb3R9e2l0ZW0udXJsfVwiXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWhyZWY9e2l0ZW0udXJsfVxuICAgICAgICAgICAgICAgICAgICAgICAgb25jbGljaz17b25DbGlja31cbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPVwiaGFzLXN1Yml0ZW1zXCJcbiAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICAgICAgPFVJU2lkZU1lbnVJdGVtTGFiZWwge2l0ZW19PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxVSVNpZGVNZW51VHJpZ2dlclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiaW5kOmNsb3NlZD17Y2xvc2VkQ2hpbGRyZW5baW5kZXhdfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L1VJU2lkZU1lbnVJdGVtTGFiZWw+XG4gICAgICAgICAgICAgICAgICAgIDwvYT5cbiAgICAgICAgICAgICAgICB7OmVsc2V9XG4gICAgICAgICAgICAgICAgICAgIDxVSVNpZGVNZW51SXRlbUxhYmVsIHtpdGVtfT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxVSVNpZGVNZW51VHJpZ2dlclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJpbmQ6Y2xvc2VkPXtjbG9zZWRDaGlsZHJlbltpbmRleF19XG4gICAgICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICA8L1VJU2lkZU1lbnVJdGVtTGFiZWw+XG4gICAgICAgICAgICAgICAgey9pZn1cbiAgICAgICAgICAgICAgICA8VWlfaXRlbXNcbiAgICAgICAgICAgICAgICAgICAge3Jvb3R9XG4gICAgICAgICAgICAgICAgICAgIGl0ZW1zPXtpdGVtLml0ZW1zfVxuICAgICAgICAgICAgICAgICAgICBiaW5kOmNsb3NlZD17Y2xvc2VkQ2hpbGRyZW5baW5kZXhdfVxuICAgICAgICAgICAgICAgICAgICB7b25uYXZpZ2F0ZX1cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgPC9saT5cbiAgICAgICAgezplbHNlfVxuICAgICAgICAgICAgPFVJU2lkZU1lbnVJdGVtV2l0aG91dENoaWxkcmVuIHtyb290fSB7aXRlbX0ge29ubmF2aWdhdGV9IC8+XG4gICAgICAgIHsvaWZ9XG4gICAgey9lYWNofVxuPC91bD5cbiIsIjxzY3JpcHQ+XG4gICAgaW1wb3J0IHsgTE9DQUxFIH0gZnJvbSBcIi4uLy4uLy4uLy4uL2xvY2FsZVwiO1xuICAgIGltcG9ydCBVSUluZGljYXRvciBmcm9tIFwiLi4vLi4vLi4vLi4vZWxlbWVudHMvdmFyaW91cy91aS5pbmRpY2F0b3Iuc3ZlbHRlXCI7XG4gICAgaW1wb3J0IFVJU2lkZU1lbnVJdGVtcyBmcm9tIFwiLi91aS5pdGVtcy5zdmVsdGVcIjtcbiAgICBpbXBvcnQgeyBDT01QT05FTlRTIH0gZnJvbSBcIi4uLy4uLy4uL0xJQi5qc1wiO1xuXG4gICAgLyoqXG4gICAgICogQHR5cGVkZWYge09iamVjdH0gUHJvcHNcbiAgICAgKiBAcHJvcGVydHkge2FueX0gICAgICBzZWN0aW9uXG4gICAgICogQHByb3BlcnR5IHthbnl9ICAgICAgW2l0ZW1zXVxuICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSAgIFtyb290XVxuICAgICAqIEBwcm9wZXJ0eSB7ZnVuY3Rpb259IFtvbm5hdmlnYXRlXVxuICAgICAqL1xuXG4gICAgLyoqIEB0eXBlIHtQcm9wc30gKi9cbiAgICBsZXQgeyBzZWN0aW9uLCBpdGVtcyA9IFtdLCByb290ID0gXCJcIiwgb25uYXZpZ2F0ZSA9ICgpID0+IHt9IH0gPSAkcHJvcHMoKTtcblxuICAgIGxldCBzZWN0aW9uSXRlbXMgPSAkZGVyaXZlZChcbiAgICAgICAgaXRlbXMuZmlsdGVyKChpdGVtKSA9PiBzZWN0aW9uLmlkID09PSBpdGVtLnNlY3Rpb24pXG4gICAgKTtcbjwvc2NyaXB0PlxuXG57I2lmIHNlY3Rpb259XG4gICAgeyNpZiBzZWN0aW9uSXRlbXMubGVuZ3RoIHx8IHNlY3Rpb24uY29tcG9uZW50IHx8IHNlY3Rpb24udGFnIHx8IHNlY3Rpb24uaW5kaWNhdG9yfVxuICAgICAgICA8cCBjbGFzcz1cIm1lbnUtbGFiZWwge3NlY3Rpb24uY2xhc3Nlc31cIj5cbiAgICAgICAgICAgIHsjaWYgc2VjdGlvbi50eXBlID09PSBcImNvbXBvbmVudFwiICYmIHNlY3Rpb24uY29tcG9uZW50ICYmIENPTVBPTkVOVFMuY29udGFpbnMoc2VjdGlvbi5jb21wb25lbnQpfVxuICAgICAgICAgICAgICAgIHtAY29uc3QgU3ZlbHRlQ29tcG9uZW50ID0gQ09NUE9ORU5UUy5nZXQoc2VjdGlvbi5jb21wb25lbnQpfVxuICAgICAgICAgICAgICAgIDxTdmVsdGVDb21wb25lbnQgaWQ9e3NlY3Rpb24uaWR9IHsuLi5zZWN0aW9uLnByb3BzfSAvPlxuICAgICAgICAgICAgezplbHNlfVxuICAgICAgICAgICAgICAgIHskTE9DQUxFW3NlY3Rpb24udGl0bGVdfVxuICAgICAgICAgICAgey9pZn1cbiAgICAgICAgICAgIHsjaWYgc2VjdGlvbi50YWd9XG4gICAgICAgICAgICAgICAgPFVJSW5kaWNhdG9yIGlkPXtzZWN0aW9uLmlkfSB7Li4uc2VjdGlvbi50YWd9IC8+XG4gICAgICAgICAgICB7L2lmfVxuICAgICAgICAgICAgeyNpZiBzZWN0aW9uLmluZGljYXRvcn1cbiAgICAgICAgICAgICAgICA8VUlJbmRpY2F0b3IgaWQ9e3NlY3Rpb24uaWR9IHsuLi5zZWN0aW9uLmluZGljYXRvcn0gLz5cbiAgICAgICAgICAgIHsvaWZ9XG4gICAgICAgIDwvcD5cbiAgICB7L2lmfVxuey9pZn1cbnsjaWYgc2VjdGlvbkl0ZW1zLmxlbmd0aH1cbiAgICA8VUlTaWRlTWVudUl0ZW1zIHtyb290fSBpdGVtcz17c2VjdGlvbkl0ZW1zfSB7b25uYXZpZ2F0ZX0gLz5cbnsvaWZ9XG4iLCI8c2NyaXB0PlxuICAgIGltcG9ydCBVSVNpZGVNZW51U2VjdGlvbiBmcm9tIFwiLi91aS5zZWN0aW9uLnN2ZWx0ZVwiO1xuICAgIC8qKlxuICAgICAqIEB0eXBlZGVmIHtPYmplY3R9IFByb3BzXG4gICAgICogQHByb3BlcnR5IHtzdHJpbmd9IFtyb290XVxuICAgICAqIEBwcm9wZXJ0eSB7YW55fSBbaXRlbXNdXG4gICAgICogQHByb3BlcnR5IHthbnl9IFtzZWN0aW9uc11cbiAgICAgKiBAcHJvcGVydHkge2FueX0gW25hdmlnYXRlID0gKCk9PnVuZGVmaW5lZF1cbiAgICAgKi9cblxuICAgIC8qKiBAdHlwZSB7UHJvcHN9ICovXG4gICAgbGV0IHsgcm9vdCA9IFwiXCIsIGl0ZW1zID0gW10sIHNlY3Rpb25zID0gW10sIG5hdmlnYXRlID0gbnVsbCB9ID0gJHByb3BzKCk7XG5cbiAgICBmdW5jdGlvbiBvbkNsaWNrKGV2KSB7XG4gICAgICAgIGlmICh0eXBlb2YgbmF2aWdhdGUgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgbmF2aWdhdGUoZXYpO1xuICAgICAgICB9XG4gICAgfVxuPC9zY3JpcHQ+XG5cbnsjZWFjaCBzZWN0aW9ucyBhcyBzZWN0aW9ufVxuICAgIDxVSVNpZGVNZW51U2VjdGlvbiB7c2VjdGlvbn0ge2l0ZW1zfSB7cm9vdH0gb25uYXZpZ2F0ZT17b25DbGlja30gLz5cbnsvZWFjaH1cbiIsImltcG9ydCB7IHdyaXRhYmxlIH0gZnJvbSBcInN2ZWx0ZS9zdG9yZVwiO1xuXG5jb25zdCBTaWRlTWVudVN0YXRlID0gd3JpdGFibGUoe1xuICAgIG9wZW46IHRydWUsXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgU2lkZU1lbnVTdGF0ZTtcbiIsImltcG9ydCBNZW51IGZyb20gXCIuLi9tZW51LmpzXCI7XG5pbXBvcnQgVUlTaWRlTWVudSBmcm9tIFwiLi91aS5zaWRlLm1lbnUuc3ZlbHRlXCI7XG5cbmltcG9ydCBTaWRlTWVudVN0YXRlIGZyb20gXCIuL3N0b3JlLmpzXCI7XG5pbXBvcnQgeyBtb3VudCB9IGZyb20gXCJzdmVsdGVcIjtcblxuY29uc3QgVFlQRSA9IFwic2lkZVwiO1xuXG5jbGFzcyBub3RTaWRlTWVudSBleHRlbmRzIE1lbnUge1xuICAgIHN0YXRpYyBuYXY7XG4gICAgc3RhdGljIG1haW47XG4gICAgc3RhdGljIGFzaWRlO1xuXG4gICAgc3RhdGljIERFRkFVTFQgPSB7XG4gICAgICAgIHNlY3Rpb246IFwiYW55XCIsXG4gICAgICAgIHNlY3Rpb25UaXRsZTogXCLQnNC10L3RjlwiLFxuICAgICAgICBwcmlvcml0eTogMCxcbiAgICAgICAgb3BlbjogdHJ1ZSxcbiAgICAgICAgdHlwZTogXCJsaW5rXCIsXG4gICAgfTtcblxuICAgIHN0YXRpYyBvcHRpb25zID0ge1xuICAgICAgICBkaXJlY3ROYXZpZ2F0aW9uOiBmYWxzZSxcbiAgICAgICAgdHlwZTogVFlQRSxcbiAgICAgICAgaXRlbXM6IFtdLFxuICAgICAgICBzZWN0aW9uczogW10sXG4gICAgICAgIHRhcmdldFNlbGVjdG9yOiBgIyR7VFlQRX0tbWVudWAsXG4gICAgICAgIHRvZ2dsZVNlbGVjdG9yOiBgLiR7VFlQRX0tbWVudS10b2dnbGVgLFxuICAgICAgICByb290OiBcIi9cIixcbiAgICAgICAgb3BlbjogdHJ1ZSxcbiAgICAgICAgbmF2aWdhdGU6ICh1cmxzKSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy5pc1RvdWNoKCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmhpZGUoKTtcbiAgICAgICAgICAgICAgICB0aGlzLmFwcCAmJlxuICAgICAgICAgICAgICAgICAgICB0aGlzLmFwcC5lbWl0KFwidG9wLW5hdmJhci1idXJnZXI6dXBkYXRlXCIsIHsgY2xvc2VkOiB0cnVlIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCF0aGlzLmlzRGlyZWN0TmF2aWdhdGlvbigpICYmIHRoaXMuYXBwKSB7XG4gICAgICAgICAgICAgICAgbGV0IGZ1bmMgPSB0aGlzLmFwcC5nZXRXb3JraW5nKFwicm91dGVyXCIpO1xuICAgICAgICAgICAgICAgIGlmIChmdW5jKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmdW5jLm5hdmlnYXRlKHVybHMuc2hvcnQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRvY3VtZW50LmxvY2F0aW9uLmFzc2lnbih1cmxzLmZ1bGwpO1xuICAgICAgICB9LFxuICAgIH07XG5cbiAgICBzdGF0aWMgcmVuZGVyKGFwcCkge1xuICAgICAgICBpZiAoYXBwKSB7XG4gICAgICAgICAgICB0aGlzLnNldEFwcChhcHApO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucHJlcGFyZURhdGEoKTtcbiAgICAgICAgaWYgKCF0aGlzLm1lbnUpIHtcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlVUkoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHN0YXRpYyB1cGRhdGUoKSB7XG4gICAgICAgIGlmICh0aGlzLm1lbnUpIHtcbiAgICAgICAgICAgIHRoaXMubWVudS4kZGVzdHJveSgpO1xuICAgICAgICAgICAgdGhpcy5jcmVhdGVVSSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc3RhdGljIGNyZWF0ZVVJKCkge1xuICAgICAgICBsZXQgdGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0aGlzLmdldE9wdGlvbnMoKS50YXJnZXRTZWxlY3Rvcik7XG4gICAgICAgIGlmICghdGFyZ2V0KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5tZW51ID0gbW91bnQoVUlTaWRlTWVudSwge1xuICAgICAgICAgICAgdGFyZ2V0LFxuICAgICAgICAgICAgcHJvcHM6IHtcbiAgICAgICAgICAgICAgICBpdGVtczogdGhpcy5pdGVtcyxcbiAgICAgICAgICAgICAgICBzZWN0aW9uczogdGhpcy5zZWN0aW9ucyxcbiAgICAgICAgICAgICAgICByb290OiB0aGlzLmdldE9wdGlvbnMoKS5yb290LFxuICAgICAgICAgICAgICAgIG5hdmlnYXRlOiB0aGlzLmdldE9wdGlvbnMoKS5uYXZpZ2F0ZSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmluaXRTaXplUmVzcG9uc2UoKTtcblxuICAgICAgICB0aGlzLmludGVydmFsID0gc2V0SW50ZXJ2YWwodGhpcy51cGRhdGVNZW51QWN0aXZlSXRlbS5iaW5kKHRoaXMpLCAyMDApO1xuICAgICAgICB0aGlzLmJpbmRUb2dnbGUoKTtcbiAgICB9XG5cbiAgICBzdGF0aWMgaXRlbUlzQWN0aXZlKGl0ZW1VUkwpIHtcbiAgICAgICAgcmV0dXJuICh0aGlzLmxvY2F0aW9uICsgXCIvXCIpLmluZGV4T2YoaXRlbVVSTCArIFwiL1wiKSA+IC0xO1xuICAgIH1cblxuICAgIHN0YXRpYyB1cGRhdGVNZW51KCkge1xuICAgICAgICBBcnJheS5mcm9tKFxuICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCh0aGlzLmdldE9wdGlvbnMoKS50YXJnZXRTZWxlY3RvciArIFwiIGFcIilcbiAgICAgICAgKS5mb3JFYWNoKChpdGVtKSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy5pdGVtSXNBY3RpdmUoaXRlbS5nZXRBdHRyaWJ1dGUoXCJocmVmXCIpKSkge1xuICAgICAgICAgICAgICAgIGl0ZW0uY2xhc3NMaXN0LmFkZChcImlzLWFjdGl2ZVwiKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaXRlbS5jbGFzc0xpc3QucmVtb3ZlKFwiaXMtYWN0aXZlXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBzdGF0aWMgdXBkYXRlTWVudUFjdGl2ZUl0ZW0oKSB7XG4gICAgICAgIGxldCB1cmwgPSB3aW5kb3cubG9jYXRpb24udG9TdHJpbmcoKSxcbiAgICAgICAgICAgIGxhc3RMb2NhdGlvbiA9IHRoaXMubG9jYXRpb247XG4gICAgICAgIGlmIChsYXN0TG9jYXRpb24pIHtcbiAgICAgICAgICAgIGlmICh1cmwgIT09IGxhc3RMb2NhdGlvbikge1xuICAgICAgICAgICAgICAgIHRoaXMubG9jYXRpb24gPSB1cmw7XG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVNZW51KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmxvY2F0aW9uID0gdXJsO1xuICAgICAgICAgICAgdGhpcy51cGRhdGVNZW51KCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzdGF0aWMgaW5pdFNpemVSZXNwb25zZSgpIHtcbiAgICAgICAgdGhpcy5uYXYgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwibmF2Lm5hdmJhclwiKTtcbiAgICAgICAgdGhpcy5hc2lkZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJhc2lkZVwiKTtcbiAgICAgICAgdGhpcy5tYWluID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIm1haW5cIik7XG4gICAgICAgIHRoaXMucmVzaXplQXNpZGVBbmRNYWluKHRoaXMuYXNpZGUsIHRoaXMubWFpbiwgdGhpcy5uYXYpO1xuICAgICAgICB0aGlzLnJlc2l6ZU1haW4odGhpcy5tYWluLCB0aGlzLmFzaWRlKTtcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgdGhpcy5yZXNpemVNYWluLmJpbmQodGhpcykpO1xuICAgICAgICBpZiAodGhpcy5pc1RvdWNoKCkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmdldE9wdGlvbnMoKS5vcGVuKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zaG93KCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuaGlkZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgc3RhdGljIHJlc2l6ZU1haW4oKSB7XG4gICAgICAgIGlmICh0aGlzLmlzVG91Y2goKSkge1xuICAgICAgICAgICAgaWYgKHRoaXMuYXNpZGUuY2xhc3NMaXN0LmNvbnRhaW5zKFwiaXMtYWN0aXZlXCIpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5tYWluLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5tYWluLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XG4gICAgICAgICAgICAgICAgdGhpcy5tYWluLnN0eWxlLm1hcmdpbkxlZnQgPSBcIjBweFwiO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGV0IHJlY3QgPSB0aGlzLmFzaWRlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICAgICAgdGhpcy5tYWluLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XG4gICAgICAgICAgICBpZiAodGhpcy5tYWluLnN0eWxlLmhlaWdodCA9PT0gXCIwcHhcIikge1xuICAgICAgICAgICAgICAgIHRoaXMubWFpbi5zdHlsZS5oZWlnaHQgPSBcImF1dG9cIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMubWFpbi5zdHlsZS5tYXJnaW5MZWZ0ID0gcmVjdC53aWR0aCArIHJlY3QubGVmdCArIFwicHhcIjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHN0YXRpYyByZXNpemVBc2lkZSgpIHtcbiAgICAgICAgaWYgKHRoaXMuYXNpZGUuc3R5bGUuZGlzcGxheSAhPT0gXCJub25lXCIpIHtcbiAgICAgICAgICAgIGxldCByZWN0ID0gdGhpcy5uYXYuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgICAgICB0aGlzLmFzaWRlLnN0eWxlLmhlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodCAtIHJlY3QuaGVpZ2h0ICsgXCJweFwiO1xuICAgICAgICAgICAgdGhpcy5hc2lkZS5zdHlsZS5tYXJnaW5Ub3AgPSByZWN0LmhlaWdodCArIFwicHhcIjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHN0YXRpYyByZXNpemVBc2lkZUFuZE1haW4oKSB7XG4gICAgICAgIGxldCByZWN0ID0gdGhpcy5uYXYuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgIHRoaXMuYXNpZGUuc3R5bGUuaGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0IC0gcmVjdC5oZWlnaHQgKyBcInB4XCI7XG4gICAgICAgIC8vdGhpcy5hc2lkZS5zdHlsZS5wYWRkaW5nVG9wID0gKHJlY3QuaGVpZ2h0KSArICdweCc7XG4gICAgICAgIC8vdGhpcy5tYWluLnN0eWxlLm1hcmdpblRvcCA9IChyZWN0LmhlaWdodCkgKyAncHgnO1xuICAgIH1cblxuICAgIHN0YXRpYyBiaW5kVG9nZ2xlKCkge1xuICAgICAgICBsZXQgZWxzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCh0aGlzLmdldE9wdGlvbnMoKS50b2dnbGVTZWxlY3Rvcik7XG4gICAgICAgIEFycmF5LmZyb20oZWxzKS5mb3JFYWNoKChlbCkgPT4ge1xuICAgICAgICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIHRoaXMudG9nZ2xlLmJpbmQodGhpcykpO1xuICAgICAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIHRoaXMudG9nZ2xlLmJpbmQodGhpcykpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBzdGF0aWMgdG9nZ2xlKGUpIHtcbiAgICAgICAgZSAmJiBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGlmICh0aGlzLmFzaWRlKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5pc1RvdWNoKCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmFzaWRlLmNsYXNzTGlzdC50b2dnbGUoXCJpcy1hY3RpdmVcIik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuYXNpZGUuY2xhc3NMaXN0LnRvZ2dsZShcImlzLWNsb3NlZFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMucmVzaXplTWFpbigpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBzdGF0aWMgaGlkZShlKSB7XG4gICAgICAgIGUgJiYgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBpZiAodGhpcy5hc2lkZSkge1xuICAgICAgICAgICAgaWYgKHRoaXMuaXNUb3VjaCgpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5hc2lkZS5jbGFzc0xpc3QucmVtb3ZlKFwiaXMtYWN0aXZlXCIpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmFzaWRlLmNsYXNzTGlzdC5hZGQoXCJpcy1jbG9zZWRcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnJlc2l6ZU1haW4oKTtcbiAgICAgICAgfVxuICAgICAgICBTaWRlTWVudVN0YXRlLnVwZGF0ZSgodmFsKSA9PiB7XG4gICAgICAgICAgICB2YWwub3BlbiA9IGZhbHNlO1xuICAgICAgICAgICAgcmV0dXJuIHZhbDtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBzdGF0aWMgc2hvdyhlKSB7XG4gICAgICAgIGUgJiYgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBpZiAodGhpcy5hc2lkZSkge1xuICAgICAgICAgICAgaWYgKHRoaXMuaXNUb3VjaCgpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5hc2lkZS5jbGFzc0xpc3QuYWRkKFwiaXMtYWN0aXZlXCIpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmFzaWRlLmNsYXNzTGlzdC5yZW1vdmUoXCJpcy1jbG9zZWRcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnJlc2l6ZU1haW4oKTtcbiAgICAgICAgfVxuICAgICAgICBTaWRlTWVudVN0YXRlLnVwZGF0ZSgodmFsKSA9PiB7XG4gICAgICAgICAgICB2YWwub3BlbiA9IHRydWU7XG4gICAgICAgICAgICByZXR1cm4gdmFsO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHN0YXRpYyBpc09wZW4oKSB7XG4gICAgICAgIGlmICh0aGlzLmFzaWRlKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5pc1RvdWNoKCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5hc2lkZS5jbGFzc0xpc3QuY29udGFpbnMoXCJpcy1hY3RpdmVcIik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAhdGhpcy5hc2lkZS5jbGFzc0xpc3QuY29udGFpbnMoXCJpcy1jbG9zZWRcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgbm90U2lkZU1lbnU7XG4iLCI8c2NyaXB0PlxuICAgIC8qIGVzbGludCBzdmVsdGUvbm8tYXQtaHRtbC10YWdzOiAwICovXG4gICAgaW1wb3J0IFVJSWNvbiBmcm9tIFwiLi4vLi4vLi4vLi4vZWxlbWVudHMvaWNvbi91aS5pY29uLnN2ZWx0ZVwiO1xuICAgIC8qKlxuICAgICAqIEB0eXBlZGVmIHtPYmplY3R9IFByb3BzXG4gICAgICogQHByb3BlcnR5IHtzdHJpbmd9IFt1cmxdXG4gICAgICogQHByb3BlcnR5IHtzdHJpbmd9IFt0aXRsZV1cbiAgICAgKiBAcHJvcGVydHkge2FueX0gW2ljb25dXG4gICAgICovXG5cbiAgICAvKiogQHR5cGUge1Byb3BzfSAqL1xuICAgIGxldCB7XG4gICAgICAgIHVybCA9IFwiL1wiLFxuICAgICAgICB0aXRsZSA9IFwiXCIsXG4gICAgICAgIGljb24gPSB7XG4gICAgICAgICAgICBzcmM6IFwiaHR0cHM6Ly92aWEucGxhY2Vob2xkZXIuY29tLzU2eDI4XCIsXG4gICAgICAgICAgICB3aWR0aDogMjgsXG4gICAgICAgICAgICBoZWlnaHQ6IDU2LFxuICAgICAgICB9LFxuICAgIH0gPSAkcHJvcHMoKTtcbjwvc2NyaXB0PlxuXG48YSBjbGFzcz1cIm5hdmJhci1pdGVtXCIgaHJlZj17dXJsfT5cbiAgICA8VUlJY29uIHsuLi5pY29ufSAvPlxuICAgIHsjaWYgdGl0bGV9XG4gICAgICAgIHtAaHRtbCBgPHNwYW4gY2xhc3M9XCJuYXZiYXItaXRlbS1icmFuZC10aXRsZVwiPiR7dGl0bGV9PC9zcGFuPmB9XG4gICAgey9pZn1cbjwvYT5cbiIsIjxzY3JpcHQ+XG4gIGltcG9ydCB7TE9DQUxFfSBmcm9tICcuLi8uLi8uLi8uLi9sb2NhbGUnO1xuXG4gIGltcG9ydCBVSUljb24gZnJvbSAnLi4vLi4vLi4vLi4vZWxlbWVudHMvaWNvbi91aS5pY29uLnN2ZWx0ZSc7XG4gIGltcG9ydCBVSVRhZyBmcm9tICcuLi8uLi8uLi8uLi9lbGVtZW50cy92YXJpb3VzL3VpLnRhZy5zdmVsdGUnO1xuICBpbXBvcnQgVUlJbmRpY2F0b3IgZnJvbSAnLi4vLi4vLi4vLi4vZWxlbWVudHMvdmFyaW91cy91aS5pbmRpY2F0b3Iuc3ZlbHRlJztcbiAgaW1wb3J0IHtDT01QT05FTlRTfSBmcm9tICcuLi8uLi8uLi9MSUIuanMnO1xuICBsZXQgeyBpdGVtIH0gPSAkcHJvcHMoKTtcbiAgLypcbiAgc3RyaW5nIHRpdGxlXG4gIG9iamVjdCBpY29uO1xuICBvYmplY3QgdGFnO1xuICBzdHJpbmcgdHlwZTtcbiAgQ2xhc3MgY29tcG9uZW50O1xuICBvYmplY3QgaW5kaWNhdG9yO1xuICBvYmplY3Qgb3B0aW9ucztcbiAgKi9cblxuXG48L3NjcmlwdD5cblxueyNpZiBpdGVtLmljb259XG48VUlJY29uIHsuLi5pdGVtLmljb259IC8+XG57OmVsc2UgaWYgKGl0ZW0udHlwZT09PSdjb21wb25lbnQnICYmIGl0ZW0uY29tcG9uZW50ICYmIENPTVBPTkVOVFMuY29udGFpbnMoaXRlbS5jb21wb25lbnQpKSB9XG57QGNvbnN0IFN2ZWx0ZUNvbXBvbmVudCA9IENPTVBPTkVOVFMuZ2V0KGl0ZW0uY29tcG9uZW50KX1cbjxTdmVsdGVDb21wb25lbnRcbiAgaWQ9e2l0ZW0uaWR9XG4gIHsuLi5pdGVtLnByb3BzfVxuICAgLz5cbns6ZWxzZX1cbnskTE9DQUxFW2l0ZW0udGl0bGVdfVxuey9pZn1cblxueyNpZiBpdGVtLnRhZyB9XG48VUlUYWcgdG9wPXt0cnVlfSByaWdodD17dHJ1ZX0gc2l6ZT0nc21hbGwnIGlkPXtpdGVtLmlkfSB7Li4uaXRlbS50YWd9PjwvVUlUYWc+XG57L2lmfVxuXG57I2lmIGl0ZW0uaW5kaWNhdG9yIH1cbjxVSUluZGljYXRvciBpZD17aXRlbS5pZH0gey4uLml0ZW0uaW5kaWNhdG9yfSAvPlxuey9pZn1cbiIsIjxzY3JpcHQ+XG4gICAgaW1wb3J0IHsgY3JlYXRlRXZlbnREaXNwYXRjaGVyIH0gZnJvbSBcInN2ZWx0ZVwiO1xuICAgIGNvbnN0IGRpc3BhdGNoID0gY3JlYXRlRXZlbnREaXNwYXRjaGVyKCk7XG5cbiAgICBpbXBvcnQgVUlJdGVtQ29udGVudCBmcm9tIFwiLi91aS5pdGVtLmNvbnRlbnQuc3ZlbHRlXCI7XG4gICAgLyoqXG4gICAgICogQHR5cGVkZWYge09iamVjdH0gUHJvcHNcbiAgICAgKiBAcHJvcGVydHkge3N0cmluZ30gW3Jvb3RdXG4gICAgICogQHByb3BlcnR5IHthbnl9IFtpdGVtXVxuICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbaGlkZGVuXVxuICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbY2xhc3Nlc11cbiAgICAgKi9cblxuICAgIC8qKiBAdHlwZSB7UHJvcHN9ICovXG4gICAgbGV0IHsgcm9vdCA9IFwiXCIsIGl0ZW0gPSB7fSwgaGlkZGVuID0gXCJcIiwgY2xhc3NlcyA9IFwiXCIgfSA9ICRwcm9wcygpO1xuXG4gICAgZnVuY3Rpb24gb25DbGljayhldmVudCkge1xuICAgICAgICBkaXNwYXRjaChcImNsaWNrXCIsIHsgZXZlbnQsIGVsZW1lbnQ6IGl0ZW0gfSk7XG4gICAgfVxuPC9zY3JpcHQ+XG5cbnsjaWYgaXRlbS5icmVha31cbiAgICA8aHIgY2xhc3M9XCJuYXZiYXItZGl2aWRlciB7aGlkZGVuID8gYGlzLWhpZGRlbi0ke2hpZGRlbn1gIDogJyd9IFwiIC8+XG57L2lmfVxuXG57I2lmIGl0ZW0udXJsfVxuICAgIDxhXG4gICAgICAgIG9uY2xpY2s9e29uQ2xpY2t9XG4gICAgICAgIGNsYXNzPVwibmF2YmFyLWl0ZW0ge2hpZGRlblxuICAgICAgICAgICAgPyBgaXMtaGlkZGVuLSR7aGlkZGVufWBcbiAgICAgICAgICAgIDogJyd9IHtpdGVtLmNsYXNzZXN9IHtjbGFzc2VzfSBcIlxuICAgICAgICBocmVmPVwie3Jvb3R9e2l0ZW0udXJsfVwiXG4gICAgICAgIGRhdGEtaHJlZj17aXRlbS51cmx9XG4gICAgPlxuICAgICAgICA8VUlJdGVtQ29udGVudCB7aXRlbX0gLz5cbiAgICA8L2E+XG57OmVsc2V9XG4gICAgPGRpdlxuICAgICAgICBvbmNsaWNrPXtvbkNsaWNrfVxuICAgICAgICBvbmtleXVwPXtvbkNsaWNrfVxuICAgICAgICBjbGFzcz1cIm5hdmJhci1pdGVtIHtoaWRkZW5cbiAgICAgICAgICAgID8gYGlzLWhpZGRlbi0ke2hpZGRlbn1gXG4gICAgICAgICAgICA6ICcnfSB7aXRlbS5jbGFzc2VzfSB7Y2xhc3Nlc31cIlxuICAgICAgICByb2xlPVwiYnV0dG9uXCJcbiAgICAgICAgdGFiaW5kZXg9XCIwXCJcbiAgICA+XG4gICAgICAgIDxVSUl0ZW1Db250ZW50IHtpdGVtfSAvPlxuICAgIDwvZGl2Plxuey9pZn1cbiIsIjxzY3JpcHQ+XG4gICAgaW1wb3J0IHsgY3JlYXRlRXZlbnREaXNwYXRjaGVyIH0gZnJvbSBcInN2ZWx0ZVwiO1xuICAgIGNvbnN0IGRpc3BhdGNoID0gY3JlYXRlRXZlbnREaXNwYXRjaGVyKCk7XG5cbiAgICBpbXBvcnQgVUlJdGVtQ29udGVudCBmcm9tIFwiLi91aS5pdGVtLmNvbnRlbnQuc3ZlbHRlXCI7XG4gICAgaW1wb3J0IFVJSXRlbSBmcm9tIFwiLi91aS5pdGVtLnN2ZWx0ZVwiO1xuXG4gICAgLyoqXG4gICAgICogQHR5cGVkZWYge09iamVjdH0gUHJvcHNcbiAgICAgKiBAcHJvcGVydHkge3N0cmluZ30gW3Jvb3RdXG4gICAgICogQHByb3BlcnR5IHthbnl9IFtzZWN0aW9uXVxuICAgICAqIEBwcm9wZXJ0eSB7YW55fSBbaXRlbXNdXG4gICAgICogQHByb3BlcnR5IHtzdHJpbmd9IFtoaWRkZW5dXG4gICAgICogQHByb3BlcnR5IHtib29sZWFufSBbaG92ZXJhYmxlXVxuICAgICAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW2Fycm93bGVzc11cbiAgICAgKiBAcHJvcGVydHkge2Jvb2xlYW59IFtyaWdodF1cbiAgICAgKi9cblxuICAgIC8qKiBAdHlwZSB7UHJvcHN9ICovXG4gICAgbGV0IHtcbiAgICAgICAgcm9vdCA9IFwiXCIsXG4gICAgICAgIHNlY3Rpb24gPSB7fSxcbiAgICAgICAgaXRlbXMgPSBbXSxcbiAgICAgICAgaGlkZGVuID0gXCJcIixcbiAgICAgICAgaG92ZXJhYmxlID0gdHJ1ZSxcbiAgICAgICAgYXJyb3dsZXNzID0gZmFsc2UsXG4gICAgICAgIHJpZ2h0ID0gZmFsc2UsXG4gICAgfSA9ICRwcm9wcygpO1xuXG4gICAgZnVuY3Rpb24gb25DbGljayhldmVudCkge1xuICAgICAgICBkaXNwYXRjaChcImNsaWNrXCIsIHsgZXZlbnQsIGVsZW1lbnQ6IHNlY3Rpb24gfSk7XG4gICAgfVxuPC9zY3JpcHQ+XG5cbnsjaWYgaXRlbXMubGVuZ3RofVxuICAgIDxkaXZcbiAgICAgICAgY2xhc3M9XCJuYXZiYXItaXRlbSBoYXMtZHJvcGRvd24ge2hvdmVyYWJsZVxuICAgICAgICAgICAgPyAnaXMtaG92ZXJhYmxlJ1xuICAgICAgICAgICAgOiAnJ30ge2hpZGRlbiA/IGBpcy1oaWRkZW4tJHtoaWRkZW59YCA6ICcnfSBcIlxuICAgID5cbiAgICAgICAgPGFcbiAgICAgICAgICAgIGhyZWZcbiAgICAgICAgICAgIG9uY2xpY2s9e29uQ2xpY2t9XG4gICAgICAgICAgICBjbGFzcz1cIm5hdmJhci1saW5rIHthcnJvd2xlc3MgPyAnaXMtYXJyb3dsZXNzJyA6ICcnfVwiXG4gICAgICAgID5cbiAgICAgICAgICAgIDxVSUl0ZW1Db250ZW50IGl0ZW09e3NlY3Rpb259IC8+XG4gICAgICAgIDwvYT5cbiAgICAgICAgPGRpdiBjbGFzcz1cIm5hdmJhci1kcm9wZG93biB7cmlnaHQgPyAnaXMtcmlnaHQnIDogJyd9XCI+XG4gICAgICAgICAgICB7I2VhY2ggaXRlbXMgYXMgaXRlbSAoaXRlbS5pZCl9XG4gICAgICAgICAgICAgICAgPFVJSXRlbSB7cm9vdH0ge2l0ZW19IG9uOmNsaWNrIC8+XG4gICAgICAgICAgICB7L2VhY2h9XG4gICAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuezplbHNlIGlmIHNlY3Rpb24udXJsfVxuICAgIDxhXG4gICAgICAgIGNsYXNzPVwibmF2YmFyLWl0ZW0ge2hpZGRlbiA/IGBpcy1oaWRkZW4tJHtoaWRkZW59YCA6ICcnfSBcIlxuICAgICAgICBocmVmPVwie3Jvb3R9e3NlY3Rpb24udXJsfVwiXG4gICAgICAgIGRhdGEtaHJlZj17c2VjdGlvbi51cmx9XG4gICAgICAgIG9uY2xpY2s9e29uQ2xpY2t9XG4gICAgPlxuICAgICAgICA8VUlJdGVtQ29udGVudCBpdGVtPXtzZWN0aW9ufSAvPlxuICAgIDwvYT5cbns6ZWxzZX1cbiAgICA8ZGl2XG4gICAgICAgIGNsYXNzPVwibmF2YmFyLWl0ZW0ge2hpZGRlbiA/IGBpcy1oaWRkZW4tJHtoaWRkZW59YCA6ICcnfSBcIlxuICAgICAgICBvbmNsaWNrPXtvbkNsaWNrfVxuICAgICAgICBvbmtleXVwPXtvbkNsaWNrfVxuICAgICAgICByb2xlPVwiYnV0dG9uXCJcbiAgICAgICAgdGFiaW5kZXg9XCIwXCJcbiAgICA+XG4gICAgICAgIDxVSUl0ZW1Db250ZW50IGl0ZW09e3NlY3Rpb259IC8+XG4gICAgPC9kaXY+XG57L2lmfVxuIiwiPHNjcmlwdD5cbiAgICBjb25zdCBDT01QT05FTlRfTkFNRSA9IFwidG9wLW5hdmJhci1idXJnZXJcIjtcblxuICAgIGltcG9ydCB7IGNyZWF0ZUV2ZW50RGlzcGF0Y2hlciwgb25Nb3VudCB9IGZyb20gXCJzdmVsdGVcIjtcbiAgICBpbXBvcnQgU2lkZU1lbnVTdG9yZSBmcm9tIFwiLi4vc2lkZS9zdG9yZVwiO1xuXG4gICAgY29uc3QgZGlzcGF0Y2ggPSBjcmVhdGVFdmVudERpc3BhdGNoZXIoKTtcblxuICAgIGltcG9ydCBub3RDb21tb24gZnJvbSBcIi4uLy4uLy4uL2NvbW1vblwiO1xuXG5cblxuICAgIGZ1bmN0aW9uIHRvZ2dsZShlKSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgY2xvc2VkID0gIWNsb3NlZDtcbiAgICAgICAgZGlzcGF0Y2goXCJ0b2dnbGVcIiwge1xuICAgICAgICAgICAgY2xvc2VkLFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFN0YW5kYXJ0VXBkYXRlRXZlbnROYW1lKCkge1xuICAgICAgICByZXR1cm4gQ09NUE9ORU5UX05BTUUgKyBcIjp1cGRhdGVcIjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAdHlwZWRlZiB7T2JqZWN0fSBQcm9wc1xuICAgICAqIEBwcm9wZXJ0eSB7YW55fSBbZXZlbnRzXVxuICAgICAqIEBwcm9wZXJ0eSB7YW55fSBbcmVnaXN0ZXJdXG4gICAgICogQHByb3BlcnR5IHtib29sZWFufSBbY2xvc2VkXVxuICAgICAqIEBwcm9wZXJ0eSB7YW55fSBbb25VcGRhdGVdXG4gICAgICovXG5cbiAgICAvKiogQHR5cGUge1Byb3BzfSAqL1xuICAgIGxldCB7XG4gICAgICAgIGV2ZW50cyA9ICRiaW5kYWJsZSh7fSksXG4gICAgICAgIHJlZ2lzdGVyID0gbm90Q29tbW9uLnJlZ2lzdGVyV2lkZ2V0RXZlbnRzLmJpbmQobm90Q29tbW9uKSxcbiAgICAgICAgY2xvc2VkID0gJGJpbmRhYmxlKHRydWUpLFxuICAgICAgICBvblVwZGF0ZSA9IChkYXRhKSA9PiB7XG4gICAgICAgICAgICBjbG9zZWQgPSBkYXRhLmNsb3NlZDtcbiAgICAgICAgfVxuICAgIH0gPSAkcHJvcHMoKTtcblxuICAgIG9uTW91bnQoKCkgPT4ge1xuICAgICAgICBpZiAoIW5vdENvbW1vbi5vYmpIYXMoZXZlbnRzLCBnZXRTdGFuZGFydFVwZGF0ZUV2ZW50TmFtZSgpKSkge1xuICAgICAgICAgICAgZXZlbnRzW2dldFN0YW5kYXJ0VXBkYXRlRXZlbnROYW1lKCldID0gb25VcGRhdGU7XG4gICAgICAgIH1cbiAgICAgICAgcmVnaXN0ZXIoZXZlbnRzKTtcbiAgICB9KTtcblxuICAgIFNpZGVNZW51U3RvcmUuc3Vic2NyaWJlKCh2YWwpID0+IHtcbiAgICAgICAgY2xvc2VkID0gIXZhbC5vcGVuO1xuICAgICAgICByZXR1cm4gdmFsO1xuICAgIH0pO1xuPC9zY3JpcHQ+XG5cbjxhXG4gICAgaHJlZlxuICAgIG9uY2xpY2s9e3RvZ2dsZX1cbiAgICByb2xlPVwiYnV0dG9uXCJcbiAgICBjbGFzcz1cIm5hdmJhci1idXJnZXIge2Nsb3NlZCA/ICcnIDogJ2lzLWFjdGl2ZSd9XCJcbiAgICBhcmlhLWxhYmVsPVwibWVudVwiXG4gICAgYXJpYS1leHBhbmRlZD1cImZhbHNlXCJcbiAgICBkYXRhLXRhcmdldD1cIm5hdmJhclwiXG4+XG4gICAgPHNwYW4gYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9zcGFuPlxuICAgIDxzcGFuIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjwvc3Bhbj5cbiAgICA8c3BhbiBhcmlhLWhpZGRlbj1cInRydWVcIj48L3NwYW4+XG48L2E+XG4iLCI8IS0tIEBtaWdyYXRpb24tdGFzayBFcnJvciB3aGlsZSBtaWdyYXRpbmcgU3ZlbHRlIGNvZGU6IENhbid0IG1pZ3JhdGUgY29kZSB3aXRoIGJlZm9yZVVwZGF0ZS4gUGxlYXNlIG1pZ3JhdGUgYnkgaGFuZC4gLS0+XG48c2NyaXB0PlxuICAgIGltcG9ydCB7IGNyZWF0ZUV2ZW50RGlzcGF0Y2hlciB9IGZyb20gXCJzdmVsdGVcIjtcbiAgICBjb25zdCBkaXNwYXRjaCA9IGNyZWF0ZUV2ZW50RGlzcGF0Y2hlcigpO1xuXG4gICAgaW1wb3J0IFNpZGVNZW51IGZyb20gXCIuLi9zaWRlXCI7XG5cbiAgICBpbXBvcnQgVUlCcmFuZCBmcm9tIFwiLi91aS5icmFuZC5zdmVsdGVcIjtcbiAgICBpbXBvcnQgVUlOYXZiYXJJdGVtIGZyb20gXCIuL3VpLml0ZW0uc3ZlbHRlXCI7XG4gICAgaW1wb3J0IFVJTmF2YmFyU2VjdGlvbiBmcm9tIFwiLi91aS5zZWN0aW9uLnN2ZWx0ZVwiO1xuICAgIGltcG9ydCBVSU5hdmJhckJ1cmdlciBmcm9tIFwiLi91aS5idXJnZXIuc3ZlbHRlXCI7XG4gICAgXG5cbiAgICAvKipcbiAgICAgKiBAdHlwZWRlZiB7T2JqZWN0fSBQcm9wc1xuICAgICAqIEBwcm9wZXJ0eSB7YW55fSBbc2VjdGlvbnNdIC0gaW1wb3J0IHsgYmVmb3JlVXBkYXRlIH0gZnJvbSBcInN2ZWx0ZVwiO1xuICAgICAqIEBwcm9wZXJ0eSB7YW55fSBbaXRlbXNdXG4gICAgICogQHByb3BlcnR5IHtzdHJpbmd9IFtyb290XVxuICAgICAqIEBwcm9wZXJ0eSB7YW55fSBbbmF2aWdhdGVdXG4gICAgICogQHByb3BlcnR5IHtib29sZWFufSBbYnJhbmRdXG4gICAgICogQHByb3BlcnR5IHtib29sZWFufSBbc2hvd0J1cmdlcl1cbiAgICAgKiBAcHJvcGVydHkge2Jvb2xlYW59IFtidXJnZXJDb250cm9sc1NpZGVtZW51XVxuICAgICAqL1xuXG4gICAgLyoqIEB0eXBlIHtQcm9wc30gKi9cbiAgICBsZXQge1xuICAgICAgICBzZWN0aW9ucyA9IFtdLFxuICAgICAgICBpdGVtcyA9IFtdLFxuICAgICAgICByb290ID0gXCJcIixcbiAgICAgICAgbmF2aWdhdGUgPSBudWxsLFxuICAgICAgICBicmFuZCA9IGZhbHNlLFxuICAgICAgICBzaG93QnVyZ2VyID0gdHJ1ZSxcbiAgICAgICAgYnVyZ2VyQ29udHJvbHNTaWRlbWVudSA9IHRydWVcbiAgICB9ID0gJHByb3BzKCk7XG5cbiAgICBsZXQgbWVudUNsb3NlZCA9ICRzdGF0ZSh0cnVlKTtcblxuICAgIGZ1bmN0aW9uIG9uQ2xpY2soeyBkZXRhaWwgfSkge1xuICAgICAgICBsZXQgeyBldmVudCwgZWxlbWVudCB9ID0gZGV0YWlsO1xuICAgICAgICBpZiAoT2JqZWN0Lmhhc093bihlbGVtZW50LCBcImFjdGlvblwiKSkge1xuICAgICAgICAgICAgcmV0dXJuIGVsZW1lbnQuYWN0aW9uKGV2ZW50LCBlbGVtZW50KTtcbiAgICAgICAgfVxuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBpZiAodHlwZW9mIG5hdmlnYXRlID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgIG5hdmlnYXRlKHtcbiAgICAgICAgICAgICAgICBmdWxsOiBldmVudC5jdXJyZW50VGFyZ2V0LmdldEF0dHJpYnV0ZShcImhyZWZcIiksXG4gICAgICAgICAgICAgICAgc2hvcnQ6IGV2ZW50LmN1cnJlbnRUYXJnZXQuZGF0YXNldC5ocmVmLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGxldCBzZWN0aW9uc0l0ZW1zQ291bnQgPSB7fTtcbiAgICBsZXQgc2VjdGlvbnNJdGVtcyA9IHt9O1xuICAgIC8qXG4gICAgYmVmb3JlVXBkYXRlKCgpID0+IHtcbiAgICAgICAgZm9yIChsZXQgc2VjdGlvbiBvZiBzZWN0aW9ucykge1xuICAgICAgICAgICAgc2VjdGlvbnNJdGVtc1tzZWN0aW9uLmlkXSA9IGl0ZW1zLmZpbHRlcihcbiAgICAgICAgICAgICAgICAodCkgPT4gdC5zZWN0aW9uID09PSBzZWN0aW9uLmlkXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgc2VjdGlvbnNJdGVtc0NvdW50W3NlY3Rpb24uaWRdID0gaXRlbXMuZmlsdGVyKFxuICAgICAgICAgICAgICAgICh0KSA9PiB0LnNlY3Rpb24gPT09IHNlY3Rpb24uaWRcbiAgICAgICAgICAgICkubGVuZ3RoO1xuICAgICAgICB9XG4gICAgfSk7XG4qL1xuICAgIGZ1bmN0aW9uIHRvZ2dsZUJ1cmdlcih7IGRldGFpbCB9KSB7XG4gICAgICAgIGlmIChidXJnZXJDb250cm9sc1NpZGVtZW51KSB7XG4gICAgICAgICAgICBTaWRlTWVudS50b2dnbGUoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRpc3BhdGNoKFwidG9nZ2xlQnVyZ2VyXCIsIGRldGFpbCk7XG4gICAgICAgICAgICBtZW51Q2xvc2VkID0gZGV0YWlsLmNsb3NlZDtcbiAgICAgICAgfVxuICAgIH1cbjwvc2NyaXB0PlxuXG48ZGl2IGNsYXNzPVwibmF2YmFyLWJyYW5kXCI+XG4gICAgeyNpZiBicmFuZH1cbiAgICAgICAgPFVJQnJhbmQgey4uLmJyYW5kfSAvPlxuICAgIHsvaWZ9XG4gICAgeyNlYWNoIHNlY3Rpb25zIGFzIHNlY3Rpb24gKHNlY3Rpb24uaWQpfVxuICAgICAgICB7I2lmIHNlY3Rpb24uc2hvd09uVG91Y2h9XG4gICAgICAgICAgICA8VUlOYXZiYXJJdGVtXG4gICAgICAgICAgICAgICAgaGlkZGVuPVwiZGVza3RvcFwiXG4gICAgICAgICAgICAgICAgaXRlbT17c2VjdGlvbn1cbiAgICAgICAgICAgICAgICB7cm9vdH1cbiAgICAgICAgICAgICAgICBvbjpjbGljaz17b25DbGlja31cbiAgICAgICAgICAgIC8+XG4gICAgICAgIHsvaWZ9XG4gICAgey9lYWNofVxuICAgIHsjZWFjaCBpdGVtcyBhcyBpdGVtIChpdGVtLmlkKX1cbiAgICAgICAgeyNpZiBpdGVtLnNob3dPblRvdWNofVxuICAgICAgICAgICAgPFVJTmF2YmFySXRlbSBoaWRkZW49XCJkZXNrdG9wXCIge2l0ZW19IHtyb290fSBvbjpjbGljaz17b25DbGlja30gLz5cbiAgICAgICAgey9pZn1cbiAgICB7L2VhY2h9XG4gICAgeyNpZiBzaG93QnVyZ2VyfVxuICAgICAgICA8VUlOYXZiYXJCdXJnZXIgb246dG9nZ2xlPXt0b2dnbGVCdXJnZXJ9IC8+XG4gICAgey9pZn1cbjwvZGl2PlxuPGRpdiBpZD1cIm5hdmJhclwiIGNsYXNzPVwibmF2YmFyLW1lbnUge21lbnVDbG9zZWQgPyAnJyA6ICdpcy1hY3RpdmUnfVwiPlxuICAgIDxkaXYgY2xhc3M9XCJuYXZiYXItc3RhcnRcIj5cbiAgICAgICAgeyNlYWNoIGl0ZW1zIGFzIGl0ZW19XG4gICAgICAgICAgICB7I2lmIGl0ZW0ucGxhY2UgPT09IFwic3RhcnRcIn1cbiAgICAgICAgICAgICAgICA8VUlOYXZiYXJJdGVtIGhpZGRlbj1cInRvdWNoXCIge2l0ZW19IG9uOmNsaWNrPXtvbkNsaWNrfSAvPlxuICAgICAgICAgICAgey9pZn1cbiAgICAgICAgey9lYWNofVxuICAgIDwvZGl2PlxuICAgIDxkaXYgY2xhc3M9XCJuYXZiYXItZW5kXCI+XG4gICAgICAgIHsjZWFjaCBzZWN0aW9ucyBhcyBzZWN0aW9uIChzZWN0aW9uLmlkKX1cbiAgICAgICAgICAgIHsjaWYgKHNlY3Rpb25zSXRlbXNDb3VudFtzZWN0aW9uLmlkXSB8fCBzZWN0aW9uLmluZGljYXRvciB8fCBzZWN0aW9uLnRhZykgJiYgc2VjdGlvbi5wbGFjZSA9PSBcImVuZFwifVxuICAgICAgICAgICAgICAgIDxVSU5hdmJhclNlY3Rpb25cbiAgICAgICAgICAgICAgICAgICAgcmlnaHQ9e3RydWV9XG4gICAgICAgICAgICAgICAgICAgIGhpZGRlbj17c2VjdGlvbi5oaWRkZW59XG4gICAgICAgICAgICAgICAgICAgIHtyb290fVxuICAgICAgICAgICAgICAgICAgICB7c2VjdGlvbn1cbiAgICAgICAgICAgICAgICAgICAgaXRlbXM9e3NlY3Rpb25zSXRlbXNbc2VjdGlvbi5pZF19XG4gICAgICAgICAgICAgICAgICAgIG9uOmNsaWNrPXtvbkNsaWNrfVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICB7L2lmfVxuICAgICAgICB7L2VhY2h9XG4gICAgPC9kaXY+XG48L2Rpdj5cbiIsImltcG9ydCBNZW51IGZyb20gXCIuLi9tZW51LmpzXCI7XG5pbXBvcnQgVUlOYXZiYXJUb3AgZnJvbSBcIi4vdWkudG9wLnN2ZWx0ZVwiO1xuaW1wb3J0IHsgbW91bnQgfSBmcm9tIFwic3ZlbHRlXCI7XG5cbmNvbnN0IFRZUEUgPSBcInRvcFwiO1xuXG5jbGFzcyBub3RUb3BNZW51IGV4dGVuZHMgTWVudSB7XG4gICAgc3RhdGljIERFRkFVTFQgPSB7XG4gICAgICAgIHNlY3Rpb246IFwiYW55XCIsXG4gICAgICAgIHNlY3Rpb25UaXRsZTogXCLQnNC10L3RjlwiLFxuICAgICAgICBwcmlvcml0eTogMCxcbiAgICAgICAgLy9saW5rLCBidXR0b24sIGRyb3Bkb3duLCBjb21wb25lbnRcbiAgICAgICAgdHlwZTogXCJsaW5rXCIsXG4gICAgICAgIHBsYWNlOiBcIm1haW5cIixcbiAgICB9O1xuXG4gICAgc3RhdGljIG9wdGlvbnMgPSB7XG4gICAgICAgIGJyYW5kOiBmYWxzZSxcbiAgICAgICAgdHlwZTogVFlQRSxcbiAgICAgICAgaXRlbXM6IFtdLFxuICAgICAgICBzZWN0aW9uczogW10sXG4gICAgICAgIHRhcmdldFNlbGVjdG9yOiBgIyR7VFlQRX0tbWVudWAsXG4gICAgICAgIHJvb3Q6IFwiL1wiLFxuICAgICAgICBkaXJlY3ROYXZpZ2F0aW9uOiBmYWxzZSxcbiAgICAgICAgbmF2aWdhdGU6ICh1cmxzKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmhpZGUoKTtcbiAgICAgICAgICAgIGlmICghdGhpcy5pc0RpcmVjdE5hdmlnYXRpb24oKSAmJiB0aGlzLmFwcCkge1xuICAgICAgICAgICAgICAgIGxldCBmdW5jID0gdGhpcy5hcHAuZ2V0V29ya2luZyhcInJvdXRlclwiKTtcbiAgICAgICAgICAgICAgICBpZiAoZnVuYykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZnVuYy5uYXZpZ2F0ZSh1cmxzLnNob3J0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkb2N1bWVudC5sb2NhdGlvbi5hc3NpZ24odXJscy5mdWxsKTtcbiAgICAgICAgfSxcbiAgICB9O1xuXG4gICAgc3RhdGljIHJlbmRlcihhcHApIHtcbiAgICAgICAgaWYgKGFwcCkge1xuICAgICAgICAgICAgdGhpcy5zZXRBcHAoYXBwKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnByZXBhcmVEYXRhKCk7XG4gICAgICAgIGlmICghdGhpcy5tZW51KSB7XG4gICAgICAgICAgICBsZXQgdGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcbiAgICAgICAgICAgICAgICB0aGlzLmdldE9wdGlvbnMoKS50YXJnZXRTZWxlY3RvclxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGlmICghdGFyZ2V0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5tZW51ID0gbW91bnQoVUlOYXZiYXJUb3AsIHtcbiAgICAgICAgICAgICAgICB0YXJnZXQsXG4gICAgICAgICAgICAgICAgcHJvcHM6IHtcbiAgICAgICAgICAgICAgICAgICAgYnJhbmQ6IHRoaXMuZ2V0T3B0aW9ucygpLmJyYW5kLFxuICAgICAgICAgICAgICAgICAgICBpdGVtczogdGhpcy5pdGVtcyxcbiAgICAgICAgICAgICAgICAgICAgc2VjdGlvbnM6IHRoaXMuc2VjdGlvbnMsXG4gICAgICAgICAgICAgICAgICAgIHJvb3Q6IHRoaXMuZ2V0T3B0aW9ucygpLnJvb3QsXG4gICAgICAgICAgICAgICAgICAgIG5hdmlnYXRlOiB0aGlzLmdldE9wdGlvbnMoKS5uYXZpZ2F0ZSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLmludGVydmFsID0gc2V0SW50ZXJ2YWwoXG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVNZW51QWN0aXZlSXRlbS5iaW5kKHRoaXMpLFxuICAgICAgICAgICAgICAgIDIwMFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHN0YXRpYyB1cGRhdGVNZW51KHVybCkge1xuICAgICAgICBBcnJheS5mcm9tKFxuICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcbiAgICAgICAgICAgICAgICB0aGlzLmdldE9wdGlvbnMoKS50YXJnZXRTZWxlY3RvciArIFwiIGFzaWRlLm1lbnUgYVwiXG4gICAgICAgICAgICApXG4gICAgICAgICkuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgIGl0ZW0uaHJlZiA9PSB1cmwgfHxcbiAgICAgICAgICAgICAgICAodXJsLmhyZWYgJiYgdXJsLmhyZWYuaW5kZXhPZihpdGVtLmhyZWYpID09IDApXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICBpdGVtLmNsYXNzTGlzdC5hZGQoXCJpcy1hY3RpdmVcIik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGl0ZW0uY2xhc3NMaXN0LnJlbW92ZShcImlzLWFjdGl2ZVwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgc3RhdGljIHVwZGF0ZU1lbnVBY3RpdmVJdGVtKCkge1xuICAgICAgICBsZXQgdXJsID0gd2luZG93LmxvY2F0aW9uLnRvU3RyaW5nKCksXG4gICAgICAgICAgICBsYXN0TG9jYXRpb24gPSB0aGlzLmxvY2F0aW9uO1xuICAgICAgICBpZiAobGFzdExvY2F0aW9uKSB7XG4gICAgICAgICAgICBpZiAodXJsICE9PSBsYXN0TG9jYXRpb24pIHtcbiAgICAgICAgICAgICAgICB0aGlzLmxvY2F0aW9uID0gdXJsO1xuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlTWVudSh1cmwpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5sb2NhdGlvbiA9IHVybDtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlTWVudSh1cmwpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc3RhdGljIHRvZ2dsZSgpIHtcbiAgICAgICAgbGV0IGVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0aGlzLmdldE9wdGlvbnMoKS50YXJnZXRTZWxlY3Rvcik7XG4gICAgICAgIGVsLmNsYXNzTGlzdC50b2dnbGUoXCJpcy1hY3RpdmVcIik7XG4gICAgfVxuXG4gICAgc3RhdGljIGhpZGUoKSB7XG4gICAgICAgIGxldCBlbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGhpcy5nZXRPcHRpb25zKCkudGFyZ2V0U2VsZWN0b3IpO1xuICAgICAgICBlbC5jbGFzc0xpc3QucmVtb3ZlKFwiaXMtYWN0aXZlXCIpO1xuICAgIH1cblxuICAgIHN0YXRpYyBzZXRCdXJnZXJTdGF0ZShtZW51Q2xvc2VkKSB7XG4gICAgICAgIHRoaXMubWVudS4kc2V0KHtcbiAgICAgICAgICAgIG1lbnVDbG9zZWQsXG4gICAgICAgIH0pO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgbm90VG9wTWVudTtcbiIsImNvbnN0IERFRkFVTFRfVFJBU0ZPUk1FUiA9IChyZXMpID0+IHtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgcmV0dXJuIE9iamVjdC5oYXNPd24ocmVzLCBcInN0YXR1c1wiKSAmJiBPYmplY3QuaGFzT3duKHJlcywgXCJyZXN1bHRcIilcbiAgICAgICAgPyByZXMucmVzdWx0XG4gICAgICAgIDogcmVzO1xufTtcblxuZXhwb3J0IHsgREVGQVVMVF9UUkFTRk9STUVSIH07XG4iLCJpbXBvcnQgbm90Q29tbW9uIGZyb20gXCIuLi9jb21tb25cIjtcbmltcG9ydCB7IERFRkFVTFRfVFJBU0ZPUk1FUiB9IGZyb20gXCIuL2NvbnN0XCI7XG5leHBvcnQgZGVmYXVsdCAoeyBBQ1RJT04sIFRJVExFLCBVSUNvbnN0cnVjdG9yLCBkYXRhUHJvdmlkZXIsIGdvQmFjayB9KSA9PiB7XG4gICAgcmV0dXJuIGNsYXNzIHtcbiAgICAgICAgc3RhdGljIGFzeW5jIHJ1bihjb250cm9sbGVyLCBwYXJhbXMpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY29udHJvbGxlci5zZXRCcmVhZGNydW1icyhbXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBg0J/RgNC+0YHQvNC+0YLRgCBcIiR7VElUTEV9XCJgLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgICAgIGF3YWl0IGNvbnRyb2xsZXIucHJlbG9hZFZhcmlhbnRzKEFDVElPTik7XG4gICAgICAgICAgICAgICAgaWYgKGNvbnRyb2xsZXIudWlbQUNUSU9OXSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlci4kZGVzdHJveVVJKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGxldCBkYXRhID0ge307XG4gICAgICAgICAgICAgICAgaWYgKGRhdGFQcm92aWRlcikge1xuICAgICAgICAgICAgICAgICAgICBpZiAobm90Q29tbW9uLmlzRnVuYyhkYXRhUHJvdmlkZXIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobm90Q29tbW9uLmlzQXN5bmMoZGF0YVByb3ZpZGVyKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEgPSBhd2FpdCBkYXRhUHJvdmlkZXIocGFyYW1zKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YSA9IGRhdGFQcm92aWRlcihwYXJhbXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YSA9IHsgLi4uZGF0YVByb3ZpZGVyIH07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0VHJhbnNmb3JtZXIgPSBjb250cm9sbGVyLmdldE9wdGlvbnMoXG4gICAgICAgICAgICAgICAgICAgIGAke0FDVElPTn0udHJhbnNmb3JtZXJgLFxuICAgICAgICAgICAgICAgICAgICBERUZBVUxUX1RSQVNGT1JNRVJcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXIudWlbQUNUSU9OXSA9IG5ldyBVSUNvbnN0cnVjdG9yKHtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0OiBjb250cm9sbGVyLmdldENvbnRhaW5lcklubmVyRWxlbWVudCgpLFxuICAgICAgICAgICAgICAgICAgICBwcm9wczogeyBwYXJhbXMsIC4uLnJlc3VsdFRyYW5zZm9ybWVyKGRhdGEpIH0sXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgY29udHJvbGxlci5lbWl0KGBhZnRlcjpyZW5kZXI6JHtBQ1RJT059YCk7XG4gICAgICAgICAgICAgICAgaWYgKGdvQmFjayAmJiBub3RDb21tb24uaXNGdW5jKGdvQmFjaykpIHtcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlci51aVtBQ1RJT05dLm9uKFwicmVqZWN0XCIsICgpID0+IGdvQmFjaygpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgY29udHJvbGxlci5yZXBvcnQoZSk7XG4gICAgICAgICAgICAgICAgY29udHJvbGxlci5zaG93RXJyb3JNZXNzYWdlKGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbn07XG4iLCJpbXBvcnQgbm90Q29tbW9uIGZyb20gXCIuLi9jb21tb25cIjtcblxuY29uc3QgUFJFTE9BREFCTEUgPSBbXCJjcmVhdGVcIiwgXCJ1cGRhdGVcIiwgXCJsaXN0XCIsIFwiZGVsZXRlXCIsIFwiZGV0YWlsc1wiXTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ1JVRFZhcmlhbnRzUHJlbG9hZGVyIHtcbiAgICBzdGF0aWMgYXN5bmMgcHJlbG9hZChjb250cm9sbGVyLCB0eXBlID0gXCJsaXN0XCIpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmICghUFJFTE9BREFCTEUuaW5jbHVkZXModHlwZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgcHJlbG9hZCA9IGNvbnRyb2xsZXIuZ2V0T3B0aW9ucyhgJHt0eXBlfS5wcmVsb2FkYCwge30pO1xuICAgICAgICAgICAgaWYgKE9iamVjdC5rZXlzKHByZWxvYWQpLmxlbmd0aCA9PSAwKSB7XG4gICAgICAgICAgICAgICAgcHJlbG9hZCA9IGNvbnRyb2xsZXIuZ2V0T3B0aW9ucyhgcHJlbG9hZGAsIHt9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChPYmplY3Qua2V5cyhwcmVsb2FkKS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgbGV0IGxpYlByb3BzID0gT2JqZWN0LmtleXMocHJlbG9hZCk7XG4gICAgICAgICAgICAgICAgbGV0IHByb21zID0gW107XG4gICAgICAgICAgICAgICAgbGliUHJvcHMuZm9yRWFjaCgocHJvcCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBsZXQgbW9kZWxOYW1lID0gbm90Q29tbW9uLmxvd2VyRmlyc3RMZXR0ZXIocHJlbG9hZFtwcm9wXSk7XG4gICAgICAgICAgICAgICAgICAgIGxldCBNb2RlbCA9IGNvbnRyb2xsZXIubWFrZVttb2RlbE5hbWVdKHt9KTtcbiAgICAgICAgICAgICAgICAgICAgcHJvbXMucHVzaChNb2RlbC4kbGlzdEFsbCgpKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBsZXQgcmVzdWx0cyA9IGF3YWl0IFByb21pc2UuYWxsKHByb21zKTtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxpYlByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHByb3BOYW1lID0gbGliUHJvcHNbaV07XG4gICAgICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdHNbaV0uc3RhdHVzID09PSBcIm9rXCIgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIEFycmF5LmlzQXJyYXkocmVzdWx0c1tpXS5yZXN1bHQpXG4gICAgICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0c0xpc3QgPSByZXN1bHRzW2ldLnJlc3VsdDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHZhcmlhbnRzID0gcmVzdWx0c0xpc3QubWFwKChpdGVtKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IGl0ZW0uX2lkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogaXRlbS50aXRsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyLnNldE9wdGlvbnMoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYHZhcmlhbnRzLiR7dHlwZX0uJHtwcm9wTmFtZX1gLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhcmlhbnRzXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29udHJvbGxlci5sb2coXCJwcmVsb2FkIGZpbmlzaGVkXCIpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBjb250cm9sbGVyLnJlcG9ydChlKTtcbiAgICAgICAgICAgIGNvbnRyb2xsZXIuc2hvd0Vycm9yTWVzc2FnZShlKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsImNvbnN0IERFRkFVTFRfQUNUSU9OID0gXCJsaXN0XCI7XG5cbmNsYXNzIG5vdENSVURSb3V0ZXIge1xuICAgIHN0YXRpYyBleHRyYWN0QWN0aW9uTmFtZShjb250cm9sbGVyLCBwYXJhbXMpIHtcbiAgICAgICAgbGV0IGFjdGlvbk5hbWUgPSBERUZBVUxUX0FDVElPTjtcbiAgICAgICAgaWYgKHBhcmFtcy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgIGlmIChwYXJhbXNbMF0gPT09IFwiY3JlYXRlXCIpIHtcbiAgICAgICAgICAgICAgICBhY3Rpb25OYW1lID0gXCJjcmVhdGVcIjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY29udHJvbGxlci5hY3Rpb25IYW5kbGVyRXhpc3RzKHBhcmFtc1swXSkpIHtcbiAgICAgICAgICAgICAgICBhY3Rpb25OYW1lID0gcGFyYW1zWzBdO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBhY3Rpb25OYW1lID0gXCJkZXRhaWxzXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAocGFyYW1zLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgIGlmIChwYXJhbXNbMV0gPT09IFwiZGVsZXRlXCIpIHtcbiAgICAgICAgICAgICAgICBhY3Rpb25OYW1lID0gXCJkZWxldGVcIjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocGFyYW1zWzFdID09PSBcInVwZGF0ZVwiKSB7XG4gICAgICAgICAgICAgICAgYWN0aW9uTmFtZSA9IFwidXBkYXRlXCI7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGFjdGlvbk5hbWUgPSBwYXJhbXNbMV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFjdGlvbk5hbWU7XG4gICAgfVxuXG4gICAgc3RhdGljIHJvdXRlKGNvbnRyb2xsZXIsIHBhcmFtcykge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgYWN0aW9uTmFtZSA9IG5vdENSVURSb3V0ZXIuZXh0cmFjdEFjdGlvbk5hbWUoXG4gICAgICAgICAgICAgICAgY29udHJvbGxlcixcbiAgICAgICAgICAgICAgICBwYXJhbXNcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBjb250cm9sbGVyLnNldEN1cnJlbnRBY3Rpb24oYWN0aW9uTmFtZSk7XG4gICAgICAgICAgICByZXR1cm4gY29udHJvbGxlci5ydW5BY3Rpb24oYWN0aW9uTmFtZSwgcGFyYW1zKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgY29udHJvbGxlci5yZXBvcnQoZSk7XG4gICAgICAgICAgICBjb250cm9sbGVyLnNob3dFcnJvck1lc3NhZ2UoZSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IG5vdENSVURSb3V0ZXI7XG4iLCJpbXBvcnQgeyBVSVN1Y2Nlc3MsIFVJRXJyb3IgfSBmcm9tIFwiLi4vLi4vZWxlbWVudHMvbm90aWZpY2F0aW9uXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENSVURNZXNzYWdlIHtcbiAgICBzdGF0aWMgZXJyb3IoY29udHJvbGxlciwgdGl0bGUsIG1lc3NhZ2UpIHtcbiAgICAgICAgY29udHJvbGxlci5zZXRVSShcbiAgICAgICAgICAgIFwiX19tZXNzYWdlX19cIixcbiAgICAgICAgICAgIG5ldyBVSUVycm9yKHtcbiAgICAgICAgICAgICAgICB0YXJnZXQ6IGNvbnRyb2xsZXIuZ2V0Q29udGFpbmVySW5uZXJFbGVtZW50KCksXG4gICAgICAgICAgICAgICAgcHJvcHM6IHsgdGl0bGUsIG1lc3NhZ2UgfSxcbiAgICAgICAgICAgIH0pXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgc3RhdGljIHN1Y2Nlc3MoY29udHJvbGxlciwgdGl0bGUsIG1lc3NhZ2UpIHtcbiAgICAgICAgY29udHJvbGxlci5zZXRVSShcbiAgICAgICAgICAgIFwiX19tZXNzYWdlX19cIixcbiAgICAgICAgICAgIG5ldyBVSVN1Y2Nlc3Moe1xuICAgICAgICAgICAgICAgIHRhcmdldDogY29udHJvbGxlci5nZXRDb250YWluZXJJbm5lckVsZW1lbnQoKSxcbiAgICAgICAgICAgICAgICBwcm9wczogeyB0aXRsZSwgbWVzc2FnZSB9LFxuICAgICAgICAgICAgfSlcbiAgICAgICAgKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBub3RMb2NhbGUgfSBmcm9tIFwiLi4vLi4vLi4vLi4vbG9jYWxlXCI7XG5pbXBvcnQgbm90Q29tbW9uIGZyb20gXCIuLi8uLi8uLi9jb21tb25cIjtcbmltcG9ydCB7IG5vdEZvcm0gfSBmcm9tIFwiLi4vLi4vLi4vY29tcG9uZW50c1wiO1xuaW1wb3J0IHsgREVGQVVMVF9UUkFTRk9STUVSIH0gZnJvbSBcIi4uLy4uL2NvbnN0XCI7XG5pbXBvcnQgeyBOQVZJR0FUSU9OX0RFTEFZX0RFRkFVTFQgfSBmcm9tIFwiLi4vLi4vLi4vY29uc3RcIjtcbmltcG9ydCB7IG1vdW50IH0gZnJvbSBcInN2ZWx0ZVwiO1xuXG5jb25zdCBERUZBVUxUX0JSRUFEQ1JVTUJfVEFJTCA9IFwi0J/RgNC+0YHQvNC+0YLRgFwiO1xuXG4vKipcbiAqIEdlbmVyaWMgQ1JVRCBhY3Rpb24gY2xhc3NcbiAqIEBjbGFzc1xuICovXG5jbGFzcyBDUlVER2VuZXJpY0FjdGlvbiB7XG4gICAgc3RhdGljIGdldCBOQVZJR0FUSU9OX0RFTEFZKCkge1xuICAgICAgICByZXR1cm4gTkFWSUdBVElPTl9ERUxBWV9ERUZBVUxUO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBEZWZhdWx0IGJyZWFkY3J1bWJzIHRhaWwgdGVtcGxhdGUgc3RyaW5nXG4gICAgICogQHJldHVybnMge3N0cmluZ31cbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IGRlYWZ1bHRCcmVhZGNydW1ic1RhaWwoKSB7XG4gICAgICAgIHJldHVybiBERUZBVUxUX0JSRUFEQ1JVTUJfVEFJTDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBMaWJhcmFyeSBvZiBicmVhZGNydW1icyB0YWlscyBzdHJpbmdzIHRlbXBsYXRlc1xuICAgICAqIEByZXR1cm5zIHtPYmplY3R9XG4gICAgICovXG4gICAgc3RhdGljIGdldCBicmVhZGNydW1ic1RhaWxzKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcHJlc2V0OiBERUZBVUxUX0JSRUFEQ1JVTUJfVEFJTCxcbiAgICAgICAgICAgIHNldDogJ9Cf0YDQvtGB0LzQvtGC0YAsIFwiezp0aXRsZX1cIicsXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0ZW1wbGF0ZSBvZiBicmVhZGNydW1icyB0YWlsXG4gICAgICogQHBhcmFtICAge3N0cmluZ30gICAgbmFtZVxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9ICAgIHRlbXBsYXRlIHN0cmluZ1xuICAgICAqL1xuICAgIHN0YXRpYyBnZXRCcmVhZGNydW1ic1RhaWwobmFtZSkge1xuICAgICAgICBpZiAoIXRoaXMuYnJlYWRjcnVtYnNUYWlscykge1xuICAgICAgICAgICAgcmV0dXJuIFwiXCI7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5vdENvbW1vbi5zZWxlY3QoXG4gICAgICAgICAgICB0aGlzLmJyZWFkY3J1bWJzVGFpbHMsXG4gICAgICAgICAgICBuYW1lLFxuICAgICAgICAgICAgdGhpcy5kZWFmdWx0QnJlYWRjcnVtYnNUYWlsXG4gICAgICAgICk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBzdGF0aWMge3N0cmluZ30gQUNUSU9OIHRoaXMgY29udHJvbGxlciBhY3Rpb24gbmFtZSwgdXNlZCBpbiBVUklcbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IEFDVElPTigpIHtcbiAgICAgICAgcmV0dXJuIFwiZGV0YWlsc1wiO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAc3RhdGljIHtzdHJpbmd9IE1PREVMX0FDVElPTiAgICBuZXR3b3JrIG1vZGVsIGludGVyZmFjZSBhY3Rpb24gbmFtZSwgdXNlZCBpbiBBUElcbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IE1PREVMX0FDVElPTl9HRVQoKSB7XG4gICAgICAgIHJldHVybiBcImdldFwiO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBzdGF0aWMge3N0cmluZ30gTU9ERUxfQUNUSU9OICAgIG5ldHdvcmsgbW9kZWwgaW50ZXJmYWNlIGFjdGlvbiBuYW1lLCB1c2VkIGluIEFQSVxuICAgICAqL1xuICAgIHN0YXRpYyBnZXQgTU9ERUxfQUNUSU9OX1BVVCgpIHtcbiAgICAgICAgcmV0dXJuIFwiZ2V0XCI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHN0YXRpYyB7b2JqZWN0fSBVSUNvbnN0cnVjdG9yICAgIGNvbnN0cnVjdG9yIG9mIFVJIGNvbXBvbmVudFxuICAgICAqL1xuICAgIHN0YXRpYyBnZXQgVUlDb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgcmV0dXJuIG5vdEZvcm07XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBzdGF0aWMge2Z1bmN0aW9ufSAgIFRSQU5TRk9STUVSICAgICByZXNwb25zZS5yZXN1bHQgdHJhbnNmb3JtYXRpb24gZnVuY3Rpb24gaWYgd2FudCB0byBjaGFuZ2UgaXQncyBzdHJ1Y3R1cmVcbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IFRSQU5TRk9STUVSKCkge1xuICAgICAgICByZXR1cm4gREVGQVVMVF9UUkFTRk9STUVSO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIG5hbWUgb2YgbW9kZWwgaWRlbnRpZmljYWl0b24gZmllbGRcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gY29udHJvbGxlciBpbnN0YW5jZSBvZiBjb250cm9sbGVyXG4gICAgICogQHJldHVybnMge3N0cmluZ30gICAgZGVmYXVsdCBpZCBmaWVsZCBuYW1lIGlzICdfaWQnXG4gICAgICovXG4gICAgc3RhdGljIGdldElkRmllbGQoY29udHJvbGxlcikge1xuICAgICAgICByZXR1cm4gY29udHJvbGxlci5nZXRPcHRpb25zKGAke3RoaXMuQUNUSU9OfS5pZEZpZWxkYCwgXCJfaWRcIik7XG4gICAgfVxuXG4gICAgc3RhdGljIGxvYWREYXRhUXVlcnkoY29udHJvbGxlciwgcGFyYW1zKSB7XG4gICAgICAgIGNvbnN0IGlkRmllbGQgPSB0aGlzLmdldElkRmllbGQoY29udHJvbGxlcik7XG4gICAgICAgIHJldHVybiB7IFtpZEZpZWxkXTogcGFyYW1zWzBdIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJuIFByb21pc2Ugb2YgQVBJIHJlcG9uc2VcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gY29udHJvbGxlciBpbnN0YW5jZSBvZiBjb250cm9sbGVyXG4gICAgICogQHBhcmFtIHtzdHJpbmdbXX0gcGFyYW1zICAgICBhcnJheSBvZiBzdHJpbmdzIHBhcnNlZCBmcm9tIFVSSSBieSByb3V0ZXIgYW5kIHBhc3NlZCB0byBjb250cm9sbGVyXG4gICAgICogQHJldHVybnMge1Byb21pc2V9ICAgQVBJIHJlc3BvbnNlIHtzdGF0dXM6c3RyaW5nLCByZXN1bHQ6YW55LCBtZXNzYWdlOnN0cmluZywgZXJyb3JzOiB7W2ZpZWxkbmFtZV06Wy4uLmVycm9yTWVzc2FnZXNdfX1cbiAgICAgKi9cbiAgICBzdGF0aWMgYXN5bmMgbG9hZERhdGEoY29udHJvbGxlciwgcGFyYW1zKSB7XG4gICAgICAgIGNvbnN0IHF1ZXJ5ID0gdGhpcy5sb2FkRGF0YVF1ZXJ5KGNvbnRyb2xsZXIsIHBhcmFtcyk7XG4gICAgICAgIGNvbnN0IGFjdGlvbk5hbWUgPSB0aGlzLmdldE1vZGVsQWN0aW9uTmFtZShjb250cm9sbGVyKTtcbiAgICAgICAgcmV0dXJuIGF3YWl0IGNvbnRyb2xsZXIuZ2V0TW9kZWwocXVlcnkpW2AkJHthY3Rpb25OYW1lfWBdKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBtb2RlbCBBUEkgYWN0aW9uIG5hbWVcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gY29udHJvbGxlciBpbnN0YW5jZSBvZiBjb250cm9sbGVyXG4gICAgICogQHJldHVybnMge3N0cmluZ30gICAgbmV0d29yayBpbnRlcmZhY2UgbW9kZWwgYWN0aW9uIG5hbWUsIGZvciBBUEk7IGRlZmF1bHQ6IHRoaXMuTU9ERUxfQUNUSU9OX0dFVFxuICAgICAqL1xuICAgIHN0YXRpYyBnZXRNb2RlbEFjdGlvbk5hbWUoY29udHJvbGxlcikge1xuICAgICAgICByZXR1cm4gY29udHJvbGxlci5nZXRPcHRpb25zKFxuICAgICAgICAgICAgYCR7dGhpcy5BQ1RJT059LmFjdGlvbk5hbWVgLFxuICAgICAgICAgICAgdGhpcy5NT0RFTF9BQ1RJT05fR0VUXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyBicmVhZGNydW1icyB0YWlsLCB3aXRob3V0IHJlc3VsdCBkZXRhaWxzXG4gICAgICogQHBhcmFtIHtvYmplY3R9IGNvbnRyb2xsZXIgaW5zdGFuY2Ugb2YgY29udHJvbGxlclxuICAgICAqIEBwYXJhbSB7c3RyaW5nW119IHBhcmFtcyAgICAgbGlzdCBvZiByb3V0ZSBwYXJhbXNcbiAgICAgKi9cbiAgICBzdGF0aWMgcHJlc2V0QnJlYWRjcnVtYnMoY29udHJvbGxlciwgcGFyYW1zKSB7XG4gICAgICAgIGNvbnRyb2xsZXIuc2V0QnJlYWRjcnVtYnMoW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHRpdGxlOiB0aGlzLmdldEJyZWFkY3J1bWJzVGFpbChcInByZXNldFwiKSxcbiAgICAgICAgICAgICAgICB1cmw6IGNvbnRyb2xsZXIuZ2V0TW9kZWxBY3Rpb25VUkwocGFyYW1zWzBdLCBmYWxzZSksXG4gICAgICAgICAgICB9LFxuICAgICAgICBdKTtcbiAgICB9XG5cbiAgICBzdGF0aWMgZ2V0VGl0bGUoY29udG9sbGVyLCBwYXJhbXMsIHJlc3BvbnNlKSB7XG4gICAgICAgIHJldHVybiBjb250b2xsZXIuZ2V0SXRlbVRpdGxlKHJlc3BvbnNlLnJlc3VsdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyBicmVhZGNydW1icyB0YWlsIHdpdGggcmVzcG9uc2UgZGV0YWlscywgYWthIHRpdGxlIG9mIGxvYWRlZCBpdGVtXG4gICAgICogQHBhcmFtIHtvYmplY3R9IGNvbnRyb2xsZXIgICBpbnN0YW5jZSBvZiBjb250cm9sbGVyXG4gICAgICogQHBhcmFtIHtzdHJpbmdbXX0gcGFyYW1zICAgICBsaXN0IG9mIHJvdXRlIHBhcmFtc1xuICAgICAqIEBwYXJhbSB7b2JqZWN0fSByZXNwb25zZSAgICAgQVBJIHJlc3BvbnNlIGluIHdyYXBwZXJcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gcmVzcG9uc2UucmVzdWx0ICBBUEkgcmVzcG9uc2UgcmVzdWx0XG4gICAgICovXG4gICAgc3RhdGljIHNldEJyZWFkY3J1bWJzKGNvbnRyb2xsZXIsIHBhcmFtcywgcmVzcG9uc2UpIHtcbiAgICAgICAgY29uc3QgdGl0bGUgPSB0aGlzLmdldFRpdGxlKGNvbnRyb2xsZXIsIHBhcmFtcywgcmVzcG9uc2UpO1xuICAgICAgICBjb25zdCBicmVhZGNydW1ic1RhaWxUZW1wbGF0ZSA9IHRoaXMuZ2V0QnJlYWRjcnVtYnNUYWlsKFwic2V0XCIpO1xuICAgICAgICBjb250cm9sbGVyLnNldEJyZWFkY3J1bWJzKFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB0aXRsZTogYnJlYWRjcnVtYnNUYWlsVGVtcGxhdGVcbiAgICAgICAgICAgICAgICAgICAgPyBub3RMb2NhbGUuZm9ybWF0KGJyZWFkY3J1bWJzVGFpbFRlbXBsYXRlLCB7IHRpdGxlIH0pXG4gICAgICAgICAgICAgICAgICAgIDogdGl0bGUsXG4gICAgICAgICAgICAgICAgdXJsOiBjb250cm9sbGVyLmdldE1vZGVsQWN0aW9uVVJMKHBhcmFtc1swXSwgZmFsc2UpLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIHJlc3BvbnNlIG9uIHN1Y2Nlc3NcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gcmVzcG9uc2VcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcmVzcG9uc2Uuc3RhdHVzXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59ICAgdHJ1ZSBpZiByZXNwb25zZSBpcyBiYWRcbiAgICAgKi9cbiAgICBzdGF0aWMgaXNSZXNwb25zZUJhZChyZXNwb25zZSkge1xuICAgICAgICByZXR1cm4gIXJlc3BvbnNlIHx8IHJlc3BvbnNlLnN0YXR1cyAhPT0gXCJva1wiO1xuICAgIH1cblxuICAgIHN0YXRpYyBnZXRWYWxpZGF0b3JzKGNvbnRyb2xsZXIpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIChjb250cm9sbGVyLmdldFZhbGlkYXRvcnMgJiYgY29udHJvbGxlci5nZXRWYWxpZGF0b3JzKCkpIHx8XG4gICAgICAgICAgICBjb250cm9sbGVyLmdldE9wdGlvbnMoXCJWYWxpZGF0b3JzXCIpXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBvYmplY3Qgd2l0aCBhbGwgb3B0aW9ucyBuZWVkZWQgdG8gaW5pdGlhbGl6ZSBVSSBjb21wb25lbnRcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gY29udHJvbGxlciAgIGluc3RhbmNlIG9mIGNvbnRyb2xsZXJcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gcmVzcG9uc2UgICAgIEFQSSByZXBvbnNlIG9iamVjdFxuICAgICAqIEByZXR1cm5zIHtvYmplY3R9ICAgIHVpIG9wdGlvbnMgb2JqZWN0XG4gICAgICovXG4gICAgc3RhdGljIHByZXBhcmVVSU9wdGlvbnMoY29udHJvbGxlciwgcmVzcG9uc2UpIHtcbiAgICAgICAgY29uc3QgZGV0YWlsc0FjdGlvbk5hbWUgPSB0aGlzLmdldE1vZGVsQWN0aW9uTmFtZShjb250cm9sbGVyKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICAgICAgICB0YXJnZXQ6IGNvbnRyb2xsZXIuZ2V0Q29udGFpbmVySW5uZXJFbGVtZW50KCksXG4gICAgICAgICAgICAgICAgbW9kZWw6IGNvbnRyb2xsZXIuZ2V0TW9kZWxOYW1lKCksXG4gICAgICAgICAgICAgICAgYWN0aW9uOiBkZXRhaWxzQWN0aW9uTmFtZSxcbiAgICAgICAgICAgICAgICBuYW1lOiBgJHtjb250cm9sbGVyLmdldE5hbWUoKX0uJHt0aGlzLkFDVElPTn1Gb3JtYCxcbiAgICAgICAgICAgICAgICBmaWVsZHM6IHtcbiAgICAgICAgICAgICAgICAgICAgcmVhZG9ubHk6IHRydWUsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB2YWxpZGF0b3JzOiB0aGlzLmdldFZhbGlkYXRvcnMoY29udHJvbGxlciksXG4gICAgICAgICAgICAgICAgdmFyaWFudHM6IGNvbnRyb2xsZXIuZ2V0T3B0aW9ucyhgdmFyaWFudHMuJHt0aGlzLkFDVElPTn1gLCB7fSksXG4gICAgICAgICAgICAgICAgbWFzdGVyczogY29udHJvbGxlci5nZXRPcHRpb25zKGAke3RoaXMuQUNUSU9OfS5tYXN0ZXJzYCwge30pLFxuICAgICAgICAgICAgICAgIGluamVjdGVkOiBjb250cm9sbGVyLmdldE9wdGlvbnMoYCR7dGhpcy5BQ1RJT059LmluamVjdGVkYCwge30pLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRhdGE6IHRoaXMuVFJBTlNGT1JNRVIocmVzcG9uc2UucmVzdWx0KSxcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGluc3RhbmNlIG9mIHRoaXMgYWN0aW9uIFVJIGNvbXBvbmVudCBmcm9tIGNvbnRyb2xsZXJcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gY29udHJvbGxlciAgIGluc3RhbmNlIG9mIGNvbnRyb2xsZXJcbiAgICAgKiBAcmV0dXJucyB7b2JqZWN0fSAgICBpbnN0YW5jZSBvZiBVSSBjb21wb25lbnRcbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0VUkoY29udHJvbGxlcikge1xuICAgICAgICByZXR1cm4gY29udHJvbGxlci5nZXRVSSh0aGlzLkFDVElPTik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyBVSSBvZiB0aGlzIGFjdGlvbiBpbiBjb250cm9sbGVyXG4gICAgICogQHBhcmFtIHtvYmplY3R9IGNvbnRyb2xsZXIgICBpbnN0YW5jZSBvZiBjb250cm9sbGVyXG4gICAgICogQHBhcmFtIHtvYmplY3R9IHVpICAgICAgICAgICBpbnN0YW5jZSBvZiBVSSBjb21wb25lbnRcbiAgICAgKi9cbiAgICBzdGF0aWMgc2V0VUkoY29udHJvbGxlciwgdWkpIHtcbiAgICAgICAgY29udHJvbGxlci5zZXRVSSh0aGlzLkFDVElPTiwgdWkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqICBTZXRzIHZpYSBgLiRzZXRgIG1ldGhvZCBgbG9hZGluZ2AgdG8gYHRydWVgXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHBhcmFtIHtpbXBvcnQoJy4uLy4uL2NvbnRyb2xsZXIuY3J1ZCcpfSBjb250cm9sbGVyXG4gICAgICogQG1lbWJlcm9mIENSVURHZW5lcmljQWN0aW9uXG4gICAgICovXG4gICAgc3RhdGljIHNldFVJTG9hZGluZyhjb250cm9sbGVyKSB7XG4gICAgICAgIHRoaXMuZ2V0VUkoY29udHJvbGxlcikuJHNldCh7IGxvYWRpbmc6IHRydWUgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogIFNldHMgdmlhIGAuJHNldGAgbWV0aG9kIGBsb2FkaW5nYCB0byBgZmFsc2VgXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHBhcmFtIHtpbXBvcnQoJy4uLy4uL2NvbnRyb2xsZXIuY3J1ZCcpfSBjb250cm9sbGVyXG4gICAgICogQG1lbWJlcm9mIENSVURHZW5lcmljQWN0aW9uXG4gICAgICovXG4gICAgc3RhdGljIHNldFVJTG9hZGVkKGNvbnRyb2xsZXIpIHtcbiAgICAgICAgdGhpcy5nZXRVSShjb250cm9sbGVyKS4kc2V0KHsgbG9hZGluZzogZmFsc2UgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogIFNldHMgdmlhIGAuJHNldGAgbWV0aG9kIGBlcnJvcmAgdG8gYG1lc3NhZ2VgXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHBhcmFtIHtpbXBvcnQoJy4uLy4uL2NvbnRyb2xsZXIuY3J1ZCcpfSBjb250cm9sbGVyXG4gICAgICogQHBhcmFtICAge0Vycm9yfSBtZXNzYWdlICAgICBlcnJvciBtZXNzYWdlXG4gICAgICogQG1lbWJlcm9mIENSVURHZW5lcmljQWN0aW9uXG4gICAgICovXG4gICAgc3RhdGljIHNldFVJRXJyb3IoY29udHJvbGxlciwgbWVzc2FnZSkge1xuICAgICAgICB0aGlzLmdldFVJKGNvbnRyb2xsZXIpLiRzZXQoeyBlcnJvcjogbWVzc2FnZSB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBCaW5kcyBldmVudHMgdG8gYWN0aW9uIFVJXG4gICAgICogQHBhcmFtIHtvYmplY3R9IGNvbnRyb2xsZXIgICBpbnN0YW5jZSBvZiBjb250cm9sbGVyXG4gICAgICogQHBhcmFtIHtzdHJpbmdbXX0gcGFyYW1zICAgICBsaXN0IG9mIHJvdXRlIHBhcmFtc1xuICAgICAqIEBwYXJhbSB7b2JqZWN0fSByZXNwb25zZSAgICAgQVBJIHJlc3BvbnNlXG4gICAgICovXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgc3RhdGljIGJpbmRVSUV2ZW50cyhjb250cm9sbGVyLCBwYXJhbXMsIHJlc3BvbnNlKSB7XG4gICAgICAgIGlmIChub3RDb21tb24uaXNGdW5jKGNvbnRyb2xsZXIuZ29CYWNrKSkge1xuICAgICAgICAgICAgdGhpcy5iaW5kVUlFdmVudChjb250cm9sbGVyLCBcInJlamVjdFwiLCAoKSA9PiBjb250cm9sbGVyLmdvQmFjaygpKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEJpbmQgZXZlbnQgaGFuZGxlciBuYW1lZCBldmVudCB0byBVSS4gQ2hlY2tzIGRpZmZlcmVudCBiaW5kZXIgbm90YXRpb24gJG9uL29uXG4gICAgICogQHBhcmFtIHtvYmplY3R9IGNvbnRyb2xsZXIgICBpbnN0YW5jZSBvZiBjb250cm9sbGVyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50ICAgICAgICBldmVudCBuYW1lXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2sgICBjYWxsYmFjayBmdW5jdGlvbiBvbiBldmVudFxuICAgICAqIEByZXR1cm5zXG4gICAgICovXG4gICAgc3RhdGljIGJpbmRVSUV2ZW50KGNvbnRyb2xsZXIsIGV2ZW50LCBjYWxsYmFjaykge1xuICAgICAgICBjb25zdCB1aSA9IHRoaXMuZ2V0VUkoY29udHJvbGxlcik7XG4gICAgICAgIGlmICh1aS4kb24pIHtcbiAgICAgICAgICAgIHJldHVybiB1aS4kb24oZXZlbnQsIGNhbGxiYWNrKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodWkub24pIHtcbiAgICAgICAgICAgIHJldHVybiB1aS5vbihldmVudCwgY2FsbGJhY2spO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogdHJ1ZSwgaWYgVUkgb2YgdGhpcyBhY3Rpb24gYWxyZWFkeSBleGlzdHMsXG4gICAgICogZmFsc2UsIGlmIFVJIG9mIHRoaXMgYWN0aW9uIHdhc24ndCBleGlzdGVkIGFuZCBvdGhlciBVSXMgd2VyZSBkZXN0b3J5ZWRcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gY29udHJvbGxlciAgIGluc3RhbmNlIG9mIGNvbnRyb2xsZXJcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gICB0cnVlIGlmIFVJIG9mIHRoaXMgYWN0aW9uIGV4aXN0cywgZmFsc2UgaWYgVUkgb2Ygb3RoZXIgd2FzIGRlc3Ryb3llZFxuICAgICAqL1xuICAgIHN0YXRpYyBpc1VJUmVuZGVyZWQoY29udHJvbGxlcikge1xuICAgICAgICBpZiAodGhpcy5nZXRVSShjb250cm9sbGVyKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb250cm9sbGVyLiRkZXN0cm95VUkoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgc3RhdGljIHR3ZWFrVUlPcHRpb25zKG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIG9wdGlvbnM7XG4gICAgfVxuXG4gICAgc3RhdGljIGNyZWF0ZVVJKHVpQ29tcG9uZW50LCBjb250cm9sbGVyLCByZXNwb25zZSkge1xuICAgICAgICBpZiAobm90Q29tbW9uLmlzRnVuYyh1aUNvbXBvbmVudCkpIHtcbiAgICAgICAgICAgIHJldHVybiBtb3VudChcbiAgICAgICAgICAgICAgICB1aUNvbXBvbmVudCxcbiAgICAgICAgICAgICAgICB0aGlzLnR3ZWFrVUlPcHRpb25zKHRoaXMucHJlcGFyZVVJT3B0aW9ucyhjb250cm9sbGVyLCByZXNwb25zZSkpXG4gICAgICAgICAgICApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyB1aUNvbXBvbmVudChcbiAgICAgICAgICAgICAgICB0aGlzLnR3ZWFrVUlPcHRpb25zKHRoaXMucHJlcGFyZVVJT3B0aW9ucyhjb250cm9sbGVyLCByZXNwb25zZSkpXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUGVyZm9ybWluZyBhY3Rpb24gcHJlcGFyYXRpb24gYW5kIHJlbmRlcnMgVUlcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gY29udHJvbGxlciAgIGluc3RhbmNlIG9mIGNvbnRyb2xsZXJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ1tdfSBwYXJhbXMgICAgIGxpc3Qgb2Ygcm91dGUgcGFyYW1zXG4gICAgICogQHJldHVybnMge1Byb21pc2U8dW5kZWZpbmVkPn1cbiAgICAgKi9cbiAgICBzdGF0aWMgYXN5bmMgcnVuKGNvbnRyb2xsZXIsIHBhcmFtcykge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy9pbmZvcm0gdGhhdCB3ZSBhcmUgc3RhcnRpbmdcbiAgICAgICAgICAgIGNvbnRyb2xsZXIuZW1pdChgYmVmb3JlOnJlbmRlcjoke3RoaXMuQUNUSU9OfWAsIHBhcmFtcyk7XG4gICAgICAgICAgICAvL2lmIFVJIGZvciB0aGlzIGFjdGlvbiBleGlzdHMgZXhpdGluZ1xuICAgICAgICAgICAgaWYgKHRoaXMuaXNVSVJlbmRlcmVkKGNvbnRyb2xsZXIpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy9pbmRpY2F0aW5nIHRoYXQgd2UgYXJlIHdvcmtpbmdcbiAgICAgICAgICAgIGNvbnRyb2xsZXIucmVuZGVyTG9hZGluZ1NjcmVlbiAmJiBjb250cm9sbGVyLnJlbmRlckxvYWRpbmdTY3JlZW4oKTtcbiAgICAgICAgICAgIC8vcHJlbG9hZGluZyBmb3JtIHZhcmlhbnRzXG4gICAgICAgICAgICBhd2FpdCBjb250cm9sbGVyLnByZWxvYWRWYXJpYW50cyh0aGlzLkFDVElPTik7XG4gICAgICAgICAgICAvL3NldHRpbmcgaW5pdGlhbCBzdGF0ZSBvZiBicmVhZGNydW1icyB0YWlsXG4gICAgICAgICAgICB0aGlzLnByZXNldEJyZWFkY3J1bWJzKGNvbnRyb2xsZXIsIHBhcmFtcyk7XG4gICAgICAgICAgICAvL2xvYWRpbmcgZGF0YVxuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLmxvYWREYXRhKGNvbnRyb2xsZXIsIHBhcmFtcyk7XG4gICAgICAgICAgICAvL3Nob3dpbmcgZXJyb3IgbWVzc2FnZSBpZiByZXNwb25zZSBpcyAnYmFkJ1xuICAgICAgICAgICAgaWYgKHRoaXMuaXNSZXNwb25zZUJhZChyZXNwb25zZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY29udHJvbGxlci5zaG93RXJyb3JNZXNzYWdlKHJlc3BvbnNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vdXBkYXRpbmcgYnJlYWRjcnVtYnMgdGFpbCB3aXRoIG1vcmUgZGV0YWlscyBmcm9tIHJlc3BvbnNlXG4gICAgICAgICAgICB0aGlzLnNldEJyZWFkY3J1bWJzKGNvbnRyb2xsZXIsIHBhcmFtcywgcmVzcG9uc2UpO1xuICAgICAgICAgICAgLy9jcmVhdGluZyBhY3Rpb24gVUkgY29tcG9uZW50XG4gICAgICAgICAgICAvL2VzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuICAgICAgICAgICAgY29uc3QgdWlDb21wb25lbnQgPSB0aGlzLlVJQ29uc3RydWN0b3I7XG4gICAgICAgICAgICAvL2VzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuICAgICAgICAgICAgY29uc3QgdWkgPSB0aGlzLmNyZWF0ZVVJKCk7XG4gICAgICAgICAgICB0aGlzLnNldFVJKGNvbnRyb2xsZXIpO1xuICAgICAgICAgICAgLy9iaW5kIGV2ZW50cyB0byBVSVxuICAgICAgICAgICAgdGhpcy5iaW5kVUlFdmVudHMoY29udHJvbGxlciwgcGFyYW1zLCByZXNwb25zZSk7XG4gICAgICAgICAgICAvL2luZm9ybSB0aGF0IHdlIGFyZSByZWFkeVxuICAgICAgICAgICAgY29udHJvbGxlci5lbWl0KGBhZnRlcjpyZW5kZXI6JHt0aGlzLkFDVElPTn1gLCBwYXJhbXMsIHJlc3BvbnNlKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgLy9pbmZvcm1pbmcgYWJvdXQgZXhjZXB0aW9uXG4gICAgICAgICAgICBjb250cm9sbGVyLmVtaXQoYGV4Y2VwdGlvbjpyZW5kZXI6JHt0aGlzLkFDVElPTn1gLCBwYXJhbXMsIGUpO1xuICAgICAgICAgICAgLy9yZXBvcnRpbmcgZXhjZXB0aW9uXG4gICAgICAgICAgICBjb250cm9sbGVyLnJlcG9ydChlKTtcbiAgICAgICAgICAgIC8vc2hvd2luZyBlcnJvciBtZXNzYWdlXG4gICAgICAgICAgICBjb250cm9sbGVyLnNob3dFcnJvck1lc3NhZ2UoZSk7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICBjb250cm9sbGVyLnJlbW92ZUxvYWRpbmdTY3JlZW4gJiYgY29udHJvbGxlci5yZW1vdmVMb2FkaW5nU2NyZWVuKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzdGF0aWMgZ29CYWNrQWZ0ZXJEZWxheShjb250cm9sbGVyKSB7XG4gICAgICAgIGNvbnRyb2xsZXIuZ29CYWNrKHRoaXMuTkFWSUdBVElPTl9ERUxBWSk7XG4gICAgfVxuXG4gICAgc3RhdGljIGdvQmFjayhjb250cm9sbGVyKSB7XG4gICAgICAgIGNvbnRyb2xsZXIuZ29CYWNrKDApO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQ1JVREdlbmVyaWNBY3Rpb247XG4iLCJpbXBvcnQgQ1JVREdlbmVyaWNBY3Rpb24gZnJvbSBcIi4vYWN0aW9uXCI7XG5pbXBvcnQgbm90Q29tbW9uIGZyb20gXCIuLi8uLi8uLi9jb21tb25cIjtcbmNvbnN0IEFDVElPTiA9IFwiY3JlYXRlXCI7XG5jb25zdCBERUZBVUxUX0JSRUFEQ1JVTUJfVEFJTCA9IFwi0KHQvtC30LTQsNC90LjQtVwiO1xuXG5jbGFzcyBDUlVER2VuZXJpY0FjdGlvbkNyZWF0ZSBleHRlbmRzIENSVURHZW5lcmljQWN0aW9uIHtcbiAgICBzdGF0aWMgZ2V0IGRlYWZ1bHRCcmVhZGNydW1ic1RhaWwoKSB7XG4gICAgICAgIHJldHVybiBERUZBVUxUX0JSRUFEQ1JVTUJfVEFJTDtcbiAgICB9XG5cbiAgICBzdGF0aWMgZ2V0IGJyZWFkY3J1bWJzVGFpbHMoKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgc3RhdGljIGdldCBBQ1RJT04oKSB7XG4gICAgICAgIHJldHVybiBBQ1RJT047XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBzdGF0aWMge3N0cmluZ30gTU9ERUxfQUNUSU9OICAgIG5ldHdvcmsgbW9kZWwgaW50ZXJmYWNlIGFjdGlvbiBuYW1lLCB1c2VkIGluIEFQSVxuICAgICAqL1xuICAgIHN0YXRpYyBnZXQgTU9ERUxfQUNUSU9OX0dFVCgpIHtcbiAgICAgICAgcmV0dXJuIEFDVElPTjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAc3RhdGljIHtzdHJpbmd9IE1PREVMX0FDVElPTiAgICBuZXR3b3JrIG1vZGVsIGludGVyZmFjZSBhY3Rpb24gbmFtZSwgdXNlZCBpbiBBUElcbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IE1PREVMX0FDVElPTl9QVVQoKSB7XG4gICAgICAgIHJldHVybiBBQ1RJT047XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge2ltcG9ydCgnLi4vLi4vY29udHJvbGxlci5jcnVkJyl9IGNvbnRyb2xsZXJcbiAgICAgKiBAcGFyYW0ge2FueX0gICAgICAgICAgICAgICAgICAgICAgICAgW3BhcmFtc11cbiAgICAgKiBAcmV0dXJucyB7aW1wb3J0KCdub3Qtbm9kZS9zcmMvdHlwZXMnKS5ub3RBcHBSZXNwb25zZX1cbiAgICAgKi9cbiAgICAvL2VzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuICAgIHN0YXRpYyBsb2FkRGF0YShjb250cm9sbGVyLCBwYXJhbXMgPSB7fSkge1xuICAgICAgICBsZXQgZGVmRGF0YSA9IGNvbnRyb2xsZXIuY3JlYXRlRGVmYXVsdCgpO1xuICAgICAgICBpZiAoZGVmRGF0YS5nZXREYXRhKSB7XG4gICAgICAgICAgICBkZWZEYXRhID0gZGVmRGF0YS5nZXREYXRhKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHN0YXR1czogXCJva1wiLFxuICAgICAgICAgICAgcmVzdWx0OiBkZWZEYXRhLFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIHN0YXRpYyBnZXRUaXRsZShjb250b2xsZXIsIHBhcmFtcywgcmVzcG9uc2UpIHtcbiAgICAgICAgcmV0dXJuIGNvbnRvbGxlci5nZXRJdGVtVGl0bGUocmVzcG9uc2UpO1xuICAgIH1cblxuICAgIHN0YXRpYyBwcmVwYXJlVUlPcHRpb25zKGNvbnRyb2xsZXIsIHJlc3BvbnNlKSB7XG4gICAgICAgIGNvbnN0IGFjdGlvbk5hbWUgPSB0aGlzLmdldE1vZGVsQWN0aW9uTmFtZShjb250cm9sbGVyKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICAgICAgICB0YXJnZXQ6IGNvbnRyb2xsZXIuZ2V0Q29udGFpbmVySW5uZXJFbGVtZW50KCksXG4gICAgICAgICAgICAgICAgbW9kZWw6IGNvbnRyb2xsZXIuZ2V0TW9kZWxOYW1lKCksXG4gICAgICAgICAgICAgICAgYWN0aW9uOiBhY3Rpb25OYW1lLFxuICAgICAgICAgICAgICAgIG5hbWU6IGAke2NvbnRyb2xsZXIuZ2V0TmFtZSgpfS4ke3RoaXMuQUNUSU9OfUZvcm1gLFxuICAgICAgICAgICAgICAgIHZhbGlkYXRvcnM6IHRoaXMuZ2V0VmFsaWRhdG9ycyhjb250cm9sbGVyKSxcbiAgICAgICAgICAgICAgICB2YXJpYW50czogY29udHJvbGxlci5nZXRPcHRpb25zKGB2YXJpYW50cy4ke3RoaXMuQUNUSU9OfWAsIHt9KSxcbiAgICAgICAgICAgICAgICBtYXN0ZXJzOiBjb250cm9sbGVyLmdldE9wdGlvbnMoYCR7dGhpcy5BQ1RJT059Lm1hc3RlcnNgLCB7fSksXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZGF0YTogdGhpcy5UUkFOU0ZPUk1FUihyZXNwb25zZSksXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQmluZHMgZXZlbnRzIHRvIGFjdGlvbiBVSVxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBjb250cm9sbGVyICAgaW5zdGFuY2Ugb2YgY29udHJvbGxlclxuICAgICAqIEBwYXJhbSB7c3RyaW5nW119IHBhcmFtcyAgICAgbGlzdCBvZiByb3V0ZSBwYXJhbXNcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gW3Jlc3BvbnNlXSAgICAgQVBJIHJlc3BvbnNlXG4gICAgICovXG4gICAgLy9lc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICBzdGF0aWMgYmluZFVJRXZlbnRzKGNvbnRyb2xsZXIsIHBhcmFtcywgcmVzcG9uc2UpIHtcbiAgICAgICAgaWYgKG5vdENvbW1vbi5pc0Z1bmMoY29udHJvbGxlci5nb0JhY2spKSB7XG4gICAgICAgICAgICB0aGlzLmJpbmRVSUV2ZW50KGNvbnRyb2xsZXIsIFwicmVqZWN0XCIsICgpID0+XG4gICAgICAgICAgICAgICAgdGhpcy5nb0JhY2soY29udHJvbGxlcilcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG5vdENvbW1vbi5pc0Z1bmMoY29udHJvbGxlci5vbkFjdGlvblN1Ym1pdCkpIHtcbiAgICAgICAgICAgIHRoaXMuYmluZFVJRXZlbnQoY29udHJvbGxlciwgXCJzdWJtaXRcIiwgYXN5bmMgKGV2KSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc3VjY2VzcyA9IGF3YWl0IGNvbnRyb2xsZXIub25BY3Rpb25TdWJtaXQodGhpcy5BQ1RJT04sIHtcbiAgICAgICAgICAgICAgICAgICAgLi4udGhpcy5sb2FkRGF0YVF1ZXJ5KGNvbnRyb2xsZXIsIHBhcmFtcyksXG4gICAgICAgICAgICAgICAgICAgIC4uLmV2LmRldGFpbCxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBpZiAoc3VjY2Vzcykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmdvQmFja0FmdGVyRGVsYXkoY29udHJvbGxlcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IENSVURHZW5lcmljQWN0aW9uQ3JlYXRlO1xuIiwiaW1wb3J0IENSVURHZW5lcmljQWN0aW9uQ3JlYXRlIGZyb20gXCIuL2dlbmVyaWMvY3JlYXRlXCI7XG5cbmNsYXNzIENSVURBY3Rpb25DcmVhdGUgZXh0ZW5kcyBDUlVER2VuZXJpY0FjdGlvbkNyZWF0ZSB7fVxuXG5leHBvcnQgZGVmYXVsdCBDUlVEQWN0aW9uQ3JlYXRlO1xuIiwiaW1wb3J0IENSVURHZW5lcmljQWN0aW9uIGZyb20gXCIuL2FjdGlvblwiO1xuXG4vKipcbiAqIEdlbmVyaWMgQ1JVRCBEZXRhaWxzIGFjdGlvbiBjbGFzc1xuICogQGNsYXNzXG4gKi9cbmNsYXNzIENSVURHZW5lcmljQWN0aW9uUmVhZCBleHRlbmRzIENSVURHZW5lcmljQWN0aW9uIHtcbiAgICBzdGF0aWMgdHdlYWtVSU9wdGlvbnMob3B0aW9ucykge1xuICAgICAgICBvcHRpb25zLm9wdGlvbnMudWkgPSB7XG4gICAgICAgICAgICBzdWJtaXQ6IHtcbiAgICAgICAgICAgICAgICBlbmFibGVkOiBmYWxzZSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBvcHRpb25zO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFBlcmZvcm1pbmcgYWN0aW9uIHByZXBhcmF0aW9uIGFuZCByZW5kZXJzIFVJXG4gICAgICogQHBhcmFtIHtvYmplY3R9IGNvbnRyb2xsZXIgICBpbnN0YW5jZSBvZiBjb250cm9sbGVyXG4gICAgICogQHBhcmFtIHtzdHJpbmdbXX0gcGFyYW1zICAgICBsaXN0IG9mIHJvdXRlIHBhcmFtc1xuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPHVuZGVmaW5lZD59XG4gICAgICovXG4gICAgc3RhdGljIGFzeW5jIHJ1bihjb250cm9sbGVyLCBwYXJhbXMpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vaW5mb3JtIHRoYXQgd2UgYXJlIHN0YXJ0aW5nXG4gICAgICAgICAgICBjb250cm9sbGVyLmVtaXQoYGJlZm9yZTpyZW5kZXI6JHt0aGlzLkFDVElPTn1gLCBwYXJhbXMpO1xuICAgICAgICAgICAgLy9pZiBVSSBmb3IgdGhpcyBhY3Rpb24gZXhpc3RzIGV4aXRpbmdcbiAgICAgICAgICAgIGlmICh0aGlzLmlzVUlSZW5kZXJlZChjb250cm9sbGVyKSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vaW5kaWNhdGluZyB0aGF0IHdlIGFyZSB3b3JraW5nXG4gICAgICAgICAgICBjb250cm9sbGVyLnJlbmRlckxvYWRpbmdTY3JlZW4gJiYgY29udHJvbGxlci5yZW5kZXJMb2FkaW5nU2NyZWVuKCk7XG4gICAgICAgICAgICAvL3ByZWxvYWRpbmcgZm9ybSB2YXJpYW50c1xuICAgICAgICAgICAgYXdhaXQgY29udHJvbGxlci5wcmVsb2FkVmFyaWFudHModGhpcy5BQ1RJT04pO1xuICAgICAgICAgICAgLy9zZXR0aW5nIGluaXRpYWwgc3RhdGUgb2YgYnJlYWRjcnVtYnMgdGFpbFxuICAgICAgICAgICAgdGhpcy5wcmVzZXRCcmVhZGNydW1icyhjb250cm9sbGVyLCBwYXJhbXMpO1xuICAgICAgICAgICAgLy9sb2FkaW5nIGRhdGFcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5sb2FkRGF0YShjb250cm9sbGVyLCBwYXJhbXMpO1xuICAgICAgICAgICAgLy9zaG93aW5nIGVycm9yIG1lc3NhZ2UgaWYgcmVzcG9uc2UgaXMgJ2JhZCdcbiAgICAgICAgICAgIGlmICh0aGlzLmlzUmVzcG9uc2VCYWQocmVzcG9uc2UpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbnRyb2xsZXIuc2hvd0Vycm9yTWVzc2FnZShyZXNwb25zZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvL3VwZGF0aW5nIGJyZWFkY3J1bWJzIHRhaWwgd2l0aCBtb3JlIGRldGFpbHMgZnJvbSByZXNwb25zZVxuICAgICAgICAgICAgdGhpcy5zZXRCcmVhZGNydW1icyhjb250cm9sbGVyLCBwYXJhbXMsIHJlc3BvbnNlKTtcbiAgICAgICAgICAgIC8vY3JlYXRpbmcgYWN0aW9uIFVJIGNvbXBvbmVudFxuICAgICAgICAgICAgY29uc3QgdWlDb21wb25lbnQgPSB0aGlzLlVJQ29uc3RydWN0b3I7XG4gICAgICAgICAgICB0aGlzLnNldFVJKFxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXIsXG4gICAgICAgICAgICAgICAgbmV3IHVpQ29tcG9uZW50KFxuICAgICAgICAgICAgICAgICAgICB0aGlzLnR3ZWFrVUlPcHRpb25zKFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wcmVwYXJlVUlPcHRpb25zKGNvbnRyb2xsZXIsIHJlc3BvbnNlKVxuICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIC8vYmluZCBldmVudHMgdG8gVUlcbiAgICAgICAgICAgIHRoaXMuYmluZFVJRXZlbnRzKGNvbnRyb2xsZXIsIHBhcmFtcywgcmVzcG9uc2UpO1xuICAgICAgICAgICAgLy9pbmZvcm0gdGhhdCB3ZSBhcmUgcmVhZHlcbiAgICAgICAgICAgIGNvbnRyb2xsZXIuZW1pdChgYWZ0ZXI6cmVuZGVyOiR7dGhpcy5BQ1RJT059YCwgcGFyYW1zLCByZXNwb25zZSk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIC8vaW5mb3JtaW5nIGFib3V0IGV4Y2VwdGlvblxuICAgICAgICAgICAgY29udHJvbGxlci5lbWl0KGBleGNlcHRpb246cmVuZGVyOiR7dGhpcy5BQ1RJT059YCwgcGFyYW1zLCBlKTtcbiAgICAgICAgICAgIC8vcmVwb3J0aW5nIGV4Y2VwdGlvblxuICAgICAgICAgICAgY29udHJvbGxlci5yZXBvcnQoZSk7XG4gICAgICAgICAgICAvL3Nob3dpbmcgZXJyb3IgbWVzc2FnZVxuICAgICAgICAgICAgY29udHJvbGxlci5zaG93RXJyb3JNZXNzYWdlKGUpO1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgY29udHJvbGxlci5yZW1vdmVMb2FkaW5nU2NyZWVuICYmIGNvbnRyb2xsZXIucmVtb3ZlTG9hZGluZ1NjcmVlbigpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBDUlVER2VuZXJpY0FjdGlvblJlYWQ7XG4iLCJpbXBvcnQgQ1JVREdlbmVyaWNBY3Rpb25SZWFkIGZyb20gXCIuL2dlbmVyaWMvcmVhZFwiO1xuXG4vKipcbiAqIENSVUQgYWN0aW9uIGRldGFpbHNcbiAqL1xuY2xhc3MgQ1JVREFjdGlvbkRldGFpbHMgZXh0ZW5kcyBDUlVER2VuZXJpY0FjdGlvblJlYWQge31cblxuZXhwb3J0IGRlZmF1bHQgQ1JVREFjdGlvbkRldGFpbHM7XG4iLCJpbXBvcnQgbm90Q29tbW9uIGZyb20gXCIuLi8uLi8uLi9jb21tb25cIjtcbmltcG9ydCBDUlVER2VuZXJpY0FjdGlvbiBmcm9tIFwiLi9hY3Rpb25cIjtcblxuY29uc3QgREVGQVVMVF9CUkVBRENSVU1CX1RBSUwgPSBcItCg0LXQtNCw0LrRgtC40YDQvtCy0LDQvdC40LVcIjtcbi8qKlxuICogR2VuZXJpYyBDUlVEIFVwZGF0ZSBhY3Rpb24gY2xhc3NcbiAqIEBjbGFzc1xuICovXG5jbGFzcyBDUlVER2VuZXJpY0FjdGlvblVwZGF0ZSBleHRlbmRzIENSVURHZW5lcmljQWN0aW9uIHtcbiAgICAvKipcbiAgICAgKiBEZWZhdWx0IGJyZWFkY3J1bWJzIHRhaWwgdGVtcGxhdGUgc3RyaW5nXG4gICAgICogQHJldHVybnMge3N0cmluZ31cbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IGRlYWZ1bHRCcmVhZGNydW1ic1RhaWwoKSB7XG4gICAgICAgIHJldHVybiBERUZBVUxUX0JSRUFEQ1JVTUJfVEFJTDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBMaWJhcmFyeSBvZiBicmVhZGNydW1icyB0YWlscyBzdHJpbmdzIHRlbXBsYXRlc1xuICAgICAqIEByZXR1cm5zIHtPYmplY3R9XG4gICAgICovXG4gICAgc3RhdGljIGdldCBicmVhZGNydW1ic1RhaWxzKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcHJlc2V0OiBERUZBVUxUX0JSRUFEQ1JVTUJfVEFJTCxcbiAgICAgICAgICAgIHNldDogYCR7REVGQVVMVF9CUkVBRENSVU1CX1RBSUx9OiBcIns6dGl0bGV9XCJgLFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBzdGF0aWMge3N0cmluZ30gQUNUSU9OIHRoaXMgY29udHJvbGxlciBhY3Rpb24gbmFtZSwgdXNlZCBpbiBVUklcbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IEFDVElPTigpIHtcbiAgICAgICAgcmV0dXJuIFwidXBkYXRlXCI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHN0YXRpYyB7c3RyaW5nfSBNT0RFTF9BQ1RJT05fR0VUICAgIG5ldHdvcmsgbW9kZWwgaW50ZXJmYWNlIGFjdGlvbiBuYW1lLCB1c2VkIGluIEFQSVxuICAgICAqL1xuICAgIHN0YXRpYyBnZXQgTU9ERUxfQUNUSU9OX0dFVCgpIHtcbiAgICAgICAgcmV0dXJuIFwiZ2V0UmF3XCI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHN0YXRpYyB7c3RyaW5nfSBNT0RFTF9BQ1RJT05fUFVUICAgIG5ldHdvcmsgbW9kZWwgaW50ZXJmYWNlIGFjdGlvbiBuYW1lLCB1c2VkIGluIEFQSVxuICAgICAqL1xuICAgIHN0YXRpYyBnZXQgTU9ERUxfQUNUSU9OX1BVVCgpIHtcbiAgICAgICAgcmV0dXJuIFwidXBkYXRlXCI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBvYmplY3Qgd2l0aCBhbGwgb3B0aW9ucyBuZWVkZWQgdG8gaW5pdGlhbGl6ZSBVSSBjb21wb25lbnRcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gY29udHJvbGxlciAgIGluc3RhbmNlIG9mIGNvbnRyb2xsZXJcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gcmVzcG9uc2UgICAgIEFQSSByZXBvbnNlIG9iamVjdFxuICAgICAqIEByZXR1cm5zIHtvYmplY3R9ICAgIHVpIG9wdGlvbnMgb2JqZWN0XG4gICAgICovXG4gICAgc3RhdGljIHByZXBhcmVVSU9wdGlvbnMoY29udHJvbGxlciwgcmVzcG9uc2UpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICAgICAgICB0YXJnZXQ6IGNvbnRyb2xsZXIuZ2V0Q29udGFpbmVySW5uZXJFbGVtZW50KCksXG4gICAgICAgICAgICAgICAgbW9kZWw6IGNvbnRyb2xsZXIuZ2V0TW9kZWxOYW1lKCksXG4gICAgICAgICAgICAgICAgYWN0aW9uOiB0aGlzLk1PREVMX0FDVElPTl9QVVQsIC8vd2lsbCBiZSB1c2VkIHRvIGdldCBmb3JtIGZpZWxkcyBpbmZvcm1hdGlvbiBmcm9tIG1hbmlmZXN0XG4gICAgICAgICAgICAgICAgbmFtZTogYCR7Y29udHJvbGxlci5nZXROYW1lKCl9LiR7dGhpcy5BQ1RJT059Rm9ybWAsXG4gICAgICAgICAgICAgICAgdmFsaWRhdG9yczogdGhpcy5nZXRWYWxpZGF0b3JzKGNvbnRyb2xsZXIpLFxuICAgICAgICAgICAgICAgIHZhcmlhbnRzOiBjb250cm9sbGVyLmdldE9wdGlvbnMoYHZhcmlhbnRzLiR7dGhpcy5BQ1RJT059YCwge30pLFxuICAgICAgICAgICAgICAgIHVpOiBjb250cm9sbGVyLmdldE9wdGlvbnMoYCR7dGhpcy5BQ1RJT059LnVpYCwge30pLFxuICAgICAgICAgICAgICAgIGZpZWxkczogY29udHJvbGxlci5nZXRPcHRpb25zKGAke3RoaXMuQUNUSU9OfS5maWVsZHNgLCB7fSksXG4gICAgICAgICAgICAgICAgbWFzdGVyczogY29udHJvbGxlci5nZXRPcHRpb25zKGAke3RoaXMuQUNUSU9OfS5tYXN0ZXJzYCwge30pLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRhdGE6IHRoaXMuVFJBTlNGT1JNRVIobm90Q29tbW9uLnN0cmlwUHJveHkocmVzcG9uc2UucmVzdWx0KSksXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQmluZHMgZXZlbnRzIHRvIGFjdGlvbiBVSVxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBjb250cm9sbGVyICAgaW5zdGFuY2Ugb2YgY29udHJvbGxlclxuICAgICAqIEBwYXJhbSB7c3RyaW5nW119IHBhcmFtcyAgICAgbGlzdCBvZiByb3V0ZSBwYXJhbXNcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gW3Jlc3BvbnNlXSAgICAgQVBJIHJlc3BvbnNlXG4gICAgICovXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgc3RhdGljIGJpbmRVSUV2ZW50cyhjb250cm9sbGVyLCBwYXJhbXMsIHJlc3BvbnNlKSB7XG4gICAgICAgIGlmIChub3RDb21tb24uaXNGdW5jKGNvbnRyb2xsZXIuZ29CYWNrKSkge1xuICAgICAgICAgICAgdGhpcy5iaW5kVUlFdmVudChjb250cm9sbGVyLCBcInJlamVjdFwiLCAoKSA9PlxuICAgICAgICAgICAgICAgIHRoaXMuZ29CYWNrKGNvbnRyb2xsZXIpXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIGlmIChub3RDb21tb24uaXNGdW5jKGNvbnRyb2xsZXIub25BY3Rpb25TdWJtaXQpKSB7XG4gICAgICAgICAgICB0aGlzLmJpbmRVSUV2ZW50KGNvbnRyb2xsZXIsIFwic3VibWl0XCIsIGFzeW5jIChldikgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHN1Y2Nlc3MgPSBhd2FpdCBjb250cm9sbGVyLm9uQWN0aW9uU3VibWl0KHRoaXMuQUNUSU9OLCB7XG4gICAgICAgICAgICAgICAgICAgIC4uLnRoaXMubG9hZERhdGFRdWVyeShjb250cm9sbGVyLCBwYXJhbXMpLFxuICAgICAgICAgICAgICAgICAgICAuLi5ldi5kZXRhaWwsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgaWYgKHN1Y2Nlc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5nb0JhY2tBZnRlckRlbGF5KGNvbnRyb2xsZXIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogdHJ1ZSwgaWYgVUkgb2YgdGhpcyBhY3Rpb24gYWxyZWFkeSBleGlzdHMsXG4gICAgICogZmFsc2UsIGlmIFVJIG9mIHRoaXMgYWN0aW9uIHdhc24ndCBleGlzdGVkIGFuZCBvdGhlciBVSXMgd2VyZSBkZXN0b3J5ZWRcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gY29udHJvbGxlciAgIGluc3RhbmNlIG9mIGNvbnRyb2xsZXJcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gICB0cnVlIGlmIFVJIG9mIHRoaXMgYWN0aW9uIGV4aXN0cywgZmFsc2UgaWYgVUkgb2Ygb3RoZXIgd2FzIGRlc3Ryb3llZFxuICAgICAqL1xuICAgIHN0YXRpYyBpc1VJUmVuZGVyZWQoY29udHJvbGxlcikge1xuICAgICAgICBpZiAodGhpcy5nZXRVSShjb250cm9sbGVyKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb250cm9sbGVyLiRkZXN0cm95VUkoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUGVyZm9ybWluZyBhY3Rpb24gcHJlcGFyYXRpb24gYW5kIHJlbmRlcnMgVUlcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gY29udHJvbGxlciAgIGluc3RhbmNlIG9mIGNvbnRyb2xsZXJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ1tdfSBwYXJhbXMgICAgIGxpc3Qgb2Ygcm91dGUgcGFyYW1zXG4gICAgICogQHJldHVybnMge1Byb21pc2U8dW5kZWZpbmVkPn1cbiAgICAgKi9cbiAgICBzdGF0aWMgYXN5bmMgcnVuKGNvbnRyb2xsZXIsIHBhcmFtcykge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy9pbmZvcm0gdGhhdCB3ZSBhcmUgc3RhcnRpbmdcbiAgICAgICAgICAgIGNvbnRyb2xsZXIuZW1pdChgYmVmb3JlOnJlbmRlcjoke3RoaXMuQUNUSU9OfWAsIFtwYXJhbXNdKTtcbiAgICAgICAgICAgIC8vaWYgVUkgZm9yIHRoaXMgYWN0aW9uIGV4aXN0cyBleGl0aW5nXG4gICAgICAgICAgICBpZiAodGhpcy5pc1VJUmVuZGVyZWQoY29udHJvbGxlcikpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvL2luZGljYXRpbmcgdGhhdCB3ZSBhcmUgd29ya2luZ1xuICAgICAgICAgICAgY29udHJvbGxlci5yZW5kZXJMb2FkaW5nU2NyZWVuICYmIGNvbnRyb2xsZXIucmVuZGVyTG9hZGluZ1NjcmVlbigpO1xuICAgICAgICAgICAgLy9wcmVsb2FkaW5nIGZvcm0gdmFyaWFudHNcbiAgICAgICAgICAgIGF3YWl0IGNvbnRyb2xsZXIucHJlbG9hZFZhcmlhbnRzKHRoaXMuQUNUSU9OKTtcbiAgICAgICAgICAgIC8vc2V0dGluZyBpbml0aWFsIHN0YXRlIG9mIGJyZWFkY3J1bWJzIHRhaWxcbiAgICAgICAgICAgIHRoaXMucHJlc2V0QnJlYWRjcnVtYnMoY29udHJvbGxlciwgcGFyYW1zKTtcbiAgICAgICAgICAgIC8vbG9hZGluZyBkYXRhXG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHRoaXMubG9hZERhdGEoY29udHJvbGxlciwgcGFyYW1zKTtcbiAgICAgICAgICAgIC8vc2hvd2luZyBlcnJvciBtZXNzYWdlIGlmIHJlc3BvbnNlIGlzICdiYWQnXG4gICAgICAgICAgICBpZiAodGhpcy5pc1Jlc3BvbnNlQmFkKHJlc3BvbnNlKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBjb250cm9sbGVyLnNob3dFcnJvck1lc3NhZ2UocmVzcG9uc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy91cGRhdGluZyBicmVhZGNydW1icyB0YWlsIHdpdGggbW9yZSBkZXRhaWxzIGZyb20gcmVzcG9uc2VcbiAgICAgICAgICAgIHRoaXMuc2V0QnJlYWRjcnVtYnMoY29udHJvbGxlciwgcGFyYW1zLCByZXNwb25zZSk7XG4gICAgICAgICAgICAvL2NyZWF0aW5nIGFjdGlvbiBVSSBjb21wb25lbnRcbiAgICAgICAgICAgIGNvbnN0IHVpQ29tcG9uZW50ID0gdGhpcy5VSUNvbnN0cnVjdG9yO1xuICAgICAgICAgICAgdGhpcy5zZXRVSShcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyLFxuICAgICAgICAgICAgICAgIG5ldyB1aUNvbXBvbmVudChcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50d2Vha1VJT3B0aW9ucyhcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucHJlcGFyZVVJT3B0aW9ucyhjb250cm9sbGVyLCByZXNwb25zZSlcbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICAvL2JpbmQgZXZlbnRzIHRvIFVJXG4gICAgICAgICAgICB0aGlzLmJpbmRVSUV2ZW50cyhjb250cm9sbGVyLCBwYXJhbXMsIHJlc3BvbnNlKTtcbiAgICAgICAgICAgIC8vaW5mb3JtIHRoYXQgd2UgYXJlIHJlYWR5XG4gICAgICAgICAgICBjb250cm9sbGVyLmVtaXQoYGFmdGVyOnJlbmRlcjoke3RoaXMuQUNUSU9OfWAsIHBhcmFtcyk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIC8vaW5mb3JtaW5nIGFib3V0IGV4Y2VwdGlvblxuICAgICAgICAgICAgY29udHJvbGxlci5lbWl0KGBleGNlcHRpb246cmVuZGVyOiR7dGhpcy5BQ1RJT059YCwgcGFyYW1zLCBlKTtcbiAgICAgICAgICAgIC8vcmVwb3J0aW5nIGV4Y2VwdGlvblxuICAgICAgICAgICAgY29udHJvbGxlci5yZXBvcnQoZSk7XG4gICAgICAgICAgICAvL3Nob3dpbmcgZXJyb3IgbWVzc2FnZVxuICAgICAgICAgICAgY29udHJvbGxlci5zaG93RXJyb3JNZXNzYWdlKGUpO1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgY29udHJvbGxlci5yZW1vdmVMb2FkaW5nU2NyZWVuICYmIGNvbnRyb2xsZXIucmVtb3ZlTG9hZGluZ1NjcmVlbigpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBDUlVER2VuZXJpY0FjdGlvblVwZGF0ZTtcbiIsImltcG9ydCBDUlVER2VuZXJpY0FjdGlvblVwZGF0ZSBmcm9tIFwiLi9nZW5lcmljL3VwZGF0ZVwiO1xuXG4vKipcbiAqIENSVUQgYWN0aW9uIHVwZGF0ZVxuICovXG5jbGFzcyBDUlVEQWN0aW9uVXBkYXRlIGV4dGVuZHMgQ1JVREdlbmVyaWNBY3Rpb25VcGRhdGUge31cblxuZXhwb3J0IGRlZmF1bHQgQ1JVREFjdGlvblVwZGF0ZTtcbiIsImltcG9ydCBub3RBY3Rpb25VSSBmcm9tIFwiLi4vLi4vY29tcG9uZW50cy9hY3Rpb24vYWN0aW9uLnVpLmpzXCI7XG5cbmNvbnN0IEFDVElPTiA9IFwiZGVsZXRlXCI7XG5jb25zdCBNT0RFTF9BQ1RJT04gPSBcImRlbGV0ZVwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDUlVEQWN0aW9uRGVsZXRlIHtcbiAgICBzdGF0aWMgYXN5bmMgcnVuKGNvbnRyb2xsZXIsIHBhcmFtcykge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKGNvbnRyb2xsZXIudWlbQUNUSU9OXSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29udHJvbGxlci4kZGVzdHJveVVJKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnRyb2xsZXIudWlbQUNUSU9OXSA9IG5ldyBub3RBY3Rpb25VSSh7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJDUlVERGVsZXRlXCIsXG4gICAgICAgICAgICAgICAgdGFyZ2V0OiBjb250cm9sbGVyLmdldENvbnRhaW5lcklubmVyRWxlbWVudCgpLFxuICAgICAgICAgICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICAgICAgICAgICAgbG9hZGVyQWN0aXZlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBsb2FkZXJTdHlsZTogXCJjb250YWluZXJcIixcbiAgICAgICAgICAgICAgICAgICAgbG9hZGVyVGl0bGU6IFwibm90LW5vZGU6Y3J1ZF9kZWxldGVfYWN0aW9uX3dhaXRpbmdcIixcbiAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZDogYGNydWQtZGVsZXRlLWFjdGlvbi0ke3BhcmFtc1swXX1gLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgY29udHJvbGxlci5zZXRCcmVhZGNydW1icyhbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICB0aXRsZTogXCLQo9C00LDQu9C10L3QuNC1XCIsXG4gICAgICAgICAgICAgICAgICAgIHVybDogY29udHJvbGxlci5nZXRNb2RlbEFjdGlvblVSTChwYXJhbXNbMF0sIEFDVElPTiksXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF0pO1xuXG4gICAgICAgICAgICBpZiAoY29uZmlybShcItCj0LTQsNC70LjRgtGMINC30LDQv9C40YHRjD9cIikpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBkZWxldGVBY3Rpb25OYW1lID0gY29udHJvbGxlci5nZXRPcHRpb25zKFxuICAgICAgICAgICAgICAgICAgICBgJHtBQ1RJT059LmFjdGlvbk5hbWVgLFxuICAgICAgICAgICAgICAgICAgICBNT0RFTF9BQ1RJT05cbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIGNvbnN0IHN1Y2Nlc3MgPSBhd2FpdCBjb250cm9sbGVyLm9uQWN0aW9uU3VibWl0KFxuICAgICAgICAgICAgICAgICAgICBkZWxldGVBY3Rpb25OYW1lLFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfaWQ6IHBhcmFtc1swXSxcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgaWYgKHN1Y2Nlc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlci5nb0xpc3QoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29udHJvbGxlci5nb0xpc3QoKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgY29udHJvbGxlci5yZXBvcnQoZSk7XG4gICAgICAgICAgICBjb250cm9sbGVyLnNob3dFcnJvck1lc3NhZ2UoZSk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJpbXBvcnQgeyBub3RUYWJsZSB9IGZyb20gXCIuLi8uLi9jb21wb25lbnRzXCI7XG5cbmNvbnN0IEFDVElPTiA9IFwibGlzdFwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDUlVEQWN0aW9uTGlzdCB7XG4gICAgc3RhdGljIHR3ZWFrQWN0aW9uc0xpc3QoY29udHJvbGxlciwgQUNUSU9OU19MSVNUKSB7XG4gICAgICAgIGlmIChjb250cm9sbGVyLmdldE9wdGlvbnMoYCR7QUNUSU9OfS5jcmVhdGVBY3Rpb25gLCB0cnVlKSkge1xuICAgICAgICAgICAgQUNUSU9OU19MSVNULnB1c2goe1xuICAgICAgICAgICAgICAgIHRpdGxlOiBcItCh0L7Qt9C00LDRgtGMXCIsXG4gICAgICAgICAgICAgICAgYWN0aW9uOiAoKSA9PiBjb250cm9sbGVyLmdvQ3JlYXRlKCksXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gQUNUSU9OU19MSVNUO1xuICAgIH1cblxuICAgIHN0YXRpYyB0d2Vha1VJT3B0aW9ucyhvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBvcHRpb25zO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHBhcmFtIHtpbXBvcnQoJy4uL2NvbnRyb2xsZXIuY3J1ZCcpLmRlZmF1bHR9IGNvbnRyb2xsZXJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2RlbGF5PTBdXG4gICAgICogQHBhcmFtIHtBcnJheTxzdHJpbmc+fSBbYWN0aW9ucz1bXCJkZXRhaWxzXCIsIFwidXBkYXRlXCIsIFwiZGVsZXRlXCJdXVxuICAgICAqIEBwYXJhbSB7QXJyYXk8b2JqZWN0Pn0gW3ByZXBlbmQ9W11dXG4gICAgICogQHBhcmFtIHtBcnJheTxvYmplY3Q+fSBbYXBwZW5kPVtdXVxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29ubHlJY29ucz10cnVlXVxuICAgICAqIEByZXR1cm4ge0FycmF5PG9iamVjdD59XG4gICAgICogQG1lbWJlcm9mIENSVURBY3Rpb25MaXN0XG4gICAgICovXG4gICAgc3RhdGljIGNyZWF0ZUFjdGlvbnNCdXR0b25zKFxuICAgICAgICBjb250cm9sbGVyLFxuICAgICAgICB2YWx1ZSxcbiAgICAgICAgZGVsYXkgPSAwLFxuICAgICAgICBhY3Rpb25zID0gW1wiZGV0YWlsc1wiLCBcInVwZGF0ZVwiLCBcImRlbGV0ZVwiXSxcbiAgICAgICAgcHJlcGVuZCA9IFtdLFxuICAgICAgICBhcHBlbmQgPSBbXSxcbiAgICAgICAgb25seUljb25zID0gdHJ1ZVxuICAgICkge1xuICAgICAgICBjb25zdCBBQ1RJT05TID0ge1xuICAgICAgICAgICAgZGV0YWlsczoge1xuICAgICAgICAgICAgICAgIGFjdGlvbjogKCkgPT4gY29udHJvbGxlci5nb0RldGFpbHModmFsdWUsIGRlbGF5KSxcbiAgICAgICAgICAgICAgICAuLi4ob25seUljb25zXG4gICAgICAgICAgICAgICAgICAgID8geyBpY29uOiBcImNpcmNsZS1pbmZvXCIgfVxuICAgICAgICAgICAgICAgICAgICA6IHsgdGl0bGU6IFwi0J/QvtC00YDQvtCx0L3QtdC1XCIgfSksXG4gICAgICAgICAgICAgICAgc2l6ZTogXCJzbWFsbFwiLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHVwZGF0ZToge1xuICAgICAgICAgICAgICAgIGFjdGlvbjogKCkgPT4gY29udHJvbGxlci5nb1VwZGF0ZSh2YWx1ZSwgZGVsYXkpLFxuICAgICAgICAgICAgICAgIC4uLihvbmx5SWNvbnMgPyB7IGljb246IFwiZWRpdFwiIH0gOiB7IHRpdGxlOiBcItCY0LfQvNC10L3QuNGC0YxcIiB9KSxcbiAgICAgICAgICAgICAgICBjb2xvcjogXCJ3YXJuaW5nXCIsXG4gICAgICAgICAgICAgICAgc2l6ZTogXCJzbWFsbFwiLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRlbGV0ZToge1xuICAgICAgICAgICAgICAgIGFjdGlvbjogKCkgPT4gY29udHJvbGxlci5nb0RlbGV0ZSh2YWx1ZSwgZGVsYXkpLFxuICAgICAgICAgICAgICAgIGNvbG9yOiBcImRhbmdlclwiLFxuICAgICAgICAgICAgICAgIC4uLihvbmx5SWNvbnMgPyB7IGljb246IFwidHJhc2hcIiB9IDogeyB0aXRsZTogXCLQo9C00LDQu9C40YLRjFwiIH0pLFxuICAgICAgICAgICAgICAgIHNpemU6IFwic21hbGxcIixcbiAgICAgICAgICAgICAgICBzdHlsZTogXCJvdXRsaW5lZFwiLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgYWN0aW9uc0J1dHRvbnMgPSBbLi4ucHJlcGVuZF07XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KGFjdGlvbnMpKSB7XG4gICAgICAgICAgICBhY3Rpb25zLmZvckVhY2goKGFjdGlvbk5hbWUpID0+XG4gICAgICAgICAgICAgICAgYWN0aW9uc0J1dHRvbnMucHVzaChBQ1RJT05TW2FjdGlvbk5hbWVdKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICBhY3Rpb25zQnV0dG9ucy5wdXNoKC4uLmFwcGVuZCk7XG4gICAgICAgIHJldHVybiBhY3Rpb25zQnV0dG9ucztcbiAgICB9XG5cbiAgICBzdGF0aWMgYXN5bmMgcnVuKGNvbnRyb2xsZXIsIHBhcmFtcykge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy9pbmRpY2F0aW5nIHRoYXQgd2UgYXJlIHdvcmtpbmdcbiAgICAgICAgICAgIGNvbnRyb2xsZXIucmVuZGVyTG9hZGluZ1NjcmVlbiAmJiBjb250cm9sbGVyLnJlbmRlckxvYWRpbmdTY3JlZW4oKTtcblxuICAgICAgICAgICAgYXdhaXQgY29udHJvbGxlci5wcmVsb2FkVmFyaWFudHMoQUNUSU9OKTtcblxuICAgICAgICAgICAgY29udHJvbGxlci5zZXRCcmVhZGNydW1icyhbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICB0aXRsZTogXCLQodC/0LjRgdC+0LpcIixcbiAgICAgICAgICAgICAgICAgICAgdXJsOiBjb250cm9sbGVyLmdldE1vZGVsVVJMKCksXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF0pO1xuXG4gICAgICAgICAgICBpZiAoY29udHJvbGxlci51aVtBQ1RJT05dKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyLiRkZXN0cm95VUkoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29udHJvbGxlci51aVtBQ1RJT05dID0gbmV3IG5vdFRhYmxlKFxuICAgICAgICAgICAgICAgIHRoaXMudHdlYWtVSU9wdGlvbnMoQ1JVREFjdGlvbkxpc3QucHJlcGFyZU9wdGlvbnMoY29udHJvbGxlcikpXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICBjb250cm9sbGVyLmVtaXQoXG4gICAgICAgICAgICAgICAgYGFmdGVyOnJlbmRlcjoke0FDVElPTn1gLFxuICAgICAgICAgICAgICAgIHBhcmFtcyxcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyLnVpW0FDVElPTl1cbiAgICAgICAgICAgICk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIC8vaW5mb3JtaW5nIGFib3V0IGV4Y2VwdGlvblxuICAgICAgICAgICAgY29udHJvbGxlci5lbWl0KGBleGNlcHRpb246cmVuZGVyOiR7QUNUSU9OfWAsIHBhcmFtcywgZSk7XG4gICAgICAgICAgICBjb250cm9sbGVyLnJlcG9ydChlKTtcbiAgICAgICAgICAgIGNvbnRyb2xsZXIuc2hvd0Vycm9yTWVzc2FnZShlKTtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgIGNvbnRyb2xsZXIucmVtb3ZlTG9hZGluZ1NjcmVlbiAmJiBjb250cm9sbGVyLnJlbW92ZUxvYWRpbmdTY3JlZW4oKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHN0YXRpYyBwcmVwYXJlT3B0aW9ucyhjb250cm9sbGVyKSB7XG4gICAgICAgIGNvbnN0IERFRkFVTFRfT1BUSU9OU19UQUJMRSA9IHtcbiAgICAgICAgICAgIGludGVyZmFjZTogY29udHJvbGxlci5nZXRPcHRpb25zKGAke0FDVElPTn0uaW50ZXJmYWNlYCwge1xuICAgICAgICAgICAgICAgIGNvbWJpbmVkOiB0cnVlLFxuICAgICAgICAgICAgICAgIGZhY3Rvcnk6IGNvbnRyb2xsZXIuZ2V0SW50ZXJmYWNlKCksXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIGZpZWxkczogdW5kZWZpbmVkLFxuICAgICAgICAgICAgc2hvd1NlbGVjdDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgZ2V0SXRlbUlkOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBpZEZpZWxkOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBwcmVsb2FkOiB7fSxcbiAgICAgICAgICAgIGZpbHRlclVJOiBjb250cm9sbGVyLmdldE9wdGlvbnMoYCR7QUNUSU9OfS5maWx0ZXJVSWApLFxuICAgICAgICAgICAgcGFnZXI6IHsgc2l6ZTogNTAsIHBhZ2U6IDAgfSxcbiAgICAgICAgICAgIHNvcnRlcjoge1xuICAgICAgICAgICAgICAgIGlkOiAtMSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBmaWx0ZXI6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHVpOiB1bmRlZmluZWQsXG4gICAgICAgIH07XG4gICAgICAgIC8vZm9ybWluZyBhY3Rpb25zIGJ1dHRvbnMgbGlzdFxuICAgICAgICBsZXQgQUNUSU9OU19MSVNUID0gWy4uLmNvbnRyb2xsZXIuZ2V0T3B0aW9ucyhgJHtBQ1RJT059LmFjdGlvbnNgLCBbXSldO1xuICAgICAgICBBQ1RJT05TX0xJU1QgPSB0aGlzLnR3ZWFrQWN0aW9uc0xpc3QoY29udHJvbGxlciwgQUNUSU9OU19MSVNUKTtcbiAgICAgICAgLy9cbiAgICAgICAgY29uc3QgVEFCTEVfT1BUSU9OUyA9IHtcbiAgICAgICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICAgICAgICB0YXJnZXRFbDogY29udHJvbGxlci5nZXRDb250YWluZXJJbm5lckVsZW1lbnQoKSxcbiAgICAgICAgICAgICAgICBlbmRsZXNzOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBhY3Rpb25zOiBBQ1RJT05TX0xJU1QsXG4gICAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgICAgICBPYmplY3Qua2V5cyhERUZBVUxUX09QVElPTlNfVEFCTEUpLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgICAgICAgbGV0IG9wdFZhbCA9IGNvbnRyb2xsZXIuZ2V0T3B0aW9ucyhcbiAgICAgICAgICAgICAgICBgJHtBQ1RJT059LiR7a2V5fWAsXG4gICAgICAgICAgICAgICAgREVGQVVMVF9PUFRJT05TX1RBQkxFW2tleV1cbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBpZiAodHlwZW9mIG9wdFZhbCAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgICAgIFRBQkxFX09QVElPTlMub3B0aW9uc1trZXldID0gb3B0VmFsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIFRBQkxFX09QVElPTlM7XG4gICAgfVxufVxuIiwiaW1wb3J0IENSVURBY3Rpb25DcmVhdGUgZnJvbSBcIi4vY3JlYXRlXCI7XG5pbXBvcnQgQ1JVREFjdGlvbkRldGFpbHMgZnJvbSBcIi4vZGV0YWlsc1wiO1xuaW1wb3J0IENSVURBY3Rpb25VcGRhdGUgZnJvbSBcIi4vdXBkYXRlXCI7XG5pbXBvcnQgQ1JVREFjdGlvbkRlbGV0ZSBmcm9tIFwiLi9kZWxldGVcIjtcbmltcG9ydCBDUlVEQWN0aW9uTGlzdCBmcm9tIFwiLi9saXN0XCI7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgICBjcmVhdGU6IENSVURBY3Rpb25DcmVhdGUsXG4gICAgZGV0YWlsczogQ1JVREFjdGlvbkRldGFpbHMsXG4gICAgdXBkYXRlOiBDUlVEQWN0aW9uVXBkYXRlLFxuICAgIGRlbGV0ZTogQ1JVREFjdGlvbkRlbGV0ZSxcbiAgICBsaXN0OiBDUlVEQWN0aW9uTGlzdCxcbn07XG4iLCJpbXBvcnQgVUlDb21tb24gZnJvbSBcIi4uLy4uL2VsZW1lbnRzL2NvbW1vblwiO1xuXG5pbXBvcnQgbm90QnJlYWRjcnVtYnMgZnJvbSBcIi4uL2NvbXBvbmVudHMvYnJlYWRjcnVtYnNcIjtcblxuaW1wb3J0IFVJTG9hZGVyIGZyb20gXCIuLi8uLi9lbGVtZW50cy92YXJpb3VzL3VpLmxvYWRlci5zdmVsdGVcIjtcblxuaW1wb3J0IG5vdENvbnRyb2xsZXIgZnJvbSBcIi4uL2NvbnRyb2xsZXJcIjtcbmltcG9ydCBub3RDb21tb24gZnJvbSBcIi4uL2NvbW1vblwiO1xuXG5pbXBvcnQgQ1JVRFZhcmlhbnRzUHJlbG9hZGVyIGZyb20gXCIuL3ZhcmlhbnRzLnByZWxvYWRlci5qc1wiO1xuaW1wb3J0IENSVURSb3V0ZXIgZnJvbSBcIi4vcm91dGVyLmpzXCI7XG5pbXBvcnQgQ1JVRE1lc3NhZ2UgZnJvbSBcIi4vbWVzc2FnZS5qc1wiO1xuaW1wb3J0IENSVURBY3Rpb25zIGZyb20gXCIuL2FjdGlvbnNcIjtcbmltcG9ydCB7IG1vdW50IH0gZnJvbSBcInN2ZWx0ZVwiO1xuXG5jb25zdCBCUkVBRENSVU1CUyA9IFtdO1xuY29uc3QgVElUTEVfRklFTERTX1BSSU9SSVRZID0gW1widGl0bGVcIiwgXCJsYWJlbFwiLCBcImlkXCIsIFwibmFtZVwiXTtcblxuY29uc3QgTE9BRElOR19TQ1JFRU5fVUlfTkFNRSA9IFwibG9hZGluZ19zY3JlZW5cIjtcblxuY2xhc3Mgbm90Q1JVRCBleHRlbmRzIG5vdENvbnRyb2xsZXIge1xuICAgICNhY3Rpb25zID0geyAuLi5DUlVEQWN0aW9ucyB9O1xuICAgICNyb3V0ZXIgPSBDUlVEUm91dGVyO1xuICAgICNwcmVsb2FkZXIgPSBDUlVEVmFyaWFudHNQcmVsb2FkZXI7XG5cbiAgICBUSVRMRV9GSUVMRFNfUFJJT1JJVFkgPSBUSVRMRV9GSUVMRFNfUFJJT1JJVFk7XG5cbiAgICBzdGF0aWMgRVJST1JfREVGQVVMVCA9IFVJQ29tbW9uLkVSUk9SX0RFRkFVTFQ7XG5cbiAgICBUT1BfQ0xBU1MgPSBbXCJib3hcIl07XG4gICAgTUFJTl9DTEFTUyA9IFtcImJveFwiXTtcbiAgICBCT1RUT01fQ0xBU1MgPSBbXCJib3hcIl07XG5cbiAgICBXU19DSEVDS19JTlRFUlZBTCA9IDIwMDtcblxuICAgIHN0YXRpYyBnZXQgTEFCRUxTKCkge1xuICAgICAgICByZXR1cm4gT2JqZWN0LmZyZWV6ZSh7XG4gICAgICAgICAgICBwbHVyYWw6IGAke3RoaXMuTU9EVUxFX05BTUV9OiR7dGhpcy5NT0RFTF9OQU1FfV9sYWJlbF9wbHVyYWxgLFxuICAgICAgICAgICAgc2luZ2xlOiBgJHt0aGlzLk1PRFVMRV9OQU1FfToke3RoaXMuTU9ERUxfTkFNRX1fbGFiZWxfc2luZ2xlYCxcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgc3RhdGljIGdldE1lbnUoaXRlbUN1c3RvbVByb3BzID0ge30pIHtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzZWN0aW9uOiB0aGlzLk1PRFVMRV9OQU1FLFxuICAgICAgICAgICAgICAgIHRpdGxlOiB0aGlzLkxBQkVMUy5wbHVyYWwsXG4gICAgICAgICAgICAgICAgdXJsOiBgLyR7bm90Q29tbW9uLmxvd2VyRmlyc3RMZXR0ZXIoXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuTU9EVUxFX05BTUVcbiAgICAgICAgICAgICAgICApfS8ke25vdENvbW1vbi5sb3dlckZpcnN0TGV0dGVyKHRoaXMuTU9ERUxfTkFNRSl9YCxcbiAgICAgICAgICAgICAgICAuLi5pdGVtQ3VzdG9tUHJvcHMsXG4gICAgICAgICAgICB9LFxuICAgICAgICBdO1xuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBhcHAsXG4gICAgICAgIG5hbWUsXG4gICAgICAgIHsgYWN0aW9ucywgcm91dGVyLCBwcmVsb2FkZXIgfSA9IHtcbiAgICAgICAgICAgIGFjdGlvbnM6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHJvdXRlcjogdW5kZWZpbmVkLFxuICAgICAgICAgICAgcHJlbG9hZGVyOiB1bmRlZmluZWQsXG4gICAgICAgIH1cbiAgICApIHtcbiAgICAgICAgc3VwZXIoYXBwLCBgQ1JVRC4ke25hbWV9YCk7XG4gICAgICAgIGlmIChhY3Rpb25zKSB7XG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICB0aGlzLiNhY3Rpb25zID0geyAuLi50aGlzLiNhY3Rpb25zLCAuLi5hY3Rpb25zIH07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJvdXRlcikge1xuICAgICAgICAgICAgdGhpcy4jcm91dGVyID0gcm91dGVyO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwcmVsb2FkZXIpIHtcbiAgICAgICAgICAgIHRoaXMuI3ByZWxvYWRlciA9IHByZWxvYWRlcjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnVpID0ge307XG4gICAgICAgIHRoaXMuZWxzID0ge307XG4gICAgICAgIHRoaXMuc2V0T3B0aW9ucyhcIm5hbWVzXCIsIHtcbiAgICAgICAgICAgIG1vZHVsZTogXCJcIixcbiAgICAgICAgICAgIHBsdXJhbDogXCJwbHVyYWxcIixcbiAgICAgICAgICAgIHNpbmdsZTogXCJzaW5nbGVcIixcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuc2V0T3B0aW9ucyhcbiAgICAgICAgICAgIFwiY29udGFpbmVyU2VsZWN0b3JcIixcbiAgICAgICAgICAgIHRoaXMuYXBwPy5nZXRPcHRpb25zKFwiY3J1ZC5jb250YWluZXJTZWxlY3RvclwiKVxuICAgICAgICApO1xuICAgICAgICB0aGlzLmJ1aWxkRnJhbWUoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgc2V0VmFsaWRhdG9ycyh2YWxpZGF0b3JzKSB7XG4gICAgICAgIC8vbm90LW1vZHVsZS1uYW1lIC0+IFtub3QsbW9kdWxlLG5hbWVdXG4gICAgICAgIGNvbnN0IE1vZHVsZU5hbWVQYXJ0cyA9IHRoaXMuZ2V0TW9kdWxlTmFtZSgpLnNwbGl0KFwiLVwiKTtcbiAgICAgICAgLy9bbm90LG1vZHVsZSxuYW1lXSAtPiBNb2R1bGVOYW1lXG4gICAgICAgIGNvbnN0IE1vZHVsZU5hbWUgPSAoXG4gICAgICAgICAgICBNb2R1bGVOYW1lUGFydHNbMF0gPT09IFwibm90XCJcbiAgICAgICAgICAgICAgICA/IE1vZHVsZU5hbWVQYXJ0cy5zcGxpY2UoMSlcbiAgICAgICAgICAgICAgICA6IE1vZHVsZU5hbWVQYXJ0c1xuICAgICAgICApXG4gICAgICAgICAgICAubWFwKG5vdENvbW1vbi5jYXBpdGFsaXplRmlyc3RMZXR0ZXIpXG4gICAgICAgICAgICAuam9pbihcIlwiKTtcbiAgICAgICAgY29uc3Qgc2VydmljZU5hbWUgPSBgbnMke01vZHVsZU5hbWV9Q29tbW9uYDtcbiAgICAgICAgY29uc3QgQ29tbW9uTW9kdWxlU2VydmljZSA9IHRoaXMuYXBwPy5nZXRTZXJ2aWNlKHNlcnZpY2VOYW1lKTtcbiAgICAgICAgdGhpcy5zZXRXb3JraW5nKFxuICAgICAgICAgICAgXCJ2YWxpZGF0b3JzXCIsXG4gICAgICAgICAgICBDb21tb25Nb2R1bGVTZXJ2aWNlLmF1Z21lbnRWYWxpZGF0b3JzKHZhbGlkYXRvcnMpXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgZ2V0VmFsaWRhdG9ycygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0V29ya2luZyhcInZhbGlkYXRvcnNcIik7XG4gICAgfVxuXG4gICAgc3RhcnQoKSB7XG4gICAgICAgIGxldCBuZXdIZWFkID0gW107XG4gICAgICAgIGlmICh0aGlzLmdldE1vZHVsZU5hbWUoKSAmJiB0aGlzLmdldE9wdGlvbnMoXCJuYW1lcy5tb2R1bGVcIikpIHtcbiAgICAgICAgICAgIG5ld0hlYWQucHVzaCh7XG4gICAgICAgICAgICAgICAgdGl0bGU6IHRoaXMuZ2V0T3B0aW9ucyhcIm5hbWVzLm1vZHVsZVwiKSxcbiAgICAgICAgICAgICAgICB1cmw6IGZhbHNlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgbmV3SGVhZC5wdXNoKHtcbiAgICAgICAgICAgIHRpdGxlOiB0aGlzLmdldE9wdGlvbnMoXCJuYW1lcy5wbHVyYWxcIiksXG4gICAgICAgICAgICB1cmw6IHRoaXMuZ2V0TW9kZWxVUkwoKSxcbiAgICAgICAgfSk7XG4gICAgICAgIEJSRUFEQ1JVTUJTLnNwbGljZSgwLCBCUkVBRENSVU1CUy5sZW5ndGgsIC4uLm5ld0hlYWQpO1xuICAgICAgICBub3RCcmVhZGNydW1icy5zZXRIZWFkKEJSRUFEQ1JVTUJTKS5yZW5kZXIoe1xuICAgICAgICAgICAgcm9vdDogXCJcIixcbiAgICAgICAgICAgIHRhcmdldDogdGhpcy5lbHMudG9wLFxuICAgICAgICAgICAgbmF2aWdhdGU6ICh1cmwpID0+IHRoaXMuYXBwPy5nZXRXb3JraW5nKFwicm91dGVyXCIpLm5hdmlnYXRlKHVybCksXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnJvdXRlKHRoaXMuZ2V0T3B0aW9ucyhcInBhcmFtc1wiKSk7XG4gICAgfVxuXG4gICAgc3RhcnRXaGVuV1NDbGllbnRSZWFkeSgpIHtcbiAgICAgICAgaWYgKHRoaXMuYXBwPy5nZXRXU0NsaWVudCgpKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5hcHA/LmdldFdTQ2xpZW50KCkuaXNDb25uZWN0ZWQoKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhcnQoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5hcHBcbiAgICAgICAgICAgICAgICAgICAgLmdldFdTQ2xpZW50KClcbiAgICAgICAgICAgICAgICAgICAgLm9uY2UoXCJjb25uZWN0ZWRcIiwgdGhpcy5zdGFydFdoZW5XU0NsaWVudFJlYWR5LmJpbmQodGhpcykpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2V0VGltZW91dChcbiAgICAgICAgICAgICAgICAoKSA9PiB0aGlzLnN0YXJ0V2hlbldTQ2xpZW50UmVhZHkoKSxcbiAgICAgICAgICAgICAgICB0aGlzLldTX0NIRUNLX0lOVEVSVkFMXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc2V0QnJlYWRjcnVtYnModGFpbCkge1xuICAgICAgICBub3RCcmVhZGNydW1icy5zZXRUYWlsKHRhaWwpLnVwZGF0ZSgpO1xuICAgIH1cblxuICAgIGJhY2tUb0xpc3QoKSB7XG4gICAgICAgIHRoaXMubmF2aWdhdGUodGhpcy5saW5rQmFja1RvTGlzdCgpKTtcbiAgICB9XG5cbiAgICBsaW5rQmFja1RvTGlzdCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0TW9kZWxVUkwoKTtcbiAgICB9XG5cbiAgICBhZnRlckFjdGlvbihhY3Rpb24gPSBcImxpc3RcIikge1xuICAgICAgICBsZXQgbmF2QmFjayA9IHRoaXMuYXBwPy5nZXRPcHRpb25zKFwiY3J1ZC5uYXZpZ2F0ZUJhY2tBZnRlclwiLCBbXSk7XG4gICAgICAgIGlmIChuYXZCYWNrICYmIEFycmF5LmlzQXJyYXkobmF2QmFjaykgJiYgbmF2QmFjay5pbmRleE9mKGFjdGlvbikgPiAtMSkge1xuICAgICAgICAgICAgd2luZG93Lmhpc3RvcnkuYmFjaygpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5iYWNrVG9MaXN0KCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBidWlsZEZyYW1lKCkge1xuICAgICAgICBsZXQgZWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFxuICAgICAgICAgICAgdGhpcy5hcHA/LmdldE9wdGlvbnMoXCJjcnVkLmNvbnRhaW5lclNlbGVjdG9yXCIsIFwiYm9keVwiKVxuICAgICAgICApO1xuICAgICAgICB3aGlsZSAoZWwuZmlyc3RDaGlsZCkge1xuICAgICAgICAgICAgZWwucmVtb3ZlQ2hpbGQoZWwuZmlyc3RDaGlsZCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5lbHMudG9wID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgdGhpcy5lbHMudG9wLmlkID0gXCJjcnVkLXRvcFwiO1xuICAgICAgICB0aGlzLmdldEZyYW1lQ2xhc3NlcygpLlRPUF9DTEFTUy5mb3JFYWNoKChuYW1lKSA9PlxuICAgICAgICAgICAgdGhpcy5lbHMudG9wLmNsYXNzTGlzdC5hZGQobmFtZSlcbiAgICAgICAgKTtcbiAgICAgICAgZWwuYXBwZW5kQ2hpbGQodGhpcy5lbHMudG9wKTtcbiAgICAgICAgdGhpcy5lbHMubWFpbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgIHRoaXMuZWxzLm1haW4uaWQgPSBcImNydWQtbWFpblwiO1xuICAgICAgICB0aGlzLmdldEZyYW1lQ2xhc3NlcygpLk1BSU5fQ0xBU1MuZm9yRWFjaCgobmFtZSkgPT5cbiAgICAgICAgICAgIHRoaXMuZWxzLm1haW4uY2xhc3NMaXN0LmFkZChuYW1lKVxuICAgICAgICApO1xuICAgICAgICBlbC5hcHBlbmRDaGlsZCh0aGlzLmVscy5tYWluKTtcbiAgICAgICAgdGhpcy5lbHMuYm90dG9tID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgdGhpcy5lbHMuYm90dG9tLmlkID0gXCJjcnVkLWJvdHRvbVwiO1xuICAgICAgICB0aGlzLmdldEZyYW1lQ2xhc3NlcygpLkJPVFRPTV9DTEFTUy5mb3JFYWNoKChuYW1lKSA9PlxuICAgICAgICAgICAgdGhpcy5lbHMuYm90dG9tLmNsYXNzTGlzdC5hZGQobmFtZSlcbiAgICAgICAgKTtcbiAgICAgICAgZWwuYXBwZW5kQ2hpbGQodGhpcy5lbHMuYm90dG9tKTtcbiAgICB9XG5cbiAgICBnZXRGcmFtZUNsYXNzZXMoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBUT1BfQ0xBU1M6IHRoaXMuVE9QX0NMQVNTLFxuICAgICAgICAgICAgTUFJTl9DTEFTUzogdGhpcy5NQUlOX0NMQVNTLFxuICAgICAgICAgICAgQk9UVE9NX0NMQVNTOiB0aGlzLkJPVFRPTV9DTEFTUyxcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBnZXRDb250YWluZXJUb3BFbGVtZW50KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5lbHMudG9wO1xuICAgIH1cblxuICAgIGdldENvbnRhaW5lcklubmVyRWxlbWVudCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWxzLm1haW47XG4gICAgfVxuXG4gICAgZ2V0Q29udGFpbmVyQm90dG9tRWxlbWVudCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWxzLmJvdHRvbTtcbiAgICB9XG5cbiAgICBhc3luYyBwcmVsb2FkVmFyaWFudHModHlwZSA9IFwibGlzdFwiKSB7XG4gICAgICAgIGF3YWl0IHRoaXMuI3ByZWxvYWRlci5wcmVsb2FkKHRoaXMsIHR5cGUpO1xuICAgIH1cblxuICAgIGdldFRpdGxlRnJvbUxpYihwcm9wTmFtZSwgaWQpIHtcbiAgICAgICAgY29uc3QgYWN0aW9uTmFtZSA9IHRoaXMuZ2V0Q3VycmVudEFjdGlvbigpO1xuICAgICAgICB0aGlzLmRlYnVnICYmXG4gICAgICAgICAgICB0aGlzLmRlYnVnKFxuICAgICAgICAgICAgICAgIFwibm90Q1JVRC5nZXRUaXRsZUZyb21MaWIgaXMgb2Jzb2xldGUsIHVzZSBub3RDUlVELmdldFByZWxvYWRlZFZhcmlhbnRUaXRsZShhY3Rpb25OYW1lLCBwcm9wTmFtZSwgaWQpXCJcbiAgICAgICAgICAgICk7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFByZWxvYWRlZFZhcmlhbnRUaXRsZShhY3Rpb25OYW1lLCBwcm9wTmFtZSwgaWQpO1xuICAgIH1cblxuICAgIGdldFByZWxvYWRlZFZhcmlhbnRzKGFjdGlvbk5hbWUsIHByb3BOYW1lKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldE9wdGlvbnMoYHZhcmlhbnRzLiR7YWN0aW9uTmFtZX0uJHtwcm9wTmFtZX1gLCBbXSk7XG4gICAgfVxuXG4gICAgZ2V0UHJlbG9hZGVkVmFyaWFudFRpdGxlKGFjdGlvbk5hbWUsIHByb3BOYW1lLCBpZCkge1xuICAgICAgICBjb25zdCB2YXJpYW50cyA9IHRoaXMuZ2V0UHJlbG9hZGVkVmFyaWFudHMoYWN0aW9uTmFtZSwgcHJvcE5hbWUpO1xuICAgICAgICBjb25zdCBpdGVtID0gdmFyaWFudHMuZmluZCgoaXRlbSkgPT4gaXRlbS5pZCA9PT0gaWQpO1xuICAgICAgICBpZiAoaXRlbSkge1xuICAgICAgICAgICAgcmV0dXJuIGl0ZW0udGl0bGU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gaWQ7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXRJdGVtVGl0bGUoaXRlbSkge1xuICAgICAgICBjb25zdCBmaWVsZE5hbWUgPSB0aGlzLlRJVExFX0ZJRUxEU19QUklPUklUWS5maW5kKChrZXkpID0+XG4gICAgICAgICAgICBub3RDb21tb24ub2JqSGFzKGl0ZW0sIGtleSlcbiAgICAgICAgKTtcbiAgICAgICAgaWYgKGZpZWxkTmFtZSkge1xuICAgICAgICAgICAgcmV0dXJuIGl0ZW1bZmllbGROYW1lXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBcIlwiO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY3JlYXRlRGVmYXVsdCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0TW9kZWwoe30pLnRvRGVmYXVsdCgpO1xuICAgIH1cblxuICAgIHJvdXRlKHBhcmFtcyA9IFtdKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy4jcm91dGVyLnJvdXRlKHRoaXMsIHBhcmFtcyk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHRoaXMucmVwb3J0KGUpO1xuICAgICAgICAgICAgdGhpcy5zaG93RXJyb3JNZXNzYWdlKGUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgYWN0aW9uSGFuZGxlckV4aXN0cyhhY3Rpb25OYW1lKSB7XG4gICAgICAgIGlmIChPYmplY3Qua2V5cyh0aGlzLiNhY3Rpb25zKS5pbmNsdWRlcyhhY3Rpb25OYW1lKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgdHlwZW9mIHRoaXNbXCJydW5cIiArIG5vdENvbW1vbi5jYXBpdGFsaXplRmlyc3RMZXR0ZXIoYWN0aW9uTmFtZSldID09PVxuICAgICAgICAgICAgXCJmdW5jdGlvblwiXG4gICAgICAgICkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHJ1bkFjdGlvbihhY3Rpb25OYW1lLCBwYXJhbXMpIHtcbiAgICAgICAgaWYgKE9iamVjdC5rZXlzKHRoaXMuI2FjdGlvbnMpLmluY2x1ZGVzKGFjdGlvbk5hbWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy4jYWN0aW9uc1thY3Rpb25OYW1lXS5ydW4odGhpcywgcGFyYW1zKTtcbiAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICAgIHR5cGVvZiB0aGlzW1wicnVuXCIgKyBub3RDb21tb24uY2FwaXRhbGl6ZUZpcnN0TGV0dGVyKGFjdGlvbk5hbWUpXSA9PT1cbiAgICAgICAgICAgIFwiZnVuY3Rpb25cIlxuICAgICAgICApIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzW1wicnVuXCIgKyBub3RDb21tb24uY2FwaXRhbGl6ZUZpcnN0TGV0dGVyKGFjdGlvbk5hbWUpXShcbiAgICAgICAgICAgICAgICBwYXJhbXNcbiAgICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICAgICAgYE5vIHN1Y2ggYWN0aW9uOiAke2FjdGlvbk5hbWV9IGluIGNvbnRvbGxlciAke3RoaXMuZ2V0V29ya2luZyhcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCJcbiAgICAgICAgICAgICAgICApfWBcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiAgQ2hhbmdlcyBsb2NhdGlvbiB0byBjcmVhdGUgcGFnZSwgYWZ0ZXIgZGVsYXlcbiAgICAgKiAgQHBhcmFtIHtudW1iZXJ8c3RyaW5nfSBbZGVsYXk9MF0gbnVtYmVyIGZvciBtcywgb3Igc3RyaW5nIGlmIHdlIHVzZSBgZGVsYXlzYCBhbGlzZXMgYWthIFNIT1JULCBOT1JNQUwsIExPTkdcbiAgICAgKi9cbiAgICBnb0NyZWF0ZShkZWxheSA9IDApIHtcbiAgICAgICAgdGhpcy5nb0FmdGVyRGVsYXkodGhpcy5nZXRNb2RlbEFjdGlvblVSTChcIlwiLCBcImNyZWF0ZVwiKSwgZGVsYXkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqICBDaGFuZ2VzIGxvY2F0aW9uIHRvIGRvY3VtZW50IGRldGFpbHMgcGFnZSwgYWZ0ZXIgZGVsYXlcbiAgICAgKiAgQHBhcmFtIHtzdHJpbmd9ICAgICAgICAgaWQgICAgICAgICAgdGFyZ2V0IGRvY3VtZW50IGlkXG4gICAgICogIEBwYXJhbSB7bnVtYmVyfHN0cmluZ30gIFtkZWxheT0wXSAgIG51bWJlciBmb3IgbXMsIG9yIHN0cmluZyBpZiB3ZSB1c2UgYGRlbGF5c2AgYWxpc2VzIGFrYSBTSE9SVCwgTk9STUFMLCBMT05HXG4gICAgICovXG4gICAgZ29EZXRhaWxzKGlkLCBkZWxheSA9IDApIHtcbiAgICAgICAgdGhpcy5nb0FmdGVyRGVsYXkodGhpcy5nZXRNb2RlbEFjdGlvblVSTChpZCwgXCJcIiksIGRlbGF5KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGFuZ2VzIGxvY2F0aW9uIHRvIGRvY3VtZW50IHVwZGF0ZSBwYWdlLCBhZnRlciBkZWxheVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSAgICAgICAgICBpZCAgICAgICAgICB0YXJnZXQgZG9jdW1lbnQgaWRcbiAgICAgKiAgQHBhcmFtIHtudW1iZXJ8c3RyaW5nfSAgW2RlbGF5PTBdICAgbnVtYmVyIGZvciBtcywgb3Igc3RyaW5nIGlmIHdlIHVzZSBgZGVsYXlzYCBhbGlzZXMgYWthIFNIT1JULCBOT1JNQUwsIExPTkdcbiAgICAgKi9cbiAgICBnb1VwZGF0ZShpZCwgZGVsYXkgPSAwKSB7XG4gICAgICAgIHRoaXMuZ29BZnRlckRlbGF5KHRoaXMuZ2V0TW9kZWxBY3Rpb25VUkwoaWQsIFwidXBkYXRlXCIpLCBkZWxheSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogIENoYW5nZXMgbG9jYXRpb24gdG8gZG9jdW1lbnQgZGVsZXRlIHBhZ2UsIGFmdGVyIGRlbGF5XG4gICAgICogIEBwYXJhbSB7c3RyaW5nfSAgICAgICAgIGlkICAgICAgICAgIHRhcmdldCBkb2N1bWVudCBpZFxuICAgICAqICBAcGFyYW0ge251bWJlcnxzdHJpbmd9ICBbZGVsYXk9MF0gICBudW1iZXIgZm9yIG1zLCBvciBzdHJpbmcgaWYgd2UgdXNlIGBkZWxheXNgIGFsaXNlcyBha2EgU0hPUlQsIE5PUk1BTCwgTE9OR1xuICAgICAqL1xuICAgIGdvRGVsZXRlKGlkLCBkZWxheSA9IDApIHtcbiAgICAgICAgdGhpcy5nb0FmdGVyRGVsYXkodGhpcy5nZXRNb2RlbEFjdGlvblVSTChpZCwgXCJkZWxldGVcIiksIGRlbGF5KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiAgQ2hhbmdlcyBsb2NhdGlvbiB0byBkb2N1bWVudHMgbGlzdCBwYWdlLCBhZnRlciBkZWxheVxuICAgICAqICBAcGFyYW0ge251bWJlcnxzdHJpbmd9ICBbZGVsYXk9MF0gICBudW1iZXIgZm9yIG1zLCBvciBzdHJpbmcgaWYgd2UgdXNlIGBkZWxheXNgIGFsaXNlcyBha2EgU0hPUlQsIE5PUk1BTCwgTE9OR1xuICAgICAqL1xuICAgIGdvTGlzdChkZWxheSA9IDApIHtcbiAgICAgICAgdGhpcy5nb0FmdGVyRGVsYXkodGhpcy5nZXRNb2RlbFVSTCgpLCBkZWxheSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdXJsXG4gICAgICogQHBhcmFtIHtudW1iZXJ8c3RyaW5nfSBkZWxheVxuICAgICAqL1xuICAgIGdvQWZ0ZXJEZWxheSh1cmwsIGRlbGF5ID0gMCkge1xuICAgICAgICB0aGlzLm5hdmlnYXRlV2l0aERlbGF5KHVybCwgZGVsYXksICgpID0+IHRoaXMuJGRlc3Ryb3lVSSgpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiAgQ2hhbmdlcyBsb2NhdGlvbiB0byBkb2N1bWVudHMgbGlzdCBwYWdlLCBhZnRlciBkZWxheVxuICAgICAqICBAcGFyYW0ge251bWJlcnxzdHJpbmd9ICBbZGVsYXk9MF0gICBudW1iZXIgZm9yIG1zLCBvciBzdHJpbmcgaWYgd2UgdXNlIGBkZWxheXNgIGFsaXNlcyBha2EgU0hPUlQsIE5PUk1BTCwgTE9OR1xuICAgICAqL1xuICAgIGdvQmFjayhkZWxheSA9IDApIHtcbiAgICAgICAgdGhpcy5nb0xpc3QoZGVsYXkpO1xuICAgIH1cblxuICAgIGFzeW5jIG9uQWN0aW9uU3VibWl0KGFjdGlvbiwgaXRlbSkge1xuICAgICAgICBsZXQgc3RhdGUgPSB0cnVlO1xuICAgICAgICBjb25zdCBhY3Rpb25VSSA9IHRoaXMudWlbYWN0aW9uXTtcbiAgICAgICAgaWYgKGFjdGlvblVJKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGFjdGlvblVJLnNldExvYWRpbmcoKTtcbiAgICAgICAgICAgICAgICBsZXQgcmVzdWx0ID0gYXdhaXQgdGhpcy5nZXRNb2RlbChpdGVtKVtgJCR7YWN0aW9ufWBdKCk7XG4gICAgICAgICAgICAgICAgc3RhdGUgPSBhY3Rpb25VSS5wcm9jZXNzUmVzdWx0KHJlc3VsdCk7XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgc3RhdGUgPSBhY3Rpb25VSS5wcm9jZXNzUmVzdWx0KGUpO1xuICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICBhY3Rpb25VSS5yZXNldExvYWRpbmcoKTtcbiAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5zYWZlLWZpbmFsbHlcbiAgICAgICAgICAgICAgICByZXR1cm4gc3RhdGU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJBY3Rpb24gVUkgZG9lc250IGV4aXN0XCIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgJGRlc3Ryb3lVSSgpIHtcbiAgICAgICAgZm9yIChsZXQgbmFtZSBpbiB0aGlzLnVpKSB7XG4gICAgICAgICAgICB0aGlzLmRlc3Ryb3lVSUJ5TmFtZShuYW1lKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGRlc3Ryb3lVSUJ5TmFtZShuYW1lKSB7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgaWYgKE9iamVjdC5oYXNPd24odGhpcy51aSwgbmFtZSkpIHtcbiAgICAgICAgICAgIHRoaXMudWlbbmFtZV0uJGRlc3Ryb3kgJiYgdGhpcy51aVtuYW1lXS4kZGVzdHJveSgpO1xuICAgICAgICAgICAgdGhpcy51aVtuYW1lXS5kZXN0cm95ICYmIHRoaXMudWlbbmFtZV0uZGVzdHJveSgpO1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMudWlbbmFtZV07XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzaG93RXJyb3JNZXNzYWdlKHJlcykge1xuICAgICAgICB0aGlzLmVycm9yICYmIHRoaXMuZXJyb3IocmVzKTtcbiAgICAgICAgdGhpcy5hcHAgJiZcbiAgICAgICAgICAgIHRoaXMuYXBwLmVtaXQoXCJlcnJvclwiLCB7XG4gICAgICAgICAgICAgICAgdGl0bGU6IFwi0J/RgNC+0LjQt9C+0YjQu9CwINC+0YjQuNCx0LrQsFwiLFxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6IHJlcy5tZXNzYWdlID8gcmVzLm1lc3NhZ2UgOiBVSUNvbW1vbi5FUlJPUl9ERUZBVUxULFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIENSVURNZXNzYWdlLmVycm9yKFxuICAgICAgICAgICAgdGhpcyxcbiAgICAgICAgICAgIFwi0J/RgNC+0LjQt9C+0YjQu9CwINC+0YjQuNCx0LrQsFwiLFxuICAgICAgICAgICAgcmVzLm1lc3NhZ2UgPyByZXMubWVzc2FnZSA6IFVJQ29tbW9uLkVSUk9SX0RFRkFVTFRcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBzaG93U3VjY2Vzc01lc3NhZ2UodGl0bGUsIG1lc3NhZ2UpIHtcbiAgICAgICAgdGhpcy5hcHAgJiYgdGhpcy5hcHAuZW1pdChcInN1Y2Nlc3NcIiwgeyB0aXRsZSwgbWVzc2FnZSB9KTtcbiAgICAgICAgQ1JVRE1lc3NhZ2Uuc3VjY2Vzcyh0aGlzLCB0aXRsZSwgbWVzc2FnZSk7XG4gICAgfVxuXG4gICAgc2V0VUkobmFtZSwgdmFsLCBzaW5nbGVVSSA9IHRydWUpIHtcbiAgICAgICAgaWYgKHNpbmdsZVVJKSB7XG4gICAgICAgICAgICB0aGlzLiRkZXN0cm95VUkoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnVpW25hbWVdID0gdmFsO1xuICAgIH1cblxuICAgIGdldFVJKG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudWlbbmFtZV07XG4gICAgfVxuXG4gICAgZ2V0QWN0aW9uVUkoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnVpW3RoaXMuZ2V0Q3VycmVudEFjdGlvbigpXTtcbiAgICB9XG5cbiAgICByZW5kZXJMb2FkaW5nU2NyZWVuKCkge1xuICAgICAgICB0aGlzLnNldFVJKExPQURJTkdfU0NSRUVOX1VJX05BTUUsIHRoaXMuY3JlYXRlTG9hZGVyVUkoKSk7XG4gICAgfVxuXG4gICAgcmVtb3ZlTG9hZGluZ1NjcmVlbigpIHtcbiAgICAgICAgdGhpcy5kZXN0cm95VUlCeU5hbWUoTE9BRElOR19TQ1JFRU5fVUlfTkFNRSk7XG4gICAgfVxuXG4gICAgY3JlYXRlTG9hZGVyVUkoKSB7XG4gICAgICAgIHJldHVybiBtb3VudChVSUxvYWRlciwge1xuICAgICAgICAgICAgdGFyZ2V0OiB0aGlzLmdldENvbnRhaW5lcklubmVyRWxlbWVudCgpLFxuICAgICAgICAgICAgcHJvcHM6IHtcbiAgICAgICAgICAgICAgICBsb2FkaW5nOiB0cnVlLFxuICAgICAgICAgICAgICAgIHRpdGxlOiBcIlwiLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBub3RDUlVEO1xuIiwiY29uc3QgUk9VVEVfTElTVCA9IFwibGlzdFwiO1xuLyoqXG4gKiBSdW5zIGNvbnRyb2xsZXIgYWN0aW9uIGJ5IG5hbWUgdGhhdCBnZXRzIGZyb20gVVJJIHBhcmFtc1xuICogQGNsYXNzXG4gKi9cbmNsYXNzIG5vdENSVURQbGFpblJvdXRlciB7XG4gICAgc3RhdGljIERFRkFVTFRfUk9VVEUgPSBST1VURV9MSVNUO1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgZmlyc3QgaXRlbSBmcm9tIHBhcmFtcyBvciB0aHJvd3MgRXJyb3JcbiAgICAgKiBAcGFyYW0ge3N0cmluZ1tdfSBwYXJhbXMgYXJyYXkgb2Ygc3RyaW5ncyBwYXJzZWQgZnJvbSBVUkkgYnkgcm91dGUgcnVsZXNcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgICAqL1xuICAgIHN0YXRpYyBleHRyYWN0QWN0aW9uTmFtZShwYXJhbXMpIHtcbiAgICAgICAgaWYgKHBhcmFtcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICByZXR1cm4gcGFyYW1zWzBdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLkRFRkFVTFRfUk9VVEU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUnVucyBjb250cm9sbGVyIGFjdGlvbiBvciB0aHJvd3NcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gY29udHJvbGxlciAgIGluc3RhbmNlIG9mIG5vdENvbnRyb2xsZXIgZGVzY2VuZGFudFxuICAgICAqIEBwYXJhbSB7c3RyaW5nW119IHBhcmFtc1xuICAgICAqL1xuICAgIHN0YXRpYyByb3V0ZShjb250cm9sbGVyLCBwYXJhbXMpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IGFjdGlvbk5hbWUgPSB0aGlzLmV4dHJhY3RBY3Rpb25OYW1lKHBhcmFtcyk7XG4gICAgICAgICAgICBjb250cm9sbGVyLnNldEN1cnJlbnRBY3Rpb24oYWN0aW9uTmFtZSk7XG4gICAgICAgICAgICByZXR1cm4gY29udHJvbGxlci5ydW5BY3Rpb24oYWN0aW9uTmFtZSwgcGFyYW1zKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgY29udHJvbGxlci5yZXBvcnQoZSk7XG4gICAgICAgICAgICBjb250cm9sbGVyLnNob3dFcnJvck1lc3NhZ2UoZSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IG5vdENSVURQbGFpblJvdXRlcjtcbiIsImltcG9ydCBub3RDb21tb24gZnJvbSBcIi4uL2NvbW1vblwiO1xuXG4vKipcbiAqIFJ1bnMgY29udHJvbGxlciBhY3Rpb24gYnkgbmFtZSB0aGF0IGdldHMgZnJvbSBVUkkgcGFyYW1zXG4gKiBAY2xhc3NcbiAqL1xuY2xhc3Mgbm90Q1JVRFJvdXRlclN3aXRjaCB7XG4gICAgLyoqXG4gICAgICogVmFyaWFudHMgb2YgdGhpcyBhY3Rpb25cbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IHJvdXRlc1ZhcmlhbnRzKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICByb3V0ZU5hbWU6IEFjdGlvblxuICAgICAgICAgICAgICovXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0cnVlIGlmIHZhcmlhbnQgbmFtZSBpcyB2YWxpZFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lICAgIG5hbWUgb2Ygcm91dGUgdmFyaWFudFxuICAgICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgICAqL1xuICAgIHN0YXRpYyBpc1JvdXRlVmFyaWFudFZhbGlkKG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIG5hbWUgIT09IFwiXCIgJiYgbm90Q29tbW9uLm9iakhhcyh0aGlzLnJvdXRlc1ZhcmlhbnRzLCBuYW1lKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIGZ1bmN0aW9uIHJldHVybnMgd2hpY2ggb2Ygcm91dGVzIHZhcmlhbnQgc2hvdWxkIGJlIGV4ZWN1dGVkXG4gICAgICogQHBhcmFtIHtvYmplY3R9IGNvbnRyb2xsZXIgICBpbnN0YW5jZSBvZiBub3RDb250cm9sbGVyIGRlc2NlbmRhbnRcbiAgICAgKiBAcGFyYW0ge3N0cmluZ1tdfSAgICBwYXJhbXMgIHBhcmFtcyBwYXNzZWQgdG8gcm91dGVyXG4gICAgICogQHJldHVybnMge1Byb21pc2U8c3RyaW5nPn0gICAgbmFtZSBvZiByb3V0ZSB2YXJpYW50XG4gICAgICovXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgc3RhdGljIGFzeW5jIGRldGVybWluZVJvdXRlKGNvbnRyb2xsZXIsIHBhcmFtcyA9IFtdKSB7XG4gICAgICAgIHJldHVybiBcIlwiO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJ1bnMgY29udHJvbGxlciBhY3Rpb24gb3IgdGhyb3dzXG4gICAgICogQHBhcmFtIHtvYmplY3R9IGNvbnRyb2xsZXIgICBpbnN0YW5jZSBvZiBub3RDb250cm9sbGVyIGRlc2NlbmRhbnRcbiAgICAgKiBAcGFyYW0ge3N0cmluZ1tdfSBwYXJhbXNcbiAgICAgKi9cbiAgICBzdGF0aWMgYXN5bmMgcm91dGUoY29udHJvbGxlciwgcGFyYW1zKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBhY3Rpb25OYW1lID0gYXdhaXQgdGhpcy5kZXRlcm1pbmVSb3V0ZShjb250cm9sbGVyLCBwYXJhbXMpO1xuICAgICAgICAgICAgaWYgKHRoaXMuaXNSb3V0ZVZhcmlhbnRWYWxpZChhY3Rpb25OYW1lKSkge1xuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXIuc2V0Q3VycmVudEFjdGlvbihhY3Rpb25OYW1lKTtcbiAgICAgICAgICAgICAgICBjb25zdCByb3V0ZXJBY3Rpb24gPSB0aGlzLnJvdXRlc1ZhcmlhbnRzW2FjdGlvbk5hbWVdO1xuICAgICAgICAgICAgICAgIGlmIChub3RDb21tb24uaXNBc3luYyhyb3V0ZXJBY3Rpb24ucnVuKSkge1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCByb3V0ZXJBY3Rpb24ucnVuKGNvbnRyb2xsZXIsIHBhcmFtcyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcm91dGVyQWN0aW9uLnJ1bihjb250cm9sbGVyLCBwYXJhbXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgICAgICAgICBgTm8gc3VjaCBhY3Rpb246ICR7YWN0aW9uTmFtZX0gaW4gY29udG9sbGVyICR7Y29udHJvbGxlci5nZXRXb3JraW5nKFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCJcbiAgICAgICAgICAgICAgICAgICAgKX1gXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgY29udHJvbGxlci5yZXBvcnQoZSk7XG4gICAgICAgICAgICBjb250cm9sbGVyLnNob3dFcnJvck1lc3NhZ2UoZSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IG5vdENSVURSb3V0ZXJTd2l0Y2g7XG4iLCJpbXBvcnQgVUlHZW5lcmljU2VsZWN0b3IgZnJvbSBcIi4uLy4uL2VsZW1lbnRzL21vZGFsL3VpLmdlbmVyaWMuc2VsZWN0b3Iuc3ZlbHRlXCI7XG5pbXBvcnQgeyBtb3VudCwgdW5tb3VudCB9IGZyb20gXCJzdmVsdGVcIjtcblxuY29uc3QgZW1wdHlSZXN1bHQgPSAoKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgbGlzdDogW10sXG4gICAgICAgIGNvdW50OiAwLFxuICAgICAgICBwYWdlOiAwLFxuICAgICAgICBwYWdlczogMCxcbiAgICAgICAgc2tpcDogMCxcbiAgICB9O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3Mgbm90U2VydmljZU1vZGVsU2VhcmNoIHtcbiAgICBjb25zdHJ1Y3RvcihhcHAsIG1vZGVsTmFtZSkge1xuICAgICAgICB0aGlzLm1vZGVsTmFtZSA9IG1vZGVsTmFtZTtcbiAgICAgICAgdGhpcy5hcHAgPSBhcHA7XG4gICAgfVxuXG4gICAgZGVzdHJveSgpIHtcbiAgICAgICAgZGVsZXRlIHRoaXMuYXBwO1xuICAgIH1cblxuICAgIGdldFNlYXJjaFJvdXRlTmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIFwibGlzdEFuZENvdW50XCI7XG4gICAgfVxuXG4gICAgZ2V0RGF0YUxvYWRSb3V0ZU5hbWUoKSB7XG4gICAgICAgIHJldHVybiBcImdldFwiO1xuICAgIH1cblxuICAgIHRyYW5zZm9ybVNlYXJjaFJlc3VsdChyZXN1bHQpIHtcbiAgICAgICAgcmVzdWx0Lmxpc3QgPSByZXN1bHQubGlzdC5tYXAoKGl0ZW0pID0+IHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgX2lkOiBpdGVtLl9pZCxcbiAgICAgICAgICAgICAgICBpZDogaXRlbVtgJHt0aGlzLm1vZGVsTmFtZX1JRGBdLFxuICAgICAgICAgICAgICAgIHRpdGxlOiBpdGVtLm5hbWUgfHwgaXRlbS50aXRsZSB8fCBpdGVtLmxhYmVsIHx8IGl0ZW0udXNlcm5hbWUsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICB0cmFuc2Zvcm1TZWxlY3RlZFJlc3VsdChyZXN1bHQpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIF9pZDogcmVzdWx0Ll9pZCxcbiAgICAgICAgICAgIFtgJHt0aGlzLm1vZGVsTmFtZX1JRGBdOiByZXN1bHQuaWQsXG4gICAgICAgICAgICB0aXRsZTogcmVzdWx0LnRpdGxlLFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIGFzeW5jIHNlYXJjaEJ5VGVybSh0ZXJtKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAodGVybS52YWx1ZS5sZW5ndGggPiAyKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbW9kZWwgPSB0aGlzLmFwcC5nZXRNb2RlbCh0aGlzLm1vZGVsTmFtZSk7XG4gICAgICAgICAgICAgICAgbW9kZWwuc2V0U2VhcmNoKHRlcm0udmFsdWUpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgbW9kZWxbYCQke3RoaXMuZ2V0U2VhcmNoUm91dGVOYW1lKCl9YF0oKTtcbiAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzID09PSBcIm9rXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudHJhbnNmb3JtU2VhcmNoUmVzdWx0KHJlc3BvbnNlLnJlc3VsdCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVtcHR5UmVzdWx0KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZW1wdHlSZXN1bHQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCB7XG4gICAgICAgICAgICByZXR1cm4gZW1wdHlSZXN1bHQoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIG9wZW5TZWxlY3RvcigpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZWwgPSBtb3VudChVSUdlbmVyaWNTZWxlY3Rvciwge1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXQ6IGRvY3VtZW50LmJvZHksXG4gICAgICAgICAgICAgICAgICAgIHByb3BzOiB7fSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBlbC4kb24oXCJ0ZXJtQ2hhbmdlXCIsIGFzeW5jICh7IGRldGFpbCB9KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdHMgPSBhd2FpdCB0aGlzLnNlYXJjaEJ5VGVybShkZXRhaWwpO1xuICAgICAgICAgICAgICAgICAgICBlbC4kc2V0KHsgcmVzdWx0cyB9KTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIGVsLiRvbihcIm5leHRcIiwgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIm5leHQgc2VsZWN0b3IgcmVzdWx0c1wiKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIGVsLiRvbihcInByZXZcIiwgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcInByZXYgc2VsZWN0b3IgcmVzdWx0c1wiKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIGVsLiRvbihcInJlamVjdFwiLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHVubW91bnQoZWwpO1xuICAgICAgICAgICAgICAgICAgICByZWplY3QoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBlbC4kb24oXCJyZXNvbHZlXCIsICh7IGRldGFpbCB9KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHVubW91bnQoZWwpO1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHRoaXMudHJhbnNmb3JtU2VsZWN0ZWRSZXN1bHQoZGV0YWlsKSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5hcHAuZXJyb3IoZSk7XG4gICAgICAgICAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBhc3luYyBsb2FkRGF0YShfaWQpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmIChfaWQgJiYgX2lkLmxlbmd0aCA+IDEwKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbW9kZWwgPSB0aGlzLmFwcC5nZXRNb2RlbCh0aGlzLm1vZGVsTmFtZSwgeyBfaWQgfSk7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBtb2RlbFtcbiAgICAgICAgICAgICAgICAgICAgYCQke3RoaXMuZ2V0RGF0YUxvYWRSb3V0ZU5hbWUoKX1gXG4gICAgICAgICAgICAgICAgXSgpO1xuICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPT09IFwib2tcIikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UucmVzdWx0O1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHRoaXMuYXBwLmVycm9yKGUpO1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCIvL2ltcG9ydCAnYmFiZWwtcG9seWZpbGwvZGlzdC9wb2x5ZmlsbCc7XG5cbi8qXG4gIENvbW1vbiBmdW5jdGlvbnNcbiovXG5pbXBvcnQgbm90Q29tbW9uIGZyb20gXCIuL2NvbW1vbi5qc1wiO1xuXG4vKlxuICBmcmFtZXdvcmsgd2lkZSBwYXJzZXIgZm9yIGRhdGEgYWNjZXNzXG4qL1xuaW1wb3J0IG5vdFBhdGggZnJvbSBcIm5vdC1wYXRoXCI7XG5cbmltcG9ydCBub3RSb3V0ZXIgZnJvbSBcIi4vcm91dGVyLmpzXCI7XG5cbmltcG9ydCAqIGFzIG5vdEFQSSBmcm9tIFwiLi9hcGlcIjtcbmltcG9ydCAqIGFzIG5vdFN0b3JlcyBmcm9tIFwiLi9zdG9yZXNcIjtcbi8qXG4gIGJhc2ljIGV2ZW50IGhhbmRsZXJzIGFuZCBjb3JlIGRhdGEgbW9kaWZpZXJzXG4qL1xuaW1wb3J0IG5vdEJhc2UgZnJvbSBcIi4vYmFzZS5qc1wiO1xuXG5pbXBvcnQgeyBDT01QT05FTlRTLCBGSUVMRFMsIFZBUklBTlRTIH0gZnJvbSBcIi4vTElCLmpzXCI7XG4vKlxuICBhcHBsaWNhdGlvbiBtYWluIGluZnJhc3RydWN0dXJlIHNldHRlclxuKi9cbmltcG9ydCBub3RBcHAgZnJvbSBcIi4vYXBwLmpzXCI7XG4vKlxuICB1c2VyIGNvbnRyb2xsZXJzXG4qL1xuaW1wb3J0IG5vdENvbnRyb2xsZXIgZnJvbSBcIi4vY29udHJvbGxlci5qc1wiO1xuaW1wb3J0IG5vdFJlY29yZCBmcm9tIFwiLi9yZWNvcmQuanNcIjsgLy8gIHdyYXBwZXIgZm9yIGRhdGEgd2l0aCBzZXJ2ZXIgbGl2ZSBpbnRlcmFjdGlvbnNcbmltcG9ydCBub3RJbnRlcmZhY2UgZnJvbSBcIi4vaW50ZXJmYWNlLmpzXCI7IC8vICB3cmFwcGVyIGZvciBkYXRhIHdpdGggc2VydmVyIGxpdmUgaW50ZXJhY3Rpb25zXG5cbmltcG9ydCB7XG4gICAgbm90VGFibGUsXG4gICAgVUlGb3JtLFxuICAgIG5vdEZvcm0sXG4gICAgbm90Rm9ybVNldCxcbiAgICBub3RGb3JtUnVsZXMsXG4gICAgbm90Rm9ybVV0aWxzLFxuICAgIG5vdEZvcm1IZWxwZXJzLFxuICAgIG5vdEJyZWFkY3J1bWJzLFxuICAgIG5vdFRvcE1lbnUsXG4gICAgbm90U2lkZU1lbnUsXG59IGZyb20gXCIuL2NvbXBvbmVudHNcIjtcblxuaW1wb3J0IGNyZWF0ZUNSVURBY3Rpb25VSVZpZXcgZnJvbSBcIi4vY3J1ZC9jcmVhdGUuY3J1ZC5hY3Rpb24udWkudmlldy5qc1wiO1xuaW1wb3J0IG5vdENSVUQgZnJvbSBcIi4vY3J1ZC9jb250cm9sbGVyLmNydWQuanNcIjtcbmltcG9ydCBub3RDUlVEUm91dGVyIGZyb20gXCIuL2NydWQvcm91dGVyLmpzXCI7XG5pbXBvcnQgbm90Q1JVRFJvdXRlclBsYWluIGZyb20gXCIuL2NydWQvcm91dGVyLnBsYWluLmpzXCI7XG5pbXBvcnQgbm90Q1JVRFJvdXRlclN3aXRjaCBmcm9tIFwiLi9jcnVkL3JvdXRlci5zd2l0Y2guanNcIjtcbmltcG9ydCBub3RTZXJ2aWNlTW9kZWxTZWFyY2ggZnJvbSBcIi4vY3J1ZC9zZWFyY2guc2VydmljZS5qc1wiO1xuXG5jb25zdCBuY0NSVUQgPSBub3RDUlVEOyAvL2xlZ2FjeSBhbGlhc1xuXG5leHBvcnQge1xuICAgIENPTVBPTkVOVFMsXG4gICAgRklFTERTLFxuICAgIFVJRm9ybSxcbiAgICBWQVJJQU5UUyxcbiAgICBuY0NSVUQsXG4gICAgY3JlYXRlQ1JVREFjdGlvblVJVmlldyxcbiAgICBub3RBUEksXG4gICAgbm90QXBwLFxuICAgIG5vdEJhc2UsXG4gICAgbm90QnJlYWRjcnVtYnMsXG4gICAgbm90Q1JVRCxcbiAgICBub3RDb21tb24sXG4gICAgbm90Q29udHJvbGxlcixcbiAgICBub3RGb3JtLFxuICAgIG5vdEZvcm1TZXQsXG4gICAgbm90Rm9ybVV0aWxzLFxuICAgIG5vdEZvcm1IZWxwZXJzLFxuICAgIG5vdEZvcm1SdWxlcyxcbiAgICBub3RJbnRlcmZhY2UsXG4gICAgbm90UGF0aCxcbiAgICBub3RSZWNvcmQsXG4gICAgbm90Um91dGVyLFxuICAgIG5vdENSVURSb3V0ZXIsXG4gICAgbm90Q1JVRFJvdXRlclBsYWluLFxuICAgIG5vdENSVURSb3V0ZXJTd2l0Y2gsXG4gICAgbm90U2VydmljZU1vZGVsU2VhcmNoLFxuICAgIG5vdFNpZGVNZW51LFxuICAgIG5vdFN0b3JlcyxcbiAgICBub3RUYWJsZSxcbiAgICBub3RUb3BNZW51LFxufTtcbiIsImltcG9ydCBcIi4vc2Nzcy9zdHlsZS5zY3NzXCI7XG5cbmltcG9ydCAqIGFzIHN2ZWx0ZSBmcm9tIFwic3ZlbHRlXCI7XG5cbmltcG9ydCAqIGFzIEVsZW1lbnRzIGZyb20gXCIuL2VsZW1lbnRzXCI7XG5cbmltcG9ydCAqIGFzIEZyYW1lIGZyb20gXCIuL2ZyYW1lXCI7XG5cbmltcG9ydCB7IExPQ0FMRSwgc2F5LCBub3RMb2NhbGUgfSBmcm9tIFwiLi9sb2NhbGVcIjtcblxuY29uc3QgTG9jYWxlID0geyBMT0NBTEUsIHNheSwgbm90TG9jYWxlIH07XG5jb25zdCBVSUNvbW1vbiA9IEVsZW1lbnRzLlVJQ29tbW9uO1xuXG5jb25zdCB7IG5vdENvbW1vbiwgQ09NUE9ORU5UUywgRklFTERTLCBWQVJJQU5UUywgbm90Rm9ybVV0aWxzIH0gPSBGcmFtZTtcblxuT2JqZWN0LmtleXMoRWxlbWVudHMpLmZvckVhY2goKGNvbXBvbmVudHNTZXROYW1lKSA9PiB7XG4gICAgT2JqZWN0LmtleXMoRWxlbWVudHNbY29tcG9uZW50c1NldE5hbWVdKS5mb3JFYWNoKChjb21wb25lbnROYW1lKSA9PiB7XG4gICAgICAgIEZyYW1lLm5vdEZvcm1VdGlscy5hZGRDb21wb25lbnQoXG4gICAgICAgICAgICBjb21wb25lbnROYW1lLFxuICAgICAgICAgICAgRWxlbWVudHNbY29tcG9uZW50c1NldE5hbWVdW2NvbXBvbmVudE5hbWVdXG4gICAgICAgICk7XG4gICAgfSk7XG59KTtcblxuZXhwb3J0IHtcbiAgICBzdmVsdGUsXG4gICAgLy9VSVxuICAgIEVsZW1lbnRzLFxuICAgIFVJQ29tbW9uLFxuICAgIC8vYXBwbGljYXRpb24gZnJhbWV3b3JrXG4gICAgRnJhbWUsXG4gICAgLy9zaG9ydHMgZm9yIGNvbW1vbiBlbGVtZW50c1xuICAgIG5vdENvbW1vbixcbiAgICBub3RGb3JtVXRpbHMsXG4gICAgQ09NUE9ORU5UUyxcbiAgICBGSUVMRFMsXG4gICAgVkFSSUFOVFMsXG4gICAgLy9sb2NhbGl6YXRpb25cbiAgICBMb2NhbGUsXG4gICAgTE9DQUxFLFxuICAgIHNheSxcbiAgICBub3RMb2NhbGUsXG59O1xuIl0sIm5hbWVzIjpbInJ1biIsImJvbGQiLCJub3JtYWwiLCJ3LnN0YXRlX3NuYXBzaG90X3VuY2xvbmVhYmxlIiwiZ2V0X3N0YWNrIiwiZ2V0IiwiZS5zdGF0ZV91bnNhZmVfbXV0YXRpb24iLCJ3Lmh5ZHJhdGlvbl9taXNtYXRjaCIsIncub3duZXJzaGlwX2ludmFsaWRfYmluZGluZyIsIncub3duZXJzaGlwX2ludmFsaWRfbXV0YXRpb24iLCJlLnN0YXRlX2Rlc2NyaXB0b3JzX2ZpeGVkIiwiZS5zdGF0ZV9wcm90b3R5cGVfZml4ZWQiLCJ3LnN0YXRlX3Byb3h5X2VxdWFsaXR5X21pc21hdGNoIiwiZS5kZXJpdmVkX3JlZmVyZW5jZXNfc2VsZiIsImUuZWZmZWN0X29ycGhhbiIsImUuZWZmZWN0X2luX3Vub3duZWRfZGVyaXZlZCIsImUuZWZmZWN0X2luX3RlYXJkb3duIiwiaXNfbWljcm9fdGFza19xdWV1ZWQiLCJlLmVmZmVjdF91cGRhdGVfZGVwdGhfZXhjZWVkZWQiLCJlLnN0YXRlX3Vuc2FmZV9sb2NhbF9yZWFkIiwiZS5ydW5lX291dHNpZGVfc3ZlbHRlIiwiZS5oeWRyYXRpb25fZmFpbGVkIiwidy5saWZlY3ljbGVfZG91YmxlX3VubW91bnQiLCJpbmRleCIsIncuaHlkcmF0aW9uX2h0bWxfY2hhbmdlZCIsImUuaW52YWxpZF9zbmlwcGV0Iiwidy5pbnZhbGlkX3Jhd19zbmlwcGV0X3JlbmRlciIsIncuaHlkcmF0aW9uX2F0dHJpYnV0ZV9jaGFuZ2VkIiwibGluZWFyIiwiZS5iaW5kX2ludmFsaWRfY2hlY2tib3hfdmFsdWUiLCJlLnByb3BzX3Jlc3RfcmVhZG9ubHkiLCJlLnByb3BzX2ludmFsaWRfdmFsdWUiLCJ3LmxlZ2FjeV9yZWN1cnNpdmVfcmVhY3RpdmVfYmxvY2siLCJlLmxpZmVjeWNsZV9sZWdhY3lfb25seSIsImlucHV0VmFsdWVzRXh0cmFjdG9ycyIsIk9iamVjdCIsImZyZWV6ZSIsImNoZWNrYm94IiwiaW5wRWwiLCJkZWZhdWx0VmFsdWUiLCJ1bmRlZmluZWQiLCJoYXNPd24iLCJjaGVja2VkIiwidW5jaGVja2VkIiwidmFsdWUiLCJVSUNvbW1vbiIsIl9jbGFzc0NhbGxDaGVjayIsIl9jcmVhdGVDbGFzcyIsImtleSIsImV4dHJhY3RWYWx1ZUZyb21JbnB1dCIsInR5cGUiLCJvbklucHV0IiwiZmllbGQiLCJvbmNoYW5nZSIsImV2ZW50IiwiY3VycmVudFRhcmdldCIsImlzRW50ZXJFdmVudCIsImUiLCJhbHRLZXkiLCJjdHJsS2V5Iiwic2hpZnRLZXkiLCJvbmx5T25FbnRlciIsImNhbGxiYWNrIiwiaXNNb2JpbGUiLCJ0ZXN0TW9iaWxlIiwid2luZG93IiwibWF0Y2hNZWRpYSIsIm1zTWF0Y2hNZWRpYSIsInRlc3RRdWVyeSIsImFyZ3VtZW50cyIsImxlbmd0aCIsIm1heF93aWR0aCIsIk1PQklMRV9XSURUSF9CUkVBS19QT0lOVCIsIm1hdGNoZXMiLCJyZW1vdmVCb2R5U2Nyb2xsIiwiZG9jdW1lbnQiLCJib2R5IiwiY2xhc3NMaXN0IiwiYWRkIiwiU0NST0xMX0RJU0FCTEVSX0NMQVNTIiwicmVzdG9yZUJvZHlTY3JvbGwiLCJyZW1vdmUiLCJmb3JtYXRQaG9uZSIsInZhbCIsImZpbGxlciIsIkZJTExFUiIsInNsb3RzIiwiZGlnaXRzIiwicmVwbGFjZSIsImQiLCJ1bnNoaWZ0Iiwic3RhY2siLCJBcnJheSIsImZyb20iLCJmb3JFYWNoIiwiZGlnaXQiLCJzbG90IiwibGVucyIsInJlZHVjZSIsImFjYyIsImN1cnIiLCJ0IiwiZGlmIiwicGFyc2VJbnQiLCJzZXRNb25leVNpZ24iLCJNT05FWV9TSUdOIiwiZm9ybWF0UHJpY2UiLCJwcmljZSIsIm1ham9yIiwiTWF0aCIsImZsb29yIiwibWlub3IiLCJ0b1N0cmluZyIsImZvcm1hdExvY2FsZURhdGV0aW1lIiwiZHQiLCJvcHRzIiwiZGF0ZSIsInRpbWUiLCJ0b0xvY2FsZURhdGVTdHJpbmciLCJuYXZpZ2F0b3IiLCJsYW5ndWFnZSIsInRvTG9jYWxlVGltZVN0cmluZyIsInRyeUZvcm1hdExvY2FsZURhdGVUaW1lIiwiRGF0ZSIsImZvcm1hdFRpbWVzdGFtcCIsInRpbWVzdGFtcCIsIm9mZnNldCIsIm9mZnNldExvY2FsIiwiZ2V0VGltZXpvbmVPZmZzZXQiLCJkZWx0YU9mZnNldCIsImxvY2FsRGF0ZVRpbWUiLCJ0b0xvY2FsZVN0cmluZyIsImRlY2xPZk51bSIsIm4iLCJ0ZXh0X2Zvcm1zIiwiYWJzIiwibjEiLCJodW1hbml6ZWRUaW1lRGlmZiIsImN1cnJlbnRUaW1lIiwiZ2V0VGltZSIsInNlYyIsInJvdW5kIiwidW5pdCIsIlRJTUUiLCJTRUNPTkRTIiwibWluIiwiTUlOVVRFUyIsImhvdXJzIiwiSE9VUlMiLCJfZGVmaW5lUHJvcGVydHkiLCJ0b3AiLCJiZWhhdmlvciIsIiQudXNlcl9lZmZlY3QiLCIkLnNldCIsImluaXREaWN0IiwidGFyZ2V0IiwiaGFuZGxlciIsInByb3AiLCJSZWZsZWN0IiwiUHJveHkiLCJjcmVhdGVMb2NhbGUiLCJzdWJzY3JpYmUiLCJzZXQiLCJ1cGRhdGUiLCJ3cml0YWJsZSIsInJlc2V0IiwiTE9DQUxFIiwidGhpcyIsInNyYyIsIm5vdFBhdGgiLCJyZXF1aXJlJCQwIiwiaXNNZXJnZWFibGVPYmplY3QiLCJpc05vbk51bGxPYmplY3QiLCJpc1NwZWNpYWwiLCJzdHJpbmdWYWx1ZSIsInByb3RvdHlwZSIsImNhbGwiLCJpc1JlYWN0RWxlbWVudCIsImNhblVzZVN5bWJvbCIsIlN5bWJvbCIsImZvciIsIlJFQUNUX0VMRU1FTlRfVFlQRSIsIiQkdHlwZW9mIiwiZW1wdHlUYXJnZXQiLCJpc0FycmF5IiwiY2xvbmVVbmxlc3NPdGhlcndpc2VTcGVjaWZpZWQiLCJvcHRpb25zQXJndW1lbnQiLCJjbG9uZSIsImRlZXBtZXJnZSIsImRlZmF1bHRBcnJheU1lcmdlIiwic291cmNlIiwiY29uY2F0IiwibWFwIiwiZWxlbWVudCIsIm1lcmdlT2JqZWN0IiwiZGVzdGluYXRpb24iLCJrZXlzIiwic291cmNlSXNBcnJheSIsInRhcmdldElzQXJyYXkiLCJvcHRpb25zIiwiYXJyYXlNZXJnZSIsInNvdXJjZUFuZFRhcmdldFR5cGVzTWF0Y2giLCJhbGwiLCJkZWVwbWVyZ2VBbGwiLCJhcnJheSIsIkVycm9yIiwicHJldiIsIm5leHQiLCJub3RDb21tb24iLCJpc0Vycm9yIiwic3RhdHVzIiwibXV0ZSIsIkVOVl9UWVBFIiwicGFkIiwiZ2V0VG9kYXlEYXRlIiwiZ2V0RnVsbFllYXIiLCJnZXRNb250aCIsImdldERhdGUiLCJvYmpIYXMiLCJvYmoiLCJuYW1lIiwiY29weU9iaiIsIkpTT04iLCJwYXJzZSIsInN0cmluZ2lmeSIsInBhcnRDb3B5T2JqIiwibGlzdCIsInBhcnRPYmoiLCJpbmNsdWRlcyIsImNvbXBhcmVUd29BcnJheXMiLCJhIiwiYiIsImV2ZXJ5IiwiaXNGdW5jIiwiZnVuYyIsImlzQXN5bmMiLCJjb25zdHJ1Y3RvciIsImV4ZWN1dGVPYmplY3RGdW5jdGlvbiIsInBhcmFtcyIsInByb2MiLCJtYXBCaW5kIiwidG8iLCJpdGVtIiwiYmluZCIsImlzQ2xhc3MiLCJmbiIsInRlc3QiLCJkZXRlY3RUeXBlIiwidGVzdGllIiwiZGF0YSIsImxvY2FsSXNvRGF0ZSIsImxvY2FsSXNvU3RyaW5nIiwiZ2V0SG91cnMiLCJnZXRNaW51dGVzIiwiZ2V0U2Vjb25kcyIsImdldFRvZGF5IiwidG9kYXkiLCJiYWNrbG9nQWRkIiwibXNnIiwiYmFja2xvZyIsInB1c2giLCJkdW1wQmFja2xvZyIsInJvdyIsInNoaWZ0IiwiTE9HIiwibG9nTXNnIiwibm93IiwibG9nIiwiY3JlYXRlTG9nZ2VyIiwicHJlZml4IiwiZ2VuTG9nTXNnIiwiZXJyb3IiLCJnZW5Mb2dFcnJvciIsImRlYnVnIiwiZ2VuTG9nRGVidWciLCJyZXBvcnQiLCJpc0RldiIsIkRFVl9FTlYiLCJOT09QIiwibG9nRXJyb3IiLCJnZXRBcHAiLCJyZXBvcnRlciIsImdldFNlcnZpY2UiLCJjYXRjaCIsInRyYWNlIiwidHJpbUJhY2tzbGFzaCIsInN0ciIsImluZGV4T2YiLCJzdWJzdHJpbmciLCJidWlsZFVSTCIsIm1vZHVsZSIsIm1vZGVsIiwiaWQiLCJhY3Rpb24iLCJ1cmwiLCJlbmNvZGVVUklDb21wb25lbnQiLCJmaWx0ZXIiLCJlbCIsImpvaW4iLCJjYXBpdGFsaXplRmlyc3RMZXR0ZXIiLCJjaGFyQXQiLCJ0b1VwcGVyQ2FzZSIsInNsaWNlIiwibG93ZXJGaXJzdExldHRlciIsInN0cmluZyIsInRvTG93ZXJDYXNlIiwic3RyTGVuZ3RoQ2FwIiwiTUFYX1RJVExFX0xFTkdUSCIsIlBPU1RfRklYIiwic3Vic3RyIiwiZXNjYXBlSHRtbCIsInVuc2FmZSIsInN0YXJ0QXBwIiwic3RhcnRlciIsImFkZEV2ZW50TGlzdGVuZXIiLCJleHRlbmRBcHBDb25maWciLCJjb25mIiwiY29uZjIiLCJkZWVwTWVyZ2UiLCJhYnNvcmJNb2R1bGUiLCJkZWZhdWx0Q29uZiIsIm1vZCIsInRhcmdldHMiLCJoYXNPd25Qcm9wZXJ0eSIsInNlcnZpY2VzIiwidWlzIiwid2NzIiwibWFuaWZlc3QiLCJjb250cm9sbGVycyIsIm5vdEVudiIsImRlZmluZUlmTm90RXhpc3RzIiwicmVnaXN0ZXIiLCJyZWdpc3RyeSIsIm1vdmVJdGVtIiwib2xkX2luZGV4IiwibmV3X2luZGV4IiwiaW5SYW5nZSIsIm51bSIsInNwbGljZSIsInN0cmlwUHJveHkiLCJpc1Byb3h5IiwiYXNzaWduIiwicGlwZSIsImZ1bmNzIiwicmVzdWx0IiwiZ2V0QVBJIiwiZ2V0TWFuYWdlciIsInNldE1hbmFnZXIiLCJ2IiwiTUFOQUdFUiIsImdldEpTT04iLCJmZXRjaCIsInRoZW4iLCJyZXNwb25zZSIsImpzb24iLCJ3YWl0IiwiUHJvbWlzZSIsInJlcyIsInNldFRpbWVvdXQiLCJyZWdpc3RlcldpZGdldEV2ZW50cyIsImV2ZW50cyIsImV2ZW50TmFtZSIsIm9uIiwibmF2aWdhdGUiLCJnZXRXb3JraW5nIiwic2VsZWN0IiwidmFyaWFudHNTZXQiLCJkZWYiLCJfbm90Q29tbW9uIiwiTk9UX0VOVl9UWVBFIiwiYWJzb3JiU2VydmljZXMiLCJzZXJ2IiwiZXh0ZW5kV1NDbGllbnQiLCJ3c2NOYW1lIiwid3NjT3B0aW9ucyIsImNvbm5lY3Rpb24iLCJyb3V0ZXIiLCJyb3V0ZXMiLCJtZXNzZW5nZXIiLCJyb3V0ZVR5cGUiLCJhYnNvcmJXU0MiLCJ3c0NsaWVudE5hbWUiLCJhYnNvcmJVSXMiLCJ1aSIsImFic29yYkZpZWxkcyIsIm5vdExvY2FsZSIsIl9FdmVudEVtaXR0ZXIiLCJfdGhpcyIsIl9jYWxsU3VwZXIiLCJkaWN0IiwiaGVscGVycyIsInJlc3RvcmVGcm9tU3RvcmFnZSIsIl9pbmhlcml0cyIsImZvcm1hdCIsInBhcnNlU3VicyIsInNheSIsInBocmFzZSIsInRtcGwiLCJzYXZlVG9TdG9yYWdlIiwiZW1pdCIsImxvY2FsU3RvcmFnZSIsInNldEl0ZW0iLCJnZXRJdGVtIiwidm9jYWJ1bGFyeSIsIkV2ZW50RW1pdHRlciIsIiQucHJvcCIsIiQucHJveHkiLCIkLnNldF90ZXh0IiwiJC5kZXJpdmVkIiwiVUlCb29sZWFuIiwiJC5zdGF0ZSIsIiQuZWFjaCIsIiQuZ2V0IiwiJC5iaW5kX3RoaXMiLCIkLnNldF9jbGFzcyIsIiQucmVzdF9wcm9wcyIsIiQudGVtcGxhdGVfZWZmZWN0Iiwib25DbGljayIsIlVJQnV0dG9uIiwiVUlCdXR0b25Td2l0Y2giLCJERUZBVUxUX1NUQVRVU19TVUNDRVNTIiwiTkFWSUdBVElPTl9ERUxBWV9TSE9SVCIsIk5BVklHQVRJT05fREVMQVlfTk9STUFMIiwiTkFWSUdBVElPTl9ERUxBWV9MT05HIiwiTkFWSUdBVElPTl9ERUxBWVMiLCJTSE9SVCIsIk5PUk1BTCIsIkxPTkciLCJOQVZJR0FUSU9OX0RFTEFZX0RFRkFVTFQiLCJzdGF0ZSIsIiQuc3ByZWFkX3Byb3BzIiwiVUlCdXR0b25zIiwiJC51c2VyX3ByZV9lZmZlY3QiLCJ0ZXh0IiwiJC5tdXRhYmxlX3N0YXRlIiwiJC5tdXRhdGUiLCIkLmV2ZW50IiwiJC53aW5kb3ciLCIkLnRvZ2dsZV9jbGFzcyIsIiQuYW5pbWF0aW9uIiwiJC50cmFuc2l0aW9uIiwiJC5odG1sIiwiJC5iaW5kX3ZhbHVlIiwiTGliIiwic2VlZExpYiIsIl9jbGFzc1ByaXZhdGVGaWVsZEluaXRTcGVjIiwiX2xpYiIsImltcG9ydCIsImdldENvbnRlbnQiLCJjb21wIiwibW9kZSIsImNvbnRhaW5zIiwiX2NsYXNzUHJpdmF0ZUZpZWxkR2V0IiwiYnVsayIsImYiLCJpc0VtcHR5IiwiQ09NUE9ORU5UUyIsIkZJRUxEUyIsIlZBUklBTlRTIiwiVUlUaXRsZSIsIlVJTGlzdEl0ZW0iLCJVSUxpc3RFbXB0eVBsYWNlaG9sZGVyIiwiVUlJbWFnZSIsIlVJTGlzdCIsIiQuc2V0X2F0dHJpYnV0ZSIsIlVJRW5kbGVzc0xpc3RTaW1wbGVJdGVtIiwiVUlFbmRsZXNzTGlzdEVtcHR5UGxhY2Vob2xkZXIiLCJVSUVuZGxlc3NMaXN0TmF2aWdhdGlvbiIsIlVJQnV0dG9uc1N3aXRjaGVycyIsIlVJU2ltcGxlU2VhcmNoSW5wdXQiLCJVSUVuZGxlc3NMaXN0IiwiTUVUQV9NRVRIT0RfSU5JVCIsIk1FVEFfREFUQSIsIk1FVEFfV09SS0lORyIsIk1FVEFfT1BUSU9OUyIsIm5vdEJhc2UiLCJpbnB1dCIsIl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwic2V0RGF0YSIsInNldFdvcmtpbmciLCJ3b3JraW5nIiwic2V0T3B0aW9ucyIsImluZm8iLCJzZXRDb21tb24iLCJ3aGF0IiwiYXJncyIsImdldENvbW1vbiIsImdldERhdGEiLCJnZXRPcHRpb25zIiwiZGVzdHJveSIsInJlbW92ZUV2ZW50IiwiT1BUX01PREVfSElTVE9SWSIsIk9QVF9NT0RFX0hBU0giLCJPUFRfREVGQVVMVF9DSEVDS19JTlRFUlZBTCIsIm5vdFJvdXRlciIsIl9ub3RCYXNlIiwicm9vdCIsImluaXRpYWxpemVkIiwiZGVsYXlzIiwiZGVsYXlfZGVmYXVsdCIsInNldERlbGF5cyIsInNldERlZmF1bHROYXZpZ2F0aW9uRGVsYXkiLCJkZWxheSIsImRlbGF5QXNNcyIsImdldERlZmF1bHROYXZpZ2F0aW9uRGVsYXkiLCJuYXZpZ2F0ZVdpdGhEZWxheSIsImRvQmVmb3JlIiwiX3RoaXMyIiwiaGlzdG9yeSIsImhhc2giLCJzZXRSb290IiwiY2xlYXJTbGFzaGVzIiwicGF0aCIsInJlIiwicnVsZSIsImFkZExpc3QiLCJwYXJhbSIsImkiLCJyIiwiZmx1c2giLCJpc0luaXRpYWxpemVkIiwic2V0SW5pdGlhbGl6ZWQiLCJnZXRGcmFnbWVudCIsImZyYWdtZW50IiwibG9jYXRpb24iLCJkZWNvZGVVUkkiLCJwYXRobmFtZSIsInNlYXJjaCIsIm1hdGNoIiwiaHJlZiIsImNoZWNrTG9jYXRpb24iLCJjdXJyZW50IiwiaW5pdCIsImNoZWNrIiwiaHJlZkNsaWNrIiwiZ2V0Um9vdCIsImxpc3RlbiIsImxvb3BJbnRlcnZhbCIsImNsZWFySW50ZXJ2YWwiLCJzZXRJbnRlcnZhbCIsImZhaWxCYWNrIiwiZnVsbFJFIiwicm91dGUiLCJhcHBseSIsImhvc3QiLCJyZWZyZXNoIiwidGltZW91dCIsIl90aGlzMyIsIm5ld1JvdXRlIiwiZ2V0RnVsbFJvdXRlIiwibGFzdFJvdXRlIiwicHVzaFN0YXRlIiwiZ2V0QWxsTGlua3MiLCJhbGxFbGVtZW50cyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJqIiwiYXR0cyIsImF0dHJpYnV0ZXMiLCJub2RlTmFtZSIsInJlUm91dGVFeGlzdGVkIiwiaW5pdFJlcm91dGluZyIsImdldEF0dHJpYnV0ZSIsImxpbmsiLCJfdGhpczQiLCJub3RSb3V0ZXJJbml0aWFsaXplZCIsImZ1bGxMaW5rIiwic2V0QXR0cmlidXRlIiwicHJldmVudERlZmF1bHQiLCJMT0dfUFJFRklYIiwibm90QVBJUXVldWUiLCJidXN5IiwicXVldWUiLCJidXN5U2luY2UiLCJhZnRlckVtcHR5Iiwic3RhcnQiLCJzdG9wIiwiaW50ZXJ2YWwiLCJjaGVja1F1ZXVlIiwiUVVFVUVfQ0hFQ0tfSU5URVJWQUwiLCJpc0J1c3kiLCJzZXRCdXN5IiwicnVuTmV4dCIsInNldEZyZWUiLCJhZGRUb1F1ZXVlIiwidGFzayIsInRpdGxlIiwicmVzb2x2ZSIsIk1BWF9CVVNZX1RJTUUiLCJyZWplY3QiLCJhY3Rpb25Jc1F1ZXVlZCIsInNvbWUiLCJxdWV1ZWQiLCJydW5JZk5vdFF1ZXVlZCIsIm5vdEFQSU9wdGlvbnMiLCJycHMiLCJwcm90b2NvbCIsInBvcnQiLCJub3RBUElDb25uZWN0aW9uIiwib25saW5lIiwiaW50IiwicGF1c2UiLCJyZXN1bWUiLCJpc09ubGluZSIsIm9uTGluZSIsImNoYW5nZVN0YXRlIiwiQUxMIiwiZXhpc3QiLCJjcmVhdGUiLCJwcm9wcyIsInJhdyIsImZpbHRlcmVkIiwic2VsZWN0ZWQiLCJmYWtlIiwiTUVUQV9JTlRFUkZBQ0UiLCJNRVRBX01BUF9UT19JTlRFUkZBQ0UiLCJERUZBVUxUX0FDVElPTl9QUkVGSVgiLCJPUFRfREVGQVVMVF9JTkRFWF9GSUVMRF9OQU1FX1BSSU9SSVRZIiwiREVGQVVMVF9GSUxURVIiLCJERUZBVUxUX1NFQVJDSCIsIkRFRkFVTFRfUkVUVVJOIiwiREVGQVVMVF9QQUdFX05VTUJFUiIsIkRFRkFVTFRfUEFHRV9TSVpFIiwiREVGQVVMVF9XU19ST1VURV9BQ1RJT05fU1BMSVRURVIiLCJub3RJbnRlcmZhY2UiLCJyZXR1cm4iLCJwYWdlciIsInNpemUiLCJwYWdlIiwiaW5pdEFjdGlvbnMiLCJnZXRBY3Rpb25zQ291bnQiLCJhY3Rpb25zIiwiZ2V0QWN0aW9ucyIsImFjdGlvbk5hbWUiLCJpbml0QWN0aW9uIiwiaGVhZGVycyIsImZpbGVVcGxvYWQiLCJmaWxlcyIsInJlcXVlc3QiLCJyZXF1ZXN0SFRUUCIsInJlY29yZCIsImNvbXBvc2l0ZURhdGEiLCJhY3Rpb25EYXRhIiwiZ2V0QWN0aW9uRGF0YSIsInJlcXVlc3RQYXJhbXMiLCJjb2xsZWN0UmVxdWVzdERhdGEiLCJyZXF1ZXN0UGFyYW1zRW5jb2RlZCIsImVuY29kZVJlcXVlc3QiLCJhcGlTZXJ2ZXJVUkwiLCJnZXRTZXJ2ZXJVUkwiLCJnZXRVUkwiLCJmZCIsIkZvcm1EYXRhIiwiYXBwZW5kIiwibWV0aG9kIiwiQWNjZXB0IiwicmVxdWVzdFdTIiwiV1MiLCJnZXRXU0NsaWVudCIsIm1lc3NhZ2VOYW1lIiwiZ2V0V1NSZXF1ZXN0TmFtZSIsInBheWxvYWQiLCJtZXNzYWdlIiwic2VsZWN0VHJhbnNwb3J0Iiwid3NJc1VwIiwid3MiLCJjbGllbnQiLCJ3c0NsaWVudCIsImdldE1vZGVsTmFtZSIsInBhcnNlUGFyYW1zIiwiZW5kIiwibGluZSIsImZpZWxkTmFtZSIsImxlbiIsImluZCIsInN0YXJ0U2xpY2UiLCJlbmRTbGljZSIsInBhcnNlTGluZSIsInBvc3RGaXgiLCJtb2RlbE5hbWUiLCJwIiwicmVxdWVzdERhdGEiLCJkYXRhUHJvdmlkZXJOYW1lIiwiZ2V0SUQiLCJyZXN1bHRJZCIsInByZWZpeGVzIiwicHJlIiwic2V0RmluZEJ5Iiwic2V0RmlsdGVyIiwiZmlsdGVyRGF0YSIsInJlc2V0RmlsdGVyIiwiZ2V0RmlsdGVyIiwic2V0U2VhcmNoIiwic2VhcmNoRGF0YSIsInJlc2V0U2VhcmNoIiwiZ2V0U2VhcmNoIiwic2V0U29ydGVyIiwic29ydGVyRGF0YSIsInJlc2V0U29ydGVyIiwiZ2V0U29ydGVyIiwic2V0UmV0dXJuIiwicmV0dXJuRGF0YSIsInJlc2V0UmV0dXJuIiwiZ2V0UmV0dXJuIiwic2V0UGFnZU51bWJlciIsInBhZ2VOdW1iZXIiLCJzZXRQYWdlU2l6ZSIsInBhZ2VTaXplIiwic2V0UGFnZXIiLCJpc05hTiIsInJlc2V0UGFnZXIiLCJnZXRQYWdlciIsImdldFJlY29yZCIsImdldERlZmF1bHRBc1BsYWluT2JqZWN0IiwiZmllbGRzIiwiZGVmYXVsdCIsIm5vdFJlY29yZCIsImlzUmVjb3JkIiwiaXNQcm9wZXJ0eSIsImNyZWF0ZUNvbGxlY3Rpb24iLCJpbnRlcmZhY2VVcCIsIm1hcFRvSW50ZXJmYWNlIiwibWFwVG9NZXRob2RzIiwidG9EZWZhdWx0IiwicmVjIiwiYXBwIiwibWV0aG9kcyIsIml0ZW1zIiwiY29sbGVjdGlvbiIsImFjdGlvblVwIiwic2V0QXR0ciIsInNldEF0dHJzIiwib2JqZWN0UGFydCIsImdldEF0dHIiLCJwbGFpbiIsInByeCIsImdldEF0dHJzIiwiZ2V0TWFuaWZlc3QiLCJPUFRfQ09OVFJPTExFUl9QUkVGSVgiLCJPUFRfUkVDT1JEX1BSRUZJWCIsIkRFRkFVTFRfV1NfQ0xJRU5UX05BTUUiLCJub3RBcHAiLCJpbnRlcmZhY2VzIiwiaW5pdENvbnRyb2xsZXIiLCJjdXJyZW50Q29udHJvbGxlciIsIndzYyIsIndzcyIsImluaXRNYW5pZmVzdCIsInNldEludGVyZmFjZU1hbmlmZXN0IiwiaW5pdFJvdXRlciIsImV4ZWNSb3V0ZXIiLCJyb3V0aWVJbnB1dCIsInJvdXRlQmxvY2siLCJwYXRocyIsInNjaGVtZXMiLCJjb250cm9sbGVyIiwicGF0aFNjaGVtZSIsImJpbmRDb250cm9sbGVyIiwiZ2V0SW50ZXJmYWNlTWFuaWZlc3QiLCJ1cGRhdGVJbnRlcmZhY2VzIiwiaW5pdFNlcnZpY2VzIiwiY29udHJvbGxlck5hbWUiLCJjb250cm9sbGVyUGF0aFNjaGVtZSIsImdldEN1cnJlbnRDb250cm9sbGVyIiwic2V0Q3VycmVudENvbnRyb2xsZXIiLCJjdHJsIiwib2xkQ3RybCIsImNyZWF0ZUludGVyZmFjZU1vZGVsRmFjdG9yeSIsInJlY29yZE1hbmlmZXN0IiwicmVjb3JkRGF0YSIsImNsZWFySW50ZXJmYWNlcyIsIm1hbmlmZXN0cyIsInJlY29yZE1ldGhvZHMiLCJuYW1lSW50Iiwic2V0SW50ZXJmYWNlIiwiZ2V0UmVjb3JkTmFtZSIsImdldENvbnRyb2xsZXJOYW1lIiwibW9kZWxGYWN0b3J5IiwiZ2V0SW50ZXJmYWNlcyIsInNldFdTQ2xpZW50IiwiZ2V0SW50ZXJmYWNlIiwiZ2V0TW9kZWwiLCJzZXRTZXJ2aWNlIiwic2Vydk5hbWUiLCJzZXJ2VHlwZSIsImdldENvbmZpZ1JlYWRlckZvck1vZHVsZSIsIm1vZHVsZU5hbWUiLCJtb2RDb25mUGF0aCIsInN1YlBhdGgiLCJmYWxsYmFjayIsIm1vZHVsZUNvbmZpZyIsIk9QVF9ERUZBVUxUX0FDVElPTl9OQU1FIiwiT1BUX0RFRkFVTFRfQ09OVEFJTkVSX1NFTEVDVE9SIiwiT1BUX0RFRkFVTFRfUExVUkFMX05BTUUiLCJPUFRfREVGQVVMVF9TSU5HTEVfTkFNRSIsIk9QVF9ERUZBVUxUX01PRFVMRV9OQU1FIiwiT1BUX0RFRkFVTFRfQVVUT19OQU1FIiwibm90Q29udHJvbGxlciIsInJlYWR5Iiwidmlld3MiLCJsaWJzIiwiZWxzIiwiY29udGFpbmVyU2VsZWN0b3IiLCJuYW1lcyIsInBsdXJhbCIsInNpbmdsZSIsInNldFVSTFByZWZpeCIsIm1ha2UiLCJ1aU5hbWUiLCIkZGVzdHJveSIsInNldE1vZGVsIiwic2V0TW9kZWxOYW1lIiwiZ2V0TW9kZWxJREZpZWxkTmFtZSIsInNldE1vZGVsSURGaWVsZE5hbWUiLCJzZXRSZWFkeSIsInVwZGF0ZUF1dG9OYW1lIiwiZ2V0VVJMUHJlZml4Iiwic2V0TW9kdWxlTmFtZSIsImdldE1vZHVsZU5hbWUiLCJnZXRNb2R1bGVQcmVmaXgiLCJnZXRNb2RlbFVSTCIsImdldE1vZGVsQWN0aW9uVVJMIiwic2V0TmFtZSIsImdldE5hbWUiLCJwcmVsb2FkTGliIiwiJGxpc3RBbGwiLCJlcnIiLCJvbkFmdGVyUmVuZGVyIiwiZ2V0QWN0aW9uTmFtZSIsImdldERlZmF1bHRBY3Rpb25OYW1lIiwicm91dGVyTmFtZSIsInN1YlBhcmFtcyIsInNldEN1cnJlbnRBY3Rpb24iLCJnZXRDdXJyZW50QWN0aW9uIiwiZ2V0QXBwT3B0aW9ucyIsImdldE1vZHVsZU9wdGlvbnMiLCJnZXRTZXJ2aWNlcyIsImdldENvbXBvbmVudHMiLCJnZXRSb3V0ZXIiLCJuYXZpZ2F0ZUFjdGlvbiIsIm5hdmlnYXRlTW9kdWxlQWN0aW9uIiwibmF2aWdhdGVNb2RlbEFjdGlvbiIsImdldENvbnRyb2xsZXJSb3V0ZSIsInBhcmFtc0NvdW50IiwiTU9EVUxFX05BTUUiLCJNT0RFTF9OQU1FIiwiZ2V0Q29udHJvbGxlclJvdXRlcyIsInBhcmFtc0RlZXAiLCJnZXRSb3V0ZXMiLCJQQVJBTVNfTEVOR1RIIiwiZ2V0Q29tbW9uTWVudSIsImNoaWxkQ29uc3RydWN0b3IiLCJzZWN0aW9uIiwiTEFCRUxTIiwiZ2V0TWVudSIsIlN0b3Jlcy5nZXQiLCIkLmJpbmRfY2hlY2tlZCIsIiQuc3RvcmVfbXV0YXRlIiwiJC51bnRyYWNrIiwiQ09OU1RfSURfRFVCTElDQVRFX1BPU1RGSVgiLCJPUFRfREVGQVVMVF9QQUdFX1NJWkUiLCJPUFRfREVGQVVMVF9QQUdFX05VTUJFUiIsIk9QVF9ERUZBVUxUX1BBR0VfUkFOR0UiLCJPUFRfREVGQVVMVF9TT1JUX0RJUkVDVElPTiIsIk9QVF9ERUZBVUxUX1NFQVJDSCIsIk9QVF9ERUZBVUxUX1JFVFVSTiIsIk9QVF9ERUZBVUxUX0NPTUJJTkVEIiwiT1BUX0RFRkFVTFRfQ09NQklORURfQUNUSU9OIiwiT1BUX0RFRkFVTFRfQ09VTlRfQUNUSU9OIiwiT1BUX0RFRkFVTFRfTElTVF9BQ1RJT04iLCJPUFRfREVGQVVMVF9TT1JUX0ZJRUxEIiwiT1BUX0ZJRUxEX05BTUVfUFJFX1BST0MiLCJERUZBVUxUX09QVElPTlMiLCJVSVRhYmxlIiwibGlua3MiLCJlbmRsZXNzIiwiaWRGaWVsZCIsImdldEl0ZW1JZCIsIl9pZCIsIm5vdFRhYmxlIiwicmFuZG9tIiwicmVmaW5lZCIsInBhZ2luYXRpb24iLCJjb3VudCIsInBhZ2VzIiwic3RvcmVzIiwiU3RvcmVzIiwib25Xb3JraW5nVXBkYXRlIiwib25SYXdVcGRhdGUiLCJvbkZpbHRlcmVkVXBkYXRlIiwib25SZWZpbmVkVXBkYXRlIiwib25TZWxlY3RlZFVwZGF0ZSIsIm9uU3RhdGVVcGRhdGUiLCJzZXRDb21iaW5lZEFjdGlvbk5hbWUiLCJzb3J0ZXIiLCJyZW5kZXIiLCJ1cGRhdGVEYXRhIiwicmVmaW5lRmlsdGVyZWQiLCJjbGVhclNlbGVjdGVkIiwib25TZWFyY2hDaGFuZ2UiLCJvblNvcnRlckNoYW5nZSIsIm9uRmlsdGVyQ2hhbmdlIiwiZ2V0U2VsZWN0ZWQiLCJvYmplY3QiLCJzdG9yZSIsImluZHgiLCJmaW5kSW5kZXgiLCJzZWxlY3RBbGwiLCJzZWxlY3ROb25lIiwidGFibGUiLCJ0YXJnZXRFbCIsImZpbHRlclVJIiwiZ2V0SGVscGVycyIsImdldExpbmtzIiwic2hvd1NlbGVjdCIsInNob3dTZWFyY2giLCJzaG93U29ydCIsIiRvbiIsImRldGFpbCIsImdvVG9QYWdlIiwiZ29Ub05leHQiLCJnb1RvUHJldiIsIl90aGlzNSIsInNldFN0YXRlIiwiX3RoaXM2IiwiZ2V0U3RhdGUiLCJ3aXRob3V0SW52YWxpZGF0aW9uIiwiaW52YWxpZGF0ZURhdGEiLCJnZXREZWZhdWx0UGFnZU51bWJlciIsImdldERlZmF1bHRQYWdlU2l6ZSIsImdldFNvcnRlckRpcmVjdGlvbiIsInJldCIsImNsZWFyRmlsdGVyZWREYXRhIiwiY2xlYXJSYXdEYXRhIiwiY2xlYXJSZWZpbmVkRGF0YSIsImlzTGl2ZSIsInNldFVwZGF0aW5nIiwic2V0VXBkYXRlZCIsImlmVXBkYXRpbmciLCJnZXREYXRhSW50ZXJmYWNlIiwiZmFjdG9yeSIsImdldExvYWREYXRhQWN0aW9uTmFtZSIsImdldENvbWJpbmVkQWN0aW9uTmFtZSIsImdldENvdW50QWN0aW9uTmFtZSIsImxvYWREYXRhIiwicXVlcnkiLCJtYXgiLCJnb1RvRmlyc3QiLCJnb1RvTGFzdCIsInRlc3REYXRhSXRlbSIsInN0clZhbHVlIiwiayIsInRvQ29tcCIsImdldFJvd3NDb3VudCIsIl90aGlzNyIsInVwZGF0ZVBhZ2luYXRpb24iLCJpdGVtc0NvdW50IiwiX3RoaXM4IiwiaXRlbXNGcm9tIiwicGFnZXNDb3VudCIsInBhZ2VzRnJvbSIsInBhZ2VzVG8iLCJpdGVtc1RvIiwiYWN0aXZlIiwiX3RoaXM5IiwiZnVsbCIsInByb2Nlc3NEYXRhIiwiX3RoaXMxMCIsInRoYXRGaWx0ZXIiLCJmaWx0ZXJTZWFyY2giLCJ0aGF0U29ydGVyIiwic29ydCIsIml0ZW0xIiwiaXRlbTIiLCJ0MSIsInNvcnRCeUZpZWxkIiwidDIiLCJsb2NhbGVDb21wYXJlIiwic29ydERpcmVjdGlvbiIsImxvZ2dlciIsImNoZWNrRmllbGRzTmFtZXMiLCJmaWVsZElkIiwicGF0aElkIiwicmVhZEZpZWxkVmFsdWUiLCJfdGhpczExIiwicHJlcHJvY2Vzc2VkIiwiREVGQVVMVF9DT05UQUlORVJfU0VMRUNUT1IiLCJfdWlDb21wb25lbnQiLCJXZWFrTWFwIiwiX3VpIiwibm90QWN0aW9uVUkiLCJVSUFjdGlvbkNvbnRhaW5lciIsIl9jbGFzc1ByaXZhdGVGaWVsZFNldCIsImluaXRVSSIsImdldFRhcmdldEVsIiwiY2hpbGRyZW4iLCJyZW1vdmVDaGlsZCIsImZpcnN0Q2hpbGQiLCJzZXRMb2FkaW5nIiwicmVzZXRMb2FkaW5nIiwicHJvY2Vzc1Jlc3VsdCIsInNldEZvcm1TdWNjZXNzIiwic2V0Rm9ybUVycm9ycyIsInNob3dTdWNjZXNzIiwiZm9ybSIsImVycm9ycyIsInNob3dFcnJvciIsIkhUTUxFbGVtZW50IiwicXVlcnlTZWxlY3RvciIsIm5vdEZvcm1VdGlscyIsImFkZENvbXBvbmVudCIsImFkZFZhcmlhbnRzIiwiYWRkRmllbGQiLCJhY3Rpb25GaWVsZHNJbml0Iiwic3ViRmllbGROYW1lIiwiREVGQVVMVF9GSUVMRCIsImxhYmVsIiwicGxhY2Vob2xkZXIiLCJlbmFibGVkIiwidmlzaWJsZSIsInJlcXVpcmVkIiwidmFsaWRhdGVkIiwidmFsaWQiLCJmaWVsZEluaXQiLCJtdXRhdGlvbiIsInZhcmlhbnRzU291cmNlIiwidmFyaWFudHMiLCJpbml0Rm9ybUJ5RmllbGQiLCJmb3JtRmllbGRzT3B0aW9ucyIsInN1YkZvcm1GaWVsZE5hbWUiLCJtdXRhdGlvbnMiLCJyZWFkb25seSIsInNldEZpZWxkSW52YWxpZCIsInNldEZpZWxkVmFsaWQiLCJmbmFtZSIsImlzRmllbGRWYWxpZCIsInNldEZvcm1GaWVsZEludmFsaWQiLCJmb3JtRXJyb3JzIiwiaW5wdXRTdGFydGVkIiwiZm9ybUxldmVsRXJyb3IiLCJzZXRGb3JtRmllbGRWYWxpZCIsInVwZGF0ZUZvcm1WYWxpZGF0aW9uU3RhdHVzIiwidmFsaWRhdGlvblN0YXR1cyIsInNldEZpZWxkc1Zpc2liaWxpdHkiLCJmaWVsZHNMaXN0Iiwic2V0RmllbGRWYWx1ZSIsImZpZWxkSXNWaXNpYmxlQW5kRmlsbGVkIiwiY29sbGVjdERhdGEiLCJmbGF0IiwicmVxdWlyZSQkMSIsInJlcXVpcmUkJDIiLCJyZXF1aXJlJCQzIiwiREVGQVVMVF9SVUxFUyIsIm5vdFJlYWRvbmx5IiwiZW5hYmxlIiwiZGlzYWJsZWQiLCJkaXNhYmxlIiwibm90Rm9ybVJ1bGVzIiwiX2Fzc2VydENsYXNzQnJhbmQiLCJfUlVMRVMiLCJfIiwiZXhlYyIsIm1hc3RlciIsInNsYXZlcyIsIkRFRkFVTFRfQUNUSU9OX05BTUUiLCJfdmFsaWRhdGlvblJ1bm5lciIsIl9mb3JtIiwiX2FjdGlvbiIsIl9maWVsZHMiLCJfdmFyaWFudHMiLCJfbm90Rm9ybV9icmFuZCIsIldlYWtTZXQiLCJub3RGb3JtIiwiVUlGb3JtQ29tcG9uZW50IiwiX2NsYXNzUHJpdmF0ZU1ldGhvZEluaXRTcGVjIiwiaW5pdEZvcm0iLCJpbml0TGlicyIsImluaXRGaWVsZHMiLCJpbml0VmFyaWFudHMiLCJpbml0VmFsaWRhdG9yIiwicmVJbml0IiwidXBkYXRlVUkiLCJnZXRGb3JtTWFuaWZlc3QiLCJSdW5uZXIiLCJnZXRGb3JtVmFsaWRhdG9ycyIsIl9nZXRGb3JtUHJvcHMiLCJmb3JtT3B0aW9ucyIsImdldEZvcm1PcHRpb25zIiwiZ2V0Rm9ybURhdGEiLCJpbmplY3RlZFByb3BzIiwiZ2V0Rm9ybUluamVjdGVkUHJvcHMiLCJnZXRGb3JtVGFyZ2V0RWwiLCJfYmluZFVJRXZlbnRzIiwidmFsaWRhdGVGb3JtIiwiJHNldCIsInZhbGlkYXRpb25SZXN1bHQiLCJnZXRGb3JtQWN0aW9uIiwiZ2V0UmVwb3J0IiwiY2xlYW4iLCJFUlJPUl9ERUZBVUxUIiwic3VibWl0Iiwic2V0Rm9ybUFjdGlvbiIsImdldFZhcmlhbnQiLCJsaWIiLCJmaW5kIiwiX21pc3NpbmdPdmVycmlkZVdhcm5pbmciLCJ1cGRhdGVGaWVsZCIsImV2IiwiX2JpbmRNYXN0ZXJTbGF2ZUV2ZW50cyIsIm1hc3RlcnMiLCJydWxlcyIsInJ1bGVOYW1lIiwicnVsZVNsYXZlcyIsIl9hZGRNYXN0ZXJTbGF2ZUV2ZW50cyIsIl9leGVjU2xhdmVSdWxlIiwiY21kIiwic2xhdmVGaWVsZCIsIkZvcm1IZWxwZXJzIiwibG9hZGluZyIsImRlc2NyaXB0aW9uIiwibWlzc2luZyIsIkRFRkFVTFRfRk9STV9TRVRfTkFNRSIsIl9mb3JtU2V0Q29tcG9uZW50IiwiX2Zvcm1Db21wb25lbnQiLCJfZnJhbWUiLCJfbm90Rm9ybVNldF9icmFuZCIsIm5vdEZvcm1TZXQiLCJmb3JtQ29tcG9uZW50IiwiZm9ybVNldENvbXBvbmVudCIsIlVJRm9ybVNldENvbXBvbmVudCIsInNob3dNb2RlcyIsInNldEZvcm1Nb2RlIiwiZ2V0RnJhbWVUYXJnZXRFbCIsIl9nZXRGcmFtZVByb3BzIiwidXBkYXRlRm9ybSIsImlzTW9kZUV4aXN0cyIsImdldEZpcnN0TW9kZSIsInVwZGF0ZUZvcm1Nb2RlSW5VSSIsImdldEZvcm1Nb2RlIiwiZGVzdHJveUZvcm0iLCJyZW5kZXJGb3JtIiwiZm9ybUNvbmZpZyIsImdldEZvcm1Db25maWciLCJjaGFuZ2VNb2RlIiwiY29udGFpbmVyRWwiLCJsYXN0Q2hpbGQiLCJkZXN0cm95RnJhbWUiLCJmb3JtcyIsIm5vdEJyZWFkY3J1bWJzIiwiVUlDb25zdHJ1Y3RvciIsImdldEJyZWFkY3J1bWJzIiwiZ28iLCJzZXRIZWFkIiwiaGVhZCIsInNldFRhaWwiLCJ0YWlsIiwiY3J1bWJzIiwiVUlCcmVhZGNydW1icyIsIk1lbnUiLCJoaWRlIiwic2V0QXBwIiwiZ2V0T3B0aW9uc1BhdGhUbyIsImlzRGlyZWN0TmF2aWdhdGlvbiIsImRpcmVjdE5hdmlnYXRpb24iLCJicmFuZCIsInNlY3Rpb25zIiwidGFyZ2V0U2VsZWN0b3IiLCJ0b2dnbGVTZWxlY3RvciIsIm9wZW4iLCJnZXRDb21wb25lbnQiLCJpbml0RmllbGQiLCJERUZBVUxUIiwic29ydExpc3QiLCJwcmlvcml0eSIsInJlbW92ZUR1YmxpY2F0ZXMiLCJwcmVwYXJlRGF0YSIsInNlY3Rpb25UaXRsZSIsIm1lbnUiLCJ1cGRhdGVJbmRpY2F0b3IiLCJzZWN0aW9uSWQiLCJpdGVtSWQiLCJ1cGRhdGVTZWN0aW9uIiwiaW5kaWNhdG9yIiwidXBkYXRlSXRlbSIsInVwZGF0ZVRhZyIsInRhZyIsInVwZGF0ZVNlY3Rpb25UYWciLCJ1cGRhdGVJdGVtVGFnIiwidXBkYXRlU2VjdGlvbkl0ZW1zIiwib2xkTGlzdCIsImlzVG91Y2giLCJnZXRTZWN0aW9uQ29tcG9uZW50IiwiX01lbnUiLCJ1cmxzIiwic2hvcnQiLCJVSUljb24iLCJTaWRlTWVudVN0YXRlIiwiVFlQRSIsIm5vdFNpZGVNZW51IiwiY3JlYXRlVUkiLCJtb3VudCIsIlVJU2lkZU1lbnUiLCJpbml0U2l6ZVJlc3BvbnNlIiwidXBkYXRlTWVudUFjdGl2ZUl0ZW0iLCJiaW5kVG9nZ2xlIiwiaXRlbUlzQWN0aXZlIiwiaXRlbVVSTCIsInVwZGF0ZU1lbnUiLCJsYXN0TG9jYXRpb24iLCJuYXYiLCJhc2lkZSIsIm1haW4iLCJyZXNpemVBc2lkZUFuZE1haW4iLCJyZXNpemVNYWluIiwic2hvdyIsInN0eWxlIiwiZGlzcGxheSIsIm1hcmdpbkxlZnQiLCJyZWN0IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiaGVpZ2h0Iiwid2lkdGgiLCJsZWZ0IiwicmVzaXplQXNpZGUiLCJpbm5lckhlaWdodCIsIm1hcmdpblRvcCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJ0b2dnbGUiLCJpc09wZW4iLCJfbm90U2lkZU1lbnUiLCJjbG9zZWQiLCJTaWRlTWVudVN0b3JlIiwiU2lkZU1lbnUiLCJub3RUb3BNZW51IiwiVUlOYXZiYXJUb3AiLCJzZXRCdXJnZXJTdGF0ZSIsIm1lbnVDbG9zZWQiLCJfbm90VG9wTWVudSIsInBsYWNlIiwiREVGQVVMVF9UUkFTRk9STUVSIiwiQUNUSU9OIiwiVElUTEUiLCJkYXRhUHJvdmlkZXIiLCJnb0JhY2siLCJfY2xhc3MiLCJzZXRCcmVhZGNydW1icyIsInByZWxvYWRWYXJpYW50cyIsIiRkZXN0cm95VUkiLCJyZXN1bHRUcmFuc2Zvcm1lciIsImdldENvbnRhaW5lcklubmVyRWxlbWVudCIsInNob3dFcnJvck1lc3NhZ2UiLCJQUkVMT0FEQUJMRSIsIkNSVURWYXJpYW50c1ByZWxvYWRlciIsInByZWxvYWQiLCJsaWJQcm9wcyIsInByb21zIiwiTW9kZWwiLCJyZXN1bHRzIiwicHJvcE5hbWUiLCJyZXN1bHRzTGlzdCIsIkRFRkFVTFRfQUNUSU9OIiwibm90Q1JVRFJvdXRlciIsImV4dHJhY3RBY3Rpb25OYW1lIiwiYWN0aW9uSGFuZGxlckV4aXN0cyIsInJ1bkFjdGlvbiIsIkNSVURNZXNzYWdlIiwic2V0VUkiLCJVSUVycm9yIiwic3VjY2VzcyIsIlVJU3VjY2VzcyIsIkRFRkFVTFRfQlJFQURDUlVNQl9UQUlMIiwiQ1JVREdlbmVyaWNBY3Rpb24iLCJwcmVzZXQiLCJnZXRCcmVhZGNydW1ic1RhaWwiLCJicmVhZGNydW1ic1RhaWxzIiwiZGVhZnVsdEJyZWFkY3J1bWJzVGFpbCIsImdldElkRmllbGQiLCJsb2FkRGF0YVF1ZXJ5IiwiZ2V0TW9kZWxBY3Rpb25OYW1lIiwiTU9ERUxfQUNUSU9OX0dFVCIsInByZXNldEJyZWFkY3J1bWJzIiwiZ2V0VGl0bGUiLCJjb250b2xsZXIiLCJnZXRJdGVtVGl0bGUiLCJicmVhZGNydW1ic1RhaWxUZW1wbGF0ZSIsImlzUmVzcG9uc2VCYWQiLCJnZXRWYWxpZGF0b3JzIiwicHJlcGFyZVVJT3B0aW9ucyIsImRldGFpbHNBY3Rpb25OYW1lIiwidmFsaWRhdG9ycyIsImluamVjdGVkIiwiVFJBTlNGT1JNRVIiLCJnZXRVSSIsInNldFVJTG9hZGluZyIsInNldFVJTG9hZGVkIiwic2V0VUlFcnJvciIsImJpbmRVSUV2ZW50cyIsImJpbmRVSUV2ZW50IiwiaXNVSVJlbmRlcmVkIiwidHdlYWtVSU9wdGlvbnMiLCJ1aUNvbXBvbmVudCIsInJlbmRlckxvYWRpbmdTY3JlZW4iLCJyZW1vdmVMb2FkaW5nU2NyZWVuIiwiZ29CYWNrQWZ0ZXJEZWxheSIsIk5BVklHQVRJT05fREVMQVkiLCJDUlVER2VuZXJpY0FjdGlvbkNyZWF0ZSIsIl9DUlVER2VuZXJpY0FjdGlvbiIsImRlZkRhdGEiLCJjcmVhdGVEZWZhdWx0Iiwib25BY3Rpb25TdWJtaXQiLCJDUlVEQWN0aW9uQ3JlYXRlIiwiX0NSVURHZW5lcmljQWN0aW9uQ3JlIiwiQ1JVREdlbmVyaWNBY3Rpb25SZWFkIiwiQ1JVREFjdGlvbkRldGFpbHMiLCJfQ1JVREdlbmVyaWNBY3Rpb25SZWEiLCJDUlVER2VuZXJpY0FjdGlvblVwZGF0ZSIsIk1PREVMX0FDVElPTl9QVVQiLCJDUlVEQWN0aW9uVXBkYXRlIiwiX0NSVURHZW5lcmljQWN0aW9uVXBkIiwiTU9ERUxfQUNUSU9OIiwiQ1JVREFjdGlvbkRlbGV0ZSIsImxvYWRlckFjdGl2ZSIsImxvYWRlclN0eWxlIiwibG9hZGVyVGl0bGUiLCJjb250YWluZXIiLCJjb25maXJtIiwiZGVsZXRlQWN0aW9uTmFtZSIsImdvTGlzdCIsIkNSVURBY3Rpb25MaXN0IiwidHdlYWtBY3Rpb25zTGlzdCIsIkFDVElPTlNfTElTVCIsImdvQ3JlYXRlIiwiY3JlYXRlQWN0aW9uc0J1dHRvbnMiLCJwcmVwZW5kIiwib25seUljb25zIiwiQUNUSU9OUyIsImRldGFpbHMiLCJnb0RldGFpbHMiLCJpY29uIiwiZ29VcGRhdGUiLCJjb2xvciIsImRlbGV0ZSIsImdvRGVsZXRlIiwiYWN0aW9uc0J1dHRvbnMiLCJwcmVwYXJlT3B0aW9ucyIsIkRFRkFVTFRfT1BUSU9OU19UQUJMRSIsImludGVyZmFjZSIsImNvbWJpbmVkIiwiVEFCTEVfT1BUSU9OUyIsIm9wdFZhbCIsIkJSRUFEQ1JVTUJTIiwiVElUTEVfRklFTERTX1BSSU9SSVRZIiwiTE9BRElOR19TQ1JFRU5fVUlfTkFNRSIsIl9hY3Rpb25zIiwiX3JvdXRlciIsIl9wcmVsb2FkZXIiLCJub3RDUlVEIiwiX25vdENvbnRyb2xsZXIiLCJwcmVsb2FkZXIiLCJDUlVEQWN0aW9ucyIsIkNSVURSb3V0ZXIiLCJidWlsZEZyYW1lIiwic2V0VmFsaWRhdG9ycyIsIk1vZHVsZU5hbWVQYXJ0cyIsInNwbGl0IiwiTW9kdWxlTmFtZSIsInNlcnZpY2VOYW1lIiwiQ29tbW9uTW9kdWxlU2VydmljZSIsImF1Z21lbnRWYWxpZGF0b3JzIiwibmV3SGVhZCIsInN0YXJ0V2hlbldTQ2xpZW50UmVhZHkiLCJpc0Nvbm5lY3RlZCIsIm9uY2UiLCJXU19DSEVDS19JTlRFUlZBTCIsImJhY2tUb0xpc3QiLCJsaW5rQmFja1RvTGlzdCIsImFmdGVyQWN0aW9uIiwibmF2QmFjayIsImJhY2siLCJjcmVhdGVFbGVtZW50IiwiZ2V0RnJhbWVDbGFzc2VzIiwiVE9QX0NMQVNTIiwiYXBwZW5kQ2hpbGQiLCJNQUlOX0NMQVNTIiwiYm90dG9tIiwiQk9UVE9NX0NMQVNTIiwiZ2V0Q29udGFpbmVyVG9wRWxlbWVudCIsImdldENvbnRhaW5lckJvdHRvbUVsZW1lbnQiLCJnZXRUaXRsZUZyb21MaWIiLCJnZXRQcmVsb2FkZWRWYXJpYW50VGl0bGUiLCJnZXRQcmVsb2FkZWRWYXJpYW50cyIsImdvQWZ0ZXJEZWxheSIsImFjdGlvblVJIiwiZGVzdHJveVVJQnlOYW1lIiwic2hvd1N1Y2Nlc3NNZXNzYWdlIiwic2luZ2xlVUkiLCJnZXRBY3Rpb25VSSIsImNyZWF0ZUxvYWRlclVJIiwiVUlMb2FkZXIiLCJpdGVtQ3VzdG9tUHJvcHMiLCJST1VURV9MSVNUIiwibm90Q1JVRFBsYWluUm91dGVyIiwiREVGQVVMVF9ST1VURSIsIm5vdENSVURSb3V0ZXJTd2l0Y2giLCJpc1JvdXRlVmFyaWFudFZhbGlkIiwicm91dGVzVmFyaWFudHMiLCJkZXRlcm1pbmVSb3V0ZSIsInJvdXRlckFjdGlvbiIsImVtcHR5UmVzdWx0Iiwic2tpcCIsIm5vdFNlcnZpY2VNb2RlbFNlYXJjaCIsImdldFNlYXJjaFJvdXRlTmFtZSIsImdldERhdGFMb2FkUm91dGVOYW1lIiwidHJhbnNmb3JtU2VhcmNoUmVzdWx0IiwidXNlcm5hbWUiLCJ0cmFuc2Zvcm1TZWxlY3RlZFJlc3VsdCIsInNlYXJjaEJ5VGVybSIsInRlcm0iLCJvcGVuU2VsZWN0b3IiLCJVSUdlbmVyaWNTZWxlY3RvciIsImNvbnNvbGUiLCJ1bm1vdW50IiwibmNDUlVEIiwiTG9jYWxlIiwiRWxlbWVudHMiLCJGcmFtZSIsImNvbXBvbmVudHNTZXROYW1lIiwiY29tcG9uZW50TmFtZSJdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsV0FBZSxJQUFJOztDQ0FuQjtDQUNBO0NBQ08sSUFBSSxRQUFRLEdBQUcsS0FBSyxDQUFDLE9BQU87Q0FDNUIsSUFBSSxVQUFVLEdBQUcsS0FBSyxDQUFDLElBQUk7Q0FFM0IsSUFBSSxlQUFlLEdBQUcsTUFBTSxDQUFDLGNBQWM7Q0FDM0MsSUFBSSxjQUFjLEdBQUcsTUFBTSxDQUFDLHdCQUF3QjtDQUNwRCxJ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QUFFOztDQUVsQixFQUFFLE1BQU0sSUFBSSxHQUFHLEtBQUssQ0FBQyxLQUFLLEVBQUUsSUFBSSxHQUFHLEVBQUUsRUFBRSxFQUFFLEVBQUUsS0FBSyxDQUFDO0NBQ2pELEVBQUUsSUFBSSxLQUFLLENBQUMsTUFBTSxLQUFLLENBQUMsSUFBSSxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFO0NBQzdDO0NBQ0EsR0FBR0MsMEJBQTRCLEVBQUU7Q0FDakMsR0FBRyxNQUFNLElBQUksS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7Q0FDL0I7Q0FDQSxHQUFHLE1BQU0sS0FBSyxHQUFHLEtBQUssQ0FBQyxNQUFNLEdBQUcsRUFBRSxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQztDQUMzRSxHQUFHLE1BQU0sTUFBTSxHQUFHLEtBQUssQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDLE1BQU07O0NBRTdDLEdBQUcsSUFBSSxRQUFRLEdBQUcsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksS0FBSyxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQztDQUNwRSxHQUFHLElBQUksTUFBTSxHQUFHLENBQUMsRUFBRSxRQUFRLElBQUksQ0FBQyxXQUFXLEVBQUUsTUFBTSxDQUFDLEtBQUssQ0FBQzs7Q0FFMUQsR0FBR0EsMEJBQTRCLENBQUMsUUFBUSxDQUFDO0NBQ3pDOztDQUVBLEVBQUUsT0FBTyxJQUFJO0NBQ2I7O0NBRUEsQ0FBQyxPQUFPLEtBQUssQ0FBQyxLQUFLLEVBQUUsSUFBSSxHQUFHLEVBQUUsRUFBRSxFQUFFLEVBQUUsS0FBSyxDQUFDO0NBQzFDOztDQUVBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBLFNBQVMsS0FBSyxDQUFDLEtBQUssRUFBRSxNQUFNLEVBQUUsSUFB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bEUsT0FBTyxDQUFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUMzQ3ZCLE9BQU1tRSxNQUFNLEdBQUc7R0FBRXh1QyxNQUFNO0dBQUVxTyxHQUFHO0NBQUVWLGFBQUFBO0NBQVU7QUFDeEMsT0FBTXBWLFFBQVEsR0FBR2syQztBQUVYLE9BQUE7R0FBRS9yQyxTQUFTO0dBQUV3UCxVQUFVO0dBQUVDLE1BQU07R0FBRUMsUUFBUTtDQUFFc2lCLEVBQUFBO0NBQWEsQ0FBQyxHQUFHZ2E7Q0FFbEU3MkMsTUFBTSxDQUFDaUssSUFBSSxDQUFDMnNDLFFBQVEsQ0FBQyxDQUFDanpDLE9BQU8sQ0FBQyxVQUFDbXpDLGlCQUFpQixFQUFLO0NBQ2pEOTJDLEVBQUFBLE1BQU0sQ0FBQ2lLLElBQUksQ0FBQzJzQyxRQUFRLENBQUNFLGlCQUFpQixDQUFDLENBQUMsQ0FBQ256QyxPQUFPLENBQUMsVUFBQ296QyxhQUFhLEVBQUs7Q0FDaEVGLElBQUFBLGNBQWtCLENBQUMvWixZQUFZLENBQzNCaWEsYUFBYSxFQUNiSCxRQUFRLENBQUNFLGlCQUFpQixDQUFDLENBQUNDLGFBQWEsQ0FDN0MsQ0FBQztDQUNMLEdBQUMsQ0FBQztDQUNOLENBQUMsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsiLCJ4X2dvb2dsZV9pZ25vcmVMaXN0IjpbMCwxLDIsMyw0LDUsNiw3LDgsOSwxMCwxMSwxMiwxMywxNCwxNSwxNiwxNywxOCwxOSwyMCwyMSwyMiwyMywyNCwyNSwyNiwyNywyOCwyOSwzMCwzMSwzMiwzMywzNCwzNSwzNiwzNywzOCwzOSw0MCw0MSw0Miw0Myw0NCw0NSw0Niw0Nyw0OCw0OSw1MCw1MSw1Miw1Myw1NCw2MCw2Miw2Myw2NCwxMDUsMTA2LDEwNywxMDgsMTA5LDE3NywxNzgsMTc5LDE4MCwxODEsMTgyLDE4MywxODQsMTg1LDE4Nl19
