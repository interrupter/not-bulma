section(id="examples" class="section")
  h1(class="title") Формы - notForm
  h2( class="subtitle") класс интегратор связывает UI, приложение и валидацию
  div( class="box")
    h3( class="title") notForm
    h4(class="subtitle") как создать
    div(class="block")
      pre
        | new notBulma.Frame.notForm({
        |   name: string = 'Default',       //название формы
        |   options: object = {             //опции компонента
        |     model: string = undefined,    //название модели данных
        |     manifest: object = undefined, //манифест модели
        |     action: string,               //название метода интерфейса/модели
        |     autoInit: boolean = true,     //инициализировать ресурсы для формы при создании класса
        |     autoRender: boolean = true,   //отрисовать форму при создании класса
        |     variants: object = undefined, //библиотека вариантов для списков выбора. variants[field.variantsSource] = [{id:string|number, title: string}]
        |     target: string = '.form',     //селектор для поиска элемента в который нужно вставить форму
        |     validators: object = {},      //библиотека валидаторов
        |     ui: object = {},              //опции UIForm
        |     fields: array[string] = [],   //построчная схема полей формы
        |   },
        |   working: object = {},          //рабочее состояние класса, наследие notBase 
        |   data: object = {},             //данные для инициализации
        |   ui: SvelteComponent = UIFormComponent,  // UI для формы, совместимый по интерфейсу с UIForm
        | });
      | Основным способом работы с этим классом является создание специализированных классов форм на его основе.
      | Но он может быть использован и напрямую.
    h3( class="title") Методы
    h4(class="subtitle") что можно вызывать
    div(class="block content")
      dl
        dt
          strong initForm(): void
        dd инициализирует форму, её ресурсы и отрисовывает с учетом опций autoInit, autoRender
        dt
          strong initLibs(): void
        dd инициализирует ресурсы: поля, варианты, валидаторы
        dt
          strong reInit(): void
        dd заново инициализирует ресурсы, обновляет UI, устанавливает статус loading = false
        dt
          strong initFields(): void
        dd инициализирует библиотеку полей из манифеста, получаемого getFormManifest
        dt
          strong initVariants(): void
        dd инициализирует библиотеку вариантов из опций
        dt
          strong initValidator(): void
        dd инициализирует валидатор для формы, использует getFormValidators для получения библиотеки валидаторов
        dt
          strong initUI(): void
        dd инициализирует UI, устанавливает обработчики событий
        dt
          strong updateUI(): void
        dd обновляет UI props
        dt
          strong validateForm(): Promise undefined
        dd валидирует данные формы, передаёт результат в updateFormValidationStatus
        dt
          strong submit(data: object): void
        dd вызывет событие submit с указанными данными
        dt
          strong reject(): void
        dd вызывет событие reject
        dt
          strong setLoading(): void
        dd вызывет событие loading, устанавливает состояние UI loading = true
        dt
          strong resetLoading(): void
        dd вызывет событие loaded, устанавливает состояние UI loading = false
        dt
          strong destroy(): void
        dd вызывет событие destroy, удаляет ссылки на различные ресурсы
        dt
          strong getName(): string
        dd возвращает название формы, ${options.name}Form
        dt
          strong getFormAction(): string
        dd возвращает название метода манифеста/модели
        dt
          strong processResult(result: object): boolean
        dd
          | обрабатывает ответ от сервера, 
          | если result.status === 'ok', то вызывает setFormSuccess, возвращает true,
          | если result.status !== 'ok', то вызывает setFormErrors, возвращает false.
        dt
          strong setFormSuccess(): void
        dd устанавливает UI в состояние успешного завершения работы с формой, генерирует событие success
        dt
          strong setFormErrors(): void
        dd обновляет UI в соотвествии с результатами проверки формы/отчета об ошибках, генерирует событие error
        dt
          strong getVariant(name:string, id: string|number): object | null
        dd возвращает элемент из словаря вариантов
        dt
          strong getFormTargetEl(): HTMLElement
        dd возвращает элемент страницы для вставки в него формы. Возможно переопределение в потомках.
        dt
          strong getFormValidators(): object
        dd возвращает библиотеку валидаторов, подробнее в not-validation. Возможно переопределение в потомках.
        dt
          strong getFormManifest(): object
        dd возвращает манифест интерфейса (UI и сетевого для обращения к серверу). Возможно переопределение в потомках.
        dt
          strong getFormData(): object
        dd возвращает исходные данные формы или сохранённые после вызова collectData, атомарные изменения не отражаются. Возможно переопределение в потомках.
        dt
          strong getFormOptions(): {ui: object, fields: array[string]}
        dd опции UI формы. Возможно переопределение в потомках.
        dt
          strong collectData(): object
        dd собирает данные из UI. Возможно переопределение в потомках.
    h3( class="title") События
    h4(class="subtitle") что можно слушать
    div(class="block content")
      dl
        dt
          strong change
        dd {detail: {field: string, value: any}} - изменение значения поля
        dt
          strong submit
        dd data: object - нажатие кнопки отправить, передаются данные формы
        dt
          strong reject
        dd нажатие кнопки отмена, ничего не передаётся в параметрах
        dt
          strong loading
        dd статус формы изменился на ожидание данных
        dt
          strong loaded
        dd статус формы изменился на активный
        dt
          strong success
        dd форма успешно заполнена
        dt
          strong error
        dd status: object = {form:Array[string], fields: {[fieldname:string]:Array[string]}} - в форме есть ошибки
        dt
          strong destroy
        dd форма уничтожается
    h3(class="title") Пример валидатора модели
    h4(class="subtitle") общий вариант
    div(class="block content")
      pre
        include ../../js/forms/simple.validators.js
