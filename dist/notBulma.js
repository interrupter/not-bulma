var notBulma = (function (exports, path$1, buffer, fs, https, http) {
	'use strict';

	function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

	var path__default = /*#__PURE__*/_interopDefaultLegacy(path$1);
	var buffer__default = /*#__PURE__*/_interopDefaultLegacy(buffer);
	var fs__default = /*#__PURE__*/_interopDefaultLegacy(fs);
	var https__default = /*#__PURE__*/_interopDefaultLegacy(https);
	var http__default = /*#__PURE__*/_interopDefaultLegacy(http);

	var Links = /*#__PURE__*/Object.freeze({
		__proto__: null,
		get UILink () { return Ui_link; },
		get UILinks () { return Ui_links; }
	});
	var Buttons = /*#__PURE__*/Object.freeze({
		__proto__: null,
		get UIButton () { return Ui_button; },
		get UIButtonsRow () { return Ui_buttons_row; },
		get UIButtons () { return Ui_buttons; }
	});
	var Elements = /*#__PURE__*/Object.freeze({
		__proto__: null,
		get UIBooleans () { return Ui_booleans; },
		get UIIndicator () { return Ui_indicator; },
		get UIProgress () { return Ui_progress; },
		get UITag () { return Ui_tag$1; },
		get UIUserCard () { return Ui_user_card; },
		get UITitle () { return Ui_title; }
	});
	var Images = /*#__PURE__*/Object.freeze({
		__proto__: null,
		get UIImages () { return Ui_images; }
	});

	var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

	function commonjsRequire () {
		throw new Error('Dynamic requires are not currently supported by rollup-plugin-commonjs');
	}

	function createCommonjsModule(fn, module) {
		return module = { exports: {} }, fn(module, module.exports), module.exports;
	}

	var check = function (it) {
	  return it && it.Math == Math && it;
	};

	// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
	var global_1 =
	  // eslint-disable-next-line es/no-global-this -- safe
	  check(typeof globalThis == 'object' && globalThis) ||
	  check(typeof window == 'object' && window) ||
	  // eslint-disable-next-line no-restricted-globals -- safe
	  check(typeof self == 'object' && self) ||
	  check(typeof commonjsGlobal == 'object' && commonjsGlobal) ||
	  // eslint-disable-next-line no-new-func -- fallback
	  (function () { return this; })() || Function('return this')();

	// eslint-disable-next-line es/no-object-defineproperty -- safe
	var defineProperty$7 = Object.defineProperty;

	var setGlobal = function (key, value) {
	  try {
	    defineProperty$7(global_1, key, { value: value, configurable: true, writable: true });
	  } catch (error) {
	    global_1[key] = value;
	  } return value;
	};

	var SHARED = '__core-js_shared__';
	var store$1 = global_1[SHARED] || setGlobal(SHARED, {});

	var sharedStore = store$1;

	var shared = createCommonjsModule(function (module) {
	(module.exports = function (key, value) {
	  return sharedStore[key] || (sharedStore[key] = value !== undefined ? value : {});
	})('versions', []).push({
	  version: '3.20.2',
	  mode: 'global',
	  copyright: 'Â© 2022 Denis Pushkarev (zloirock.ru)'
	});
	});

	var FunctionPrototype$3 = Function.prototype;
	var bind$4 = FunctionPrototype$3.bind;
	var call$2 = FunctionPrototype$3.call;
	var uncurryThis = bind$4 && bind$4.bind(call$2, call$2);

	var functionUncurryThis = bind$4 ? function (fn) {
	  return fn && uncurryThis(fn);
	} : function (fn) {
	  return fn && function () {
	    return call$2.apply(fn, arguments);
	  };
	};

	var TypeError$j = global_1.TypeError;

	// `RequireObjectCoercible` abstract operation
	// https://tc39.es/ecma262/#sec-requireobjectcoercible
	var requireObjectCoercible = function (it) {
	  if (it == undefined) throw TypeError$j("Can't call method on " + it);
	  return it;
	};

	var Object$5 = global_1.Object;

	// `ToObject` abstract operation
	// https://tc39.es/ecma262/#sec-toobject
	var toObject = function (argument) {
	  return Object$5(requireObjectCoercible(argument));
	};

	var hasOwnProperty = functionUncurryThis({}.hasOwnProperty);

	// `HasOwnProperty` abstract operation
	// https://tc39.es/ecma262/#sec-hasownproperty
	var hasOwnProperty_1 = Object.hasOwn || function hasOwn(it, key) {
	  return hasOwnProperty(toObject(it), key);
	};

	var id$1 = 0;
	var postfix = Math.random();
	var toString$1 = functionUncurryThis(1.0.toString);

	var uid = function (key) {
	  return 'Symbol(' + (key === undefined ? '' : key) + ')_' + toString$1(++id$1 + postfix, 36);
	};

	// `IsCallable` abstract operation
	// https://tc39.es/ecma262/#sec-iscallable
	var isCallable = function (argument) {
	  return typeof argument == 'function';
	};

	var aFunction = function (argument) {
	  return isCallable(argument) ? argument : undefined;
	};

	var getBuiltIn = function (namespace, method) {
	  return arguments.length < 2 ? aFunction(global_1[namespace]) : global_1[namespace] && global_1[namespace][method];
	};

	var engineUserAgent = getBuiltIn('navigator', 'userAgent') || '';

	var process$4 = global_1.process;
	var Deno = global_1.Deno;
	var versions = process$4 && process$4.versions || Deno && Deno.version;
	var v8 = versions && versions.v8;
	var match, version;

	if (v8) {
	  match = v8.split('.');
	  // in old Chrome, versions of V8 isn't V8 = Chrome / 10
	  // but their correct versions are not interesting for us
	  version = match[0] > 0 && match[0] < 4 ? 1 : +(match[0] + match[1]);
	}

	// BrowserFS NodeJS `process` polyfill incorrectly set `.v8` to `0.0`
	// so check `userAgent` even if `.v8` exists, but 0
	if (!version && engineUserAgent) {
	  match = engineUserAgent.match(/Edge\/(\d+)/);
	  if (!match || match[1] >= 74) {
	    match = engineUserAgent.match(/Chrome\/(\d+)/);
	    if (match) version = +match[1];
	  }
	}

	var engineV8Version = version;

	var fails = function (exec) {
	  try {
	    return !!exec();
	  } catch (error) {
	    return true;
	  }
	};

	/* eslint-disable es/no-symbol -- required for testing */



	// eslint-disable-next-line es/no-object-getownpropertysymbols -- required for testing
	var nativeSymbol = !!Object.getOwnPropertySymbols && !fails(function () {
	  var symbol = Symbol();
	  // Chrome 38 Symbol has incorrect toString conversion
	  // `get-own-property-symbols` polyfill symbols converted to object are not Symbol instances
	  return !String(symbol) || !(Object(symbol) instanceof Symbol) ||
	    // Chrome 38-40 symbols are not inherited from DOM collections prototypes to instances
	    !Symbol.sham && engineV8Version && engineV8Version < 41;
	});

	/* eslint-disable es/no-symbol -- required for testing */


	var useSymbolAsUid = nativeSymbol
	  && !Symbol.sham
	  && typeof Symbol.iterator == 'symbol';

	var WellKnownSymbolsStore$1 = shared('wks');
	var Symbol$1 = global_1.Symbol;
	var symbolFor = Symbol$1 && Symbol$1['for'];
	var createWellKnownSymbol = useSymbolAsUid ? Symbol$1 : Symbol$1 && Symbol$1.withoutSetter || uid;

	var wellKnownSymbol = function (name) {
	  if (!hasOwnProperty_1(WellKnownSymbolsStore$1, name) || !(nativeSymbol || typeof WellKnownSymbolsStore$1[name] == 'string')) {
	    var description = 'Symbol.' + name;
	    if (nativeSymbol && hasOwnProperty_1(Symbol$1, name)) {
	      WellKnownSymbolsStore$1[name] = Symbol$1[name];
	    } else if (useSymbolAsUid && symbolFor) {
	      WellKnownSymbolsStore$1[name] = symbolFor(description);
	    } else {
	      WellKnownSymbolsStore$1[name] = createWellKnownSymbol(description);
	    }
	  } return WellKnownSymbolsStore$1[name];
	};

	var TO_STRING_TAG$3 = wellKnownSymbol('toStringTag');
	var test$1 = {};

	test$1[TO_STRING_TAG$3] = 'z';

	var toStringTagSupport = String(test$1) === '[object z]';

	// Detect IE8's incomplete defineProperty implementation
	var descriptors = !fails(function () {
	  // eslint-disable-next-line es/no-object-defineproperty -- required for testing
	  return Object.defineProperty({}, 1, { get: function () { return 7; } })[1] != 7;
	});

	var isObject = function (it) {
	  return typeof it == 'object' ? it !== null : isCallable(it);
	};

	var document$3 = global_1.document;
	// typeof document.createElement is 'object' in old IE
	var EXISTS$1 = isObject(document$3) && isObject(document$3.createElement);

	var documentCreateElement = function (it) {
	  return EXISTS$1 ? document$3.createElement(it) : {};
	};

	// Thank's IE8 for his funny defineProperty
	var ie8DomDefine = !descriptors && !fails(function () {
	  // eslint-disable-next-line es/no-object-defineproperty -- required for testing
	  return Object.defineProperty(documentCreateElement('div'), 'a', {
	    get: function () { return 7; }
	  }).a != 7;
	});

	// V8 ~ Chrome 36-
	// https://bugs.chromium.org/p/v8/issues/detail?id=3334
	var v8PrototypeDefineBug = descriptors && fails(function () {
	  // eslint-disable-next-line es/no-object-defineproperty -- required for testing
	  return Object.defineProperty(function () { /* empty */ }, 'prototype', {
	    value: 42,
	    writable: false
	  }).prototype != 42;
	});

	var String$5 = global_1.String;
	var TypeError$i = global_1.TypeError;

	// `Assert: Type(argument) is Object`
	var anObject = function (argument) {
	  if (isObject(argument)) return argument;
	  throw TypeError$i(String$5(argument) + ' is not an object');
	};

	var call$1 = Function.prototype.call;

	var functionCall = call$1.bind ? call$1.bind(call$1) : function () {
	  return call$1.apply(call$1, arguments);
	};

	var objectIsPrototypeOf = functionUncurryThis({}.isPrototypeOf);

	var Object$4 = global_1.Object;

	var isSymbol = useSymbolAsUid ? function (it) {
	  return typeof it == 'symbol';
	} : function (it) {
	  var $Symbol = getBuiltIn('Symbol');
	  return isCallable($Symbol) && objectIsPrototypeOf($Symbol.prototype, Object$4(it));
	};

	var String$4 = global_1.String;

	var tryToString = function (argument) {
	  try {
	    return String$4(argument);
	  } catch (error) {
	    return 'Object';
	  }
	};

	var TypeError$h = global_1.TypeError;

	// `Assert: IsCallable(argument) is true`
	var aCallable = function (argument) {
	  if (isCallable(argument)) return argument;
	  throw TypeError$h(tryToString(argument) + ' is not a function');
	};

	// `GetMethod` abstract operation
	// https://tc39.es/ecma262/#sec-getmethod
	var getMethod = function (V, P) {
	  var func = V[P];
	  return func == null ? undefined : aCallable(func);
	};

	var TypeError$g = global_1.TypeError;

	// `OrdinaryToPrimitive` abstract operation
	// https://tc39.es/ecma262/#sec-ordinarytoprimitive
	var ordinaryToPrimitive = function (input, pref) {
	  var fn, val;
	  if (pref === 'string' && isCallable(fn = input.toString) && !isObject(val = functionCall(fn, input))) return val;
	  if (isCallable(fn = input.valueOf) && !isObject(val = functionCall(fn, input))) return val;
	  if (pref !== 'string' && isCallable(fn = input.toString) && !isObject(val = functionCall(fn, input))) return val;
	  throw TypeError$g("Can't convert object to primitive value");
	};

	var TypeError$f = global_1.TypeError;
	var TO_PRIMITIVE$1 = wellKnownSymbol('toPrimitive');

	// `ToPrimitive` abstract operation
	// https://tc39.es/ecma262/#sec-toprimitive
	var toPrimitive = function (input, pref) {
	  if (!isObject(input) || isSymbol(input)) return input;
	  var exoticToPrim = getMethod(input, TO_PRIMITIVE$1);
	  var result;
	  if (exoticToPrim) {
	    if (pref === undefined) pref = 'default';
	    result = functionCall(exoticToPrim, input, pref);
	    if (!isObject(result) || isSymbol(result)) return result;
	    throw TypeError$f("Can't convert object to primitive value");
	  }
	  if (pref === undefined) pref = 'number';
	  return ordinaryToPrimitive(input, pref);
	};

	// `ToPropertyKey` abstract operation
	// https://tc39.es/ecma262/#sec-topropertykey
	var toPropertyKey = function (argument) {
	  var key = toPrimitive(argument, 'string');
	  return isSymbol(key) ? key : key + '';
	};

	var TypeError$e = global_1.TypeError;
	// eslint-disable-next-line es/no-object-defineproperty -- safe
	var $defineProperty$1 = Object.defineProperty;
	// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
	var $getOwnPropertyDescriptor$2 = Object.getOwnPropertyDescriptor;
	var ENUMERABLE = 'enumerable';
	var CONFIGURABLE$1 = 'configurable';
	var WRITABLE = 'writable';

	// `Object.defineProperty` method
	// https://tc39.es/ecma262/#sec-object.defineproperty
	var f$8 = descriptors ? v8PrototypeDefineBug ? function defineProperty(O, P, Attributes) {
	  anObject(O);
	  P = toPropertyKey(P);
	  anObject(Attributes);
	  if (typeof O === 'function' && P === 'prototype' && 'value' in Attributes && WRITABLE in Attributes && !Attributes[WRITABLE]) {
	    var current = $getOwnPropertyDescriptor$2(O, P);
	    if (current && current[WRITABLE]) {
	      O[P] = Attributes.value;
	      Attributes = {
	        configurable: CONFIGURABLE$1 in Attributes ? Attributes[CONFIGURABLE$1] : current[CONFIGURABLE$1],
	        enumerable: ENUMERABLE in Attributes ? Attributes[ENUMERABLE] : current[ENUMERABLE],
	        writable: false
	      };
	    }
	  } return $defineProperty$1(O, P, Attributes);
	} : $defineProperty$1 : function defineProperty(O, P, Attributes) {
	  anObject(O);
	  P = toPropertyKey(P);
	  anObject(Attributes);
	  if (ie8DomDefine) try {
	    return $defineProperty$1(O, P, Attributes);
	  } catch (error) { /* empty */ }
	  if ('get' in Attributes || 'set' in Attributes) throw TypeError$e('Accessors not supported');
	  if ('value' in Attributes) O[P] = Attributes.value;
	  return O;
	};

	var objectDefineProperty = {
		f: f$8
	};

	var createPropertyDescriptor = function (bitmap, value) {
	  return {
	    enumerable: !(bitmap & 1),
	    configurable: !(bitmap & 2),
	    writable: !(bitmap & 4),
	    value: value
	  };
	};

	var createNonEnumerableProperty = descriptors ? function (object, key, value) {
	  return objectDefineProperty.f(object, key, createPropertyDescriptor(1, value));
	} : function (object, key, value) {
	  object[key] = value;
	  return object;
	};

	var functionToString$1 = functionUncurryThis(Function.toString);

	// this helper broken in `core-js@3.4.1-3.4.4`, so we can't use `shared` helper
	if (!isCallable(sharedStore.inspectSource)) {
	  sharedStore.inspectSource = function (it) {
	    return functionToString$1(it);
	  };
	}

	var inspectSource = sharedStore.inspectSource;

	var WeakMap$2 = global_1.WeakMap;

	var nativeWeakMap = isCallable(WeakMap$2) && /native code/.test(inspectSource(WeakMap$2));

	var keys$1 = shared('keys');

	var sharedKey = function (key) {
	  return keys$1[key] || (keys$1[key] = uid(key));
	};

	var hiddenKeys$1 = {};

	var OBJECT_ALREADY_INITIALIZED = 'Object already initialized';
	var TypeError$d = global_1.TypeError;
	var WeakMap$1 = global_1.WeakMap;
	var set$1, get$2, has;

	var enforce = function (it) {
	  return has(it) ? get$2(it) : set$1(it, {});
	};

	var getterFor = function (TYPE) {
	  return function (it) {
	    var state;
	    if (!isObject(it) || (state = get$2(it)).type !== TYPE) {
	      throw TypeError$d('Incompatible receiver, ' + TYPE + ' required');
	    } return state;
	  };
	};

	if (nativeWeakMap || sharedStore.state) {
	  var store = sharedStore.state || (sharedStore.state = new WeakMap$1());
	  var wmget = functionUncurryThis(store.get);
	  var wmhas = functionUncurryThis(store.has);
	  var wmset = functionUncurryThis(store.set);
	  set$1 = function (it, metadata) {
	    if (wmhas(store, it)) throw new TypeError$d(OBJECT_ALREADY_INITIALIZED);
	    metadata.facade = it;
	    wmset(store, it, metadata);
	    return metadata;
	  };
	  get$2 = function (it) {
	    return wmget(store, it) || {};
	  };
	  has = function (it) {
	    return wmhas(store, it);
	  };
	} else {
	  var STATE = sharedKey('state');
	  hiddenKeys$1[STATE] = true;
	  set$1 = function (it, metadata) {
	    if (hasOwnProperty_1(it, STATE)) throw new TypeError$d(OBJECT_ALREADY_INITIALIZED);
	    metadata.facade = it;
	    createNonEnumerableProperty(it, STATE, metadata);
	    return metadata;
	  };
	  get$2 = function (it) {
	    return hasOwnProperty_1(it, STATE) ? it[STATE] : {};
	  };
	  has = function (it) {
	    return hasOwnProperty_1(it, STATE);
	  };
	}

	var internalState = {
	  set: set$1,
	  get: get$2,
	  has: has,
	  enforce: enforce,
	  getterFor: getterFor
	};

	var FunctionPrototype$2 = Function.prototype;
	// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
	var getDescriptor = descriptors && Object.getOwnPropertyDescriptor;

	var EXISTS = hasOwnProperty_1(FunctionPrototype$2, 'name');
	// additional protection from minified / mangled / dropped function names
	var PROPER = EXISTS && (function something() { /* empty */ }).name === 'something';
	var CONFIGURABLE = EXISTS && (!descriptors || (descriptors && getDescriptor(FunctionPrototype$2, 'name').configurable));

	var functionName = {
	  EXISTS: EXISTS,
	  PROPER: PROPER,
	  CONFIGURABLE: CONFIGURABLE
	};

	var redefine = createCommonjsModule(function (module) {
	var CONFIGURABLE_FUNCTION_NAME = functionName.CONFIGURABLE;

	var getInternalState = internalState.get;
	var enforceInternalState = internalState.enforce;
	var TEMPLATE = String(String).split('String');

	(module.exports = function (O, key, value, options) {
	  var unsafe = options ? !!options.unsafe : false;
	  var simple = options ? !!options.enumerable : false;
	  var noTargetGet = options ? !!options.noTargetGet : false;
	  var name = options && options.name !== undefined ? options.name : key;
	  var state;
	  if (isCallable(value)) {
	    if (String(name).slice(0, 7) === 'Symbol(') {
	      name = '[' + String(name).replace(/^Symbol\(([^)]*)\)/, '$1') + ']';
	    }
	    if (!hasOwnProperty_1(value, 'name') || (CONFIGURABLE_FUNCTION_NAME && value.name !== name)) {
	      createNonEnumerableProperty(value, 'name', name);
	    }
	    state = enforceInternalState(value);
	    if (!state.source) {
	      state.source = TEMPLATE.join(typeof name == 'string' ? name : '');
	    }
	  }
	  if (O === global_1) {
	    if (simple) O[key] = value;
	    else setGlobal(key, value);
	    return;
	  } else if (!unsafe) {
	    delete O[key];
	  } else if (!noTargetGet && O[key]) {
	    simple = true;
	  }
	  if (simple) O[key] = value;
	  else createNonEnumerableProperty(O, key, value);
	// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
	})(Function.prototype, 'toString', function toString() {
	  return isCallable(this) && getInternalState(this).source || inspectSource(this);
	});
	});

	var toString = functionUncurryThis({}.toString);
	var stringSlice$5 = functionUncurryThis(''.slice);

	var classofRaw = function (it) {
	  return stringSlice$5(toString(it), 8, -1);
	};

	var TO_STRING_TAG$2 = wellKnownSymbol('toStringTag');
	var Object$3 = global_1.Object;

	// ES3 wrong here
	var CORRECT_ARGUMENTS = classofRaw(function () { return arguments; }()) == 'Arguments';

	// fallback for IE11 Script Access Denied error
	var tryGet = function (it, key) {
	  try {
	    return it[key];
	  } catch (error) { /* empty */ }
	};

	// getting tag from ES6+ `Object.prototype.toString`
	var classof = toStringTagSupport ? classofRaw : function (it) {
	  var O, tag, result;
	  return it === undefined ? 'Undefined' : it === null ? 'Null'
	    // @@toStringTag case
	    : typeof (tag = tryGet(O = Object$3(it), TO_STRING_TAG$2)) == 'string' ? tag
	    // builtinTag case
	    : CORRECT_ARGUMENTS ? classofRaw(O)
	    // ES3 arguments fallback
	    : (result = classofRaw(O)) == 'Object' && isCallable(O.callee) ? 'Arguments' : result;
	};

	// `Object.prototype.toString` method implementation
	// https://tc39.es/ecma262/#sec-object.prototype.tostring
	var objectToString = toStringTagSupport ? {}.toString : function toString() {
	  return '[object ' + classof(this) + ']';
	};

	// `Object.prototype.toString` method
	// https://tc39.es/ecma262/#sec-object.prototype.tostring
	if (!toStringTagSupport) {
	  redefine(Object.prototype, 'toString', objectToString, { unsafe: true });
	}

	// iterable DOM collections
	// flag - `iterable` interface - 'entries', 'keys', 'values', 'forEach' methods
	var domIterables = {
	  CSSRuleList: 0,
	  CSSStyleDeclaration: 0,
	  CSSValueList: 0,
	  ClientRectList: 0,
	  DOMRectList: 0,
	  DOMStringList: 0,
	  DOMTokenList: 1,
	  DataTransferItemList: 0,
	  FileList: 0,
	  HTMLAllCollection: 0,
	  HTMLCollection: 0,
	  HTMLFormElement: 0,
	  HTMLSelectElement: 0,
	  MediaList: 0,
	  MimeTypeArray: 0,
	  NamedNodeMap: 0,
	  NodeList: 1,
	  PaintRequestList: 0,
	  Plugin: 0,
	  PluginArray: 0,
	  SVGLengthList: 0,
	  SVGNumberList: 0,
	  SVGPathSegList: 0,
	  SVGPointList: 0,
	  SVGStringList: 0,
	  SVGTransformList: 0,
	  SourceBufferList: 0,
	  StyleSheetList: 0,
	  TextTrackCueList: 0,
	  TextTrackList: 0,
	  TouchList: 0
	};

	// in old WebKit versions, `element.classList` is not an instance of global `DOMTokenList`


	var classList = documentCreateElement('span').classList;
	var DOMTokenListPrototype = classList && classList.constructor && classList.constructor.prototype;

	var domTokenListPrototype = DOMTokenListPrototype === Object.prototype ? undefined : DOMTokenListPrototype;

	var bind$3 = functionUncurryThis(functionUncurryThis.bind);

	// optional / simple context binding
	var functionBindContext = function (fn, that) {
	  aCallable(fn);
	  return that === undefined ? fn : bind$3 ? bind$3(fn, that) : function (/* ...args */) {
	    return fn.apply(that, arguments);
	  };
	};

	var Object$2 = global_1.Object;
	var split = functionUncurryThis(''.split);

	// fallback for non-array-like ES3 and non-enumerable old V8 strings
	var indexedObject = fails(function () {
	  // throws an error in rhino, see https://github.com/mozilla/rhino/issues/346
	  // eslint-disable-next-line no-prototype-builtins -- safe
	  return !Object$2('z').propertyIsEnumerable(0);
	}) ? function (it) {
	  return classofRaw(it) == 'String' ? split(it, '') : Object$2(it);
	} : Object$2;

	var ceil = Math.ceil;
	var floor$2 = Math.floor;

	// `ToIntegerOrInfinity` abstract operation
	// https://tc39.es/ecma262/#sec-tointegerorinfinity
	var toIntegerOrInfinity = function (argument) {
	  var number = +argument;
	  // eslint-disable-next-line no-self-compare -- safe
	  return number !== number || number === 0 ? 0 : (number > 0 ? floor$2 : ceil)(number);
	};

	var min$3 = Math.min;

	// `ToLength` abstract operation
	// https://tc39.es/ecma262/#sec-tolength
	var toLength = function (argument) {
	  return argument > 0 ? min$3(toIntegerOrInfinity(argument), 0x1FFFFFFFFFFFFF) : 0; // 2 ** 53 - 1 == 9007199254740991
	};

	// `LengthOfArrayLike` abstract operation
	// https://tc39.es/ecma262/#sec-lengthofarraylike
	var lengthOfArrayLike = function (obj) {
	  return toLength(obj.length);
	};

	// `IsArray` abstract operation
	// https://tc39.es/ecma262/#sec-isarray
	// eslint-disable-next-line es/no-array-isarray -- safe
	var isArray = Array.isArray || function isArray(argument) {
	  return classofRaw(argument) == 'Array';
	};

	var noop$1 = function () { /* empty */ };
	var empty$1 = [];
	var construct = getBuiltIn('Reflect', 'construct');
	var constructorRegExp = /^\s*(?:class|function)\b/;
	var exec = functionUncurryThis(constructorRegExp.exec);
	var INCORRECT_TO_STRING = !constructorRegExp.exec(noop$1);

	var isConstructorModern = function isConstructor(argument) {
	  if (!isCallable(argument)) return false;
	  try {
	    construct(noop$1, empty$1, argument);
	    return true;
	  } catch (error) {
	    return false;
	  }
	};

	var isConstructorLegacy = function isConstructor(argument) {
	  if (!isCallable(argument)) return false;
	  switch (classof(argument)) {
	    case 'AsyncFunction':
	    case 'GeneratorFunction':
	    case 'AsyncGeneratorFunction': return false;
	  }
	  try {
	    // we can't check .prototype since constructors produced by .bind haven't it
	    // `Function#toString` throws on some built-it function in some legacy engines
	    // (for example, `DOMQuad` and similar in FF41-)
	    return INCORRECT_TO_STRING || !!exec(constructorRegExp, inspectSource(argument));
	  } catch (error) {
	    return true;
	  }
	};

	isConstructorLegacy.sham = true;

	// `IsConstructor` abstract operation
	// https://tc39.es/ecma262/#sec-isconstructor
	var isConstructor = !construct || fails(function () {
	  var called;
	  return isConstructorModern(isConstructorModern.call)
	    || !isConstructorModern(Object)
	    || !isConstructorModern(function () { called = true; })
	    || called;
	}) ? isConstructorLegacy : isConstructorModern;

	var SPECIES$6 = wellKnownSymbol('species');
	var Array$4 = global_1.Array;

	// a part of `ArraySpeciesCreate` abstract operation
	// https://tc39.es/ecma262/#sec-arrayspeciescreate
	var arraySpeciesConstructor = function (originalArray) {
	  var C;
	  if (isArray(originalArray)) {
	    C = originalArray.constructor;
	    // cross-realm fallback
	    if (isConstructor(C) && (C === Array$4 || isArray(C.prototype))) C = undefined;
	    else if (isObject(C)) {
	      C = C[SPECIES$6];
	      if (C === null) C = undefined;
	    }
	  } return C === undefined ? Array$4 : C;
	};

	// `ArraySpeciesCreate` abstract operation
	// https://tc39.es/ecma262/#sec-arrayspeciescreate
	var arraySpeciesCreate = function (originalArray, length) {
	  return new (arraySpeciesConstructor(originalArray))(length === 0 ? 0 : length);
	};

	var push$4 = functionUncurryThis([].push);

	// `Array.prototype.{ forEach, map, filter, some, every, find, findIndex, filterReject }` methods implementation
	var createMethod$3 = function (TYPE) {
	  var IS_MAP = TYPE == 1;
	  var IS_FILTER = TYPE == 2;
	  var IS_SOME = TYPE == 3;
	  var IS_EVERY = TYPE == 4;
	  var IS_FIND_INDEX = TYPE == 6;
	  var IS_FILTER_REJECT = TYPE == 7;
	  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
	  return function ($this, callbackfn, that, specificCreate) {
	    var O = toObject($this);
	    var self = indexedObject(O);
	    var boundFunction = functionBindContext(callbackfn, that);
	    var length = lengthOfArrayLike(self);
	    var index = 0;
	    var create = specificCreate || arraySpeciesCreate;
	    var target = IS_MAP ? create($this, length) : IS_FILTER || IS_FILTER_REJECT ? create($this, 0) : undefined;
	    var value, result;
	    for (;length > index; index++) if (NO_HOLES || index in self) {
	      value = self[index];
	      result = boundFunction(value, index, O);
	      if (TYPE) {
	        if (IS_MAP) target[index] = result; // map
	        else if (result) switch (TYPE) {
	          case 3: return true;              // some
	          case 5: return value;             // find
	          case 6: return index;             // findIndex
	          case 2: push$4(target, value);      // filter
	        } else switch (TYPE) {
	          case 4: return false;             // every
	          case 7: push$4(target, value);      // filterReject
	        }
	      }
	    }
	    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : target;
	  };
	};

	var arrayIteration = {
	  // `Array.prototype.forEach` method
	  // https://tc39.es/ecma262/#sec-array.prototype.foreach
	  forEach: createMethod$3(0),
	  // `Array.prototype.map` method
	  // https://tc39.es/ecma262/#sec-array.prototype.map
	  map: createMethod$3(1),
	  // `Array.prototype.filter` method
	  // https://tc39.es/ecma262/#sec-array.prototype.filter
	  filter: createMethod$3(2),
	  // `Array.prototype.some` method
	  // https://tc39.es/ecma262/#sec-array.prototype.some
	  some: createMethod$3(3),
	  // `Array.prototype.every` method
	  // https://tc39.es/ecma262/#sec-array.prototype.every
	  every: createMethod$3(4),
	  // `Array.prototype.find` method
	  // https://tc39.es/ecma262/#sec-array.prototype.find
	  find: createMethod$3(5),
	  // `Array.prototype.findIndex` method
	  // https://tc39.es/ecma262/#sec-array.prototype.findIndex
	  findIndex: createMethod$3(6),
	  // `Array.prototype.filterReject` method
	  // https://github.com/tc39/proposal-array-filtering
	  filterReject: createMethod$3(7)
	};

	var arrayMethodIsStrict = function (METHOD_NAME, argument) {
	  var method = [][METHOD_NAME];
	  return !!method && fails(function () {
	    // eslint-disable-next-line no-useless-call,no-throw-literal -- required for testing
	    method.call(null, argument || function () { throw 1; }, 1);
	  });
	};

	var $forEach$1 = arrayIteration.forEach;


	var STRICT_METHOD$2 = arrayMethodIsStrict('forEach');

	// `Array.prototype.forEach` method implementation
	// https://tc39.es/ecma262/#sec-array.prototype.foreach
	var arrayForEach = !STRICT_METHOD$2 ? function forEach(callbackfn /* , thisArg */) {
	  return $forEach$1(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	// eslint-disable-next-line es/no-array-prototype-foreach -- safe
	} : [].forEach;

	var handlePrototype$1 = function (CollectionPrototype) {
	  // some Chrome versions have non-configurable methods on DOMTokenList
	  if (CollectionPrototype && CollectionPrototype.forEach !== arrayForEach) try {
	    createNonEnumerableProperty(CollectionPrototype, 'forEach', arrayForEach);
	  } catch (error) {
	    CollectionPrototype.forEach = arrayForEach;
	  }
	};

	for (var COLLECTION_NAME$1 in domIterables) {
	  if (domIterables[COLLECTION_NAME$1]) {
	    handlePrototype$1(global_1[COLLECTION_NAME$1] && global_1[COLLECTION_NAME$1].prototype);
	  }
	}

	handlePrototype$1(domTokenListPrototype);

	var $propertyIsEnumerable$1 = {}.propertyIsEnumerable;
	// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
	var getOwnPropertyDescriptor$3 = Object.getOwnPropertyDescriptor;

	// Nashorn ~ JDK8 bug
	var NASHORN_BUG = getOwnPropertyDescriptor$3 && !$propertyIsEnumerable$1.call({ 1: 2 }, 1);

	// `Object.prototype.propertyIsEnumerable` method implementation
	// https://tc39.es/ecma262/#sec-object.prototype.propertyisenumerable
	var f$7 = NASHORN_BUG ? function propertyIsEnumerable(V) {
	  var descriptor = getOwnPropertyDescriptor$3(this, V);
	  return !!descriptor && descriptor.enumerable;
	} : $propertyIsEnumerable$1;

	var objectPropertyIsEnumerable = {
		f: f$7
	};

	// toObject with fallback for non-array-like ES3 strings



	var toIndexedObject = function (it) {
	  return indexedObject(requireObjectCoercible(it));
	};

	// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
	var $getOwnPropertyDescriptor$1 = Object.getOwnPropertyDescriptor;

	// `Object.getOwnPropertyDescriptor` method
	// https://tc39.es/ecma262/#sec-object.getownpropertydescriptor
	var f$6 = descriptors ? $getOwnPropertyDescriptor$1 : function getOwnPropertyDescriptor(O, P) {
	  O = toIndexedObject(O);
	  P = toPropertyKey(P);
	  if (ie8DomDefine) try {
	    return $getOwnPropertyDescriptor$1(O, P);
	  } catch (error) { /* empty */ }
	  if (hasOwnProperty_1(O, P)) return createPropertyDescriptor(!functionCall(objectPropertyIsEnumerable.f, O, P), O[P]);
	};

	var objectGetOwnPropertyDescriptor = {
		f: f$6
	};

	var max$4 = Math.max;
	var min$2 = Math.min;

	// Helper for a popular repeating case of the spec:
	// Let integer be ? ToInteger(index).
	// If integer < 0, let result be max((length + integer), 0); else let result be min(integer, length).
	var toAbsoluteIndex = function (index, length) {
	  var integer = toIntegerOrInfinity(index);
	  return integer < 0 ? max$4(integer + length, 0) : min$2(integer, length);
	};

	// `Array.prototype.{ indexOf, includes }` methods implementation
	var createMethod$2 = function (IS_INCLUDES) {
	  return function ($this, el, fromIndex) {
	    var O = toIndexedObject($this);
	    var length = lengthOfArrayLike(O);
	    var index = toAbsoluteIndex(fromIndex, length);
	    var value;
	    // Array#includes uses SameValueZero equality algorithm
	    // eslint-disable-next-line no-self-compare -- NaN check
	    if (IS_INCLUDES && el != el) while (length > index) {
	      value = O[index++];
	      // eslint-disable-next-line no-self-compare -- NaN check
	      if (value != value) return true;
	    // Array#indexOf ignores holes, Array#includes - not
	    } else for (;length > index; index++) {
	      if ((IS_INCLUDES || index in O) && O[index] === el) return IS_INCLUDES || index || 0;
	    } return !IS_INCLUDES && -1;
	  };
	};

	var arrayIncludes = {
	  // `Array.prototype.includes` method
	  // https://tc39.es/ecma262/#sec-array.prototype.includes
	  includes: createMethod$2(true),
	  // `Array.prototype.indexOf` method
	  // https://tc39.es/ecma262/#sec-array.prototype.indexof
	  indexOf: createMethod$2(false)
	};

	var indexOf$1 = arrayIncludes.indexOf;


	var push$3 = functionUncurryThis([].push);

	var objectKeysInternal = function (object, names) {
	  var O = toIndexedObject(object);
	  var i = 0;
	  var result = [];
	  var key;
	  for (key in O) !hasOwnProperty_1(hiddenKeys$1, key) && hasOwnProperty_1(O, key) && push$3(result, key);
	  // Don't enum bug & hidden keys
	  while (names.length > i) if (hasOwnProperty_1(O, key = names[i++])) {
	    ~indexOf$1(result, key) || push$3(result, key);
	  }
	  return result;
	};

	// IE8- don't enum bug keys
	var enumBugKeys = [
	  'constructor',
	  'hasOwnProperty',
	  'isPrototypeOf',
	  'propertyIsEnumerable',
	  'toLocaleString',
	  'toString',
	  'valueOf'
	];

	var hiddenKeys = enumBugKeys.concat('length', 'prototype');

	// `Object.getOwnPropertyNames` method
	// https://tc39.es/ecma262/#sec-object.getownpropertynames
	// eslint-disable-next-line es/no-object-getownpropertynames -- safe
	var f$5 = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
	  return objectKeysInternal(O, hiddenKeys);
	};

	var objectGetOwnPropertyNames = {
		f: f$5
	};

	// eslint-disable-next-line es/no-object-getownpropertysymbols -- safe
	var f$4 = Object.getOwnPropertySymbols;

	var objectGetOwnPropertySymbols = {
		f: f$4
	};

	var concat$2 = functionUncurryThis([].concat);

	// all object keys, includes non-enumerable and symbols
	var ownKeys$1 = getBuiltIn('Reflect', 'ownKeys') || function ownKeys(it) {
	  var keys = objectGetOwnPropertyNames.f(anObject(it));
	  var getOwnPropertySymbols = objectGetOwnPropertySymbols.f;
	  return getOwnPropertySymbols ? concat$2(keys, getOwnPropertySymbols(it)) : keys;
	};

	var copyConstructorProperties = function (target, source, exceptions) {
	  var keys = ownKeys$1(source);
	  var defineProperty = objectDefineProperty.f;
	  var getOwnPropertyDescriptor = objectGetOwnPropertyDescriptor.f;
	  for (var i = 0; i < keys.length; i++) {
	    var key = keys[i];
	    if (!hasOwnProperty_1(target, key) && !(exceptions && hasOwnProperty_1(exceptions, key))) {
	      defineProperty(target, key, getOwnPropertyDescriptor(source, key));
	    }
	  }
	};

	var replacement = /#|\.prototype\./;

	var isForced = function (feature, detection) {
	  var value = data[normalize(feature)];
	  return value == POLYFILL ? true
	    : value == NATIVE ? false
	    : isCallable(detection) ? fails(detection)
	    : !!detection;
	};

	var normalize = isForced.normalize = function (string) {
	  return String(string).replace(replacement, '.').toLowerCase();
	};

	var data = isForced.data = {};
	var NATIVE = isForced.NATIVE = 'N';
	var POLYFILL = isForced.POLYFILL = 'P';

	var isForced_1 = isForced;

	var getOwnPropertyDescriptor$2 = objectGetOwnPropertyDescriptor.f;






	/*
	  options.target      - name of the target object
	  options.global      - target is the global object
	  options.stat        - export as static methods of target
	  options.proto       - export as prototype methods of target
	  options.real        - real prototype method for the `pure` version
	  options.forced      - export even if the native feature is available
	  options.bind        - bind methods to the target, required for the `pure` version
	  options.wrap        - wrap constructors to preventing global pollution, required for the `pure` version
	  options.unsafe      - use the simple assignment of property instead of delete + defineProperty
	  options.sham        - add a flag to not completely full polyfills
	  options.enumerable  - export as enumerable property
	  options.noTargetGet - prevent calling a getter on target
	  options.name        - the .name of the function if it does not match the key
	*/
	var _export = function (options, source) {
	  var TARGET = options.target;
	  var GLOBAL = options.global;
	  var STATIC = options.stat;
	  var FORCED, target, key, targetProperty, sourceProperty, descriptor;
	  if (GLOBAL) {
	    target = global_1;
	  } else if (STATIC) {
	    target = global_1[TARGET] || setGlobal(TARGET, {});
	  } else {
	    target = (global_1[TARGET] || {}).prototype;
	  }
	  if (target) for (key in source) {
	    sourceProperty = source[key];
	    if (options.noTargetGet) {
	      descriptor = getOwnPropertyDescriptor$2(target, key);
	      targetProperty = descriptor && descriptor.value;
	    } else targetProperty = target[key];
	    FORCED = isForced_1(GLOBAL ? key : TARGET + (STATIC ? '.' : '#') + key, options.forced);
	    // contained in target
	    if (!FORCED && targetProperty !== undefined) {
	      if (typeof sourceProperty == typeof targetProperty) continue;
	      copyConstructorProperties(sourceProperty, targetProperty);
	    }
	    // add a flag to not completely full polyfills
	    if (options.sham || (targetProperty && targetProperty.sham)) {
	      createNonEnumerableProperty(sourceProperty, 'sham', true);
	    }
	    // extend global
	    redefine(target, key, sourceProperty, options);
	  }
	};

	// `Object.keys` method
	// https://tc39.es/ecma262/#sec-object.keys
	// eslint-disable-next-line es/no-object-keys -- safe
	var objectKeys = Object.keys || function keys(O) {
	  return objectKeysInternal(O, enumBugKeys);
	};

	var FAILS_ON_PRIMITIVES$1 = fails(function () { objectKeys(1); });

	// `Object.keys` method
	// https://tc39.es/ecma262/#sec-object.keys
	_export({ target: 'Object', stat: true, forced: FAILS_ON_PRIMITIVES$1 }, {
	  keys: function keys(it) {
	    return objectKeys(toObject(it));
	  }
	});

	function noop() { }
	const identity = x => x;
	function assign(tar, src) {
	    // @ts-ignore
	    for (const k in src)
	        tar[k] = src[k];
	    return tar;
	}
	function run$1(fn) {
	    return fn();
	}
	function blank_object() {
	    return Object.create(null);
	}
	function run_all(fns) {
	    fns.forEach(run$1);
	}
	function is_function(thing) {
	    return typeof thing === 'function';
	}
	function safe_not_equal(a, b) {
	    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
	}
	let src_url_equal_anchor;
	function src_url_equal(element_src, url) {
	    if (!src_url_equal_anchor) {
	        src_url_equal_anchor = document.createElement('a');
	    }
	    src_url_equal_anchor.href = url;
	    return element_src === src_url_equal_anchor.href;
	}
	function is_empty(obj) {
	    return Object.keys(obj).length === 0;
	}
	function subscribe(store, ...callbacks) {
	    if (store == null) {
	        return noop;
	    }
	    const unsub = store.subscribe(...callbacks);
	    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;
	}
	function component_subscribe(component, store, callback) {
	    component.$$.on_destroy.push(subscribe(store, callback));
	}
	function create_slot(definition, ctx, $$scope, fn) {
	    if (definition) {
	        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);
	        return definition[0](slot_ctx);
	    }
	}
	function get_slot_context(definition, ctx, $$scope, fn) {
	    return definition[1] && fn
	        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))
	        : $$scope.ctx;
	}
	function get_slot_changes(definition, $$scope, dirty, fn) {
	    if (definition[2] && fn) {
	        const lets = definition[2](fn(dirty));
	        if ($$scope.dirty === undefined) {
	            return lets;
	        }
	        if (typeof lets === 'object') {
	            const merged = [];
	            const len = Math.max($$scope.dirty.length, lets.length);
	            for (let i = 0; i < len; i += 1) {
	                merged[i] = $$scope.dirty[i] | lets[i];
	            }
	            return merged;
	        }
	        return $$scope.dirty | lets;
	    }
	    return $$scope.dirty;
	}
	function update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {
	    if (slot_changes) {
	        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);
	        slot.p(slot_context, slot_changes);
	    }
	}
	function get_all_dirty_from_scope($$scope) {
	    if ($$scope.ctx.length > 32) {
	        const dirty = [];
	        const length = $$scope.ctx.length / 32;
	        for (let i = 0; i < length; i++) {
	            dirty[i] = -1;
	        }
	        return dirty;
	    }
	    return -1;
	}
	function null_to_empty(value) {
	    return value == null ? '' : value;
	}

	const is_client = typeof window !== 'undefined';
	let now = is_client
	    ? () => window.performance.now()
	    : () => Date.now();
	let raf = is_client ? cb => requestAnimationFrame(cb) : noop;

	const tasks = new Set();
	function run_tasks(now) {
	    tasks.forEach(task => {
	        if (!task.c(now)) {
	            tasks.delete(task);
	            task.f();
	        }
	    });
	    if (tasks.size !== 0)
	        raf(run_tasks);
	}
	/**
	 * Creates a new task that runs on each raf frame
	 * until it returns a falsy value or is aborted
	 */
	function loop(callback) {
	    let task;
	    if (tasks.size === 0)
	        raf(run_tasks);
	    return {
	        promise: new Promise(fulfill => {
	            tasks.add(task = { c: callback, f: fulfill });
	        }),
	        abort() {
	            tasks.delete(task);
	        }
	    };
	}
	function append(target, node) {
	    target.appendChild(node);
	}
	function get_root_for_style(node) {
	    if (!node)
	        return document;
	    const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;
	    if (root && root.host) {
	        return root;
	    }
	    return node.ownerDocument;
	}
	function append_empty_stylesheet(node) {
	    const style_element = element('style');
	    append_stylesheet(get_root_for_style(node), style_element);
	    return style_element;
	}
	function append_stylesheet(node, style) {
	    append(node.head || node, style);
	}
	function insert(target, node, anchor) {
	    target.insertBefore(node, anchor || null);
	}
	function detach(node) {
	    node.parentNode.removeChild(node);
	}
	function destroy_each(iterations, detaching) {
	    for (let i = 0; i < iterations.length; i += 1) {
	        if (iterations[i])
	            iterations[i].d(detaching);
	    }
	}
	function element(name) {
	    return document.createElement(name);
	}
	function text(data) {
	    return document.createTextNode(data);
	}
	function space() {
	    return text(' ');
	}
	function empty() {
	    return text('');
	}
	function listen(node, event, handler, options) {
	    node.addEventListener(event, handler, options);
	    return () => node.removeEventListener(event, handler, options);
	}
	function prevent_default(fn) {
	    return function (event) {
	        event.preventDefault();
	        // @ts-ignore
	        return fn.call(this, event);
	    };
	}
	function attr(node, attribute, value) {
	    if (value == null)
	        node.removeAttribute(attribute);
	    else if (node.getAttribute(attribute) !== value)
	        node.setAttribute(attribute, value);
	}
	function children(element) {
	    return Array.from(element.childNodes);
	}
	function set_data(text, data) {
	    data = '' + data;
	    if (text.wholeText !== data)
	        text.data = data;
	}
	function set_input_value(input, value) {
	    input.value = value == null ? '' : value;
	}
	function set_style(node, key, value, important) {
	    node.style.setProperty(key, value, important ? 'important' : '');
	}
	function select_option(select, value) {
	    for (let i = 0; i < select.options.length; i += 1) {
	        const option = select.options[i];
	        if (option.__value === value) {
	            option.selected = true;
	            return;
	        }
	    }
	    select.selectedIndex = -1; // no option should be selected
	}
	function select_value(select) {
	    const selected_option = select.querySelector(':checked') || select.options[0];
	    return selected_option && selected_option.__value;
	}
	function toggle_class(element, name, toggle) {
	    element.classList[toggle ? 'add' : 'remove'](name);
	}
	function custom_event(type, detail, bubbles = false) {
	    const e = document.createEvent('CustomEvent');
	    e.initCustomEvent(type, bubbles, false, detail);
	    return e;
	}
	class HtmlTag {
	    constructor() {
	        this.e = this.n = null;
	    }
	    c(html) {
	        this.h(html);
	    }
	    m(html, target, anchor = null) {
	        if (!this.e) {
	            this.e = element(target.nodeName);
	            this.t = target;
	            this.c(html);
	        }
	        this.i(anchor);
	    }
	    h(html) {
	        this.e.innerHTML = html;
	        this.n = Array.from(this.e.childNodes);
	    }
	    i(anchor) {
	        for (let i = 0; i < this.n.length; i += 1) {
	            insert(this.t, this.n[i], anchor);
	        }
	    }
	    p(html) {
	        this.d();
	        this.h(html);
	        this.i(this.a);
	    }
	    d() {
	        this.n.forEach(detach);
	    }
	}

	const active_docs = new Set();
	let active = 0;
	// https://github.com/darkskyapp/string-hash/blob/master/index.js
	function hash(str) {
	    let hash = 5381;
	    let i = str.length;
	    while (i--)
	        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);
	    return hash >>> 0;
	}
	function create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {
	    const step = 16.666 / duration;
	    let keyframes = '{\n';
	    for (let p = 0; p <= 1; p += step) {
	        const t = a + (b - a) * ease(p);
	        keyframes += p * 100 + `%{${fn(t, 1 - t)}}\n`;
	    }
	    const rule = keyframes + `100% {${fn(b, 1 - b)}}\n}`;
	    const name = `__svelte_${hash(rule)}_${uid}`;
	    const doc = get_root_for_style(node);
	    active_docs.add(doc);
	    const stylesheet = doc.__svelte_stylesheet || (doc.__svelte_stylesheet = append_empty_stylesheet(node).sheet);
	    const current_rules = doc.__svelte_rules || (doc.__svelte_rules = {});
	    if (!current_rules[name]) {
	        current_rules[name] = true;
	        stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);
	    }
	    const animation = node.style.animation || '';
	    node.style.animation = `${animation ? `${animation}, ` : ''}${name} ${duration}ms linear ${delay}ms 1 both`;
	    active += 1;
	    return name;
	}
	function delete_rule(node, name) {
	    const previous = (node.style.animation || '').split(', ');
	    const next = previous.filter(name
	        ? anim => anim.indexOf(name) < 0 // remove specific animation
	        : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations
	    );
	    const deleted = previous.length - next.length;
	    if (deleted) {
	        node.style.animation = next.join(', ');
	        active -= deleted;
	        if (!active)
	            clear_rules();
	    }
	}
	function clear_rules() {
	    raf(() => {
	        if (active)
	            return;
	        active_docs.forEach(doc => {
	            const stylesheet = doc.__svelte_stylesheet;
	            let i = stylesheet.cssRules.length;
	            while (i--)
	                stylesheet.deleteRule(i);
	            doc.__svelte_rules = {};
	        });
	        active_docs.clear();
	    });
	}

	let current_component;
	function set_current_component(component) {
	    current_component = component;
	}
	function get_current_component() {
	    if (!current_component)
	        throw new Error('Function called outside component initialization');
	    return current_component;
	}
	function beforeUpdate(fn) {
	    get_current_component().$$.before_update.push(fn);
	}
	function onMount(fn) {
	    get_current_component().$$.on_mount.push(fn);
	}
	function onDestroy(fn) {
	    get_current_component().$$.on_destroy.push(fn);
	}
	function createEventDispatcher() {
	    const component = get_current_component();
	    return (type, detail) => {
	        const callbacks = component.$$.callbacks[type];
	        if (callbacks) {
	            // TODO are there situations where events could be dispatched
	            // in a server (non-DOM) environment?
	            const event = custom_event(type, detail);
	            callbacks.slice().forEach(fn => {
	                fn.call(component, event);
	            });
	        }
	    };
	}
	// TODO figure out if we still want to support
	// shorthand events, or if we want to implement
	// a real bubbling mechanism
	function bubble(component, event) {
	    const callbacks = component.$$.callbacks[event.type];
	    if (callbacks) {
	        // @ts-ignore
	        callbacks.slice().forEach(fn => fn.call(this, event));
	    }
	}

	const dirty_components = [];
	const binding_callbacks = [];
	const render_callbacks = [];
	const flush_callbacks = [];
	const resolved_promise = Promise.resolve();
	let update_scheduled = false;
	function schedule_update() {
	    if (!update_scheduled) {
	        update_scheduled = true;
	        resolved_promise.then(flush$1);
	    }
	}
	function add_render_callback(fn) {
	    render_callbacks.push(fn);
	}
	function add_flush_callback(fn) {
	    flush_callbacks.push(fn);
	}
	// flush() calls callbacks in this order:
	// 1. All beforeUpdate callbacks, in order: parents before children
	// 2. All bind:this callbacks, in reverse order: children before parents.
	// 3. All afterUpdate callbacks, in order: parents before children. EXCEPT
	//    for afterUpdates called during the initial onMount, which are called in
	//    reverse order: children before parents.
	// Since callbacks might update component values, which could trigger another
	// call to flush(), the following steps guard against this:
	// 1. During beforeUpdate, any updated components will be added to the
	//    dirty_components array and will cause a reentrant call to flush(). Because
	//    the flush index is kept outside the function, the reentrant call will pick
	//    up where the earlier call left off and go through all dirty components. The
	//    current_component value is saved and restored so that the reentrant call will
	//    not interfere with the "parent" flush() call.
	// 2. bind:this callbacks cannot trigger new flush() calls.
	// 3. During afterUpdate, any updated components will NOT have their afterUpdate
	//    callback called a second time; the seen_callbacks set, outside the flush()
	//    function, guarantees this behavior.
	const seen_callbacks = new Set();
	let flushidx = 0; // Do *not* move this inside the flush() function
	function flush$1() {
	    const saved_component = current_component;
	    do {
	        // first, call beforeUpdate functions
	        // and update components
	        while (flushidx < dirty_components.length) {
	            const component = dirty_components[flushidx];
	            flushidx++;
	            set_current_component(component);
	            update(component.$$);
	        }
	        set_current_component(null);
	        dirty_components.length = 0;
	        flushidx = 0;
	        while (binding_callbacks.length)
	            binding_callbacks.pop()();
	        // then, once components are updated, call
	        // afterUpdate functions. This may cause
	        // subsequent updates...
	        for (let i = 0; i < render_callbacks.length; i += 1) {
	            const callback = render_callbacks[i];
	            if (!seen_callbacks.has(callback)) {
	                // ...so guard against infinite loops
	                seen_callbacks.add(callback);
	                callback();
	            }
	        }
	        render_callbacks.length = 0;
	    } while (dirty_components.length);
	    while (flush_callbacks.length) {
	        flush_callbacks.pop()();
	    }
	    update_scheduled = false;
	    seen_callbacks.clear();
	    set_current_component(saved_component);
	}
	function update($$) {
	    if ($$.fragment !== null) {
	        $$.update();
	        run_all($$.before_update);
	        const dirty = $$.dirty;
	        $$.dirty = [-1];
	        $$.fragment && $$.fragment.p($$.ctx, dirty);
	        $$.after_update.forEach(add_render_callback);
	    }
	}

	let promise$1;
	function wait() {
	    if (!promise$1) {
	        promise$1 = Promise.resolve();
	        promise$1.then(() => {
	            promise$1 = null;
	        });
	    }
	    return promise$1;
	}
	function dispatch(node, direction, kind) {
	    node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));
	}
	const outroing = new Set();
	let outros;
	function group_outros() {
	    outros = {
	        r: 0,
	        c: [],
	        p: outros // parent group
	    };
	}
	function check_outros() {
	    if (!outros.r) {
	        run_all(outros.c);
	    }
	    outros = outros.p;
	}
	function transition_in(block, local) {
	    if (block && block.i) {
	        outroing.delete(block);
	        block.i(local);
	    }
	}
	function transition_out(block, local, detach, callback) {
	    if (block && block.o) {
	        if (outroing.has(block))
	            return;
	        outroing.add(block);
	        outros.c.push(() => {
	            outroing.delete(block);
	            if (callback) {
	                if (detach)
	                    block.d(1);
	                callback();
	            }
	        });
	        block.o(local);
	    }
	}
	const null_transition = { duration: 0 };
	function create_bidirectional_transition(node, fn, params, intro) {
	    let config = fn(node, params);
	    let t = intro ? 0 : 1;
	    let running_program = null;
	    let pending_program = null;
	    let animation_name = null;
	    function clear_animation() {
	        if (animation_name)
	            delete_rule(node, animation_name);
	    }
	    function init(program, duration) {
	        const d = (program.b - t);
	        duration *= Math.abs(d);
	        return {
	            a: t,
	            b: program.b,
	            d,
	            duration,
	            start: program.start,
	            end: program.start + duration,
	            group: program.group
	        };
	    }
	    function go(b) {
	        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;
	        const program = {
	            start: now() + delay,
	            b
	        };
	        if (!b) {
	            // @ts-ignore todo: improve typings
	            program.group = outros;
	            outros.r += 1;
	        }
	        if (running_program || pending_program) {
	            pending_program = program;
	        }
	        else {
	            // if this is an intro, and there's a delay, we need to do
	            // an initial tick and/or apply CSS animation immediately
	            if (css) {
	                clear_animation();
	                animation_name = create_rule(node, t, b, duration, delay, easing, css);
	            }
	            if (b)
	                tick(0, 1);
	            running_program = init(program, duration);
	            add_render_callback(() => dispatch(node, b, 'start'));
	            loop(now => {
	                if (pending_program && now > pending_program.start) {
	                    running_program = init(pending_program, duration);
	                    pending_program = null;
	                    dispatch(node, running_program.b, 'start');
	                    if (css) {
	                        clear_animation();
	                        animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);
	                    }
	                }
	                if (running_program) {
	                    if (now >= running_program.end) {
	                        tick(t = running_program.b, 1 - t);
	                        dispatch(node, running_program.b, 'end');
	                        if (!pending_program) {
	                            // we're done
	                            if (running_program.b) {
	                                // intro â we can tidy up immediately
	                                clear_animation();
	                            }
	                            else {
	                                // outro â needs to be coordinated
	                                if (!--running_program.group.r)
	                                    run_all(running_program.group.c);
	                            }
	                        }
	                        running_program = null;
	                    }
	                    else if (now >= running_program.start) {
	                        const p = now - running_program.start;
	                        t = running_program.a + running_program.d * easing(p / running_program.duration);
	                        tick(t, 1 - t);
	                    }
	                }
	                return !!(running_program || pending_program);
	            });
	        }
	    }
	    return {
	        run(b) {
	            if (is_function(config)) {
	                wait().then(() => {
	                    // @ts-ignore
	                    config = config();
	                    go(b);
	                });
	            }
	            else {
	                go(b);
	            }
	        },
	        end() {
	            clear_animation();
	            running_program = pending_program = null;
	        }
	    };
	}

	function destroy_block(block, lookup) {
	    block.d(1);
	    lookup.delete(block.key);
	}
	function outro_and_destroy_block(block, lookup) {
	    transition_out(block, 1, 1, () => {
	        lookup.delete(block.key);
	    });
	}
	function update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {
	    let o = old_blocks.length;
	    let n = list.length;
	    let i = o;
	    const old_indexes = {};
	    while (i--)
	        old_indexes[old_blocks[i].key] = i;
	    const new_blocks = [];
	    const new_lookup = new Map();
	    const deltas = new Map();
	    i = n;
	    while (i--) {
	        const child_ctx = get_context(ctx, list, i);
	        const key = get_key(child_ctx);
	        let block = lookup.get(key);
	        if (!block) {
	            block = create_each_block(key, child_ctx);
	            block.c();
	        }
	        else if (dynamic) {
	            block.p(child_ctx, dirty);
	        }
	        new_lookup.set(key, new_blocks[i] = block);
	        if (key in old_indexes)
	            deltas.set(key, Math.abs(i - old_indexes[key]));
	    }
	    const will_move = new Set();
	    const did_move = new Set();
	    function insert(block) {
	        transition_in(block, 1);
	        block.m(node, next);
	        lookup.set(block.key, block);
	        next = block.first;
	        n--;
	    }
	    while (o && n) {
	        const new_block = new_blocks[n - 1];
	        const old_block = old_blocks[o - 1];
	        const new_key = new_block.key;
	        const old_key = old_block.key;
	        if (new_block === old_block) {
	            // do nothing
	            next = new_block.first;
	            o--;
	            n--;
	        }
	        else if (!new_lookup.has(old_key)) {
	            // remove old block
	            destroy(old_block, lookup);
	            o--;
	        }
	        else if (!lookup.has(new_key) || will_move.has(new_key)) {
	            insert(new_block);
	        }
	        else if (did_move.has(old_key)) {
	            o--;
	        }
	        else if (deltas.get(new_key) > deltas.get(old_key)) {
	            did_move.add(new_key);
	            insert(new_block);
	        }
	        else {
	            will_move.add(old_key);
	            o--;
	        }
	    }
	    while (o--) {
	        const old_block = old_blocks[o];
	        if (!new_lookup.has(old_block.key))
	            destroy(old_block, lookup);
	    }
	    while (n)
	        insert(new_blocks[n - 1]);
	    return new_blocks;
	}

	function get_spread_update(levels, updates) {
	    const update = {};
	    const to_null_out = {};
	    const accounted_for = { $$scope: 1 };
	    let i = levels.length;
	    while (i--) {
	        const o = levels[i];
	        const n = updates[i];
	        if (n) {
	            for (const key in o) {
	                if (!(key in n))
	                    to_null_out[key] = 1;
	            }
	            for (const key in n) {
	                if (!accounted_for[key]) {
	                    update[key] = n[key];
	                    accounted_for[key] = 1;
	                }
	            }
	            levels[i] = n;
	        }
	        else {
	            for (const key in o) {
	                accounted_for[key] = 1;
	            }
	        }
	    }
	    for (const key in to_null_out) {
	        if (!(key in update))
	            update[key] = undefined;
	    }
	    return update;
	}
	function get_spread_object(spread_props) {
	    return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};
	}

	function bind$2(component, name, callback) {
	    const index = component.$$.props[name];
	    if (index !== undefined) {
	        component.$$.bound[index] = callback;
	        callback(component.$$.ctx[index]);
	    }
	}
	function create_component(block) {
	    block && block.c();
	}
	function mount_component(component, target, anchor, customElement) {
	    const { fragment, on_mount, on_destroy, after_update } = component.$$;
	    fragment && fragment.m(target, anchor);
	    if (!customElement) {
	        // onMount happens before the initial afterUpdate
	        add_render_callback(() => {
	            const new_on_destroy = on_mount.map(run$1).filter(is_function);
	            if (on_destroy) {
	                on_destroy.push(...new_on_destroy);
	            }
	            else {
	                // Edge case - component was destroyed immediately,
	                // most likely as a result of a binding initialising
	                run_all(new_on_destroy);
	            }
	            component.$$.on_mount = [];
	        });
	    }
	    after_update.forEach(add_render_callback);
	}
	function destroy_component(component, detaching) {
	    const $$ = component.$$;
	    if ($$.fragment !== null) {
	        run_all($$.on_destroy);
	        $$.fragment && $$.fragment.d(detaching);
	        // TODO null out other refs, including component.$$ (but need to
	        // preserve final state?)
	        $$.on_destroy = $$.fragment = null;
	        $$.ctx = [];
	    }
	}
	function make_dirty(component, i) {
	    if (component.$$.dirty[0] === -1) {
	        dirty_components.push(component);
	        schedule_update();
	        component.$$.dirty.fill(0);
	    }
	    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));
	}
	function init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {
	    const parent_component = current_component;
	    set_current_component(component);
	    const $$ = component.$$ = {
	        fragment: null,
	        ctx: null,
	        // state
	        props,
	        update: noop,
	        not_equal,
	        bound: blank_object(),
	        // lifecycle
	        on_mount: [],
	        on_destroy: [],
	        on_disconnect: [],
	        before_update: [],
	        after_update: [],
	        context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),
	        // everything else
	        callbacks: blank_object(),
	        dirty,
	        skip_bound: false,
	        root: options.target || parent_component.$$.root
	    };
	    append_styles && append_styles($$.root);
	    let ready = false;
	    $$.ctx = instance
	        ? instance(component, options.props || {}, (i, ret, ...rest) => {
	            const value = rest.length ? rest[0] : ret;
	            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
	                if (!$$.skip_bound && $$.bound[i])
	                    $$.bound[i](value);
	                if (ready)
	                    make_dirty(component, i);
	            }
	            return ret;
	        })
	        : [];
	    $$.update();
	    ready = true;
	    run_all($$.before_update);
	    // `false` as a special case of no DOM component
	    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;
	    if (options.target) {
	        if (options.hydrate) {
	            const nodes = children(options.target);
	            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
	            $$.fragment && $$.fragment.l(nodes);
	            nodes.forEach(detach);
	        }
	        else {
	            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
	            $$.fragment && $$.fragment.c();
	        }
	        if (options.intro)
	            transition_in(component.$$.fragment);
	        mount_component(component, options.target, options.anchor, options.customElement);
	        flush$1();
	    }
	    set_current_component(parent_component);
	}
	/**
	 * Base class for Svelte components. Used when dev=false.
	 */
	class SvelteComponent {
	    $destroy() {
	        destroy_component(this, 1);
	        this.$destroy = noop;
	    }
	    $on(type, callback) {
	        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
	        callbacks.push(callback);
	        return () => {
	            const index = callbacks.indexOf(callback);
	            if (index !== -1)
	                callbacks.splice(index, 1);
	        };
	    }
	    $set($$props) {
	        if (this.$$set && !is_empty($$props)) {
	            this.$$.skip_bound = true;
	            this.$$set($$props);
	            this.$$.skip_bound = false;
	        }
	    }
	}

	/* src/elements/block/ui.block.svelte generated by Svelte v3.44.3 */

	function create_fragment$10(ctx) {
		let div;
		let div_class_value;
		let current;
		const default_slot_template = /*#slots*/ ctx[3].default;
		const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[2], null);

		return {
			c() {
				div = element("div");
				if (default_slot) default_slot.c();
				attr(div, "id", /*id*/ ctx[0]);
				attr(div, "class", div_class_value = "block " + /*classes*/ ctx[1]);
			},
			m(target, anchor) {
				insert(target, div, anchor);

				if (default_slot) {
					default_slot.m(div, null);
				}

				current = true;
			},
			p(ctx, [dirty]) {
				if (default_slot) {
					if (default_slot.p && (!current || dirty & /*$$scope*/ 4)) {
						update_slot_base(
							default_slot,
							default_slot_template,
							ctx,
							/*$$scope*/ ctx[2],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[2])
							: get_slot_changes(default_slot_template, /*$$scope*/ ctx[2], dirty, null),
							null
						);
					}
				}

				if (!current || dirty & /*id*/ 1) {
					attr(div, "id", /*id*/ ctx[0]);
				}

				if (!current || dirty & /*classes*/ 2 && div_class_value !== (div_class_value = "block " + /*classes*/ ctx[1])) {
					attr(div, "class", div_class_value);
				}
			},
			i(local) {
				if (current) return;
				transition_in(default_slot, local);
				current = true;
			},
			o(local) {
				transition_out(default_slot, local);
				current = false;
			},
			d(detaching) {
				if (detaching) detach(div);
				if (default_slot) default_slot.d(detaching);
			}
		};
	}

	function instance$10($$self, $$props, $$invalidate) {
		let { $$slots: slots = {}, $$scope } = $$props;
		let { id = '' } = $$props;
		let { classes = '' } = $$props;

		$$self.$$set = $$props => {
			if ('id' in $$props) $$invalidate(0, id = $$props.id);
			if ('classes' in $$props) $$invalidate(1, classes = $$props.classes);
			if ('$$scope' in $$props) $$invalidate(2, $$scope = $$props.$$scope);
		};

		return [id, classes, $$scope, slots];
	}

	class Ui_block extends SvelteComponent {
		constructor(options) {
			super();
			init(this, options, instance$10, create_fragment$10, safe_not_equal, { id: 0, classes: 1 });
		}
	}

	/* src/elements/block/ui.box.svelte generated by Svelte v3.44.3 */

	function create_fragment$$(ctx) {
		let div;
		let div_class_value;
		let current;
		const default_slot_template = /*#slots*/ ctx[3].default;
		const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[2], null);

		return {
			c() {
				div = element("div");
				if (default_slot) default_slot.c();
				attr(div, "id", /*id*/ ctx[0]);
				attr(div, "class", div_class_value = "box " + /*classes*/ ctx[1] + "");
			},
			m(target, anchor) {
				insert(target, div, anchor);

				if (default_slot) {
					default_slot.m(div, null);
				}

				current = true;
			},
			p(ctx, [dirty]) {
				if (default_slot) {
					if (default_slot.p && (!current || dirty & /*$$scope*/ 4)) {
						update_slot_base(
							default_slot,
							default_slot_template,
							ctx,
							/*$$scope*/ ctx[2],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[2])
							: get_slot_changes(default_slot_template, /*$$scope*/ ctx[2], dirty, null),
							null
						);
					}
				}

				if (!current || dirty & /*id*/ 1) {
					attr(div, "id", /*id*/ ctx[0]);
				}

				if (!current || dirty & /*classes*/ 2 && div_class_value !== (div_class_value = "box " + /*classes*/ ctx[1] + "")) {
					attr(div, "class", div_class_value);
				}
			},
			i(local) {
				if (current) return;
				transition_in(default_slot, local);
				current = true;
			},
			o(local) {
				transition_out(default_slot, local);
				current = false;
			},
			d(detaching) {
				if (detaching) detach(div);
				if (default_slot) default_slot.d(detaching);
			}
		};
	}

	function instance$$($$self, $$props, $$invalidate) {
		let { $$slots: slots = {}, $$scope } = $$props;
		let { id = '' } = $$props;
		let { classes = '' } = $$props;

		$$self.$$set = $$props => {
			if ('id' in $$props) $$invalidate(0, id = $$props.id);
			if ('classes' in $$props) $$invalidate(1, classes = $$props.classes);
			if ('$$scope' in $$props) $$invalidate(2, $$scope = $$props.$$scope);
		};

		return [id, classes, $$scope, slots];
	}

	class Ui_box extends SvelteComponent {
		constructor(options) {
			super();
			init(this, options, instance$$, create_fragment$$, safe_not_equal, { id: 0, classes: 1 });
		}
	}

	/* src/elements/block/ui.content.svelte generated by Svelte v3.44.3 */

	function create_fragment$_(ctx) {
		let div;
		let div_class_value;
		let current;
		const default_slot_template = /*#slots*/ ctx[3].default;
		const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[2], null);

		return {
			c() {
				div = element("div");
				if (default_slot) default_slot.c();
				attr(div, "id", /*id*/ ctx[0]);
				attr(div, "class", div_class_value = "content " + /*classes*/ ctx[1]);
			},
			m(target, anchor) {
				insert(target, div, anchor);

				if (default_slot) {
					default_slot.m(div, null);
				}

				current = true;
			},
			p(ctx, [dirty]) {
				if (default_slot) {
					if (default_slot.p && (!current || dirty & /*$$scope*/ 4)) {
						update_slot_base(
							default_slot,
							default_slot_template,
							ctx,
							/*$$scope*/ ctx[2],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[2])
							: get_slot_changes(default_slot_template, /*$$scope*/ ctx[2], dirty, null),
							null
						);
					}
				}

				if (!current || dirty & /*id*/ 1) {
					attr(div, "id", /*id*/ ctx[0]);
				}

				if (!current || dirty & /*classes*/ 2 && div_class_value !== (div_class_value = "content " + /*classes*/ ctx[1])) {
					attr(div, "class", div_class_value);
				}
			},
			i(local) {
				if (current) return;
				transition_in(default_slot, local);
				current = true;
			},
			o(local) {
				transition_out(default_slot, local);
				current = false;
			},
			d(detaching) {
				if (detaching) detach(div);
				if (default_slot) default_slot.d(detaching);
			}
		};
	}

	function instance$_($$self, $$props, $$invalidate) {
		let { $$slots: slots = {}, $$scope } = $$props;
		let { id = '' } = $$props;
		let { classes = '' } = $$props;

		$$self.$$set = $$props => {
			if ('id' in $$props) $$invalidate(0, id = $$props.id);
			if ('classes' in $$props) $$invalidate(1, classes = $$props.classes);
			if ('$$scope' in $$props) $$invalidate(2, $$scope = $$props.$$scope);
		};

		return [id, classes, $$scope, slots];
	}

	class Ui_content extends SvelteComponent {
		constructor(options) {
			super();
			init(this, options, instance$_, create_fragment$_, safe_not_equal, { id: 0, classes: 1 });
		}
	}

	var index$8 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		UIBlock: Ui_block,
		UIBox: Ui_box,
		UIContent: Ui_content
	});

	/* src/elements/various/ui.booleans.svelte generated by Svelte v3.44.3 */

	function get_each_context$f(ctx, list, i) {
		const child_ctx = ctx.slice();
		child_ctx[3] = list[i];
		return child_ctx;
	}

	// (10:0) {:else}
	function create_else_block$t(ctx) {
		let span;
		let t;

		return {
			c() {
				span = element("span");
				t = text(/*NO*/ ctx[1]);
				attr(span, "class", "tag is-danger");
			},
			m(target, anchor) {
				insert(target, span, anchor);
				append(span, t);
			},
			p(ctx, dirty) {
				if (dirty & /*NO*/ 2) set_data(t, /*NO*/ ctx[1]);
			},
			d(detaching) {
				if (detaching) detach(span);
			}
		};
	}

	// (8:0) {#if item.value }
	function create_if_block$C(ctx) {
		let span;
		let t;

		return {
			c() {
				span = element("span");
				t = text(/*YES*/ ctx[0]);
				attr(span, "class", "tag is-success");
			},
			m(target, anchor) {
				insert(target, span, anchor);
				append(span, t);
			},
			p(ctx, dirty) {
				if (dirty & /*YES*/ 1) set_data(t, /*YES*/ ctx[0]);
			},
			d(detaching) {
				if (detaching) detach(span);
			}
		};
	}

	// (7:0) {#each values as item }
	function create_each_block$f(ctx) {
		let if_block_anchor;

		function select_block_type(ctx, dirty) {
			if (/*item*/ ctx[3].value) return create_if_block$C;
			return create_else_block$t;
		}

		let current_block_type = select_block_type(ctx);
		let if_block = current_block_type(ctx);

		return {
			c() {
				if_block.c();
				if_block_anchor = empty();
			},
			m(target, anchor) {
				if_block.m(target, anchor);
				insert(target, if_block_anchor, anchor);
			},
			p(ctx, dirty) {
				if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block.d(1);
					if_block = current_block_type(ctx);

					if (if_block) {
						if_block.c();
						if_block.m(if_block_anchor.parentNode, if_block_anchor);
					}
				}
			},
			d(detaching) {
				if_block.d(detaching);
				if (detaching) detach(if_block_anchor);
			}
		};
	}

	function create_fragment$Z(ctx) {
		let each_1_anchor;
		let each_value = /*values*/ ctx[2];
		let each_blocks = [];

		for (let i = 0; i < each_value.length; i += 1) {
			each_blocks[i] = create_each_block$f(get_each_context$f(ctx, each_value, i));
		}

		return {
			c() {
				for (let i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].c();
				}

				each_1_anchor = empty();
			},
			m(target, anchor) {
				for (let i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].m(target, anchor);
				}

				insert(target, each_1_anchor, anchor);
			},
			p(ctx, [dirty]) {
				if (dirty & /*YES, values, NO*/ 7) {
					each_value = /*values*/ ctx[2];
					let i;

					for (i = 0; i < each_value.length; i += 1) {
						const child_ctx = get_each_context$f(ctx, each_value, i);

						if (each_blocks[i]) {
							each_blocks[i].p(child_ctx, dirty);
						} else {
							each_blocks[i] = create_each_block$f(child_ctx);
							each_blocks[i].c();
							each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
						}
					}

					for (; i < each_blocks.length; i += 1) {
						each_blocks[i].d(1);
					}

					each_blocks.length = each_value.length;
				}
			},
			i: noop,
			o: noop,
			d(detaching) {
				destroy_each(each_blocks, detaching);
				if (detaching) detach(each_1_anchor);
			}
		};
	}

	function instance$Z($$self, $$props, $$invalidate) {
		let { YES = 'ÐÐ°' } = $$props;
		let { NO = 'ÐÐµÑ' } = $$props;
		let { values = [] } = $$props;

		$$self.$$set = $$props => {
			if ('YES' in $$props) $$invalidate(0, YES = $$props.YES);
			if ('NO' in $$props) $$invalidate(1, NO = $$props.NO);
			if ('values' in $$props) $$invalidate(2, values = $$props.values);
		};

		return [YES, NO, values];
	}

	class Ui_booleans extends SvelteComponent {
		constructor(options) {
			super();
			init(this, options, instance$Z, create_fragment$Z, safe_not_equal, { YES: 0, NO: 1, values: 2 });
		}
	}

	function ownKeys(object, enumerableOnly) {
	  var keys = Object.keys(object);

	  if (Object.getOwnPropertySymbols) {
	    var symbols = Object.getOwnPropertySymbols(object);
	    enumerableOnly && (symbols = symbols.filter(function (sym) {
	      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
	    })), keys.push.apply(keys, symbols);
	  }

	  return keys;
	}

	function _objectSpread2(target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = null != arguments[i] ? arguments[i] : {};
	    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
	      _defineProperty(target, key, source[key]);
	    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
	      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
	    });
	  }

	  return target;
	}

	function _typeof(obj) {
	  "@babel/helpers - typeof";

	  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
	    return typeof obj;
	  } : function (obj) {
	    return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
	  }, _typeof(obj);
	}

	function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
	  try {
	    var info = gen[key](arg);
	    var value = info.value;
	  } catch (error) {
	    reject(error);
	    return;
	  }

	  if (info.done) {
	    resolve(value);
	  } else {
	    Promise.resolve(value).then(_next, _throw);
	  }
	}

	function _asyncToGenerator(fn) {
	  return function () {
	    var self = this,
	        args = arguments;
	    return new Promise(function (resolve, reject) {
	      var gen = fn.apply(self, args);

	      function _next(value) {
	        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
	      }

	      function _throw(err) {
	        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
	      }

	      _next(undefined);
	    });
	  };
	}

	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}

	function _defineProperties(target, props) {
	  for (var i = 0; i < props.length; i++) {
	    var descriptor = props[i];
	    descriptor.enumerable = descriptor.enumerable || false;
	    descriptor.configurable = true;
	    if ("value" in descriptor) descriptor.writable = true;
	    Object.defineProperty(target, descriptor.key, descriptor);
	  }
	}

	function _createClass(Constructor, protoProps, staticProps) {
	  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
	  if (staticProps) _defineProperties(Constructor, staticProps);
	  Object.defineProperty(Constructor, "prototype", {
	    writable: false
	  });
	  return Constructor;
	}

	function _defineProperty(obj, key, value) {
	  if (key in obj) {
	    Object.defineProperty(obj, key, {
	      value: value,
	      enumerable: true,
	      configurable: true,
	      writable: true
	    });
	  } else {
	    obj[key] = value;
	  }

	  return obj;
	}

	function _inherits(subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function");
	  }

	  subClass.prototype = Object.create(superClass && superClass.prototype, {
	    constructor: {
	      value: subClass,
	      writable: true,
	      configurable: true
	    }
	  });
	  Object.defineProperty(subClass, "prototype", {
	    writable: false
	  });
	  if (superClass) _setPrototypeOf(subClass, superClass);
	}

	function _getPrototypeOf(o) {
	  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
	    return o.__proto__ || Object.getPrototypeOf(o);
	  };
	  return _getPrototypeOf(o);
	}

	function _setPrototypeOf(o, p) {
	  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
	    o.__proto__ = p;
	    return o;
	  };

	  return _setPrototypeOf(o, p);
	}

	function _isNativeReflectConstruct() {
	  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
	  if (Reflect.construct.sham) return false;
	  if (typeof Proxy === "function") return true;

	  try {
	    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
	    return true;
	  } catch (e) {
	    return false;
	  }
	}

	function _assertThisInitialized(self) {
	  if (self === void 0) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }

	  return self;
	}

	function _possibleConstructorReturn(self, call) {
	  if (call && (typeof call === "object" || typeof call === "function")) {
	    return call;
	  } else if (call !== void 0) {
	    throw new TypeError("Derived constructors may only return object or undefined");
	  }

	  return _assertThisInitialized(self);
	}

	function _createSuper(Derived) {
	  var hasNativeReflectConstruct = _isNativeReflectConstruct();

	  return function _createSuperInternal() {
	    var Super = _getPrototypeOf(Derived),
	        result;

	    if (hasNativeReflectConstruct) {
	      var NewTarget = _getPrototypeOf(this).constructor;

	      result = Reflect.construct(Super, arguments, NewTarget);
	    } else {
	      result = Super.apply(this, arguments);
	    }

	    return _possibleConstructorReturn(this, result);
	  };
	}

	function _toArray(arr) {
	  return _arrayWithHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableRest();
	}

	function _toConsumableArray(arr) {
	  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
	}

	function _arrayWithoutHoles(arr) {
	  if (Array.isArray(arr)) return _arrayLikeToArray(arr);
	}

	function _arrayWithHoles(arr) {
	  if (Array.isArray(arr)) return arr;
	}

	function _iterableToArray(iter) {
	  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
	}

	function _unsupportedIterableToArray(o, minLen) {
	  if (!o) return;
	  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
	  var n = Object.prototype.toString.call(o).slice(8, -1);
	  if (n === "Object" && o.constructor) n = o.constructor.name;
	  if (n === "Map" || n === "Set") return Array.from(o);
	  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
	}

	function _arrayLikeToArray(arr, len) {
	  if (len == null || len > arr.length) len = arr.length;

	  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

	  return arr2;
	}

	function _nonIterableSpread() {
	  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
	}

	function _nonIterableRest() {
	  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
	}

	function _createForOfIteratorHelper(o, allowArrayLike) {
	  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];

	  if (!it) {
	    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
	      if (it) o = it;
	      var i = 0;

	      var F = function () {};

	      return {
	        s: F,
	        n: function () {
	          if (i >= o.length) return {
	            done: true
	          };
	          return {
	            done: false,
	            value: o[i++]
	          };
	        },
	        e: function (e) {
	          throw e;
	        },
	        f: F
	      };
	    }

	    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
	  }

	  var normalCompletion = true,
	      didErr = false,
	      err;
	  return {
	    s: function () {
	      it = it.call(o);
	    },
	    n: function () {
	      var step = it.next();
	      normalCompletion = step.done;
	      return step;
	    },
	    e: function (e) {
	      didErr = true;
	      err = e;
	    },
	    f: function () {
	      try {
	        if (!normalCompletion && it.return != null) it.return();
	      } finally {
	        if (didErr) throw err;
	      }
	    }
	  };
	}

	function _classPrivateFieldGet(receiver, privateMap) {
	  var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "get");

	  return _classApplyDescriptorGet(receiver, descriptor);
	}

	function _classPrivateFieldSet(receiver, privateMap, value) {
	  var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "set");

	  _classApplyDescriptorSet(receiver, descriptor, value);

	  return value;
	}

	function _classExtractFieldDescriptor(receiver, privateMap, action) {
	  if (!privateMap.has(receiver)) {
	    throw new TypeError("attempted to " + action + " private field on non-instance");
	  }

	  return privateMap.get(receiver);
	}

	function _classApplyDescriptorGet(receiver, descriptor) {
	  if (descriptor.get) {
	    return descriptor.get.call(receiver);
	  }

	  return descriptor.value;
	}

	function _classApplyDescriptorSet(receiver, descriptor, value) {
	  if (descriptor.set) {
	    descriptor.set.call(receiver, value);
	  } else {
	    if (!descriptor.writable) {
	      throw new TypeError("attempted to set read only private field");
	    }

	    descriptor.value = value;
	  }
	}

	function _classPrivateMethodGet(receiver, privateSet, fn) {
	  if (!privateSet.has(receiver)) {
	    throw new TypeError("attempted to get private field on non-instance");
	  }

	  return fn;
	}

	function _checkPrivateRedeclaration(obj, privateCollection) {
	  if (privateCollection.has(obj)) {
	    throw new TypeError("Cannot initialize the same private elements twice on an object");
	  }
	}

	function _classPrivateFieldInitSpec(obj, privateMap, value) {
	  _checkPrivateRedeclaration(obj, privateMap);

	  privateMap.set(obj, value);
	}

	function _classPrivateMethodInitSpec(obj, privateSet) {
	  _checkPrivateRedeclaration(obj, privateSet);

	  privateSet.add(obj);
	}

	createCommonjsModule(function (module) {
	/**
	 * Copyright (c) 2014-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	!(function(global) {

	  var Op = Object.prototype;
	  var hasOwn = Op.hasOwnProperty;
	  var undefined$1; // More compressible than void 0.
	  var $Symbol = typeof Symbol === "function" ? Symbol : {};
	  var iteratorSymbol = $Symbol.iterator || "@@iterator";
	  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
	  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
	  var runtime = global.regeneratorRuntime;
	  if (runtime) {
	    {
	      // If regeneratorRuntime is defined globally and we're in a module,
	      // make the exports object identical to regeneratorRuntime.
	      module.exports = runtime;
	    }
	    // Don't bother evaluating the rest of this file if the runtime was
	    // already defined globally.
	    return;
	  }

	  // Define the runtime globally (as expected by generated code) as either
	  // module.exports (if we're in a module) or a new, empty object.
	  runtime = global.regeneratorRuntime = module.exports ;

	  function wrap(innerFn, outerFn, self, tryLocsList) {
	    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
	    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
	    var generator = Object.create(protoGenerator.prototype);
	    var context = new Context(tryLocsList || []);

	    // The ._invoke method unifies the implementations of the .next,
	    // .throw, and .return methods.
	    generator._invoke = makeInvokeMethod(innerFn, self, context);

	    return generator;
	  }
	  runtime.wrap = wrap;

	  // Try/catch helper to minimize deoptimizations. Returns a completion
	  // record like context.tryEntries[i].completion. This interface could
	  // have been (and was previously) designed to take a closure to be
	  // invoked without arguments, but in all the cases we care about we
	  // already have an existing method we want to call, so there's no need
	  // to create a new function object. We can even get away with assuming
	  // the method takes exactly one argument, since that happens to be true
	  // in every case, so we don't have to touch the arguments object. The
	  // only additional allocation required is the completion record, which
	  // has a stable shape and so hopefully should be cheap to allocate.
	  function tryCatch(fn, obj, arg) {
	    try {
	      return { type: "normal", arg: fn.call(obj, arg) };
	    } catch (err) {
	      return { type: "throw", arg: err };
	    }
	  }

	  var GenStateSuspendedStart = "suspendedStart";
	  var GenStateSuspendedYield = "suspendedYield";
	  var GenStateExecuting = "executing";
	  var GenStateCompleted = "completed";

	  // Returning this object from the innerFn has the same effect as
	  // breaking out of the dispatch switch statement.
	  var ContinueSentinel = {};

	  // Dummy constructor functions that we use as the .constructor and
	  // .constructor.prototype properties for functions that return Generator
	  // objects. For full spec compliance, you may wish to configure your
	  // minifier not to mangle the names of these two functions.
	  function Generator() {}
	  function GeneratorFunction() {}
	  function GeneratorFunctionPrototype() {}

	  // This is a polyfill for %IteratorPrototype% for environments that
	  // don't natively support it.
	  var IteratorPrototype = {};
	  IteratorPrototype[iteratorSymbol] = function () {
	    return this;
	  };

	  var getProto = Object.getPrototypeOf;
	  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
	  if (NativeIteratorPrototype &&
	      NativeIteratorPrototype !== Op &&
	      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
	    // This environment has a native %IteratorPrototype%; use it instead
	    // of the polyfill.
	    IteratorPrototype = NativeIteratorPrototype;
	  }

	  var Gp = GeneratorFunctionPrototype.prototype =
	    Generator.prototype = Object.create(IteratorPrototype);
	  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
	  GeneratorFunctionPrototype.constructor = GeneratorFunction;
	  GeneratorFunctionPrototype[toStringTagSymbol] =
	    GeneratorFunction.displayName = "GeneratorFunction";

	  // Helper for defining the .next, .throw, and .return methods of the
	  // Iterator interface in terms of a single ._invoke method.
	  function defineIteratorMethods(prototype) {
	    ["next", "throw", "return"].forEach(function(method) {
	      prototype[method] = function(arg) {
	        return this._invoke(method, arg);
	      };
	    });
	  }

	  runtime.isGeneratorFunction = function(genFun) {
	    var ctor = typeof genFun === "function" && genFun.constructor;
	    return ctor
	      ? ctor === GeneratorFunction ||
	        // For the native GeneratorFunction constructor, the best we can
	        // do is to check its .name property.
	        (ctor.displayName || ctor.name) === "GeneratorFunction"
	      : false;
	  };

	  runtime.mark = function(genFun) {
	    if (Object.setPrototypeOf) {
	      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
	    } else {
	      genFun.__proto__ = GeneratorFunctionPrototype;
	      if (!(toStringTagSymbol in genFun)) {
	        genFun[toStringTagSymbol] = "GeneratorFunction";
	      }
	    }
	    genFun.prototype = Object.create(Gp);
	    return genFun;
	  };

	  // Within the body of any async function, `await x` is transformed to
	  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
	  // `hasOwn.call(value, "__await")` to determine if the yielded value is
	  // meant to be awaited.
	  runtime.awrap = function(arg) {
	    return { __await: arg };
	  };

	  function AsyncIterator(generator) {
	    function invoke(method, arg, resolve, reject) {
	      var record = tryCatch(generator[method], generator, arg);
	      if (record.type === "throw") {
	        reject(record.arg);
	      } else {
	        var result = record.arg;
	        var value = result.value;
	        if (value &&
	            typeof value === "object" &&
	            hasOwn.call(value, "__await")) {
	          return Promise.resolve(value.__await).then(function(value) {
	            invoke("next", value, resolve, reject);
	          }, function(err) {
	            invoke("throw", err, resolve, reject);
	          });
	        }

	        return Promise.resolve(value).then(function(unwrapped) {
	          // When a yielded Promise is resolved, its final value becomes
	          // the .value of the Promise<{value,done}> result for the
	          // current iteration. If the Promise is rejected, however, the
	          // result for this iteration will be rejected with the same
	          // reason. Note that rejections of yielded Promises are not
	          // thrown back into the generator function, as is the case
	          // when an awaited Promise is rejected. This difference in
	          // behavior between yield and await is important, because it
	          // allows the consumer to decide what to do with the yielded
	          // rejection (swallow it and continue, manually .throw it back
	          // into the generator, abandon iteration, whatever). With
	          // await, by contrast, there is no opportunity to examine the
	          // rejection reason outside the generator function, so the
	          // only option is to throw it from the await expression, and
	          // let the generator function handle the exception.
	          result.value = unwrapped;
	          resolve(result);
	        }, reject);
	      }
	    }

	    var previousPromise;

	    function enqueue(method, arg) {
	      function callInvokeWithMethodAndArg() {
	        return new Promise(function(resolve, reject) {
	          invoke(method, arg, resolve, reject);
	        });
	      }

	      return previousPromise =
	        // If enqueue has been called before, then we want to wait until
	        // all previous Promises have been resolved before calling invoke,
	        // so that results are always delivered in the correct order. If
	        // enqueue has not been called before, then it is important to
	        // call invoke immediately, without waiting on a callback to fire,
	        // so that the async generator function has the opportunity to do
	        // any necessary setup in a predictable way. This predictability
	        // is why the Promise constructor synchronously invokes its
	        // executor callback, and why async functions synchronously
	        // execute code before the first await. Since we implement simple
	        // async functions in terms of async generators, it is especially
	        // important to get this right, even though it requires care.
	        previousPromise ? previousPromise.then(
	          callInvokeWithMethodAndArg,
	          // Avoid propagating failures to Promises returned by later
	          // invocations of the iterator.
	          callInvokeWithMethodAndArg
	        ) : callInvokeWithMethodAndArg();
	    }

	    // Define the unified helper method that is used to implement .next,
	    // .throw, and .return (see defineIteratorMethods).
	    this._invoke = enqueue;
	  }

	  defineIteratorMethods(AsyncIterator.prototype);
	  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
	    return this;
	  };
	  runtime.AsyncIterator = AsyncIterator;

	  // Note that simple async functions are implemented on top of
	  // AsyncIterator objects; they just return a Promise for the value of
	  // the final result produced by the iterator.
	  runtime.async = function(innerFn, outerFn, self, tryLocsList) {
	    var iter = new AsyncIterator(
	      wrap(innerFn, outerFn, self, tryLocsList)
	    );

	    return runtime.isGeneratorFunction(outerFn)
	      ? iter // If outerFn is a generator, return the full iterator.
	      : iter.next().then(function(result) {
	          return result.done ? result.value : iter.next();
	        });
	  };

	  function makeInvokeMethod(innerFn, self, context) {
	    var state = GenStateSuspendedStart;

	    return function invoke(method, arg) {
	      if (state === GenStateExecuting) {
	        throw new Error("Generator is already running");
	      }

	      if (state === GenStateCompleted) {
	        if (method === "throw") {
	          throw arg;
	        }

	        // Be forgiving, per 25.3.3.3.3 of the spec:
	        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
	        return doneResult();
	      }

	      context.method = method;
	      context.arg = arg;

	      while (true) {
	        var delegate = context.delegate;
	        if (delegate) {
	          var delegateResult = maybeInvokeDelegate(delegate, context);
	          if (delegateResult) {
	            if (delegateResult === ContinueSentinel) continue;
	            return delegateResult;
	          }
	        }

	        if (context.method === "next") {
	          // Setting context._sent for legacy support of Babel's
	          // function.sent implementation.
	          context.sent = context._sent = context.arg;

	        } else if (context.method === "throw") {
	          if (state === GenStateSuspendedStart) {
	            state = GenStateCompleted;
	            throw context.arg;
	          }

	          context.dispatchException(context.arg);

	        } else if (context.method === "return") {
	          context.abrupt("return", context.arg);
	        }

	        state = GenStateExecuting;

	        var record = tryCatch(innerFn, self, context);
	        if (record.type === "normal") {
	          // If an exception is thrown from innerFn, we leave state ===
	          // GenStateExecuting and loop back for another invocation.
	          state = context.done
	            ? GenStateCompleted
	            : GenStateSuspendedYield;

	          if (record.arg === ContinueSentinel) {
	            continue;
	          }

	          return {
	            value: record.arg,
	            done: context.done
	          };

	        } else if (record.type === "throw") {
	          state = GenStateCompleted;
	          // Dispatch the exception by looping back around to the
	          // context.dispatchException(context.arg) call above.
	          context.method = "throw";
	          context.arg = record.arg;
	        }
	      }
	    };
	  }

	  // Call delegate.iterator[context.method](context.arg) and handle the
	  // result, either by returning a { value, done } result from the
	  // delegate iterator, or by modifying context.method and context.arg,
	  // setting context.delegate to null, and returning the ContinueSentinel.
	  function maybeInvokeDelegate(delegate, context) {
	    var method = delegate.iterator[context.method];
	    if (method === undefined$1) {
	      // A .throw or .return when the delegate iterator has no .throw
	      // method always terminates the yield* loop.
	      context.delegate = null;

	      if (context.method === "throw") {
	        if (delegate.iterator.return) {
	          // If the delegate iterator has a return method, give it a
	          // chance to clean up.
	          context.method = "return";
	          context.arg = undefined$1;
	          maybeInvokeDelegate(delegate, context);

	          if (context.method === "throw") {
	            // If maybeInvokeDelegate(context) changed context.method from
	            // "return" to "throw", let that override the TypeError below.
	            return ContinueSentinel;
	          }
	        }

	        context.method = "throw";
	        context.arg = new TypeError(
	          "The iterator does not provide a 'throw' method");
	      }

	      return ContinueSentinel;
	    }

	    var record = tryCatch(method, delegate.iterator, context.arg);

	    if (record.type === "throw") {
	      context.method = "throw";
	      context.arg = record.arg;
	      context.delegate = null;
	      return ContinueSentinel;
	    }

	    var info = record.arg;

	    if (! info) {
	      context.method = "throw";
	      context.arg = new TypeError("iterator result is not an object");
	      context.delegate = null;
	      return ContinueSentinel;
	    }

	    if (info.done) {
	      // Assign the result of the finished delegate to the temporary
	      // variable specified by delegate.resultName (see delegateYield).
	      context[delegate.resultName] = info.value;

	      // Resume execution at the desired location (see delegateYield).
	      context.next = delegate.nextLoc;

	      // If context.method was "throw" but the delegate handled the
	      // exception, let the outer generator proceed normally. If
	      // context.method was "next", forget context.arg since it has been
	      // "consumed" by the delegate iterator. If context.method was
	      // "return", allow the original .return call to continue in the
	      // outer generator.
	      if (context.method !== "return") {
	        context.method = "next";
	        context.arg = undefined$1;
	      }

	    } else {
	      // Re-yield the result returned by the delegate method.
	      return info;
	    }

	    // The delegate iterator is finished, so forget it and continue with
	    // the outer generator.
	    context.delegate = null;
	    return ContinueSentinel;
	  }

	  // Define Generator.prototype.{next,throw,return} in terms of the
	  // unified ._invoke helper method.
	  defineIteratorMethods(Gp);

	  Gp[toStringTagSymbol] = "Generator";

	  // A Generator should always return itself as the iterator object when the
	  // @@iterator function is called on it. Some browsers' implementations of the
	  // iterator prototype chain incorrectly implement this, causing the Generator
	  // object to not be returned from this call. This ensures that doesn't happen.
	  // See https://github.com/facebook/regenerator/issues/274 for more details.
	  Gp[iteratorSymbol] = function() {
	    return this;
	  };

	  Gp.toString = function() {
	    return "[object Generator]";
	  };

	  function pushTryEntry(locs) {
	    var entry = { tryLoc: locs[0] };

	    if (1 in locs) {
	      entry.catchLoc = locs[1];
	    }

	    if (2 in locs) {
	      entry.finallyLoc = locs[2];
	      entry.afterLoc = locs[3];
	    }

	    this.tryEntries.push(entry);
	  }

	  function resetTryEntry(entry) {
	    var record = entry.completion || {};
	    record.type = "normal";
	    delete record.arg;
	    entry.completion = record;
	  }

	  function Context(tryLocsList) {
	    // The root entry object (effectively a try statement without a catch
	    // or a finally block) gives us a place to store values thrown from
	    // locations where there is no enclosing try statement.
	    this.tryEntries = [{ tryLoc: "root" }];
	    tryLocsList.forEach(pushTryEntry, this);
	    this.reset(true);
	  }

	  runtime.keys = function(object) {
	    var keys = [];
	    for (var key in object) {
	      keys.push(key);
	    }
	    keys.reverse();

	    // Rather than returning an object with a next method, we keep
	    // things simple and return the next function itself.
	    return function next() {
	      while (keys.length) {
	        var key = keys.pop();
	        if (key in object) {
	          next.value = key;
	          next.done = false;
	          return next;
	        }
	      }

	      // To avoid creating an additional object, we just hang the .value
	      // and .done properties off the next function object itself. This
	      // also ensures that the minifier will not anonymize the function.
	      next.done = true;
	      return next;
	    };
	  };

	  function values(iterable) {
	    if (iterable) {
	      var iteratorMethod = iterable[iteratorSymbol];
	      if (iteratorMethod) {
	        return iteratorMethod.call(iterable);
	      }

	      if (typeof iterable.next === "function") {
	        return iterable;
	      }

	      if (!isNaN(iterable.length)) {
	        var i = -1, next = function next() {
	          while (++i < iterable.length) {
	            if (hasOwn.call(iterable, i)) {
	              next.value = iterable[i];
	              next.done = false;
	              return next;
	            }
	          }

	          next.value = undefined$1;
	          next.done = true;

	          return next;
	        };

	        return next.next = next;
	      }
	    }

	    // Return an iterator with no values.
	    return { next: doneResult };
	  }
	  runtime.values = values;

	  function doneResult() {
	    return { value: undefined$1, done: true };
	  }

	  Context.prototype = {
	    constructor: Context,

	    reset: function(skipTempReset) {
	      this.prev = 0;
	      this.next = 0;
	      // Resetting context._sent for legacy support of Babel's
	      // function.sent implementation.
	      this.sent = this._sent = undefined$1;
	      this.done = false;
	      this.delegate = null;

	      this.method = "next";
	      this.arg = undefined$1;

	      this.tryEntries.forEach(resetTryEntry);

	      if (!skipTempReset) {
	        for (var name in this) {
	          // Not sure about the optimal order of these conditions:
	          if (name.charAt(0) === "t" &&
	              hasOwn.call(this, name) &&
	              !isNaN(+name.slice(1))) {
	            this[name] = undefined$1;
	          }
	        }
	      }
	    },

	    stop: function() {
	      this.done = true;

	      var rootEntry = this.tryEntries[0];
	      var rootRecord = rootEntry.completion;
	      if (rootRecord.type === "throw") {
	        throw rootRecord.arg;
	      }

	      return this.rval;
	    },

	    dispatchException: function(exception) {
	      if (this.done) {
	        throw exception;
	      }

	      var context = this;
	      function handle(loc, caught) {
	        record.type = "throw";
	        record.arg = exception;
	        context.next = loc;

	        if (caught) {
	          // If the dispatched exception was caught by a catch block,
	          // then let that catch block handle the exception normally.
	          context.method = "next";
	          context.arg = undefined$1;
	        }

	        return !! caught;
	      }

	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        var record = entry.completion;

	        if (entry.tryLoc === "root") {
	          // Exception thrown outside of any try block that could handle
	          // it, so set the completion value of the entire function to
	          // throw the exception.
	          return handle("end");
	        }

	        if (entry.tryLoc <= this.prev) {
	          var hasCatch = hasOwn.call(entry, "catchLoc");
	          var hasFinally = hasOwn.call(entry, "finallyLoc");

	          if (hasCatch && hasFinally) {
	            if (this.prev < entry.catchLoc) {
	              return handle(entry.catchLoc, true);
	            } else if (this.prev < entry.finallyLoc) {
	              return handle(entry.finallyLoc);
	            }

	          } else if (hasCatch) {
	            if (this.prev < entry.catchLoc) {
	              return handle(entry.catchLoc, true);
	            }

	          } else if (hasFinally) {
	            if (this.prev < entry.finallyLoc) {
	              return handle(entry.finallyLoc);
	            }

	          } else {
	            throw new Error("try statement without catch or finally");
	          }
	        }
	      }
	    },

	    abrupt: function(type, arg) {
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        if (entry.tryLoc <= this.prev &&
	            hasOwn.call(entry, "finallyLoc") &&
	            this.prev < entry.finallyLoc) {
	          var finallyEntry = entry;
	          break;
	        }
	      }

	      if (finallyEntry &&
	          (type === "break" ||
	           type === "continue") &&
	          finallyEntry.tryLoc <= arg &&
	          arg <= finallyEntry.finallyLoc) {
	        // Ignore the finally entry if control is not jumping to a
	        // location outside the try/catch block.
	        finallyEntry = null;
	      }

	      var record = finallyEntry ? finallyEntry.completion : {};
	      record.type = type;
	      record.arg = arg;

	      if (finallyEntry) {
	        this.method = "next";
	        this.next = finallyEntry.finallyLoc;
	        return ContinueSentinel;
	      }

	      return this.complete(record);
	    },

	    complete: function(record, afterLoc) {
	      if (record.type === "throw") {
	        throw record.arg;
	      }

	      if (record.type === "break" ||
	          record.type === "continue") {
	        this.next = record.arg;
	      } else if (record.type === "return") {
	        this.rval = this.arg = record.arg;
	        this.method = "return";
	        this.next = "end";
	      } else if (record.type === "normal" && afterLoc) {
	        this.next = afterLoc;
	      }

	      return ContinueSentinel;
	    },

	    finish: function(finallyLoc) {
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        if (entry.finallyLoc === finallyLoc) {
	          this.complete(entry.completion, entry.afterLoc);
	          resetTryEntry(entry);
	          return ContinueSentinel;
	        }
	      }
	    },

	    "catch": function(tryLoc) {
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        if (entry.tryLoc === tryLoc) {
	          var record = entry.completion;
	          if (record.type === "throw") {
	            var thrown = record.arg;
	            resetTryEntry(entry);
	          }
	          return thrown;
	        }
	      }

	      // The context.catch method must only be called with a location
	      // argument that corresponds to a known catch block.
	      throw new Error("illegal catch attempt");
	    },

	    delegateYield: function(iterable, resultName, nextLoc) {
	      this.delegate = {
	        iterator: values(iterable),
	        resultName: resultName,
	        nextLoc: nextLoc
	      };

	      if (this.method === "next") {
	        // Deliberately forget the last sent value so that we don't
	        // accidentally pass it on to the delegate.
	        this.arg = undefined$1;
	      }

	      return ContinueSentinel;
	    }
	  };
	})(
	  // In sloppy mode, unbound `this` refers to the global object, fallback to
	  // Function constructor if we're in global strict mode. That is sadly a form
	  // of indirect eval which violates Content Security Policy.
	  (function() { return this })() || Function("return this")()
	);
	});

	var FunctionPrototype$1 = Function.prototype;
	var apply = FunctionPrototype$1.apply;
	var bind$1 = FunctionPrototype$1.bind;
	var call = FunctionPrototype$1.call;

	// eslint-disable-next-line es/no-reflect -- safe
	var functionApply = typeof Reflect == 'object' && Reflect.apply || (bind$1 ? call.bind(apply) : function () {
	  return call.apply(apply, arguments);
	});

	var String$3 = global_1.String;

	var toString_1 = function (argument) {
	  if (classof(argument) === 'Symbol') throw TypeError('Cannot convert a Symbol value to a string');
	  return String$3(argument);
	};

	// `Object.defineProperties` method
	// https://tc39.es/ecma262/#sec-object.defineproperties
	// eslint-disable-next-line es/no-object-defineproperties -- safe
	var f$3 = descriptors && !v8PrototypeDefineBug ? Object.defineProperties : function defineProperties(O, Properties) {
	  anObject(O);
	  var props = toIndexedObject(Properties);
	  var keys = objectKeys(Properties);
	  var length = keys.length;
	  var index = 0;
	  var key;
	  while (length > index) objectDefineProperty.f(O, key = keys[index++], props[key]);
	  return O;
	};

	var objectDefineProperties = {
		f: f$3
	};

	var html = getBuiltIn('document', 'documentElement');

	/* global ActiveXObject -- old IE, WSH */








	var GT = '>';
	var LT = '<';
	var PROTOTYPE$1 = 'prototype';
	var SCRIPT = 'script';
	var IE_PROTO$1 = sharedKey('IE_PROTO');

	var EmptyConstructor = function () { /* empty */ };

	var scriptTag = function (content) {
	  return LT + SCRIPT + GT + content + LT + '/' + SCRIPT + GT;
	};

	// Create object with fake `null` prototype: use ActiveX Object with cleared prototype
	var NullProtoObjectViaActiveX = function (activeXDocument) {
	  activeXDocument.write(scriptTag(''));
	  activeXDocument.close();
	  var temp = activeXDocument.parentWindow.Object;
	  activeXDocument = null; // avoid memory leak
	  return temp;
	};

	// Create object with fake `null` prototype: use iframe Object with cleared prototype
	var NullProtoObjectViaIFrame = function () {
	  // Thrash, waste and sodomy: IE GC bug
	  var iframe = documentCreateElement('iframe');
	  var JS = 'java' + SCRIPT + ':';
	  var iframeDocument;
	  iframe.style.display = 'none';
	  html.appendChild(iframe);
	  // https://github.com/zloirock/core-js/issues/475
	  iframe.src = String(JS);
	  iframeDocument = iframe.contentWindow.document;
	  iframeDocument.open();
	  iframeDocument.write(scriptTag('document.F=Object'));
	  iframeDocument.close();
	  return iframeDocument.F;
	};

	// Check for document.domain and active x support
	// No need to use active x approach when document.domain is not set
	// see https://github.com/es-shims/es5-shim/issues/150
	// variation of https://github.com/kitcambridge/es5-shim/commit/4f738ac066346
	// avoid IE GC bug
	var activeXDocument;
	var NullProtoObject = function () {
	  try {
	    activeXDocument = new ActiveXObject('htmlfile');
	  } catch (error) { /* ignore */ }
	  NullProtoObject = typeof document != 'undefined'
	    ? document.domain && activeXDocument
	      ? NullProtoObjectViaActiveX(activeXDocument) // old IE
	      : NullProtoObjectViaIFrame()
	    : NullProtoObjectViaActiveX(activeXDocument); // WSH
	  var length = enumBugKeys.length;
	  while (length--) delete NullProtoObject[PROTOTYPE$1][enumBugKeys[length]];
	  return NullProtoObject();
	};

	hiddenKeys$1[IE_PROTO$1] = true;

	// `Object.create` method
	// https://tc39.es/ecma262/#sec-object.create
	var objectCreate = Object.create || function create(O, Properties) {
	  var result;
	  if (O !== null) {
	    EmptyConstructor[PROTOTYPE$1] = anObject(O);
	    result = new EmptyConstructor();
	    EmptyConstructor[PROTOTYPE$1] = null;
	    // add "__proto__" for Object.getPrototypeOf polyfill
	    result[IE_PROTO$1] = O;
	  } else result = NullProtoObject();
	  return Properties === undefined ? result : objectDefineProperties.f(result, Properties);
	};

	var createProperty = function (object, key, value) {
	  var propertyKey = toPropertyKey(key);
	  if (propertyKey in object) objectDefineProperty.f(object, propertyKey, createPropertyDescriptor(0, value));
	  else object[propertyKey] = value;
	};

	var Array$3 = global_1.Array;
	var max$3 = Math.max;

	var arraySliceSimple = function (O, start, end) {
	  var length = lengthOfArrayLike(O);
	  var k = toAbsoluteIndex(start, length);
	  var fin = toAbsoluteIndex(end === undefined ? length : end, length);
	  var result = Array$3(max$3(fin - k, 0));
	  for (var n = 0; k < fin; k++, n++) createProperty(result, n, O[k]);
	  result.length = n;
	  return result;
	};

	/* eslint-disable es/no-object-getownpropertynames -- safe */


	var $getOwnPropertyNames$1 = objectGetOwnPropertyNames.f;


	var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
	  ? Object.getOwnPropertyNames(window) : [];

	var getWindowNames = function (it) {
	  try {
	    return $getOwnPropertyNames$1(it);
	  } catch (error) {
	    return arraySliceSimple(windowNames);
	  }
	};

	// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
	var f$2 = function getOwnPropertyNames(it) {
	  return windowNames && classofRaw(it) == 'Window'
	    ? getWindowNames(it)
	    : $getOwnPropertyNames$1(toIndexedObject(it));
	};

	var objectGetOwnPropertyNamesExternal = {
		f: f$2
	};

	var arraySlice$1 = functionUncurryThis([].slice);

	var f$1 = wellKnownSymbol;

	var wellKnownSymbolWrapped = {
		f: f$1
	};

	var path = global_1;

	var defineProperty$6 = objectDefineProperty.f;

	var defineWellKnownSymbol = function (NAME) {
	  var Symbol = path.Symbol || (path.Symbol = {});
	  if (!hasOwnProperty_1(Symbol, NAME)) defineProperty$6(Symbol, NAME, {
	    value: wellKnownSymbolWrapped.f(NAME)
	  });
	};

	var defineProperty$5 = objectDefineProperty.f;



	var TO_STRING_TAG$1 = wellKnownSymbol('toStringTag');

	var setToStringTag = function (target, TAG, STATIC) {
	  if (target && !STATIC) target = target.prototype;
	  if (target && !hasOwnProperty_1(target, TO_STRING_TAG$1)) {
	    defineProperty$5(target, TO_STRING_TAG$1, { configurable: true, value: TAG });
	  }
	};

	var $forEach = arrayIteration.forEach;

	var HIDDEN = sharedKey('hidden');
	var SYMBOL = 'Symbol';
	var PROTOTYPE = 'prototype';
	var TO_PRIMITIVE = wellKnownSymbol('toPrimitive');

	var setInternalState$4 = internalState.set;
	var getInternalState$4 = internalState.getterFor(SYMBOL);

	var ObjectPrototype$1 = Object[PROTOTYPE];
	var $Symbol = global_1.Symbol;
	var SymbolPrototype$1 = $Symbol && $Symbol[PROTOTYPE];
	var TypeError$c = global_1.TypeError;
	var QObject = global_1.QObject;
	var $stringify = getBuiltIn('JSON', 'stringify');
	var nativeGetOwnPropertyDescriptor = objectGetOwnPropertyDescriptor.f;
	var nativeDefineProperty = objectDefineProperty.f;
	var nativeGetOwnPropertyNames = objectGetOwnPropertyNamesExternal.f;
	var nativePropertyIsEnumerable = objectPropertyIsEnumerable.f;
	var push$2 = functionUncurryThis([].push);

	var AllSymbols = shared('symbols');
	var ObjectPrototypeSymbols = shared('op-symbols');
	var StringToSymbolRegistry = shared('string-to-symbol-registry');
	var SymbolToStringRegistry = shared('symbol-to-string-registry');
	var WellKnownSymbolsStore = shared('wks');

	// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
	var USE_SETTER = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;

	// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
	var setSymbolDescriptor = descriptors && fails(function () {
	  return objectCreate(nativeDefineProperty({}, 'a', {
	    get: function () { return nativeDefineProperty(this, 'a', { value: 7 }).a; }
	  })).a != 7;
	}) ? function (O, P, Attributes) {
	  var ObjectPrototypeDescriptor = nativeGetOwnPropertyDescriptor(ObjectPrototype$1, P);
	  if (ObjectPrototypeDescriptor) delete ObjectPrototype$1[P];
	  nativeDefineProperty(O, P, Attributes);
	  if (ObjectPrototypeDescriptor && O !== ObjectPrototype$1) {
	    nativeDefineProperty(ObjectPrototype$1, P, ObjectPrototypeDescriptor);
	  }
	} : nativeDefineProperty;

	var wrap = function (tag, description) {
	  var symbol = AllSymbols[tag] = objectCreate(SymbolPrototype$1);
	  setInternalState$4(symbol, {
	    type: SYMBOL,
	    tag: tag,
	    description: description
	  });
	  if (!descriptors) symbol.description = description;
	  return symbol;
	};

	var $defineProperty = function defineProperty(O, P, Attributes) {
	  if (O === ObjectPrototype$1) $defineProperty(ObjectPrototypeSymbols, P, Attributes);
	  anObject(O);
	  var key = toPropertyKey(P);
	  anObject(Attributes);
	  if (hasOwnProperty_1(AllSymbols, key)) {
	    if (!Attributes.enumerable) {
	      if (!hasOwnProperty_1(O, HIDDEN)) nativeDefineProperty(O, HIDDEN, createPropertyDescriptor(1, {}));
	      O[HIDDEN][key] = true;
	    } else {
	      if (hasOwnProperty_1(O, HIDDEN) && O[HIDDEN][key]) O[HIDDEN][key] = false;
	      Attributes = objectCreate(Attributes, { enumerable: createPropertyDescriptor(0, false) });
	    } return setSymbolDescriptor(O, key, Attributes);
	  } return nativeDefineProperty(O, key, Attributes);
	};

	var $defineProperties = function defineProperties(O, Properties) {
	  anObject(O);
	  var properties = toIndexedObject(Properties);
	  var keys = objectKeys(properties).concat($getOwnPropertySymbols(properties));
	  $forEach(keys, function (key) {
	    if (!descriptors || functionCall($propertyIsEnumerable, properties, key)) $defineProperty(O, key, properties[key]);
	  });
	  return O;
	};

	var $create = function create(O, Properties) {
	  return Properties === undefined ? objectCreate(O) : $defineProperties(objectCreate(O), Properties);
	};

	var $propertyIsEnumerable = function propertyIsEnumerable(V) {
	  var P = toPropertyKey(V);
	  var enumerable = functionCall(nativePropertyIsEnumerable, this, P);
	  if (this === ObjectPrototype$1 && hasOwnProperty_1(AllSymbols, P) && !hasOwnProperty_1(ObjectPrototypeSymbols, P)) return false;
	  return enumerable || !hasOwnProperty_1(this, P) || !hasOwnProperty_1(AllSymbols, P) || hasOwnProperty_1(this, HIDDEN) && this[HIDDEN][P]
	    ? enumerable : true;
	};

	var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(O, P) {
	  var it = toIndexedObject(O);
	  var key = toPropertyKey(P);
	  if (it === ObjectPrototype$1 && hasOwnProperty_1(AllSymbols, key) && !hasOwnProperty_1(ObjectPrototypeSymbols, key)) return;
	  var descriptor = nativeGetOwnPropertyDescriptor(it, key);
	  if (descriptor && hasOwnProperty_1(AllSymbols, key) && !(hasOwnProperty_1(it, HIDDEN) && it[HIDDEN][key])) {
	    descriptor.enumerable = true;
	  }
	  return descriptor;
	};

	var $getOwnPropertyNames = function getOwnPropertyNames(O) {
	  var names = nativeGetOwnPropertyNames(toIndexedObject(O));
	  var result = [];
	  $forEach(names, function (key) {
	    if (!hasOwnProperty_1(AllSymbols, key) && !hasOwnProperty_1(hiddenKeys$1, key)) push$2(result, key);
	  });
	  return result;
	};

	var $getOwnPropertySymbols = function getOwnPropertySymbols(O) {
	  var IS_OBJECT_PROTOTYPE = O === ObjectPrototype$1;
	  var names = nativeGetOwnPropertyNames(IS_OBJECT_PROTOTYPE ? ObjectPrototypeSymbols : toIndexedObject(O));
	  var result = [];
	  $forEach(names, function (key) {
	    if (hasOwnProperty_1(AllSymbols, key) && (!IS_OBJECT_PROTOTYPE || hasOwnProperty_1(ObjectPrototype$1, key))) {
	      push$2(result, AllSymbols[key]);
	    }
	  });
	  return result;
	};

	// `Symbol` constructor
	// https://tc39.es/ecma262/#sec-symbol-constructor
	if (!nativeSymbol) {
	  $Symbol = function Symbol() {
	    if (objectIsPrototypeOf(SymbolPrototype$1, this)) throw TypeError$c('Symbol is not a constructor');
	    var description = !arguments.length || arguments[0] === undefined ? undefined : toString_1(arguments[0]);
	    var tag = uid(description);
	    var setter = function (value) {
	      if (this === ObjectPrototype$1) functionCall(setter, ObjectPrototypeSymbols, value);
	      if (hasOwnProperty_1(this, HIDDEN) && hasOwnProperty_1(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
	      setSymbolDescriptor(this, tag, createPropertyDescriptor(1, value));
	    };
	    if (descriptors && USE_SETTER) setSymbolDescriptor(ObjectPrototype$1, tag, { configurable: true, set: setter });
	    return wrap(tag, description);
	  };

	  SymbolPrototype$1 = $Symbol[PROTOTYPE];

	  redefine(SymbolPrototype$1, 'toString', function toString() {
	    return getInternalState$4(this).tag;
	  });

	  redefine($Symbol, 'withoutSetter', function (description) {
	    return wrap(uid(description), description);
	  });

	  objectPropertyIsEnumerable.f = $propertyIsEnumerable;
	  objectDefineProperty.f = $defineProperty;
	  objectDefineProperties.f = $defineProperties;
	  objectGetOwnPropertyDescriptor.f = $getOwnPropertyDescriptor;
	  objectGetOwnPropertyNames.f = objectGetOwnPropertyNamesExternal.f = $getOwnPropertyNames;
	  objectGetOwnPropertySymbols.f = $getOwnPropertySymbols;

	  wellKnownSymbolWrapped.f = function (name) {
	    return wrap(wellKnownSymbol(name), name);
	  };

	  if (descriptors) {
	    // https://github.com/tc39/proposal-Symbol-description
	    nativeDefineProperty(SymbolPrototype$1, 'description', {
	      configurable: true,
	      get: function description() {
	        return getInternalState$4(this).description;
	      }
	    });
	    {
	      redefine(ObjectPrototype$1, 'propertyIsEnumerable', $propertyIsEnumerable, { unsafe: true });
	    }
	  }
	}

	_export({ global: true, wrap: true, forced: !nativeSymbol, sham: !nativeSymbol }, {
	  Symbol: $Symbol
	});

	$forEach(objectKeys(WellKnownSymbolsStore), function (name) {
	  defineWellKnownSymbol(name);
	});

	_export({ target: SYMBOL, stat: true, forced: !nativeSymbol }, {
	  // `Symbol.for` method
	  // https://tc39.es/ecma262/#sec-symbol.for
	  'for': function (key) {
	    var string = toString_1(key);
	    if (hasOwnProperty_1(StringToSymbolRegistry, string)) return StringToSymbolRegistry[string];
	    var symbol = $Symbol(string);
	    StringToSymbolRegistry[string] = symbol;
	    SymbolToStringRegistry[symbol] = string;
	    return symbol;
	  },
	  // `Symbol.keyFor` method
	  // https://tc39.es/ecma262/#sec-symbol.keyfor
	  keyFor: function keyFor(sym) {
	    if (!isSymbol(sym)) throw TypeError$c(sym + ' is not a symbol');
	    if (hasOwnProperty_1(SymbolToStringRegistry, sym)) return SymbolToStringRegistry[sym];
	  },
	  useSetter: function () { USE_SETTER = true; },
	  useSimple: function () { USE_SETTER = false; }
	});

	_export({ target: 'Object', stat: true, forced: !nativeSymbol, sham: !descriptors }, {
	  // `Object.create` method
	  // https://tc39.es/ecma262/#sec-object.create
	  create: $create,
	  // `Object.defineProperty` method
	  // https://tc39.es/ecma262/#sec-object.defineproperty
	  defineProperty: $defineProperty,
	  // `Object.defineProperties` method
	  // https://tc39.es/ecma262/#sec-object.defineproperties
	  defineProperties: $defineProperties,
	  // `Object.getOwnPropertyDescriptor` method
	  // https://tc39.es/ecma262/#sec-object.getownpropertydescriptors
	  getOwnPropertyDescriptor: $getOwnPropertyDescriptor
	});

	_export({ target: 'Object', stat: true, forced: !nativeSymbol }, {
	  // `Object.getOwnPropertyNames` method
	  // https://tc39.es/ecma262/#sec-object.getownpropertynames
	  getOwnPropertyNames: $getOwnPropertyNames,
	  // `Object.getOwnPropertySymbols` method
	  // https://tc39.es/ecma262/#sec-object.getownpropertysymbols
	  getOwnPropertySymbols: $getOwnPropertySymbols
	});

	// Chrome 38 and 39 `Object.getOwnPropertySymbols` fails on primitives
	// https://bugs.chromium.org/p/v8/issues/detail?id=3443
	_export({ target: 'Object', stat: true, forced: fails(function () { objectGetOwnPropertySymbols.f(1); }) }, {
	  getOwnPropertySymbols: function getOwnPropertySymbols(it) {
	    return objectGetOwnPropertySymbols.f(toObject(it));
	  }
	});

	// `JSON.stringify` method behavior with symbols
	// https://tc39.es/ecma262/#sec-json.stringify
	if ($stringify) {
	  var FORCED_JSON_STRINGIFY = !nativeSymbol || fails(function () {
	    var symbol = $Symbol();
	    // MS Edge converts symbol values to JSON as {}
	    return $stringify([symbol]) != '[null]'
	      // WebKit converts symbol values to JSON as null
	      || $stringify({ a: symbol }) != '{}'
	      // V8 throws on boxed symbols
	      || $stringify(Object(symbol)) != '{}';
	  });

	  _export({ target: 'JSON', stat: true, forced: FORCED_JSON_STRINGIFY }, {
	    // eslint-disable-next-line no-unused-vars -- required for `.length`
	    stringify: function stringify(it, replacer, space) {
	      var args = arraySlice$1(arguments);
	      var $replacer = replacer;
	      if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined
	      if (!isArray(replacer)) replacer = function (key, value) {
	        if (isCallable($replacer)) value = functionCall($replacer, this, key, value);
	        if (!isSymbol(value)) return value;
	      };
	      args[1] = replacer;
	      return functionApply($stringify, null, args);
	    }
	  });
	}

	// `Symbol.prototype[@@toPrimitive]` method
	// https://tc39.es/ecma262/#sec-symbol.prototype-@@toprimitive
	if (!SymbolPrototype$1[TO_PRIMITIVE]) {
	  var valueOf = SymbolPrototype$1.valueOf;
	  // eslint-disable-next-line no-unused-vars -- required for .length
	  redefine(SymbolPrototype$1, TO_PRIMITIVE, function (hint) {
	    // TODO: improve hint logic
	    return functionCall(valueOf, this);
	  });
	}
	// `Symbol.prototype[@@toStringTag]` property
	// https://tc39.es/ecma262/#sec-symbol.prototype-@@tostringtag
	setToStringTag($Symbol, SYMBOL);

	hiddenKeys$1[HIDDEN] = true;

	var defineProperty$4 = objectDefineProperty.f;


	var NativeSymbol = global_1.Symbol;
	var SymbolPrototype = NativeSymbol && NativeSymbol.prototype;

	if (descriptors && isCallable(NativeSymbol) && (!('description' in SymbolPrototype) ||
	  // Safari 12 bug
	  NativeSymbol().description !== undefined
	)) {
	  var EmptyStringDescriptionStore = {};
	  // wrap Symbol constructor for correct work with undefined description
	  var SymbolWrapper = function Symbol() {
	    var description = arguments.length < 1 || arguments[0] === undefined ? undefined : toString_1(arguments[0]);
	    var result = objectIsPrototypeOf(SymbolPrototype, this)
	      ? new NativeSymbol(description)
	      // in Edge 13, String(Symbol(undefined)) === 'Symbol(undefined)'
	      : description === undefined ? NativeSymbol() : NativeSymbol(description);
	    if (description === '') EmptyStringDescriptionStore[result] = true;
	    return result;
	  };

	  copyConstructorProperties(SymbolWrapper, NativeSymbol);
	  SymbolWrapper.prototype = SymbolPrototype;
	  SymbolPrototype.constructor = SymbolWrapper;

	  var NATIVE_SYMBOL = String(NativeSymbol('test')) == 'Symbol(test)';
	  var symbolToString = functionUncurryThis(SymbolPrototype.toString);
	  var symbolValueOf = functionUncurryThis(SymbolPrototype.valueOf);
	  var regexp = /^Symbol\((.*)\)[^)]+$/;
	  var replace$3 = functionUncurryThis(''.replace);
	  var stringSlice$4 = functionUncurryThis(''.slice);

	  defineProperty$4(SymbolPrototype, 'description', {
	    configurable: true,
	    get: function description() {
	      var symbol = symbolValueOf(this);
	      var string = symbolToString(symbol);
	      if (hasOwnProperty_1(EmptyStringDescriptionStore, symbol)) return '';
	      var desc = NATIVE_SYMBOL ? stringSlice$4(string, 7, -1) : replace$3(string, regexp, '$1');
	      return desc === '' ? undefined : desc;
	    }
	  });

	  _export({ global: true, forced: true }, {
	    Symbol: SymbolWrapper
	  });
	}

	var SPECIES$5 = wellKnownSymbol('species');

	var arrayMethodHasSpeciesSupport = function (METHOD_NAME) {
	  // We can't use this feature detection in V8 since it causes
	  // deoptimization and serious performance degradation
	  // https://github.com/zloirock/core-js/issues/677
	  return engineV8Version >= 51 || !fails(function () {
	    var array = [];
	    var constructor = array.constructor = {};
	    constructor[SPECIES$5] = function () {
	      return { foo: 1 };
	    };
	    return array[METHOD_NAME](Boolean).foo !== 1;
	  });
	};

	var $map = arrayIteration.map;


	var HAS_SPECIES_SUPPORT$3 = arrayMethodHasSpeciesSupport('map');

	// `Array.prototype.map` method
	// https://tc39.es/ecma262/#sec-array.prototype.map
	// with adding support of @@species
	_export({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT$3 }, {
	  map: function map(callbackfn /* , thisArg */) {
	    return $map(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});

	var IS_CONCAT_SPREADABLE = wellKnownSymbol('isConcatSpreadable');
	var MAX_SAFE_INTEGER$1 = 0x1FFFFFFFFFFFFF;
	var MAXIMUM_ALLOWED_INDEX_EXCEEDED = 'Maximum allowed index exceeded';
	var TypeError$b = global_1.TypeError;

	// We can't use this feature detection in V8 since it causes
	// deoptimization and serious performance degradation
	// https://github.com/zloirock/core-js/issues/679
	var IS_CONCAT_SPREADABLE_SUPPORT = engineV8Version >= 51 || !fails(function () {
	  var array = [];
	  array[IS_CONCAT_SPREADABLE] = false;
	  return array.concat()[0] !== array;
	});

	var SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('concat');

	var isConcatSpreadable = function (O) {
	  if (!isObject(O)) return false;
	  var spreadable = O[IS_CONCAT_SPREADABLE];
	  return spreadable !== undefined ? !!spreadable : isArray(O);
	};

	var FORCED$2 = !IS_CONCAT_SPREADABLE_SUPPORT || !SPECIES_SUPPORT;

	// `Array.prototype.concat` method
	// https://tc39.es/ecma262/#sec-array.prototype.concat
	// with adding support of @@isConcatSpreadable and @@species
	_export({ target: 'Array', proto: true, forced: FORCED$2 }, {
	  // eslint-disable-next-line no-unused-vars -- required for `.length`
	  concat: function concat(arg) {
	    var O = toObject(this);
	    var A = arraySpeciesCreate(O, 0);
	    var n = 0;
	    var i, k, length, len, E;
	    for (i = -1, length = arguments.length; i < length; i++) {
	      E = i === -1 ? O : arguments[i];
	      if (isConcatSpreadable(E)) {
	        len = lengthOfArrayLike(E);
	        if (n + len > MAX_SAFE_INTEGER$1) throw TypeError$b(MAXIMUM_ALLOWED_INDEX_EXCEEDED);
	        for (k = 0; k < len; k++, n++) if (k in E) createProperty(A, n, E[k]);
	      } else {
	        if (n >= MAX_SAFE_INTEGER$1) throw TypeError$b(MAXIMUM_ALLOWED_INDEX_EXCEEDED);
	        createProperty(A, n++, E);
	      }
	    }
	    A.length = n;
	    return A;
	  }
	});

	var UNSCOPABLES = wellKnownSymbol('unscopables');
	var ArrayPrototype$1 = Array.prototype;

	// Array.prototype[@@unscopables]
	// https://tc39.es/ecma262/#sec-array.prototype-@@unscopables
	if (ArrayPrototype$1[UNSCOPABLES] == undefined) {
	  objectDefineProperty.f(ArrayPrototype$1, UNSCOPABLES, {
	    configurable: true,
	    value: objectCreate(null)
	  });
	}

	// add a key to Array.prototype[@@unscopables]
	var addToUnscopables = function (key) {
	  ArrayPrototype$1[UNSCOPABLES][key] = true;
	};

	var $includes = arrayIncludes.includes;


	// `Array.prototype.includes` method
	// https://tc39.es/ecma262/#sec-array.prototype.includes
	_export({ target: 'Array', proto: true }, {
	  includes: function includes(el /* , fromIndex = 0 */) {
	    return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});

	// https://tc39.es/ecma262/#sec-array.prototype-@@unscopables
	addToUnscopables('includes');

	var MATCH$1 = wellKnownSymbol('match');

	// `IsRegExp` abstract operation
	// https://tc39.es/ecma262/#sec-isregexp
	var isRegexp = function (it) {
	  var isRegExp;
	  return isObject(it) && ((isRegExp = it[MATCH$1]) !== undefined ? !!isRegExp : classofRaw(it) == 'RegExp');
	};

	var TypeError$a = global_1.TypeError;

	var notARegexp = function (it) {
	  if (isRegexp(it)) {
	    throw TypeError$a("The method doesn't accept regular expressions");
	  } return it;
	};

	var MATCH = wellKnownSymbol('match');

	var correctIsRegexpLogic = function (METHOD_NAME) {
	  var regexp = /./;
	  try {
	    '/./'[METHOD_NAME](regexp);
	  } catch (error1) {
	    try {
	      regexp[MATCH] = false;
	      return '/./'[METHOD_NAME](regexp);
	    } catch (error2) { /* empty */ }
	  } return false;
	};

	var stringIndexOf$1 = functionUncurryThis(''.indexOf);

	// `String.prototype.includes` method
	// https://tc39.es/ecma262/#sec-string.prototype.includes
	_export({ target: 'String', proto: true, forced: !correctIsRegexpLogic('includes') }, {
	  includes: function includes(searchString /* , position = 0 */) {
	    return !!~stringIndexOf$1(
	      toString_1(requireObjectCoercible(this)),
	      toString_1(notARegexp(searchString)),
	      arguments.length > 1 ? arguments[1] : undefined
	    );
	  }
	});

	var FUNCTION_NAME_EXISTS = functionName.EXISTS;

	var defineProperty$3 = objectDefineProperty.f;

	var FunctionPrototype = Function.prototype;
	var functionToString = functionUncurryThis(FunctionPrototype.toString);
	var nameRE = /function\b(?:\s|\/\*[\S\s]*?\*\/|\/\/[^\n\r]*[\n\r]+)*([^\s(/]*)/;
	var regExpExec = functionUncurryThis(nameRE.exec);
	var NAME = 'name';

	// Function instances `.name` property
	// https://tc39.es/ecma262/#sec-function-instances-name
	if (descriptors && !FUNCTION_NAME_EXISTS) {
	  defineProperty$3(FunctionPrototype, NAME, {
	    configurable: true,
	    get: function () {
	      try {
	        return regExpExec(nameRE, functionToString(this))[1];
	      } catch (error) {
	        return '';
	      }
	    }
	  });
	}

	// `RegExp.prototype.flags` getter implementation
	// https://tc39.es/ecma262/#sec-get-regexp.prototype.flags
	var regexpFlags = function () {
	  var that = anObject(this);
	  var result = '';
	  if (that.global) result += 'g';
	  if (that.ignoreCase) result += 'i';
	  if (that.multiline) result += 'm';
	  if (that.dotAll) result += 's';
	  if (that.unicode) result += 'u';
	  if (that.sticky) result += 'y';
	  return result;
	};

	// babel-minify and Closure Compiler transpiles RegExp('a', 'y') -> /a/y and it causes SyntaxError
	var $RegExp$2 = global_1.RegExp;

	var UNSUPPORTED_Y$1 = fails(function () {
	  var re = $RegExp$2('a', 'y');
	  re.lastIndex = 2;
	  return re.exec('abcd') != null;
	});

	// UC Browser bug
	// https://github.com/zloirock/core-js/issues/1008
	var MISSED_STICKY = UNSUPPORTED_Y$1 || fails(function () {
	  return !$RegExp$2('a', 'y').sticky;
	});

	var BROKEN_CARET = UNSUPPORTED_Y$1 || fails(function () {
	  // https://bugzilla.mozilla.org/show_bug.cgi?id=773687
	  var re = $RegExp$2('^r', 'gy');
	  re.lastIndex = 2;
	  return re.exec('str') != null;
	});

	var regexpStickyHelpers = {
	  BROKEN_CARET: BROKEN_CARET,
	  MISSED_STICKY: MISSED_STICKY,
	  UNSUPPORTED_Y: UNSUPPORTED_Y$1
	};

	// babel-minify and Closure Compiler transpiles RegExp('.', 's') -> /./s and it causes SyntaxError
	var $RegExp$1 = global_1.RegExp;

	var regexpUnsupportedDotAll = fails(function () {
	  var re = $RegExp$1('.', 's');
	  return !(re.dotAll && re.exec('\n') && re.flags === 's');
	});

	// babel-minify and Closure Compiler transpiles RegExp('(?<a>b)', 'g') -> /(?<a>b)/g and it causes SyntaxError
	var $RegExp = global_1.RegExp;

	var regexpUnsupportedNcg = fails(function () {
	  var re = $RegExp('(?<a>b)', 'g');
	  return re.exec('b').groups.a !== 'b' ||
	    'b'.replace(re, '$<a>c') !== 'bc';
	});

	/* eslint-disable regexp/no-empty-capturing-group, regexp/no-empty-group, regexp/no-lazy-ends -- testing */
	/* eslint-disable regexp/no-useless-quantifier -- testing */







	var getInternalState$3 = internalState.get;



	var nativeReplace = shared('native-string-replace', String.prototype.replace);
	var nativeExec = RegExp.prototype.exec;
	var patchedExec = nativeExec;
	var charAt$4 = functionUncurryThis(''.charAt);
	var indexOf = functionUncurryThis(''.indexOf);
	var replace$2 = functionUncurryThis(''.replace);
	var stringSlice$3 = functionUncurryThis(''.slice);

	var UPDATES_LAST_INDEX_WRONG = (function () {
	  var re1 = /a/;
	  var re2 = /b*/g;
	  functionCall(nativeExec, re1, 'a');
	  functionCall(nativeExec, re2, 'a');
	  return re1.lastIndex !== 0 || re2.lastIndex !== 0;
	})();

	var UNSUPPORTED_Y = regexpStickyHelpers.BROKEN_CARET;

	// nonparticipating capturing group, copied from es5-shim's String#split patch.
	var NPCG_INCLUDED = /()??/.exec('')[1] !== undefined;

	var PATCH = UPDATES_LAST_INDEX_WRONG || NPCG_INCLUDED || UNSUPPORTED_Y || regexpUnsupportedDotAll || regexpUnsupportedNcg;

	if (PATCH) {
	  patchedExec = function exec(string) {
	    var re = this;
	    var state = getInternalState$3(re);
	    var str = toString_1(string);
	    var raw = state.raw;
	    var result, reCopy, lastIndex, match, i, object, group;

	    if (raw) {
	      raw.lastIndex = re.lastIndex;
	      result = functionCall(patchedExec, raw, str);
	      re.lastIndex = raw.lastIndex;
	      return result;
	    }

	    var groups = state.groups;
	    var sticky = UNSUPPORTED_Y && re.sticky;
	    var flags = functionCall(regexpFlags, re);
	    var source = re.source;
	    var charsAdded = 0;
	    var strCopy = str;

	    if (sticky) {
	      flags = replace$2(flags, 'y', '');
	      if (indexOf(flags, 'g') === -1) {
	        flags += 'g';
	      }

	      strCopy = stringSlice$3(str, re.lastIndex);
	      // Support anchored sticky behavior.
	      if (re.lastIndex > 0 && (!re.multiline || re.multiline && charAt$4(str, re.lastIndex - 1) !== '\n')) {
	        source = '(?: ' + source + ')';
	        strCopy = ' ' + strCopy;
	        charsAdded++;
	      }
	      // ^(? + rx + ) is needed, in combination with some str slicing, to
	      // simulate the 'y' flag.
	      reCopy = new RegExp('^(?:' + source + ')', flags);
	    }

	    if (NPCG_INCLUDED) {
	      reCopy = new RegExp('^' + source + '$(?!\\s)', flags);
	    }
	    if (UPDATES_LAST_INDEX_WRONG) lastIndex = re.lastIndex;

	    match = functionCall(nativeExec, sticky ? reCopy : re, strCopy);

	    if (sticky) {
	      if (match) {
	        match.input = stringSlice$3(match.input, charsAdded);
	        match[0] = stringSlice$3(match[0], charsAdded);
	        match.index = re.lastIndex;
	        re.lastIndex += match[0].length;
	      } else re.lastIndex = 0;
	    } else if (UPDATES_LAST_INDEX_WRONG && match) {
	      re.lastIndex = re.global ? match.index + match[0].length : lastIndex;
	    }
	    if (NPCG_INCLUDED && match && match.length > 1) {
	      // Fix browsers whose `exec` methods don't consistently return `undefined`
	      // for NPCG, like IE8. NOTE: This doesn' work for /(.?)?/
	      functionCall(nativeReplace, match[0], reCopy, function () {
	        for (i = 1; i < arguments.length - 2; i++) {
	          if (arguments[i] === undefined) match[i] = undefined;
	        }
	      });
	    }

	    if (match && groups) {
	      match.groups = object = objectCreate(null);
	      for (i = 0; i < groups.length; i++) {
	        group = groups[i];
	        object[group[0]] = match[group[1]];
	      }
	    }

	    return match;
	  };
	}

	var regexpExec = patchedExec;

	// `RegExp.prototype.exec` method
	// https://tc39.es/ecma262/#sec-regexp.prototype.exec
	_export({ target: 'RegExp', proto: true, forced: /./.exec !== regexpExec }, {
	  exec: regexpExec
	});

	var PROPER_FUNCTION_NAME$1 = functionName.PROPER;







	var TO_STRING = 'toString';
	var RegExpPrototype$1 = RegExp.prototype;
	var n$ToString = RegExpPrototype$1[TO_STRING];
	var getFlags = functionUncurryThis(regexpFlags);

	var NOT_GENERIC = fails(function () { return n$ToString.call({ source: 'a', flags: 'b' }) != '/a/b'; });
	// FF44- RegExp#toString has a wrong name
	var INCORRECT_NAME = PROPER_FUNCTION_NAME$1 && n$ToString.name != TO_STRING;

	// `RegExp.prototype.toString` method
	// https://tc39.es/ecma262/#sec-regexp.prototype.tostring
	if (NOT_GENERIC || INCORRECT_NAME) {
	  redefine(RegExp.prototype, TO_STRING, function toString() {
	    var R = anObject(this);
	    var p = toString_1(R.source);
	    var rf = R.flags;
	    var f = toString_1(rf === undefined && objectIsPrototypeOf(RegExpPrototype$1, R) && !('flags' in RegExpPrototype$1) ? getFlags(R) : rf);
	    return '/' + p + '/' + f;
	  }, { unsafe: true });
	}

	var HAS_SPECIES_SUPPORT$2 = arrayMethodHasSpeciesSupport('slice');

	var SPECIES$4 = wellKnownSymbol('species');
	var Array$2 = global_1.Array;
	var max$2 = Math.max;

	// `Array.prototype.slice` method
	// https://tc39.es/ecma262/#sec-array.prototype.slice
	// fallback for not array-like ES3 strings and DOM objects
	_export({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT$2 }, {
	  slice: function slice(start, end) {
	    var O = toIndexedObject(this);
	    var length = lengthOfArrayLike(O);
	    var k = toAbsoluteIndex(start, length);
	    var fin = toAbsoluteIndex(end === undefined ? length : end, length);
	    // inline `ArraySpeciesCreate` for usage native `Array#slice` where it's possible
	    var Constructor, result, n;
	    if (isArray(O)) {
	      Constructor = O.constructor;
	      // cross-realm fallback
	      if (isConstructor(Constructor) && (Constructor === Array$2 || isArray(Constructor.prototype))) {
	        Constructor = undefined;
	      } else if (isObject(Constructor)) {
	        Constructor = Constructor[SPECIES$4];
	        if (Constructor === null) Constructor = undefined;
	      }
	      if (Constructor === Array$2 || Constructor === undefined) {
	        return arraySlice$1(O, k, fin);
	      }
	    }
	    result = new (Constructor === undefined ? Array$2 : Constructor)(max$2(fin - k, 0));
	    for (n = 0; k < fin; k++, n++) if (k in O) createProperty(result, n, O[k]);
	    result.length = n;
	    return result;
	  }
	});

	var $filter = arrayIteration.filter;


	var HAS_SPECIES_SUPPORT$1 = arrayMethodHasSpeciesSupport('filter');

	// `Array.prototype.filter` method
	// https://tc39.es/ecma262/#sec-array.prototype.filter
	// with adding support of @@species
	_export({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT$1 }, {
	  filter: function filter(callbackfn /* , thisArg */) {
	    return $filter(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});

	// TODO: Remove from `core-js@4` since it's moved to entry points








	var SPECIES$3 = wellKnownSymbol('species');
	var RegExpPrototype = RegExp.prototype;

	var fixRegexpWellKnownSymbolLogic = function (KEY, exec, FORCED, SHAM) {
	  var SYMBOL = wellKnownSymbol(KEY);

	  var DELEGATES_TO_SYMBOL = !fails(function () {
	    // String methods call symbol-named RegEp methods
	    var O = {};
	    O[SYMBOL] = function () { return 7; };
	    return ''[KEY](O) != 7;
	  });

	  var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL && !fails(function () {
	    // Symbol-named RegExp methods call .exec
	    var execCalled = false;
	    var re = /a/;

	    if (KEY === 'split') {
	      // We can't use real regex here since it causes deoptimization
	      // and serious performance degradation in V8
	      // https://github.com/zloirock/core-js/issues/306
	      re = {};
	      // RegExp[@@split] doesn't call the regex's exec method, but first creates
	      // a new one. We need to return the patched regex when creating the new one.
	      re.constructor = {};
	      re.constructor[SPECIES$3] = function () { return re; };
	      re.flags = '';
	      re[SYMBOL] = /./[SYMBOL];
	    }

	    re.exec = function () { execCalled = true; return null; };

	    re[SYMBOL]('');
	    return !execCalled;
	  });

	  if (
	    !DELEGATES_TO_SYMBOL ||
	    !DELEGATES_TO_EXEC ||
	    FORCED
	  ) {
	    var uncurriedNativeRegExpMethod = functionUncurryThis(/./[SYMBOL]);
	    var methods = exec(SYMBOL, ''[KEY], function (nativeMethod, regexp, str, arg2, forceStringMethod) {
	      var uncurriedNativeMethod = functionUncurryThis(nativeMethod);
	      var $exec = regexp.exec;
	      if ($exec === regexpExec || $exec === RegExpPrototype.exec) {
	        if (DELEGATES_TO_SYMBOL && !forceStringMethod) {
	          // The native String method already delegates to @@method (this
	          // polyfilled function), leasing to infinite recursion.
	          // We avoid it by directly calling the native @@method method.
	          return { done: true, value: uncurriedNativeRegExpMethod(regexp, str, arg2) };
	        }
	        return { done: true, value: uncurriedNativeMethod(str, regexp, arg2) };
	      }
	      return { done: false };
	    });

	    redefine(String.prototype, KEY, methods[0]);
	    redefine(RegExpPrototype, SYMBOL, methods[1]);
	  }

	  if (SHAM) createNonEnumerableProperty(RegExpPrototype[SYMBOL], 'sham', true);
	};

	var charAt$3 = functionUncurryThis(''.charAt);
	var charCodeAt$1 = functionUncurryThis(''.charCodeAt);
	var stringSlice$2 = functionUncurryThis(''.slice);

	var createMethod$1 = function (CONVERT_TO_STRING) {
	  return function ($this, pos) {
	    var S = toString_1(requireObjectCoercible($this));
	    var position = toIntegerOrInfinity(pos);
	    var size = S.length;
	    var first, second;
	    if (position < 0 || position >= size) return CONVERT_TO_STRING ? '' : undefined;
	    first = charCodeAt$1(S, position);
	    return first < 0xD800 || first > 0xDBFF || position + 1 === size
	      || (second = charCodeAt$1(S, position + 1)) < 0xDC00 || second > 0xDFFF
	        ? CONVERT_TO_STRING
	          ? charAt$3(S, position)
	          : first
	        : CONVERT_TO_STRING
	          ? stringSlice$2(S, position, position + 2)
	          : (first - 0xD800 << 10) + (second - 0xDC00) + 0x10000;
	  };
	};

	var stringMultibyte = {
	  // `String.prototype.codePointAt` method
	  // https://tc39.es/ecma262/#sec-string.prototype.codepointat
	  codeAt: createMethod$1(false),
	  // `String.prototype.at` method
	  // https://github.com/mathiasbynens/String.prototype.at
	  charAt: createMethod$1(true)
	};

	var charAt$2 = stringMultibyte.charAt;

	// `AdvanceStringIndex` abstract operation
	// https://tc39.es/ecma262/#sec-advancestringindex
	var advanceStringIndex = function (S, index, unicode) {
	  return index + (unicode ? charAt$2(S, index).length : 1);
	};

	var floor$1 = Math.floor;
	var charAt$1 = functionUncurryThis(''.charAt);
	var replace$1 = functionUncurryThis(''.replace);
	var stringSlice$1 = functionUncurryThis(''.slice);
	var SUBSTITUTION_SYMBOLS = /\$([$&'`]|\d{1,2}|<[^>]*>)/g;
	var SUBSTITUTION_SYMBOLS_NO_NAMED = /\$([$&'`]|\d{1,2})/g;

	// `GetSubstitution` abstract operation
	// https://tc39.es/ecma262/#sec-getsubstitution
	var getSubstitution = function (matched, str, position, captures, namedCaptures, replacement) {
	  var tailPos = position + matched.length;
	  var m = captures.length;
	  var symbols = SUBSTITUTION_SYMBOLS_NO_NAMED;
	  if (namedCaptures !== undefined) {
	    namedCaptures = toObject(namedCaptures);
	    symbols = SUBSTITUTION_SYMBOLS;
	  }
	  return replace$1(replacement, symbols, function (match, ch) {
	    var capture;
	    switch (charAt$1(ch, 0)) {
	      case '$': return '$';
	      case '&': return matched;
	      case '`': return stringSlice$1(str, 0, position);
	      case "'": return stringSlice$1(str, tailPos);
	      case '<':
	        capture = namedCaptures[stringSlice$1(ch, 1, -1)];
	        break;
	      default: // \d\d?
	        var n = +ch;
	        if (n === 0) return match;
	        if (n > m) {
	          var f = floor$1(n / 10);
	          if (f === 0) return match;
	          if (f <= m) return captures[f - 1] === undefined ? charAt$1(ch, 1) : captures[f - 1] + charAt$1(ch, 1);
	          return match;
	        }
	        capture = captures[n - 1];
	    }
	    return capture === undefined ? '' : capture;
	  });
	};

	var TypeError$9 = global_1.TypeError;

	// `RegExpExec` abstract operation
	// https://tc39.es/ecma262/#sec-regexpexec
	var regexpExecAbstract = function (R, S) {
	  var exec = R.exec;
	  if (isCallable(exec)) {
	    var result = functionCall(exec, R, S);
	    if (result !== null) anObject(result);
	    return result;
	  }
	  if (classofRaw(R) === 'RegExp') return functionCall(regexpExec, R, S);
	  throw TypeError$9('RegExp#exec called on incompatible receiver');
	};

	var REPLACE = wellKnownSymbol('replace');
	var max$1 = Math.max;
	var min$1 = Math.min;
	var concat$1 = functionUncurryThis([].concat);
	var push$1 = functionUncurryThis([].push);
	var stringIndexOf = functionUncurryThis(''.indexOf);
	var stringSlice = functionUncurryThis(''.slice);

	var maybeToString = function (it) {
	  return it === undefined ? it : String(it);
	};

	// IE <= 11 replaces $0 with the whole match, as if it was $&
	// https://stackoverflow.com/questions/6024666/getting-ie-to-replace-a-regex-with-the-literal-string-0
	var REPLACE_KEEPS_$0 = (function () {
	  // eslint-disable-next-line regexp/prefer-escape-replacement-dollar-char -- required for testing
	  return 'a'.replace(/./, '$0') === '$0';
	})();

	// Safari <= 13.0.3(?) substitutes nth capture where n>m with an empty string
	var REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE = (function () {
	  if (/./[REPLACE]) {
	    return /./[REPLACE]('a', '$0') === '';
	  }
	  return false;
	})();

	var REPLACE_SUPPORTS_NAMED_GROUPS = !fails(function () {
	  var re = /./;
	  re.exec = function () {
	    var result = [];
	    result.groups = { a: '7' };
	    return result;
	  };
	  // eslint-disable-next-line regexp/no-useless-dollar-replacements -- false positive
	  return ''.replace(re, '$<a>') !== '7';
	});

	// @@replace logic
	fixRegexpWellKnownSymbolLogic('replace', function (_, nativeReplace, maybeCallNative) {
	  var UNSAFE_SUBSTITUTE = REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE ? '$' : '$0';

	  return [
	    // `String.prototype.replace` method
	    // https://tc39.es/ecma262/#sec-string.prototype.replace
	    function replace(searchValue, replaceValue) {
	      var O = requireObjectCoercible(this);
	      var replacer = searchValue == undefined ? undefined : getMethod(searchValue, REPLACE);
	      return replacer
	        ? functionCall(replacer, searchValue, O, replaceValue)
	        : functionCall(nativeReplace, toString_1(O), searchValue, replaceValue);
	    },
	    // `RegExp.prototype[@@replace]` method
	    // https://tc39.es/ecma262/#sec-regexp.prototype-@@replace
	    function (string, replaceValue) {
	      var rx = anObject(this);
	      var S = toString_1(string);

	      if (
	        typeof replaceValue == 'string' &&
	        stringIndexOf(replaceValue, UNSAFE_SUBSTITUTE) === -1 &&
	        stringIndexOf(replaceValue, '$<') === -1
	      ) {
	        var res = maybeCallNative(nativeReplace, rx, S, replaceValue);
	        if (res.done) return res.value;
	      }

	      var functionalReplace = isCallable(replaceValue);
	      if (!functionalReplace) replaceValue = toString_1(replaceValue);

	      var global = rx.global;
	      if (global) {
	        var fullUnicode = rx.unicode;
	        rx.lastIndex = 0;
	      }
	      var results = [];
	      while (true) {
	        var result = regexpExecAbstract(rx, S);
	        if (result === null) break;

	        push$1(results, result);
	        if (!global) break;

	        var matchStr = toString_1(result[0]);
	        if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
	      }

	      var accumulatedResult = '';
	      var nextSourcePosition = 0;
	      for (var i = 0; i < results.length; i++) {
	        result = results[i];

	        var matched = toString_1(result[0]);
	        var position = max$1(min$1(toIntegerOrInfinity(result.index), S.length), 0);
	        var captures = [];
	        // NOTE: This is equivalent to
	        //   captures = result.slice(1).map(maybeToString)
	        // but for some reason `nativeSlice.call(result, 1, result.length)` (called in
	        // the slice polyfill when slicing native arrays) "doesn't work" in safari 9 and
	        // causes a crash (https://pastebin.com/N21QzeQA) when trying to debug it.
	        for (var j = 1; j < result.length; j++) push$1(captures, maybeToString(result[j]));
	        var namedCaptures = result.groups;
	        if (functionalReplace) {
	          var replacerArgs = concat$1([matched], captures, position, S);
	          if (namedCaptures !== undefined) push$1(replacerArgs, namedCaptures);
	          var replacement = toString_1(functionApply(replaceValue, undefined, replacerArgs));
	        } else {
	          replacement = getSubstitution(matched, S, position, captures, namedCaptures, replaceValue);
	        }
	        if (position >= nextSourcePosition) {
	          accumulatedResult += stringSlice(S, nextSourcePosition, position) + replacement;
	          nextSourcePosition = position + matched.length;
	        }
	      }
	      return accumulatedResult + stringSlice(S, nextSourcePosition);
	    }
	  ];
	}, !REPLACE_SUPPORTS_NAMED_GROUPS || !REPLACE_KEEPS_$0 || REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE);

	var un$Join = functionUncurryThis([].join);

	var ES3_STRINGS = indexedObject != Object;
	var STRICT_METHOD$1 = arrayMethodIsStrict('join', ',');

	// `Array.prototype.join` method
	// https://tc39.es/ecma262/#sec-array.prototype.join
	_export({ target: 'Array', proto: true, forced: ES3_STRINGS || !STRICT_METHOD$1 }, {
	  join: function join(separator) {
	    return un$Join(toIndexedObject(this), separator === undefined ? ',' : separator);
	  }
	});

	var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('splice');

	var TypeError$8 = global_1.TypeError;
	var max = Math.max;
	var min = Math.min;
	var MAX_SAFE_INTEGER = 0x1FFFFFFFFFFFFF;
	var MAXIMUM_ALLOWED_LENGTH_EXCEEDED = 'Maximum allowed length exceeded';

	// `Array.prototype.splice` method
	// https://tc39.es/ecma262/#sec-array.prototype.splice
	// with adding support of @@species
	_export({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT }, {
	  splice: function splice(start, deleteCount /* , ...items */) {
	    var O = toObject(this);
	    var len = lengthOfArrayLike(O);
	    var actualStart = toAbsoluteIndex(start, len);
	    var argumentsLength = arguments.length;
	    var insertCount, actualDeleteCount, A, k, from, to;
	    if (argumentsLength === 0) {
	      insertCount = actualDeleteCount = 0;
	    } else if (argumentsLength === 1) {
	      insertCount = 0;
	      actualDeleteCount = len - actualStart;
	    } else {
	      insertCount = argumentsLength - 2;
	      actualDeleteCount = min(max(toIntegerOrInfinity(deleteCount), 0), len - actualStart);
	    }
	    if (len + insertCount - actualDeleteCount > MAX_SAFE_INTEGER) {
	      throw TypeError$8(MAXIMUM_ALLOWED_LENGTH_EXCEEDED);
	    }
	    A = arraySpeciesCreate(O, actualDeleteCount);
	    for (k = 0; k < actualDeleteCount; k++) {
	      from = actualStart + k;
	      if (from in O) createProperty(A, k, O[from]);
	    }
	    A.length = actualDeleteCount;
	    if (insertCount < actualDeleteCount) {
	      for (k = actualStart; k < len - actualDeleteCount; k++) {
	        from = k + actualDeleteCount;
	        to = k + insertCount;
	        if (from in O) O[to] = O[from];
	        else delete O[to];
	      }
	      for (k = len; k > len - actualDeleteCount + insertCount; k--) delete O[k - 1];
	    } else if (insertCount > actualDeleteCount) {
	      for (k = len - actualDeleteCount; k > actualStart; k--) {
	        from = k + actualDeleteCount - 1;
	        to = k + insertCount - 1;
	        if (from in O) O[to] = O[from];
	        else delete O[to];
	      }
	    }
	    for (k = 0; k < insertCount; k++) {
	      O[k + actualStart] = arguments[k + 2];
	    }
	    O.length = len - actualDeleteCount + insertCount;
	    return A;
	  }
	});

	var iteratorClose = function (iterator, kind, value) {
	  var innerResult, innerError;
	  anObject(iterator);
	  try {
	    innerResult = getMethod(iterator, 'return');
	    if (!innerResult) {
	      if (kind === 'throw') throw value;
	      return value;
	    }
	    innerResult = functionCall(innerResult, iterator);
	  } catch (error) {
	    innerError = true;
	    innerResult = error;
	  }
	  if (kind === 'throw') throw value;
	  if (innerError) throw innerResult;
	  anObject(innerResult);
	  return value;
	};

	// call something on iterator step with safe closing on error
	var callWithSafeIterationClosing = function (iterator, fn, value, ENTRIES) {
	  try {
	    return ENTRIES ? fn(anObject(value)[0], value[1]) : fn(value);
	  } catch (error) {
	    iteratorClose(iterator, 'throw', error);
	  }
	};

	var iterators = {};

	var ITERATOR$5 = wellKnownSymbol('iterator');
	var ArrayPrototype = Array.prototype;

	// check on default Array iterator
	var isArrayIteratorMethod = function (it) {
	  return it !== undefined && (iterators.Array === it || ArrayPrototype[ITERATOR$5] === it);
	};

	var ITERATOR$4 = wellKnownSymbol('iterator');

	var getIteratorMethod = function (it) {
	  if (it != undefined) return getMethod(it, ITERATOR$4)
	    || getMethod(it, '@@iterator')
	    || iterators[classof(it)];
	};

	var TypeError$7 = global_1.TypeError;

	var getIterator = function (argument, usingIterator) {
	  var iteratorMethod = arguments.length < 2 ? getIteratorMethod(argument) : usingIterator;
	  if (aCallable(iteratorMethod)) return anObject(functionCall(iteratorMethod, argument));
	  throw TypeError$7(tryToString(argument) + ' is not iterable');
	};

	var Array$1 = global_1.Array;

	// `Array.from` method implementation
	// https://tc39.es/ecma262/#sec-array.from
	var arrayFrom = function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {
	  var O = toObject(arrayLike);
	  var IS_CONSTRUCTOR = isConstructor(this);
	  var argumentsLength = arguments.length;
	  var mapfn = argumentsLength > 1 ? arguments[1] : undefined;
	  var mapping = mapfn !== undefined;
	  if (mapping) mapfn = functionBindContext(mapfn, argumentsLength > 2 ? arguments[2] : undefined);
	  var iteratorMethod = getIteratorMethod(O);
	  var index = 0;
	  var length, result, step, iterator, next, value;
	  // if the target is not iterable or it's an array with the default iterator - use a simple case
	  if (iteratorMethod && !(this == Array$1 && isArrayIteratorMethod(iteratorMethod))) {
	    iterator = getIterator(O, iteratorMethod);
	    next = iterator.next;
	    result = IS_CONSTRUCTOR ? new this() : [];
	    for (;!(step = functionCall(next, iterator)).done; index++) {
	      value = mapping ? callWithSafeIterationClosing(iterator, mapfn, [step.value, index], true) : step.value;
	      createProperty(result, index, value);
	    }
	  } else {
	    length = lengthOfArrayLike(O);
	    result = IS_CONSTRUCTOR ? new this(length) : Array$1(length);
	    for (;length > index; index++) {
	      value = mapping ? mapfn(O[index], index) : O[index];
	      createProperty(result, index, value);
	    }
	  }
	  result.length = index;
	  return result;
	};

	var ITERATOR$3 = wellKnownSymbol('iterator');
	var SAFE_CLOSING = false;

	try {
	  var called = 0;
	  var iteratorWithReturn = {
	    next: function () {
	      return { done: !!called++ };
	    },
	    'return': function () {
	      SAFE_CLOSING = true;
	    }
	  };
	  iteratorWithReturn[ITERATOR$3] = function () {
	    return this;
	  };
	  // eslint-disable-next-line es/no-array-from, no-throw-literal -- required for testing
	  Array.from(iteratorWithReturn, function () { throw 2; });
	} catch (error) { /* empty */ }

	var checkCorrectnessOfIteration = function (exec, SKIP_CLOSING) {
	  if (!SKIP_CLOSING && !SAFE_CLOSING) return false;
	  var ITERATION_SUPPORT = false;
	  try {
	    var object = {};
	    object[ITERATOR$3] = function () {
	      return {
	        next: function () {
	          return { done: ITERATION_SUPPORT = true };
	        }
	      };
	    };
	    exec(object);
	  } catch (error) { /* empty */ }
	  return ITERATION_SUPPORT;
	};

	var INCORRECT_ITERATION$1 = !checkCorrectnessOfIteration(function (iterable) {
	  // eslint-disable-next-line es/no-array-from -- required for testing
	  Array.from(iterable);
	});

	// `Array.from` method
	// https://tc39.es/ecma262/#sec-array.from
	_export({ target: 'Array', stat: true, forced: INCORRECT_ITERATION$1 }, {
	  from: arrayFrom
	});

	var correctPrototypeGetter = !fails(function () {
	  function F() { /* empty */ }
	  F.prototype.constructor = null;
	  // eslint-disable-next-line es/no-object-getprototypeof -- required for testing
	  return Object.getPrototypeOf(new F()) !== F.prototype;
	});

	var IE_PROTO = sharedKey('IE_PROTO');
	var Object$1 = global_1.Object;
	var ObjectPrototype = Object$1.prototype;

	// `Object.getPrototypeOf` method
	// https://tc39.es/ecma262/#sec-object.getprototypeof
	var objectGetPrototypeOf = correctPrototypeGetter ? Object$1.getPrototypeOf : function (O) {
	  var object = toObject(O);
	  if (hasOwnProperty_1(object, IE_PROTO)) return object[IE_PROTO];
	  var constructor = object.constructor;
	  if (isCallable(constructor) && object instanceof constructor) {
	    return constructor.prototype;
	  } return object instanceof Object$1 ? ObjectPrototype : null;
	};

	var ITERATOR$2 = wellKnownSymbol('iterator');
	var BUGGY_SAFARI_ITERATORS$1 = false;

	// `%IteratorPrototype%` object
	// https://tc39.es/ecma262/#sec-%iteratorprototype%-object
	var IteratorPrototype$2, PrototypeOfArrayIteratorPrototype, arrayIterator;

	/* eslint-disable es/no-array-prototype-keys -- safe */
	if ([].keys) {
	  arrayIterator = [].keys();
	  // Safari 8 has buggy iterators w/o `next`
	  if (!('next' in arrayIterator)) BUGGY_SAFARI_ITERATORS$1 = true;
	  else {
	    PrototypeOfArrayIteratorPrototype = objectGetPrototypeOf(objectGetPrototypeOf(arrayIterator));
	    if (PrototypeOfArrayIteratorPrototype !== Object.prototype) IteratorPrototype$2 = PrototypeOfArrayIteratorPrototype;
	  }
	}

	var NEW_ITERATOR_PROTOTYPE = IteratorPrototype$2 == undefined || fails(function () {
	  var test = {};
	  // FF44- legacy iterators case
	  return IteratorPrototype$2[ITERATOR$2].call(test) !== test;
	});

	if (NEW_ITERATOR_PROTOTYPE) IteratorPrototype$2 = {};

	// `%IteratorPrototype%[@@iterator]()` method
	// https://tc39.es/ecma262/#sec-%iteratorprototype%-@@iterator
	if (!isCallable(IteratorPrototype$2[ITERATOR$2])) {
	  redefine(IteratorPrototype$2, ITERATOR$2, function () {
	    return this;
	  });
	}

	var iteratorsCore = {
	  IteratorPrototype: IteratorPrototype$2,
	  BUGGY_SAFARI_ITERATORS: BUGGY_SAFARI_ITERATORS$1
	};

	var IteratorPrototype$1 = iteratorsCore.IteratorPrototype;





	var returnThis$1 = function () { return this; };

	var createIteratorConstructor = function (IteratorConstructor, NAME, next, ENUMERABLE_NEXT) {
	  var TO_STRING_TAG = NAME + ' Iterator';
	  IteratorConstructor.prototype = objectCreate(IteratorPrototype$1, { next: createPropertyDescriptor(+!ENUMERABLE_NEXT, next) });
	  setToStringTag(IteratorConstructor, TO_STRING_TAG, false);
	  iterators[TO_STRING_TAG] = returnThis$1;
	  return IteratorConstructor;
	};

	var String$2 = global_1.String;
	var TypeError$6 = global_1.TypeError;

	var aPossiblePrototype = function (argument) {
	  if (typeof argument == 'object' || isCallable(argument)) return argument;
	  throw TypeError$6("Can't set " + String$2(argument) + ' as a prototype');
	};

	/* eslint-disable no-proto -- safe */




	// `Object.setPrototypeOf` method
	// https://tc39.es/ecma262/#sec-object.setprototypeof
	// Works with __proto__ only. Old v8 can't work with null proto objects.
	// eslint-disable-next-line es/no-object-setprototypeof -- safe
	var objectSetPrototypeOf = Object.setPrototypeOf || ('__proto__' in {} ? function () {
	  var CORRECT_SETTER = false;
	  var test = {};
	  var setter;
	  try {
	    // eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
	    setter = functionUncurryThis(Object.getOwnPropertyDescriptor(Object.prototype, '__proto__').set);
	    setter(test, []);
	    CORRECT_SETTER = test instanceof Array;
	  } catch (error) { /* empty */ }
	  return function setPrototypeOf(O, proto) {
	    anObject(O);
	    aPossiblePrototype(proto);
	    if (CORRECT_SETTER) setter(O, proto);
	    else O.__proto__ = proto;
	    return O;
	  };
	}() : undefined);

	var PROPER_FUNCTION_NAME = functionName.PROPER;
	var CONFIGURABLE_FUNCTION_NAME = functionName.CONFIGURABLE;
	var IteratorPrototype = iteratorsCore.IteratorPrototype;
	var BUGGY_SAFARI_ITERATORS = iteratorsCore.BUGGY_SAFARI_ITERATORS;
	var ITERATOR$1 = wellKnownSymbol('iterator');
	var KEYS = 'keys';
	var VALUES = 'values';
	var ENTRIES = 'entries';

	var returnThis = function () { return this; };

	var defineIterator = function (Iterable, NAME, IteratorConstructor, next, DEFAULT, IS_SET, FORCED) {
	  createIteratorConstructor(IteratorConstructor, NAME, next);

	  var getIterationMethod = function (KIND) {
	    if (KIND === DEFAULT && defaultIterator) return defaultIterator;
	    if (!BUGGY_SAFARI_ITERATORS && KIND in IterablePrototype) return IterablePrototype[KIND];
	    switch (KIND) {
	      case KEYS: return function keys() { return new IteratorConstructor(this, KIND); };
	      case VALUES: return function values() { return new IteratorConstructor(this, KIND); };
	      case ENTRIES: return function entries() { return new IteratorConstructor(this, KIND); };
	    } return function () { return new IteratorConstructor(this); };
	  };

	  var TO_STRING_TAG = NAME + ' Iterator';
	  var INCORRECT_VALUES_NAME = false;
	  var IterablePrototype = Iterable.prototype;
	  var nativeIterator = IterablePrototype[ITERATOR$1]
	    || IterablePrototype['@@iterator']
	    || DEFAULT && IterablePrototype[DEFAULT];
	  var defaultIterator = !BUGGY_SAFARI_ITERATORS && nativeIterator || getIterationMethod(DEFAULT);
	  var anyNativeIterator = NAME == 'Array' ? IterablePrototype.entries || nativeIterator : nativeIterator;
	  var CurrentIteratorPrototype, methods, KEY;

	  // fix native
	  if (anyNativeIterator) {
	    CurrentIteratorPrototype = objectGetPrototypeOf(anyNativeIterator.call(new Iterable()));
	    if (CurrentIteratorPrototype !== Object.prototype && CurrentIteratorPrototype.next) {
	      if (objectGetPrototypeOf(CurrentIteratorPrototype) !== IteratorPrototype) {
	        if (objectSetPrototypeOf) {
	          objectSetPrototypeOf(CurrentIteratorPrototype, IteratorPrototype);
	        } else if (!isCallable(CurrentIteratorPrototype[ITERATOR$1])) {
	          redefine(CurrentIteratorPrototype, ITERATOR$1, returnThis);
	        }
	      }
	      // Set @@toStringTag to native iterators
	      setToStringTag(CurrentIteratorPrototype, TO_STRING_TAG, true);
	    }
	  }

	  // fix Array.prototype.{ values, @@iterator }.name in V8 / FF
	  if (PROPER_FUNCTION_NAME && DEFAULT == VALUES && nativeIterator && nativeIterator.name !== VALUES) {
	    if (CONFIGURABLE_FUNCTION_NAME) {
	      createNonEnumerableProperty(IterablePrototype, 'name', VALUES);
	    } else {
	      INCORRECT_VALUES_NAME = true;
	      defaultIterator = function values() { return functionCall(nativeIterator, this); };
	    }
	  }

	  // export additional methods
	  if (DEFAULT) {
	    methods = {
	      values: getIterationMethod(VALUES),
	      keys: IS_SET ? defaultIterator : getIterationMethod(KEYS),
	      entries: getIterationMethod(ENTRIES)
	    };
	    if (FORCED) for (KEY in methods) {
	      if (BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME || !(KEY in IterablePrototype)) {
	        redefine(IterablePrototype, KEY, methods[KEY]);
	      }
	    } else _export({ target: NAME, proto: true, forced: BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME }, methods);
	  }

	  // define iterator
	  if (IterablePrototype[ITERATOR$1] !== defaultIterator) {
	    redefine(IterablePrototype, ITERATOR$1, defaultIterator, { name: DEFAULT });
	  }
	  iterators[NAME] = defaultIterator;

	  return methods;
	};

	var charAt = stringMultibyte.charAt;




	var STRING_ITERATOR = 'String Iterator';
	var setInternalState$3 = internalState.set;
	var getInternalState$2 = internalState.getterFor(STRING_ITERATOR);

	// `String.prototype[@@iterator]` method
	// https://tc39.es/ecma262/#sec-string.prototype-@@iterator
	defineIterator(String, 'String', function (iterated) {
	  setInternalState$3(this, {
	    type: STRING_ITERATOR,
	    string: toString_1(iterated),
	    index: 0
	  });
	// `%StringIteratorPrototype%.next` method
	// https://tc39.es/ecma262/#sec-%stringiteratorprototype%.next
	}, function next() {
	  var state = getInternalState$2(this);
	  var string = state.string;
	  var index = state.index;
	  var point;
	  if (index >= string.length) return { value: undefined, done: true };
	  point = charAt(string, index);
	  state.index += point.length;
	  return { value: point, done: false };
	});

	// eslint-disable-next-line es/no-object-assign -- safe
	var $assign = Object.assign;
	// eslint-disable-next-line es/no-object-defineproperty -- required for testing
	var defineProperty$2 = Object.defineProperty;
	var concat = functionUncurryThis([].concat);

	// `Object.assign` method
	// https://tc39.es/ecma262/#sec-object.assign
	var objectAssign = !$assign || fails(function () {
	  // should have correct order of operations (Edge bug)
	  if (descriptors && $assign({ b: 1 }, $assign(defineProperty$2({}, 'a', {
	    enumerable: true,
	    get: function () {
	      defineProperty$2(this, 'b', {
	        value: 3,
	        enumerable: false
	      });
	    }
	  }), { b: 2 })).b !== 1) return true;
	  // should work with symbols and should have deterministic property order (V8 bug)
	  var A = {};
	  var B = {};
	  // eslint-disable-next-line es/no-symbol -- safe
	  var symbol = Symbol();
	  var alphabet = 'abcdefghijklmnopqrst';
	  A[symbol] = 7;
	  alphabet.split('').forEach(function (chr) { B[chr] = chr; });
	  return $assign({}, A)[symbol] != 7 || objectKeys($assign({}, B)).join('') != alphabet;
	}) ? function assign(target, source) { // eslint-disable-line no-unused-vars -- required for `.length`
	  var T = toObject(target);
	  var argumentsLength = arguments.length;
	  var index = 1;
	  var getOwnPropertySymbols = objectGetOwnPropertySymbols.f;
	  var propertyIsEnumerable = objectPropertyIsEnumerable.f;
	  while (argumentsLength > index) {
	    var S = indexedObject(arguments[index++]);
	    var keys = getOwnPropertySymbols ? concat(objectKeys(S), getOwnPropertySymbols(S)) : objectKeys(S);
	    var length = keys.length;
	    var j = 0;
	    var key;
	    while (length > j) {
	      key = keys[j++];
	      if (!descriptors || functionCall(propertyIsEnumerable, S, key)) T[key] = S[key];
	    }
	  } return T;
	} : $assign;

	// `Object.assign` method
	// https://tc39.es/ecma262/#sec-object.assign
	// eslint-disable-next-line es/no-object-assign -- required for testing
	_export({ target: 'Object', stat: true, forced: Object.assign !== objectAssign }, {
	  assign: objectAssign
	});

	var nativePromiseConstructor = global_1.Promise;

	var redefineAll = function (target, src, options) {
	  for (var key in src) redefine(target, key, src[key], options);
	  return target;
	};

	var SPECIES$2 = wellKnownSymbol('species');

	var setSpecies = function (CONSTRUCTOR_NAME) {
	  var Constructor = getBuiltIn(CONSTRUCTOR_NAME);
	  var defineProperty = objectDefineProperty.f;

	  if (descriptors && Constructor && !Constructor[SPECIES$2]) {
	    defineProperty(Constructor, SPECIES$2, {
	      configurable: true,
	      get: function () { return this; }
	    });
	  }
	};

	var TypeError$5 = global_1.TypeError;

	var anInstance = function (it, Prototype) {
	  if (objectIsPrototypeOf(Prototype, it)) return it;
	  throw TypeError$5('Incorrect invocation');
	};

	var TypeError$4 = global_1.TypeError;

	var Result = function (stopped, result) {
	  this.stopped = stopped;
	  this.result = result;
	};

	var ResultPrototype = Result.prototype;

	var iterate = function (iterable, unboundFunction, options) {
	  var that = options && options.that;
	  var AS_ENTRIES = !!(options && options.AS_ENTRIES);
	  var IS_ITERATOR = !!(options && options.IS_ITERATOR);
	  var INTERRUPTED = !!(options && options.INTERRUPTED);
	  var fn = functionBindContext(unboundFunction, that);
	  var iterator, iterFn, index, length, result, next, step;

	  var stop = function (condition) {
	    if (iterator) iteratorClose(iterator, 'normal', condition);
	    return new Result(true, condition);
	  };

	  var callFn = function (value) {
	    if (AS_ENTRIES) {
	      anObject(value);
	      return INTERRUPTED ? fn(value[0], value[1], stop) : fn(value[0], value[1]);
	    } return INTERRUPTED ? fn(value, stop) : fn(value);
	  };

	  if (IS_ITERATOR) {
	    iterator = iterable;
	  } else {
	    iterFn = getIteratorMethod(iterable);
	    if (!iterFn) throw TypeError$4(tryToString(iterable) + ' is not iterable');
	    // optimisation for array iterators
	    if (isArrayIteratorMethod(iterFn)) {
	      for (index = 0, length = lengthOfArrayLike(iterable); length > index; index++) {
	        result = callFn(iterable[index]);
	        if (result && objectIsPrototypeOf(ResultPrototype, result)) return result;
	      } return new Result(false);
	    }
	    iterator = getIterator(iterable, iterFn);
	  }

	  next = iterator.next;
	  while (!(step = functionCall(next, iterator)).done) {
	    try {
	      result = callFn(step.value);
	    } catch (error) {
	      iteratorClose(iterator, 'throw', error);
	    }
	    if (typeof result == 'object' && result && objectIsPrototypeOf(ResultPrototype, result)) return result;
	  } return new Result(false);
	};

	var TypeError$3 = global_1.TypeError;

	// `Assert: IsConstructor(argument) is true`
	var aConstructor = function (argument) {
	  if (isConstructor(argument)) return argument;
	  throw TypeError$3(tryToString(argument) + ' is not a constructor');
	};

	var SPECIES$1 = wellKnownSymbol('species');

	// `SpeciesConstructor` abstract operation
	// https://tc39.es/ecma262/#sec-speciesconstructor
	var speciesConstructor = function (O, defaultConstructor) {
	  var C = anObject(O).constructor;
	  var S;
	  return C === undefined || (S = anObject(C)[SPECIES$1]) == undefined ? defaultConstructor : aConstructor(S);
	};

	var engineIsIos = /(?:ipad|iphone|ipod).*applewebkit/i.test(engineUserAgent);

	var engineIsNode = classofRaw(global_1.process) == 'process';

	var set = global_1.setImmediate;
	var clear = global_1.clearImmediate;
	var process$3 = global_1.process;
	var Dispatch = global_1.Dispatch;
	var Function$1 = global_1.Function;
	var MessageChannel = global_1.MessageChannel;
	var String$1 = global_1.String;
	var counter = 0;
	var queue$1 = {};
	var ONREADYSTATECHANGE = 'onreadystatechange';
	var location$1, defer, channel, port;

	try {
	  // Deno throws a ReferenceError on `location` access without `--location` flag
	  location$1 = global_1.location;
	} catch (error) { /* empty */ }

	var run = function (id) {
	  if (hasOwnProperty_1(queue$1, id)) {
	    var fn = queue$1[id];
	    delete queue$1[id];
	    fn();
	  }
	};

	var runner$1 = function (id) {
	  return function () {
	    run(id);
	  };
	};

	var listener = function (event) {
	  run(event.data);
	};

	var post = function (id) {
	  // old engines have not location.origin
	  global_1.postMessage(String$1(id), location$1.protocol + '//' + location$1.host);
	};

	// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
	if (!set || !clear) {
	  set = function setImmediate(fn) {
	    var args = arraySlice$1(arguments, 1);
	    queue$1[++counter] = function () {
	      functionApply(isCallable(fn) ? fn : Function$1(fn), undefined, args);
	    };
	    defer(counter);
	    return counter;
	  };
	  clear = function clearImmediate(id) {
	    delete queue$1[id];
	  };
	  // Node.js 0.8-
	  if (engineIsNode) {
	    defer = function (id) {
	      process$3.nextTick(runner$1(id));
	    };
	  // Sphere (JS game engine) Dispatch API
	  } else if (Dispatch && Dispatch.now) {
	    defer = function (id) {
	      Dispatch.now(runner$1(id));
	    };
	  // Browsers with MessageChannel, includes WebWorkers
	  // except iOS - https://github.com/zloirock/core-js/issues/624
	  } else if (MessageChannel && !engineIsIos) {
	    channel = new MessageChannel();
	    port = channel.port2;
	    channel.port1.onmessage = listener;
	    defer = functionBindContext(port.postMessage, port);
	  // Browsers with postMessage, skip WebWorkers
	  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
	  } else if (
	    global_1.addEventListener &&
	    isCallable(global_1.postMessage) &&
	    !global_1.importScripts &&
	    location$1 && location$1.protocol !== 'file:' &&
	    !fails(post)
	  ) {
	    defer = post;
	    global_1.addEventListener('message', listener, false);
	  // IE8-
	  } else if (ONREADYSTATECHANGE in documentCreateElement('script')) {
	    defer = function (id) {
	      html.appendChild(documentCreateElement('script'))[ONREADYSTATECHANGE] = function () {
	        html.removeChild(this);
	        run(id);
	      };
	    };
	  // Rest old browsers
	  } else {
	    defer = function (id) {
	      setTimeout(runner$1(id), 0);
	    };
	  }
	}

	var task$1 = {
	  set: set,
	  clear: clear
	};

	var engineIsIosPebble = /ipad|iphone|ipod/i.test(engineUserAgent) && global_1.Pebble !== undefined;

	var engineIsWebosWebkit = /web0s(?!.*chrome)/i.test(engineUserAgent);

	var getOwnPropertyDescriptor$1 = objectGetOwnPropertyDescriptor.f;
	var macrotask = task$1.set;





	var MutationObserver = global_1.MutationObserver || global_1.WebKitMutationObserver;
	var document$2 = global_1.document;
	var process$2 = global_1.process;
	var Promise$1 = global_1.Promise;
	// Node.js 11 shows ExperimentalWarning on getting `queueMicrotask`
	var queueMicrotaskDescriptor = getOwnPropertyDescriptor$1(global_1, 'queueMicrotask');
	var queueMicrotask = queueMicrotaskDescriptor && queueMicrotaskDescriptor.value;

	var flush, head, last, notify$1, toggle$1, node, promise, then;

	// modern engines have queueMicrotask method
	if (!queueMicrotask) {
	  flush = function () {
	    var parent, fn;
	    if (engineIsNode && (parent = process$2.domain)) parent.exit();
	    while (head) {
	      fn = head.fn;
	      head = head.next;
	      try {
	        fn();
	      } catch (error) {
	        if (head) notify$1();
	        else last = undefined;
	        throw error;
	      }
	    } last = undefined;
	    if (parent) parent.enter();
	  };

	  // browsers with MutationObserver, except iOS - https://github.com/zloirock/core-js/issues/339
	  // also except WebOS Webkit https://github.com/zloirock/core-js/issues/898
	  if (!engineIsIos && !engineIsNode && !engineIsWebosWebkit && MutationObserver && document$2) {
	    toggle$1 = true;
	    node = document$2.createTextNode('');
	    new MutationObserver(flush).observe(node, { characterData: true });
	    notify$1 = function () {
	      node.data = toggle$1 = !toggle$1;
	    };
	  // environments with maybe non-completely correct, but existent Promise
	  } else if (!engineIsIosPebble && Promise$1 && Promise$1.resolve) {
	    // Promise.resolve without an argument throws an error in LG WebOS 2
	    promise = Promise$1.resolve(undefined);
	    // workaround of WebKit ~ iOS Safari 10.1 bug
	    promise.constructor = Promise$1;
	    then = functionBindContext(promise.then, promise);
	    notify$1 = function () {
	      then(flush);
	    };
	  // Node.js without promises
	  } else if (engineIsNode) {
	    notify$1 = function () {
	      process$2.nextTick(flush);
	    };
	  // for other environments - macrotask based on:
	  // - setImmediate
	  // - MessageChannel
	  // - window.postMessag
	  // - onreadystatechange
	  // - setTimeout
	  } else {
	    // strange IE + webpack dev server bug - use .bind(global)
	    macrotask = functionBindContext(macrotask, global_1);
	    notify$1 = function () {
	      macrotask(flush);
	    };
	  }
	}

	var microtask = queueMicrotask || function (fn) {
	  var task = { fn: fn, next: undefined };
	  if (last) last.next = task;
	  if (!head) {
	    head = task;
	    notify$1();
	  } last = task;
	};

	var PromiseCapability = function (C) {
	  var resolve, reject;
	  this.promise = new C(function ($$resolve, $$reject) {
	    if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');
	    resolve = $$resolve;
	    reject = $$reject;
	  });
	  this.resolve = aCallable(resolve);
	  this.reject = aCallable(reject);
	};

	// `NewPromiseCapability` abstract operation
	// https://tc39.es/ecma262/#sec-newpromisecapability
	var f = function (C) {
	  return new PromiseCapability(C);
	};

	var newPromiseCapability$1 = {
		f: f
	};

	var promiseResolve = function (C, x) {
	  anObject(C);
	  if (isObject(x) && x.constructor === C) return x;
	  var promiseCapability = newPromiseCapability$1.f(C);
	  var resolve = promiseCapability.resolve;
	  resolve(x);
	  return promiseCapability.promise;
	};

	var hostReportErrors = function (a, b) {
	  var console = global_1.console;
	  if (console && console.error) {
	    arguments.length == 1 ? console.error(a) : console.error(a, b);
	  }
	};

	var perform = function (exec) {
	  try {
	    return { error: false, value: exec() };
	  } catch (error) {
	    return { error: true, value: error };
	  }
	};

	var Queue = function () {
	  this.head = null;
	  this.tail = null;
	};

	Queue.prototype = {
	  add: function (item) {
	    var entry = { item: item, next: null };
	    if (this.head) this.tail.next = entry;
	    else this.head = entry;
	    this.tail = entry;
	  },
	  get: function () {
	    var entry = this.head;
	    if (entry) {
	      this.head = entry.next;
	      if (this.tail === entry) this.tail = null;
	      return entry.item;
	    }
	  }
	};

	var queue = Queue;

	var engineIsBrowser = typeof window == 'object';

	var task = task$1.set;













	var SPECIES = wellKnownSymbol('species');
	var PROMISE = 'Promise';

	var getInternalState$1 = internalState.getterFor(PROMISE);
	var setInternalState$2 = internalState.set;
	var getInternalPromiseState = internalState.getterFor(PROMISE);
	var NativePromisePrototype = nativePromiseConstructor && nativePromiseConstructor.prototype;
	var PromiseConstructor = nativePromiseConstructor;
	var PromisePrototype = NativePromisePrototype;
	var TypeError$2 = global_1.TypeError;
	var document$1 = global_1.document;
	var process$1 = global_1.process;
	var newPromiseCapability = newPromiseCapability$1.f;
	var newGenericPromiseCapability = newPromiseCapability;

	var DISPATCH_EVENT = !!(document$1 && document$1.createEvent && global_1.dispatchEvent);
	var NATIVE_REJECTION_EVENT = isCallable(global_1.PromiseRejectionEvent);
	var UNHANDLED_REJECTION = 'unhandledrejection';
	var REJECTION_HANDLED = 'rejectionhandled';
	var PENDING = 0;
	var FULFILLED = 1;
	var REJECTED = 2;
	var HANDLED = 1;
	var UNHANDLED = 2;
	var SUBCLASSING = false;

	var Internal, OwnPromiseCapability, PromiseWrapper, nativeThen;

	var FORCED$1 = isForced_1(PROMISE, function () {
	  var PROMISE_CONSTRUCTOR_SOURCE = inspectSource(PromiseConstructor);
	  var GLOBAL_CORE_JS_PROMISE = PROMISE_CONSTRUCTOR_SOURCE !== String(PromiseConstructor);
	  // V8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables
	  // https://bugs.chromium.org/p/chromium/issues/detail?id=830565
	  // We can't detect it synchronously, so just check versions
	  if (!GLOBAL_CORE_JS_PROMISE && engineV8Version === 66) return true;
	  // We can't use @@species feature detection in V8 since it causes
	  // deoptimization and performance degradation
	  // https://github.com/zloirock/core-js/issues/679
	  if (engineV8Version >= 51 && /native code/.test(PROMISE_CONSTRUCTOR_SOURCE)) return false;
	  // Detect correctness of subclassing with @@species support
	  var promise = new PromiseConstructor(function (resolve) { resolve(1); });
	  var FakePromise = function (exec) {
	    exec(function () { /* empty */ }, function () { /* empty */ });
	  };
	  var constructor = promise.constructor = {};
	  constructor[SPECIES] = FakePromise;
	  SUBCLASSING = promise.then(function () { /* empty */ }) instanceof FakePromise;
	  if (!SUBCLASSING) return true;
	  // Unhandled rejections tracking support, NodeJS Promise without it fails @@species test
	  return !GLOBAL_CORE_JS_PROMISE && engineIsBrowser && !NATIVE_REJECTION_EVENT;
	});

	var INCORRECT_ITERATION = FORCED$1 || !checkCorrectnessOfIteration(function (iterable) {
	  PromiseConstructor.all(iterable)['catch'](function () { /* empty */ });
	});

	// helpers
	var isThenable = function (it) {
	  var then;
	  return isObject(it) && isCallable(then = it.then) ? then : false;
	};

	var callReaction = function (reaction, state) {
	  var value = state.value;
	  var ok = state.state == FULFILLED;
	  var handler = ok ? reaction.ok : reaction.fail;
	  var resolve = reaction.resolve;
	  var reject = reaction.reject;
	  var domain = reaction.domain;
	  var result, then, exited;
	  try {
	    if (handler) {
	      if (!ok) {
	        if (state.rejection === UNHANDLED) onHandleUnhandled(state);
	        state.rejection = HANDLED;
	      }
	      if (handler === true) result = value;
	      else {
	        if (domain) domain.enter();
	        result = handler(value); // can throw
	        if (domain) {
	          domain.exit();
	          exited = true;
	        }
	      }
	      if (result === reaction.promise) {
	        reject(TypeError$2('Promise-chain cycle'));
	      } else if (then = isThenable(result)) {
	        functionCall(then, result, resolve, reject);
	      } else resolve(result);
	    } else reject(value);
	  } catch (error) {
	    if (domain && !exited) domain.exit();
	    reject(error);
	  }
	};

	var notify = function (state, isReject) {
	  if (state.notified) return;
	  state.notified = true;
	  microtask(function () {
	    var reactions = state.reactions;
	    var reaction;
	    while (reaction = reactions.get()) {
	      callReaction(reaction, state);
	    }
	    state.notified = false;
	    if (isReject && !state.rejection) onUnhandled(state);
	  });
	};

	var dispatchEvent = function (name, promise, reason) {
	  var event, handler;
	  if (DISPATCH_EVENT) {
	    event = document$1.createEvent('Event');
	    event.promise = promise;
	    event.reason = reason;
	    event.initEvent(name, false, true);
	    global_1.dispatchEvent(event);
	  } else event = { promise: promise, reason: reason };
	  if (!NATIVE_REJECTION_EVENT && (handler = global_1['on' + name])) handler(event);
	  else if (name === UNHANDLED_REJECTION) hostReportErrors('Unhandled promise rejection', reason);
	};

	var onUnhandled = function (state) {
	  functionCall(task, global_1, function () {
	    var promise = state.facade;
	    var value = state.value;
	    var IS_UNHANDLED = isUnhandled(state);
	    var result;
	    if (IS_UNHANDLED) {
	      result = perform(function () {
	        if (engineIsNode) {
	          process$1.emit('unhandledRejection', value, promise);
	        } else dispatchEvent(UNHANDLED_REJECTION, promise, value);
	      });
	      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
	      state.rejection = engineIsNode || isUnhandled(state) ? UNHANDLED : HANDLED;
	      if (result.error) throw result.value;
	    }
	  });
	};

	var isUnhandled = function (state) {
	  return state.rejection !== HANDLED && !state.parent;
	};

	var onHandleUnhandled = function (state) {
	  functionCall(task, global_1, function () {
	    var promise = state.facade;
	    if (engineIsNode) {
	      process$1.emit('rejectionHandled', promise);
	    } else dispatchEvent(REJECTION_HANDLED, promise, state.value);
	  });
	};

	var bind = function (fn, state, unwrap) {
	  return function (value) {
	    fn(state, value, unwrap);
	  };
	};

	var internalReject = function (state, value, unwrap) {
	  if (state.done) return;
	  state.done = true;
	  if (unwrap) state = unwrap;
	  state.value = value;
	  state.state = REJECTED;
	  notify(state, true);
	};

	var internalResolve = function (state, value, unwrap) {
	  if (state.done) return;
	  state.done = true;
	  if (unwrap) state = unwrap;
	  try {
	    if (state.facade === value) throw TypeError$2("Promise can't be resolved itself");
	    var then = isThenable(value);
	    if (then) {
	      microtask(function () {
	        var wrapper = { done: false };
	        try {
	          functionCall(then, value,
	            bind(internalResolve, wrapper, state),
	            bind(internalReject, wrapper, state)
	          );
	        } catch (error) {
	          internalReject(wrapper, error, state);
	        }
	      });
	    } else {
	      state.value = value;
	      state.state = FULFILLED;
	      notify(state, false);
	    }
	  } catch (error) {
	    internalReject({ done: false }, error, state);
	  }
	};

	// constructor polyfill
	if (FORCED$1) {
	  // 25.4.3.1 Promise(executor)
	  PromiseConstructor = function Promise(executor) {
	    anInstance(this, PromisePrototype);
	    aCallable(executor);
	    functionCall(Internal, this);
	    var state = getInternalState$1(this);
	    try {
	      executor(bind(internalResolve, state), bind(internalReject, state));
	    } catch (error) {
	      internalReject(state, error);
	    }
	  };
	  PromisePrototype = PromiseConstructor.prototype;
	  // eslint-disable-next-line no-unused-vars -- required for `.length`
	  Internal = function Promise(executor) {
	    setInternalState$2(this, {
	      type: PROMISE,
	      done: false,
	      notified: false,
	      parent: false,
	      reactions: new queue(),
	      rejection: false,
	      state: PENDING,
	      value: undefined
	    });
	  };
	  Internal.prototype = redefineAll(PromisePrototype, {
	    // `Promise.prototype.then` method
	    // https://tc39.es/ecma262/#sec-promise.prototype.then
	    // eslint-disable-next-line unicorn/no-thenable -- safe
	    then: function then(onFulfilled, onRejected) {
	      var state = getInternalPromiseState(this);
	      var reaction = newPromiseCapability(speciesConstructor(this, PromiseConstructor));
	      state.parent = true;
	      reaction.ok = isCallable(onFulfilled) ? onFulfilled : true;
	      reaction.fail = isCallable(onRejected) && onRejected;
	      reaction.domain = engineIsNode ? process$1.domain : undefined;
	      if (state.state == PENDING) state.reactions.add(reaction);
	      else microtask(function () {
	        callReaction(reaction, state);
	      });
	      return reaction.promise;
	    },
	    // `Promise.prototype.catch` method
	    // https://tc39.es/ecma262/#sec-promise.prototype.catch
	    'catch': function (onRejected) {
	      return this.then(undefined, onRejected);
	    }
	  });
	  OwnPromiseCapability = function () {
	    var promise = new Internal();
	    var state = getInternalState$1(promise);
	    this.promise = promise;
	    this.resolve = bind(internalResolve, state);
	    this.reject = bind(internalReject, state);
	  };
	  newPromiseCapability$1.f = newPromiseCapability = function (C) {
	    return C === PromiseConstructor || C === PromiseWrapper
	      ? new OwnPromiseCapability(C)
	      : newGenericPromiseCapability(C);
	  };

	  if (isCallable(nativePromiseConstructor) && NativePromisePrototype !== Object.prototype) {
	    nativeThen = NativePromisePrototype.then;

	    if (!SUBCLASSING) {
	      // make `Promise#then` return a polyfilled `Promise` for native promise-based APIs
	      redefine(NativePromisePrototype, 'then', function then(onFulfilled, onRejected) {
	        var that = this;
	        return new PromiseConstructor(function (resolve, reject) {
	          functionCall(nativeThen, that, resolve, reject);
	        }).then(onFulfilled, onRejected);
	      // https://github.com/zloirock/core-js/issues/640
	      }, { unsafe: true });

	      // makes sure that native promise-based APIs `Promise#catch` properly works with patched `Promise#then`
	      redefine(NativePromisePrototype, 'catch', PromisePrototype['catch'], { unsafe: true });
	    }

	    // make `.constructor === Promise` work for native promise-based APIs
	    try {
	      delete NativePromisePrototype.constructor;
	    } catch (error) { /* empty */ }

	    // make `instanceof Promise` work for native promise-based APIs
	    if (objectSetPrototypeOf) {
	      objectSetPrototypeOf(NativePromisePrototype, PromisePrototype);
	    }
	  }
	}

	_export({ global: true, wrap: true, forced: FORCED$1 }, {
	  Promise: PromiseConstructor
	});

	setToStringTag(PromiseConstructor, PROMISE, false);
	setSpecies(PROMISE);

	PromiseWrapper = getBuiltIn(PROMISE);

	// statics
	_export({ target: PROMISE, stat: true, forced: FORCED$1 }, {
	  // `Promise.reject` method
	  // https://tc39.es/ecma262/#sec-promise.reject
	  reject: function reject(r) {
	    var capability = newPromiseCapability(this);
	    functionCall(capability.reject, undefined, r);
	    return capability.promise;
	  }
	});

	_export({ target: PROMISE, stat: true, forced: FORCED$1 }, {
	  // `Promise.resolve` method
	  // https://tc39.es/ecma262/#sec-promise.resolve
	  resolve: function resolve(x) {
	    return promiseResolve(this, x);
	  }
	});

	_export({ target: PROMISE, stat: true, forced: INCORRECT_ITERATION }, {
	  // `Promise.all` method
	  // https://tc39.es/ecma262/#sec-promise.all
	  all: function all(iterable) {
	    var C = this;
	    var capability = newPromiseCapability(C);
	    var resolve = capability.resolve;
	    var reject = capability.reject;
	    var result = perform(function () {
	      var $promiseResolve = aCallable(C.resolve);
	      var values = [];
	      var counter = 0;
	      var remaining = 1;
	      iterate(iterable, function (promise) {
	        var index = counter++;
	        var alreadyCalled = false;
	        remaining++;
	        functionCall($promiseResolve, C, promise).then(function (value) {
	          if (alreadyCalled) return;
	          alreadyCalled = true;
	          values[index] = value;
	          --remaining || resolve(values);
	        }, reject);
	      });
	      --remaining || resolve(values);
	    });
	    if (result.error) reject(result.value);
	    return capability.promise;
	  },
	  // `Promise.race` method
	  // https://tc39.es/ecma262/#sec-promise.race
	  race: function race(iterable) {
	    var C = this;
	    var capability = newPromiseCapability(C);
	    var reject = capability.reject;
	    var result = perform(function () {
	      var $promiseResolve = aCallable(C.resolve);
	      iterate(iterable, function (promise) {
	        functionCall($promiseResolve, C, promise).then(capability.resolve, reject);
	      });
	    });
	    if (result.error) reject(result.value);
	    return capability.promise;
	  }
	});

	/*
		:property.sub1.func().funcProp
		 = return funcProp of function result of sub1 property of property of object
		:{::helperVal}.sub
		 = return sub property of object property with name retrieved from helperVal property of helpers object
		:{::helperFunc()}.sub
		= return sub property of object property with name retrieved from helperVal function result of helpers object.
		if helpersFunx return 'car' then source path becomes :car.sub

	*/

	const SUB_PATH_START = '{',
		SUB_PATH_END = '}',
		PATH_SPLIT = '.',
		PATH_START_OBJECT = ':',
		PATH_START_HELPERS = '::',
		FUNCTION_MARKER = '()',
		MAX_DEEP = 10;

	/**
	 * Set of tools to use notPath property access notation
	 * : is for item
	 * :: is for helpers
	 * {} subpath
	 * . path splitter
	 * () function and should be executed with params (item, helper | undefined)
	 * sub-paths will be parsed and replaced by results in source path
	 */
	class notPath$1 {
		/*
			input ':{::helperVal}.sub'
			return ::helperVal
		*/

		/**
		 * Returns first subpath in path
		 * if subpath not closed will return it anyway
		 * @param {string} path path in string notation
		 * @return {string|null} subpath or null if no sub path were found
		 */
		static findNextSubPath(path) {
			let subPath = '',
				find = false;
			for (let i = 0; i < path.length; i++) {
				if (path[i] === SUB_PATH_START) {
					find = true;
					subPath = '';
				} else {
					if ((path[i] === SUB_PATH_END) && find) {
						return subPath;
					} else {
						subPath += path[i];
					}
				}
			}
			return find ? subPath : null;
		}

		/**
		 * Replace sub-path in parent path by parsed version
		 * @param {string} path path to process
		 * @param {string} sub sub path to replace
		 * @param {string} parsed parsed sub path
		 * @return {string} parsed path
		 */

		static replaceSubPath(path, sub, parsed) {
			let subf = SUB_PATH_START + sub + SUB_PATH_END,
				i = 0;
			while ((path.indexOf(subf) > -1) && i < MAX_DEEP) {
				path = path.replace(subf, parsed);
				i++;
			}
			return path;
		}

		/**
		 * Parses path while there any sub-paths
		 * @param {string} path raw unparsed path
		 * @param {object} item data
		 * @param {object} helpers helpers
		 * @return {string} parsed path
		 */
		static parseSubs(path, item, helpers) {
			let subPath = this.findNextSubPath(path),
				subPathParsed, i = 0;
			while (subPath) {
				subPathParsed = this.getValueByPath(subPath.indexOf(PATH_START_HELPERS) > -1 ? helpers : item, subPath, item, helpers);
				path = this.replaceSubPath(path, subPath, subPathParsed);
				i++;
				if (i > MAX_DEEP) {
					break;
				}
				subPath = this.findNextSubPath(path);
			}
			return path;
		}

		/**
		 * Get property value
		 * @param {string} path path to property
		 * @param {object} item item object
		 * @param {object} helpers helpers object
		 */

		static get(path, item, helpers) {
			switch (path) {
			case PATH_START_OBJECT:
				return item;
			case PATH_START_HELPERS:
				return helpers;
			}
			path = this.parseSubs(path, item, helpers);
			return this.getValueByPath(path.indexOf(PATH_START_HELPERS) > -1 ? helpers : item, path, item, helpers);
		}

		/**
		 * Set property value
		 * @param {string} path path to property
		 * @param {object} item item object
		 * @param {object} helpers helpers object
		 * @param {any} attrValue value we want to assign
		 */

		static set(path, item, helpers, attrValue) {
			if (arguments.length === 3) {
				attrValue = helpers;
				helpers = undefined;
			}
			let subPath = this.findNextSubPath(path),
				subPathParsed,
				i = 0;
			while (subPath) {
				subPathParsed = this.getValueByPath(subPath.indexOf(PATH_START_HELPERS) > -1 ? helpers : item, subPath, item, helpers);
				path = this.replaceSubPath(path, subPath, subPathParsed);
				if (i > MAX_DEEP) {
					break;
				}
				subPath = this.findNextSubPath(path);
				i++;
			}
			this.setValueByPath(item, path, attrValue);
			if (item.isRecord && this.normilizePath(path).length > 1 && item.__isActive) {
				item.trigger('change', item, path, attrValue);
			}
		}

		/**
		 * Set target property to null
		 * @param {string} path path to property
		 * @param {object} item item object
		 * @param {object} helpers helpers object
		 */

		static unset(path, item, helpers) {
			this.set(path, item, helpers, null);
		}

		/**
		 * Parses step key, transforms it to end-form
		 * @param {string} step not parsed step key
		 * @param {object} item item object
		 * @param {object} helper helpers object
		 * @return {string|number} parsed step key
		 */

		static parsePathStep(step, item, helper) {
			let rStep = null;
			if (step.indexOf(PATH_START_HELPERS) === 0 && helper) {
				rStep = step.replace(PATH_START_HELPERS, '');
				if (rStep.indexOf(FUNCTION_MARKER) === rStep.length - 2) {
					rStep = rStep.replace(FUNCTION_MARKER, '');
					if (Object.prototype.hasOwnProperty.call(helper, rStep)) {
						return helper[rStep](item, undefined);
					}
				} else {
					return helper[rStep];
				}
			} else {
				if (step.indexOf(PATH_START_OBJECT) === 0 && item) {
					rStep = step.replace(PATH_START_OBJECT, '');
					if (rStep.indexOf(FUNCTION_MARKER) === rStep.length - 2) {
						rStep = rStep.replace(FUNCTION_MARKER, '');
						if (Object.prototype.hasOwnProperty.call(item, rStep)) {
							return item[rStep](item, undefined);
						}
					} else {
						return item[rStep];
					}
				}
			}
			return step;
		}

		//::fieldName.result
		//{}
		//{fieldName: 'targetRecordField'}
		////['targetRecordField', 'result']
		/**
		 * Transforms path with sub paths to path without
		 * @param {string|array} path path to target property
		 * @param {object} item item object
		 * @param {object} helper helper object
		 * @return {array} parsed path
		 **/
		static parsePath(path, item, helper) {
			if (!Array.isArray(path)) {
				path = path.split(PATH_SPLIT);
			}
			for (var i = 0; i < path.length; i++) {
				path[i] = this.parsePathStep(path[i], item, helper);
			}
			return path;
		}

		/**
		 * Transforms path from string notation to array of keys
		 * @param {string|array} path  input path, if array does nothing
		 * @return {array} path in array notation
		 */

		static normilizePath(path) {
			if (Array.isArray(path)) {
				return path;
			} else {
				while (path.indexOf(PATH_START_OBJECT) > -1) {
					path = path.replace(PATH_START_OBJECT, '');
				}
				return path.split(PATH_SPLIT);
			}
		}

		/*
			small = ["todo"],
			big = ["todo", "length"]
			return true;

		*/

		/**
		 * Identifies if first path includes second, compared from start,
		 * no floating start position inside ['join', 'me'], ['me']
		 * will result in false
		 * @param {array} big where we will search
		 * @param {array} small what we will search
		 * @return {boolean} if we succeed
		 */

		static ifFullSubPath(big, small) {
			if (big.length < small.length) {
				return false;
			}
			for (let t = 0; t < small.length; t++) {
				if (small[t] !== big[t]) {
					return false;
				}
			}
			return true;
		}

		/**
		 * Getter through third object
		 * Path is parsed, no event triggering for notRecord
		 * @param {object} object object to be used as getter
		 * @param {string|array} attrPath path to property
		 * @param {object} item supporting data
		 * @param {helpers} object  supporting helpers
		 */

		static getValueByPath(object, attrPath, item, helpers) {
			attrPath = this.normilizePath(attrPath);
			let attrName = attrPath.shift(),
				isFunction = attrName.indexOf(FUNCTION_MARKER) > -1;
			if (isFunction) {
				attrName = attrName.replace(FUNCTION_MARKER, '');
			}
			if ((typeof object === 'object' && typeof object !== 'undefined' && object!== null) && typeof object[attrName] !== 'undefined' && object[attrName] !== null) {
				let newObj = isFunction ? object[attrName]({
					item,
					helpers
				}) : object[attrName];
				if (attrPath.length > 0) {
					return this.getValueByPath(newObj, attrPath, item, helpers);
				} else {
					return newObj;
				}
			} else {
				return undefined;
			}
		}

		/**
		 * Setter through third object
		 * Path is parsed, no event triggering for notRecord
		 * @param {object} object object to be modified
		 * @param {string|array} attrPath path to property
		 * @param {any} attrValue  value to assign
		 */

		static setValueByPath(object, attrPath, attrValue) {
			attrPath = this.normilizePath(attrPath);
			let attrName = attrPath.shift();
			if (attrPath.length > 0) {
				if (!Object.prototype.hasOwnProperty.call(object, attrName)) {
					object[attrName] = {};
				}
				this.setValueByPath(object[attrName], attrPath, attrValue);
			} else {
				object[attrName] = attrValue;
			}
		}

		/**
		* Joins passed in strings with PATH_SPLIT
		* @param {string} arguments path to be glued
		* @return {string} composite path
		*/

		static join() {
			let args = Array.prototype.slice.call(arguments);
			return args.join(PATH_SPLIT);
		}
	}

	var src$2 = notPath$1;

	var notPath = src$2;

	/*
	https://github.com/TehShrike/is-mergeable-object

	Included for convinience only. All rights belongs to their authors and etc.
	start of my code marked.

	*/

	var isMergeableObject$1 = function isMergeableObject(value) {
	  return isNonNullObject$1(value) && !isSpecial$1(value);
	};

	function isNonNullObject$1(value) {
	  return !!value && _typeof(value) === 'object';
	}

	function isSpecial$1(value) {
	  var stringValue = Object.prototype.toString.call(value);
	  return stringValue === '[object RegExp]' || stringValue === '[object Date]' || isReactElement$1(value);
	} // see https://github.com/facebook/react/blob/b5ac963fb791d1298e7f396236383bc955f916c1/src/isomorphic/classic/element/ReactElement.js#L21-L25


	var canUseSymbol$1 = typeof Symbol === 'function' && Symbol.for;
	var REACT_ELEMENT_TYPE$1 = canUseSymbol$1 ? Symbol.for('react.element') : 0xeac7;

	function isReactElement$1(value) {
	  return value.$$typeof === REACT_ELEMENT_TYPE$1;
	}
	/*
	https://github.com/KyleAMathews/deepmerge

	The MIT License (MIT)

	Copyright (c) 2012 Nicholas Fisher

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/


	function emptyTarget$1(val) {
	  return Array.isArray(val) ? [] : {};
	}

	function cloneUnlessOtherwiseSpecified$1(value, optionsArgument) {
	  var clone = !optionsArgument || optionsArgument.clone !== false;
	  return clone && isMergeableObject$1(value) ? deepmerge$1(emptyTarget$1(value), value, optionsArgument) : value;
	}

	function defaultArrayMerge$1(target, source, optionsArgument) {
	  return target.concat(source).map(function (element) {
	    return cloneUnlessOtherwiseSpecified$1(element, optionsArgument);
	  });
	}

	function mergeObject$1(target, source, optionsArgument) {
	  var destination = {};

	  if (isMergeableObject$1(target)) {
	    Object.keys(target).forEach(function (key) {
	      destination[key] = cloneUnlessOtherwiseSpecified$1(target[key], optionsArgument);
	    });
	  }

	  Object.keys(source).forEach(function (key) {
	    if (!isMergeableObject$1(source[key]) || !target[key]) {
	      destination[key] = cloneUnlessOtherwiseSpecified$1(source[key], optionsArgument);
	    } else {
	      destination[key] = deepmerge$1(target[key], source[key], optionsArgument);
	    }
	  });
	  return destination;
	}

	function deepmerge$1(target, source, optionsArgument) {
	  var sourceIsArray = Array.isArray(source);
	  var targetIsArray = Array.isArray(target);
	  var options = optionsArgument || {
	    arrayMerge: defaultArrayMerge$1
	  };
	  var sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;

	  if (!sourceAndTargetTypesMatch) {
	    return cloneUnlessOtherwiseSpecified$1(source, optionsArgument);
	  } else if (sourceIsArray) {
	    var arrayMerge = options.arrayMerge || defaultArrayMerge$1;
	    return arrayMerge(target, source, optionsArgument);
	  } else {
	    return mergeObject$1(target, source, optionsArgument);
	  }
	}

	deepmerge$1.all = function deepmergeAll(array, optionsArgument) {
	  if (!Array.isArray(array)) {
	    throw new Error('first argument should be an array');
	  }

	  return array.reduce(function (prev, next) {
	    return deepmerge$1(prev, next, optionsArgument);
	  }, {});
	};

	var notCommon = /*#__PURE__*/function () {
	  function notCommon() {
	    _classCallCheck(this, notCommon);
	  }

	  _createClass(notCommon, null, [{
	    key: "isError",
	    value: function isError(e) {
	      return e instanceof Error || Object.prototype.hasOwnProperty.call(e, 'status') && e.status === 'error';
	    }
	  }, {
	    key: "mute",
	    value: function mute() {
	      this.ENV_TYPE = 'production';
	    }
	  }, {
	    key: "pad",
	    value: function pad(n) {
	      return n < 10 ? '0' + n : n;
	    }
	    /**
	     *  Returns today Date object without hours, minutes, seconds
	     *  @return {number}  current date with 00:00:00 in ms of unix time
	     */

	  }, {
	    key: "getTodayDate",
	    value: function getTodayDate() {
	      var t = new Date();
	      return new Date(t.getFullYear(), t.getMonth(), t.getDate()).getTime();
	    }
	    /**
	     *  Returns true if object has field of name
	     *   @param   {object}    obj    some object
	     *  @param  {string}    name  field name
	     *  @return {boolean}          if object contains field with name
	     **/

	  }, {
	    key: "objHas",
	    value: function objHas(obj, name) {
	      return Object.prototype.hasOwnProperty.call(obj, name);
	    }
	    /**
	    * Copies object to secure it from changes
	    * @param {object}   obj     original object
	    * @return {object}          copy of object
	    **/

	  }, {
	    key: "copyObj",
	    value: function copyObj(obj) {
	      return JSON.parse(JSON.stringify(obj));
	    }
	    /**
	    * Copies object to secure it from changes
	    * @param {object}   obj     original object
	    * @return {object}          copy of object
	    **/

	  }, {
	    key: "partCopyObj",
	    value: function partCopyObj(obj, list) {
	      var partObj = Object.keys(obj).reduce(function (prev, curr) {
	        if (list.includes(curr)) {
	          prev[curr] = obj[curr];
	        }

	        return prev;
	      }, {});
	      return JSON.parse(JSON.stringify(partObj));
	    }
	    /**
	    * Test argument type to be 'function'
	    * @param {any}  func    possible function
	    * @return {boolean}     if this is a function
	    **/

	  }, {
	    key: "isFunc",
	    value: function isFunc(func) {
	      return typeof func === 'function';
	    }
	    /**
	    * Returns true if argument is Async function
	    * @param {function} func  to test
	    * @return {boolean}       if this function is constructed as AsyncFunction
	    **/

	  }, {
	    key: "isAsync",
	    value: function isAsync(func) {
	      return func.constructor.name === 'AsyncFunction';
	    }
	    /**
	    *  Executes method of object in appropriate way inside Promise
	    * @param {object}   obj     original object
	    * @param {string}   name    method name to execute
	    * @param {Array}     params  array of params
	    * @return {Promise}          results of method execution
	    **/

	  }, {
	    key: "executeObjectFunction",
	    value: function () {
	      var _executeObjectFunction = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(obj, name, params) {
	        var proc;
	        return regeneratorRuntime.wrap(function _callee$(_context) {
	          while (1) {
	            switch (_context.prev = _context.next) {
	              case 0:
	                if (!obj) {
	                  _context.next = 10;
	                  break;
	                }

	                proc = notPath.get(':' + name, obj);

	                if (!notCommon.isFunc(proc)) {
	                  _context.next = 10;
	                  break;
	                }

	                if (!notCommon.isAsync(proc)) {
	                  _context.next = 9;
	                  break;
	                }

	                _context.next = 6;
	                return proc.apply(void 0, _toConsumableArray(params));

	              case 6:
	                return _context.abrupt("return", _context.sent);

	              case 9:
	                return _context.abrupt("return", proc.apply(void 0, _toConsumableArray(params)));

	              case 10:
	              case "end":
	                return _context.stop();
	            }
	          }
	        }, _callee);
	      }));

	      function executeObjectFunction(_x, _x2, _x3) {
	        return _executeObjectFunction.apply(this, arguments);
	      }

	      return executeObjectFunction;
	    }()
	    /**
	    *  Executes method of object in apropriate way inside Promise
	    * @param {Object}   from     original object
	    * @param {Object}   name    method name to execute
	    * @param {Array}     list  array of params
	    * @return {Promise}          results of method execution
	    **/

	  }, {
	    key: "mapBind",
	    value: function mapBind(from, to, list) {
	      list.forEach(function (item) {
	        if (typeof from[item] === 'function') {
	          to[item] = from[item].bind(from);
	        }
	      });
	    }
	  }, {
	    key: "isClass",
	    value: function isClass(fn) {
	      return /^\s*class/.test(fn.toString());
	    }
	  }, {
	    key: "detectType",
	    value: function detectType(testie) {
	      if (typeof testie !== 'function') {
	        return _typeof(testie);
	      } else {
	        if (this.isClass(testie)) {
	          return 'class';
	        } else {
	          return 'function';
	        }
	      }
	    } //ÐÑÐ¾Ð²ÐµÑÐºÐ° ÑÐ²Ð»ÑÐµÑÑÑ Ð»Ð¸ Ð¿ÐµÑÐµÐ¼ÐµÐ½Ð½Ð°Ñ Ð¼Ð°ÑÑÐ¸Ð²Ð¾Ð¼

	  }, {
	    key: "isArray",
	    value: function isArray(data) {
	      return _typeof(data) == "object" && data instanceof Array;
	    }
	  }, {
	    key: "localIsoDate",
	    value: function localIsoDate(date) {
	      date = date || new Date();
	      var localIsoString = date.getFullYear() + '-' + this.pad(date.getMonth() + 1) + '-' + this.pad(date.getDate()) + 'T' + this.pad(date.getHours()) + ':' + this.pad(date.getMinutes()) + ':' + this.pad(date.getSeconds());
	      return localIsoString;
	    }
	  }, {
	    key: "getToday",
	    value: function getToday() {
	      var today = new Date();
	      var date = today.getFullYear() + '-' + this.pad(today.getMonth() + 1) + '-' + this.pad(today.getDate());
	      return date;
	    }
	  }, {
	    key: "backlogAdd",
	    value: function backlogAdd(msg) {
	      var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'log';

	      if (this.get('backlog') === true) {
	        this.backlog.push({
	          msg: msg,
	          type: type
	        });
	      }
	    }
	  }, {
	    key: "dumpBacklog",
	    value: function dumpBacklog() {
	      while (this.backlog.length) {
	        var _window$this$LOG;

	        var row = this.backlog.shift();

	        (_window$this$LOG = window[this.LOG])[row.type].apply(_window$this$LOG, _toConsumableArray(row.msg));
	      }
	    }
	  }, {
	    key: "logMsg",
	    value: function logMsg() {
	      var _window$this$LOG2;

	      var now = this.localIsoDate(); // eslint-disable-next-line no-console

	      (_window$this$LOG2 = window[this.LOG]).log.apply(_window$this$LOG2, ["[".concat(now, "]: ")].concat(Array.prototype.slice.call(arguments)));

	      this.backlogAdd(["[".concat(now, "]: ")].concat(Array.prototype.slice.call(arguments)), 'log');
	    }
	  }, {
	    key: "log",
	    value: function log() {
	      this.logMsg.apply(this, arguments);
	    }
	  }, {
	    key: "createLogger",
	    value: function createLogger(prefix) {
	      return {
	        log: this.genLogMsg(prefix),
	        error: this.genLogError(prefix),
	        debug: this.genLogDebug(prefix),
	        report: this.report
	      };
	    } //ÐÐµÐ½ÐµÑÐ°ÑÐ¸Ñ Ð¼ÐµÑÐ¾Ð´Ð° Ð²ÑÐ²Ð¾Ð´Ð° ÑÐ¾Ð¾Ð±ÑÐµÐ½Ð¸Ð¹ Ð² ÐºÐ¾Ð½ÑÐ¾Ð»Ñ Ñ ÑÐºÐ°Ð·Ð°Ð½Ð¸ÐµÐ¼ Ð¿ÑÐµÑÐ¸ÐºÑÐ°.

	  }, {
	    key: "genLogMsg",
	    value: function genLogMsg(prefix) {
	      return function () {
	        var _window$notCommon$LOG;

	        //not arrow bc of arguments special var is not available in arrow functions
	        var now = notCommon.localIsoDate(); // eslint-disable-next-line no-console

	        (_window$notCommon$LOG = window[notCommon.LOG]).log.apply(_window$notCommon$LOG, ["[".concat(now, "]: ").concat(prefix, "::")].concat(Array.prototype.slice.call(arguments)));

	        notCommon.backlogAdd(["[".concat(now, "]: ").concat(prefix, "::")].concat(Array.prototype.slice.call(arguments)), 'log');
	      };
	    }
	    /**
	     * ÐÐ¿ÑÐµÐ´ÐµÐ»ÑÐµÑ ÑÐ²Ð»ÑÐµÑÑÑ Ð»Ð¸ Ð¾ÐºÑÑÐ¶ÐµÐ½Ð¸Ðµ Ð¾ÐºÑÑÐ¶ÐµÐ½Ð¸ÐµÐ¼ ÑÐ°Ð·ÑÐ°Ð±Ð¾ÑÐºÐ¸
	     * @returns  {boolean} true ÐµÑÐ»Ð¸ ÑÑÐ¾ Ð·Ð°Ð¿ÑÑÐµÐ½Ð¾ Ð² Ð¾ÐºÑÑÐ¶ÐµÐ½Ð¸Ð¸ ÑÐ°Ð·ÑÐ°Ð±Ð¾ÑÐºÐ¸
	     **/

	  }, {
	    key: "isDev",
	    value: function isDev() {
	      return this.ENV_TYPE === this.DEV_ENV;
	    }
	  }, {
	    key: "debug",
	    value: function debug() {
	      if (this.isDev()) {
	        return this.logMsg.apply(this, arguments);
	      } else {
	        return this.NOOP;
	      }
	    }
	  }, {
	    key: "genLogDebug",
	    value: function genLogDebug(prefix) {
	      if (this.isDev()) {
	        return this.genLogMsg(prefix);
	      } else {
	        return this.NOOP;
	      }
	    }
	  }, {
	    key: "error",
	    value: function error() {
	      this.logError.apply(this, arguments);
	    } //Ð¤ÑÐ½ÐºÑÐ¸Ñ Ð²ÑÐ²Ð¾Ð´Ð° ÑÐ¾Ð¾Ð±ÑÐµÐ½Ð¸Ñ Ð¾Ð± Ð¾ÑÐ¸Ð±ÐºÐµ

	  }, {
	    key: "logError",
	    value: function logError() {
	      var _window$this$LOG3;

	      var now = this.localIsoDate(); // eslint-disable-next-line no-console

	      (_window$this$LOG3 = window[this.LOG]).error.apply(_window$this$LOG3, ["[".concat(now, "]: ")].concat(Array.prototype.slice.call(arguments)));

	      this.backlogAdd(["[".concat(now, "]: ")].concat(Array.prototype.slice.call(arguments)), 'error');
	    }
	  }, {
	    key: "genLogError",
	    value: function genLogError(prefix) {
	      return function () {
	        var _window$notCommon$LOG2;

	        //do not change to arrow function, bc of arguments
	        var now = notCommon.localIsoDate(); // eslint-disable-next-line no-console

	        (_window$notCommon$LOG2 = window[notCommon.LOG]).error.apply(_window$notCommon$LOG2, ["[".concat(now, "]: ").concat(prefix, "::")].concat(Array.prototype.slice.call(arguments)));

	        notCommon.backlogAdd(["[".concat(now, "]: ").concat(prefix, "::")].concat(Array.prototype.slice.call(arguments)), 'error');
	      };
	    }
	  }, {
	    key: "report",
	    value: function report(e) {
	      if (this.getApp()) {
	        var reporter = this.getApp().getService('nsErrorReporter');

	        if (reporter) {
	          reporter.report(e).catch(this.error.bind(this));
	        }
	      } else {
	        if (!this.get('production')) {
	          this.error.apply(this, arguments);
	        }
	      }
	    }
	  }, {
	    key: "trace",
	    value: function trace() {
	      if (!this.get('production')) {
	        this.trace.apply(this, arguments);
	      }
	    }
	  }, {
	    key: "trimBackslash",
	    value: function trimBackslash(str) {
	      if (str.indexOf('/') === 0) {
	        str = str.substring(1);
	      }

	      if (str[str.length - 1] === '/') {
	        str = str.substring(0, str.length - 1);
	      }

	      return str;
	    }
	    /**
	    *  Builds URL with structure like prefix/module/model/id/action
	    * If some part absent or set to false it will be excluded from result
	    *
	    *  @return {string}  url path
	    */

	  }, {
	    key: "buildURL",
	    value: function buildURL(_ref) {
	      var prefix = _ref.prefix,
	          module = _ref.module,
	          model = _ref.model,
	          id = _ref.id,
	          action = _ref.action;
	      var url = ['/'];

	      if (prefix) {
	        url.push(encodeURIComponent(this.trimBackslash(prefix)));
	      }

	      if (module) {
	        url.push(encodeURIComponent(this.trimBackslash(module)));
	      }

	      if (model) {
	        url.push(encodeURIComponent(this.trimBackslash(model)));
	      }

	      if (id) {
	        url.push(encodeURIComponent(this.trimBackslash(id)));
	      }

	      if (action) {
	        url.push(encodeURIComponent(this.trimBackslash(action)));
	      }

	      url = url.filter(function (el) {
	        return el !== '';
	      });
	      return url.join('/').replace(/\/\//g, '/');
	    }
	  }, {
	    key: "capitalizeFirstLetter",
	    value: function capitalizeFirstLetter(name) {
	      return name.charAt(0).toUpperCase() + name.slice(1);
	    }
	  }, {
	    key: "lowerFirstLetter",
	    value: function lowerFirstLetter(string) {
	      return string.charAt(0).toLowerCase() + string.slice(1);
	    }
	  }, {
	    key: "strLengthCap",
	    value: function strLengthCap(str) {
	      var MAX_TITLE_LENGTH = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 50;
	      var POST_FIX = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '...';

	      if (str.length > MAX_TITLE_LENGTH) {
	        return str.substr(0, MAX_TITLE_LENGTH) + POST_FIX;
	      } else {
	        return str;
	      }
	    }
	  }, {
	    key: "escapeHtml",
	    value: function escapeHtml(unsafe) {
	      return unsafe.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;').replace(/'/g, '&#039;');
	    }
	  }, {
	    key: "startApp",
	    value: function startApp(starter) {
	      document.addEventListener('DOMContentLoaded', starter);
	    }
	  }, {
	    key: "getApp",
	    value: function getApp() {
	      return this.get('app');
	    }
	  }, {
	    key: "extendAppConfig",
	    value: function extendAppConfig(conf, conf2) {
	      return this.deepMerge(conf, conf2);
	    }
	  }, {
	    key: "absorbModule",
	    value: function absorbModule() {
	      var defaultConf,
	          //app options
	      mod,
	          //module options
	      targets = {}; //various collections

	      if (arguments.length == 1) {
	        targets = _objectSpread2({}, arguments[0]);

	        if (Object.hasOwnProperty.call(arguments[0], 'defaultConf')) {
	          defaultConf = arguments[0].defaultConf;
	          delete targets.defaultConf;
	        }

	        if (Object.hasOwnProperty.call(arguments[0], 'mod')) {
	          mod = arguments[0].mod;
	          delete targets.mod;
	        }
	      } else {
	        this.log('WARNING: absorbModule format obsoleted, use object {defaultConf, mod, services, uis, wsc, etc}');
	        defaultConf = arguments[0];
	        mod = arguments[1];

	        if (arguments.length > 2) {
	          targets.services = arguments[2];
	        }

	        if (arguments.length > 3) {
	          targets.uis = arguments[3];
	        }

	        if (arguments.length > 4) {
	          targets.wcs = arguments[4];
	        }
	      }

	      for (var prop in mod) {
	        //add manifest to other
	        if (prop === 'manifest') {
	          defaultConf = this.extendAppConfig(defaultConf, mod.manifest);
	          continue;
	        }

	        if (typeof this.get("absorb.".concat(prop)) === 'function') {
	          if (!Object.prototype.hasOwnProperty.call(targets, prop)) {
	            targets[prop] = {};
	            this.log("WARNING: no accamulator object provided for '".concat(prop, "' collection"));
	          }

	          this.get("absorb.".concat(prop))(targets[prop], mod[prop]);
	        } else if (prop.indexOf('nc') === 0) {
	          if (!Object.prototype.hasOwnProperty.call(defaultConf, 'controllers')) {
	            defaultConf.controllers = {};
	          }

	          defaultConf.controllers[prop] = mod[prop];
	        } else {
	          //in case of some other stuff presented, isolating it in special var
	          if (!Object.prototype.hasOwnProperty.call(window, 'notEnv')) {
	            window.notEnv = {};
	          }

	          window.notEnv[prop] = mod[prop];
	        }
	      }

	      return defaultConf;
	    }
	  }, {
	    key: "defineIfNotExists",
	    value: function defineIfNotExists(obj, key, defaultValue) {
	      if (!Object.prototype.hasOwnProperty.call(obj, key)) {
	        obj[key] = defaultValue;
	      }
	    }
	  }, {
	    key: "register",
	    value: function register(key, val) {
	      this.registry[key] = val;
	    }
	  }, {
	    key: "get",
	    value: function get(key) {
	      return Object.prototype.hasOwnProperty.call(this.registry, key) ? this.registry[key] : null;
	    }
	  }, {
	    key: "moveItem",
	    value: function moveItem(array, old_index, new_index) {
	      if (new_index >= array.length) {
	        var k = new_index - array.length;

	        while (k-- + 1) {
	          array.push(undefined);
	        }
	      }

	      array.splice(new_index, 0, array.splice(old_index, 1)[0]);
	    }
	  }, {
	    key: "stripProxy",
	    value: function stripProxy(obj) {
	      if (typeof obj !== 'undefined' && obj !== null) {
	        if (obj.isProxy) {
	          if (Array.isArray(obj)) {
	            obj = Array.from(obj);
	          } else {
	            obj = Object.assign({}, obj);
	          }

	          for (var t in obj) {
	            if (Object.prototype.hasOwnProperty.call(obj, t)) {
	              obj[t] = this.stripProxy(obj[t]);
	            }
	          }
	        }
	      }

	      return obj;
	    }
	  }, {
	    key: "pipe",
	    value: function pipe(data
	    /* feed data */
	    , funcs
	    /* functions array */
	    ) {
	      var result;

	      var _iterator = _createForOfIteratorHelper(funcs),
	          _step;

	      try {
	        for (_iterator.s(); !(_step = _iterator.n()).done;) {
	          var func = _step.value;
	          result = func(result || data);
	        }
	      } catch (err) {
	        _iterator.e(err);
	      } finally {
	        _iterator.f();
	      }

	      return result;
	    }
	  }, {
	    key: "getAPI",
	    value: function getAPI(type) {
	      return this.getManager() ? this.getManager().getAPI(type) : null;
	    }
	  }, {
	    key: "setManager",
	    value: function setManager(v) {
	      this.MANAGER = v;
	    }
	  }, {
	    key: "getManager",
	    value: function getManager() {
	      return this.MANAGER;
	    }
	  }, {
	    key: "getJSON",
	    value: function getJSON(url) {
	      return fetch(url).then(function (response) {
	        return response.json();
	      });
	    }
	  }, {
	    key: "wait",
	    value: function wait(sec) {
	      return new Promise(function (res) {
	        setTimeout(res, sec * 1000);
	      });
	    }
	  }, {
	    key: "registerWidgetEvents",
	    value: function registerWidgetEvents(events) {
	      var _this = this;

	      if (this.getApp()) {
	        Object.keys(events).forEach(function (eventName) {
	          _this.getApp().on(eventName, events[eventName]);
	        });
	      }
	    }
	  }]);

	  return notCommon;
	}();

	_defineProperty(notCommon, "MANAGER", null);

	_defineProperty(notCommon, "LOG", 'console');

	_defineProperty(notCommon, "deepMerge", deepmerge$1);

	_defineProperty(notCommon, "TZ_OFFSET", new Date().getTimezoneOffset() / 60 * -1);

	_defineProperty(notCommon, "DEV_ENV", 'production');

	_defineProperty(notCommon, "ENV_TYPE", window.NOT_ENV_TYPE ? window.NOT_ENV_TYPE : notCommon.DEV_ENV);

	_defineProperty(notCommon, "NOOP", function () {});

	_defineProperty(notCommon, "backlog", []);

	_defineProperty(notCommon, "registry", {});

	function absorbServices(target, src) {
	  if (target) {
	    for (var serv in src) {
	      if (Object.prototype.hasOwnProperty.call(target, serv)) {
	        notCommon.logError("services property duplication ".concat(serv));
	      }

	      target[serv] = src[serv];
	    }
	  }
	}

	function extendWSClient(wcs, wscName, wscOptions) {
	  if (!Object.prototype.hasOwnProperty.call(wcs, wscName)) {
	    wcs[wscName] = {
	      connection: {},
	      router: {
	        routes: {}
	      },
	      messenger: {}
	    };
	  }

	  var target = wcs[wscName];

	  if (Object.prototype.hasOwnProperty.call(wscOptions, 'router')) {
	    if (Object.prototype.hasOwnProperty.call(wscOptions.router, 'routes')) {
	      for (var routeType in wscOptions.router.routes) {
	        if (!Object.prototype.hasOwnProperty.call(target.router.routes, routeType)) {
	          target.router.routes[routeType] = {};
	        }

	        Object.assign(target.router.routes[routeType], _objectSpread2({}, wscOptions.router.routes[routeType]));
	      }
	    }
	  }

	  if (Object.prototype.hasOwnProperty.call(wscOptions, 'messenger')) {
	    Object.assign(target.messenger, _objectSpread2({}, wscOptions.messenger));
	  }

	  if (Object.prototype.hasOwnProperty.call(wscOptions, 'connection')) {
	    Object.assign(target.connection, _objectSpread2({}, wscOptions.connection));
	  }

	  for (var _i = 0, _arr = ['name', 'getToken', 'logger', 'identity', 'credentials']; _i < _arr.length; _i++) {
	    var t = _arr[_i];

	    if (Object.prototype.hasOwnProperty.call(wscOptions, t)) {
	      target[t] = wscOptions[t];
	    }
	  }
	}

	function absorbWSC(target, src) {
	  if (target) {
	    for (var wsClientName in src) {
	      extendWSClient(target, wsClientName, src[wsClientName]);
	    }
	  }
	}

	function absorbUIs(target, src) {
	  if (target) {
	    for (var ui in src) {
	      if (Object.prototype.hasOwnProperty.call(target, ui)) {
	        notCommon.logError("uis property duplication ".concat(ui));
	      }

	      target[ui] = src[ui];
	    }
	  }
	}

	function absorbFields(target, src) {
	  if (target) {
	    for (var ui in src) {
	      if (Object.prototype.hasOwnProperty.call(target, ui)) {
	        notCommon.logError("fields property duplication ".concat(ui));
	      }

	      target[ui] = src[ui];
	    }
	  }
	}

	notCommon.register('absorb.wsc', absorbWSC);
	notCommon.register('absorb.services', absorbServices);
	notCommon.register('absorb.uis', absorbUIs);
	notCommon.register('absorb.uis', absorbFields);

	// `SameValue` abstract operation
	// https://tc39.es/ecma262/#sec-samevalue
	// eslint-disable-next-line es/no-object-is -- safe
	var sameValue = Object.is || function is(x, y) {
	  // eslint-disable-next-line no-self-compare -- NaN check
	  return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;
	};

	// @@search logic
	fixRegexpWellKnownSymbolLogic('search', function (SEARCH, nativeSearch, maybeCallNative) {
	  return [
	    // `String.prototype.search` method
	    // https://tc39.es/ecma262/#sec-string.prototype.search
	    function search(regexp) {
	      var O = requireObjectCoercible(this);
	      var searcher = regexp == undefined ? undefined : getMethod(regexp, SEARCH);
	      return searcher ? functionCall(searcher, regexp, O) : new RegExp(regexp)[SEARCH](toString_1(O));
	    },
	    // `RegExp.prototype[@@search]` method
	    // https://tc39.es/ecma262/#sec-regexp.prototype-@@search
	    function (string) {
	      var rx = anObject(this);
	      var S = toString_1(string);
	      var res = maybeCallNative(nativeSearch, rx, S);

	      if (res.done) return res.value;

	      var previousLastIndex = rx.lastIndex;
	      if (!sameValue(previousLastIndex, 0)) rx.lastIndex = 0;
	      var result = regexpExecAbstract(rx, S);
	      if (!sameValue(rx.lastIndex, previousLastIndex)) rx.lastIndex = previousLastIndex;
	      return result === null ? -1 : result.index;
	    }
	  ];
	});

	// @@match logic
	fixRegexpWellKnownSymbolLogic('match', function (MATCH, nativeMatch, maybeCallNative) {
	  return [
	    // `String.prototype.match` method
	    // https://tc39.es/ecma262/#sec-string.prototype.match
	    function match(regexp) {
	      var O = requireObjectCoercible(this);
	      var matcher = regexp == undefined ? undefined : getMethod(regexp, MATCH);
	      return matcher ? functionCall(matcher, regexp, O) : new RegExp(regexp)[MATCH](toString_1(O));
	    },
	    // `RegExp.prototype[@@match]` method
	    // https://tc39.es/ecma262/#sec-regexp.prototype-@@match
	    function (string) {
	      var rx = anObject(this);
	      var S = toString_1(string);
	      var res = maybeCallNative(nativeMatch, rx, S);

	      if (res.done) return res.value;

	      if (!rx.global) return regexpExecAbstract(rx, S);

	      var fullUnicode = rx.unicode;
	      rx.lastIndex = 0;
	      var A = [];
	      var n = 0;
	      var result;
	      while ((result = regexpExecAbstract(rx, S)) !== null) {
	        var matchStr = toString_1(result[0]);
	        A[n] = matchStr;
	        if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
	        n++;
	      }
	      return n === 0 ? null : A;
	    }
	  ];
	});

	var EventEmitter = createCommonjsModule(function (module) {
	(function (exports) {

	    /**
	     * Class for managing events.
	     * Can be extended to provide event functionality in other classes.
	     *
	     * @class EventEmitter Manages event registering and emitting.
	     */
	    function EventEmitter() {}

	    // Shortcuts to improve speed and size
	    var proto = EventEmitter.prototype;
	    var originalGlobalValue = exports.EventEmitter;

	    /**
	     * Finds the index of the listener for the event in its storage array.
	     *
	     * @param {Function[]} listeners Array of listeners to search through.
	     * @param {Function} listener Method to look for.
	     * @return {Number} Index of the specified listener, -1 if not found
	     * @api private
	     */
	    function indexOfListener(listeners, listener) {
	        var i = listeners.length;
	        while (i--) {
	            if (listeners[i].listener === listener) {
	                return i;
	            }
	        }

	        return -1;
	    }

	    /**
	     * Alias a method while keeping the context correct, to allow for overwriting of target method.
	     *
	     * @param {String} name The name of the target method.
	     * @return {Function} The aliased method
	     * @api private
	     */
	    function alias(name) {
	        return function aliasClosure() {
	            return this[name].apply(this, arguments);
	        };
	    }

	    /**
	     * Returns the listener array for the specified event.
	     * Will initialise the event object and listener arrays if required.
	     * Will return an object if you use a regex search. The object contains keys for each matched event. So /ba[rz]/ might return an object containing bar and baz. But only if you have either defined them with defineEvent or added some listeners to them.
	     * Each property in the object response is an array of listener functions.
	     *
	     * @param {String|RegExp} evt Name of the event to return the listeners from.
	     * @return {Function[]|Object} All listener functions for the event.
	     */
	    proto.getListeners = function getListeners(evt) {
	        var events = this._getEvents();
	        var response;
	        var key;

	        // Return a concatenated array of all matching events if
	        // the selector is a regular expression.
	        if (evt instanceof RegExp) {
	            response = {};
	            for (key in events) {
	                if (events.hasOwnProperty(key) && evt.test(key)) {
	                    response[key] = events[key];
	                }
	            }
	        }
	        else {
	            response = events[evt] || (events[evt] = []);
	        }

	        return response;
	    };

	    /**
	     * Takes a list of listener objects and flattens it into a list of listener functions.
	     *
	     * @param {Object[]} listeners Raw listener objects.
	     * @return {Function[]} Just the listener functions.
	     */
	    proto.flattenListeners = function flattenListeners(listeners) {
	        var flatListeners = [];
	        var i;

	        for (i = 0; i < listeners.length; i += 1) {
	            flatListeners.push(listeners[i].listener);
	        }

	        return flatListeners;
	    };

	    /**
	     * Fetches the requested listeners via getListeners but will always return the results inside an object. This is mainly for internal use but others may find it useful.
	     *
	     * @param {String|RegExp} evt Name of the event to return the listeners from.
	     * @return {Object} All listener functions for an event in an object.
	     */
	    proto.getListenersAsObject = function getListenersAsObject(evt) {
	        var listeners = this.getListeners(evt);
	        var response;

	        if (listeners instanceof Array) {
	            response = {};
	            response[evt] = listeners;
	        }

	        return response || listeners;
	    };

	    function isValidListener (listener) {
	        if (typeof listener === 'function' || listener instanceof RegExp) {
	            return true
	        } else if (listener && typeof listener === 'object') {
	            return isValidListener(listener.listener)
	        } else {
	            return false
	        }
	    }

	    /**
	     * Adds a listener function to the specified event.
	     * The listener will not be added if it is a duplicate.
	     * If the listener returns true then it will be removed after it is called.
	     * If you pass a regular expression as the event name then the listener will be added to all events that match it.
	     *
	     * @param {String|RegExp} evt Name of the event to attach the listener to.
	     * @param {Function} listener Method to be called when the event is emitted. If the function returns true then it will be removed after calling.
	     * @return {Object} Current instance of EventEmitter for chaining.
	     */
	    proto.addListener = function addListener(evt, listener) {
	        if (!isValidListener(listener)) {
	            throw new TypeError('listener must be a function');
	        }

	        var listeners = this.getListenersAsObject(evt);
	        var listenerIsWrapped = typeof listener === 'object';
	        var key;

	        for (key in listeners) {
	            if (listeners.hasOwnProperty(key) && indexOfListener(listeners[key], listener) === -1) {
	                listeners[key].push(listenerIsWrapped ? listener : {
	                    listener: listener,
	                    once: false
	                });
	            }
	        }

	        return this;
	    };

	    /**
	     * Alias of addListener
	     */
	    proto.on = alias('addListener');

	    /**
	     * Semi-alias of addListener. It will add a listener that will be
	     * automatically removed after its first execution.
	     *
	     * @param {String|RegExp} evt Name of the event to attach the listener to.
	     * @param {Function} listener Method to be called when the event is emitted. If the function returns true then it will be removed after calling.
	     * @return {Object} Current instance of EventEmitter for chaining.
	     */
	    proto.addOnceListener = function addOnceListener(evt, listener) {
	        return this.addListener(evt, {
	            listener: listener,
	            once: true
	        });
	    };

	    /**
	     * Alias of addOnceListener.
	     */
	    proto.once = alias('addOnceListener');

	    /**
	     * Defines an event name. This is required if you want to use a regex to add a listener to multiple events at once. If you don't do this then how do you expect it to know what event to add to? Should it just add to every possible match for a regex? No. That is scary and bad.
	     * You need to tell it what event names should be matched by a regex.
	     *
	     * @param {String} evt Name of the event to create.
	     * @return {Object} Current instance of EventEmitter for chaining.
	     */
	    proto.defineEvent = function defineEvent(evt) {
	        this.getListeners(evt);
	        return this;
	    };

	    /**
	     * Uses defineEvent to define multiple events.
	     *
	     * @param {String[]} evts An array of event names to define.
	     * @return {Object} Current instance of EventEmitter for chaining.
	     */
	    proto.defineEvents = function defineEvents(evts) {
	        for (var i = 0; i < evts.length; i += 1) {
	            this.defineEvent(evts[i]);
	        }
	        return this;
	    };

	    /**
	     * Removes a listener function from the specified event.
	     * When passed a regular expression as the event name, it will remove the listener from all events that match it.
	     *
	     * @param {String|RegExp} evt Name of the event to remove the listener from.
	     * @param {Function} listener Method to remove from the event.
	     * @return {Object} Current instance of EventEmitter for chaining.
	     */
	    proto.removeListener = function removeListener(evt, listener) {
	        var listeners = this.getListenersAsObject(evt);
	        var index;
	        var key;

	        for (key in listeners) {
	            if (listeners.hasOwnProperty(key)) {
	                index = indexOfListener(listeners[key], listener);

	                if (index !== -1) {
	                    listeners[key].splice(index, 1);
	                }
	            }
	        }

	        return this;
	    };

	    /**
	     * Alias of removeListener
	     */
	    proto.off = alias('removeListener');

	    /**
	     * Adds listeners in bulk using the manipulateListeners method.
	     * If you pass an object as the first argument you can add to multiple events at once. The object should contain key value pairs of events and listeners or listener arrays. You can also pass it an event name and an array of listeners to be added.
	     * You can also pass it a regular expression to add the array of listeners to all events that match it.
	     * Yeah, this function does quite a bit. That's probably a bad thing.
	     *
	     * @param {String|Object|RegExp} evt An event name if you will pass an array of listeners next. An object if you wish to add to multiple events at once.
	     * @param {Function[]} [listeners] An optional array of listener functions to add.
	     * @return {Object} Current instance of EventEmitter for chaining.
	     */
	    proto.addListeners = function addListeners(evt, listeners) {
	        // Pass through to manipulateListeners
	        return this.manipulateListeners(false, evt, listeners);
	    };

	    /**
	     * Removes listeners in bulk using the manipulateListeners method.
	     * If you pass an object as the first argument you can remove from multiple events at once. The object should contain key value pairs of events and listeners or listener arrays.
	     * You can also pass it an event name and an array of listeners to be removed.
	     * You can also pass it a regular expression to remove the listeners from all events that match it.
	     *
	     * @param {String|Object|RegExp} evt An event name if you will pass an array of listeners next. An object if you wish to remove from multiple events at once.
	     * @param {Function[]} [listeners] An optional array of listener functions to remove.
	     * @return {Object} Current instance of EventEmitter for chaining.
	     */
	    proto.removeListeners = function removeListeners(evt, listeners) {
	        // Pass through to manipulateListeners
	        return this.manipulateListeners(true, evt, listeners);
	    };

	    /**
	     * Edits listeners in bulk. The addListeners and removeListeners methods both use this to do their job. You should really use those instead, this is a little lower level.
	     * The first argument will determine if the listeners are removed (true) or added (false).
	     * If you pass an object as the second argument you can add/remove from multiple events at once. The object should contain key value pairs of events and listeners or listener arrays.
	     * You can also pass it an event name and an array of listeners to be added/removed.
	     * You can also pass it a regular expression to manipulate the listeners of all events that match it.
	     *
	     * @param {Boolean} remove True if you want to remove listeners, false if you want to add.
	     * @param {String|Object|RegExp} evt An event name if you will pass an array of listeners next. An object if you wish to add/remove from multiple events at once.
	     * @param {Function[]} [listeners] An optional array of listener functions to add/remove.
	     * @return {Object} Current instance of EventEmitter for chaining.
	     */
	    proto.manipulateListeners = function manipulateListeners(remove, evt, listeners) {
	        var i;
	        var value;
	        var single = remove ? this.removeListener : this.addListener;
	        var multiple = remove ? this.removeListeners : this.addListeners;

	        // If evt is an object then pass each of its properties to this method
	        if (typeof evt === 'object' && !(evt instanceof RegExp)) {
	            for (i in evt) {
	                if (evt.hasOwnProperty(i) && (value = evt[i])) {
	                    // Pass the single listener straight through to the singular method
	                    if (typeof value === 'function') {
	                        single.call(this, i, value);
	                    }
	                    else {
	                        // Otherwise pass back to the multiple function
	                        multiple.call(this, i, value);
	                    }
	                }
	            }
	        }
	        else {
	            // So evt must be a string
	            // And listeners must be an array of listeners
	            // Loop over it and pass each one to the multiple method
	            i = listeners.length;
	            while (i--) {
	                single.call(this, evt, listeners[i]);
	            }
	        }

	        return this;
	    };

	    /**
	     * Removes all listeners from a specified event.
	     * If you do not specify an event then all listeners will be removed.
	     * That means every event will be emptied.
	     * You can also pass a regex to remove all events that match it.
	     *
	     * @param {String|RegExp} [evt] Optional name of the event to remove all listeners for. Will remove from every event if not passed.
	     * @return {Object} Current instance of EventEmitter for chaining.
	     */
	    proto.removeEvent = function removeEvent(evt) {
	        var type = typeof evt;
	        var events = this._getEvents();
	        var key;

	        // Remove different things depending on the state of evt
	        if (type === 'string') {
	            // Remove all listeners for the specified event
	            delete events[evt];
	        }
	        else if (evt instanceof RegExp) {
	            // Remove all events matching the regex.
	            for (key in events) {
	                if (events.hasOwnProperty(key) && evt.test(key)) {
	                    delete events[key];
	                }
	            }
	        }
	        else {
	            // Remove all listeners in all events
	            delete this._events;
	        }

	        return this;
	    };

	    /**
	     * Alias of removeEvent.
	     *
	     * Added to mirror the node API.
	     */
	    proto.removeAllListeners = alias('removeEvent');

	    /**
	     * Emits an event of your choice.
	     * When emitted, every listener attached to that event will be executed.
	     * If you pass the optional argument array then those arguments will be passed to every listener upon execution.
	     * Because it uses `apply`, your array of arguments will be passed as if you wrote them out separately.
	     * So they will not arrive within the array on the other side, they will be separate.
	     * You can also pass a regular expression to emit to all events that match it.
	     *
	     * @param {String|RegExp} evt Name of the event to emit and execute listeners for.
	     * @param {Array} [args] Optional array of arguments to be passed to each listener.
	     * @return {Object} Current instance of EventEmitter for chaining.
	     */
	    proto.emitEvent = function emitEvent(evt, args) {
	        var listenersMap = this.getListenersAsObject(evt);
	        var listeners;
	        var listener;
	        var i;
	        var key;
	        var response;

	        for (key in listenersMap) {
	            if (listenersMap.hasOwnProperty(key)) {
	                listeners = listenersMap[key].slice(0);

	                for (i = 0; i < listeners.length; i++) {
	                    // If the listener returns true then it shall be removed from the event
	                    // The function is executed either with a basic call or an apply if there is an args array
	                    listener = listeners[i];

	                    if (listener.once === true) {
	                        this.removeListener(evt, listener.listener);
	                    }

	                    response = listener.listener.apply(this, args || []);

	                    if (response === this._getOnceReturnValue()) {
	                        this.removeListener(evt, listener.listener);
	                    }
	                }
	            }
	        }

	        return this;
	    };

	    /**
	     * Alias of emitEvent
	     */
	    proto.trigger = alias('emitEvent');

	    /**
	     * Subtly different from emitEvent in that it will pass its arguments on to the listeners, as opposed to taking a single array of arguments to pass on.
	     * As with emitEvent, you can pass a regex in place of the event name to emit to all events that match it.
	     *
	     * @param {String|RegExp} evt Name of the event to emit and execute listeners for.
	     * @param {...*} Optional additional arguments to be passed to each listener.
	     * @return {Object} Current instance of EventEmitter for chaining.
	     */
	    proto.emit = function emit(evt) {
	        var args = Array.prototype.slice.call(arguments, 1);
	        return this.emitEvent(evt, args);
	    };

	    /**
	     * Sets the current value to check against when executing listeners. If a
	     * listeners return value matches the one set here then it will be removed
	     * after execution. This value defaults to true.
	     *
	     * @param {*} value The new value to check for when executing listeners.
	     * @return {Object} Current instance of EventEmitter for chaining.
	     */
	    proto.setOnceReturnValue = function setOnceReturnValue(value) {
	        this._onceReturnValue = value;
	        return this;
	    };

	    /**
	     * Fetches the current value to check against when executing listeners. If
	     * the listeners return value matches this one then it should be removed
	     * automatically. It will return true by default.
	     *
	     * @return {*|Boolean} The current value to check for or the default, true.
	     * @api private
	     */
	    proto._getOnceReturnValue = function _getOnceReturnValue() {
	        if (this.hasOwnProperty('_onceReturnValue')) {
	            return this._onceReturnValue;
	        }
	        else {
	            return true;
	        }
	    };

	    /**
	     * Fetches the events object and creates one if required.
	     *
	     * @return {Object} The events storage object.
	     * @api private
	     */
	    proto._getEvents = function _getEvents() {
	        return this._events || (this._events = {});
	    };

	    /**
	     * Reverts the global {@link EventEmitter} to its previous value and returns a reference to this version.
	     *
	     * @return {Function} Non conflicting EventEmitter class.
	     */
	    EventEmitter.noConflict = function noConflict() {
	        exports.EventEmitter = originalGlobalValue;
	        return EventEmitter;
	    };

	    // Expose the class either via AMD, CommonJS or the global object
	    if (module.exports){
	        module.exports = EventEmitter;
	    }
	    else {
	        exports.EventEmitter = EventEmitter;
	    }
	}(typeof window !== 'undefined' ? window : commonjsGlobal || {}));
	});

	var META_METHOD_INIT = Symbol('init'),
	    META_DATA = Symbol('data'),
	    META_WORKING = Symbol('working'),
	    META_OPTIONS = Symbol('options');

	var notBase = /*#__PURE__*/function (_EventEmitter) {
	  _inherits(notBase, _EventEmitter);

	  var _super = _createSuper(notBase);

	  function notBase(input) {
	    var _this;

	    _classCallCheck(this, notBase);

	    _this = _super.call(this);
	    _this[META_DATA] = {};
	    _this[META_WORKING] = {};
	    _this[META_OPTIONS] = {};

	    _this[META_METHOD_INIT](input);

	    return _possibleConstructorReturn(_this, _assertThisInitialized(_this));
	  }

	  _createClass(notBase, [{
	    key: META_METHOD_INIT,
	    value: function value(input) {
	      if (!input) {
	        input = {};
	      }

	      if (Object.prototype.hasOwnProperty.call(input, 'data')) {
	        this.setData(input.data);
	      }

	      if (Object.prototype.hasOwnProperty.call(input, 'working')) {
	        this.setWorking(input.working);
	      }

	      if (Object.prototype.hasOwnProperty.call(input, 'options')) {
	        this.setOptions(input.options);
	      }

	      this.log = notCommon.genLogMsg(this.getWorking('name'));
	      this.info = this.log;
	      this.debug = notCommon.genLogDebug(this.getWorking('name'));
	      this.error = notCommon.genLogError(this.getWorking('name'));
	    }
	  }, {
	    key: "setCommon",
	    value: function setCommon(what, args) {
	      switch (args.length) {
	        case 1:
	          {
	            /* set collection */
	            what = args[0];
	            break;
	          }

	        case 2:
	          {
	            /* set collection element */
	            notPath.set(args[0]
	            /* path */
	            , what
	            /* collection */
	            , undefined
	            /* helpers */
	            , args[1]
	            /* value */
	            );
	            break;
	          }
	      }

	      return this;
	    }
	  }, {
	    key: "getCommon",
	    value: function getCommon(what, args) {
	      switch (args.length) {
	        /* if we want get data by path */
	        case 1:
	          {
	            return notPath.get(args[0], what);
	          }

	        /* if we want get data by path with default value */

	        case 2:
	          {
	            var res = notPath.get(args[0], what);

	            if (res === undefined) {
	              /* no data, return default value */
	              return args[1];
	            } else {
	              /* data, return it */
	              return res;
	            }
	          }

	        /* return full collection */

	        default:
	          {
	            return what;
	          }
	      }
	    }
	    /*
	      CORE OBJECT
	        DATA - information
	        OPTIONS - how to work
	        WORKING - temporarily generated in proccess
	    */

	  }, {
	    key: "setData",
	    value: function setData() {
	      if (arguments.length === 1) {
	        this[META_DATA] = arguments[0];
	      } else {
	        this.setCommon(this.getData(), arguments);
	      }

	      this.emit('change');
	      return this;
	    }
	  }, {
	    key: "getData",
	    value: function getData() {
	      return this.getCommon(this[META_DATA], arguments);
	    }
	  }, {
	    key: "setOptions",
	    value: function setOptions() {
	      if (arguments.length === 1) {
	        this[META_OPTIONS] = arguments[0];
	      } else {
	        this.setCommon(this.getOptions(), arguments);
	      }

	      return this;
	    }
	  }, {
	    key: "getOptions",
	    value: function getOptions() {
	      return this.getCommon(this[META_OPTIONS], arguments);
	    }
	  }, {
	    key: "setWorking",
	    value: function setWorking() {
	      if (arguments.length === 1) {
	        this[META_WORKING] = arguments[0];
	      } else {
	        this.setCommon(this.getWorking(), arguments);
	      }

	      return this;
	    }
	  }, {
	    key: "getWorking",
	    value: function getWorking() {
	      return this.getCommon(this[META_WORKING], arguments);
	    }
	  }, {
	    key: "report",
	    value: function report(e) {
	      if (notCommon.report) {
	        notCommon.report(e);
	      }
	    }
	  }, {
	    key: "getApp",
	    value: function getApp() {
	      return notCommon.getApp();
	    }
	  }, {
	    key: "destroy",
	    value: function destroy() {
	      this.removeEvent();
	      this.emit('destroy');
	    }
	  }]);

	  return notBase;
	}(EventEmitter);

	var OPT_MODE_HISTORY = Symbol('history'),
	    OPT_MODE_HASH = Symbol('hash'),
	    OPT_DEFAULT_CHECK_INTERVAL = 50;

	var notRouter = /*#__PURE__*/function (_notBase) {
	  _inherits(notRouter, _notBase);

	  var _super = _createSuper(notRouter);

	  function notRouter() {
	    var _this;

	    _classCallCheck(this, notRouter);

	    _this = _super.call(this, {
	      working: {
	        routes: [],
	        mode: OPT_MODE_HISTORY,
	        root: '/',
	        //always in slashes /user/, /, /input/. and no /user or input/level
	        initialized: false
	      }
	    });
	    return _possibleConstructorReturn(_this, _assertThisInitialized(_this));
	  }

	  _createClass(notRouter, [{
	    key: "history",
	    value: function history() {
	      this.setWorking('mode', OPT_MODE_HISTORY);
	    }
	  }, {
	    key: "hash",
	    value: function hash() {
	      this.setWorking('mode', OPT_MODE_HASH);
	    } // root should start and end with /

	  }, {
	    key: "setRoot",
	    value: function setRoot(root) {
	      this.setWorking('root', root && root !== '/' ? '/' + this.clearSlashes(root) + '/' : '/');
	      return this;
	    }
	  }, {
	    key: "clearSlashes",
	    value: function clearSlashes(path) {
	      //first and last slashes removal
	      return path.toString().replace(/\/$/, '').replace(/^\//, '');
	    }
	  }, {
	    key: "add",
	    value: function add(re, handler) {
	      if (typeof re == 'function') {
	        handler = re;
	        re = '';
	      }

	      var rule = {
	        re: re,
	        handler: handler
	      };
	      this.getWorking('routes').push(rule);
	      return this;
	    }
	  }, {
	    key: "addList",
	    value: function addList(list) {
	      for (var t in list) {
	        this.add(t, list[t]);
	      }

	      return this;
	    }
	  }, {
	    key: "remove",
	    value: function remove(param) {
	      for (var i = 0, r; i < this.getWorking('routes').length, r = this.getWorking('routes')[i]; i++) {
	        if (r.handler === param || r.re === param) {
	          this.getWorking('routes').splice(i, 1);
	          return this;
	        }
	      }

	      return this;
	    }
	  }, {
	    key: "flush",
	    value: function flush() {
	      this.setWorking({
	        routes: [],
	        mode: OPT_MODE_HISTORY,
	        root: '/'
	      });
	      return this;
	    }
	  }, {
	    key: "isInitialized",
	    value: function isInitialized() {
	      return this.getWorking('initialized');
	    }
	  }, {
	    key: "setInitialized",
	    value: function setInitialized() {
	      var val = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
	      return this.setWorking('initialized', val);
	    }
	  }, {
	    key: "getFragment",
	    value: function getFragment() {
	      var fragment = '';

	      if (this.getWorking('mode') === OPT_MODE_HISTORY) {
	        if (!location) return '';
	        fragment = this.clearSlashes(decodeURI(location.pathname + location.search));
	        fragment = fragment.replace(/\?(.*)$/, '');
	        fragment = this.getWorking('root') != '/' ? fragment.replace(this.getWorking('root'), '') : fragment;
	      } else {
	        if (!window) return '';
	        var match = window.location.href.match(/#(.*)$/);
	        fragment = match ? match[1] : '';
	      }

	      return this.clearSlashes(fragment);
	    }
	  }, {
	    key: "checkLocation",
	    value: function checkLocation() {
	      var current = this.getWorking('current'),
	          fragment = this.getFragment(),
	          init = this.isInitialized();

	      if (current !== fragment || !init) {
	        this.setWorking('current', fragment);
	        this.check(fragment);
	        this.setInitialized(true);
	      }
	    }
	  }, {
	    key: "hrefClick",
	    value: function hrefClick() {//console.log(...arguments);
	    }
	  }, {
	    key: "getRoot",
	    value: function getRoot() {
	      return this.getWorking('root');
	    }
	  }, {
	    key: "listen",
	    value: function listen() {
	      var loopInterval = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : OPT_DEFAULT_CHECK_INTERVAL;
	      this.setWorking('current', 'notInitialized');
	      clearInterval(this.getWorking('interval'));
	      this.setWorking('interval', setInterval(this.checkLocation.bind(this), loopInterval));
	      window.addEventListener('popstate', this.hrefClick.bind(this));
	      return this;
	    }
	  }, {
	    key: "check",
	    value: function check(f) {
	      var fragment = f || this.getFragment(),
	          failBack = null;

	      for (var i = 0; i < this.getWorking('routes').length; i++) {
	        var path = this.getWorking('root') + this.getWorking('routes')[i].re,
	            fullRE = this.clearSlashes(decodeURI(path)),
	            match = fragment.match(fullRE);

	        if (match && match.length) {
	          if (fullRE === '') {
	            match.shift();
	            failBack = {
	              route: this.getWorking('routes')[i],
	              match: match
	            };
	          } else {
	            match.shift();
	            this.getWorking('routes')[i].handler.apply(this.host || {}, match);
	            this.emit('afterRoute', this.getWorking('routes')[i]);
	            return this;
	          }
	        }
	      }

	      if (failBack) {
	        failBack.route.handler.apply(this.host || {}, failBack.match);
	        this.emit('afterRoute', failBack.route);
	      }

	      return this;
	    }
	    /**
	    *  Refreshes page
	    * @param {integer} timeout time to wait in ms
	    */

	  }, {
	    key: "refresh",
	    value: function refresh() {
	      var _this2 = this;

	      var timeout = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

	      if (timeout > 0) {
	        setTimeout(function () {
	          return _this2.refresh();
	        }, timeout);
	      } else {
	        this.check(this.getWorking('current'));
	      }
	    }
	  }, {
	    key: "navigate",
	    value: function navigate(path) {
	      path = path ? path : '';

	      switch (this.getWorking('mode')) {
	        case OPT_MODE_HISTORY:
	          {
	            //console.log('push state', this.getFullRoute(path));
	            this.lastRoute = this.getFullRoute(path);
	            history.pushState(null, null, this.lastRoute);
	            break;
	          }

	        case OPT_MODE_HASH:
	          {
	            window.location.href.match(/#(.*)$/);
	            window.location.href = window.location.href.replace(/#(.*)$/, '') + '#' + path;
	            break;
	          }
	      }

	      return this;
	    }
	  }, {
	    key: "getFullRoute",
	    value: function getFullRoute() {
	      var path = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
	      path = this.clearSlashes(path);
	      var root = this.getWorking('root');

	      if (root !== '/') {
	        if (path.indexOf(root.substring(1)) === 0) {
	          return '/' + path;
	        }
	      }

	      return this.getWorking('root') + this.clearSlashes(path);
	    }
	  }, {
	    key: "getAllLinks",
	    value: function getAllLinks() {
	      var allElements = document.body.querySelectorAll('a');
	      var list = [];

	      for (var j = 0; j < allElements.length; j++) {
	        for (var i = 0, atts = allElements[j].attributes, n = atts.length; i < n; i++) {
	          if (atts[i].nodeName.indexOf('n-href') === 0) {
	            list.push(allElements[j]);
	            break;
	          }
	        }
	      }

	      return list;
	    }
	  }, {
	    key: "reRouteExisted",
	    value: function reRouteExisted() {
	      var list = this.getAllLinks();

	      for (var t = 0; t < list.length; t++) {
	        this.initRerouting(list[t], list[t].getAttribute('n-href'));
	      }

	      return this;
	    }
	  }, {
	    key: "initRerouting",
	    value: function initRerouting(el, link) {
	      var _this3 = this;

	      if (!el.notRouterInitialized) {
	        var fullLink = this.getFullRoute(link);
	        el.setAttribute('href', fullLink);
	        el.addEventListener('click', function (e) {
	          e.preventDefault();

	          _this3.navigate(link);

	          return false;
	        });
	        el.notRouterInitialized = true;
	      }

	      return this;
	    }
	  }]);

	  return notRouter;
	}(notBase);

	var notRouter$1 = new notRouter();

	var LOG_PREFIX$1 = 'APIQuee';

	var notAPIQueue = /*#__PURE__*/function (_notBase) {
	  _inherits(notAPIQueue, _notBase);

	  var _super = _createSuper(notAPIQueue);

	  function notAPIQueue() {
	    var _this;

	    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	    _classCallCheck(this, notAPIQueue);

	    _this = _super.call(this, {
	      working: {
	        name: options.name ? options.name : LOG_PREFIX$1
	      },
	      options: options
	    });
	    _this.busy = false;
	    _this.queue = [];
	    _this.busySince = false;
	    _this.afterEmpty = null;

	    _this.start();

	    return _possibleConstructorReturn(_this, _assertThisInitialized(_this));
	  }

	  _createClass(notAPIQueue, [{
	    key: "stop",
	    value: function stop() {
	      if (this.interval) {
	        clearInterval(this.interval);
	        this.interval = undefined;
	        this.busy = false;
	        this.busySince = false;
	      }
	    }
	  }, {
	    key: "start",
	    value: function start() {
	      this.stop();
	      this.interval = setInterval(this.checkQueue.bind(this), this.QUEUE_CHECK_INTERVAL);
	    }
	  }, {
	    key: "checkQueue",
	    value: function checkQueue() {
	      var _this2 = this;

	      if (!this.isEmpty() && !this.isBusy()) {
	        this.setBusy().runNext().then(this.setFree.bind(this)).catch(function (e) {
	          _this2.error(e);

	          _this2.setFree();
	        });
	      } else {
	        if (!this.isBusy()) {
	          if (this.afterEmpty) {
	            var t = this.afterEmpty;
	            this.afterEmpty = null;
	            t();
	          }
	        }
	      }
	    }
	  }, {
	    key: "addToQueue",
	    value: function addToQueue(task) {
	      this.queue.push(task);
	    }
	  }, {
	    key: "runNext",
	    value: function runNext() {
	      var list = this.queue.map(function (action) {
	        return action.title;
	      }).join(', ');
	      this.debug("tasks [".concat(list, "]"));
	      var task = this.queue.shift();

	      if (!notCommon.isFunc(task.action)) {
	        this.error('Ð Ð·Ð°Ð´Ð°Ð½Ð¸Ð¸ Ð½ÐµÑ Ð¸ÑÐ¿Ð¾Ð»Ð½Ð¸Ð¼Ð¾Ð¹ ÑÐ°ÑÑÐ¸, action Ð½Ðµ ÑÑÐ½ÐºÑÐ¸Ñ', task.title);
	        return Promise.resolve();
	      }

	      if (!notCommon.isFunc(task.resolve)) {
	        this.error('Ð Ð·Ð°Ð´Ð°Ð½Ð¸Ð¸ Ð½ÐµÑ Ð²Ð¾Ð·Ð²ÑÐ°ÑÐ½Ð¾Ð¹ ÑÐ°ÑÑÐ¸, resolve Ð½Ðµ ÑÑÐ½ÐºÑÐ¸Ñ', task.title);
	        return task.action();
	      }

	      return task.action().then(task.resolve);
	    }
	  }, {
	    key: "isBusy",
	    value: function isBusy() {
	      var busy = !!this.busy,
	          now = Date.now() / 1000;

	      if (busy) {
	        if (now - this.busySince > this.MAX_BUSY_TIME) {
	          this.setFree();
	          return false;
	        } else {
	          return true;
	        }
	      } else {
	        return false;
	      }
	    }
	  }, {
	    key: "setBusy",
	    value: function setBusy() {
	      this.busy = true;
	      this.busySince = Date.now() / 1000;
	      return this;
	    }
	  }, {
	    key: "setFree",
	    value: function setFree() {
	      this.busy = false;
	      this.busySince = false;
	      return this;
	    }
	  }, {
	    key: "isEmpty",
	    value: function isEmpty() {
	      return this.queue.length === 0;
	    }
	    /**
	    * ÐÑÐ¿Ð¾Ð»Ð½Ð¸ÑÐµÐ»Ñ Ð·Ð°Ð¿ÑÐ¾ÑÐ¾Ð²
	    * @param      {function}   action      Ð´Ð¾Ð»Ð¶Ð½Ð° Ð²Ð¾Ð·Ð²ÑÐ°ÑÐ°ÑÑ Promise
	    * @param      {function}   afterEmpty  Ð±ÑÐ´ÐµÑ Ð²ÑÐ¿Ð¾Ð»Ð½ÐµÐ½Ð° ÐºÐ¾Ð³Ð´Ð° Ð¾ÑÑÑÑÐ´Ñ Ð¾Ð¿ÑÑÑÐµÐµÑ Ð¸ Ð±ÑÐ´ÐµÑ ÑÐ²Ð¾Ð±Ð¾Ð´Ð½Ð°. Ð¿Ð¾Ð»ÐµÐ·Ð½Ð° Ð¿ÑÐ¸ Ð¿Ð°ÑÐºÐµ Ð¾Ð´Ð½Ð¾ÑÐ¸Ð¿Ð½ÑÑ Ð·Ð°Ð´Ð°Ð½Ð¸Ð¹
	    * @returns    {Promise}  ÑÐµÐ·ÑÐ»ÑÑÐ°Ñ ÑÑÐ½ÐºÑÐ¸Ð¸
	    **/

	  }, {
	    key: "run",
	    value: function run(action) {
	      var _this3 = this;

	      var afterEmpty = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
	      var title = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';

	      if (afterEmpty && this.afterEmpty === null) {
	        this.afterEmpty = afterEmpty;
	      }

	      return new Promise(function (resolve, reject) {
	        try {
	          _this3.addToQueue({
	            action: action,
	            resolve: resolve,
	            title: title
	          });
	        } catch (e) {
	          _this3.error(e);

	          reject(e);
	        }
	      });
	    }
	  }, {
	    key: "actionIsQueued",
	    value: function actionIsQueued(title) {
	      return this.queue.some(function (queued) {
	        return queued.title == title;
	      });
	    }
	  }, {
	    key: "runIfNotQueued",
	    value: function runIfNotQueued(action) {
	      var afterEmpty = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
	      var title = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';

	      if (this.actionIsQueued(title)) {
	        return Promise.resolve();
	      } else {
	        this.run(action, afterEmpty, title);
	      }
	    }
	  }]);

	  return notAPIQueue;
	}(notBase);

	_defineProperty(notAPIQueue, "QUEUE_CHECK_INTERVAL", 100);

	_defineProperty(notAPIQueue, "MAX_BUSY_TIME", 300);

	var notAPIOptions = {
	  rps: 50,
	  protocol: 'http',
	  host: 'localhost',
	  port: 9000
	};

	var LOG_PREFIX = 'APIConnection';

	var notAPIConnection = /*#__PURE__*/function (_notBase) {
	  _inherits(notAPIConnection, _notBase);

	  var _super = _createSuper(notAPIConnection);

	  function notAPIConnection(options) {
	    var _this;

	    _classCallCheck(this, notAPIConnection);

	    _this = _super.call(this, {
	      options: options,
	      working: {
	        name: options.name ? options.name : LOG_PREFIX
	      }
	    });
	    _this.online = null;

	    _this.run();

	    return _possibleConstructorReturn(_this, _assertThisInitialized(_this));
	  }

	  _createClass(notAPIConnection, [{
	    key: "run",
	    value: function run() {
	      this.int = window.setInterval(this.check.bind(this), 1000);
	    }
	  }, {
	    key: "pause",
	    value: function pause() {
	      window.clearInterval(this.int);
	    }
	  }, {
	    key: "resume",
	    value: function resume() {
	      this.run();
	    }
	  }, {
	    key: "isOnline",
	    value: function isOnline() {
	      return window.navigator.onLine;
	    }
	  }, {
	    key: "check",
	    value: function check() {
	      var t = this.isOnline();

	      if (this.online !== null) {
	        if (this.online !== t) {
	          this.changeState(t);
	        }
	      }

	      this.online = t;
	    }
	  }, {
	    key: "changeState",
	    value: function changeState() {
	      var online = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

	      if (online) {
	        this.emit('online');
	      } else {
	        this.emit('offline');
	      }
	    }
	  }]);

	  return notAPIConnection;
	}(notBase);

	_defineProperty(notAPIConnection, "int", void 0);

	_defineProperty(notAPIConnection, "online", void 0);

	var index$7 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		notAPIQueue: notAPIQueue,
		notAPIOptions: notAPIOptions,
		notAPIConnection: notAPIConnection
	});

	var Lib = /*#__PURE__*/function () {
	  function Lib() {
	    _classCallCheck(this, Lib);

	    this.lib = {};
	  }
	  /**
	  *
	  * @params {string}  mode what to do if element exists [replace|add|skip]
	  */


	  _createClass(Lib, [{
	    key: "add",
	    value: function add(name, comp) {
	      var mode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'replace';

	      if (this.contains(name)) {
	        if (mode === 'replace') {
	          this.lib[name] = comp;
	        } else if (mode === 'add') {
	          this.lib[name] = Object.assign(this.lib[name], comp);
	        }
	      } else {
	        this.lib[name] = comp;
	      }
	    }
	  }, {
	    key: "get",
	    value: function get(name) {
	      return this.lib[name];
	    }
	  }, {
	    key: "contains",
	    value: function contains(name) {
	      return Object.prototype.hasOwnProperty.call(this.lib, name);
	    }
	  }, {
	    key: "import",
	    value: function _import(bulk) {
	      var mode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'replace';

	      for (var f in bulk) {
	        this.add(f, bulk[f], mode);
	      }
	    }
	  }]);

	  return Lib;
	}();

	/*
	* ÐÐ¸Ð±Ð»Ð¸Ð¾ÑÐµÐºÐ° UI ÐºÐ¾Ð½ÑÑÑÑÐºÑÐ¾ÑÐ¾Ð²
	*/
	var COMPONENTS = new Lib();
	var FIELDS = new Lib();
	var VARIANTS = new Lib();

	var //interface
	//record
	META_INTERFACE = Symbol('interface'),
	    META_MAP_TO_INTERFACE = ['getActionsCount', 'getActions', 'setFindBy', 'resetFilter', 'setFilter', 'getFilter', 'setSorter', 'getSorter', 'resetSorter', 'setPageNumber', 'setPageSize', 'setPager', 'setReturn', 'setSearch', 'getSearch', 'resetSearch', 'resetPager', 'getPager', 'addFormFieldType', 'addFormField', 'getFieldTypes', 'getActionFormFields'],
	    DEFAULT_ACTION_PREFIX$1 = '$';

	// makes subclassing work correct for wrapped built-ins
	var inheritIfRequired = function ($this, dummy, Wrapper) {
	  var NewTarget, NewTargetPrototype;
	  if (
	    // it can work only with native `setPrototypeOf`
	    objectSetPrototypeOf &&
	    // we haven't completely correct pre-ES6 way for getting `new.target`, so use this
	    isCallable(NewTarget = dummy.constructor) &&
	    NewTarget !== Wrapper &&
	    isObject(NewTargetPrototype = NewTarget.prototype) &&
	    NewTargetPrototype !== Wrapper.prototype
	  ) objectSetPrototypeOf($this, NewTargetPrototype);
	  return $this;
	};

	// `thisNumberValue` abstract operation
	// https://tc39.es/ecma262/#sec-thisnumbervalue
	var thisNumberValue = functionUncurryThis(1.0.valueOf);

	// a string of all valid unicode whitespaces
	var whitespaces = '\u0009\u000A\u000B\u000C\u000D\u0020\u00A0\u1680\u2000\u2001\u2002' +
	  '\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF';

	var replace = functionUncurryThis(''.replace);
	var whitespace = '[' + whitespaces + ']';
	var ltrim = RegExp('^' + whitespace + whitespace + '*');
	var rtrim = RegExp(whitespace + whitespace + '*$');

	// `String.prototype.{ trim, trimStart, trimEnd, trimLeft, trimRight }` methods implementation
	var createMethod = function (TYPE) {
	  return function ($this) {
	    var string = toString_1(requireObjectCoercible($this));
	    if (TYPE & 1) string = replace(string, ltrim, '');
	    if (TYPE & 2) string = replace(string, rtrim, '');
	    return string;
	  };
	};

	var stringTrim = {
	  // `String.prototype.{ trimLeft, trimStart }` methods
	  // https://tc39.es/ecma262/#sec-string.prototype.trimstart
	  start: createMethod(1),
	  // `String.prototype.{ trimRight, trimEnd }` methods
	  // https://tc39.es/ecma262/#sec-string.prototype.trimend
	  end: createMethod(2),
	  // `String.prototype.trim` method
	  // https://tc39.es/ecma262/#sec-string.prototype.trim
	  trim: createMethod(3)
	};

	var getOwnPropertyNames = objectGetOwnPropertyNames.f;
	var getOwnPropertyDescriptor = objectGetOwnPropertyDescriptor.f;
	var defineProperty$1 = objectDefineProperty.f;

	var trim = stringTrim.trim;

	var NUMBER = 'Number';
	var NativeNumber = global_1[NUMBER];
	var NumberPrototype = NativeNumber.prototype;
	var TypeError$1 = global_1.TypeError;
	var arraySlice = functionUncurryThis(''.slice);
	var charCodeAt = functionUncurryThis(''.charCodeAt);

	// `ToNumeric` abstract operation
	// https://tc39.es/ecma262/#sec-tonumeric
	var toNumeric = function (value) {
	  var primValue = toPrimitive(value, 'number');
	  return typeof primValue == 'bigint' ? primValue : toNumber(primValue);
	};

	// `ToNumber` abstract operation
	// https://tc39.es/ecma262/#sec-tonumber
	var toNumber = function (argument) {
	  var it = toPrimitive(argument, 'number');
	  var first, third, radix, maxCode, digits, length, index, code;
	  if (isSymbol(it)) throw TypeError$1('Cannot convert a Symbol value to a number');
	  if (typeof it == 'string' && it.length > 2) {
	    it = trim(it);
	    first = charCodeAt(it, 0);
	    if (first === 43 || first === 45) {
	      third = charCodeAt(it, 2);
	      if (third === 88 || third === 120) return NaN; // Number('+0x1') should be NaN, old V8 fix
	    } else if (first === 48) {
	      switch (charCodeAt(it, 1)) {
	        case 66: case 98: radix = 2; maxCode = 49; break; // fast equal of /^0b[01]+$/i
	        case 79: case 111: radix = 8; maxCode = 55; break; // fast equal of /^0o[0-7]+$/i
	        default: return +it;
	      }
	      digits = arraySlice(it, 2);
	      length = digits.length;
	      for (index = 0; index < length; index++) {
	        code = charCodeAt(digits, index);
	        // parseInt parses a string to a first unavailable symbol
	        // but ToNumber should return NaN if a string contains unavailable symbols
	        if (code < 48 || code > maxCode) return NaN;
	      } return parseInt(digits, radix);
	    }
	  } return +it;
	};

	// `Number` constructor
	// https://tc39.es/ecma262/#sec-number-constructor
	if (isForced_1(NUMBER, !NativeNumber(' 0o1') || !NativeNumber('0b1') || NativeNumber('+0x1'))) {
	  var NumberWrapper = function Number(value) {
	    var n = arguments.length < 1 ? 0 : NativeNumber(toNumeric(value));
	    var dummy = this;
	    // check on 1..constructor(foo) case
	    return objectIsPrototypeOf(NumberPrototype, dummy) && fails(function () { thisNumberValue(dummy); })
	      ? inheritIfRequired(Object(n), dummy, NumberWrapper) : n;
	  };
	  for (var keys = descriptors ? getOwnPropertyNames(NativeNumber) : (
	    // ES3:
	    'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' +
	    // ES2015 (in case, if modules with ES2015 Number statics required before):
	    'EPSILON,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,isFinite,isInteger,isNaN,isSafeInteger,parseFloat,parseInt,' +
	    // ESNext
	    'fromString,range'
	  ).split(','), j = 0, key; keys.length > j; j++) {
	    if (hasOwnProperty_1(NativeNumber, key = keys[j]) && !hasOwnProperty_1(NumberWrapper, key)) {
	      defineProperty$1(NumberWrapper, key, getOwnPropertyDescriptor(NativeNumber, key));
	    }
	  }
	  NumberWrapper.prototype = NumberPrototype;
	  NumberPrototype.constructor = NumberWrapper;
	  redefine(global_1, NUMBER, NumberWrapper);
	}

	var OPT_DEFAULT_INDEX_FIELD_NAME_PRIORITY = ['_id', 'id', 'ID'],
	    DEFAULT_FILTER = {},
	    DEFAULT_SEARCH = '',
	    DEFAULT_RETURN = {},
	    DEFAULT_PAGE_NUMBER = 0,
	    DEFAULT_PAGE_SIZE = 10,
	    DEFAULT_ACTION_PREFIX = '$',
	    DEFAULT_WS_ROUTE_ACTION_SPLITTER = '//';

	var notInterface = /*#__PURE__*/function (_notBase) {
	  _inherits(notInterface, _notBase);

	  var _super = _createSuper(notInterface);

	  function notInterface(manifest, options) {
	    var _this;

	    _classCallCheck(this, notInterface);

	    _this = _super.call(this, {
	      working: {
	        name: 'network interface for: ' + (manifest.model ? manifest.model : 'unknown'),
	        filter: DEFAULT_FILTER,
	        search: DEFAULT_SEARCH,
	        return: DEFAULT_RETURN,
	        pager: {
	          size: DEFAULT_PAGE_SIZE,
	          page: DEFAULT_PAGE_NUMBER
	        }
	      },
	      options: options
	    });
	    _this.manifest = manifest;

	    _this.initActions();

	    return _possibleConstructorReturn(_this, _assertThisInitialized(_this));
	  }

	  _createClass(notInterface, [{
	    key: "initActions",
	    value: function initActions() {
	      if (this.getActionsCount() > 0) {
	        var actions = this.getActions();

	        for (var actionName in actions) {
	          this.initAction(actionName, actions[actionName]);
	        }
	      }
	    }
	  }, {
	    key: "initAction",
	    value: function initAction(actionName) {
	      var _this2 = this;

	      if (!Object.prototype.hasOwnProperty.call(this, [DEFAULT_ACTION_PREFIX + actionName])) {
	        this[DEFAULT_ACTION_PREFIX + actionName] = function (opts, headers) {
	          var fileUpload = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
	          var files = arguments.length > 3 ? arguments[3] : undefined;
	          return _this2.request(_this2, actionName, opts, headers, fileUpload, files);
	        };
	      }
	    }
	  }, {
	    key: "requestHTTP",
	    value: function requestHTTP(record, actionName, params) {
	      var headers = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
	      var fileUpload = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
	      var files = arguments.length > 5 ? arguments[5] : undefined;

	      try {
	        var compositeData = Object.assign({}, record.getData && typeof record.getData === 'function' ? record.getData() : record, params);
	        var actionData = this.getActionData(actionName),
	            requestParams = this.collectRequestData(actionData),
	            requestParamsEncoded = this.encodeRequest(requestParams),
	            //id = this.getID(compositeData, actionData, actionName),
	        apiServerURL = this.getServerURL(),
	            url = this.getURL(compositeData, actionData, actionName),
	            opts = {};

	        if (fileUpload) {
	          url = this.getURL(params, actionData, actionName);
	          var fd = new FormData();
	          fd.append('file', files);
	          opts.body = fd;
	        } else {
	          if (['OPTIONS', 'GET'].indexOf(actionData.method.toUpperCase()) === -1) {
	            opts = {
	              body: JSON.stringify(record.getData && typeof record.getData === 'function' ? record.getData() : record),
	              headers: {
	                'Accept': 'application/json',
	                'Content-Type': 'application/json'
	              }
	            };
	          }
	        }

	        opts.method = actionData.method.toUpperCase();

	        if (headers && Object.keys(headers).length) {
	          opts.headers = headers;
	        }

	        return fetch(apiServerURL + url + requestParamsEncoded, opts).then(function (response) {
	          return response.json();
	        });
	      } catch (e) {
	        notCommon.error(e);
	        notCommon.report(e);
	      }
	    }
	  }, {
	    key: "requestWS",
	    value: function requestWS(record, actionName) {
	      try {
	        var actionData = this.getActionData(actionName),
	            requestParams = this.collectRequestData(actionData);
	        var WS = notCommon.getApp().getWSClient();
	        var messageName = this.getWSRequestName(actionName);
	        var payload = Object.assign({}, requestParams, record.getData());

	        if (Object.prototype.hasOwnProperty.call(actionData, 'type') && typeof actionData.type === 'string' && actionData.type.length && actionData.type !== 'request') {
	          return WS.message(actionData.type, messageName, payload).then(function (response) {
	            return response.payload;
	          });
	        } else {
	          return WS.request(messageName, payload).then(function (response) {
	            return response.payload;
	          });
	        }
	      } catch (e) {
	        notCommon.error(e);
	        notCommon.report(e);
	      }
	    }
	  }, {
	    key: "request",
	    value: function request() {
	      var actionData = this.getActionData(arguments[1]);

	      switch (this.selectTransport(actionData)) {
	        case 'ws':
	          return this.requestWS.apply(this, arguments);

	        case 'http':
	          return this.requestHTTP.apply(this, arguments);

	        default:
	          throw new Error('Offline');
	      }
	    }
	  }, {
	    key: "wsIsUp",
	    value: function wsIsUp(actionData) {
	      if (actionData.ws === true) {
	        var client;

	        if (Object.prototype.hasOwnProperty.call(actionData, 'wsClient') && actionData.wsClient) {
	          client = notCommon.getApp().getWSClient(actionData.wsClient);
	        } else {
	          client = notCommon.getApp().getWSClient();
	        }

	        if (client) {
	          return true;
	        }
	      }

	      return false;
	    }
	  }, {
	    key: "selectTransport",
	    value: function selectTransport(actionData) {
	      if (this.wsIsUp(actionData)) {
	        return 'ws'; //for ws/wss
	      }

	      if (Object.prototype.hasOwnProperty.call(actionData, 'method')) {
	        return 'http'; //for http/https
	      }

	      return false; //for offline
	    }
	  }, {
	    key: "getModelName",
	    value: function getModelName() {
	      return this && this.manifest ? this.manifest.model : null;
	    }
	  }, {
	    key: "getActionData",
	    value: function getActionData(actionName) {
	      return this.getActions() && this.getActions()[actionName] ? this.getActions()[actionName] : null;
	    }
	  }, {
	    key: "getActionsCount",
	    value: function getActionsCount() {
	      return this.getActions() ? Object.keys(this.getActions()).length : 0;
	    }
	  }, {
	    key: "getActions",
	    value: function getActions() {
	      return this.manifest && this.manifest.actions ? this.manifest.actions : {};
	    }
	  }, {
	    key: "parseParams",
	    value: function parseParams(start, end, line, record) {
	      var fieldName = '';
	      var len = start.length;

	      while (line.indexOf(start) > -1) {
	        var ind = line.indexOf(start);
	        var startSlice = ind + len;
	        var endSlice = line.indexOf(end);

	        if (ind > endSlice) {
	          break;
	        }

	        fieldName = line.slice(startSlice, endSlice);
	        if (fieldName == '') break;
	        this.log(start + fieldName + end, notPath.get(fieldName, record));
	        line = line.replace(start + fieldName + end, notPath.get(fieldName, record));
	      }

	      return line;
	    }
	  }, {
	    key: "parseLine",
	    value: function parseLine(line, record, actionName) {
	      line = line.replace(':modelName', this.manifest.model);
	      line = line.replace(':actionName', actionName);
	      line = this.parseParams(':record[', ']', line, record);
	      line = this.parseParams(':', '?', line, record);
	      return line;
	    }
	  }, {
	    key: "getURL",
	    value: function getURL(record, actionData, actionName) {
	      var line = this.parseLine(this.manifest.url, record, actionName) + (Object.prototype.hasOwnProperty.call(actionData, 'postFix') ? this.parseLine(actionData.postFix, record, actionName) : '');
	      return line;
	    }
	  }, {
	    key: "getServerURL",
	    value: function getServerURL() {
	      return notCommon.getApp() ? notCommon.getApp().getOptions('api.server.url', '') : '';
	    }
	  }, {
	    key: "getWSRequestName",
	    value: function getWSRequestName(actionName) {
	      var modelName = this.manifest.model;
	      return "".concat(modelName).concat(DEFAULT_WS_ROUTE_ACTION_SPLITTER).concat(actionName);
	    }
	  }, {
	    key: "encodeRequest",
	    value: function encodeRequest(data) {
	      var p = '?';

	      for (var t in data) {
	        if (typeof data[t] !== 'undefined' && data[t] !== null) {
	          p += encodeURIComponent(t) + '=' + encodeURIComponent(data[t].constructor === Object ? JSON.stringify(data[t]) : data[t]) + '&';
	        }
	      } //for test purpose only, special test server needed


	      if (this.getOptions('test')) {
	        p += '&test=1';

	        if (this.getOptions('test.session')) {
	          p += '&session=' + this.getOptions('test.session');
	        }

	        if (this.getOptions('test.session')) {
	          p += '&role=' + this.getOptions('test.role');
	        }
	      }

	      return p;
	    }
	  }, {
	    key: "collectRequestData",
	    value: function collectRequestData(actionData) {
	      var requestData = {};

	      if (Object.prototype.hasOwnProperty.call(actionData, 'data') && Array.isArray(actionData.data)) {
	        for (var i = 0; i < actionData.data.length; i++) {
	          var dataProviderName = 'get' + notCommon.capitalizeFirstLetter(actionData.data[i]);

	          if (this[dataProviderName] && typeof this[dataProviderName] === 'function') {
	            var data = this[dataProviderName](),
	                res = {};

	            if (['pager', 'sorter', 'filter', 'search', 'return'].indexOf(actionData.data[i]) > -1) {
	              res[actionData.data[i]] = data;
	            } else {
	              res = data;
	            }

	            requestData = Object.assign(requestData, res);
	          }
	        }
	      }

	      return requestData;
	    }
	  }, {
	    key: "getID",
	    value: function getID(record, actionData) {
	      var resultId,
	          list = OPT_DEFAULT_INDEX_FIELD_NAME_PRIORITY,
	          prefixes = ['', this.manifest.model];

	      if (Object.prototype.hasOwnProperty.call(actionData, 'index') && actionData.index) {
	        list = [actionData.index].concat(OPT_DEFAULT_INDEX_FIELD_NAME_PRIORITY);
	      }

	      for (var _i = 0, _prefixes = prefixes; _i < _prefixes.length; _i++) {
	        var pre = _prefixes[_i];

	        var _iterator = _createForOfIteratorHelper(list),
	            _step;

	        try {
	          for (_iterator.s(); !(_step = _iterator.n()).done;) {
	            var t = _step.value;

	            if (Object.prototype.hasOwnProperty.call(record, pre + t)) {
	              resultId = record[pre + t];
	              break;
	            }
	          }
	        } catch (err) {
	          _iterator.e(err);
	        } finally {
	          _iterator.f();
	        }
	      }

	      return resultId;
	    }
	  }, {
	    key: "setFindBy",
	    value: function setFindBy(key, value) {
	      var obj = {};
	      obj[key] = value;
	      return this.setFilter(obj);
	    }
	  }, {
	    key: "setFilter",
	    value: function setFilter() {
	      var filterData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_FILTER;
	      this.setWorking('filter', filterData);
	      return this;
	    }
	  }, {
	    key: "resetFilter",
	    value: function resetFilter() {
	      return this.setFilter();
	    }
	  }, {
	    key: "getFilter",
	    value: function getFilter() {
	      return this.getWorking('filter');
	    }
	  }, {
	    key: "setSearch",
	    value: function setSearch() {
	      var searchData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_SEARCH;
	      this.setWorking('search', searchData);
	      return this;
	    }
	  }, {
	    key: "resetSearch",
	    value: function resetSearch() {
	      return this.setSearch();
	    }
	  }, {
	    key: "getSearch",
	    value: function getSearch() {
	      return this.getWorking('search');
	    }
	  }, {
	    key: "setSorter",
	    value: function setSorter(sorterData) {
	      this.setWorking('sorter', sorterData);
	      return this;
	    }
	  }, {
	    key: "resetSorter",
	    value: function resetSorter() {
	      return this.setSorter({});
	    }
	  }, {
	    key: "getSorter",
	    value: function getSorter() {
	      return this.getWorking('sorter');
	    }
	  }, {
	    key: "setReturn",
	    value: function setReturn() {
	      var returnData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_RETURN;
	      this.setWorking('return', returnData);
	      return this;
	    }
	  }, {
	    key: "resetReturn",
	    value: function resetReturn() {
	      return this.setReturn({});
	    }
	  }, {
	    key: "getReturn",
	    value: function getReturn() {
	      return this.getWorking('return');
	    }
	  }, {
	    key: "setPageNumber",
	    value: function setPageNumber(pageNumber) {
	      this.setWorking('pager.page', pageNumber);
	      return this;
	    }
	  }, {
	    key: "setPageSize",
	    value: function setPageSize(pageSize) {
	      this.setWorking('pager.size', pageSize);
	      return this;
	    }
	  }, {
	    key: "setPager",
	    value: function setPager() {
	      var pageSize = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_PAGE_SIZE;
	      var pageNumber = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_PAGE_NUMBER;

	      if (pageSize.constructor === Number) {
	        this.setWorking('pager', {
	          size: pageSize,
	          page: pageNumber
	        });
	      } else if (pageSize.constructor === Object) {
	        this.setWorking('pager', {
	          size: pageSize.size || DEFAULT_PAGE_SIZE,
	          page: pageSize.page || DEFAULT_PAGE_NUMBER
	        });
	      }

	      return this;
	    }
	  }, {
	    key: "resetPager",
	    value: function resetPager() {
	      return this.setPager();
	    }
	  }, {
	    key: "getPager",
	    value: function getPager() {
	      return this.getWorking('pager');
	    }
	  }, {
	    key: "getRecord",
	    value: function getRecord() {
	      this.getData();
	    }
	  }]);

	  return notInterface;
	}(notBase);

	var notRecord = /*#__PURE__*/function (_notBase) {
	  _inherits(notRecord, _notBase);

	  var _super = _createSuper(notRecord);

	  function notRecord(manifest, item) {
	    var _this;

	    _classCallCheck(this, notRecord);

	    _this = _super.call(this);

	    if (typeof item === 'undefined' || item === null || _typeof(item) !== 'object') {
	      return _possibleConstructorReturn(_this, item);
	    }

	    if (item && item.isProxy) {
	      notCommon.error('this is Proxy item');
	      return _possibleConstructorReturn(_this, item);
	    }

	    if (item && (item.isRecord || item.isProperty)) {
	      return _possibleConstructorReturn(_this, item);
	    } else {
	      if (Array.isArray(item)) {
	        return _possibleConstructorReturn(_this, _this.createCollection(manifest, item));
	      }
	    }

	    _this.setOptions({});

	    _this[META_INTERFACE] = new notInterface(manifest, {});

	    _this.setData(item);

	    _this.interfaceUp();

	    _this.mapToInterface();

	    _this.mapToMethods();

	    return _possibleConstructorReturn(_this, _assertThisInitialized(_this));
	  }

	  _createClass(notRecord, [{
	    key: "mapToInterface",
	    value: function mapToInterface() {
	      var _this2 = this;

	      var rec = this;

	      var _iterator = _createForOfIteratorHelper(META_MAP_TO_INTERFACE),
	          _step;

	      try {
	        var _loop = function _loop() {
	          var t = _step.value;

	          if (_this2[META_INTERFACE][t] && typeof _this2[META_INTERFACE][t] === 'function') {
	            _this2[t] = function () {
	              var _rec$META_INTERFACE;

	              var res = (_rec$META_INTERFACE = rec[META_INTERFACE])[t].apply(_rec$META_INTERFACE, arguments);

	              return res == rec[META_INTERFACE] ? rec : res;
	            };
	          }
	        };

	        for (_iterator.s(); !(_step = _iterator.n()).done;) {
	          _loop();
	        }
	      } catch (err) {
	        _iterator.e(err);
	      } finally {
	        _iterator.f();
	      }
	    }
	  }, {
	    key: "mapToMethods",
	    value: function mapToMethods() {
	      var manifest = this[META_INTERFACE].manifest,
	          app = notCommon.getApp(),
	          methods = {};

	      if (manifest.methods) {
	        methods = manifest.methods;
	      } else if (app) {
	        methods = app.getOptions(['models', this[META_INTERFACE].manifest.model].join('.'), {});
	      }

	      if (methods) {
	        for (var t in methods) {
	          if (Object.prototype.hasOwnProperty.call(methods, t)) {
	            this[t] = methods[t];
	          }
	        }
	      }
	    }
	  }, {
	    key: "createCollection",
	    value: function createCollection(manifest, items) {
	      var collection = [];

	      for (var i = 0; i < items.length; i++) {
	        collection.push(new notRecord(manifest, items[i]));
	      }

	      return collection;
	    }
	  }, {
	    key: "interfaceUp",
	    value: function interfaceUp() {
	      if (this[META_INTERFACE].getActionsCount() > 0) {
	        var actions = this[META_INTERFACE].getActions();

	        for (var i in actions) {
	          this.actionUp(i, actions[i]);
	        }
	      }
	    }
	  }, {
	    key: "actionUp",
	    value: function actionUp(index) {
	      var _this3 = this;

	      if (!Object.prototype.hasOwnProperty.call(this, [DEFAULT_ACTION_PREFIX$1 + index])) {
	        this[DEFAULT_ACTION_PREFIX$1 + index] = function () {
	          return _this3[META_INTERFACE].request(_this3, index);
	        };
	      }
	    }
	    /*
	    -> 'path.to.key', valueOfKey
	    <- ok, with one onChange event triggered
	    */

	  }, {
	    key: "setAttr",
	    value: function setAttr(key, value) {
	      return this.setData(key, value);
	    }
	    /*
	    ->
	    {
	      'keyPath': value,
	      'key.subPath': value2,
	      'keyPath.0.title': value3
	    }
	    <- ok, with bunch of onChange events triggered
	    */

	  }, {
	    key: "setAttrs",
	    value: function setAttrs(objectPart) {
	      //notCommon.log('setAttrs', objectPart, Object.keys(objectPart));
	      if (objectPart && _typeof(objectPart) === 'object' && Object.keys(objectPart).length > 0) {
	        for (var path in objectPart) {
	          //notCommon.log('setAttrs one to go', path);
	          this.setAttr(path, objectPart[path]);
	        }
	      }
	    }
	    /*
	    -> 'pathToKey'
	    <- value1
	    */

	  }, {
	    key: "getAttr",
	    value: function getAttr(what) {
	      var plain = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
	      var prx = this.getData(what, {});

	      if (plain) {
	        return notCommon.stripProxy(prx);
	      } else {
	        return prx;
	      }
	    }
	    /*
	    -> ['pathToKey', 'path.to.key', 'simpleKey',...]
	    <- [value1, value2, value3,...]
	    */

	  }, {
	    key: "getAttrs",
	    value: function getAttrs(what) {
	      var result = [];

	      if (what && what.length > 0) {
	        var _iterator2 = _createForOfIteratorHelper(what),
	            _step2;

	        try {
	          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
	            var path = _step2.value;
	            result.push(this.getAttr(path));
	          }
	        } catch (err) {
	          _iterator2.e(err);
	        } finally {
	          _iterator2.f();
	        }
	      }

	      return result;
	    }
	  }, {
	    key: "getManifest",
	    value: function getManifest() {
	      if (this[META_INTERFACE]) {
	        return this[META_INTERFACE].manifest;
	      } else {
	        return {};
	      }
	    }
	  }, {
	    key: "setItem",
	    value: function setItem(item) {
	      this.setData(item);
	      return this;
	    }
	  }]);

	  return notRecord;
	}(notBase);

	var OPT_CONTROLLER_PREFIX = 'nc',
	    OPT_RECORD_PREFIX = 'nr',
	    DEFAULT_WS_CLIENT_NAME = 'main';

	var notApp = /*#__PURE__*/function (_notBase) {
	  _inherits(notApp, _notBase);

	  var _super = _createSuper(notApp);

	  function notApp(options) {
	    var _this;

	    _classCallCheck(this, notApp);

	    _this = _super.call(this, {
	      working: {
	        name: options.name,
	        interfaces: {},
	        controllers: Object.prototype.hasOwnProperty.call(options, 'controllers') ? options.controllers : {},
	        initController: null,
	        currentController: null,
	        uis: {},
	        wsc: {},
	        wss: {},
	        services: {}
	      },
	      options: options
	    });

	    _this.log('start app');

	    notCommon.register('app', _assertThisInitialized(_this));

	    _this.initManifest();

	    return _possibleConstructorReturn(_this, _assertThisInitialized(_this));
	  }

	  _createClass(notApp, [{
	    key: "initManifest",
	    value: function initManifest() {
	      notCommon.getJSON(this.getOptions('manifestURL'), {}).then(this.setInterfaceManifest.bind(this)).catch(notCommon.report.bind(this));
	    }
	  }, {
	    key: "initRouter",
	    value: function initRouter() {
	      this.setWorking('router', notRouter$1);
	      this.getWorking('router').setRoot(this.getOptions('router.root'));
	      notRouter$1.reRouteExisted();
	    }
	  }, {
	    key: "execRouter",
	    value: function execRouter() {
	      var routieInput = {};

	      for (var t = 0; t < this.getOptions('router.manifest').length; t++) {
	        var routeBlock = this.getOptions('router.manifest')[t],
	            paths = routeBlock.paths,
	            schemes = routeBlock.schemes,
	            controller = routeBlock.controller;

	        for (var i = 0; i < paths.length; i++) {
	          var pathScheme = schemes && Array.isArray(schemes) && schemes.length > i ? schemes[i] : false;
	          routieInput[paths[i]] = this.bindController(controller, pathScheme);
	        }
	      }

	      this.getWorking('router').addList(routieInput).listen(); //.navigate(this.getOptions('router.index'));
	    }
	  }, {
	    key: "setInterfaceManifest",
	    value: function setInterfaceManifest(manifest) {
	      this.setOptions('interfaceManifest', manifest);
	      this.initRouter();
	      this.update();
	    }
	  }, {
	    key: "getInterfaceManifest",
	    value: function getInterfaceManifest(modelName) {
	      if (modelName) {
	        return this.getOptions('interfaceManifest')[modelName];
	      } else {
	        return this.getOptions('interfaceManifest');
	      }
	    }
	  }, {
	    key: "update",
	    value: function update() {
	      //Ð½ÑÐ¶Ð½Ð¾ Ð¸Ð½Ð¸ÑÐ¸Ð°Ð»Ð¸Ð·Ð¸ÑÐ¾Ð²Ð°ÑÑ
	      //Ð¼Ð¾Ð´ÐµÐ»Ð¸ Ð¿Ð¾Ð»ÑÑÐµÐ½Ð½ÑÐ¼Ð¸ Ð¸Ð½ÑÐµÑÑÐµÐ¹ÑÐ°Ð¼Ð¸
	      this.updateInterfaces(); //Ð¸Ð½Ð¸ÑÐ¸Ð»Ð¸ÑÐ¸ÑÐ¾Ð²Ð°ÑÑ Ð¸ Ð·Ð°Ð¿ÑÑÑÐ¸ÑÑ ÐºÐ¾Ð½ÑÑÐ¾Ð»Ð»ÐµÑ Ð¸Ð½Ð¸ÑÐ¸Ð°Ð»Ð¸Ð·Ð°ÑÐ¸Ð¸

	      this.initController();
	      this.startApp();
	    }
	  }, {
	    key: "startApp",
	    value: function startApp() {
	      this.initServices(); //ÑÐ¾Ð·Ð´Ð°ÑÑ ÐºÐ¾Ð½ÑÑÐ¾Ð»Ð»ÐµÑÑ
	      //ÑÐ¾ÑÑÐµÑ Ð¸ Ð¿ÑÐ¸Ð²ÑÐ·Ð°ÑÑ Ðº Ð½ÐµÐ¼Ñ ÐºÐ¾Ð½ÑÑÐ¾Ð»Ð»ÐµÑÑ

	      this.execRouter();
	      this.emit('afterStarted', this);
	    }
	  }, {
	    key: "bindController",
	    value: function bindController(controllerName, controllerPathScheme) {
	      var app = this;
	      return function () {
	        new controllerName(app, arguments, controllerPathScheme);
	      };
	    }
	  }, {
	    key: "initController",
	    value: function initController() {
	      if (typeof this.getOptions('initController') !== 'undefined') {
	        var initController = this.getOptions('initController');
	        this.setWorking('initController', new initController(this));
	      }
	    }
	  }, {
	    key: "getCurrentController",
	    value: function getCurrentController() {
	      return this.getWorking('currentController');
	    }
	  }, {
	    key: "setCurrentController",
	    value: function setCurrentController(ctrl) {
	      var oldCtrl = this.getCurrentController();

	      if (oldCtrl && oldCtrl.destroy) {
	        oldCtrl.destroy();
	      }

	      this.setWorking('currentController', ctrl);
	      return this;
	    }
	  }, {
	    key: "updateInterfaces",
	    value: function updateInterfaces() {
	      var _this2 = this;

	      this.clearInterfaces();
	      var manifests = this.getOptions('interfaceManifest');

	      if (manifests) {
	        var _loop = function _loop(name) {
	          var recordManifest = manifests[name],
	              recordMethods = _this2.getOptions(['models', name].join('.'), {});

	          recordManifest.methods = recordMethods;

	          _this2.getWorking('interfaces')[name] = function (recordData) {
	            return new notRecord(recordManifest, recordData);
	          };

	          window['nr' + notCommon.capitalizeFirstLetter(name)] = _this2.getWorking('interfaces')[name];
	        };

	        for (var name in manifests) {
	          _loop(name);
	        }
	      }
	    }
	  }, {
	    key: "getRecordName",
	    value: function getRecordName(name) {
	      return OPT_RECORD_PREFIX + notCommon.capitalizeFirstLetter(name);
	    }
	  }, {
	    key: "getControllerName",
	    value: function getControllerName(name) {
	      return OPT_CONTROLLER_PREFIX + notCommon.capitalizeFirstLetter(name);
	    }
	  }, {
	    key: "getInterfaces",
	    value: function getInterfaces() {
	      return this.getWorking('interfaces');
	    }
	  }, {
	    key: "clearInterfaces",
	    value: function clearInterfaces() {
	      this.setWorking('interfaces', {});
	      return this;
	    }
	  }, {
	    key: "setWSClient",
	    value: function setWSClient() {
	      var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_WS_CLIENT_NAME;
	      var wsc = arguments.length > 1 ? arguments[1] : undefined;
	      return this.setWorking("wsc.".concat(name), wsc);
	    }
	  }, {
	    key: "getWSClient",
	    value: function getWSClient() {
	      var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_WS_CLIENT_NAME;
	      return this.getWorking("wsc.".concat(name));
	    }
	  }, {
	    key: "getInterface",
	    value: function getInterface(name) {
	      return this.getInterfaces()[name];
	    }
	  }, {
	    key: "getModel",
	    value: function getModel(name) {
	      var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	      return this.getInterface(name)(data);
	    }
	  }, {
	    key: "setService",
	    value: function setService(name, val) {
	      return this.setWorking("services.".concat(name), val);
	    }
	  }, {
	    key: "getService",
	    value: function getService(name) {
	      return this.getWorking("services.".concat(name));
	    }
	  }, {
	    key: "initServices",
	    value: function initServices() {
	      if (this.getOptions('services')) {
	        for (var servName in this.getOptions('services')) {
	          try {
	            var serv = this.getOptions("services.".concat(servName));
	            var servType = notCommon.detectType(serv);

	            switch (servType) {
	              case 'function':
	              case 'class':
	                this.setService(servName, new serv(this));
	                break;

	              default:
	                this.setService(servName, serv);
	            }
	          } catch (e) {
	            this.error("Service (".concat(servName, ") init error"), e);
	          }
	        }
	      }
	    }
	  }, {
	    key: "getConfigReaderForModule",
	    value: function getConfigReaderForModule() {
	      var _this3 = this;

	      var moduleName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
	      var modConfPath = ['modules', moduleName].join('.');
	      return {
	        get: function get(subPath, fallback) {
	          if (subPath && typeof subPath == 'string' && subPath.length) {
	            return _this3.getOptions([modConfPath, subPath].join('.'), fallback);
	          } else {
	            return _this3.getOptions(modConfPath, fallback);
	          }
	        }
	      };
	    }
	  }]);

	  return notApp;
	}(notBase);

	_defineProperty(notApp, "DEFAULT_WS_CLIENT_NAME", DEFAULT_WS_CLIENT_NAME);

	/**
	 * @const {string}  OPT_DEFAULT_ACTION_NAME      default action name
	 */

	var OPT_DEFAULT_ACTION_NAME = 'default';
	/**
	 * @const {string}  OPT_DEFAULT_CONTAINER_SELECTOR  selector of container HTML
	 *                          element
	 */

	var OPT_DEFAULT_CONTAINER_SELECTOR = 'main.content';
	/**
	 * @const {string}  OPT_DEFAULT_PLURAL_NAME  default plural name of entities
	 */

	var OPT_DEFAULT_PLURAL_NAME = 'Models';
	/**
	 * @const {string}  OPT_DEFAULT_SINGLE_NAME  default single name of entities
	 */

	var OPT_DEFAULT_SINGLE_NAME = 'Model';
	/**
	 * @const {string}  OPT_DEFAULT_MODULE_NAME  default module name
	 */

	var OPT_DEFAULT_MODULE_NAME = 'main';
	/**
	 * @const {boolean}  OPT_DEFAULT_AUTO_NAME  if shoould be used auto name generator
	 */

	var OPT_DEFAULT_AUTO_NAME = true;
	/*
	 *  Basic class for user controller
	 */

	var notController = /*#__PURE__*/function (_notBase) {
	  _inherits(notController, _notBase);

	  var _super = _createSuper(notController);

	  /**
	   *  @static {number} PARAMS_LENGTH  number of params in URL path
	   */

	  /**
	   *  @static {string} MODULE_NAME  name of module
	   */

	  /**
	   *  @static {string} MODEL_NAME  name of model
	   */

	  /**
	   *  @param {notApp} app
	   */
	  function notController(app, name) {
	    var _this;

	    _classCallCheck(this, notController);

	    _this = _super.call(this, {
	      working: {
	        name: name
	      }
	    });
	    _this.app = app;

	    _this.app.setCurrentController(_assertThisInitialized(_this));

	    _this.setWorking({
	      ready: false,
	      views: {},
	      libs: {},
	      helpers: {}
	    });

	    _this.ui = {};
	    _this.els = {};

	    _this.setData({});

	    _this.setOptions({
	      moduleName: OPT_DEFAULT_MODULE_NAME,
	      containerSelector: OPT_DEFAULT_CONTAINER_SELECTOR,
	      prefix: app.getOptions('paths.module'),
	      names: {
	        plural: OPT_DEFAULT_PLURAL_NAME,
	        single: OPT_DEFAULT_SINGLE_NAME
	      }
	    });

	    _this.setURLPrefix(app.getOptions('router.root'));
	    /*
	      ÑÑÐ°Ð·Ñ Ð´ÐµÐ»Ð°ÐµÐ¼ Ð´Ð¾ÑÑÑÐ¿Ð½ÑÐ¼Ð¸ Ð¼Ð¾Ð´ÐµÐ»Ð¸ notRecord Ð¸Ð· nc`ControllerName` Ð±ÑÐ´ÑÑ Ð´Ð¾ÑÑÑÐ¿Ð½Ñ ÐºÐ°Ðº this.nr`ModelName`
	    */


	    var interfaces = app.getInterfaces();
	    _this.make = {};

	    for (var t in interfaces) {
	      if (Object.prototype.hasOwnProperty.call(interfaces, t)) {
	        _this.make[t] = interfaces[t];
	      }
	    }

	    return _possibleConstructorReturn(_this, _assertThisInitialized(_this));
	  }
	  /**
	   *  Returns current notApp
	   *  @return {notApp}
	   */


	  _createClass(notController, [{
	    key: "getApp",
	    value: function getApp() {
	      return notCommon.getApp();
	    }
	    /**
	     *  Sets default controller model
	     *  @param {notRecord}  model  notRecord interface object
	     *  @return {notController}
	     */

	  }, {
	    key: "setModel",
	    value: function setModel(model) {
	      this.setWorking('model', model);
	      return this;
	    }
	    /**
	     *  Returns current model
	     *  @param {object} data   model data
	     *  @return {notRecord}
	     */

	  }, {
	    key: "getModel",
	    value: function getModel(name, data) {
	      if (typeof name === 'string') {
	        return this.getInterface(name)(data || {});
	      } else {
	        return this.getInterface()(name || {});
	      }
	    }
	  }, {
	    key: "getInterface",
	    value: function getInterface() {
	      var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
	      return this.app.getInterface(name || this.getModelName());
	    }
	    /**
	     *  Returns current model name
	     *  @return {notRecord}
	     */

	  }, {
	    key: "getModelName",
	    value: function getModelName() {
	      return this.getWorking('modelName');
	    }
	    /**
	     *  Sets default controller model name
	     *  @param {string}  modelName  notRecord interface object
	     *  @return {notController}
	     */

	  }, {
	    key: "setModelName",
	    value: function setModelName(modelName) {
	      this.setWorking('modelName', notCommon.lowerFirstLetter(modelName));
	      return this;
	    }
	    /**
	     *  Returns current model primary ID field name
	     *  @return {notRecord}
	     */

	  }, {
	    key: "getModelIDFieldName",
	    value: function getModelIDFieldName() {
	      return this.getWorking('modelIDFieldName', '_id');
	    }
	    /**
	     *  Sets current model primary ID field name
	     *  @return {notRecord}
	     */

	  }, {
	    key: "setModelIDFieldName",
	    value: function setModelIDFieldName() {
	      var val = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '_id';
	      return this.setWorking('modelIDFieldName', val);
	    }
	    /**
	     *  Marks this controller as ready
	     *  emits "ready"/"busy" events
	     *  @param {Boolean}  val  true/false
	     */

	  }, {
	    key: "setReady",
	    value: function setReady() {
	      var val = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
	      this.setWorking('ready', val);
	      val ? this.emit('ready') : this.emit('busy');
	    }
	    /**
	     *  Sets module URL prefix
	     *  @param {sting} val URL prefix
	     *  @return {notController} this
	     */

	  }, {
	    key: "setURLPrefix",
	    value: function setURLPrefix(val) {
	      this.setOptions('urlPrefix', val);
	      this.updateAutoName();
	      return this;
	    }
	    /**
	     *  Returns module url prefix
	     *  @return  {string} prefix
	     */

	  }, {
	    key: "getURLPrefix",
	    value: function getURLPrefix() {
	      return this.getOptions('urlPrefix');
	    }
	    /**
	     *  Sets module name
	     *  @param {sting} val name of the module
	     *  @return {notController} this
	     */

	  }, {
	    key: "setModuleName",
	    value: function setModuleName(val) {
	      this.setOptions('moduleName', notCommon.lowerFirstLetter(val));
	      this.updateAutoName();
	      return this;
	    }
	    /**
	     *  Returns module name
	     *  @return  {string} module name
	     */

	  }, {
	    key: "getModuleName",
	    value: function getModuleName() {
	      return this.getOptions('moduleName');
	    }
	    /**
	     *  Returns this module path prefix
	     *  @return {string}  path to module dir
	     */

	  }, {
	    key: "getModulePrefix",
	    value: function getModulePrefix() {
	      return [notCommon.getApp().getOptions('paths.modules'), this.getModuleName()].join('/');
	    }
	    /**
	     *  Returns this model URL with URL prefix
	     *  @return {string}  url path
	     */

	  }, {
	    key: "getModelURL",
	    value: function getModelURL() {
	      return notCommon.buildURL({
	        prefix: this.getURLPrefix(),
	        module: this.getModuleName(),
	        model: this.getModelName()
	      });
	    }
	    /**
	     *  Returns this model action URL with URL prefix
	     * @param  {string}   id       some identificator of model
	     * @param  {string}   action   action name
	     *  @return {string}  url path
	     */

	  }, {
	    key: "getModelActionURL",
	    value: function getModelActionURL(id) {
	      var action = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
	      return notCommon.buildURL({
	        prefix: this.getURLPrefix(),
	        module: this.getModuleName(),
	        model: this.getModelName(),
	        id: id,
	        action: action
	      });
	    }
	  }, {
	    key: "buildURL",
	    value: function buildURL(val) {
	      return notCommon.buildURL(val);
	    }
	    /**
	     *  Updates working name
	     *  @param {sting} val name of the module
	     *  @return {notController} this
	     */

	  }, {
	    key: "updateAutoName",
	    value: function updateAutoName() {
	      if (this.getOptions('autoName', OPT_DEFAULT_AUTO_NAME)) {
	        this.setWorking('name', this.getModelURL());
	      }
	    }
	    /**
	     *  Sets object name
	     *  @param {sting} val name of the object
	     *  @return {notController} this
	     */

	  }, {
	    key: "setName",
	    value: function setName(val) {
	      this.setWorking('name', val);
	      this.setOptions('autoName', false);
	      return this;
	    }
	    /**
	     *  Preload records from server, using listAll method,
	     *  returns Promise
	     *  @param {object}  list  map of preloaded records
	     *  @return {Promise}
	     */

	  }, {
	    key: "preloadLib",
	    value: function preloadLib() {
	      var _this2 = this;

	      var list = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	      return new Promise(function (resolve, reject) {
	        if (_typeof(list) !== 'object') {
	          resolve();
	        } else {
	          _this2.setWorking('loading', []);

	          var _loop = function _loop(t) {
	            _this2.getWorking('loading').push(list[t]);

	            _this2.make[list[t]]({}).$listAll().then(function (data) {
	              if (!_this2.getOptions('libs')) {
	                _this2.setOptions('libs', {});
	              }

	              _this2.getOptions('libs')[t] = data;

	              if (_this2.getWorking('loading').indexOf(list[t]) > -1) {
	                _this2.getWorking('loading').splice(_this2.getWorking('loading').indexOf(list[t]), 1);
	              }

	              if (_this2.getWorking('loading').length === 0) {
	                resolve();
	              }
	            }).catch(function (err) {
	              _this2.report(err);

	              reject();
	            });
	          };

	          for (var t in list) {
	            _loop(t);
	          }

	          if (_this2.getWorking('loading').length === 0) {
	            resolve();
	          }
	        }
	      });
	    }
	    /**
	     * emits afterRender event
	     */

	  }, {
	    key: "onAfterRender",
	    value: function onAfterRender() {
	      this.emit('afterRender');
	    }
	    /**
	     *  Transform route name in action name
	     *  @param {String}   name tranform action name
	     *  @return {String}
	     */

	  }, {
	    key: "getActionName",
	    value: function getActionName() {
	      var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : OPT_DEFAULT_ACTION_NAME;
	      return 'run' + notCommon.capitalizeFirstLetter(name);
	    }
	    /**
	     *  Get default controller action name
	     *  @return {String} default action from options
	     */

	  }, {
	    key: "getDefaultActionName",
	    value: function getDefaultActionName() {
	      return this.getActionName(this.getOptions('defaultAction', OPT_DEFAULT_ACTION_NAME));
	    }
	    /**
	     *  Route params into specific run[Route_name] function
	     *  @param {array}   params   controller input params
	     *  @return {undefined}
	     */

	  }, {
	    key: "route",
	    value: function route(params) {
	      var _params = _toArray(params),
	          routerName = _params[0],
	          subParams = _params.slice(1),
	          actionName = this.getActionName(routerName ? routerName : OPT_DEFAULT_ACTION_NAME);

	      if (typeof this[actionName] === 'function') {
	        this[actionName](subParams);
	      } else if (this[this.getDefaultActionName()]) {
	        this[this.getDefaultActionName()](subParams);
	      } else {
	        this.error('No action in router', params);
	      }
	    }
	    /**
	     *  Return application options
	     *  @return {object}
	     */

	  }, {
	    key: "getAppOptions",
	    value: function getAppOptions() {
	      try {
	        return this.getApp().getOptions();
	      } catch (e) {
	        this.error(e);
	      }
	    }
	    /**
	     *  Returns module options
	     *  @param  {string}   moduleName    name of the module which options requested
	     *  @return {object}
	     */

	  }, {
	    key: "getModuleOptions",
	    value: function getModuleOptions(moduleName) {
	      try {
	        return this.getApp().getOptions(['modules', moduleName || this.getModuleName()].join('.'));
	      } catch (e) {
	        this.error(e);
	      }
	    }
	    /**
	     *  Returns module services
	     *  @param  {string}   moduleName    name of the module which services requested
	     *  @return {object}
	     */

	  }, {
	    key: "getServices",
	    value: function getServices(moduleName) {
	      try {
	        return this.getApp().getOptions(['services', moduleName || this.getModuleName()].join('.'));
	      } catch (e) {
	        this.error(e);
	      }
	    }
	    /**
	     *  Returns module components
	     *  @param  {string}   moduleName    name of the module which components requested
	     *  @return {object}
	     */

	  }, {
	    key: "getComponents",
	    value: function getComponents(moduleName) {
	      try {
	        return this.getApp().getOptions(['components', moduleName || this.getModuleName()].join('.'));
	      } catch (e) {
	        this.error(e);
	      }
	    }
	    /**
	     *  Refreshes current URL, re-run all action
	     *  @param {integer} timeout time to wait in ms
	     */

	  }, {
	    key: "refresh",
	    value: function refresh() {
	      var timeout = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
	      this.app.getWorking('router').refresh(timeout);
	    }
	    /**
	    * Returns path pattern for router
	    * @params {number} [0] paramsCount   number of params
	    * @return {string}  pattern for controller supported url
	    */

	  }], [{
	    key: "getControllerRoute",
	    value: function getControllerRoute() {
	      var paramsCount = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
	      var path = [];

	      if (this.MODULE_NAME && this.MODULE_NAME.length > 0) {
	        path.push(notCommon.lowerFirstLetter(this.MODULE_NAME));
	      }

	      if (this.MODEL_NAME && this.MODEL_NAME.length > 0) {
	        path.push(notCommon.lowerFirstLetter(this.MODEL_NAME));
	      }

	      path = [path.join('/')];

	      for (var i = 0; i < paramsCount; i++) {
	        path.push('\/([^\/]+)');
	      }

	      return path.join('');
	    }
	    /**
	    * Returns path patterns for router
	    * @params {number} [0] paramsDeep   how many paths with params in the end
	    * @return {string[]}  patterns for controller supported url in order of simplification
	    */

	  }, {
	    key: "getControllerRoutes",
	    value: function getControllerRoutes() {
	      var paramsDeep = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
	      var routes = [this.getControllerRoute(0)];

	      for (var i = 0; i < paramsDeep; i++) {
	        routes.unshift(this.getControllerRoute(i + 1));
	      }

	      return routes;
	    }
	    /**
	    * Returns router rule.
	    * @returns {Object} router rule {paths:String[], controller:notController}
	    */

	  }, {
	    key: "getRoutes",
	    value: function getRoutes() {
	      return {
	        paths: this.getControllerRoutes(this.PARAMS_LENGTH),
	        controller: this
	      };
	    }
	  }]);

	  return notController;
	}(notBase);

	_defineProperty(notController, "PARAMS_LENGTH", 2);

	_defineProperty(notController, "MODULE_NAME", 'MODULE_NAME');

	_defineProperty(notController, "MODEL_NAME", 'MODEL_NAME');

	var UICommon$1 = /*#__PURE__*/function () {
	  function UICommon() {
	    _classCallCheck(this, UICommon);
	  }

	  _createClass(UICommon, null, [{
	    key: "formatPhone",
	    value:
	    /**
	     *  Reformats input from any string to strict phone format
	     *  @param {string}    phone    free style phone number
	     *  @returns {string}          phone number
	     **/
	    function formatPhone(val) {
	      var filler = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.FILLER;
	      //starting from 11 digits in phone number
	      var slots = [1, 2, 2, 2, 3, 3, 3, 4, 4, 5, 5];
	      var digits = val.replace(/\D/g, ''); //if there are more, move them to country code slot

	      if (digits.length > 11) {
	        var d = digits.length - 11;

	        while (d > 0) {
	          d--;
	          slots.unshift(1);
	        }
	      }

	      var stack = ['', '', '', '', ''];
	      Array.from(digits).forEach(function (digit, index) {
	        var slot = slots[index];
	        stack[slot - 1] = stack[slot - 1] + digit;
	      }); //creating map of parts lengths

	      var lens = slots.reduce(function (acc, curr) {
	        if (typeof acc[curr] === 'undefined') {
	          acc[curr] = 1;
	        } else {
	          acc[curr] += 1;
	        }

	        return acc;
	      }, {}); //fill empty positions with filler (_)

	      for (var t in stack) {
	        var dif = lens[parseInt(t) + 1] - stack[t].length;

	        while (dif > 0) {
	          stack[t] = stack[t] + filler;
	          dif--;
	        }
	      }

	      return "+".concat(stack[0], " (").concat(stack[1], ") ").concat(stack[2], "-").concat(stack[3], "-").concat(stack[4]);
	    }
	  }, {
	    key: "setMoneySign",
	    value: function setMoneySign(val) {
	      this.MONEY_SIGN = val;
	    }
	  }, {
	    key: "formatPrice",
	    value: function formatPrice(price) {
	      var major = parseInt(Math.floor(price / 100)),
	          minor = parseInt(price % 100);
	      major = '' + major;
	      return "".concat(this.MONEY_SIGN).concat(major, ".").concat(minor);
	    }
	  }, {
	    key: "formatTimestamp",
	    value: function formatTimestamp(timestamp) {
	      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
	      var offsetLocal = new Date().getTimezoneOffset();
	      var deltaOffset = (offsetLocal - parseInt(offset)) * 60 * 1000;
	      var localDateTime = new Date(parseInt(timestamp) - deltaOffset);
	      return localDateTime.toLocaleString(window.navigator.language);
	    }
	  }, {
	    key: "declOfNum",
	    value: function declOfNum(n, text_forms) {
	      n = Math.abs(n) % 100;
	      var n1 = n % 10;

	      if (n > 10 && n < 20) {
	        return text_forms[2];
	      }

	      if (n1 > 1 && n1 < 5) {
	        return text_forms[1];
	      }

	      if (n1 == 1) {
	        return text_forms[0];
	      }

	      return text_forms[2];
	    }
	  }, {
	    key: "humanizedTimeDiff",
	    value: function humanizedTimeDiff(date
	    /* unix time */
	    ) {
	      var currentTime = new Date().getTime();
	      var sec = Math.round((currentTime - date) / 1000);
	      var unit;

	      if (sec < 60) {
	        unit = this.declOfNum(sec, this.TIME.SECONDS);
	        return "".concat(sec, " ").concat(unit, " \u043D\u0430\u0437\u0430\u0434");
	      } else if (sec < 3600) {
	        var min = Math.floor(sec / 60);
	        unit = this.declOfNum(min, this.TIME.MINUTES);
	        return "".concat(min, " ").concat(unit, " \u043D\u0430\u0437\u0430\u0434");
	      } else {
	        var hours = Math.floor(sec / (60 * 60));
	        unit = this.declOfNum(hours, this.TIME.HOURS);
	        return "".concat(hours, " ").concat(unit, " \u043D\u0430\u0437\u0430\u0434");
	      }
	    }
	  }]);

	  return UICommon;
	}();

	_defineProperty(UICommon$1, "ERROR_DEFAULT", 'Ð§ÑÐ¾ Ð¿Ð¾ÑÐ»Ð¾ Ð½Ðµ ÑÐ°Ðº.');

	_defineProperty(UICommon$1, "DEFAULT_REDIRECT_TIMEOUT", 3000);

	_defineProperty(UICommon$1, "CLASS_OK", 'is-success');

	_defineProperty(UICommon$1, "CLASS_ERR", 'is-danger');

	_defineProperty(UICommon$1, "FILLER", '_');

	_defineProperty(UICommon$1, "MONEY_SIGN", '&#8381;');

	_defineProperty(UICommon$1, "TIME", {
	  SECONDS: ['ÑÐµÐºÑÐ½Ð´Ñ', 'ÑÐµÐºÑÐ½Ð´Ñ', 'ÑÐµÐºÑÐ½Ð´'],
	  MINUTES: ['Ð¼Ð¸Ð½ÑÑÑ', 'Ð¼Ð¸Ð½ÑÑÑ', 'Ð¼Ð¸Ð½ÑÑ'],
	  HOURS: ['ÑÐ°Ñ', 'ÑÐ°ÑÐ°', 'ÑÐ°ÑÐ¾Ð²']
	});

	var isDataDescriptor = function (descriptor) {
	  return descriptor !== undefined && (hasOwnProperty_1(descriptor, 'value') || hasOwnProperty_1(descriptor, 'writable'));
	};

	// `Reflect.get` method
	// https://tc39.es/ecma262/#sec-reflect.get
	function get$1(target, propertyKey /* , receiver */) {
	  var receiver = arguments.length < 3 ? target : arguments[2];
	  var descriptor, prototype;
	  if (anObject(target) === receiver) return target[propertyKey];
	  descriptor = objectGetOwnPropertyDescriptor.f(target, propertyKey);
	  if (descriptor) return isDataDescriptor(descriptor)
	    ? descriptor.value
	    : descriptor.get === undefined ? undefined : functionCall(descriptor.get, receiver);
	  if (isObject(prototype = objectGetPrototypeOf(target))) return get$1(prototype, propertyKey, receiver);
	}

	_export({ target: 'Reflect', stat: true }, {
	  get: get$1
	});

	const subscriber_queue = [];
	/**
	 * Create a `Writable` store that allows both updating and reading by subscription.
	 * @param {*=}value initial value
	 * @param {StartStopNotifier=}start start and stop notifications for subscriptions
	 */
	function writable(value, start = noop) {
	    let stop;
	    const subscribers = new Set();
	    function set(new_value) {
	        if (safe_not_equal(value, new_value)) {
	            value = new_value;
	            if (stop) { // store is ready
	                const run_queue = !subscriber_queue.length;
	                for (const subscriber of subscribers) {
	                    subscriber[1]();
	                    subscriber_queue.push(subscriber, value);
	                }
	                if (run_queue) {
	                    for (let i = 0; i < subscriber_queue.length; i += 2) {
	                        subscriber_queue[i][0](subscriber_queue[i + 1]);
	                    }
	                    subscriber_queue.length = 0;
	                }
	            }
	        }
	    }
	    function update(fn) {
	        set(fn(value));
	    }
	    function subscribe(run, invalidate = noop) {
	        const subscriber = [run, invalidate];
	        subscribers.add(subscriber);
	        if (subscribers.size === 1) {
	            stop = start(set) || noop;
	        }
	        run(value);
	        return () => {
	            subscribers.delete(subscriber);
	            if (subscribers.size === 0) {
	                stop();
	                stop = null;
	            }
	        };
	    }
	    return { set, update, subscribe };
	}

	function initDict() {
	  var target = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	  var handler = {
	    get: function get(target, prop) {
	      if (!Object.prototype.hasOwnProperty.call(target, prop)) {
	        return prop;
	      }

	      return Reflect.get.apply(Reflect, arguments);
	    }
	  };
	  return new Proxy(target, handler);
	}

	function createLocale() {
	  var _writable = writable(initDict()),
	      subscribe = _writable.subscribe,
	      _set = _writable.set,
	      update = _writable.update;

	  return {
	    subscribe: subscribe,
	    update: update,
	    set: function set(val) {
	      _set(initDict(val));
	    },
	    reset: function reset() {
	      return _set(initDict());
	    }
	  };
	}

	var LOCALE = createLocale();

	var notLocale = /*#__PURE__*/function (_EventEmitter) {
	  _inherits(notLocale, _EventEmitter);

	  var _super = _createSuper(notLocale);

	  function notLocale() {
	    var _this;

	    _classCallCheck(this, notLocale);

	    _this = _super.call(this);
	    _this.dict = {}; //dictionary of phrases

	    _this.helpers = {}; //additional helper functions and constants

	    var dict = _this.restoreFromStorage();

	    if (dict) {
	      _this.set(dict);
	    }

	    return _this;
	  }
	  /**
	   * String format should comply notPath standart.
	   * {path_to_access} - is
	   * : - is used to access to params
	   * :: - is used to access to helpers
	   * Welcome, {:where}! - will replace {:where} with content of params.where
	   * Welcome, {::where}! - will replace {:where} with content of this.helpers.where
	   * () - after path is to invoke function of target object
	   * Welcome, {::where()}! - will try to exec this.helpers.where(params, undefined)
	   * @param    {string}  str         localized string template with mark to include data
	   * @param    {object}  params      params to use in string
	   * @returns  {string}              localized version of string with
	   */


	  _createClass(notLocale, [{
	    key: "format",
	    value: function format(str, params) {
	      return notPath.parseSubs(str, params, this.helpers);
	    }
	    /**
	     * Return localized version of string with injected data from provided object
	     * may also use Locale.helpers as source of data
	     * @param {string}   phrase    name of string to localize
	     * @param {object}   params    object with data to inject in phrase template
	     * @return {string}            localized string with injected data
	     */

	  }, {
	    key: "say",
	    value: function say(phrase) {
	      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

	      try {
	        if (Object.prototype.hasOwnProperty.call(this.dict, phrase)) {
	          var tmpl = this.dict[phrase],
	              result = '';

	          if (params) {
	            result = this.format(tmpl, params);
	          } else {
	            result = tmpl;
	          }

	          return result;
	        } else {
	          throw new Error("Unknown locale phrase: ".concat(phrase));
	        }
	      } catch (e) {
	        notCommon.debug(e);
	        return phrase;
	      }
	    }
	    /**
	     * Setting new dictionary. triggers event 'change'
	     * @param {object}     dict      vocabulary of phrases and templates
	     **/

	  }, {
	    key: "set",
	    value: function set(dict) {
	      LOCALE.set(dict);
	      this.saveToStorage(dict);
	      this.dict = Object.assign({}, _objectSpread2({}, dict));
	      this.emit('change');
	    }
	  }, {
	    key: "saveToStorage",
	    value: function saveToStorage(dict) {
	      if (window.localStorage) {
	        try {
	          return window.localStorage.setItem('dictionary', JSON.stringify(dict));
	        } catch (e) {
	          notCommon.debug(e);
	          return false;
	        }
	      }

	      return false;
	    }
	  }, {
	    key: "restoreFromStorage",
	    value: function restoreFromStorage() {
	      if (window.localStorage) {
	        try {
	          var str = window.localStorage.getItem('dictionary');

	          if (str) {
	            var dict = JSON.parse(str);
	            return dict;
	          } else {
	            return false;
	          }
	        } catch (e) {
	          notCommon.debug(e);
	          return false;
	        }
	      }

	      return false;
	    }
	    /**
	     * Returns writable store of phrases
	     * @return {object}  writable store
	     */

	  }, {
	    key: "vocabulary",
	    value: function vocabulary() {
	      return LOCALE;
	    }
	  }]);

	  return notLocale;
	}(EventEmitter);

	var notLocale$1 = new notLocale();

	var say = notLocale$1.say.bind(notLocale$1);

	/* src/elements/form/ui.label.svelte generated by Svelte v3.44.3 */

	function create_fragment$Y(ctx) {
		let label_1;
		let t_value = /*$LOCALE*/ ctx[2][/*label*/ ctx[1]] + "";
		let t;

		return {
			c() {
				label_1 = element("label");
				t = text(t_value);
				attr(label_1, "class", "label");
				attr(label_1, "for", /*id*/ ctx[0]);
			},
			m(target, anchor) {
				insert(target, label_1, anchor);
				append(label_1, t);
			},
			p(ctx, [dirty]) {
				if (dirty & /*$LOCALE, label*/ 6 && t_value !== (t_value = /*$LOCALE*/ ctx[2][/*label*/ ctx[1]] + "")) set_data(t, t_value);

				if (dirty & /*id*/ 1) {
					attr(label_1, "for", /*id*/ ctx[0]);
				}
			},
			i: noop,
			o: noop,
			d(detaching) {
				if (detaching) detach(label_1);
			}
		};
	}

	function instance$Y($$self, $$props, $$invalidate) {
		let $LOCALE;
		component_subscribe($$self, LOCALE, $$value => $$invalidate(2, $LOCALE = $$value));
		let { id } = $$props;
		let { label = 'label' } = $$props;

		$$self.$$set = $$props => {
			if ('id' in $$props) $$invalidate(0, id = $$props.id);
			if ('label' in $$props) $$invalidate(1, label = $$props.label);
		};

		return [id, label, $LOCALE];
	}

	class Ui_label extends SvelteComponent {
		constructor(options) {
			super();
			init(this, options, instance$Y, create_fragment$Y, safe_not_equal, { id: 0, label: 1 });
		}
	}

	var notFormUtils = /*#__PURE__*/function () {
	  function notFormUtils() {
	    _classCallCheck(this, notFormUtils);
	  }

	  _createClass(notFormUtils, null, [{
	    key: "addComponent",
	    value: function addComponent(name, value) {
	      COMPONENTS.add(name, value);
	    }
	  }, {
	    key: "addVariants",
	    value: function addVariants(name, value) {
	      VARIANTS.add(name, value);
	    }
	  }, {
	    key: "addField",
	    value: function addField(name, field) {
	      FIELDS.add(name, field);
	    }
	  }, {
	    key: "actionFieldsInit",
	    value: function actionFieldsInit(fieldName, options, data) {
	      var _this = this;

	      if (Array.isArray(fieldName)) {
	        fieldName.forEach(function (subFieldName) {
	          _this.actionFieldsInit(subFieldName, options, data);
	        });
	      } else {
	        if (!notCommon.objHas(options, 'fields')) {
	          options.fields = {};
	        }

	        if (!notCommon.objHas(options.fields, fieldName)) {
	          options.fields[fieldName] = {};
	        } //copying initial data


	        if (typeof data !== 'undefined' && data !== null && typeof data[fieldName] !== 'undefined' && data[fieldName] !== null) {
	          options.fields[fieldName].value = data[fieldName];
	        }
	      }
	    }
	  }]);

	  return notFormUtils;
	}();

	_defineProperty(notFormUtils, "validator", null);

	var defineProperty = objectDefineProperty.f;




	var ARRAY_ITERATOR = 'Array Iterator';
	var setInternalState$1 = internalState.set;
	var getInternalState = internalState.getterFor(ARRAY_ITERATOR);

	// `Array.prototype.entries` method
	// https://tc39.es/ecma262/#sec-array.prototype.entries
	// `Array.prototype.keys` method
	// https://tc39.es/ecma262/#sec-array.prototype.keys
	// `Array.prototype.values` method
	// https://tc39.es/ecma262/#sec-array.prototype.values
	// `Array.prototype[@@iterator]` method
	// https://tc39.es/ecma262/#sec-array.prototype-@@iterator
	// `CreateArrayIterator` internal method
	// https://tc39.es/ecma262/#sec-createarrayiterator
	var es_array_iterator = defineIterator(Array, 'Array', function (iterated, kind) {
	  setInternalState$1(this, {
	    type: ARRAY_ITERATOR,
	    target: toIndexedObject(iterated), // target
	    index: 0,                          // next index
	    kind: kind                         // kind
	  });
	// `%ArrayIteratorPrototype%.next` method
	// https://tc39.es/ecma262/#sec-%arrayiteratorprototype%.next
	}, function () {
	  var state = getInternalState(this);
	  var target = state.target;
	  var kind = state.kind;
	  var index = state.index++;
	  if (!target || index >= target.length) {
	    state.target = undefined;
	    return { value: undefined, done: true };
	  }
	  if (kind == 'keys') return { value: index, done: false };
	  if (kind == 'values') return { value: target[index], done: false };
	  return { value: [index, target[index]], done: false };
	}, 'values');

	// argumentsList[@@iterator] is %ArrayProto_values%
	// https://tc39.es/ecma262/#sec-createunmappedargumentsobject
	// https://tc39.es/ecma262/#sec-createmappedargumentsobject
	var values = iterators.Arguments = iterators.Array;

	// https://tc39.es/ecma262/#sec-array.prototype-@@unscopables
	addToUnscopables('keys');
	addToUnscopables('values');
	addToUnscopables('entries');

	// V8 ~ Chrome 45- bug
	if (descriptors && values.name !== 'values') try {
	  defineProperty(values, 'name', { value: 'values' });
	} catch (error) { /* empty */ }

	// FF26- bug: ArrayBuffers are non-extensible, but Object.isExtensible does not report it


	var arrayBufferNonExtensible = fails(function () {
	  if (typeof ArrayBuffer == 'function') {
	    var buffer = new ArrayBuffer(8);
	    // eslint-disable-next-line es/no-object-isextensible, es/no-object-defineproperty -- safe
	    if (Object.isExtensible(buffer)) Object.defineProperty(buffer, 'a', { value: 8 });
	  }
	});

	// eslint-disable-next-line es/no-object-isextensible -- safe
	var $isExtensible = Object.isExtensible;
	var FAILS_ON_PRIMITIVES = fails(function () { $isExtensible(1); });

	// `Object.isExtensible` method
	// https://tc39.es/ecma262/#sec-object.isextensible
	var objectIsExtensible = (FAILS_ON_PRIMITIVES || arrayBufferNonExtensible) ? function isExtensible(it) {
	  if (!isObject(it)) return false;
	  if (arrayBufferNonExtensible && classofRaw(it) == 'ArrayBuffer') return false;
	  return $isExtensible ? $isExtensible(it) : true;
	} : $isExtensible;

	var freezing = !fails(function () {
	  // eslint-disable-next-line es/no-object-isextensible, es/no-object-preventextensions -- required for testing
	  return Object.isExtensible(Object.preventExtensions({}));
	});

	var internalMetadata = createCommonjsModule(function (module) {
	var defineProperty = objectDefineProperty.f;






	var REQUIRED = false;
	var METADATA = uid('meta');
	var id = 0;

	var setMetadata = function (it) {
	  defineProperty(it, METADATA, { value: {
	    objectID: 'O' + id++, // object ID
	    weakData: {}          // weak collections IDs
	  } });
	};

	var fastKey = function (it, create) {
	  // return a primitive with prefix
	  if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
	  if (!hasOwnProperty_1(it, METADATA)) {
	    // can't set metadata to uncaught frozen object
	    if (!objectIsExtensible(it)) return 'F';
	    // not necessary to add metadata
	    if (!create) return 'E';
	    // add missing metadata
	    setMetadata(it);
	  // return object ID
	  } return it[METADATA].objectID;
	};

	var getWeakData = function (it, create) {
	  if (!hasOwnProperty_1(it, METADATA)) {
	    // can't set metadata to uncaught frozen object
	    if (!objectIsExtensible(it)) return true;
	    // not necessary to add metadata
	    if (!create) return false;
	    // add missing metadata
	    setMetadata(it);
	  // return the store of weak collections IDs
	  } return it[METADATA].weakData;
	};

	// add metadata on freeze-family methods calling
	var onFreeze = function (it) {
	  if (freezing && REQUIRED && objectIsExtensible(it) && !hasOwnProperty_1(it, METADATA)) setMetadata(it);
	  return it;
	};

	var enable = function () {
	  meta.enable = function () { /* empty */ };
	  REQUIRED = true;
	  var getOwnPropertyNames = objectGetOwnPropertyNames.f;
	  var splice = functionUncurryThis([].splice);
	  var test = {};
	  test[METADATA] = 1;

	  // prevent exposing of metadata key
	  if (getOwnPropertyNames(test).length) {
	    objectGetOwnPropertyNames.f = function (it) {
	      var result = getOwnPropertyNames(it);
	      for (var i = 0, length = result.length; i < length; i++) {
	        if (result[i] === METADATA) {
	          splice(result, i, 1);
	          break;
	        }
	      } return result;
	    };

	    _export({ target: 'Object', stat: true, forced: true }, {
	      getOwnPropertyNames: objectGetOwnPropertyNamesExternal.f
	    });
	  }
	};

	var meta = module.exports = {
	  enable: enable,
	  fastKey: fastKey,
	  getWeakData: getWeakData,
	  onFreeze: onFreeze
	};

	hiddenKeys$1[METADATA] = true;
	});
	internalMetadata.enable;
	internalMetadata.fastKey;
	internalMetadata.getWeakData;
	internalMetadata.onFreeze;

	var collection = function (CONSTRUCTOR_NAME, wrapper, common) {
	  var IS_MAP = CONSTRUCTOR_NAME.indexOf('Map') !== -1;
	  var IS_WEAK = CONSTRUCTOR_NAME.indexOf('Weak') !== -1;
	  var ADDER = IS_MAP ? 'set' : 'add';
	  var NativeConstructor = global_1[CONSTRUCTOR_NAME];
	  var NativePrototype = NativeConstructor && NativeConstructor.prototype;
	  var Constructor = NativeConstructor;
	  var exported = {};

	  var fixMethod = function (KEY) {
	    var uncurriedNativeMethod = functionUncurryThis(NativePrototype[KEY]);
	    redefine(NativePrototype, KEY,
	      KEY == 'add' ? function add(value) {
	        uncurriedNativeMethod(this, value === 0 ? 0 : value);
	        return this;
	      } : KEY == 'delete' ? function (key) {
	        return IS_WEAK && !isObject(key) ? false : uncurriedNativeMethod(this, key === 0 ? 0 : key);
	      } : KEY == 'get' ? function get(key) {
	        return IS_WEAK && !isObject(key) ? undefined : uncurriedNativeMethod(this, key === 0 ? 0 : key);
	      } : KEY == 'has' ? function has(key) {
	        return IS_WEAK && !isObject(key) ? false : uncurriedNativeMethod(this, key === 0 ? 0 : key);
	      } : function set(key, value) {
	        uncurriedNativeMethod(this, key === 0 ? 0 : key, value);
	        return this;
	      }
	    );
	  };

	  var REPLACE = isForced_1(
	    CONSTRUCTOR_NAME,
	    !isCallable(NativeConstructor) || !(IS_WEAK || NativePrototype.forEach && !fails(function () {
	      new NativeConstructor().entries().next();
	    }))
	  );

	  if (REPLACE) {
	    // create collection constructor
	    Constructor = common.getConstructor(wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER);
	    internalMetadata.enable();
	  } else if (isForced_1(CONSTRUCTOR_NAME, true)) {
	    var instance = new Constructor();
	    // early implementations not supports chaining
	    var HASNT_CHAINING = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance;
	    // V8 ~ Chromium 40- weak-collections throws on primitives, but should return false
	    var THROWS_ON_PRIMITIVES = fails(function () { instance.has(1); });
	    // most early implementations doesn't supports iterables, most modern - not close it correctly
	    // eslint-disable-next-line no-new -- required for testing
	    var ACCEPT_ITERABLES = checkCorrectnessOfIteration(function (iterable) { new NativeConstructor(iterable); });
	    // for early implementations -0 and +0 not the same
	    var BUGGY_ZERO = !IS_WEAK && fails(function () {
	      // V8 ~ Chromium 42- fails only with 5+ elements
	      var $instance = new NativeConstructor();
	      var index = 5;
	      while (index--) $instance[ADDER](index, index);
	      return !$instance.has(-0);
	    });

	    if (!ACCEPT_ITERABLES) {
	      Constructor = wrapper(function (dummy, iterable) {
	        anInstance(dummy, NativePrototype);
	        var that = inheritIfRequired(new NativeConstructor(), dummy, Constructor);
	        if (iterable != undefined) iterate(iterable, that[ADDER], { that: that, AS_ENTRIES: IS_MAP });
	        return that;
	      });
	      Constructor.prototype = NativePrototype;
	      NativePrototype.constructor = Constructor;
	    }

	    if (THROWS_ON_PRIMITIVES || BUGGY_ZERO) {
	      fixMethod('delete');
	      fixMethod('has');
	      IS_MAP && fixMethod('get');
	    }

	    if (BUGGY_ZERO || HASNT_CHAINING) fixMethod(ADDER);

	    // weak collections should not contains .clear method
	    if (IS_WEAK && NativePrototype.clear) delete NativePrototype.clear;
	  }

	  exported[CONSTRUCTOR_NAME] = Constructor;
	  _export({ global: true, forced: Constructor != NativeConstructor }, exported);

	  setToStringTag(Constructor, CONSTRUCTOR_NAME);

	  if (!IS_WEAK) common.setStrong(Constructor, CONSTRUCTOR_NAME, IS_MAP);

	  return Constructor;
	};

	var getWeakData = internalMetadata.getWeakData;








	var setInternalState = internalState.set;
	var internalStateGetterFor = internalState.getterFor;
	var find = arrayIteration.find;
	var findIndex = arrayIteration.findIndex;
	var splice = functionUncurryThis([].splice);
	var id = 0;

	// fallback for uncaught frozen keys
	var uncaughtFrozenStore = function (store) {
	  return store.frozen || (store.frozen = new UncaughtFrozenStore());
	};

	var UncaughtFrozenStore = function () {
	  this.entries = [];
	};

	var findUncaughtFrozen = function (store, key) {
	  return find(store.entries, function (it) {
	    return it[0] === key;
	  });
	};

	UncaughtFrozenStore.prototype = {
	  get: function (key) {
	    var entry = findUncaughtFrozen(this, key);
	    if (entry) return entry[1];
	  },
	  has: function (key) {
	    return !!findUncaughtFrozen(this, key);
	  },
	  set: function (key, value) {
	    var entry = findUncaughtFrozen(this, key);
	    if (entry) entry[1] = value;
	    else this.entries.push([key, value]);
	  },
	  'delete': function (key) {
	    var index = findIndex(this.entries, function (it) {
	      return it[0] === key;
	    });
	    if (~index) splice(this.entries, index, 1);
	    return !!~index;
	  }
	};

	var collectionWeak = {
	  getConstructor: function (wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER) {
	    var Constructor = wrapper(function (that, iterable) {
	      anInstance(that, Prototype);
	      setInternalState(that, {
	        type: CONSTRUCTOR_NAME,
	        id: id++,
	        frozen: undefined
	      });
	      if (iterable != undefined) iterate(iterable, that[ADDER], { that: that, AS_ENTRIES: IS_MAP });
	    });

	    var Prototype = Constructor.prototype;

	    var getInternalState = internalStateGetterFor(CONSTRUCTOR_NAME);

	    var define = function (that, key, value) {
	      var state = getInternalState(that);
	      var data = getWeakData(anObject(key), true);
	      if (data === true) uncaughtFrozenStore(state).set(key, value);
	      else data[state.id] = value;
	      return that;
	    };

	    redefineAll(Prototype, {
	      // `{ WeakMap, WeakSet }.prototype.delete(key)` methods
	      // https://tc39.es/ecma262/#sec-weakmap.prototype.delete
	      // https://tc39.es/ecma262/#sec-weakset.prototype.delete
	      'delete': function (key) {
	        var state = getInternalState(this);
	        if (!isObject(key)) return false;
	        var data = getWeakData(key);
	        if (data === true) return uncaughtFrozenStore(state)['delete'](key);
	        return data && hasOwnProperty_1(data, state.id) && delete data[state.id];
	      },
	      // `{ WeakMap, WeakSet }.prototype.has(key)` methods
	      // https://tc39.es/ecma262/#sec-weakmap.prototype.has
	      // https://tc39.es/ecma262/#sec-weakset.prototype.has
	      has: function has(key) {
	        var state = getInternalState(this);
	        if (!isObject(key)) return false;
	        var data = getWeakData(key);
	        if (data === true) return uncaughtFrozenStore(state).has(key);
	        return data && hasOwnProperty_1(data, state.id);
	      }
	    });

	    redefineAll(Prototype, IS_MAP ? {
	      // `WeakMap.prototype.get(key)` method
	      // https://tc39.es/ecma262/#sec-weakmap.prototype.get
	      get: function get(key) {
	        var state = getInternalState(this);
	        if (isObject(key)) {
	          var data = getWeakData(key);
	          if (data === true) return uncaughtFrozenStore(state).get(key);
	          return data ? data[state.id] : undefined;
	        }
	      },
	      // `WeakMap.prototype.set(key, value)` method
	      // https://tc39.es/ecma262/#sec-weakmap.prototype.set
	      set: function set(key, value) {
	        return define(this, key, value);
	      }
	    } : {
	      // `WeakSet.prototype.add(value)` method
	      // https://tc39.es/ecma262/#sec-weakset.prototype.add
	      add: function add(value) {
	        return define(this, value, true);
	      }
	    });

	    return Constructor;
	  }
	};
	collectionWeak.getConstructor;

	var enforceInternalState = internalState.enforce;


	var IS_IE11 = !global_1.ActiveXObject && 'ActiveXObject' in global_1;
	var InternalWeakMap;

	var wrapper = function (init) {
	  return function WeakMap() {
	    return init(this, arguments.length ? arguments[0] : undefined);
	  };
	};

	// `WeakMap` constructor
	// https://tc39.es/ecma262/#sec-weakmap-constructor
	var $WeakMap = collection('WeakMap', wrapper, collectionWeak);

	// IE11 WeakMap frozen keys fix
	// We can't use feature detection because it crash some old IE builds
	// https://github.com/zloirock/core-js/issues/485
	if (nativeWeakMap && IS_IE11) {
	  InternalWeakMap = collectionWeak.getConstructor(wrapper, 'WeakMap', true);
	  internalMetadata.enable();
	  var WeakMapPrototype = $WeakMap.prototype;
	  var nativeDelete = functionUncurryThis(WeakMapPrototype['delete']);
	  var nativeHas = functionUncurryThis(WeakMapPrototype.has);
	  var nativeGet = functionUncurryThis(WeakMapPrototype.get);
	  var nativeSet = functionUncurryThis(WeakMapPrototype.set);
	  redefineAll(WeakMapPrototype, {
	    'delete': function (key) {
	      if (isObject(key) && !objectIsExtensible(key)) {
	        var state = enforceInternalState(this);
	        if (!state.frozen) state.frozen = new InternalWeakMap();
	        return nativeDelete(this, key) || state.frozen['delete'](key);
	      } return nativeDelete(this, key);
	    },
	    has: function has(key) {
	      if (isObject(key) && !objectIsExtensible(key)) {
	        var state = enforceInternalState(this);
	        if (!state.frozen) state.frozen = new InternalWeakMap();
	        return nativeHas(this, key) || state.frozen.has(key);
	      } return nativeHas(this, key);
	    },
	    get: function get(key) {
	      if (isObject(key) && !objectIsExtensible(key)) {
	        var state = enforceInternalState(this);
	        if (!state.frozen) state.frozen = new InternalWeakMap();
	        return nativeHas(this, key) ? nativeGet(this, key) : state.frozen.get(key);
	      } return nativeGet(this, key);
	    },
	    set: function set(key, value) {
	      if (isObject(key) && !objectIsExtensible(key)) {
	        var state = enforceInternalState(this);
	        if (!state.frozen) state.frozen = new InternalWeakMap();
	        nativeHas(this, key) ? nativeSet(this, key, value) : state.frozen.set(key, value);
	      } else nativeSet(this, key, value);
	      return this;
	    }
	  });
	}

	var ITERATOR = wellKnownSymbol('iterator');
	var TO_STRING_TAG = wellKnownSymbol('toStringTag');
	var ArrayValues = es_array_iterator.values;

	var handlePrototype = function (CollectionPrototype, COLLECTION_NAME) {
	  if (CollectionPrototype) {
	    // some Chrome versions have non-configurable methods on DOMTokenList
	    if (CollectionPrototype[ITERATOR] !== ArrayValues) try {
	      createNonEnumerableProperty(CollectionPrototype, ITERATOR, ArrayValues);
	    } catch (error) {
	      CollectionPrototype[ITERATOR] = ArrayValues;
	    }
	    if (!CollectionPrototype[TO_STRING_TAG]) {
	      createNonEnumerableProperty(CollectionPrototype, TO_STRING_TAG, COLLECTION_NAME);
	    }
	    if (domIterables[COLLECTION_NAME]) for (var METHOD_NAME in es_array_iterator) {
	      // some Chrome versions have non-configurable methods on DOMTokenList
	      if (CollectionPrototype[METHOD_NAME] !== es_array_iterator[METHOD_NAME]) try {
	        createNonEnumerableProperty(CollectionPrototype, METHOD_NAME, es_array_iterator[METHOD_NAME]);
	      } catch (error) {
	        CollectionPrototype[METHOD_NAME] = es_array_iterator[METHOD_NAME];
	      }
	    }
	  }
	};

	for (var COLLECTION_NAME in domIterables) {
	  handlePrototype(global_1[COLLECTION_NAME] && global_1[COLLECTION_NAME].prototype, COLLECTION_NAME);
	}

	handlePrototype(domTokenListPrototype, 'DOMTokenList');

	// `WeakSet` constructor
	// https://tc39.es/ecma262/#sec-weakset-constructor
	collection('WeakSet', function (init) {
	  return function WeakSet() { return init(this, arguments.length ? arguments[0] : undefined); };
	}, collectionWeak);

	const emptyFieldsResults = (data)=>{
	  return Object.keys(data).reduce((acc, curr)=>{acc[curr] = []; return acc;}, {});
	};

	var result = class ValidationResult{

	  #result;

	  constructor(result){
	    this.#result = JSON.parse(JSON.stringify(result));
	  }

	  destroy(){
	    this.#result = undefined;
	  }

	  get clean(){
	    return this.#result.clean;
	  }

	  static getDefaultResult(data){
	    return {
	      clean: true,
	      fields: emptyFieldsResults(data),
	      form: {
	        fields: emptyFieldsResults(data),
	        errors:[],
	        exceptions: []
	      },
	    };
	  }

	  getReport(){
	    return JSON.parse(JSON.stringify(this.#getCompleteResult()));
	  }

	  getDetailedReport(){
	    return JSON.parse(JSON.stringify(this.#result));
	  }

	  #getCompleteResult(){
	    const resultComplete = {
	      clean: this.#result.form.errors.length === 0,
	      fields: {},
	      form: []
	    };
	    for(let fieldName in this.#result.fields){
	      resultComplete.fields[fieldName] = this.#getCompleteResultForField(fieldName);
	      if(resultComplete.fields[fieldName].length){
	        resultComplete.clean = false;
	      }
	    }
	    resultComplete.form = [...this.#result.form.errors];
	    return resultComplete;
	  }

	  #getCompleteResultForField(fieldName){
	    const fieldResult = [];
	    if(Array.isArray(this.#result.fields[fieldName])){
	      fieldResult.push(...this.#result.fields[fieldName]);
	    }
	    if(Array.isArray(this.#result.form.fields[fieldName])){
	      fieldResult.push(...this.#result.form.fields[fieldName]);
	    }
	    return fieldResult;
	  }

	};

	/**
	*	Template of error.js
	*	For building for specific environment.
	*	Node.js or Browser
	*	@param {string}	env	node|browser in wich env it will be running
	*	@param {string}	url	URL of report collector
	*	@param {string}	key	key to indetificate reporter
	*/
	/**
	* Error reporting with features, saving browser info, uri and so on.
	* @module not-error/error
	*/
	class notError$1 extends Error {
		constructor(message, options = {}, error = null){
			super(message);
			this.options = options;
			this.adopt(error);
			this.fill();
			this.getTime();
			return this;
		}

		/**
		*	Adopting native error object
		*	@param {Error}	error 	Error object
		*	@return {notError}		chainable
		*/
		adopt(error){
			if(error instanceof Error){
				this.parent = error;
			}
			return this;
		}

		getStack(){
			if(this.parent){
				return this.parent.stack;
			}else {
				return this.stack;
			}
		}

		getDetails(){
			let src = this;
			if(this.parent){
				src = this.parent;
			}
			return {
				columnNumber:    	src.columnNumber,
				fileName:        	src.fileName,
				lineNumber:      	src.lineNumber,
				name:            	src.name,
				message:        	src.message,
				stack:          	src.stack
			};
		}

		/**
		*	Updating this.env.date property
		*	@return  {object}	{timestamp, offset}
		*/
		getTime(){
			let date = new Date();
			this.env.date = {
				timestamp : date.getTime(),
				offset: date.getTimezoneOffset()
			};
			return this.env.date;
		}


		/**
		******************************************************************************************************
		******************************************************************************************************
		***	Node.js Section
		******************************************************************************************************
		******************************************************************************************************
		**/

		/**
		*	Filtering out key by `white` list
		*	@param {object} object hash to be copied according filter `white` list
		*	@param {array} filter array of sting, which represents keys we want to be
		*						copied in resulting object from source
		*	@return {object}		white listed hash
		*/
		filterEnv(object, filter){
			let result = {};
			for(let t of filter){
				if(Object.prototype.hasOwnProperty.call(object, t)){
					result[t] = object[t];
				}
			}
			return result;
		}

		/**
		*	Collecting information specific for Node.js V8
		*	@return {notError}		chainable
		*/
		fill(){
			/**
			*	You want some fields from env but not all, cause there are passwords
			*	from db, api keys and etc
			*/
			this.env = {
				browser: 	false,
				node: 		true,
				versions: Object.assign({}, process.versions),
				vars: 		this.filterEnv(process.env, this.options.whitelist || ['NODE_ENV'])
			};
			return this;
		}


	}


	var error_node = notError$1;

	//reportable
	class notValidationError$1 extends error_node{
	  constructor(message, fields = {}, err = null, params = {}){
	    super(message, {fields, params}, err);
	    return this;
	  }

	  /**
	  * Sets hash of fields errors messages for usage in forms
	  *	@return {Object}	hash of field->errors [key:string]: Array<string>
	  **/
	  setFieldsErrors(messages){
	    this.options.fields = messages;
	  }

	  /**
	  * Returns hash of errors
	  *	@return {Object}	hash of field->errors [key:string]: Array<string>
	  **/
	  getFieldsErrors(){
	    return this.options.fields;
	  }

	}


	var validation_error_node = notValidationError$1;

	//reportable
	class notRequestError extends error_node{
	  constructor(
	    message,
	    {code, errors, redirect, params} = {code:500, errors:{}, redirect: false, params:{}},
	    error = null
	    ){
	    super(
	      message,
	      {
	        code,
	        errors,
	        redirect,
	        params
	      },
	      error
	    );
	    return this;
	  }

	  setRedirect(url){
	    this.options.redirect = url;
	  }

	  getRedirect(){
	    return this.options.redirect;
	  }

	  setCode(code){
	    this.options.code = code;
	  }

	  getCode(){
	    return this.options.code;
	  }

	  setErrors(list){
	    this.options.errors = list;
	  }

	  getErrors(){
	    return this.options.errors;
	  }

	  getResult(){
	    return {
	      message:  this.message,
	      code:     this.getCode(),
	      errors:   this.getErrors(),
	      redirect: this.getRedirect(),
	    };
	  }

	}


	var request_error_node = notRequestError;

	/*
	https://github.com/TehShrike/is-mergeable-object

	Included for convinience only. All rights belongs to their authors and etc.
	start of my code marked.

	*/

	let isMergeableObject = function isMergeableObject(value) {
		return isNonNullObject(value) && !isSpecial(value);
	};

	function isNonNullObject(value) {
		return !!value && typeof value === 'object';
	}

	function isSpecial(value) {
		var stringValue = Object.prototype.toString.call(value);

		return stringValue === '[object RegExp]' ||
			stringValue === '[object Date]' ||
			isReactElement(value);
	}

	// see https://github.com/facebook/react/blob/b5ac963fb791d1298e7f396236383bc955f916c1/src/isomorphic/classic/element/ReactElement.js#L21-L25
	var canUseSymbol = typeof Symbol === 'function' && Symbol.for;
	var REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for('react.element') : 0xeac7;

	function isReactElement(value) {
		return value.$$typeof === REACT_ELEMENT_TYPE;
	}

	/*
	https://github.com/KyleAMathews/deepmerge

	The MIT License (MIT)

	Copyright (c) 2012 Nicholas Fisher

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/


	function emptyTarget(val) {
		return Array.isArray(val) ? [] : {};
	}

	function cloneUnlessOtherwiseSpecified(value, optionsArgument) {
		var clone = !optionsArgument || optionsArgument.clone !== false;

		return (clone && isMergeableObject(value)) ?
			deepmerge(emptyTarget(value), value, optionsArgument) :
			value;
	}

	function defaultArrayMerge(target, source, optionsArgument) {
		return target.concat(source).map(function(element) {
			return cloneUnlessOtherwiseSpecified(element, optionsArgument);
		});
	}

	function mergeObject(target, source, optionsArgument) {
		var destination = {};
		if (isMergeableObject(target)) {
			Object.keys(target).forEach(function(key) {
				destination[key] = cloneUnlessOtherwiseSpecified(target[key], optionsArgument);
			});
		}
		Object.keys(source).forEach(function(key) {
			if (!isMergeableObject(source[key]) || !target[key]) {
				destination[key] = cloneUnlessOtherwiseSpecified(source[key], optionsArgument);
			} else {
				destination[key] = deepmerge(target[key], source[key], optionsArgument);
			}
		});
		return destination;
	}

	function deepmerge(target, source, optionsArgument) {
		var sourceIsArray = Array.isArray(source);
		var targetIsArray = Array.isArray(target);
		var options = optionsArgument || {
			arrayMerge: defaultArrayMerge
		};
		var sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;

		if (!sourceAndTargetTypesMatch) {
			return cloneUnlessOtherwiseSpecified(source, optionsArgument);
		} else if (sourceIsArray) {
			var arrayMerge = options.arrayMerge || defaultArrayMerge;
			return arrayMerge(target, source, optionsArgument);
		} else {
			return mergeObject(target, source, optionsArgument);
		}
	}

	deepmerge.all = function deepmergeAll(array, optionsArgument) {
		if (!Array.isArray(array)) {
			throw new Error('first argument should be an array');
		}

		return array.reduce(function(prev, next) {
			return deepmerge(prev, next, optionsArgument);
		}, {});
	};


	var deepmerge_1 = deepmerge;

	var lib$1 = createCommonjsModule(function (module, exports) {
	const ENV = process.env.NODE_ENV || 'development';
	var CONFIG = {};

	exports.PATH = null;

	/**
	 * @module not-config
	 */
	/**
		* @const {string} OPT_MODULES_KEY default root of modules configurations directory
		*/
	const OPT_MODULES_KEY = 'modules';
	/**
	 * @const {string} OPT_KEYS_SEPARATOR separator of path's keys
	 */
	const OPT_KEYS_SEPARATOR = '.';
	/**
	 * @const {string} OPT_KEYS_SEPARATOR_ENV separator of path's keys in ENV
	 */
	const OPT_KEYS_SEPARATOR_ENV = '__';
	/**
	 * @member {string} currentModulesKey root of modules configurations directory
	 */
	var currentModulesKey = OPT_MODULES_KEY;

	exports.getConfPath = exports.getPath = (name)=>{
		return path__default["default"].join(exports.PATH, name + '.json');
	};

	exports.loadConfig = exports.load = (name)=>{
		return commonjsRequire(exports.getConfPath(name));
	};

	exports.importENV = ()=>{
		let keys = Object.keys(process.env);
		for(let key of keys){
			if(key.indexOf(OPT_KEYS_SEPARATOR_ENV) > -1){
				let realKey = key;
				while(realKey.indexOf(OPT_KEYS_SEPARATOR_ENV) > -1){ realKey = realKey.replace(OPT_KEYS_SEPARATOR_ENV, OPT_KEYS_SEPARATOR);}
				notPath.set(realKey, CONFIG, process.env[key]);
			}
		}
	};

	/**
	 * Read configuration from specified file
	 * @param {string} config_path - full path to configs directory (common.json and other according to variety of ENV variable possible values)
	 * @param {string} modules_key - path to modules block in config JSON
	 */

	exports.init = (config_path, modules_key = OPT_MODULES_KEY)=>{
		try{
			//clearing storage
			while(Object.keys(CONFIG).length){
				delete CONFIG[Object.keys(CONFIG)[0]];
			}
			//updating current modules key if presented
			if (modules_key) {
				currentModulesKey = modules_key;
			}
			exports.PATH = config_path;
			let commonConf = exports.loadConfig('common');
			CONFIG = deepmerge_1(CONFIG, commonConf);
			let envConf = exports.loadConfig(ENV);
			CONFIG = deepmerge_1(CONFIG, envConf);
			exports.importENV();
			return exports.createReader();
		}catch(e){
			return false;
		}
	};

	function joinKeys(a, b){
		let fullkey = b;
		if(a.length){
			if(b.length){
				fullkey = [a, b].join(OPT_KEYS_SEPARATOR);
			}else {
				fullkey = a;
			}
		}
		return fullkey;
	}

	exports.createReader = exports.create = (moduleName = false)=>{
		let prefix = '';
		if(moduleName){
			prefix = [currentModulesKey, moduleName].join(OPT_KEYS_SEPARATOR);
		}
		return {
			get(key = '', fallback = undefined){
				let fullkey = joinKeys(prefix, key);
				while(fullkey.indexOf(':') > -1){fullkey = fullkey.replace(':', OPT_KEYS_SEPARATOR);}
				let result = notPath.get(fullkey, CONFIG);
				if(typeof fallback !== 'undefined' && typeof result === 'undefined'){
					return fallback;
				}else {
					return result;
				}
			},
			set(key = '', value){
				if(!key){
					return this;
				}else {
					let fullkey = joinKeys(prefix, key);
					while(fullkey.indexOf(':') > -1){fullkey = fullkey.replace(':', OPT_KEYS_SEPARATOR);}
					notPath.set(fullkey, CONFIG, value);
					return this;
				}
			}
		};
	};

	/**
	 * Interface for modules.
	 * Gives read-only access for module options.
	 * @param {string} moduleName name of the module
	 * @return {object} read-only interface
	 */
	exports.readerForModule = exports.forModule = (moduleName)=>{
		if(moduleName.indexOf('-')>-1){
			moduleName = moduleName.split('-')[1];
		}
		return exports.createReader(moduleName);
	};
	});
	lib$1.PATH;
	lib$1.getConfPath;
	lib$1.getPath;
	lib$1.loadConfig;
	lib$1.load;
	lib$1.importENV;
	lib$1.init;
	lib$1.createReader;
	lib$1.create;
	lib$1.readerForModule;
	lib$1.forModule;

	var notConfig = lib$1;

	const DEV_ENV = 'development';
	const DEF_ENV = 'production';
	const ENV_TYPE = process.env.NODE_ENV ? process.env.NODE_ENV : DEF_ENV;
	const NOOP = () => {};

	function pad(n) {
		return n < 10 ? '0' + n : n;
	}

	function localIsoDate(date) {
		date = date || new Date;
		let localIsoString = date.getFullYear() + '-' +
			pad(date.getMonth() + 1) + '-' +
			pad(date.getDate()) + 'T' +
			pad(date.getHours()) + ':' +
			pad(date.getMinutes()) + ':' +
			pad(date.getSeconds());
		return localIsoString;
	}

	//ÐÐµÐ½ÐµÑÐ°ÑÐ¸Ñ Ð¼ÐµÑÐ¾Ð´Ð° Ð²ÑÐ²Ð¾Ð´Ð° ÑÐ¾Ð¾Ð±ÑÐµÐ½Ð¸Ð¹ Ð² ÐºÐ¾Ð½ÑÐ¾Ð»Ñ Ñ ÑÐºÐ°Ð·Ð°Ð½Ð¸ÐµÐ¼ Ð¿ÑÐµÑÐ¸ÐºÑÐ°.
	function genLogMsg(prefix) {
		return function(){
			let now = localIsoDate();
			// eslint-disable-next-line no-console
			console.log(`[${now}]: ${prefix}::`, ...arguments);
		};
	}

	function isDev() {
		return ENV_TYPE === DEV_ENV;
	}

	function genLogDebug(prefix) {
		if (isDev()) {
			return genLogMsg(prefix);
		} else {
			return NOOP;
		}
	}

	function genLogError(prefix) {
		return function(){
			let now = localIsoDate();
			// eslint-disable-next-line no-console
			console.error(`[${now}]: ${prefix}::`, ...arguments);
		};
	}

	function simpleLogger(mod, label = ''){
		if(arguments.length === 1 && typeof mod === 'boolean'){
			mute = !mod;
			return;
		}
		let parts = path__default["default"].parse(mod.filename);
		let breadcrumbs = [parts.base];
		if(label && label.length){
			breadcrumbs.unshift(label);
		}
		breadcrumbs = breadcrumbs.join(' : ');
		return {
			log: genLogMsg(breadcrumbs),
			info: genLogMsg(breadcrumbs),
			debug: genLogDebug(breadcrumbs),
			error: genLogError(breadcrumbs),
		};
	}

	var lib = simpleLogger;

	var notLog = lib;

	var reporter_node = createCommonjsModule(function (module) {
	/**
	*  Template of reporter.js
	*  For building for specific environment.
	*  Node.js or Browser
	*  @param {string}  env  node|browser in wich env it will be running
	*  @param {string}  url  URL of report collector
	*  @param {string}  key  key to indetificate reporter
	*/

	const PARASITES = ['report@', 'notError@'];
	const LINES_TO_CAPTURE = 6;
	const STACK_PROPS = [
		'file',
		'path',
		'type',
		'line',
		'column',
		'function',
	];

	const FILE_LINE_PARSERS = [
		{
			test: (line)=>{
				const tester = /(.*)@(.+):(\d+):(\d+)/gi;
				let matches = [...line.matchAll(tester)];
				if(matches.length){
					let res = matches[0];
					if(res && res.length > 2 ){
						return res;
					}
				}
				return false;
			},
			parse: (res)=>{
				if(res){
					//separation of different types of data
					let functionFullPath = res[1].split('.');
					let file = res[2];
					//extraction of exact values
					let pathParts = file.split('/');
					let fileName = pathParts[pathParts.length - 1];
					pathParts.pop();
					let filePath = pathParts.join('/');
					let lineNumber = parseInt(res[3]);
					let columnNumber = parseInt(res[4]);
					let functionName = functionFullPath[functionFullPath.length - 1];
					if (functionName.replaceAll){
						functionName = functionName.replaceAll('/' , '').replaceAll('\\' , '').replaceAll('>', '').replaceAll('<', '');
					}
					let fileDir;
					if(pathParts && pathParts.length){
						fileDir = pathParts.pop();
					}
					return {
						file: fileName,
						path: filePath,
						line: lineNumber,
						column: columnNumber,
						function: functionName,
						type: fileDir,
					};
				}else {
					return false;
				}
			}
		},
		{
			test: (line)=>{
				const tester = /\sat\s(.+)\s\((.+)\)/gi;
				let matches = [...line.matchAll(tester)];
				if(matches.length){
					let res = matches[0];
					if(res && res.length > 2 ){
						return res;
					}
				}
				return false;
			},
			parse: (res)=>{
				if(res){
					//separation of different types of data
					let functionFullPath = res[1].split('.');
					let file = res[2].split(':');
					//extraction of exact values
					let pathParts = file[0].split('/');
					let fileName = pathParts[pathParts.length - 1];
					pathParts.pop();
					let filePath = pathParts.join('/');
					let lineNumber = parseInt(file[1]);
					let columnNumber = parseInt(file[2]);
					let functionName = functionFullPath[functionFullPath.length - 1];
					if (functionName.replaceAll){
						functionName = functionName.replaceAll('/' , '').replaceAll('\\' , '').replaceAll('>', '').replaceAll('<', '');
					}
					let fileDir;
					if(pathParts && pathParts.length){
						fileDir = pathParts.pop();
					}
					return {
						file: fileName,
						path: filePath,
						line: lineNumber,
						column: columnNumber,
						function: functionName,
						type: fileDir,
					};
				}else {
					return false;
				}
			}
		},
	];


	const NOT_NODE_ERROR_URL_NODE_DEFAULT = 'https://appmon.ru/api/key/collect';
	var NOT_NODE_ERROR_URL_NODE = null;
	var NOT_NODE_ERROR_KEY = null;
	var config = null;
	try{
		config = notConfig.readerForModule('error');
	}catch(e){
		NOT_NODE_ERROR_URL_NODE = 'https://appmon.ru/api/key/collect';
		NOT_NODE_ERROR_KEY = '';
	}
	const Buffer = buffer__default["default"].Buffer;
	const {readFile} = fs__default["default"].promises;


	const LOG = notLog(module, 'notReporter');





	const DEFAULT_OPTIONS = {
			envFirst: false,
			origin: {},
			url:undefined,
			key:undefined,
			registerAll: true
		};

	/**
	* Error reporting with features, saving browser info, uri and so on.
	* @module not-error/error
	*/
	class notErrorReporter{
		static notError = error_node;
		static notValidationError = validation_error_node;
		static notRequestError = request_error_node;

		constructor(opts = DEFAULT_OPTIONS){
			let {envFirst, origin,	url, key,registerAll } = opts;
			this.envFirst = envFirst;
			this.processWatching = false;
			this.setOrigin(origin);
			this.setKey(key);
			this.setURL(url);
			this.setRegisterAll(registerAll);
			
			return this;
		}

		setOrigin(origin){
			this.origin = origin;
			return this;
		}

		setKey(key){
			this.key = key;
			return this;
		}

		setURL(url){
			this.url = url;
			return this;
		}

		setRegisterAll(registerAll = true){
			this.registerAll = registerAll;
			return this;
		}

		errorIsReportable(error){
			return error instanceof error_node;
		}

		async report(error, notSecure){
			let local = false;
			if(!this.errorIsReportable(error)){
				error = new error_node(error.message, {}, error);
				local = true;
			}
			let data = await this.packError(error, local);
			return await this._report(data, this.getReportURL(), notSecure, 'error');
		}

		reportError(name, opts = {}, parent = null, notSecure){
			return this.report(new error_node(name, opts, parent), notSecure);
		}

		isLineParasite(line){
			return PARASITES.some((str) => line.includes(str));
		}

		trunkStack(stack){
			let lines = stack.split("\n");
			while(lines.length && this.isLineParasite(lines[0])){
				lines.shift();
			}
			return lines;
		}

		__stackFirstLineParser(line){
			let result;
			let parser = FILE_LINE_PARSERS.find((itm) =>{ return result = itm.test(line);});
			if(parser){
				return parser.parse(result);
			}
			return false;
		}

		__stackFirstLineSearcher(stack){
			for(let i = 0; stack.length > i; i++){
				let	line = stack[i];
				if(!line){continue;}
				let res = this.__stackFirstLineParser(line);
				if(res){
					return res;
				}else {
					continue;
				}
			}
			return false;
		}

		parseStack(rawStack){
			try{
				let stack = this.trunkStack(rawStack);
				let res = this.__stackFirstLineSearcher(stack);
				if(!res){
					return {stack};
				}
				let fileinfo = this.__stackFirstLineSearcher(stack);
				if(!fileinfo){
					return {stack};
				}
				return {
					stack,
					...fileinfo
				};
			}catch(e){
				LOG.error(e);
				return false;
			}
		}

		extractDataFromError(err, local){
			let res = err.getDetails();
			if(res.stack){
				let stackInfo = this.parseStack(res.stack);
				if(stackInfo && stackInfo.stack){
					if(local){
						res.stack = stackInfo.stack.join("\n");
						STACK_PROPS.forEach((j) => {
							if(stackInfo[j]){ res[j] = stackInfo[j];}
						});
					}else {
						STACK_PROPS.forEach((j) => {
							if(!res[j]){res[j] = stackInfo[j];}
						});
					}
				}
			}
			return res;
		}

		async packError(error, local = false){
			let result = {};
			result.details   = this.extractDataFromError(error, local);
			await this.tryToGetSourceBlock(result);
			result.options   = error.options;
			result.env       = error.env;
			result.origin   = this.origin?this.origin:{};
			return result;
		}

		async tryToGetSourceBlock(result){
			if(result.details.fileName && !isNaN(result.details.lineNumber)){
				try{
					let text = await this.loadSources(result.details.fileName);
					if(text){
						let lines = this.extractLinesFromFile(text, parseInt(result.details.lineNumber));
						result.lines = lines;
					}
				}catch(e){
					return false;
				}
			}
		}

		extractLinesFromFile(text, targetLine){
			let lines = text.split("\n");
			targetLine = parseInt(targetLine) - 1;
			let fromLine = (targetLine - LINES_TO_CAPTURE);
			let toLine = (targetLine + LINES_TO_CAPTURE);
			if(fromLine < 0){
				fromLine = 0;
			}
			if(toLine > lines.length - 1){
				toLine = lines.length - 1;
			}
			let result = [];
			for(let t = fromLine; t < toLine; t++){
				result.push({l: t + 1, txt: lines[t], color: { danger: targetLine === t} });
			}
			return result;
		}


		/**
		******************************************************************************************************
		******************************************************************************************************
		***	Node.js Section
		******************************************************************************************************
		******************************************************************************************************
		**/

		useENV(){
			this.envFirst = true;
			return this;
		}

		getReportURL(){
			if(this.envFirst){
				if(
					typeof process.env.NOT_NODE_ERROR_URL_NODE !== 'undefined' &&
					process.env.NOT_NODE_ERROR_URL_NODE &&
					process.env.NOT_NODE_ERROR_URL_NODE.length > 0 ){
					return process.env.NOT_NODE_ERROR_URL_NODE;
				}
			}
			if(typeof this.url !== 'undefined'){
				return this.url;
			}else	if ((config && config.get('url') && config.get('url').length > 3)){
				return config.get('url');
			}else {
				if(process.env.NOT_NODE_ERROR_URL_NODE && process.env.NOT_NODE_ERROR_URL_NODE.length>0){
					return process.env.NOT_NODE_ERROR_URL_NODE;
				}else if(NOT_NODE_ERROR_URL_NODE && NOT_NODE_ERROR_URL_NODE.length>3){
					return NOT_NODE_ERROR_URL_NODE;
				}else {
					return NOT_NODE_ERROR_URL_NODE_DEFAULT;
				}
			}
		}

		getReportKey(){
			if(this.envFirst){
				if(
					typeof process.env.NOT_NODE_ERROR_KEY !== 'undefined' &&
					process.env.NOT_NODE_ERROR_KEY &&
					process.env.NOT_NODE_ERROR_KEY.length > 0 ){
					return process.env.NOT_NODE_ERROR_KEY;
				}
			}
			if(typeof this.key !== 'undefined'){
				return this.key;
			}else	if ((config && config.get('key') && config.get('key').length > 3)){
				return config.get('key');
			}else {
				if(process.env.NOT_NODE_ERROR_KEY && process.env.NOT_NODE_ERROR_KEY.length > 0){
					return process.env.NOT_NODE_ERROR_KEY;
				}else if(NOT_NODE_ERROR_KEY && NOT_NODE_ERROR_KEY.length > 0){
					return NOT_NODE_ERROR_KEY;
				}else {
					return '';
				}
			}
		}

		selectProto(url, options = {secure: true}){
			if(url.indexOf('https://') === 0){
				return https__default["default"];
			}else if(options.secure){
				return https__default["default"];
			}else {
				return http__default["default"];
			}
		}

		_report(data, url, notSecure, type = 'error'){
			return new Promise((resolve, reject)=>{
				try{
					let report = {
						key: this.getReportKey(),
						report: data,
						type
					};
					let options = Object.assign({}, config.get('options') || {secure: true}),
						postBody = JSON.stringify(report),
						postreq,
						responseData = '';
					if(notSecure === true){
						options.secure = false;
					}
					let	proto =	this.selectProto(url, options);
					if (!options.headers){
						options.headers = {};
					}
					options.method = 'PUT';
					options.body = postBody;
					options.headers['Content-Length'] = Buffer.byteLength(postBody, 'utf8');
					options.headers['Content-Type'] = 'application/json';
					postreq = proto.request(url, options, function (res) {
						res.on('data', (chunk) => {
							responseData += chunk;
						});
						res.on('end', () => {
							if (res.statusCode == 200){
								let jsonResponse = JSON.parse(responseData);
								resolve(jsonResponse);
							}else {
								reject({statusCode: res.statusCode, content:responseData, payload: postBody});
							}
						});
					});
					postreq.on('error', reject);
					postreq.write(postBody);
					postreq.end();
				}catch(e){
					reject(e);
				}
			});
		}

		watchProcess(){
			if(!this.processWatching){
				process.on('uncaughtExceptionMonitor', (err, origin) => {
					this.reportError(origin, {origin}, err).catch(exc => LOG.error(exc));
				});

				process.on('unhandledRejection', (reason) => {
					this.reportError('unhandledRejection', { reason }, new Error(reason)).catch(exc=>LOG.error(exc));			});

				process.on('warning', (warning) => {
					this.reportError(`Warning: ${warning}`, { type: 'warning', warning }, new Error(warning)).catch(exc=>LOG.error(exc));			});

				process.on('exit', (code) => {
					this.reportError(`Server process exit`, { uptime: process.uptime(), type: 'event', code }, new Error('Exit')).catch(exc=>LOG.error(exc));			});

				const onSignal = (signal)=>{
					this.reportError(`Signal received ${signal}`, {
						uptime: process.uptime(),
						type: 'event',
						signal
					}, new Error('Signal')).catch(exc=>LOG.error(exc));			};

				process.on('SIGINT', onSignal);
				process.on('SIGTERM', onSignal);

				this.processWatching = true;
			}
		}

		async loadSources(filePath){
			return await readFile(filePath, 'utf8');
		}


	}


	module.exports = notErrorReporter;
	});

	var src$1 = {
		name: 'not-error',
		notError: error_node,
		notValidationError: validation_error_node,
		notRequestError: request_error_node,
		notErrorReporter: reporter_node,
		paths:{
			controllers: path__default["default"].join(__dirname, 'controllers')
		}
	};

	var notError = src$1;

	/**
	 * Test argument type to be 'function'
	 * @param {any}  func    possible function
	 * @return {boolean}     if this is a function
	 **/
	const isFunc = (func) => {
	  return typeof func === 'function';
	};

	/**
	 * Returns true if argument is Async function
	 * @param {function} func  to test
	 * @return {boolean}       if this function is constructed as AsyncFunction
	 **/
	const isAsync = (func) => {
	  return func.constructor.name === 'AsyncFunction';
	};

	var common = async (proc, params) => {
	  if (isFunc(proc)) {
	    if (isAsync(proc)) {
	      return await proc(...params);
	    } else {
	      return proc(...params);
	    }
	  }
	};

	const {notValidationError} = notError;



	const ValidationSession = async (validators, data)=>{
	  const result$1 = result.getDefaultResult(data);
	  await validateFields({validators, data, result: result$1});
	  await validateForm({validators, data, result: result$1});
	  return new result(result$1);
	};

	var session = ValidationSession;

	const validateFields = async ({validators, data, result})=>{
	  for(let t in data){
	    await validateField(t, data[t], validators, result);
	  }
	};

	const validateField = async (fieldName, value, validators, result) => {
	  const fieldValidators = getFieldValidators(fieldName, validators);
	  return await runFieldValidators(fieldName, value, fieldValidators, result);
	};

	const getFieldValidators = (name, validators)=>{
	  return validators && validators.fields && validators.fields[name]?validators.fields[name]:[];
	};

	const runFieldValidators = async (fieldName, value, validators, result) => {
	  for(let validatorRule of validators){
	    try{
	      const valid = await common(validatorRule['validator'], [value]);
	      if(!valid){
	        setFieldError(fieldName, validatorRule.message, result);
	      }
	    }catch(e){
	      setFieldError(fieldName, validatorRule.message, result);
	    }
	  }
	};

	const setFieldError = (fieldName, errorMessage, result) => {
	  if (!Array.isArray(result.fields[fieldName])){
	    result.fields[fieldName] = [];
	  }
	  if(!result.fields[fieldName].includes(errorMessage)){
	    result.fields[fieldName].push(errorMessage);
	  }
	  setDirty(result);
	};

	const setDirty = (result) => {
	  result.clean = false;
	};

	const validateForm = async ({validators, data, result}) => {
	  const formValidators = getFormValidators$1(validators);
	  await runFormValidators(data, formValidators, result);
	};

	const getFormValidators$1 = (validators)=>{
	  return validators && validators.form?validators.form: [];
	};

	const runFormValidators = async (data, formValidators, result) => {
	  for(let validator of formValidators){
	    try{
	      await validator(data);
	    }catch(e){
	      if(e instanceof notValidationError){
	        const formErrors = e.getFieldsErrors();
	        addFormErrors(formErrors.form, result);
	        addFormFieldsErrors(formErrors.fields, result);
	      }else {
	        throw e;
	      }
	    }
	  }
	};

	const addFormErrors = (errors, result) => {
	  errors.forEach(error => {
	    addFormError(error, result);
	  });
	};

	const addFormError = (errorMessage, result) => {
	  if(!result.form.errors.includes(errorMessage)){
	    result.form.errors.push(errorMessage);
	  }
	  setDirty(result);
	};

	const addFormFieldsErrors = (fieldsErrors, result)=>{
	  for(let fieldName in fieldsErrors){
	    addFormFieldErrors(fieldName, fieldsErrors[fieldName], result);
	  }
	};

	const addFormFieldErrors = (fieldName, errorMessages, result) => {
	  if (!Array.isArray(result.form.fields[fieldName])){
	    result.form.fields[fieldName] = [...errorMessages];
	    setDirty(result);
	  }else {
	    errorMessages.forEach(error => {
	      addFormFieldError(fieldName, error, result);
	    });
	  }
	};

	const addFormFieldError = (fieldName, errorMessage, result) => {
	  if(!result.form.fields[fieldName].includes(errorMessage)){
	    result.form.fields[fieldName].push(errorMessage);
	  }
	  setDirty(result);
	};

	const ValidationRunner = (validatorsLib) => {
	  return (data, formName) => {
	    const validators = {
	      fields: getFieldsValidators(data, validatorsLib),
	      form: getFormValidators(formName, validatorsLib),
	    };
	    return session(validators, data);
	  };
	};

	var runner = ValidationRunner;

	const getFieldsValidators = (data, validatorsLib) => {
	  if (validatorsLib && validatorsLib.fields) {
	    const list = Object.keys(data);
	    const result = {};
	    list.forEach((fieldName) => {
	      if (Array.isArray(validatorsLib.fields[fieldName])) {
	        result[fieldName] = validatorsLib.fields[fieldName];
	      }
	    });
	    return result;
	  } else {
	    return {};
	  }
	};

	const getFormValidators = (name, validatorsLib) => {
	  return (validatorsLib && validatorsLib.forms && validatorsLib.forms[name]) ? validatorsLib.forms[name] : [];
	};

	const objHas = (obj, name) => Object.prototype.hasOwnProperty.call(obj, name);

	const ValidationBuilder = (validators, getValidatorEnv) => {
	  if (objHas(validators, 'fields')) {
	    for (let fieldName in validators.fields) {
	      validators.fields[fieldName] = augmentFieldsValidators(validators.fields[fieldName], getValidatorEnv);
	    }
	  }
	  if (objHas(validators, 'forms')) {
	    for (let formName in validators.forms) {
	      validators.forms[formName] = augmentFormValidators(validators.forms[formName], getValidatorEnv);
	    }
	  }
	  return validators;
	};

	var builder = ValidationBuilder;

	const augmentFieldsValidators = (fieldValidators, getValidatorEnv) => {
	  return fieldValidators.map(field => augmentFieldValidator(field, getValidatorEnv));
	};

	const augmentFieldValidator = (rule, getValidatorEnv) => {
	  if (rule.validator && typeof rule.validator === 'function') {
	    const ruleValidator = rule.validator;
	    const result = {
	      ...rule
	    };
	    delete result.validator;
	    result.validator = (val) => ruleValidator(val, getValidatorEnv());
	    return result;
	  }
	  return rule;
	};

	const augmentFormValidators = (rules, getValidatorEnv) => {
	  return rules.map(rule => augmentFormValidator(rule, getValidatorEnv));
	};


	const augmentFormValidator = (rule, getValidatorEnv) => {
	  return (val) => rule(val, getValidatorEnv());
	};

	var src = {
	  name: 'not-validation',
	  Session: session,
	  Runner: runner,
	  Builder: builder,
	  Result: result
	};
	var src_3 = src.Runner;

	var DEFAULT_STATUS_SUCCESS = 'ok';
	var DEFAULT_STATUS_ERROR = 'error';

	/* src/frame/components/form/lock.block.svelte generated by Svelte v3.44.3 */

	function create_fragment$X(ctx) {
		let div1;
		let div0;

		return {
			c() {
				div1 = element("div");
				div0 = element("div");
				attr(div0, "class", "loader svelte-j5m1bi");
				attr(div1, "id", "block-shield");
				attr(div1, "style", /*style*/ ctx[1]);
				attr(div1, "class", "svelte-j5m1bi");
				toggle_class(div1, "show", /*enable*/ ctx[0]);
			},
			m(target, anchor) {
				insert(target, div1, anchor);
				append(div1, div0);
			},
			p(ctx, [dirty]) {
				if (dirty & /*style*/ 2) {
					attr(div1, "style", /*style*/ ctx[1]);
				}

				if (dirty & /*enable*/ 1) {
					toggle_class(div1, "show", /*enable*/ ctx[0]);
				}
			},
			i: noop,
			o: noop,
			d(detaching) {
				if (detaching) detach(div1);
			}
		};
	}

	function instance$X($$self, $$props, $$invalidate) {
		let style;
		let { enable = false } = $$props;
		let { backgroundColor = '#337ab7' } = $$props;

		$$self.$$set = $$props => {
			if ('enable' in $$props) $$invalidate(0, enable = $$props.enable);
			if ('backgroundColor' in $$props) $$invalidate(2, backgroundColor = $$props.backgroundColor);
		};

		$$self.$$.update = () => {
			if ($$self.$$.dirty & /*backgroundColor*/ 4) {
				$$invalidate(1, style = `background-color: ${backgroundColor};`);
			}
		};

		return [enable, style, backgroundColor];
	}

	class Lock_block extends SvelteComponent {
		constructor(options) {
			super();
			init(this, options, instance$X, create_fragment$X, safe_not_equal, { enable: 0, backgroundColor: 2 });
		}
	}

	/* src/elements/notification/ui.success.svelte generated by Svelte v3.44.3 */

	function create_fragment$W(ctx) {
		let article;
		let div0;
		let p;
		let t0_value = /*$LOCALE*/ ctx[2][/*title*/ ctx[1]] + "";
		let t0;
		let t1;
		let div1;
		let t2_value = /*$LOCALE*/ ctx[2][/*message*/ ctx[0]] + "";
		let t2;

		return {
			c() {
				article = element("article");
				div0 = element("div");
				p = element("p");
				t0 = text(t0_value);
				t1 = space();
				div1 = element("div");
				t2 = text(t2_value);
				attr(div0, "class", "message-header");
				attr(div1, "class", "message-body");
				attr(article, "class", "message is-success");
			},
			m(target, anchor) {
				insert(target, article, anchor);
				append(article, div0);
				append(div0, p);
				append(p, t0);
				append(article, t1);
				append(article, div1);
				append(div1, t2);
			},
			p(ctx, [dirty]) {
				if (dirty & /*$LOCALE, title*/ 6 && t0_value !== (t0_value = /*$LOCALE*/ ctx[2][/*title*/ ctx[1]] + "")) set_data(t0, t0_value);
				if (dirty & /*$LOCALE, message*/ 5 && t2_value !== (t2_value = /*$LOCALE*/ ctx[2][/*message*/ ctx[0]] + "")) set_data(t2, t2_value);
			},
			i: noop,
			o: noop,
			d(detaching) {
				if (detaching) detach(article);
			}
		};
	}

	function instance$W($$self, $$props, $$invalidate) {
		let $LOCALE;
		component_subscribe($$self, LOCALE, $$value => $$invalidate(2, $LOCALE = $$value));
		let { message } = $$props;
		let { title } = $$props;

		$$self.$$set = $$props => {
			if ('message' in $$props) $$invalidate(0, message = $$props.message);
			if ('title' in $$props) $$invalidate(1, title = $$props.title);
		};

		return [message, title, $LOCALE];
	}

	class Ui_success extends SvelteComponent {
		constructor(options) {
			super();
			init(this, options, instance$W, create_fragment$W, safe_not_equal, { message: 0, title: 1 });
		}
	}

	/* src/elements/notification/ui.error.svelte generated by Svelte v3.44.3 */

	function create_fragment$V(ctx) {
		let article;
		let div0;
		let p;
		let t0_value = /*$LOCALE*/ ctx[2][/*title*/ ctx[1]] + "";
		let t0;
		let t1;
		let div1;
		let t2_value = /*$LOCALE*/ ctx[2][/*message*/ ctx[0]] + "";
		let t2;

		return {
			c() {
				article = element("article");
				div0 = element("div");
				p = element("p");
				t0 = text(t0_value);
				t1 = space();
				div1 = element("div");
				t2 = text(t2_value);
				attr(div0, "class", "message-header");
				attr(div1, "class", "message-body");
				attr(article, "class", "message is-danger");
			},
			m(target, anchor) {
				insert(target, article, anchor);
				append(article, div0);
				append(div0, p);
				append(p, t0);
				append(article, t1);
				append(article, div1);
				append(div1, t2);
			},
			p(ctx, [dirty]) {
				if (dirty & /*$LOCALE, title*/ 6 && t0_value !== (t0_value = /*$LOCALE*/ ctx[2][/*title*/ ctx[1]] + "")) set_data(t0, t0_value);
				if (dirty & /*$LOCALE, message*/ 5 && t2_value !== (t2_value = /*$LOCALE*/ ctx[2][/*message*/ ctx[0]] + "")) set_data(t2, t2_value);
			},
			i: noop,
			o: noop,
			d(detaching) {
				if (detaching) detach(article);
			}
		};
	}

	function instance$V($$self, $$props, $$invalidate) {
		let $LOCALE;
		component_subscribe($$self, LOCALE, $$value => $$invalidate(2, $LOCALE = $$value));
		let { message } = $$props;
		let { title } = $$props;

		$$self.$$set = $$props => {
			if ('message' in $$props) $$invalidate(0, message = $$props.message);
			if ('title' in $$props) $$invalidate(1, title = $$props.title);
		};

		return [message, title, $LOCALE];
	}

	class Ui_error extends SvelteComponent {
		constructor(options) {
			super();
			init(this, options, instance$V, create_fragment$V, safe_not_equal, { message: 0, title: 1 });
		}
	}

	/* src/elements/button/ui.button.svelte generated by Svelte v3.44.3 */

	function create_else_block$s(ctx) {
		let t_value = /*$LOCALE*/ ctx[16][/*title*/ ctx[0]] + "";
		let t;

		return {
			c() {
				t = text(t_value);
			},
			m(target, anchor) {
				insert(target, t, anchor);
			},
			p(ctx, dirty) {
				if (dirty & /*$LOCALE, title*/ 65537 && t_value !== (t_value = /*$LOCALE*/ ctx[16][/*title*/ ctx[0]] + "")) set_data(t, t_value);
			},
			d(detaching) {
				if (detaching) detach(t);
			}
		};
	}

	// (40:2) {#if icon }
	function create_if_block$B(ctx) {
		let t0;
		let t1;
		let if_block2_anchor;
		let if_block0 = /*iconSide*/ ctx[14] === 'left' && create_if_block_3$h(ctx);
		let if_block1 = /*title*/ ctx[0] && create_if_block_2$k(ctx);
		let if_block2 = /*iconSide*/ ctx[14] === 'right' && create_if_block_1$s(ctx);

		return {
			c() {
				if (if_block0) if_block0.c();
				t0 = space();
				if (if_block1) if_block1.c();
				t1 = space();
				if (if_block2) if_block2.c();
				if_block2_anchor = empty();
			},
			m(target, anchor) {
				if (if_block0) if_block0.m(target, anchor);
				insert(target, t0, anchor);
				if (if_block1) if_block1.m(target, anchor);
				insert(target, t1, anchor);
				if (if_block2) if_block2.m(target, anchor);
				insert(target, if_block2_anchor, anchor);
			},
			p(ctx, dirty) {
				if (/*iconSide*/ ctx[14] === 'left') {
					if (if_block0) {
						if_block0.p(ctx, dirty);
					} else {
						if_block0 = create_if_block_3$h(ctx);
						if_block0.c();
						if_block0.m(t0.parentNode, t0);
					}
				} else if (if_block0) {
					if_block0.d(1);
					if_block0 = null;
				}

				if (/*title*/ ctx[0]) {
					if (if_block1) {
						if_block1.p(ctx, dirty);
					} else {
						if_block1 = create_if_block_2$k(ctx);
						if_block1.c();
						if_block1.m(t1.parentNode, t1);
					}
				} else if (if_block1) {
					if_block1.d(1);
					if_block1 = null;
				}

				if (/*iconSide*/ ctx[14] === 'right') {
					if (if_block2) {
						if_block2.p(ctx, dirty);
					} else {
						if_block2 = create_if_block_1$s(ctx);
						if_block2.c();
						if_block2.m(if_block2_anchor.parentNode, if_block2_anchor);
					}
				} else if (if_block2) {
					if_block2.d(1);
					if_block2 = null;
				}
			},
			d(detaching) {
				if (if_block0) if_block0.d(detaching);
				if (detaching) detach(t0);
				if (if_block1) if_block1.d(detaching);
				if (detaching) detach(t1);
				if (if_block2) if_block2.d(detaching);
				if (detaching) detach(if_block2_anchor);
			}
		};
	}

	// (41:2) {#if iconSide === 'left' }
	function create_if_block_3$h(ctx) {
		let span;
		let i;
		let i_class_value;

		return {
			c() {
				span = element("span");
				i = element("i");
				attr(i, "class", i_class_value = "fas fa-" + /*icon*/ ctx[13] + " " + (/*size*/ ctx[11] ? `is-${/*size*/ ctx[11]}` : ''));
				attr(span, "class", "icon");
			},
			m(target, anchor) {
				insert(target, span, anchor);
				append(span, i);
			},
			p(ctx, dirty) {
				if (dirty & /*icon, size*/ 10240 && i_class_value !== (i_class_value = "fas fa-" + /*icon*/ ctx[13] + " " + (/*size*/ ctx[11] ? `is-${/*size*/ ctx[11]}` : ''))) {
					attr(i, "class", i_class_value);
				}
			},
			d(detaching) {
				if (detaching) detach(span);
			}
		};
	}

	// (44:2) {#if title }
	function create_if_block_2$k(ctx) {
		let span;
		let t_value = /*$LOCALE*/ ctx[16][/*title*/ ctx[0]] + "";
		let t;

		return {
			c() {
				span = element("span");
				t = text(t_value);
			},
			m(target, anchor) {
				insert(target, span, anchor);
				append(span, t);
			},
			p(ctx, dirty) {
				if (dirty & /*$LOCALE, title*/ 65537 && t_value !== (t_value = /*$LOCALE*/ ctx[16][/*title*/ ctx[0]] + "")) set_data(t, t_value);
			},
			d(detaching) {
				if (detaching) detach(span);
			}
		};
	}

	// (47:2) {#if iconSide === 'right' }
	function create_if_block_1$s(ctx) {
		let span;
		let i;
		let i_class_value;

		return {
			c() {
				span = element("span");
				i = element("i");
				attr(i, "class", i_class_value = "fas fa-" + /*icon*/ ctx[13] + " " + (/*size*/ ctx[11] ? `is-${/*size*/ ctx[11]}` : ''));
				attr(span, "class", "icon");
			},
			m(target, anchor) {
				insert(target, span, anchor);
				append(span, i);
			},
			p(ctx, dirty) {
				if (dirty & /*icon, size*/ 10240 && i_class_value !== (i_class_value = "fas fa-" + /*icon*/ ctx[13] + " " + (/*size*/ ctx[11] ? `is-${/*size*/ ctx[11]}` : ''))) {
					attr(i, "class", i_class_value);
				}
			},
			d(detaching) {
				if (detaching) detach(span);
			}
		};
	}

	function create_fragment$U(ctx) {
		let button;
		let button_type_value;
		let button_class_value;
		let mounted;
		let dispose;

		function select_block_type(ctx, dirty) {
			if (/*icon*/ ctx[13]) return create_if_block$B;
			return create_else_block$s;
		}

		let current_block_type = select_block_type(ctx);
		let if_block = current_block_type(ctx);

		return {
			c() {
				button = element("button");
				if_block.c();
				button.disabled = /*disabled*/ ctx[7];
				attr(button, "type", button_type_value = /*type*/ ctx[9] ? /*type*/ ctx[9] : "");
				attr(button, "class", button_class_value = "button " + /*classes*/ ctx[12] + " " + (/*state*/ ctx[8] ? `is-${/*state*/ ctx[8]}` : '') + " " + (/*inverted*/ ctx[5] ? `is-inverted` : '') + " " + (/*outlined*/ ctx[4] ? `is-outlined` : '') + " " + (/*raised*/ ctx[3] ? `is-raised` : '') + " " + (/*rounded*/ ctx[6] ? `is-rounded` : '') + " " + (/*light*/ ctx[1] ? `is-light` : '') + " " + (/*loading*/ ctx[2] ? `is-loading` : '') + " " + (/*color*/ ctx[10] ? `is-${/*color*/ ctx[10]}` : '') + " " + (/*size*/ ctx[11] ? `is-${/*size*/ ctx[11]}` : '') + "");
			},
			m(target, anchor) {
				insert(target, button, anchor);
				if_block.m(button, null);

				if (!mounted) {
					dispose = listen(button, "click", function () {
						if (is_function(/*action*/ ctx[15])) /*action*/ ctx[15].apply(this, arguments);
					});

					mounted = true;
				}
			},
			p(new_ctx, [dirty]) {
				ctx = new_ctx;

				if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block.d(1);
					if_block = current_block_type(ctx);

					if (if_block) {
						if_block.c();
						if_block.m(button, null);
					}
				}

				if (dirty & /*disabled*/ 128) {
					button.disabled = /*disabled*/ ctx[7];
				}

				if (dirty & /*type*/ 512 && button_type_value !== (button_type_value = /*type*/ ctx[9] ? /*type*/ ctx[9] : "")) {
					attr(button, "type", button_type_value);
				}

				if (dirty & /*classes, state, inverted, outlined, raised, rounded, light, loading, color, size*/ 7550 && button_class_value !== (button_class_value = "button " + /*classes*/ ctx[12] + " " + (/*state*/ ctx[8] ? `is-${/*state*/ ctx[8]}` : '') + " " + (/*inverted*/ ctx[5] ? `is-inverted` : '') + " " + (/*outlined*/ ctx[4] ? `is-outlined` : '') + " " + (/*raised*/ ctx[3] ? `is-raised` : '') + " " + (/*rounded*/ ctx[6] ? `is-rounded` : '') + " " + (/*light*/ ctx[1] ? `is-light` : '') + " " + (/*loading*/ ctx[2] ? `is-loading` : '') + " " + (/*color*/ ctx[10] ? `is-${/*color*/ ctx[10]}` : '') + " " + (/*size*/ ctx[11] ? `is-${/*size*/ ctx[11]}` : '') + "")) {
					attr(button, "class", button_class_value);
				}
			},
			i: noop,
			o: noop,
			d(detaching) {
				if (detaching) detach(button);
				if_block.d();
				mounted = false;
				dispose();
			}
		};
	}

	function instance$U($$self, $$props, $$invalidate) {
		let $LOCALE;
		component_subscribe($$self, LOCALE, $$value => $$invalidate(16, $LOCALE = $$value));
		let { title = '' } = $$props;
		let { light = false } = $$props;
		let { loading = false } = $$props;
		let { raised = false } = $$props;
		let { outlined = false } = $$props;
		let { inverted = false } = $$props;
		let { rounded = false } = $$props;
		let { disabled = false } = $$props;
		let { state = '' } = $$props;
		let { type = '' } = $$props;
		let { color = '' } = $$props;
		let { size = '' } = $$props;
		let { classes = '' } = $$props;
		let { icon = false } = $$props;
		let { iconSide = 'right' } = $$props;

		let { action = () => {
			return true;
		} } = $$props;

		$$self.$$set = $$props => {
			if ('title' in $$props) $$invalidate(0, title = $$props.title);
			if ('light' in $$props) $$invalidate(1, light = $$props.light);
			if ('loading' in $$props) $$invalidate(2, loading = $$props.loading);
			if ('raised' in $$props) $$invalidate(3, raised = $$props.raised);
			if ('outlined' in $$props) $$invalidate(4, outlined = $$props.outlined);
			if ('inverted' in $$props) $$invalidate(5, inverted = $$props.inverted);
			if ('rounded' in $$props) $$invalidate(6, rounded = $$props.rounded);
			if ('disabled' in $$props) $$invalidate(7, disabled = $$props.disabled);
			if ('state' in $$props) $$invalidate(8, state = $$props.state);
			if ('type' in $$props) $$invalidate(9, type = $$props.type);
			if ('color' in $$props) $$invalidate(10, color = $$props.color);
			if ('size' in $$props) $$invalidate(11, size = $$props.size);
			if ('classes' in $$props) $$invalidate(12, classes = $$props.classes);
			if ('icon' in $$props) $$invalidate(13, icon = $$props.icon);
			if ('iconSide' in $$props) $$invalidate(14, iconSide = $$props.iconSide);
			if ('action' in $$props) $$invalidate(15, action = $$props.action);
		};

		return [
			title,
			light,
			loading,
			raised,
			outlined,
			inverted,
			rounded,
			disabled,
			state,
			type,
			color,
			size,
			classes,
			icon,
			iconSide,
			action,
			$LOCALE
		];
	}

	class Ui_button extends SvelteComponent {
		constructor(options) {
			super();

			init(this, options, instance$U, create_fragment$U, safe_not_equal, {
				title: 0,
				light: 1,
				loading: 2,
				raised: 3,
				outlined: 4,
				inverted: 5,
				rounded: 6,
				disabled: 7,
				state: 8,
				type: 9,
				color: 10,
				size: 11,
				classes: 12,
				icon: 13,
				iconSide: 14,
				action: 15
			});
		}
	}

	/* src/elements/button/ui.buttons.svelte generated by Svelte v3.44.3 */

	function get_each_context$e(ctx, list, i) {
		const child_ctx = ctx.slice();
		child_ctx[4] = list[i];
		return child_ctx;
	}

	// (11:2) {#each values as item (item) }
	function create_each_block$e(key_1, ctx) {
		let first;
		let uibutton;
		let current;
		const uibutton_spread_levels = [/*item*/ ctx[4]];
		let uibutton_props = {};

		for (let i = 0; i < uibutton_spread_levels.length; i += 1) {
			uibutton_props = assign(uibutton_props, uibutton_spread_levels[i]);
		}

		uibutton = new Ui_button({ props: uibutton_props });

		return {
			key: key_1,
			first: null,
			c() {
				first = empty();
				create_component(uibutton.$$.fragment);
				this.first = first;
			},
			m(target, anchor) {
				insert(target, first, anchor);
				mount_component(uibutton, target, anchor);
				current = true;
			},
			p(new_ctx, dirty) {
				ctx = new_ctx;

				const uibutton_changes = (dirty & /*values*/ 1)
				? get_spread_update(uibutton_spread_levels, [get_spread_object(/*item*/ ctx[4])])
				: {};

				uibutton.$set(uibutton_changes);
			},
			i(local) {
				if (current) return;
				transition_in(uibutton.$$.fragment, local);
				current = true;
			},
			o(local) {
				transition_out(uibutton.$$.fragment, local);
				current = false;
			},
			d(detaching) {
				if (detaching) detach(first);
				destroy_component(uibutton, detaching);
			}
		};
	}

	function create_fragment$T(ctx) {
		let div;
		let each_blocks = [];
		let each_1_lookup = new Map();
		let div_class_value;
		let current;
		let each_value = /*values*/ ctx[0];
		const get_key = ctx => /*item*/ ctx[4];

		for (let i = 0; i < each_value.length; i += 1) {
			let child_ctx = get_each_context$e(ctx, each_value, i);
			let key = get_key(child_ctx);
			each_1_lookup.set(key, each_blocks[i] = create_each_block$e(key, child_ctx));
		}

		return {
			c() {
				div = element("div");

				for (let i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].c();
				}

				attr(div, "class", div_class_value = "buttons has-addons " + (/*centered*/ ctx[1] ? 'is-centered' : '') + " " + (/*right*/ ctx[2] ? 'is-right' : '') + " " + /*classes*/ ctx[3]);
			},
			m(target, anchor) {
				insert(target, div, anchor);

				for (let i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].m(div, null);
				}

				current = true;
			},
			p(ctx, [dirty]) {
				if (dirty & /*values*/ 1) {
					each_value = /*values*/ ctx[0];
					group_outros();
					each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, div, outro_and_destroy_block, create_each_block$e, null, get_each_context$e);
					check_outros();
				}

				if (!current || dirty & /*centered, right, classes*/ 14 && div_class_value !== (div_class_value = "buttons has-addons " + (/*centered*/ ctx[1] ? 'is-centered' : '') + " " + (/*right*/ ctx[2] ? 'is-right' : '') + " " + /*classes*/ ctx[3])) {
					attr(div, "class", div_class_value);
				}
			},
			i(local) {
				if (current) return;

				for (let i = 0; i < each_value.length; i += 1) {
					transition_in(each_blocks[i]);
				}

				current = true;
			},
			o(local) {
				for (let i = 0; i < each_blocks.length; i += 1) {
					transition_out(each_blocks[i]);
				}

				current = false;
			},
			d(detaching) {
				if (detaching) detach(div);

				for (let i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].d();
				}
			}
		};
	}

	function instance$T($$self, $$props, $$invalidate) {
		let { values = [] } = $$props;
		let { centered = false } = $$props;
		let { right = false } = $$props;
		let { classes = '' } = $$props;

		$$self.$$set = $$props => {
			if ('values' in $$props) $$invalidate(0, values = $$props.values);
			if ('centered' in $$props) $$invalidate(1, centered = $$props.centered);
			if ('right' in $$props) $$invalidate(2, right = $$props.right);
			if ('classes' in $$props) $$invalidate(3, classes = $$props.classes);
		};

		return [values, centered, right, classes];
	}

	class Ui_buttons extends SvelteComponent {
		constructor(options) {
			super();

			init(this, options, instance$T, create_fragment$T, safe_not_equal, {
				values: 0,
				centered: 1,
				right: 2,
				classes: 3
			});
		}
	}

	/* src/frame/components/form/form.frame.svelte generated by Svelte v3.44.3 */

	function create_else_block$r(ctx) {
		let div;
		let div_id_value;
		let t0;
		let t1;
		let if_block1_anchor;
		let current;
		let if_block0 = /*status*/ ctx[2] === DEFAULT_STATUS_ERROR && create_if_block_2$j(ctx);
		let if_block1 = /*showModes*/ ctx[4] && create_if_block_1$r(ctx);

		return {
			c() {
				div = element("div");
				t0 = space();
				if (if_block0) if_block0.c();
				t1 = space();
				if (if_block1) if_block1.c();
				if_block1_anchor = empty();
				attr(div, "class", "form-paper");
				attr(div, "id", div_id_value = "" + (/*name*/ ctx[1] + "-frame-form-container"));
			},
			m(target, anchor) {
				insert(target, div, anchor);
				insert(target, t0, anchor);
				if (if_block0) if_block0.m(target, anchor);
				insert(target, t1, anchor);
				if (if_block1) if_block1.m(target, anchor);
				insert(target, if_block1_anchor, anchor);
				current = true;
			},
			p(ctx, dirty) {
				if (!current || dirty & /*name*/ 2 && div_id_value !== (div_id_value = "" + (/*name*/ ctx[1] + "-frame-form-container"))) {
					attr(div, "id", div_id_value);
				}

				if (/*status*/ ctx[2] === DEFAULT_STATUS_ERROR) {
					if (if_block0) {
						if_block0.p(ctx, dirty);

						if (dirty & /*status*/ 4) {
							transition_in(if_block0, 1);
						}
					} else {
						if_block0 = create_if_block_2$j(ctx);
						if_block0.c();
						transition_in(if_block0, 1);
						if_block0.m(t1.parentNode, t1);
					}
				} else if (if_block0) {
					group_outros();

					transition_out(if_block0, 1, 1, () => {
						if_block0 = null;
					});

					check_outros();
				}

				if (/*showModes*/ ctx[4]) {
					if (if_block1) {
						if_block1.p(ctx, dirty);

						if (dirty & /*showModes*/ 16) {
							transition_in(if_block1, 1);
						}
					} else {
						if_block1 = create_if_block_1$r(ctx);
						if_block1.c();
						transition_in(if_block1, 1);
						if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
					}
				} else if (if_block1) {
					group_outros();

					transition_out(if_block1, 1, 1, () => {
						if_block1 = null;
					});

					check_outros();
				}
			},
			i(local) {
				if (current) return;
				transition_in(if_block0);
				transition_in(if_block1);
				current = true;
			},
			o(local) {
				transition_out(if_block0);
				transition_out(if_block1);
				current = false;
			},
			d(detaching) {
				if (detaching) detach(div);
				if (detaching) detach(t0);
				if (if_block0) if_block0.d(detaching);
				if (detaching) detach(t1);
				if (if_block1) if_block1.d(detaching);
				if (detaching) detach(if_block1_anchor);
			}
		};
	}

	// (66:2) {#if status === DEFAULT_STATUS_SUCCESS }
	function create_if_block$A(ctx) {
		let uisuccess;
		let current;

		uisuccess = new Ui_success({
				props: { title: "", message: /*message*/ ctx[3] }
			});

		return {
			c() {
				create_component(uisuccess.$$.fragment);
			},
			m(target, anchor) {
				mount_component(uisuccess, target, anchor);
				current = true;
			},
			p(ctx, dirty) {
				const uisuccess_changes = {};
				if (dirty & /*message*/ 8) uisuccess_changes.message = /*message*/ ctx[3];
				uisuccess.$set(uisuccess_changes);
			},
			i(local) {
				if (current) return;
				transition_in(uisuccess.$$.fragment, local);
				current = true;
			},
			o(local) {
				transition_out(uisuccess.$$.fragment, local);
				current = false;
			},
			d(detaching) {
				destroy_component(uisuccess, detaching);
			}
		};
	}

	// (70:2) {#if status === DEFAULT_STATUS_ERROR }
	function create_if_block_2$j(ctx) {
		let uierror;
		let current;

		uierror = new Ui_error({
				props: { title: "", message: /*message*/ ctx[3] }
			});

		return {
			c() {
				create_component(uierror.$$.fragment);
			},
			m(target, anchor) {
				mount_component(uierror, target, anchor);
				current = true;
			},
			p(ctx, dirty) {
				const uierror_changes = {};
				if (dirty & /*message*/ 8) uierror_changes.message = /*message*/ ctx[3];
				uierror.$set(uierror_changes);
			},
			i(local) {
				if (current) return;
				transition_in(uierror.$$.fragment, local);
				current = true;
			},
			o(local) {
				transition_out(uierror.$$.fragment, local);
				current = false;
			},
			d(detaching) {
				destroy_component(uierror, detaching);
			}
		};
	}

	// (73:2) {#if showModes}
	function create_if_block_1$r(ctx) {
		let uibuttons;
		let updating_values;
		let current;

		function uibuttons_values_binding(value) {
			/*uibuttons_values_binding*/ ctx[10](value);
		}

		let uibuttons_props = { centered: true, classes: 'mt-4' };

		if (/*MODES_BUTTONS*/ ctx[5] !== void 0) {
			uibuttons_props.values = /*MODES_BUTTONS*/ ctx[5];
		}

		uibuttons = new Ui_buttons({ props: uibuttons_props });
		binding_callbacks.push(() => bind$2(uibuttons, 'values', uibuttons_values_binding));

		return {
			c() {
				create_component(uibuttons.$$.fragment);
			},
			m(target, anchor) {
				mount_component(uibuttons, target, anchor);
				current = true;
			},
			p(ctx, dirty) {
				const uibuttons_changes = {};

				if (!updating_values && dirty & /*MODES_BUTTONS*/ 32) {
					updating_values = true;
					uibuttons_changes.values = /*MODES_BUTTONS*/ ctx[5];
					add_flush_callback(() => updating_values = false);
				}

				uibuttons.$set(uibuttons_changes);
			},
			i(local) {
				if (current) return;
				transition_in(uibuttons.$$.fragment, local);
				current = true;
			},
			o(local) {
				transition_out(uibuttons.$$.fragment, local);
				current = false;
			},
			d(detaching) {
				destroy_component(uibuttons, detaching);
			}
		};
	}

	function create_fragment$S(ctx) {
		let div;
		let lockblockcomponent;
		let updating_enable;
		let t;
		let current_block_type_index;
		let if_block;
		let div_id_value;
		let current;

		function lockblockcomponent_enable_binding(value) {
			/*lockblockcomponent_enable_binding*/ ctx[9](value);
		}

		let lockblockcomponent_props = {};

		if (/*loading*/ ctx[0] !== void 0) {
			lockblockcomponent_props.enable = /*loading*/ ctx[0];
		}

		lockblockcomponent = new Lock_block({ props: lockblockcomponent_props });
		binding_callbacks.push(() => bind$2(lockblockcomponent, 'enable', lockblockcomponent_enable_binding));
		const if_block_creators = [create_if_block$A, create_else_block$r];
		const if_blocks = [];

		function select_block_type(ctx, dirty) {
			if (/*status*/ ctx[2] === DEFAULT_STATUS_SUCCESS) return 0;
			return 1;
		}

		current_block_type_index = select_block_type(ctx);
		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

		return {
			c() {
				div = element("div");
				create_component(lockblockcomponent.$$.fragment);
				t = space();
				if_block.c();
				attr(div, "class", "block-container");
				attr(div, "id", div_id_value = "" + (/*name*/ ctx[1] + "-frame"));
			},
			m(target, anchor) {
				insert(target, div, anchor);
				mount_component(lockblockcomponent, div, null);
				append(div, t);
				if_blocks[current_block_type_index].m(div, null);
				current = true;
			},
			p(ctx, [dirty]) {
				const lockblockcomponent_changes = {};

				if (!updating_enable && dirty & /*loading*/ 1) {
					updating_enable = true;
					lockblockcomponent_changes.enable = /*loading*/ ctx[0];
					add_flush_callback(() => updating_enable = false);
				}

				lockblockcomponent.$set(lockblockcomponent_changes);
				let previous_block_index = current_block_type_index;
				current_block_type_index = select_block_type(ctx);

				if (current_block_type_index === previous_block_index) {
					if_blocks[current_block_type_index].p(ctx, dirty);
				} else {
					group_outros();

					transition_out(if_blocks[previous_block_index], 1, 1, () => {
						if_blocks[previous_block_index] = null;
					});

					check_outros();
					if_block = if_blocks[current_block_type_index];

					if (!if_block) {
						if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
						if_block.c();
					} else {
						if_block.p(ctx, dirty);
					}

					transition_in(if_block, 1);
					if_block.m(div, null);
				}

				if (!current || dirty & /*name*/ 2 && div_id_value !== (div_id_value = "" + (/*name*/ ctx[1] + "-frame"))) {
					attr(div, "id", div_id_value);
				}
			},
			i(local) {
				if (current) return;
				transition_in(lockblockcomponent.$$.fragment, local);
				transition_in(if_block);
				current = true;
			},
			o(local) {
				transition_out(lockblockcomponent.$$.fragment, local);
				transition_out(if_block);
				current = false;
			},
			d(detaching) {
				if (detaching) detach(div);
				destroy_component(lockblockcomponent);
				if_blocks[current_block_type_index].d();
			}
		};
	}

	function instance$S($$self, $$props, $$invalidate) {
		let dispatch = createEventDispatcher();
		let { name = 'default-form' } = $$props;
		let { status = '' } = $$props;
		let { message = false } = $$props;
		let { showModes = false } = $$props;
		let { MODES = [] } = $$props;
		let { mode = 'default' } = $$props;
		let { loading = false } = $$props;
		let { MODES_TITLES = {} } = $$props;

		function setMode(val) {
			$$invalidate(6, mode = val);
			dispatch('mode', val);
			updateModesButtons();
		}

		let MODES_BUTTONS = [];

		function updateModesButtons() {
			$$invalidate(5, MODES_BUTTONS = MODES.filter(thisMode => {
				return mode !== thisMode;
			}).map(thisMode => {
				return {
					title: MODES_TITLES[thisMode],
					outlined: true,
					type: 'link',
					action() {
						setMode(thisMode);
					}
				};
			}));

			$$invalidate(5, MODES_BUTTONS);
		}

		onMount(() => {
			updateModesButtons();
		});

		function lockblockcomponent_enable_binding(value) {
			loading = value;
			$$invalidate(0, loading);
		}

		function uibuttons_values_binding(value) {
			MODES_BUTTONS = value;
			$$invalidate(5, MODES_BUTTONS);
		}

		$$self.$$set = $$props => {
			if ('name' in $$props) $$invalidate(1, name = $$props.name);
			if ('status' in $$props) $$invalidate(2, status = $$props.status);
			if ('message' in $$props) $$invalidate(3, message = $$props.message);
			if ('showModes' in $$props) $$invalidate(4, showModes = $$props.showModes);
			if ('MODES' in $$props) $$invalidate(7, MODES = $$props.MODES);
			if ('mode' in $$props) $$invalidate(6, mode = $$props.mode);
			if ('loading' in $$props) $$invalidate(0, loading = $$props.loading);
			if ('MODES_TITLES' in $$props) $$invalidate(8, MODES_TITLES = $$props.MODES_TITLES);
		};

		return [
			loading,
			name,
			status,
			message,
			showModes,
			MODES_BUTTONS,
			mode,
			MODES,
			MODES_TITLES,
			lockblockcomponent_enable_binding,
			uibuttons_values_binding
		];
	}

	class Form_frame extends SvelteComponent {
		constructor(options) {
			super();

			init(this, options, instance$S, create_fragment$S, safe_not_equal, {
				name: 1,
				status: 2,
				message: 3,
				showModes: 4,
				MODES: 7,
				mode: 6,
				loading: 0,
				MODES_TITLES: 8
			});
		}
	}

	var DEFAULT_CONTAINER_SELECTOR = '.form';
	var DEFAULT_VARIANT_NAME = 'noname';

	var _action = /*#__PURE__*/new WeakMap();

	var _fields = /*#__PURE__*/new WeakMap();

	var _variants = /*#__PURE__*/new WeakMap();

	var _missingOverrideWarning = /*#__PURE__*/new WeakSet();

	var notForm = /*#__PURE__*/function (_notBase) {
	  _inherits(notForm, _notBase);

	  var _super = _createSuper(notForm);

	  //fields UI
	  //variants for UI
	  function notForm(_ref) {
	    var _this;

	    var app = _ref.app,
	        name = _ref.name;

	    _classCallCheck(this, notForm);

	    _this = _super.call(this, {
	      working: {
	        name: "".concat(name, "Form")
	      }
	    });

	    _classPrivateMethodInitSpec(_assertThisInitialized(_this), _missingOverrideWarning);

	    _defineProperty(_assertThisInitialized(_this), "defaultAction", 'default');

	    _classPrivateFieldInitSpec(_assertThisInitialized(_this), _action, {
	      writable: true,
	      value: 'default'
	    });

	    _classPrivateFieldInitSpec(_assertThisInitialized(_this), _fields, {
	      writable: true,
	      value: new Lib()
	    });

	    _classPrivateFieldInitSpec(_assertThisInitialized(_this), _variants, {
	      writable: true,
	      value: new Lib()
	    });

	    _this.app = app;

	    _this.initFrame();

	    _this.initFormMode();

	    return _this;
	  }
	  /**
	  * Initalizing form frame mode, with switchers between modes
	  **/


	  _createClass(notForm, [{
	    key: "initFrame",
	    value: function initFrame() {
	      var _this2 = this;

	      var target = this.getFrameTarget();

	      if (!target) {
	        location.href = this.getMainURL();
	      }

	      target.innerHTML = '';
	      this.frame = new Form_frame({
	        target: target,
	        props: this.getFrameProps(mode)
	      });
	      this.frame.$on('action', function (ev) {
	        _this2.setAction(ev.detail);
	      });
	    }
	  }, {
	    key: "initFormMode",
	    value: function initFormMode() {
	      this.initValidator();
	      this.initUI();
	    }
	  }, {
	    key: "initUI",
	    value: function initUI() {
	      var _this3 = this;

	      this.form = new UIForm({
	        target: this.getFormTargetEl(),
	        props: this.getFormProps({
	          manifest: this.getFormManifest(),
	          action: this.getFormAction(),
	          options: this.getFormOptions(),
	          data: this.getFormData()
	        })
	      });
	      formUI.$on('change', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
	        var session;
	        return regeneratorRuntime.wrap(function _callee$(_context) {
	          while (1) {
	            switch (_context.prev = _context.next) {
	              case 0:
	                _context.prev = 0;
	                _context.next = 3;
	                return formValidator.all(formUI.collectData(), action);

	              case 3:
	                session = _context.sent;
	                formUI.updateFormValidationStatus(session.getCompleteResult());
	                _context.next = 11;
	                break;

	              case 7:
	                _context.prev = 7;
	                _context.t0 = _context["catch"](0);
	                formUI.updateFormValidationStatus({
	                  form: [UICommon.ERROR_DEFAULT]
	                });
	                notCommon.report(_context.t0);

	              case 11:
	              case "end":
	                return _context.stop();
	            }
	          }
	        }, _callee, null, [[0, 7]]);
	      })));
	      this.form.$on('submit', function (ev) {
	        return _this3.submit(ev.detail);
	      });
	      this.form.$on('reject', function () {
	        location.href = '/';
	      });
	    }
	  }, {
	    key: "initValidator",
	    value: function initValidator() {
	      new src_3(this.getFormValidators());
	    }
	  }, {
	    key: "destroy",
	    value: function destroy() {
	      delete this.app;
	      delete this.form;
	      delete this.validator;
	      this.setOptions(null);
	      this.setWorking(null);
	      this.setData(null);
	    }
	  }, {
	    key: "initFields",
	    value: function initFields(_ref3) {
	      var manifest = _ref3.manifest,
	          action = _ref3.action,
	          _ref3$options = _ref3.options,
	          options = _ref3$options === void 0 ? {} : _ref3$options,
	          _ref3$data = _ref3.data,
	          data = _ref3$data === void 0 ? null : _ref3$data;

	      if (notCommon.objHas(manifest, 'fields')) {
	        _classPrivateFieldGet(this, _fields).import(manifest.fields);
	      }

	      if (typeof options === 'undefined' || options === null) {
	        options = {};
	      }

	      if (manifest.actions[action] && manifest.actions[action].fields) {
	        this.actionFieldsInit(manifest.actions[action].fields, options, data);
	      }

	      return {
	        title: manifest.actions[action].title,
	        description: manifest.actions[action].description,
	        fields: manifest.actions[action].fields,
	        options: options
	      };
	    }
	  }, {
	    key: "getName",
	    value: function getName() {
	      return this.getWorking('name');
	    }
	  }, {
	    key: "getFrameTargetEl",
	    value: function getFrameTargetEl() {
	      return document.querySelector(this.getWorking('target', DEFAULT_CONTAINER_SELECTOR));
	    }
	  }, {
	    key: "getFormTargetEl",
	    value: function getFormTargetEl() {
	      return document.querySelector(this.getWorking('formTarget', DEFAULT_CONTAINER_SELECTOR));
	    }
	  }, {
	    key: "getFormValidators",
	    value: function getFormValidators() {
	      _classPrivateMethodGet(this, _missingOverrideWarning, _missingOverrideWarning2).call(this, 'validators');

	      return {};
	    }
	  }, {
	    key: "getFormManifest",
	    value: function getFormManifest() {
	      _classPrivateMethodGet(this, _missingOverrideWarning, _missingOverrideWarning2).call(this, 'manifest');

	      return {};
	    }
	  }, {
	    key: "getFormData",
	    value: function getFormData() {
	      _classPrivateMethodGet(this, _missingOverrideWarning, _missingOverrideWarning2).call(this, 'data');

	      return {};
	    }
	  }, {
	    key: "getFormAction",
	    value: function getFormAction() {
	      return _classPrivateFieldGet(this, _action);
	    }
	  }, {
	    key: "setAction",
	    value: function setAction(val) {
	      if (val !== _classPrivateFieldGet(this, _action)) {
	        _classPrivateFieldSet(this, _action, val);

	        this.form.$destroy();
	        this.initFormModeAction();
	      }
	    }
	  }, {
	    key: "processResult",
	    value: function processResult(result) {
	      if (result.status === DEFAULT_STATUS_SUCCESS) {
	        this.frame.$set({
	          status: DEFAULT_STATUS_SUCCESS,
	          message: result.message
	        });
	        this.form.showSuccess(); //move success
	      } else {
	        this.setFormErrors(result);
	      }
	    }
	  }, {
	    key: "setFormErrors",
	    value: function setFormErrors(result) {
	      var status = {
	        form: [],
	        fields: {}
	      };

	      if (result.message) {
	        result.form.push(result.message);
	      }

	      if (result.errors && Object.keys(result.errors).length > 0) {
	        result.errors = _objectSpread2({}, result.errors);
	      }

	      this.form.updateFormValidationStatus(status);
	    }
	  }, {
	    key: "getVariantTitle",
	    value: function getVariantTitle(name, id) {
	      var lib = _classPrivateFieldGet(this, _variants).get(name);

	      var result = lib.filter(function (item) {
	        return item.id === id;
	      });
	      return result.length === 1 ? result[0] : DEFAULT_VARIANT_NAME;
	    }
	  }]);

	  return notForm;
	}(notBase);

	function _missingOverrideWarning2(missing) {
	  this.error("".concat(missing, " for ").concat(this.getWorking('name'), " form is not defined"));
	}

	/* src/frame/components/breadcrumbs/ui.breadcrumbs.svelte generated by Svelte v3.44.3 */

	function get_each_context$d(ctx, list, i) {
		const child_ctx = ctx.slice();
		child_ctx[5] = list[i];
		child_ctx[7] = i;
		return child_ctx;
	}

	// (29:4) {:else}
	function create_else_block$q(ctx) {
		let li;
		let a;
		let t_value = /*$LOCALE*/ ctx[2][/*link*/ ctx[5].title] + "";
		let t;
		let a_href_value;
		let a_data_href_value;
		let mounted;
		let dispose;

		return {
			c() {
				li = element("li");
				a = element("a");
				t = text(t_value);
				attr(a, "href", a_href_value = "" + (/*root*/ ctx[0] + /*link*/ ctx[5].url));
				attr(a, "data-href", a_data_href_value = /*link*/ ctx[5].url);
			},
			m(target, anchor) {
				insert(target, li, anchor);
				append(li, a);
				append(a, t);

				if (!mounted) {
					dispose = listen(a, "click", /*onClick*/ ctx[3]);
					mounted = true;
				}
			},
			p(ctx, dirty) {
				if (dirty & /*$LOCALE, items*/ 6 && t_value !== (t_value = /*$LOCALE*/ ctx[2][/*link*/ ctx[5].title] + "")) set_data(t, t_value);

				if (dirty & /*root, items*/ 3 && a_href_value !== (a_href_value = "" + (/*root*/ ctx[0] + /*link*/ ctx[5].url))) {
					attr(a, "href", a_href_value);
				}

				if (dirty & /*items*/ 2 && a_data_href_value !== (a_data_href_value = /*link*/ ctx[5].url)) {
					attr(a, "data-href", a_data_href_value);
				}
			},
			d(detaching) {
				if (detaching) detach(li);
				mounted = false;
				dispose();
			}
		};
	}

	// (27:4) {#if link.url === false }
	function create_if_block_1$q(ctx) {
		let li;
		let t_value = /*$LOCALE*/ ctx[2][/*link*/ ctx[5].title] + "";
		let t;

		return {
			c() {
				li = element("li");
				t = text(t_value);
				attr(li, "class", "is-plain-crumb");
			},
			m(target, anchor) {
				insert(target, li, anchor);
				append(li, t);
			},
			p(ctx, dirty) {
				if (dirty & /*$LOCALE, items*/ 6 && t_value !== (t_value = /*$LOCALE*/ ctx[2][/*link*/ ctx[5].title] + "")) set_data(t, t_value);
			},
			d(detaching) {
				if (detaching) detach(li);
			}
		};
	}

	// (24:4) {#if (items.length === (index + 1)) }
	function create_if_block$z(ctx) {
		let li;
		let a;
		let t_value = /*$LOCALE*/ ctx[2][/*link*/ ctx[5].title] + "";
		let t;
		let a_href_value;
		let a_data_href_value;

		return {
			c() {
				li = element("li");
				a = element("a");
				t = text(t_value);
				attr(a, "href", a_href_value = "" + (/*root*/ ctx[0] + /*link*/ ctx[5].url));
				attr(a, "data-href", a_data_href_value = /*link*/ ctx[5].url);
				attr(a, "aria-current", "page");
				attr(li, "class", "is-active");
			},
			m(target, anchor) {
				insert(target, li, anchor);
				append(li, a);
				append(a, t);
			},
			p(ctx, dirty) {
				if (dirty & /*$LOCALE, items*/ 6 && t_value !== (t_value = /*$LOCALE*/ ctx[2][/*link*/ ctx[5].title] + "")) set_data(t, t_value);

				if (dirty & /*root, items*/ 3 && a_href_value !== (a_href_value = "" + (/*root*/ ctx[0] + /*link*/ ctx[5].url))) {
					attr(a, "href", a_href_value);
				}

				if (dirty & /*items*/ 2 && a_data_href_value !== (a_data_href_value = /*link*/ ctx[5].url)) {
					attr(a, "data-href", a_data_href_value);
				}
			},
			d(detaching) {
				if (detaching) detach(li);
			}
		};
	}

	// (23:4) {#each items as link, index}
	function create_each_block$d(ctx) {
		let if_block_anchor;

		function select_block_type(ctx, dirty) {
			if (/*items*/ ctx[1].length === /*index*/ ctx[7] + 1) return create_if_block$z;
			if (/*link*/ ctx[5].url === false) return create_if_block_1$q;
			return create_else_block$q;
		}

		let current_block_type = select_block_type(ctx);
		let if_block = current_block_type(ctx);

		return {
			c() {
				if_block.c();
				if_block_anchor = empty();
			},
			m(target, anchor) {
				if_block.m(target, anchor);
				insert(target, if_block_anchor, anchor);
			},
			p(ctx, dirty) {
				if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block.d(1);
					if_block = current_block_type(ctx);

					if (if_block) {
						if_block.c();
						if_block.m(if_block_anchor.parentNode, if_block_anchor);
					}
				}
			},
			d(detaching) {
				if_block.d(detaching);
				if (detaching) detach(if_block_anchor);
			}
		};
	}

	function create_fragment$R(ctx) {
		let nav;
		let ul;
		let each_value = /*items*/ ctx[1];
		let each_blocks = [];

		for (let i = 0; i < each_value.length; i += 1) {
			each_blocks[i] = create_each_block$d(get_each_context$d(ctx, each_value, i));
		}

		return {
			c() {
				nav = element("nav");
				ul = element("ul");

				for (let i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].c();
				}

				attr(nav, "class", "breadcrumb");
				attr(nav, "aria-label", "breadcrumbs");
			},
			m(target, anchor) {
				insert(target, nav, anchor);
				append(nav, ul);

				for (let i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].m(ul, null);
				}
			},
			p(ctx, [dirty]) {
				if (dirty & /*root, items, $LOCALE, onClick*/ 15) {
					each_value = /*items*/ ctx[1];
					let i;

					for (i = 0; i < each_value.length; i += 1) {
						const child_ctx = get_each_context$d(ctx, each_value, i);

						if (each_blocks[i]) {
							each_blocks[i].p(child_ctx, dirty);
						} else {
							each_blocks[i] = create_each_block$d(child_ctx);
							each_blocks[i].c();
							each_blocks[i].m(ul, null);
						}
					}

					for (; i < each_blocks.length; i += 1) {
						each_blocks[i].d(1);
					}

					each_blocks.length = each_value.length;
				}
			},
			i: noop,
			o: noop,
			d(detaching) {
				if (detaching) detach(nav);
				destroy_each(each_blocks, detaching);
			}
		};
	}

	function instance$R($$self, $$props, $$invalidate) {
		let $LOCALE;
		component_subscribe($$self, LOCALE, $$value => $$invalidate(2, $LOCALE = $$value));
		let { root = '' } = $$props;
		let { items = [] } = $$props;
		let { go = null } = $$props;

		function onClick(ev) {
			if (typeof go === 'function') {
				ev.preventDefault();
				go(ev.currentTarget.dataset.href);
				return false;
			} else {
				return true;
			}
		}

		$$self.$$set = $$props => {
			if ('root' in $$props) $$invalidate(0, root = $$props.root);
			if ('items' in $$props) $$invalidate(1, items = $$props.items);
			if ('go' in $$props) $$invalidate(4, go = $$props.go);
		};

		return [root, items, $LOCALE, onClick, go];
	}

	class Ui_breadcrumbs extends SvelteComponent {
		constructor(options) {
			super();
			init(this, options, instance$R, create_fragment$R, safe_not_equal, { root: 0, items: 1, go: 4 });
		}
	}

	var Breadcrumbs = /*#__PURE__*/function () {
	  function Breadcrumbs() {
	    _classCallCheck(this, Breadcrumbs);
	  }

	  _createClass(Breadcrumbs, null, [{
	    key: "render",
	    value: function render(_ref) {
	      var target = _ref.target,
	          _ref$root = _ref.root,
	          root = _ref$root === void 0 ? '' : _ref$root,
	          navigate = _ref.navigate;
	      this.remove();

	      if (Breadcrumbs.UIConstructor) {
	        this.ui = new Breadcrumbs.UIConstructor({
	          target: target,
	          props: {
	            items: this.getBreadcrumbs(),
	            root: root,
	            go: navigate
	          }
	        });
	      }
	    }
	  }, {
	    key: "setHead",
	    value: function setHead(head) {
	      var _this$head;

	      (_this$head = this.head).splice.apply(_this$head, [0, this.head.length].concat(_toConsumableArray(head)));

	      return this;
	    }
	  }, {
	    key: "setTail",
	    value: function setTail(tail) {
	      var _this$tail;

	      (_this$tail = this.tail).splice.apply(_this$tail, [0, this.tail.length].concat(_toConsumableArray(tail)));

	      return this;
	    }
	  }, {
	    key: "getBreadcrumbs",
	    value: function getBreadcrumbs() {
	      var crumbs = [];
	      crumbs.push.apply(crumbs, _toConsumableArray(this.head));
	      crumbs.push.apply(crumbs, _toConsumableArray(this.tail));
	      return crumbs;
	    }
	  }, {
	    key: "update",
	    value: function update() {
	      if (this.ui) {
	        this.ui.$set({
	          items: this.getBreadcrumbs()
	        });
	      }
	    }
	  }, {
	    key: "remove",
	    value: function remove() {
	      if (this.ui) {
	        this.ui.$destroy();
	        this.ui = null;
	      }

	      return this;
	    }
	  }]);

	  return Breadcrumbs;
	}();

	_defineProperty(Breadcrumbs, "UIConstructor", null);

	_defineProperty(Breadcrumbs, "ui", null);

	_defineProperty(Breadcrumbs, "head", []);

	_defineProperty(Breadcrumbs, "tail", []);

	Breadcrumbs.UIConstructor = Ui_breadcrumbs;

	/* src/elements/notification/ui.cookie.notification.svelte generated by Svelte v3.44.3 */

	function create_if_block$y(ctx) {
		let div;
		let p;
		let t0_value = /*$LOCALE*/ ctx[3][/*message*/ ctx[1]] + "";
		let t0;
		let t1;
		let button;
		let t2_value = /*$LOCALE*/ ctx[3][/*agree*/ ctx[2]] + "";
		let t2;
		let mounted;
		let dispose;

		return {
			c() {
				div = element("div");
				p = element("p");
				t0 = text(t0_value);
				t1 = space();
				button = element("button");
				t2 = text(t2_value);
				attr(p, "class", "svelte-19d5xat");
				attr(button, "class", "button is-success cookie_accept svelte-19d5xat");
				attr(div, "id", "cookie_notification");
				attr(div, "class", "svelte-19d5xat");
			},
			m(target, anchor) {
				insert(target, div, anchor);
				append(div, p);
				append(p, t0);
				append(div, t1);
				append(div, button);
				append(button, t2);

				if (!mounted) {
					dispose = listen(button, "click", /*accept*/ ctx[4]);
					mounted = true;
				}
			},
			p(ctx, dirty) {
				if (dirty & /*$LOCALE, message*/ 10 && t0_value !== (t0_value = /*$LOCALE*/ ctx[3][/*message*/ ctx[1]] + "")) set_data(t0, t0_value);
				if (dirty & /*$LOCALE, agree*/ 12 && t2_value !== (t2_value = /*$LOCALE*/ ctx[3][/*agree*/ ctx[2]] + "")) set_data(t2, t2_value);
			},
			d(detaching) {
				if (detaching) detach(div);
				mounted = false;
				dispose();
			}
		};
	}

	function create_fragment$Q(ctx) {
		let if_block_anchor;
		let if_block = /*show*/ ctx[0] && create_if_block$y(ctx);

		return {
			c() {
				if (if_block) if_block.c();
				if_block_anchor = empty();
			},
			m(target, anchor) {
				if (if_block) if_block.m(target, anchor);
				insert(target, if_block_anchor, anchor);
			},
			p(ctx, [dirty]) {
				if (/*show*/ ctx[0]) {
					if (if_block) {
						if_block.p(ctx, dirty);
					} else {
						if_block = create_if_block$y(ctx);
						if_block.c();
						if_block.m(if_block_anchor.parentNode, if_block_anchor);
					}
				} else if (if_block) {
					if_block.d(1);
					if_block = null;
				}
			},
			i: noop,
			o: noop,
			d(detaching) {
				if (if_block) if_block.d(detaching);
				if (detaching) detach(if_block_anchor);
			}
		};
	}

	function instance$Q($$self, $$props, $$invalidate) {
		let $LOCALE;
		component_subscribe($$self, LOCALE, $$value => $$invalidate(3, $LOCALE = $$value));
		let { show = false } = $$props;
		let { message = 'ÐÐ»Ñ ÑÐ»ÑÑÑÐµÐ½Ð¸Ñ ÑÐ°Ð±Ð¾ÑÑ ÑÐ°Ð¹ÑÐ° Ð¸ ÐµÐ³Ð¾ Ð²Ð·Ð°Ð¸Ð¼Ð¾Ð´ÐµÐ¹ÑÑÐ²Ð¸Ñ Ñ Ð¿Ð¾Ð»ÑÐ·Ð¾Ð²Ð°ÑÐµÐ»ÑÐ¼Ð¸ Ð¼Ñ Ð¸ÑÐ¿Ð¾Ð»ÑÐ·ÑÐµÐ¼ ÑÐ°Ð¹Ð»Ñ cookie. ÐÑÐ¾Ð´Ð¾Ð»Ð¶Ð°Ñ ÑÐ°Ð±Ð¾ÑÑ Ñ ÑÐ°Ð¹ÑÐ¾Ð¼, ÐÑ ÑÐ°Ð·ÑÐµÑÐ°ÐµÑÐµ Ð¸ÑÐ¿Ð¾Ð»ÑÐ·Ð¾Ð²Ð°Ð½Ð¸Ðµ cookie-ÑÐ°Ð¹Ð»Ð¾Ð². ÐÑ Ð²ÑÐµÐ³Ð´Ð° Ð¼Ð¾Ð¶ÐµÑÐµ Ð¾ÑÐºÐ»ÑÑÐ¸ÑÑ ÑÐ°Ð¹Ð»Ñ cookie Ð² Ð½Ð°ÑÑÑÐ¾Ð¹ÐºÐ°Ñ ÐÐ°ÑÐµÐ³Ð¾ Ð±ÑÐ°ÑÐ·ÐµÑÐ°.' } = $$props;
		let { agree = 'Ð¥Ð¾ÑÐ¾ÑÐ¾' } = $$props;

		onMount(() => {
			let cookieDate = localStorage.getItem('cookie_date');

			if (!cookieDate || +cookieDate + 31536000000 < Date.now()) {
				$$invalidate(0, show = true);
			}
		});

		function accept() {
			localStorage.setItem('cookie_date', Date.now());
			$$invalidate(0, show = false);
		}

		$$self.$$set = $$props => {
			if ('show' in $$props) $$invalidate(0, show = $$props.show);
			if ('message' in $$props) $$invalidate(1, message = $$props.message);
			if ('agree' in $$props) $$invalidate(2, agree = $$props.agree);
		};

		return [show, message, agree, $LOCALE, accept];
	}

	class Ui_cookie_notification extends SvelteComponent {
		constructor(options) {
			super();
			init(this, options, instance$Q, create_fragment$Q, safe_not_equal, { show: 0, message: 1, agree: 2 });
		}
	}

	var index$6 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		UIError: Ui_error,
		UISuccess: Ui_success,
		UICookieNotification: Ui_cookie_notification
	});

	var $findIndex = arrayIteration.findIndex;


	var FIND_INDEX = 'findIndex';
	var SKIPS_HOLES = true;

	// Shouldn't skip holes
	if (FIND_INDEX in []) Array(1)[FIND_INDEX](function () { SKIPS_HOLES = false; });

	// `Array.prototype.findIndex` method
	// https://tc39.es/ecma262/#sec-array.prototype.findindex
	_export({ target: 'Array', proto: true, forced: SKIPS_HOLES }, {
	  findIndex: function findIndex(callbackfn /* , that = undefined */) {
	    return $findIndex(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});

	// https://tc39.es/ecma262/#sec-array.prototype-@@unscopables
	addToUnscopables(FIND_INDEX);

	var floor = Math.floor;

	var mergeSort = function (array, comparefn) {
	  var length = array.length;
	  var middle = floor(length / 2);
	  return length < 8 ? insertionSort(array, comparefn) : merge(
	    array,
	    mergeSort(arraySliceSimple(array, 0, middle), comparefn),
	    mergeSort(arraySliceSimple(array, middle), comparefn),
	    comparefn
	  );
	};

	var insertionSort = function (array, comparefn) {
	  var length = array.length;
	  var i = 1;
	  var element, j;

	  while (i < length) {
	    j = i;
	    element = array[i];
	    while (j && comparefn(array[j - 1], element) > 0) {
	      array[j] = array[--j];
	    }
	    if (j !== i++) array[j] = element;
	  } return array;
	};

	var merge = function (array, left, right, comparefn) {
	  var llength = left.length;
	  var rlength = right.length;
	  var lindex = 0;
	  var rindex = 0;

	  while (lindex < llength || rindex < rlength) {
	    array[lindex + rindex] = (lindex < llength && rindex < rlength)
	      ? comparefn(left[lindex], right[rindex]) <= 0 ? left[lindex++] : right[rindex++]
	      : lindex < llength ? left[lindex++] : right[rindex++];
	  } return array;
	};

	var arraySort = mergeSort;

	var firefox = engineUserAgent.match(/firefox\/(\d+)/i);

	var engineFfVersion = !!firefox && +firefox[1];

	var engineIsIeOrEdge = /MSIE|Trident/.test(engineUserAgent);

	var webkit = engineUserAgent.match(/AppleWebKit\/(\d+)\./);

	var engineWebkitVersion = !!webkit && +webkit[1];

	var test = [];
	var un$Sort = functionUncurryThis(test.sort);
	var push = functionUncurryThis(test.push);

	// IE8-
	var FAILS_ON_UNDEFINED = fails(function () {
	  test.sort(undefined);
	});
	// V8 bug
	var FAILS_ON_NULL = fails(function () {
	  test.sort(null);
	});
	// Old WebKit
	var STRICT_METHOD = arrayMethodIsStrict('sort');

	var STABLE_SORT = !fails(function () {
	  // feature detection can be too slow, so check engines versions
	  if (engineV8Version) return engineV8Version < 70;
	  if (engineFfVersion && engineFfVersion > 3) return;
	  if (engineIsIeOrEdge) return true;
	  if (engineWebkitVersion) return engineWebkitVersion < 603;

	  var result = '';
	  var code, chr, value, index;

	  // generate an array with more 512 elements (Chakra and old V8 fails only in this case)
	  for (code = 65; code < 76; code++) {
	    chr = String.fromCharCode(code);

	    switch (code) {
	      case 66: case 69: case 70: case 72: value = 3; break;
	      case 68: case 71: value = 4; break;
	      default: value = 2;
	    }

	    for (index = 0; index < 47; index++) {
	      test.push({ k: chr + index, v: value });
	    }
	  }

	  test.sort(function (a, b) { return b.v - a.v; });

	  for (index = 0; index < test.length; index++) {
	    chr = test[index].k.charAt(0);
	    if (result.charAt(result.length - 1) !== chr) result += chr;
	  }

	  return result !== 'DGBEFHACIJK';
	});

	var FORCED = FAILS_ON_UNDEFINED || !FAILS_ON_NULL || !STRICT_METHOD || !STABLE_SORT;

	var getSortCompare = function (comparefn) {
	  return function (x, y) {
	    if (y === undefined) return -1;
	    if (x === undefined) return 1;
	    if (comparefn !== undefined) return +comparefn(x, y) || 0;
	    return toString_1(x) > toString_1(y) ? 1 : -1;
	  };
	};

	// `Array.prototype.sort` method
	// https://tc39.es/ecma262/#sec-array.prototype.sort
	_export({ target: 'Array', proto: true, forced: FORCED }, {
	  sort: function sort(comparefn) {
	    if (comparefn !== undefined) aCallable(comparefn);

	    var array = toObject(this);

	    if (STABLE_SORT) return comparefn === undefined ? un$Sort(array) : un$Sort(array, comparefn);

	    var items = [];
	    var arrayLength = lengthOfArrayLike(array);
	    var itemsLength, index;

	    for (index = 0; index < arrayLength; index++) {
	      if (index in array) push(items, array[index]);
	    }

	    arraySort(items, getSortCompare(comparefn));

	    itemsLength = items.length;
	    index = 0;

	    while (index < itemsLength) array[index] = items[index++];
	    while (index < arrayLength) delete array[index++];

	    return array;
	  }
	});

	var ALL = {};

	function exist(key) {
	  return Object.prototype.hasOwnProperty.call(ALL, key);
	}

	function get(key) {
	  if (exist(key)) {
	    return ALL[key];
	  } else {
	    return false;
	  }
	}

	function create(key) {
	  var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
	    'raw': [],
	    'filtered': [],
	    'selected': {}
	  };

	  if (!exist(key)) {
	    if (Object.keys(props).length > 0) {
	      ALL[key] = {};
	      Object.keys(props).forEach(function (name) {
	        ALL[key][name] = writable(props[name]);
	      });
	    } else {
	      throw new Error('store\'s props wasn\'t specified');
	    }
	  }

	  return ALL[key];
	}

	/* src/frame/components/table/controls/ui.switch.svelte generated by Svelte v3.44.3 */

	function create_fragment$P(ctx) {
		let input;
		let input_class_value;
		let input_id_value;
		let t;
		let label;
		let label_for_value;
		let mounted;
		let dispose;

		return {
			c() {
				input = element("input");
				t = space();
				label = element("label");
				attr(input, "type", "checkbox");
				attr(input, "class", input_class_value = "switch " + /*styling*/ ctx[5]);
				attr(input, "id", input_id_value = "edit-table-row-cell-inline-switch-" + /*fieldname*/ ctx[2] + "-" + /*id*/ ctx[1]);
				attr(input, "name", /*fieldname*/ ctx[2]);
				input.readOnly = /*readonly*/ ctx[4];
				input.disabled = /*disabled*/ ctx[3];
				attr(label, "class", "label");
				attr(label, "for", label_for_value = "edit-table-row-cell-inline-switch-" + /*fieldname*/ ctx[2] + "-" + /*id*/ ctx[1]);
			},
			m(target, anchor) {
				insert(target, input, anchor);
				input.checked = /*value*/ ctx[0];
				insert(target, t, anchor);
				insert(target, label, anchor);

				if (!mounted) {
					dispose = [
						listen(input, "change", /*input_change_handler*/ ctx[7]),
						listen(input, "input", /*onInput*/ ctx[6])
					];

					mounted = true;
				}
			},
			p(ctx, [dirty]) {
				if (dirty & /*styling*/ 32 && input_class_value !== (input_class_value = "switch " + /*styling*/ ctx[5])) {
					attr(input, "class", input_class_value);
				}

				if (dirty & /*fieldname, id*/ 6 && input_id_value !== (input_id_value = "edit-table-row-cell-inline-switch-" + /*fieldname*/ ctx[2] + "-" + /*id*/ ctx[1])) {
					attr(input, "id", input_id_value);
				}

				if (dirty & /*fieldname*/ 4) {
					attr(input, "name", /*fieldname*/ ctx[2]);
				}

				if (dirty & /*readonly*/ 16) {
					input.readOnly = /*readonly*/ ctx[4];
				}

				if (dirty & /*disabled*/ 8) {
					input.disabled = /*disabled*/ ctx[3];
				}

				if (dirty & /*value*/ 1) {
					input.checked = /*value*/ ctx[0];
				}

				if (dirty & /*fieldname, id*/ 6 && label_for_value !== (label_for_value = "edit-table-row-cell-inline-switch-" + /*fieldname*/ ctx[2] + "-" + /*id*/ ctx[1])) {
					attr(label, "for", label_for_value);
				}
			},
			i: noop,
			o: noop,
			d(detaching) {
				if (detaching) detach(input);
				if (detaching) detach(t);
				if (detaching) detach(label);
				mounted = false;
				run_all(dispose);
			}
		};
	}

	function instance$P($$self, $$props, $$invalidate) {
		let dispatch = createEventDispatcher();
		let { id = '' } = $$props;
		let { value = false } = $$props;
		let { fieldname = 'switch' } = $$props;
		let { disabled = false } = $$props;
		let { readonly = false } = $$props;
		let { styling = " is-rounded is-success " } = $$props;

		function onInput(ev) {
			let data = {
				id,
				field: fieldname,
				value: ev.target.type === 'checkbox'
				? ev.target.checked
				: ev.target.value
			};

			dispatch('change', data);
			return true;
		}

		function input_change_handler() {
			value = this.checked;
			$$invalidate(0, value);
		}

		$$self.$$set = $$props => {
			if ('id' in $$props) $$invalidate(1, id = $$props.id);
			if ('value' in $$props) $$invalidate(0, value = $$props.value);
			if ('fieldname' in $$props) $$invalidate(2, fieldname = $$props.fieldname);
			if ('disabled' in $$props) $$invalidate(3, disabled = $$props.disabled);
			if ('readonly' in $$props) $$invalidate(4, readonly = $$props.readonly);
			if ('styling' in $$props) $$invalidate(5, styling = $$props.styling);
		};

		return [
			value,
			id,
			fieldname,
			disabled,
			readonly,
			styling,
			onInput,
			input_change_handler
		];
	}

	class Ui_switch$1 extends SvelteComponent {
		constructor(options) {
			super();

			init(this, options, instance$P, create_fragment$P, safe_not_equal, {
				id: 1,
				value: 0,
				fieldname: 2,
				disabled: 3,
				readonly: 4,
				styling: 5
			});
		}
	}

	/* src/frame/components/table/controls/ui.tags.svelte generated by Svelte v3.44.3 */

	function get_each_context$c(ctx, list, i) {
		const child_ctx = ctx.slice();
		child_ctx[1] = list[i];
		return child_ctx;
	}

	// (31:0) {:else}
	function create_else_block_1$2(ctx) {
		let span;
		let t;
		let span_class_value;

		function select_block_type_2(ctx, dirty) {
			if (/*item*/ ctx[1].url) return create_if_block_2$i;
			return create_else_block_2$1;
		}

		let current_block_type = select_block_type_2(ctx);
		let if_block = current_block_type(ctx);

		return {
			c() {
				span = element("span");
				if_block.c();
				t = space();
				attr(span, "class", span_class_value = "mx-1 tag is-" + /*item*/ ctx[1].color + " " + /*item*/ ctx[1].customClasses + " svelte-9c4k6c");
			},
			m(target, anchor) {
				insert(target, span, anchor);
				if_block.m(span, null);
				append(span, t);
			},
			p(ctx, dirty) {
				if (current_block_type === (current_block_type = select_block_type_2(ctx)) && if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block.d(1);
					if_block = current_block_type(ctx);

					if (if_block) {
						if_block.c();
						if_block.m(span, t);
					}
				}

				if (dirty & /*values*/ 1 && span_class_value !== (span_class_value = "mx-1 tag is-" + /*item*/ ctx[1].color + " " + /*item*/ ctx[1].customClasses + " svelte-9c4k6c")) {
					attr(span, "class", span_class_value);
				}
			},
			d(detaching) {
				if (detaching) detach(span);
				if_block.d();
			}
		};
	}

	// (20:0) {#if Object.prototype.hasOwnProperty.call(item, 'value') }
	function create_if_block$x(ctx) {
		let div;
		let span0;
		let t0_value = /*item*/ ctx[1].title + "";
		let t0;
		let t1;
		let span1;
		let span1_class_value;
		let t2;

		function select_block_type_1(ctx, dirty) {
			if (/*item*/ ctx[1].url) return create_if_block_1$p;
			return create_else_block$p;
		}

		let current_block_type = select_block_type_1(ctx);
		let if_block = current_block_type(ctx);

		return {
			c() {
				div = element("div");
				span0 = element("span");
				t0 = text(t0_value);
				t1 = space();
				span1 = element("span");
				if_block.c();
				t2 = space();
				attr(span0, "class", "tag");
				attr(span1, "class", span1_class_value = "tag is-" + /*item*/ ctx[1].color + " " + /*item*/ ctx[1].customClasses + " svelte-9c4k6c");
				attr(div, "class", "mx-1 tags has-addons svelte-9c4k6c");
			},
			m(target, anchor) {
				insert(target, div, anchor);
				append(div, span0);
				append(span0, t0);
				append(div, t1);
				append(div, span1);
				if_block.m(span1, null);
				append(div, t2);
			},
			p(ctx, dirty) {
				if (dirty & /*values*/ 1 && t0_value !== (t0_value = /*item*/ ctx[1].title + "")) set_data(t0, t0_value);

				if (current_block_type === (current_block_type = select_block_type_1(ctx)) && if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block.d(1);
					if_block = current_block_type(ctx);

					if (if_block) {
						if_block.c();
						if_block.m(span1, null);
					}
				}

				if (dirty & /*values*/ 1 && span1_class_value !== (span1_class_value = "tag is-" + /*item*/ ctx[1].color + " " + /*item*/ ctx[1].customClasses + " svelte-9c4k6c")) {
					attr(span1, "class", span1_class_value);
				}
			},
			d(detaching) {
				if (detaching) detach(div);
				if_block.d();
			}
		};
	}

	// (35:4) {:else}
	function create_else_block_2$1(ctx) {
		let t_value = /*item*/ ctx[1].title + "";
		let t;

		return {
			c() {
				t = text(t_value);
			},
			m(target, anchor) {
				insert(target, t, anchor);
			},
			p(ctx, dirty) {
				if (dirty & /*values*/ 1 && t_value !== (t_value = /*item*/ ctx[1].title + "")) set_data(t, t_value);
			},
			d(detaching) {
				if (detaching) detach(t);
			}
		};
	}

	// (33:4) {#if item.url }
	function create_if_block_2$i(ctx) {
		let a;
		let t_value = /*item*/ ctx[1].title + "";
		let t;
		let a_href_value;
		let a_class_value;

		return {
			c() {
				a = element("a");
				t = text(t_value);
				attr(a, "href", a_href_value = /*item*/ ctx[1].url);
				attr(a, "class", a_class_value = "" + (null_to_empty(/*item*/ ctx[1].urlCustomClasses) + " svelte-9c4k6c"));
			},
			m(target, anchor) {
				insert(target, a, anchor);
				append(a, t);
			},
			p(ctx, dirty) {
				if (dirty & /*values*/ 1 && t_value !== (t_value = /*item*/ ctx[1].title + "")) set_data(t, t_value);

				if (dirty & /*values*/ 1 && a_href_value !== (a_href_value = /*item*/ ctx[1].url)) {
					attr(a, "href", a_href_value);
				}

				if (dirty & /*values*/ 1 && a_class_value !== (a_class_value = "" + (null_to_empty(/*item*/ ctx[1].urlCustomClasses) + " svelte-9c4k6c"))) {
					attr(a, "class", a_class_value);
				}
			},
			d(detaching) {
				if (detaching) detach(a);
			}
		};
	}

	// (26:6) {:else}
	function create_else_block$p(ctx) {
		let t_value = /*item*/ ctx[1].value + "";
		let t;

		return {
			c() {
				t = text(t_value);
			},
			m(target, anchor) {
				insert(target, t, anchor);
			},
			p(ctx, dirty) {
				if (dirty & /*values*/ 1 && t_value !== (t_value = /*item*/ ctx[1].value + "")) set_data(t, t_value);
			},
			d(detaching) {
				if (detaching) detach(t);
			}
		};
	}

	// (24:6) {#if item.url }
	function create_if_block_1$p(ctx) {
		let a;
		let t_value = /*item*/ ctx[1].value + "";
		let t;
		let a_href_value;
		let a_class_value;

		return {
			c() {
				a = element("a");
				t = text(t_value);
				attr(a, "href", a_href_value = /*item*/ ctx[1].url);
				attr(a, "class", a_class_value = "" + (null_to_empty(/*item*/ ctx[1].urlCustomClasses) + " svelte-9c4k6c"));
			},
			m(target, anchor) {
				insert(target, a, anchor);
				append(a, t);
			},
			p(ctx, dirty) {
				if (dirty & /*values*/ 1 && t_value !== (t_value = /*item*/ ctx[1].value + "")) set_data(t, t_value);

				if (dirty & /*values*/ 1 && a_href_value !== (a_href_value = /*item*/ ctx[1].url)) {
					attr(a, "href", a_href_value);
				}

				if (dirty & /*values*/ 1 && a_class_value !== (a_class_value = "" + (null_to_empty(/*item*/ ctx[1].urlCustomClasses) + " svelte-9c4k6c"))) {
					attr(a, "class", a_class_value);
				}
			},
			d(detaching) {
				if (detaching) detach(a);
			}
		};
	}

	// (19:0) {#each values as item (item.id)}
	function create_each_block$c(key_1, ctx) {
		let first;
		let show_if;
		let if_block_anchor;

		function select_block_type(ctx, dirty) {
			if (show_if == null || dirty & /*values*/ 1) show_if = !!Object.prototype.hasOwnProperty.call(/*item*/ ctx[1], 'value');
			if (show_if) return create_if_block$x;
			return create_else_block_1$2;
		}

		let current_block_type = select_block_type(ctx, -1);
		let if_block = current_block_type(ctx);

		return {
			key: key_1,
			first: null,
			c() {
				first = empty();
				if_block.c();
				if_block_anchor = empty();
				this.first = first;
			},
			m(target, anchor) {
				insert(target, first, anchor);
				if_block.m(target, anchor);
				insert(target, if_block_anchor, anchor);
			},
			p(new_ctx, dirty) {
				ctx = new_ctx;

				if (current_block_type === (current_block_type = select_block_type(ctx, dirty)) && if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block.d(1);
					if_block = current_block_type(ctx);

					if (if_block) {
						if_block.c();
						if_block.m(if_block_anchor.parentNode, if_block_anchor);
					}
				}
			},
			d(detaching) {
				if (detaching) detach(first);
				if_block.d(detaching);
				if (detaching) detach(if_block_anchor);
			}
		};
	}

	function create_fragment$O(ctx) {
		let each_blocks = [];
		let each_1_lookup = new Map();
		let each_1_anchor;
		let each_value = /*values*/ ctx[0];
		const get_key = ctx => /*item*/ ctx[1].id;

		for (let i = 0; i < each_value.length; i += 1) {
			let child_ctx = get_each_context$c(ctx, each_value, i);
			let key = get_key(child_ctx);
			each_1_lookup.set(key, each_blocks[i] = create_each_block$c(key, child_ctx));
		}

		return {
			c() {
				for (let i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].c();
				}

				each_1_anchor = empty();
			},
			m(target, anchor) {
				for (let i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].m(target, anchor);
				}

				insert(target, each_1_anchor, anchor);
			},
			p(ctx, [dirty]) {
				if (dirty & /*values, Object*/ 1) {
					each_value = /*values*/ ctx[0];
					each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, each_1_anchor.parentNode, destroy_block, create_each_block$c, each_1_anchor, get_each_context$c);
				}
			},
			i: noop,
			o: noop,
			d(detaching) {
				for (let i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].d(detaching);
				}

				if (detaching) detach(each_1_anchor);
			}
		};
	}

	function instance$O($$self, $$props, $$invalidate) {
		let { values = [] } = $$props;

		$$self.$$set = $$props => {
			if ('values' in $$props) $$invalidate(0, values = $$props.values);
		};

		return [values];
	}

	class Ui_tags extends SvelteComponent {
		constructor(options) {
			super();
			init(this, options, instance$O, create_fragment$O, safe_not_equal, { values: 0 });
		}
	}

	/* src/frame/components/table/notTableCell.svelte generated by Svelte v3.44.3 */

	function create_else_block$o(ctx) {
		let t_value = /*$LOCALE*/ ctx[5][notPath.get(/*field*/ ctx[1].path, /*item*/ ctx[2], /*helpers*/ ctx[3])] + "";
		let t;

		return {
			c() {
				t = text(t_value);
			},
			m(target, anchor) {
				insert(target, t, anchor);
			},
			p(ctx, dirty) {
				if (dirty & /*$LOCALE, field, item, helpers*/ 46 && t_value !== (t_value = /*$LOCALE*/ ctx[5][notPath.get(/*field*/ ctx[1].path, /*item*/ ctx[2], /*helpers*/ ctx[3])] + "")) set_data(t, t_value);
			},
			i: noop,
			o: noop,
			d(detaching) {
				if (detaching) detach(t);
			}
		};
	}

	// (53:2) {#if !isNaN(field.maxLength) && field.maxLength }
	function create_if_block_7$2(ctx) {
		let t_value = notCommon.strLengthCap(notPath.get(/*field*/ ctx[1].path, /*item*/ ctx[2], /*helpers*/ ctx[3]), /*field*/ ctx[1].maxLength) + "";
		let t;

		return {
			c() {
				t = text(t_value);
			},
			m(target, anchor) {
				insert(target, t, anchor);
			},
			p(ctx, dirty) {
				if (dirty & /*field, item, helpers*/ 14 && t_value !== (t_value = notCommon.strLengthCap(notPath.get(/*field*/ ctx[1].path, /*item*/ ctx[2], /*helpers*/ ctx[3]), /*field*/ ctx[1].maxLength) + "")) set_data(t, t_value);
			},
			i: noop,
			o: noop,
			d(detaching) {
				if (detaching) detach(t);
			}
		};
	}

	// (50:40) 
	function create_if_block_6$2(ctx) {
		let switch_instance;
		let switch_instance_anchor;
		let current;

		const switch_instance_spread_levels = [
			{
				id: /*getItemId*/ ctx[0](/*item*/ ctx[2])
			},
			{ fieldname: /*field*/ ctx[1].path },
			{ disabled: /*field*/ ctx[1].disabled },
			{ readonly: /*field*/ ctx[1].readonly },
			{
				value: notPath.get(/*field*/ ctx[1].path, /*item*/ ctx[2], /*helpers*/ ctx[3])
			},
			/*field*/ ctx[1].options
		];

		var switch_value = /*field*/ ctx[1].component;

		function switch_props(ctx) {
			let switch_instance_props = {};

			for (let i = 0; i < switch_instance_spread_levels.length; i += 1) {
				switch_instance_props = assign(switch_instance_props, switch_instance_spread_levels[i]);
			}

			return { props: switch_instance_props };
		}

		if (switch_value) {
			switch_instance = new switch_value(switch_props());

			switch_instance.$on("change", function () {
				if (is_function(/*field*/ ctx[1].onChange)) /*field*/ ctx[1].onChange.apply(this, arguments);
			});
		}

		return {
			c() {
				if (switch_instance) create_component(switch_instance.$$.fragment);
				switch_instance_anchor = empty();
			},
			m(target, anchor) {
				if (switch_instance) {
					mount_component(switch_instance, target, anchor);
				}

				insert(target, switch_instance_anchor, anchor);
				current = true;
			},
			p(new_ctx, dirty) {
				ctx = new_ctx;

				const switch_instance_changes = (dirty & /*getItemId, item, field, notPath, helpers*/ 15)
				? get_spread_update(switch_instance_spread_levels, [
						dirty & /*getItemId, item*/ 5 && {
							id: /*getItemId*/ ctx[0](/*item*/ ctx[2])
						},
						dirty & /*field*/ 2 && { fieldname: /*field*/ ctx[1].path },
						dirty & /*field*/ 2 && { disabled: /*field*/ ctx[1].disabled },
						dirty & /*field*/ 2 && { readonly: /*field*/ ctx[1].readonly },
						dirty & /*notPath, field, item, helpers*/ 14 && {
							value: notPath.get(/*field*/ ctx[1].path, /*item*/ ctx[2], /*helpers*/ ctx[3])
						},
						dirty & /*field*/ 2 && get_spread_object(/*field*/ ctx[1].options)
					])
				: {};

				if (switch_value !== (switch_value = /*field*/ ctx[1].component)) {
					if (switch_instance) {
						group_outros();
						const old_component = switch_instance;

						transition_out(old_component.$$.fragment, 1, 0, () => {
							destroy_component(old_component, 1);
						});

						check_outros();
					}

					if (switch_value) {
						switch_instance = new switch_value(switch_props());

						switch_instance.$on("change", function () {
							if (is_function(/*field*/ ctx[1].onChange)) /*field*/ ctx[1].onChange.apply(this, arguments);
						});

						create_component(switch_instance.$$.fragment);
						transition_in(switch_instance.$$.fragment, 1);
						mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
					} else {
						switch_instance = null;
					}
				} else if (switch_value) {
					switch_instance.$set(switch_instance_changes);
				}
			},
			i(local) {
				if (current) return;
				if (switch_instance) transition_in(switch_instance.$$.fragment, local);
				current = true;
			},
			o(local) {
				if (switch_instance) transition_out(switch_instance.$$.fragment, local);
				current = false;
			},
			d(detaching) {
				if (detaching) detach(switch_instance_anchor);
				if (switch_instance) destroy_component(switch_instance, detaching);
			}
		};
	}

	// (48:37) 
	function create_if_block_5$5(ctx) {
		let tableswitch;
		let current;

		tableswitch = new Ui_switch$1({
				props: {
					id: /*getItemId*/ ctx[0](/*item*/ ctx[2]),
					fieldname: /*field*/ ctx[1].path,
					value: notPath.get(/*field*/ ctx[1].path, /*item*/ ctx[2], /*helpers*/ ctx[3]),
					disabled: /*field*/ ctx[1].disabled,
					readonly: /*field*/ ctx[1].readonly
				}
			});

		tableswitch.$on("change", function () {
			if (is_function(/*field*/ ctx[1].onChange)) /*field*/ ctx[1].onChange.apply(this, arguments);
		});

		return {
			c() {
				create_component(tableswitch.$$.fragment);
			},
			m(target, anchor) {
				mount_component(tableswitch, target, anchor);
				current = true;
			},
			p(new_ctx, dirty) {
				ctx = new_ctx;
				const tableswitch_changes = {};
				if (dirty & /*getItemId, item*/ 5) tableswitch_changes.id = /*getItemId*/ ctx[0](/*item*/ ctx[2]);
				if (dirty & /*field*/ 2) tableswitch_changes.fieldname = /*field*/ ctx[1].path;
				if (dirty & /*field, item, helpers*/ 14) tableswitch_changes.value = notPath.get(/*field*/ ctx[1].path, /*item*/ ctx[2], /*helpers*/ ctx[3]);
				if (dirty & /*field*/ 2) tableswitch_changes.disabled = /*field*/ ctx[1].disabled;
				if (dirty & /*field*/ 2) tableswitch_changes.readonly = /*field*/ ctx[1].readonly;
				tableswitch.$set(tableswitch_changes);
			},
			i(local) {
				if (current) return;
				transition_in(tableswitch.$$.fragment, local);
				current = true;
			},
			o(local) {
				transition_out(tableswitch.$$.fragment, local);
				current = false;
			},
			d(detaching) {
				destroy_component(tableswitch, detaching);
			}
		};
	}

	// (46:34) 
	function create_if_block_4$d(ctx) {
		let tabletags;
		let current;

		tabletags = new Ui_tags({
				props: {
					values: notPath.get(/*field*/ ctx[1].path, /*item*/ ctx[2], /*helpers*/ ctx[3])
				}
			});

		return {
			c() {
				create_component(tabletags.$$.fragment);
			},
			m(target, anchor) {
				mount_component(tabletags, target, anchor);
				current = true;
			},
			p(ctx, dirty) {
				const tabletags_changes = {};
				if (dirty & /*field, item, helpers*/ 14) tabletags_changes.values = notPath.get(/*field*/ ctx[1].path, /*item*/ ctx[2], /*helpers*/ ctx[3]);
				tabletags.$set(tabletags_changes);
			},
			i(local) {
				if (current) return;
				transition_in(tabletags.$$.fragment, local);
				current = true;
			},
			o(local) {
				transition_out(tabletags.$$.fragment, local);
				current = false;
			},
			d(detaching) {
				destroy_component(tabletags, detaching);
			}
		};
	}

	// (44:38) 
	function create_if_block_3$g(ctx) {
		let uibooleans;
		let current;

		uibooleans = new /*UIBooleans*/ ctx[9]({
				props: {
					values: notPath.get(/*field*/ ctx[1].path, /*item*/ ctx[2], /*helpers*/ ctx[3])
				}
			});

		return {
			c() {
				create_component(uibooleans.$$.fragment);
			},
			m(target, anchor) {
				mount_component(uibooleans, target, anchor);
				current = true;
			},
			p(ctx, dirty) {
				const uibooleans_changes = {};
				if (dirty & /*field, item, helpers*/ 14) uibooleans_changes.values = notPath.get(/*field*/ ctx[1].path, /*item*/ ctx[2], /*helpers*/ ctx[3]);
				uibooleans.$set(uibooleans_changes);
			},
			i(local) {
				if (current) return;
				transition_in(uibooleans.$$.fragment, local);
				current = true;
			},
			o(local) {
				transition_out(uibooleans.$$.fragment, local);
				current = false;
			},
			d(detaching) {
				destroy_component(uibooleans, detaching);
			}
		};
	}

	// (42:36) 
	function create_if_block_2$h(ctx) {
		let uiimages;
		let current;

		uiimages = new /*UIImages*/ ctx[8]({
				props: {
					values: notPath.get(/*field*/ ctx[1].path, /*item*/ ctx[2], /*helpers*/ ctx[3])
				}
			});

		return {
			c() {
				create_component(uiimages.$$.fragment);
			},
			m(target, anchor) {
				mount_component(uiimages, target, anchor);
				current = true;
			},
			p(ctx, dirty) {
				const uiimages_changes = {};
				if (dirty & /*field, item, helpers*/ 14) uiimages_changes.values = notPath.get(/*field*/ ctx[1].path, /*item*/ ctx[2], /*helpers*/ ctx[3]);
				uiimages.$set(uiimages_changes);
			},
			i(local) {
				if (current) return;
				transition_in(uiimages.$$.fragment, local);
				current = true;
			},
			o(local) {
				transition_out(uiimages.$$.fragment, local);
				current = false;
			},
			d(detaching) {
				destroy_component(uiimages, detaching);
			}
		};
	}

	// (40:37) 
	function create_if_block_1$o(ctx) {
		let uibuttons;
		let current;

		uibuttons = new /*UIButtons*/ ctx[6]({
				props: {
					values: notPath.get(/*field*/ ctx[1].path, /*item*/ ctx[2], /*helpers*/ ctx[3])
				}
			});

		return {
			c() {
				create_component(uibuttons.$$.fragment);
			},
			m(target, anchor) {
				mount_component(uibuttons, target, anchor);
				current = true;
			},
			p(ctx, dirty) {
				const uibuttons_changes = {};
				if (dirty & /*field, item, helpers*/ 14) uibuttons_changes.values = notPath.get(/*field*/ ctx[1].path, /*item*/ ctx[2], /*helpers*/ ctx[3]);
				uibuttons.$set(uibuttons_changes);
			},
			i(local) {
				if (current) return;
				transition_in(uibuttons.$$.fragment, local);
				current = true;
			},
			o(local) {
				transition_out(uibuttons.$$.fragment, local);
				current = false;
			},
			d(detaching) {
				destroy_component(uibuttons, detaching);
			}
		};
	}

	// (38:2) {#if field.type === 'link' }
	function create_if_block$w(ctx) {
		let uilinks;
		let current;

		uilinks = new /*UILinks*/ ctx[7]({
				props: {
					values: notPath.get(/*field*/ ctx[1].path, /*item*/ ctx[2], /*helpers*/ ctx[3])
				}
			});

		return {
			c() {
				create_component(uilinks.$$.fragment);
			},
			m(target, anchor) {
				mount_component(uilinks, target, anchor);
				current = true;
			},
			p(ctx, dirty) {
				const uilinks_changes = {};
				if (dirty & /*field, item, helpers*/ 14) uilinks_changes.values = notPath.get(/*field*/ ctx[1].path, /*item*/ ctx[2], /*helpers*/ ctx[3]);
				uilinks.$set(uilinks_changes);
			},
			i(local) {
				if (current) return;
				transition_in(uilinks.$$.fragment, local);
				current = true;
			},
			o(local) {
				transition_out(uilinks.$$.fragment, local);
				current = false;
			},
			d(detaching) {
				destroy_component(uilinks, detaching);
			}
		};
	}

	function create_fragment$N(ctx) {
		let td;
		let show_if;
		let current_block_type_index;
		let if_block;
		let td_class_value;
		let current;

		const if_block_creators = [
			create_if_block$w,
			create_if_block_1$o,
			create_if_block_2$h,
			create_if_block_3$g,
			create_if_block_4$d,
			create_if_block_5$5,
			create_if_block_6$2,
			create_if_block_7$2,
			create_else_block$o
		];

		const if_blocks = [];

		function select_block_type(ctx, dirty) {
			if (/*field*/ ctx[1].type === 'link') return 0;
			if (/*field*/ ctx[1].type === 'button') return 1;
			if (/*field*/ ctx[1].type === 'image') return 2;
			if (/*field*/ ctx[1].type === 'boolean') return 3;
			if (/*field*/ ctx[1].type === 'tag') return 4;
			if (/*field*/ ctx[1].type === 'switch') return 5;
			if (/*field*/ ctx[1].type === 'component') return 6;
			if (show_if == null || dirty & /*field*/ 2) show_if = !!(!isNaN(/*field*/ ctx[1].maxLength) && /*field*/ ctx[1].maxLength);
			if (show_if) return 7;
			return 8;
		}

		current_block_type_index = select_block_type(ctx, -1);
		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

		return {
			c() {
				td = element("td");
				if_block.c();
				attr(td, "class", td_class_value = /*field*/ ctx[1].hideOnMobile ? 'is-hidden-touch' : '');
				attr(td, "title", /*title*/ ctx[4]);
			},
			m(target, anchor) {
				insert(target, td, anchor);
				if_blocks[current_block_type_index].m(td, null);
				current = true;
			},
			p(ctx, [dirty]) {
				let previous_block_index = current_block_type_index;
				current_block_type_index = select_block_type(ctx, dirty);

				if (current_block_type_index === previous_block_index) {
					if_blocks[current_block_type_index].p(ctx, dirty);
				} else {
					group_outros();

					transition_out(if_blocks[previous_block_index], 1, 1, () => {
						if_blocks[previous_block_index] = null;
					});

					check_outros();
					if_block = if_blocks[current_block_type_index];

					if (!if_block) {
						if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
						if_block.c();
					} else {
						if_block.p(ctx, dirty);
					}

					transition_in(if_block, 1);
					if_block.m(td, null);
				}

				if (!current || dirty & /*field*/ 2 && td_class_value !== (td_class_value = /*field*/ ctx[1].hideOnMobile ? 'is-hidden-touch' : '')) {
					attr(td, "class", td_class_value);
				}

				if (!current || dirty & /*title*/ 16) {
					attr(td, "title", /*title*/ ctx[4]);
				}
			},
			i(local) {
				if (current) return;
				transition_in(if_block);
				current = true;
			},
			o(local) {
				transition_out(if_block);
				current = false;
			},
			d(detaching) {
				if (detaching) detach(td);
				if_blocks[current_block_type_index].d();
			}
		};
	}

	function instance$N($$self, $$props, $$invalidate) {
		let $LOCALE;
		component_subscribe($$self, LOCALE, $$value => $$invalidate(5, $LOCALE = $$value));
		let title = '';

		onMount(() => {
			if (typeof field.type === 'undefined') {
				$$invalidate(4, title = notPath.get(field.path, item, helpers));
			}
		});

		const { UIButtons } = Buttons;
		const { UILinks } = Links;
		const { UIImages } = Images;
		const { UIBooleans } = Elements;
		let { getItemId = item => item._id } = $$props;
		let { field = {} } = $$props;
		let { item = {} } = $$props;
		let { helpers = {} } = $$props;

		$$self.$$set = $$props => {
			if ('getItemId' in $$props) $$invalidate(0, getItemId = $$props.getItemId);
			if ('field' in $$props) $$invalidate(1, field = $$props.field);
			if ('item' in $$props) $$invalidate(2, item = $$props.item);
			if ('helpers' in $$props) $$invalidate(3, helpers = $$props.helpers);
		};

		return [
			getItemId,
			field,
			item,
			helpers,
			title,
			$LOCALE,
			UIButtons,
			UILinks,
			UIImages,
			UIBooleans
		];
	}

	class NotTableCell extends SvelteComponent {
		constructor(options) {
			super();

			init(this, options, instance$N, create_fragment$N, safe_not_equal, {
				getItemId: 0,
				field: 1,
				item: 2,
				helpers: 3
			});
		}
	}

	/* src/frame/components/table/notTableRow.svelte generated by Svelte v3.44.3 */

	function get_each_context$b(ctx, list, i) {
		const child_ctx = ctx.slice();
		child_ctx[12] = list[i];
		return child_ctx;
	}

	// (36:2) {#if showSelect && $selectedList }
	function create_if_block$v(ctx) {
		let td;
		let input;
		let input_id_value;
		let input_data_id_value;
		let input_name_value;
		let mounted;
		let dispose;

		return {
			c() {
				td = element("td");
				input = element("input");
				attr(input, "id", input_id_value = "table-row-select-" + /*getItemId*/ ctx[4](/*item*/ ctx[0]));
				attr(input, "type", "checkbox");
				attr(input, "data-id", input_data_id_value = /*getItemId*/ ctx[4](/*item*/ ctx[0]));
				attr(input, "placeholder", "");
				attr(input, "name", input_name_value = "row_selected_" + /*getItemId*/ ctx[4](/*item*/ ctx[0]));
			},
			m(target, anchor) {
				insert(target, td, anchor);
				append(td, input);
				input.checked = /*$selectedList*/ ctx[7][/*itemId*/ ctx[5]];

				if (!mounted) {
					dispose = [
						listen(input, "change", /*input_change_handler*/ ctx[10]),
						listen(input, "change", /*onRowSelect*/ ctx[8])
					];

					mounted = true;
				}
			},
			p(ctx, dirty) {
				if (dirty & /*getItemId, item*/ 17 && input_id_value !== (input_id_value = "table-row-select-" + /*getItemId*/ ctx[4](/*item*/ ctx[0]))) {
					attr(input, "id", input_id_value);
				}

				if (dirty & /*getItemId, item*/ 17 && input_data_id_value !== (input_data_id_value = /*getItemId*/ ctx[4](/*item*/ ctx[0]))) {
					attr(input, "data-id", input_data_id_value);
				}

				if (dirty & /*getItemId, item*/ 17 && input_name_value !== (input_name_value = "row_selected_" + /*getItemId*/ ctx[4](/*item*/ ctx[0]))) {
					attr(input, "name", input_name_value);
				}

				if (dirty & /*$selectedList, itemId*/ 160) {
					input.checked = /*$selectedList*/ ctx[7][/*itemId*/ ctx[5]];
				}
			},
			d(detaching) {
				if (detaching) detach(td);
				mounted = false;
				run_all(dispose);
			}
		};
	}

	// (41:2) {#each fields as field }
	function create_each_block$b(ctx) {
		let uitablecell;
		let current;

		uitablecell = new NotTableCell({
				props: {
					field: /*field*/ ctx[12],
					helpers: /*helpers*/ ctx[1],
					item: /*item*/ ctx[0],
					getItemId: /*getItemId*/ ctx[4]
				}
			});

		return {
			c() {
				create_component(uitablecell.$$.fragment);
			},
			m(target, anchor) {
				mount_component(uitablecell, target, anchor);
				current = true;
			},
			p(ctx, dirty) {
				const uitablecell_changes = {};
				if (dirty & /*fields*/ 4) uitablecell_changes.field = /*field*/ ctx[12];
				if (dirty & /*helpers*/ 2) uitablecell_changes.helpers = /*helpers*/ ctx[1];
				if (dirty & /*item*/ 1) uitablecell_changes.item = /*item*/ ctx[0];
				if (dirty & /*getItemId*/ 16) uitablecell_changes.getItemId = /*getItemId*/ ctx[4];
				uitablecell.$set(uitablecell_changes);
			},
			i(local) {
				if (current) return;
				transition_in(uitablecell.$$.fragment, local);
				current = true;
			},
			o(local) {
				transition_out(uitablecell.$$.fragment, local);
				current = false;
			},
			d(detaching) {
				destroy_component(uitablecell, detaching);
			}
		};
	}

	function create_fragment$M(ctx) {
		let tr;
		let t;
		let current;
		let if_block = /*showSelect*/ ctx[3] && /*$selectedList*/ ctx[7] && create_if_block$v(ctx);
		let each_value = /*fields*/ ctx[2];
		let each_blocks = [];

		for (let i = 0; i < each_value.length; i += 1) {
			each_blocks[i] = create_each_block$b(get_each_context$b(ctx, each_value, i));
		}

		const out = i => transition_out(each_blocks[i], 1, 1, () => {
			each_blocks[i] = null;
		});

		return {
			c() {
				tr = element("tr");
				if (if_block) if_block.c();
				t = space();

				for (let i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].c();
				}
			},
			m(target, anchor) {
				insert(target, tr, anchor);
				if (if_block) if_block.m(tr, null);
				append(tr, t);

				for (let i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].m(tr, null);
				}

				current = true;
			},
			p(ctx, [dirty]) {
				if (/*showSelect*/ ctx[3] && /*$selectedList*/ ctx[7]) {
					if (if_block) {
						if_block.p(ctx, dirty);
					} else {
						if_block = create_if_block$v(ctx);
						if_block.c();
						if_block.m(tr, t);
					}
				} else if (if_block) {
					if_block.d(1);
					if_block = null;
				}

				if (dirty & /*fields, helpers, item, getItemId*/ 23) {
					each_value = /*fields*/ ctx[2];
					let i;

					for (i = 0; i < each_value.length; i += 1) {
						const child_ctx = get_each_context$b(ctx, each_value, i);

						if (each_blocks[i]) {
							each_blocks[i].p(child_ctx, dirty);
							transition_in(each_blocks[i], 1);
						} else {
							each_blocks[i] = create_each_block$b(child_ctx);
							each_blocks[i].c();
							transition_in(each_blocks[i], 1);
							each_blocks[i].m(tr, null);
						}
					}

					group_outros();

					for (i = each_value.length; i < each_blocks.length; i += 1) {
						out(i);
					}

					check_outros();
				}
			},
			i(local) {
				if (current) return;

				for (let i = 0; i < each_value.length; i += 1) {
					transition_in(each_blocks[i]);
				}

				current = true;
			},
			o(local) {
				each_blocks = each_blocks.filter(Boolean);

				for (let i = 0; i < each_blocks.length; i += 1) {
					transition_out(each_blocks[i]);
				}

				current = false;
			},
			d(detaching) {
				if (detaching) detach(tr);
				if (if_block) if_block.d();
				destroy_each(each_blocks, detaching);
			}
		};
	}

	function instance$M($$self, $$props, $$invalidate) {
		let $selectedList,
			$$unsubscribe_selectedList = noop,
			$$subscribe_selectedList = () => ($$unsubscribe_selectedList(), $$unsubscribe_selectedList = subscribe(selectedList, $$value => $$invalidate(7, $selectedList = $$value)), selectedList);

		$$self.$$.on_destroy.push(() => $$unsubscribe_selectedList());
		let dispatch = createEventDispatcher();
		let itemId, selectedList;

		onMount(() => {
			$$invalidate(5, itemId = getItemId(item));
			$$subscribe_selectedList($$invalidate(6, selectedList = get(id).selected));
		});

		let { id } = $$props;
		let { item = {} } = $$props;
		let { helpers = {} } = $$props;
		let { fields = [] } = $$props;
		let { showSelect = false } = $$props;

		let { getItemId = () => {
			
		} } = $$props;

		function onRowSelect(e) {
			e.preventDefault();

			dispatch('rowSelectChange', {
				id: itemId,
				selected: $selectedList[itemId]
			});

			return false;
		}

		function input_change_handler() {
			$selectedList[itemId] = this.checked;
			selectedList.set($selectedList);
			$$invalidate(5, itemId);
		}

		$$self.$$set = $$props => {
			if ('id' in $$props) $$invalidate(9, id = $$props.id);
			if ('item' in $$props) $$invalidate(0, item = $$props.item);
			if ('helpers' in $$props) $$invalidate(1, helpers = $$props.helpers);
			if ('fields' in $$props) $$invalidate(2, fields = $$props.fields);
			if ('showSelect' in $$props) $$invalidate(3, showSelect = $$props.showSelect);
			if ('getItemId' in $$props) $$invalidate(4, getItemId = $$props.getItemId);
		};

		return [
			item,
			helpers,
			fields,
			showSelect,
			getItemId,
			itemId,
			selectedList,
			$selectedList,
			onRowSelect,
			id,
			input_change_handler
		];
	}

	class NotTableRow extends SvelteComponent {
		constructor(options) {
			super();

			init(this, options, instance$M, create_fragment$M, safe_not_equal, {
				id: 9,
				item: 0,
				helpers: 1,
				fields: 2,
				showSelect: 3,
				getItemId: 4
			});
		}
	}

	/* src/elements/link/ui.link.svelte generated by Svelte v3.44.3 */

	function create_else_block$n(ctx) {
		let t_value = /*$LOCALE*/ ctx[16][/*title*/ ctx[1]] + "";
		let t;

		return {
			c() {
				t = text(t_value);
			},
			m(target, anchor) {
				insert(target, t, anchor);
			},
			p(ctx, dirty) {
				if (dirty & /*$LOCALE, title*/ 65538 && t_value !== (t_value = /*$LOCALE*/ ctx[16][/*title*/ ctx[1]] + "")) set_data(t, t_value);
			},
			d(detaching) {
				if (detaching) detach(t);
			}
		};
	}

	// (30:2) {#if icon }
	function create_if_block$u(ctx) {
		let t0;
		let t1;
		let if_block2_anchor;
		let if_block0 = /*iconSide*/ ctx[14] === 'left' && create_if_block_3$f(ctx);
		let if_block1 = /*title*/ ctx[1] && create_if_block_2$g(ctx);
		let if_block2 = /*iconSide*/ ctx[14] === 'right' && create_if_block_1$n(ctx);

		return {
			c() {
				if (if_block0) if_block0.c();
				t0 = space();
				if (if_block1) if_block1.c();
				t1 = space();
				if (if_block2) if_block2.c();
				if_block2_anchor = empty();
			},
			m(target, anchor) {
				if (if_block0) if_block0.m(target, anchor);
				insert(target, t0, anchor);
				if (if_block1) if_block1.m(target, anchor);
				insert(target, t1, anchor);
				if (if_block2) if_block2.m(target, anchor);
				insert(target, if_block2_anchor, anchor);
			},
			p(ctx, dirty) {
				if (/*iconSide*/ ctx[14] === 'left') {
					if (if_block0) {
						if_block0.p(ctx, dirty);
					} else {
						if_block0 = create_if_block_3$f(ctx);
						if_block0.c();
						if_block0.m(t0.parentNode, t0);
					}
				} else if (if_block0) {
					if_block0.d(1);
					if_block0 = null;
				}

				if (/*title*/ ctx[1]) {
					if (if_block1) {
						if_block1.p(ctx, dirty);
					} else {
						if_block1 = create_if_block_2$g(ctx);
						if_block1.c();
						if_block1.m(t1.parentNode, t1);
					}
				} else if (if_block1) {
					if_block1.d(1);
					if_block1 = null;
				}

				if (/*iconSide*/ ctx[14] === 'right') {
					if (if_block2) {
						if_block2.p(ctx, dirty);
					} else {
						if_block2 = create_if_block_1$n(ctx);
						if_block2.c();
						if_block2.m(if_block2_anchor.parentNode, if_block2_anchor);
					}
				} else if (if_block2) {
					if_block2.d(1);
					if_block2 = null;
				}
			},
			d(detaching) {
				if (if_block0) if_block0.d(detaching);
				if (detaching) detach(t0);
				if (if_block1) if_block1.d(detaching);
				if (detaching) detach(t1);
				if (if_block2) if_block2.d(detaching);
				if (detaching) detach(if_block2_anchor);
			}
		};
	}

	// (31:2) {#if iconSide === 'left' }
	function create_if_block_3$f(ctx) {
		let span;
		let i;
		let i_class_value;

		return {
			c() {
				span = element("span");
				i = element("i");
				attr(i, "class", i_class_value = "fas fa-" + /*icon*/ ctx[13] + " " + (/*size*/ ctx[12] ? `is-${/*size*/ ctx[12]}` : ''));
				attr(span, "class", "icon");
			},
			m(target, anchor) {
				insert(target, span, anchor);
				append(span, i);
			},
			p(ctx, dirty) {
				if (dirty & /*icon, size*/ 12288 && i_class_value !== (i_class_value = "fas fa-" + /*icon*/ ctx[13] + " " + (/*size*/ ctx[12] ? `is-${/*size*/ ctx[12]}` : ''))) {
					attr(i, "class", i_class_value);
				}
			},
			d(detaching) {
				if (detaching) detach(span);
			}
		};
	}

	// (34:4) {#if title }
	function create_if_block_2$g(ctx) {
		let span;
		let t_value = /*$LOCALE*/ ctx[16][/*title*/ ctx[1]] + "";
		let t;

		return {
			c() {
				span = element("span");
				t = text(t_value);
			},
			m(target, anchor) {
				insert(target, span, anchor);
				append(span, t);
			},
			p(ctx, dirty) {
				if (dirty & /*$LOCALE, title*/ 65538 && t_value !== (t_value = /*$LOCALE*/ ctx[16][/*title*/ ctx[1]] + "")) set_data(t, t_value);
			},
			d(detaching) {
				if (detaching) detach(span);
			}
		};
	}

	// (37:2) {#if iconSide === 'right' }
	function create_if_block_1$n(ctx) {
		let span;
		let i;
		let i_class_value;

		return {
			c() {
				span = element("span");
				i = element("i");
				attr(i, "class", i_class_value = "fas fa-" + /*icon*/ ctx[13] + " " + (/*size*/ ctx[12] ? `is-${/*size*/ ctx[12]}` : ''));
				attr(span, "class", "icon");
			},
			m(target, anchor) {
				insert(target, span, anchor);
				append(span, i);
			},
			p(ctx, dirty) {
				if (dirty & /*icon, size*/ 12288 && i_class_value !== (i_class_value = "fas fa-" + /*icon*/ ctx[13] + " " + (/*size*/ ctx[12] ? `is-${/*size*/ ctx[12]}` : ''))) {
					attr(i, "class", i_class_value);
				}
			},
			d(detaching) {
				if (detaching) detach(span);
			}
		};
	}

	function create_fragment$L(ctx) {
		let a;
		let a_class_value;
		let mounted;
		let dispose;

		function select_block_type(ctx, dirty) {
			if (/*icon*/ ctx[13]) return create_if_block$u;
			return create_else_block$n;
		}

		let current_block_type = select_block_type(ctx);
		let if_block = current_block_type(ctx);

		return {
			c() {
				a = element("a");
				if_block.c();
				attr(a, "href", /*url*/ ctx[2]);
				attr(a, "class", a_class_value = "" + (/*classes*/ ctx[0] + " " + (/*state*/ ctx[9] ? `is-${/*state*/ ctx[9]}` : '') + " " + (/*inverted*/ ctx[7] ? `is-inverted` : '') + " " + (/*outlined*/ ctx[6] ? `is-outlined` : '') + " " + (/*raised*/ ctx[5] ? `is-raised` : '') + " " + (/*rounded*/ ctx[8] ? `is-rounded` : '') + " " + (/*light*/ ctx[3] ? `is-light` : '') + " " + (/*loading*/ ctx[4] ? `is-loading` : '') + " " + (/*color*/ ctx[11] ? `is-${/*color*/ ctx[11]}` : '') + " " + (/*type*/ ctx[10] ? `is-${/*type*/ ctx[10]}` : '') + " " + (/*size*/ ctx[12] ? `is-${/*size*/ ctx[12]}` : '')));
			},
			m(target, anchor) {
				insert(target, a, anchor);
				if_block.m(a, null);

				if (!mounted) {
					dispose = listen(a, "click", function () {
						if (is_function(/*action*/ ctx[15])) /*action*/ ctx[15].apply(this, arguments);
					});

					mounted = true;
				}
			},
			p(new_ctx, [dirty]) {
				ctx = new_ctx;

				if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block.d(1);
					if_block = current_block_type(ctx);

					if (if_block) {
						if_block.c();
						if_block.m(a, null);
					}
				}

				if (dirty & /*url*/ 4) {
					attr(a, "href", /*url*/ ctx[2]);
				}

				if (dirty & /*classes, state, inverted, outlined, raised, rounded, light, loading, color, type, size*/ 8185 && a_class_value !== (a_class_value = "" + (/*classes*/ ctx[0] + " " + (/*state*/ ctx[9] ? `is-${/*state*/ ctx[9]}` : '') + " " + (/*inverted*/ ctx[7] ? `is-inverted` : '') + " " + (/*outlined*/ ctx[6] ? `is-outlined` : '') + " " + (/*raised*/ ctx[5] ? `is-raised` : '') + " " + (/*rounded*/ ctx[8] ? `is-rounded` : '') + " " + (/*light*/ ctx[3] ? `is-light` : '') + " " + (/*loading*/ ctx[4] ? `is-loading` : '') + " " + (/*color*/ ctx[11] ? `is-${/*color*/ ctx[11]}` : '') + " " + (/*type*/ ctx[10] ? `is-${/*type*/ ctx[10]}` : '') + " " + (/*size*/ ctx[12] ? `is-${/*size*/ ctx[12]}` : '')))) {
					attr(a, "class", a_class_value);
				}
			},
			i: noop,
			o: noop,
			d(detaching) {
				if (detaching) detach(a);
				if_block.d();
				mounted = false;
				dispose();
			}
		};
	}

	function instance$L($$self, $$props, $$invalidate) {
		let $LOCALE;
		component_subscribe($$self, LOCALE, $$value => $$invalidate(16, $LOCALE = $$value));
		let { title = '' } = $$props;
		let { url = '' } = $$props;
		let { light = false } = $$props;
		let { loading = false } = $$props;
		let { raised = false } = $$props;
		let { outlined = false } = $$props;
		let { inverted = false } = $$props;
		let { rounded = false } = $$props;
		let { state = '' } = $$props;
		let { type = '' } = $$props;
		let { color = '' } = $$props;
		let { size = '' } = $$props;
		let { classes = 'button ' } = $$props;
		let { icon = false } = $$props;
		let { iconSide = 'right' } = $$props;

		let { action = () => {
			return true;
		} } = $$props;

		$$self.$$set = $$props => {
			if ('title' in $$props) $$invalidate(1, title = $$props.title);
			if ('url' in $$props) $$invalidate(2, url = $$props.url);
			if ('light' in $$props) $$invalidate(3, light = $$props.light);
			if ('loading' in $$props) $$invalidate(4, loading = $$props.loading);
			if ('raised' in $$props) $$invalidate(5, raised = $$props.raised);
			if ('outlined' in $$props) $$invalidate(6, outlined = $$props.outlined);
			if ('inverted' in $$props) $$invalidate(7, inverted = $$props.inverted);
			if ('rounded' in $$props) $$invalidate(8, rounded = $$props.rounded);
			if ('state' in $$props) $$invalidate(9, state = $$props.state);
			if ('type' in $$props) $$invalidate(10, type = $$props.type);
			if ('color' in $$props) $$invalidate(11, color = $$props.color);
			if ('size' in $$props) $$invalidate(12, size = $$props.size);
			if ('classes' in $$props) $$invalidate(0, classes = $$props.classes);
			if ('icon' in $$props) $$invalidate(13, icon = $$props.icon);
			if ('iconSide' in $$props) $$invalidate(14, iconSide = $$props.iconSide);
			if ('action' in $$props) $$invalidate(15, action = $$props.action);
		};

		$$self.$$.update = () => {
			if ($$self.$$.dirty & /*state, light, type, size*/ 5640) {
				{
					$$invalidate(0, classes = (state && state.length > 0 ? ` is-${state} ` : '') + (light ? ` is-light ` : '') + (type && type.length > 0 ? ` is-${type} ` : '') + (size && size.length > 0 ? ` is-${size} ` : ''));
				}
			}
		};

		return [
			classes,
			title,
			url,
			light,
			loading,
			raised,
			outlined,
			inverted,
			rounded,
			state,
			type,
			color,
			size,
			icon,
			iconSide,
			action,
			$LOCALE
		];
	}

	class Ui_link extends SvelteComponent {
		constructor(options) {
			super();

			init(this, options, instance$L, create_fragment$L, safe_not_equal, {
				title: 1,
				url: 2,
				light: 3,
				loading: 4,
				raised: 5,
				outlined: 6,
				inverted: 7,
				rounded: 8,
				state: 9,
				type: 10,
				color: 11,
				size: 12,
				classes: 0,
				icon: 13,
				iconSide: 14,
				action: 15
			});
		}
	}

	/* src/elements/link/ui.links.svelte generated by Svelte v3.44.3 */

	function get_each_context$a(ctx, list, i) {
		const child_ctx = ctx.slice();
		child_ctx[1] = list[i];
		return child_ctx;
	}

	// (9:4) {#each values as item (item) }
	function create_each_block$a(key_1, ctx) {
		let first;
		let uilink;
		let current;
		const uilink_spread_levels = [/*item*/ ctx[1]];
		let uilink_props = {};

		for (let i = 0; i < uilink_spread_levels.length; i += 1) {
			uilink_props = assign(uilink_props, uilink_spread_levels[i]);
		}

		uilink = new Ui_link({ props: uilink_props });

		return {
			key: key_1,
			first: null,
			c() {
				first = empty();
				create_component(uilink.$$.fragment);
				this.first = first;
			},
			m(target, anchor) {
				insert(target, first, anchor);
				mount_component(uilink, target, anchor);
				current = true;
			},
			p(new_ctx, dirty) {
				ctx = new_ctx;

				const uilink_changes = (dirty & /*values*/ 1)
				? get_spread_update(uilink_spread_levels, [get_spread_object(/*item*/ ctx[1])])
				: {};

				uilink.$set(uilink_changes);
			},
			i(local) {
				if (current) return;
				transition_in(uilink.$$.fragment, local);
				current = true;
			},
			o(local) {
				transition_out(uilink.$$.fragment, local);
				current = false;
			},
			d(detaching) {
				if (detaching) detach(first);
				destroy_component(uilink, detaching);
			}
		};
	}

	function create_fragment$K(ctx) {
		let div;
		let p;
		let each_blocks = [];
		let each_1_lookup = new Map();
		let current;
		let each_value = /*values*/ ctx[0];
		const get_key = ctx => /*item*/ ctx[1];

		for (let i = 0; i < each_value.length; i += 1) {
			let child_ctx = get_each_context$a(ctx, each_value, i);
			let key = get_key(child_ctx);
			each_1_lookup.set(key, each_blocks[i] = create_each_block$a(key, child_ctx));
		}

		return {
			c() {
				div = element("div");
				p = element("p");

				for (let i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].c();
				}

				attr(p, "class", "control");
				attr(div, "class", "field has-addons");
			},
			m(target, anchor) {
				insert(target, div, anchor);
				append(div, p);

				for (let i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].m(p, null);
				}

				current = true;
			},
			p(ctx, [dirty]) {
				if (dirty & /*values*/ 1) {
					each_value = /*values*/ ctx[0];
					group_outros();
					each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, p, outro_and_destroy_block, create_each_block$a, null, get_each_context$a);
					check_outros();
				}
			},
			i(local) {
				if (current) return;

				for (let i = 0; i < each_value.length; i += 1) {
					transition_in(each_blocks[i]);
				}

				current = true;
			},
			o(local) {
				for (let i = 0; i < each_blocks.length; i += 1) {
					transition_out(each_blocks[i]);
				}

				current = false;
			},
			d(detaching) {
				if (detaching) detach(div);

				for (let i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].d();
				}
			}
		};
	}

	function instance$K($$self, $$props, $$invalidate) {
		let { values = [] } = $$props;

		$$self.$$set = $$props => {
			if ('values' in $$props) $$invalidate(0, values = $$props.values);
		};

		return [values];
	}

	class Ui_links extends SvelteComponent {
		constructor(options) {
			super();
			init(this, options, instance$K, create_fragment$K, safe_not_equal, { values: 0 });
		}
	}

	/* src/elements/button/ui.buttons.row.svelte generated by Svelte v3.44.3 */

	const get_right_slot_changes = dirty => ({});
	const get_right_slot_context = ctx => ({});
	const get_center_slot_changes = dirty => ({});
	const get_center_slot_context = ctx => ({});
	const get_left_slot_changes = dirty => ({});
	const get_left_slot_context = ctx => ({});

	function create_fragment$J(ctx) {
		let div;
		let t0;
		let t1;
		let current;
		const left_slot_template = /*#slots*/ ctx[2].left;
		const left_slot = create_slot(left_slot_template, ctx, /*$$scope*/ ctx[1], get_left_slot_context);
		const center_slot_template = /*#slots*/ ctx[2].center;
		const center_slot = create_slot(center_slot_template, ctx, /*$$scope*/ ctx[1], get_center_slot_context);
		const right_slot_template = /*#slots*/ ctx[2].right;
		const right_slot = create_slot(right_slot_template, ctx, /*$$scope*/ ctx[1], get_right_slot_context);

		return {
			c() {
				div = element("div");
				if (left_slot) left_slot.c();
				t0 = space();
				if (center_slot) center_slot.c();
				t1 = space();
				if (right_slot) right_slot.c();
				attr(div, "class", /*classes*/ ctx[0]);
			},
			m(target, anchor) {
				insert(target, div, anchor);

				if (left_slot) {
					left_slot.m(div, null);
				}

				append(div, t0);

				if (center_slot) {
					center_slot.m(div, null);
				}

				append(div, t1);

				if (right_slot) {
					right_slot.m(div, null);
				}

				current = true;
			},
			p(ctx, [dirty]) {
				if (left_slot) {
					if (left_slot.p && (!current || dirty & /*$$scope*/ 2)) {
						update_slot_base(
							left_slot,
							left_slot_template,
							ctx,
							/*$$scope*/ ctx[1],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[1])
							: get_slot_changes(left_slot_template, /*$$scope*/ ctx[1], dirty, get_left_slot_changes),
							get_left_slot_context
						);
					}
				}

				if (center_slot) {
					if (center_slot.p && (!current || dirty & /*$$scope*/ 2)) {
						update_slot_base(
							center_slot,
							center_slot_template,
							ctx,
							/*$$scope*/ ctx[1],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[1])
							: get_slot_changes(center_slot_template, /*$$scope*/ ctx[1], dirty, get_center_slot_changes),
							get_center_slot_context
						);
					}
				}

				if (right_slot) {
					if (right_slot.p && (!current || dirty & /*$$scope*/ 2)) {
						update_slot_base(
							right_slot,
							right_slot_template,
							ctx,
							/*$$scope*/ ctx[1],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[1])
							: get_slot_changes(right_slot_template, /*$$scope*/ ctx[1], dirty, get_right_slot_changes),
							get_right_slot_context
						);
					}
				}

				if (!current || dirty & /*classes*/ 1) {
					attr(div, "class", /*classes*/ ctx[0]);
				}
			},
			i(local) {
				if (current) return;
				transition_in(left_slot, local);
				transition_in(center_slot, local);
				transition_in(right_slot, local);
				current = true;
			},
			o(local) {
				transition_out(left_slot, local);
				transition_out(center_slot, local);
				transition_out(right_slot, local);
				current = false;
			},
			d(detaching) {
				if (detaching) detach(div);
				if (left_slot) left_slot.d(detaching);
				if (center_slot) center_slot.d(detaching);
				if (right_slot) right_slot.d(detaching);
			}
		};
	}

	function instance$J($$self, $$props, $$invalidate) {
		let { $$slots: slots = {}, $$scope } = $$props;
		let { classes = '' } = $$props;

		$$self.$$set = $$props => {
			if ('classes' in $$props) $$invalidate(0, classes = $$props.classes);
			if ('$$scope' in $$props) $$invalidate(1, $$scope = $$props.$$scope);
		};

		return [classes, $$scope, slots];
	}

	class Ui_buttons_row extends SvelteComponent {
		constructor(options) {
			super();
			init(this, options, instance$J, create_fragment$J, safe_not_equal, { classes: 0 });
		}
	}

	/* src/frame/components/table/notTable.svelte generated by Svelte v3.44.3 */

	function get_each_context$9(ctx, list, i) {
		const child_ctx = ctx.slice();
		child_ctx[23] = list[i];
		return child_ctx;
	}

	function get_each_context_1$4(ctx, list, i) {
		const child_ctx = ctx.slice();
		child_ctx[26] = list[i];
		return child_ctx;
	}

	function get_each_context_2$2(ctx, list, i) {
		const child_ctx = ctx.slice();
		child_ctx[29] = list[i];
		return child_ctx;
	}

	// (92:0) {#if links.length}
	function create_if_block_5$4(ctx) {
		let div;
		let uilinks;
		let current;
		uilinks = new Ui_links({ props: { values: /*links*/ ctx[8] } });

		return {
			c() {
				div = element("div");
				create_component(uilinks.$$.fragment);
				attr(div, "class", "field is-grouped");
			},
			m(target, anchor) {
				insert(target, div, anchor);
				mount_component(uilinks, div, null);
				current = true;
			},
			p(ctx, dirty) {
				const uilinks_changes = {};
				if (dirty[0] & /*links*/ 256) uilinks_changes.values = /*links*/ ctx[8];
				uilinks.$set(uilinks_changes);
			},
			i(local) {
				if (current) return;
				transition_in(uilinks.$$.fragment, local);
				current = true;
			},
			o(local) {
				transition_out(uilinks.$$.fragment, local);
				current = false;
			},
			d(detaching) {
				if (detaching) detach(div);
				destroy_component(uilinks);
			}
		};
	}

	// (97:0) {#if actions.length}
	function create_if_block_4$c(ctx) {
		let div;
		let uibuttons;
		let current;
		uibuttons = new Ui_buttons({ props: { values: /*actions*/ ctx[7] } });

		return {
			c() {
				div = element("div");
				create_component(uibuttons.$$.fragment);
				attr(div, "class", "field is-grouped");
			},
			m(target, anchor) {
				insert(target, div, anchor);
				mount_component(uibuttons, div, null);
				current = true;
			},
			p(ctx, dirty) {
				const uibuttons_changes = {};
				if (dirty[0] & /*actions*/ 128) uibuttons_changes.values = /*actions*/ ctx[7];
				uibuttons.$set(uibuttons_changes);
			},
			i(local) {
				if (current) return;
				transition_in(uibuttons.$$.fragment, local);
				current = true;
			},
			o(local) {
				transition_out(uibuttons.$$.fragment, local);
				current = false;
			},
			d(detaching) {
				if (detaching) detach(div);
				destroy_component(uibuttons);
			}
		};
	}

	// (102:0) {#if showSearch }
	function create_if_block_3$e(ctx) {
		let div1;
		let div0;
		let input;
		let mounted;
		let dispose;

		return {
			c() {
				div1 = element("div");
				div0 = element("div");
				input = element("input");
				attr(input, "class", "input");
				attr(input, "type", "text");
				attr(input, "placeholder", "ÐÐ¾Ð¸ÑÐº");
				attr(div0, "class", "control");
				attr(div1, "class", "field");
			},
			m(target, anchor) {
				insert(target, div1, anchor);
				append(div1, div0);
				append(div0, input);
				set_input_value(input, /*search*/ ctx[2]);

				if (!mounted) {
					dispose = [
						listen(input, "input", /*input_input_handler*/ ctx[19]),
						listen(input, "input", /*onSearchInput*/ ctx[13])
					];

					mounted = true;
				}
			},
			p(ctx, dirty) {
				if (dirty[0] & /*search*/ 4 && input.value !== /*search*/ ctx[2]) {
					set_input_value(input, /*search*/ ctx[2]);
				}
			},
			d(detaching) {
				if (detaching) detach(div1);
				mounted = false;
				run_all(dispose);
			}
		};
	}

	// (111:2) {#if showSelect }
	function create_if_block_2$f(ctx) {
		let th;
		let input;
		let mounted;
		let dispose;

		return {
			c() {
				th = element("th");
				input = element("input");
				attr(input, "type", "checkbox");
				attr(input, "id", "table-row-select-page");
				attr(input, "placeholder", "");
				attr(input, "name", "row_selected_all");
			},
			m(target, anchor) {
				insert(target, th, anchor);
				append(th, input);
				input.checked = /*selectAll*/ ctx[3];

				if (!mounted) {
					dispose = [
						listen(input, "change", /*input_change_handler*/ ctx[20]),
						listen(input, "change", /*onSelectAll*/ ctx[17])
					];

					mounted = true;
				}
			},
			p(ctx, dirty) {
				if (dirty[0] & /*selectAll*/ 8) {
					input.checked = /*selectAll*/ ctx[3];
				}
			},
			d(detaching) {
				if (detaching) detach(th);
				mounted = false;
				run_all(dispose);
			}
		};
	}

	// (114:2) {#each fields as field}
	function create_each_block_2$2(ctx) {
		let th;
		let t_value = /*$LOCALE*/ ctx[12][/*field*/ ctx[29].title] + "";
		let t;
		let th_class_value;

		return {
			c() {
				th = element("th");
				t = text(t_value);
				attr(th, "class", th_class_value = /*field*/ ctx[29].hideOnMobile ? 'is-hidden-touch' : '');
			},
			m(target, anchor) {
				insert(target, th, anchor);
				append(th, t);
			},
			p(ctx, dirty) {
				if (dirty[0] & /*$LOCALE, fields*/ 4160 && t_value !== (t_value = /*$LOCALE*/ ctx[12][/*field*/ ctx[29].title] + "")) set_data(t, t_value);

				if (dirty[0] & /*fields*/ 64 && th_class_value !== (th_class_value = /*field*/ ctx[29].hideOnMobile ? 'is-hidden-touch' : '')) {
					attr(th, "class", th_class_value);
				}
			},
			d(detaching) {
				if (detaching) detach(th);
			}
		};
	}

	// (119:2) {#each items as item (item._id)}
	function create_each_block_1$4(key_1, ctx) {
		let first;
		let uitablerow;
		let current;

		uitablerow = new NotTableRow({
				props: {
					id: /*id*/ ctx[4],
					item: /*item*/ ctx[26],
					fields: /*fields*/ ctx[6],
					helpers: /*helpers*/ ctx[5],
					showSelect: /*showSelect*/ ctx[10],
					getItemId: /*getItemId*/ ctx[11]
				}
			});

		uitablerow.$on("rowSelectChange", /*rowSelectChange_handler*/ ctx[21]);

		return {
			key: key_1,
			first: null,
			c() {
				first = empty();
				create_component(uitablerow.$$.fragment);
				this.first = first;
			},
			m(target, anchor) {
				insert(target, first, anchor);
				mount_component(uitablerow, target, anchor);
				current = true;
			},
			p(new_ctx, dirty) {
				ctx = new_ctx;
				const uitablerow_changes = {};
				if (dirty[0] & /*id*/ 16) uitablerow_changes.id = /*id*/ ctx[4];
				if (dirty[0] & /*items*/ 2) uitablerow_changes.item = /*item*/ ctx[26];
				if (dirty[0] & /*fields*/ 64) uitablerow_changes.fields = /*fields*/ ctx[6];
				if (dirty[0] & /*helpers*/ 32) uitablerow_changes.helpers = /*helpers*/ ctx[5];
				if (dirty[0] & /*showSelect*/ 1024) uitablerow_changes.showSelect = /*showSelect*/ ctx[10];
				if (dirty[0] & /*getItemId*/ 2048) uitablerow_changes.getItemId = /*getItemId*/ ctx[11];
				uitablerow.$set(uitablerow_changes);
			},
			i(local) {
				if (current) return;
				transition_in(uitablerow.$$.fragment, local);
				current = true;
			},
			o(local) {
				transition_out(uitablerow.$$.fragment, local);
				current = false;
			},
			d(detaching) {
				if (detaching) detach(first);
				destroy_component(uitablerow, detaching);
			}
		};
	}

	// (128:2) {#if state.pagination && state.pagination.pages && state.pagination.pages.list }
	function create_if_block$t(ctx) {
		let each_1_anchor;
		let each_value = /*state*/ ctx[0].pagination.pages.list;
		let each_blocks = [];

		for (let i = 0; i < each_value.length; i += 1) {
			each_blocks[i] = create_each_block$9(get_each_context$9(ctx, each_value, i));
		}

		return {
			c() {
				for (let i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].c();
				}

				each_1_anchor = empty();
			},
			m(target, anchor) {
				for (let i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].m(target, anchor);
				}

				insert(target, each_1_anchor, anchor);
			},
			p(ctx, dirty) {
				if (dirty[0] & /*state, goTo*/ 65537) {
					each_value = /*state*/ ctx[0].pagination.pages.list;
					let i;

					for (i = 0; i < each_value.length; i += 1) {
						const child_ctx = get_each_context$9(ctx, each_value, i);

						if (each_blocks[i]) {
							each_blocks[i].p(child_ctx, dirty);
						} else {
							each_blocks[i] = create_each_block$9(child_ctx);
							each_blocks[i].c();
							each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
						}
					}

					for (; i < each_blocks.length; i += 1) {
						each_blocks[i].d(1);
					}

					each_blocks.length = each_value.length;
				}
			},
			d(detaching) {
				destroy_each(each_blocks, detaching);
				if (detaching) detach(each_1_anchor);
			}
		};
	}

	// (133:3) {:else}
	function create_else_block$m(ctx) {
		let a;
		let t_value = /*page*/ ctx[23].index + 1 + "";
		let t;
		let a_aria_label_value;
		let a_data_page_value;
		let mounted;
		let dispose;

		return {
			c() {
				a = element("a");
				t = text(t_value);
				attr(a, "href", "");
				attr(a, "class", "pagination-link");
				attr(a, "aria-label", a_aria_label_value = "Ð¡ÑÑÐ°Ð½Ð¸ÑÐ° " + /*page*/ ctx[23].index);
				attr(a, "data-page", a_data_page_value = /*page*/ ctx[23].index);
			},
			m(target, anchor) {
				insert(target, a, anchor);
				append(a, t);

				if (!mounted) {
					dispose = listen(a, "click", /*goTo*/ ctx[16]);
					mounted = true;
				}
			},
			p(ctx, dirty) {
				if (dirty[0] & /*state*/ 1 && t_value !== (t_value = /*page*/ ctx[23].index + 1 + "")) set_data(t, t_value);

				if (dirty[0] & /*state*/ 1 && a_aria_label_value !== (a_aria_label_value = "Ð¡ÑÑÐ°Ð½Ð¸ÑÐ° " + /*page*/ ctx[23].index)) {
					attr(a, "aria-label", a_aria_label_value);
				}

				if (dirty[0] & /*state*/ 1 && a_data_page_value !== (a_data_page_value = /*page*/ ctx[23].index)) {
					attr(a, "data-page", a_data_page_value);
				}
			},
			d(detaching) {
				if (detaching) detach(a);
				mounted = false;
				dispose();
			}
		};
	}

	// (131:3) {#if page.active}
	function create_if_block_1$m(ctx) {
		let a;
		let t_value = /*page*/ ctx[23].index + 1 + "";
		let t;
		let a_aria_label_value;

		return {
			c() {
				a = element("a");
				t = text(t_value);
				attr(a, "href", "");
				attr(a, "class", "pagination-link is-current");
				attr(a, "aria-label", a_aria_label_value = "Ð¡ÑÑÐ°Ð½Ð¸ÑÐ° " + /*page*/ ctx[23].index);
				attr(a, "aria-current", "page");
			},
			m(target, anchor) {
				insert(target, a, anchor);
				append(a, t);
			},
			p(ctx, dirty) {
				if (dirty[0] & /*state*/ 1 && t_value !== (t_value = /*page*/ ctx[23].index + 1 + "")) set_data(t, t_value);

				if (dirty[0] & /*state*/ 1 && a_aria_label_value !== (a_aria_label_value = "Ð¡ÑÑÐ°Ð½Ð¸ÑÐ° " + /*page*/ ctx[23].index)) {
					attr(a, "aria-label", a_aria_label_value);
				}
			},
			d(detaching) {
				if (detaching) detach(a);
			}
		};
	}

	// (129:2) {#each state.pagination.pages.list as page}
	function create_each_block$9(ctx) {
		let li;
		let t;

		function select_block_type(ctx, dirty) {
			if (/*page*/ ctx[23].active) return create_if_block_1$m;
			return create_else_block$m;
		}

		let current_block_type = select_block_type(ctx);
		let if_block = current_block_type(ctx);

		return {
			c() {
				li = element("li");
				if_block.c();
				t = space();
			},
			m(target, anchor) {
				insert(target, li, anchor);
				if_block.m(li, null);
				append(li, t);
			},
			p(ctx, dirty) {
				if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block.d(1);
					if_block = current_block_type(ctx);

					if (if_block) {
						if_block.c();
						if_block.m(li, t);
					}
				}
			},
			d(detaching) {
				if (detaching) detach(li);
				if_block.d();
			}
		};
	}

	function create_fragment$I(ctx) {
		let t0;
		let t1;
		let t2;
		let table;
		let thead;
		let t3;
		let t4;
		let tbody;
		let each_blocks = [];
		let each1_lookup = new Map();
		let t5;
		let nav;
		let a0;
		let t7;
		let a1;
		let t9;
		let ul;
		let current;
		let mounted;
		let dispose;
		let if_block0 = /*links*/ ctx[8].length && create_if_block_5$4(ctx);
		let if_block1 = /*actions*/ ctx[7].length && create_if_block_4$c(ctx);
		let if_block2 = /*showSearch*/ ctx[9] && create_if_block_3$e(ctx);
		let if_block3 = /*showSelect*/ ctx[10] && create_if_block_2$f(ctx);
		let each_value_2 = /*fields*/ ctx[6];
		let each_blocks_1 = [];

		for (let i = 0; i < each_value_2.length; i += 1) {
			each_blocks_1[i] = create_each_block_2$2(get_each_context_2$2(ctx, each_value_2, i));
		}

		let each_value_1 = /*items*/ ctx[1];
		const get_key = ctx => /*item*/ ctx[26]._id;

		for (let i = 0; i < each_value_1.length; i += 1) {
			let child_ctx = get_each_context_1$4(ctx, each_value_1, i);
			let key = get_key(child_ctx);
			each1_lookup.set(key, each_blocks[i] = create_each_block_1$4(key, child_ctx));
		}

		let if_block4 = /*state*/ ctx[0].pagination && /*state*/ ctx[0].pagination.pages && /*state*/ ctx[0].pagination.pages.list && create_if_block$t(ctx);

		return {
			c() {
				if (if_block0) if_block0.c();
				t0 = space();
				if (if_block1) if_block1.c();
				t1 = space();
				if (if_block2) if_block2.c();
				t2 = space();
				table = element("table");
				thead = element("thead");
				if (if_block3) if_block3.c();
				t3 = space();

				for (let i = 0; i < each_blocks_1.length; i += 1) {
					each_blocks_1[i].c();
				}

				t4 = space();
				tbody = element("tbody");

				for (let i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].c();
				}

				t5 = space();
				nav = element("nav");
				a0 = element("a");
				a0.textContent = "ÐÐ°Ð·Ð°Ð´";
				t7 = space();
				a1 = element("a");
				a1.textContent = "ÐÐ¿ÐµÑÐµÐ´";
				t9 = space();
				ul = element("ul");
				if (if_block4) if_block4.c();
				attr(table, "class", "table");
				attr(a0, "href", "");
				attr(a0, "class", "pagination-previous");
				attr(a1, "href", "");
				attr(a1, "class", "pagination-next");
				attr(ul, "class", "pagination-list");
				attr(nav, "class", "pagination is-centered");
				attr(nav, "role", "navigation");
				attr(nav, "aria-label", "pagination");
			},
			m(target, anchor) {
				if (if_block0) if_block0.m(target, anchor);
				insert(target, t0, anchor);
				if (if_block1) if_block1.m(target, anchor);
				insert(target, t1, anchor);
				if (if_block2) if_block2.m(target, anchor);
				insert(target, t2, anchor);
				insert(target, table, anchor);
				append(table, thead);
				if (if_block3) if_block3.m(thead, null);
				append(thead, t3);

				for (let i = 0; i < each_blocks_1.length; i += 1) {
					each_blocks_1[i].m(thead, null);
				}

				append(table, t4);
				append(table, tbody);

				for (let i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].m(tbody, null);
				}

				insert(target, t5, anchor);
				insert(target, nav, anchor);
				append(nav, a0);
				append(nav, t7);
				append(nav, a1);
				append(nav, t9);
				append(nav, ul);
				if (if_block4) if_block4.m(ul, null);
				current = true;

				if (!mounted) {
					dispose = [
						listen(a0, "click", /*goPrev*/ ctx[14]),
						listen(a1, "click", /*goNext*/ ctx[15])
					];

					mounted = true;
				}
			},
			p(ctx, dirty) {
				if (/*links*/ ctx[8].length) {
					if (if_block0) {
						if_block0.p(ctx, dirty);

						if (dirty[0] & /*links*/ 256) {
							transition_in(if_block0, 1);
						}
					} else {
						if_block0 = create_if_block_5$4(ctx);
						if_block0.c();
						transition_in(if_block0, 1);
						if_block0.m(t0.parentNode, t0);
					}
				} else if (if_block0) {
					group_outros();

					transition_out(if_block0, 1, 1, () => {
						if_block0 = null;
					});

					check_outros();
				}

				if (/*actions*/ ctx[7].length) {
					if (if_block1) {
						if_block1.p(ctx, dirty);

						if (dirty[0] & /*actions*/ 128) {
							transition_in(if_block1, 1);
						}
					} else {
						if_block1 = create_if_block_4$c(ctx);
						if_block1.c();
						transition_in(if_block1, 1);
						if_block1.m(t1.parentNode, t1);
					}
				} else if (if_block1) {
					group_outros();

					transition_out(if_block1, 1, 1, () => {
						if_block1 = null;
					});

					check_outros();
				}

				if (/*showSearch*/ ctx[9]) {
					if (if_block2) {
						if_block2.p(ctx, dirty);
					} else {
						if_block2 = create_if_block_3$e(ctx);
						if_block2.c();
						if_block2.m(t2.parentNode, t2);
					}
				} else if (if_block2) {
					if_block2.d(1);
					if_block2 = null;
				}

				if (/*showSelect*/ ctx[10]) {
					if (if_block3) {
						if_block3.p(ctx, dirty);
					} else {
						if_block3 = create_if_block_2$f(ctx);
						if_block3.c();
						if_block3.m(thead, t3);
					}
				} else if (if_block3) {
					if_block3.d(1);
					if_block3 = null;
				}

				if (dirty[0] & /*fields, $LOCALE*/ 4160) {
					each_value_2 = /*fields*/ ctx[6];
					let i;

					for (i = 0; i < each_value_2.length; i += 1) {
						const child_ctx = get_each_context_2$2(ctx, each_value_2, i);

						if (each_blocks_1[i]) {
							each_blocks_1[i].p(child_ctx, dirty);
						} else {
							each_blocks_1[i] = create_each_block_2$2(child_ctx);
							each_blocks_1[i].c();
							each_blocks_1[i].m(thead, null);
						}
					}

					for (; i < each_blocks_1.length; i += 1) {
						each_blocks_1[i].d(1);
					}

					each_blocks_1.length = each_value_2.length;
				}

				if (dirty[0] & /*id, items, fields, helpers, showSelect, getItemId*/ 3186) {
					each_value_1 = /*items*/ ctx[1];
					group_outros();
					each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value_1, each1_lookup, tbody, outro_and_destroy_block, create_each_block_1$4, null, get_each_context_1$4);
					check_outros();
				}

				if (/*state*/ ctx[0].pagination && /*state*/ ctx[0].pagination.pages && /*state*/ ctx[0].pagination.pages.list) {
					if (if_block4) {
						if_block4.p(ctx, dirty);
					} else {
						if_block4 = create_if_block$t(ctx);
						if_block4.c();
						if_block4.m(ul, null);
					}
				} else if (if_block4) {
					if_block4.d(1);
					if_block4 = null;
				}
			},
			i(local) {
				if (current) return;
				transition_in(if_block0);
				transition_in(if_block1);

				for (let i = 0; i < each_value_1.length; i += 1) {
					transition_in(each_blocks[i]);
				}

				current = true;
			},
			o(local) {
				transition_out(if_block0);
				transition_out(if_block1);

				for (let i = 0; i < each_blocks.length; i += 1) {
					transition_out(each_blocks[i]);
				}

				current = false;
			},
			d(detaching) {
				if (if_block0) if_block0.d(detaching);
				if (detaching) detach(t0);
				if (if_block1) if_block1.d(detaching);
				if (detaching) detach(t1);
				if (if_block2) if_block2.d(detaching);
				if (detaching) detach(t2);
				if (detaching) detach(table);
				if (if_block3) if_block3.d();
				destroy_each(each_blocks_1, detaching);

				for (let i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].d();
				}

				if (detaching) detach(t5);
				if (detaching) detach(nav);
				if (if_block4) if_block4.d();
				mounted = false;
				run_all(dispose);
			}
		};
	}

	function instance$I($$self, $$props, $$invalidate) {
		let $LOCALE;
		component_subscribe($$self, LOCALE, $$value => $$invalidate(12, $LOCALE = $$value));
		let dispatch = createEventDispatcher();
		let { id } = $$props;
		let { helpers = {} } = $$props;
		let { state = {} } = $$props;
		let { fields = [] } = $$props;
		let { selected = {} } = $$props;
		let { items = [] } = $$props;
		let { actions = [] } = $$props;
		let { links = [] } = $$props;
		let { search = '' } = $$props;
		let { showSearch = true } = $$props;
		let { showSelect = true } = $$props;
		let { selectAll = false } = $$props;
		let { getItemId = item => item._id } = $$props;

		onMount(() => {
			if (showSelect) {
				get(id).selected.subscribe(value => {
					$$invalidate(18, selected = value);
				});
			}

			get(id).refined.subscribe(value => {
				$$invalidate(1, items = value);

				if (showSelect) {
					for (let itemId in selected) {
						if (!items.some(item => getItemId(item) === itemId)) {
							delete selected[itemId];
						} else {
							if (!Object.prototype.hasOwnProperty.call(selected, itemId)) {
								$$invalidate(18, selected[itemId] = false, selected);
							}
						}
					}

					$$invalidate(18, selected);
				}
			});

			get(id).state.subscribe(value => {
				$$invalidate(0, state = value);
			});
		});

		function onSearchInput(ev) {
			try {
				let data = ev.currentTarget.value.trim();
				dispatch('searchChange', data);
			} catch(e) {
				return;
			}
		}

		function goPrev() {
			dispatch('goToPrevPage');
		}

		function goNext() {
			dispatch('goToNextPage');
		}

		function goTo(e) {
			e.preventDefault();
			let el = e.target;
			dispatch('goToPage', parseInt(el.dataset.page));
			return false;
		}

		function onSelectAll() {
			get(id).selected.update(value => {
				items.forEach(item => {
					value[getItemId(item)] = selectAll;
				});

				return value;
			});
		}

		function input_input_handler() {
			search = this.value;
			$$invalidate(2, search);
		}

		function input_change_handler() {
			selectAll = this.checked;
			$$invalidate(3, selectAll);
		}

		function rowSelectChange_handler(event) {
			bubble.call(this, $$self, event);
		}

		$$self.$$set = $$props => {
			if ('id' in $$props) $$invalidate(4, id = $$props.id);
			if ('helpers' in $$props) $$invalidate(5, helpers = $$props.helpers);
			if ('state' in $$props) $$invalidate(0, state = $$props.state);
			if ('fields' in $$props) $$invalidate(6, fields = $$props.fields);
			if ('selected' in $$props) $$invalidate(18, selected = $$props.selected);
			if ('items' in $$props) $$invalidate(1, items = $$props.items);
			if ('actions' in $$props) $$invalidate(7, actions = $$props.actions);
			if ('links' in $$props) $$invalidate(8, links = $$props.links);
			if ('search' in $$props) $$invalidate(2, search = $$props.search);
			if ('showSearch' in $$props) $$invalidate(9, showSearch = $$props.showSearch);
			if ('showSelect' in $$props) $$invalidate(10, showSelect = $$props.showSelect);
			if ('selectAll' in $$props) $$invalidate(3, selectAll = $$props.selectAll);
			if ('getItemId' in $$props) $$invalidate(11, getItemId = $$props.getItemId);
		};

		return [
			state,
			items,
			search,
			selectAll,
			id,
			helpers,
			fields,
			actions,
			links,
			showSearch,
			showSelect,
			getItemId,
			$LOCALE,
			onSearchInput,
			goPrev,
			goNext,
			goTo,
			onSelectAll,
			selected,
			input_input_handler,
			input_change_handler,
			rowSelectChange_handler
		];
	}

	class NotTable extends SvelteComponent {
		constructor(options) {
			super();

			init(
				this,
				options,
				instance$I,
				create_fragment$I,
				safe_not_equal,
				{
					id: 4,
					helpers: 5,
					state: 0,
					fields: 6,
					selected: 18,
					items: 1,
					actions: 7,
					links: 8,
					search: 2,
					showSearch: 9,
					showSelect: 10,
					selectAll: 3,
					getItemId: 11
				},
				null,
				[-1, -1]
			);
		}
	}

	var CONST_ID_DUBLICATE_POSTFIX = '__dublicate__';
	var OPT_DEFAULT_PAGE_SIZE = 20,
	    OPT_DEFAULT_PAGE_NUMBER = 0,
	    OPT_DEFAULT_PAGE_RANGE = 6,
	    OPT_DEFAULT_SORT_DIRECTION = 1,
	    OPT_DEFAULT_SEARCH = '',
	    OPT_DEFAULT_RETURN = {},
	    OPT_DEFAULT_COMBINED = false,
	    OPT_DEFAULT_COMBINED_ACTION = 'listAndCount',
	    OPT_DEFAULT_COUNT_ACTION = 'count',
	    OPT_DEFAULT_LIST_ACTION = 'list',
	    OPT_DEFAULT_SORT_FIELD = '_id',
	    OPT_FIELD_NAME_PRE_PROC = 'preprocessor';
	var DEFAULT_OPTIONS = {
	  links: [],
	  actions: [],
	  endless: false,
	  idField: '_id',
	  getItemId: function getItemId(item) {
	    return item._id;
	  }
	};

	var notTable = /*#__PURE__*/function (_EventEmitter) {
	  _inherits(notTable, _EventEmitter);

	  var _super = _createSuper(notTable);

	  function notTable() {
	    var _this;

	    var input = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	    _classCallCheck(this, notTable);

	    _this = _super.call(this);
	    _this.id = 'table-' + Math.random();
	    _this.options = Object.assign(DEFAULT_OPTIONS, input.options ? input.options : {});
	    _this.ui = {};
	    _this.data = {
	      raw: [],
	      filtered: [],
	      refined: [],
	      selected: {}
	    };
	    _this.state = {
	      pagination: {
	        items: {
	          count: 0,
	          from: 0,
	          to: 0
	        },
	        pages: {
	          count: 0,
	          from: 0,
	          to: 0,
	          current: 0,
	          list: []
	        }
	      }
	    };
	    _this.working = {};
	    _this.stores = create(_this.id, {
	      'raw': [],
	      'filtered': [],
	      'refined': [],
	      'selected': {},
	      'state': _this.state,
	      'working': _this.working
	    });

	    _this.stores.working.subscribe(_this.onWorkingUpdate.bind(_assertThisInitialized(_this))); //Ð¿Ð¾Ð»ÑÑÐµÐ½Ð½ÑÐµ Ð¸Ð· ÑÐµÑÐ¸


	    _this.stores.raw.subscribe(_this.onRawUpdate.bind(_assertThisInitialized(_this))); //Ð¿ÑÐ¸Ð¼ÐµÐ½ÐµÐ½Ñ ÑÐ¸Ð»ÑÑÑÑ, ÑÐ¾ÑÑÐ¸ÑÐ¾Ð²ÐºÐ¸ Ð¸ Ñ.Ð´.


	    _this.stores.filtered.subscribe(_this.onFilteredUpdate.bind(_assertThisInitialized(_this))); //ÑÑÐµÐ·Ð°Ð½Ñ Ð´Ð¾ Ð¼Ð¸Ð½Ð¸Ð¼Ð°Ð»ÑÐ½Ð¾Ð³Ð¾ Ð½Ð°Ð±Ð¾ÑÐ°, ÑÐ¾ÑÐ½Ð¾ ÑÐ¾Ð¾ÑÐ²ÐµÑÑÐ²ÑÑÑÐµÐ³Ð¾ ÑÐ°Ð±Ð»Ð¸ÑÐ½Ð¾Ð¼Ñ ÑÐ¾ÑÐ¼Ð°ÑÑ


	    _this.stores.refined.subscribe(_this.onRefinedUpdate.bind(_assertThisInitialized(_this))); //ÑÐ»Ð¾Ð²Ð°ÑÑ Ñ Ð¸Ð´ÐµÐ½ÑÐ¸ÑÐ¸ÐºÐ°ÑÐ¾ÑÐ°Ð¼Ð¸ Ð²ÑÐ±ÑÐ°Ð½Ð½ÑÑ ÑÑÑÐ¾Ðº


	    _this.stores.selected.subscribe(_this.onSelectedUpdate.bind(_assertThisInitialized(_this))); //pagination, items information


	    _this.stores.state.subscribe(_this.onStateUpdate.bind(_assertThisInitialized(_this)));

	    if (Object.prototype.hasOwnProperty.call(input, 'data') && Array.isArray(input.data)) {
	      _this.stores.raw.update(function (val) {
	        val = input.data;
	        return val;
	      });
	    }

	    if (Object.prototype.hasOwnProperty.call(_this.options, 'filter')) {
	      _this.setFilter(_this.options.filter, true);
	    } else {
	      _this.resetFilter();
	    }

	    if (Object.prototype.hasOwnProperty.call(_this.options, 'pager')) {
	      _this.setPager(_this.options.pager, true);
	    } else {
	      _this.resetPager();
	    }

	    if (Object.prototype.hasOwnProperty.call(_this.options, 'sorter')) {
	      _this.setSorter(_this.options.sorter, true);
	    } else {
	      _this.resetSorter(true);
	    }

	    if (Object.prototype.hasOwnProperty.call(_this.options, 'return')) {
	      _this.setReturn(_this.options.return);
	    } else {
	      _this.setReturn();
	    }

	    if (Object.prototype.hasOwnProperty.call(_this.options, 'search')) {
	      _this.setSearch(_this.options.search, true);
	    } else {
	      _this.setSearch();
	    }

	    _this.render();

	    _this.updateData();

	    return _possibleConstructorReturn(_this, _assertThisInitialized(_this));
	  }

	  _createClass(notTable, [{
	    key: "onWorkingUpdate",
	    value: function onWorkingUpdate(val) {
	      this.working = val;
	      return val;
	    }
	  }, {
	    key: "onRawUpdate",
	    value: function onRawUpdate(val) {
	      this.data.raw = val;
	      return val;
	    }
	  }, {
	    key: "onFilteredUpdate",
	    value: function onFilteredUpdate(val) {
	      this.data.filtered = val;
	      this.refineFiltered();
	      return val;
	    }
	  }, {
	    key: "onRefinedUpdate",
	    value: function onRefinedUpdate(val) {
	      this.data.refined = val;
	      this.clearSelected();
	      return val;
	    }
	  }, {
	    key: "onStateUpdate",
	    value: function onStateUpdate(val) {
	      this.state = val;
	      return val;
	    }
	  }, {
	    key: "onSearchChange",
	    value: function onSearchChange(line) {
	      if (line.length > 3) {
	        this.setSearch(line);
	      } else {
	        this.setSearch();
	      }
	    }
	  }, {
	    key: "onSelectedUpdate",
	    value: function onSelectedUpdate(val) {
	      this.data.selected = val;
	    }
	  }, {
	    key: "clearSelected",
	    value: function clearSelected() {
	      this.data.selected = {};
	    }
	  }, {
	    key: "getSelected",
	    value: function getSelected() {
	      var _this2 = this;

	      var object = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
	      var store = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'refined';
	      var res = [];

	      var _loop = function _loop(id) {
	        if (_this2.data.selected[id]) {
	          if (object) {
	            var indx = _this2.data[store].findIndex(function (item) {
	              return item._id === id;
	            });

	            if (indx > -1) {
	              res.push(_this2.data[store][indx]);
	            }
	          } else {
	            res.push(id);
	          }
	        }
	      };

	      for (var id in this.data.selected) {
	        _loop(id);
	      }

	      return res;
	    }
	  }, {
	    key: "getItemId",
	    value: function getItemId(item) {
	      return this.getOptions('getItemId', DEFAULT_OPTIONS.getItemId)(item);
	    }
	  }, {
	    key: "selectAll",
	    value: function selectAll() {
	      var _this3 = this;

	      this.stores.selected.update(function () {
	        var value = {};

	        _this3.data.filtered.forEach(function (item) {
	          value[_this3.getItemId(item)] = true;
	        });

	        return value;
	      });
	    }
	  }, {
	    key: "selectNone",
	    value: function selectNone() {
	      var _this4 = this;

	      this.stores.selected.update(function () {
	        var value = {};

	        _this4.data.filtered.forEach(function (item) {
	          value[_this4.getItemId(item)] = false;
	        });

	        return value;
	      });
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      var _this5 = this;

	      if (!this.ui.table) {
	        this.ui.table = new NotTable({
	          target: this.options.targetEl,
	          props: {
	            id: this.id,
	            helpers: Object.assign({}, this.getHelpers()),
	            fields: this.getOptions('fields'),
	            actions: this.getActions(),
	            links: this.getLinks(),
	            search: '',
	            showSelect: this.getOptions('showSelect'),
	            showSearch: this.getOptions('showSearch'),
	            idField: this.getOptions('idField'),
	            getItemId: this.getOptions('getItemId')
	          }
	        });
	      }

	      this.ui.table.$on('searchChange', function (e) {
	        return _this5.onSearchChange(e.detail);
	      });
	      this.ui.table.$on('goToPage', function (e) {
	        return _this5.goToPage(e.detail);
	      });
	      this.ui.table.$on('goToNextPage', function () {
	        return _this5.goToNext();
	      });
	      this.ui.table.$on('goToPrevPage', function () {
	        return _this5.goToPrev();
	      });
	    }
	  }, {
	    key: "getActions",
	    value: function getActions() {
	      return this.getOptions('actions', []);
	    }
	  }, {
	    key: "getLinks",
	    value: function getLinks() {
	      return this.getOptions('links', []);
	    }
	  }, {
	    key: "getHelpers",
	    value: function getHelpers() {
	      return this.options.helpers || {};
	    }
	  }, {
	    key: "setWorking",
	    value: function setWorking(key, value) {
	      var _this6 = this;

	      this.stores.working.update(function (val) {
	        notPath.set(key, val, _this6.getHelpers(), value);
	        return val;
	      });
	      return this;
	    }
	  }, {
	    key: "getWorking",
	    value: function getWorking(key, def) {
	      var res = notPath.get(key, this.working, this.getHelpers());

	      if (res === undefined) {
	        return def;
	      } else {
	        return res;
	      }
	    }
	  }, {
	    key: "setState",
	    value: function setState(key, value) {
	      var _this7 = this;

	      this.stores.state.update(function (val) {
	        notPath.set(key, val, _this7.getHelpers(), value);
	        return val;
	      });
	      return this;
	    }
	  }, {
	    key: "getState",
	    value: function getState(key, def) {
	      var res = notPath.get(key, this.state, this.getHelpers());

	      if (res === undefined) {
	        return def;
	      } else {
	        return res;
	      }
	    }
	  }, {
	    key: "setOptions",
	    value: function setOptions(key, value) {
	      notPath.set(key, this.options, this.getHelpers(), value);
	      return this;
	    }
	  }, {
	    key: "getOptions",
	    value: function getOptions(key, def) {
	      var res = notPath.get(key, this.options, this.getHelpers());

	      if (res === undefined) {
	        return def;
	      } else {
	        return res;
	      }
	    }
	  }, {
	    key: "setFilter",
	    value: function setFilter(hash) {
	      var withoutInvalidation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
	      this.setState('filter', hash);

	      if (withoutInvalidation) {
	        return this;
	      }

	      this.invalidateData();
	      this.updateData();
	      return this;
	    }
	  }, {
	    key: "resetFilter",
	    value: function resetFilter() {
	      this.setState('filter', {});
	      return this;
	    }
	  }, {
	    key: "getFilter",
	    value: function getFilter() {
	      return this.getState('filter');
	    }
	  }, {
	    key: "setPager",
	    value: function setPager(hash) {
	      var withoutInvalidation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
	      this.setState('pager', hash);

	      if (withoutInvalidation) {
	        return this;
	      }

	      this.updateData();
	      return this;
	    }
	  }, {
	    key: "getDefaultPageNumber",
	    value: function getDefaultPageNumber() {
	      return isNaN(this.getOptions('pager.page')) ? OPT_DEFAULT_PAGE_NUMBER : this.getOptions('pager.page');
	    }
	  }, {
	    key: "getDefaultPageSize",
	    value: function getDefaultPageSize() {
	      return isNaN(this.getOptions('pager.size')) ? OPT_DEFAULT_PAGE_SIZE : this.getOptions('pager.size');
	    }
	  }, {
	    key: "resetPager",
	    value: function resetPager() {
	      this.setState('pager', {
	        size: this.getDefaultPageSize(),
	        page: this.getDefaultPageNumber()
	      });
	    }
	  }, {
	    key: "getPager",
	    value: function getPager() {
	      return this.getState('pager');
	    }
	  }, {
	    key: "setSorter",
	    value: function setSorter(hash) {
	      var withoutInvalidation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
	      this.setWorking('sorter', hash);

	      if (withoutInvalidation) {
	        return this;
	      }

	      this.invalidateData();
	      this.updateData();
	      return this;
	    }
	  }, {
	    key: "resetSorter",
	    value: function resetSorter() {
	      var withoutInvalidation = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
	      var t = {};
	      t[OPT_DEFAULT_SORT_FIELD] = OPT_DEFAULT_SORT_DIRECTION;
	      return this.setSorter(t, withoutInvalidation);
	    }
	  }, {
	    key: "getSorter",
	    value: function getSorter() {
	      return this.getWorking('sorter');
	    }
	  }, {
	    key: "getSorterDirection",
	    value: function getSorterDirection() {
	      try {
	        var names = Object.keys(this.getSorter());
	        return this.getSorter()[names[0]];
	      } catch (e) {
	        return OPT_DEFAULT_SORT_DIRECTION;
	      }
	    }
	  }, {
	    key: "getSearch",
	    value: function getSearch() {
	      var search = typeof this.getWorking('search') !== 'undefined' && this.getWorking('search') !== null;
	      return search ? this.getWorking('search') : '';
	    }
	  }, {
	    key: "setSearch",
	    value: function setSearch() {
	      var line = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : OPT_DEFAULT_SEARCH;
	      var withoutInvalidation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
	      this.setWorking('search', line);

	      if (withoutInvalidation) {
	        return this;
	      }

	      this.invalidateData();
	      this.updateData();
	      return this;
	    }
	  }, {
	    key: "getReturn",
	    value: function getReturn() {
	      return this.getWorking('return');
	    }
	  }, {
	    key: "setReturn",
	    value: function setReturn() {
	      var ret = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : OPT_DEFAULT_RETURN;
	      this.setWorking('return', ret);
	      return this;
	    }
	  }, {
	    key: "clearFilteredData",
	    value: function clearFilteredData() {
	      this.stores.filtered.update(function (val) {
	        val.splice(0, val.length);
	        return val;
	      });
	    }
	  }, {
	    key: "clearRawData",
	    value: function clearRawData() {
	      this.stores.raw.update(function (val) {
	        val.splice(0, val.length);
	        return val;
	      });
	    }
	  }, {
	    key: "clearRefinedData",
	    value: function clearRefinedData() {
	      this.stores.refined.update(function (val) {
	        val.splice(0, val.length);
	        return val;
	      });
	    }
	  }, {
	    key: "invalidateData",
	    value: function invalidateData() {
	      //clearing filtered and sorted
	      this.clearFilteredData(); //in case live loading from server

	      if (this.isLive()) {
	        //clearing loaded data
	        this.clearRawData();
	      } //resset pager anyway


	      this.resetPager();
	    }
	  }, {
	    key: "isLive",
	    value: function isLive() {
	      return this.getOptions('interface') && this.getOptions('interface.factory');
	    }
	  }, {
	    key: "setUpdating",
	    value: function setUpdating() {
	      this.setState('updating', true);
	    }
	  }, {
	    key: "setUpdated",
	    value: function setUpdated() {
	      this.setState('updating', false);
	    }
	  }, {
	    key: "ifUpdating",
	    value: function ifUpdating() {
	      return this.getState('updating');
	    }
	  }, {
	    key: "getDataInterface",
	    value: function getDataInterface() {
	      var factory = this.getOptions('interface.factory');

	      if (typeof factory === 'function') {
	        return factory({});
	      } else {
	        return factory;
	      }
	    }
	  }, {
	    key: "getLoadDataActionName",
	    value: function getLoadDataActionName() {
	      return this.getOptions('interface.listAction') ? this.getOptions('interface.listAction') : OPT_DEFAULT_LIST_ACTION;
	    }
	  }, {
	    key: "getCombinedActionName",
	    value: function getCombinedActionName() {
	      return this.getOptions('interface.combinedAction') ? this.getOptions('interface.combinedAction') : OPT_DEFAULT_COMBINED_ACTION;
	    }
	  }, {
	    key: "getCountActionName",
	    value: function getCountActionName() {
	      return this.getOptions('interface.countAction') ? this.getOptions('interface.countAction') : OPT_DEFAULT_COUNT_ACTION;
	    }
	  }, {
	    key: "loadData",
	    value: function loadData() {
	      //load from server
	      var query = this.getDataInterface().setFilter(this.getFilter()).setSorter(this.getSorter()).setReturn(this.getReturn()).setSearch(this.getSearch()).setPager(this.getPager().size, this.getPager().page),
	          actionName;

	      if (this.getOptions('interface.combined', OPT_DEFAULT_COMBINED)) {
	        actionName = this.getCombinedActionName();
	      } else {
	        actionName = this.getLoadDataActionName();
	      }

	      return query['$' + actionName]();
	    }
	  }, {
	    key: "goToNext",
	    value: function goToNext() {
	      var next = isNaN(this.getState('pager.page')) ? this.getDefaultPageNumber() : this.getState('pager.page') + 1;
	      this.setState('pager.page', Math.min(next, this.getState('pagination.pages.to')));
	      this.updateData();
	    }
	  }, {
	    key: "goToPrev",
	    value: function goToPrev() {
	      var prev = isNaN(this.getState('pager.page')) ? this.getDefaultPageNumber() : this.getState('pager.page') - 1;
	      this.setState('pager.page', Math.max(prev, this.getState('pagination.pages.from')));
	      this.updateData();
	    }
	  }, {
	    key: "goToFirst",
	    value: function goToFirst() {
	      this.setState('pager.page', this.getState('pagination.pages.from'));
	      this.updateData();
	    }
	  }, {
	    key: "goToLast",
	    value: function goToLast() {
	      this.setState('pager.page', this.getState('pagination.pages.to'));
	      this.updateData();
	    }
	  }, {
	    key: "goToPage",
	    value: function goToPage(pageNumber) {
	      this.setState('pager.page', pageNumber);
	      this.updateData();
	    }
	  }, {
	    key: "testDataItem",
	    value: function testDataItem(item) {
	      var strValue = this.getSearch().toLowerCase();

	      for (var k in item) {
	        var toComp = item[k].toString().toLowerCase();

	        if (toComp.indexOf(strValue) > -1) {
	          return true;
	        }
	      }

	      return false;
	    }
	  }, {
	    key: "getRowsCount",
	    value: function getRowsCount() {
	      var _this8 = this;

	      var query = this.getDataInterface().setFilter(this.getFilter());
	      return query['$' + this.getCountActionName()]().then(function (data) {
	        _this8.updatePagination(data.count);
	      }).catch(function (e) {
	        _this8.error(e);
	      });
	    }
	  }, {
	    key: "updatePagination",
	    value: function updatePagination(itemsCount) {
	      var _this9 = this;

	      this.log('update pagination', itemsCount);
	      this.state.pagination.pages.list.splice(0, this.state.pagination.pages.list.length);
	      var itemsFrom = (this.getPager().page - OPT_DEFAULT_PAGE_NUMBER) * this.getPager().size + 1,
	          pagesCount = itemsCount % this.getPager().size ? Math.floor(itemsCount / this.getPager().size) + 1 : Math.round(itemsCount / this.getPager().size),
	          pagesFrom = Math.max(OPT_DEFAULT_PAGE_NUMBER, this.getPager().page - OPT_DEFAULT_PAGE_RANGE),
	          pagesTo = Math.min(pagesCount - (1 - OPT_DEFAULT_PAGE_NUMBER), this.getPager().page + OPT_DEFAULT_PAGE_RANGE),
	          list = [],
	          itemsTo = Math.min(itemsFrom + this.getPager().size - 1, itemsCount);

	      for (var t = pagesFrom; t <= pagesTo; t++) {
	        list.push({
	          index: t,
	          active: t === this.getPager().page
	        });
	      }

	      this.stores.state.update(function (val) {
	        var _val$pagination$pages;

	        _this9.log('update pagination', val);

	        val.pagination.items.count = itemsCount;
	        val.pagination.items.from = itemsFrom;
	        val.pagination.items.to = itemsTo;
	        val.pagination.pages.count = pagesCount;
	        val.pagination.pages.from = pagesFrom;
	        val.pagination.pages.to = pagesTo;
	        val.pagination.pages.current = _this9.getPager().page;

	        (_val$pagination$pages = val.pagination.pages.list).splice.apply(_val$pagination$pages, [0, val.pagination.pages.list.length].concat(list));

	        return val;
	      });
	    }
	  }, {
	    key: "updateData",
	    value: function updateData() {
	      var _this10 = this;

	      if (this.isLive()) {
	        if (this.ifUpdating()) {
	          return;
	        }

	        if (!this.getOptions('endless', false)) {
	          this.clearRawData();
	        }

	        this.setUpdating();

	        if (this.getOptions('interface.combined', OPT_DEFAULT_COMBINED)) {
	          this.loadData().then(function (data) {
	            var full = Object.prototype.hasOwnProperty.call(data, 'status') && Object.prototype.hasOwnProperty.call(data, 'result');

	            _this10.stores.filtered.update(function (val) {
	              if (!_this10.getOptions('endless', false)) {
	                _this10.clearFilteredData();
	              }

	              if (full) {
	                val.push.apply(val, _toConsumableArray(data.result.list));
	              } else {
	                if (Object.prototype.hasOwnProperty.call(data, 'list') && Array.isArray(data.list)) {
	                  val.push.apply(val, _toConsumableArray(data.list));
	                } else if (Array.isArray(data)) {
	                  val.push.apply(val, _toConsumableArray(data));
	                }
	              }

	              return val;
	            });

	            _this10.setWorking('lastCount', full ? data.result.count : data.count);
	          }).then(function () {
	            _this10.updatePagination(_this10.getWorking('lastCount'));
	          }).catch(this.error.bind(this)).then(this.setUpdated.bind(this));
	        } else {
	          this.loadData().then(function (data) {
	            _this10.stores.filtered.update(function (val) {
	              val.push.apply(val, _toConsumableArray(data));
	              return val;
	            });
	          }).then(this.getRowsCount.bind(this)).catch(this.error.bind(this)).then(this.setUpdated.bind(this));
	        }
	      } else {
	        //local magic
	        this.setUpdating();
	        this.processData();
	        this.setUpdated();
	      }
	    }
	  }, {
	    key: "getData",
	    value: function getData() {
	      return this.data;
	    }
	  }, {
	    key: "processData",
	    value: function processData() {
	      var _this11 = this;

	      var thatFilter = this.getFilter(); //this.getData('rows').__setPassive;

	      this.log(this.getData());

	      if (typeof thatFilter !== 'undefined' && thatFilter !== null && typeof thatFilter.filterSearch !== 'undefined' && thatFilter.filterSearch !== null && thatFilter.filterSearch.length > 0) {
	        this.stores.filtered.update(function (val) {
	          val.splice.apply(val, [0, val.length].concat(_toConsumableArray(_this11.data.raw.filter(_this11.testDataItem.bind(_this11)))));
	          return val;
	        });
	      } else {
	        this.stores.filtered.update(function (val) {
	          val.splice.apply(val, [0, val.length].concat(_toConsumableArray(_this11.data.raw)));
	          return val;
	        });
	      } ////sorter


	      var thatSorter = this.getSorter();

	      if (typeof thatSorter !== 'undefined' && thatSorter !== null) {
	        this.stores.filtered.update(function (val) {
	          val.sort(function (item1, item2) {
	            var t1 = notPath.get(thatSorter.sortByField, item1, {}),
	                t2 = notPath.get(thatSorter.sortByField, item2, {});

	            if (isNaN(t1)) {
	              if (typeof t1 !== 'undefined' && typeof t2 !== 'undefined' && t1.localeCompare) {
	                return t1.localeCompare() * -thatSorter.sortDirection;
	              } else {
	                return 0;
	              }
	            } else {
	              return (t1 < t2 ? 1 : -1) * thatSorter.sortDirection;
	            }
	          });
	          return val;
	        });
	      }
	    }
	  }, {
	    key: "error",
	    value: function error() {
	      if (this.options.logger) {
	        var _this$options$logger;

	        (_this$options$logger = this.options.logger).error.apply(_this$options$logger, arguments);
	      }
	    }
	  }, {
	    key: "log",
	    value: function log() {
	      if (this.options.logger) {
	        var _this$options$logger2;

	        (_this$options$logger2 = this.options.logger).log.apply(_this$options$logger2, arguments);
	      }
	    }
	  }, {
	    key: "checkFieldsNames",
	    value: function checkFieldsNames() {
	      var fieldId = this.getOptions('idField');
	      var pathId = ':' + fieldId;
	      var fields = this.getOptions('fields', []);
	      fields.forEach(function (field) {
	        if (pathId === field.path) {
	          field.path = field.path + CONST_ID_DUBLICATE_POSTFIX;
	        }
	      });
	    }
	  }, {
	    key: "readFieldValue",
	    value: function readFieldValue(path, item, helpers) {
	      if (path.indexOf(CONST_ID_DUBLICATE_POSTFIX) > -1) {
	        var fieldId = this.getOptions('idField');
	        var pathId = ':' + fieldId;
	        return notPath.get(pathId, item, helpers);
	      } else {
	        return notPath.get(path, item, helpers);
	      }
	    }
	  }, {
	    key: "refineFiltered",
	    value: function refineFiltered() {
	      var _this12 = this;

	      var result = [];
	      this.checkFieldsNames();
	      this.data.filtered.forEach(function (item, index) {
	        var refined = {};

	        if (_this12.getOptions('idField')) {
	          refined[_this12.getOptions('idField')] = item[_this12.getOptions('idField')];
	        }

	        _this12.getOptions('fields', []).forEach(function (field) {
	          var preprocessed = null,
	              val = _this12.readFieldValue(field.path, item, _this12.getOptions('helpers'));

	          if (Object.prototype.hasOwnProperty.call(field, OPT_FIELD_NAME_PRE_PROC)) {
	            try {
	              preprocessed = field[OPT_FIELD_NAME_PRE_PROC](val, item, index);
	            } catch (e) {
	              _this12.error('Error while preprocessing cell value', val, item, index);

	              _this12.error(e);
	            }

	            notPath.set(field.path, refined, preprocessed);
	          } else {
	            notPath.set(field.path, refined, val);
	          }
	        });

	        result.push(refined);
	      });
	      this.stores.refined.update(function (val) {
	        val.splice.apply(val, [0, val.length].concat(result));
	        return val;
	      });
	    }
	  }, {
	    key: "$destroy",
	    value: function $destroy() {
	      for (var name in this.ui) {
	        this.ui[name].$destroy && this.ui[name].$destroy();
	        delete this.ui[name];
	      }
	    }
	  }]);

	  return notTable;
	}(EventEmitter);

	var Menu = /*#__PURE__*/function () {
	  function Menu() {
	    _classCallCheck(this, Menu);
	  }

	  _createClass(Menu, null, [{
	    key: "setApp",
	    value: function setApp(app) {
	      if (!this.app) {
	        this.app = app;
	      }

	      return this;
	    }
	  }, {
	    key: "setOptions",
	    value: function setOptions(options) {
	      this.options = _objectSpread2(_objectSpread2({}, this.options), options);
	      return this;
	    }
	  }, {
	    key: "getOptionsPathTo",
	    value: function getOptionsPathTo(what) {
	      return "menu.".concat(this.options.type, ".").concat(what);
	    }
	  }, {
	    key: "isDirectNavigation",
	    value: function isDirectNavigation() {
	      return this.app ? this.app.getOptions(this.getOptionsPathTo('directNavigation'), this.options.directNavigation) : this.options.directNavigation;
	    }
	  }, {
	    key: "getOptions",
	    value: function getOptions() {
	      if (this.app) {
	        return {
	          brand: this.app.getOptions('brand', this.options.brand),
	          items: this.app.getOptions(this.getOptionsPathTo('items'), this.options.items),
	          sections: this.app.getOptions(this.getOptionsPathTo('sections'), this.options.sections),
	          targetSelector: this.app.getOptions(this.getOptionsPathTo('targetSelector'), this.options.targetSelector),
	          toggleSelector: this.app.getOptions(this.getOptionsPathTo('toggleSelector'), this.options.toggleSelector),
	          open: this.app.getOptions(this.getOptionsPathTo('open'), this.options.open),
	          directNavigation: this.app.getOptions(this.getOptionsPathTo('directNavigation'), this.options.directNavigation),
	          root: this.app.getOptions('router.root', this.options.root),
	          navigate: this.options.navigate.bind(this),
	          getComponent: this.getComponent.bind(this)
	        };
	      } else {
	        return this.options;
	      }
	    }
	  }, {
	    key: "getComponent",
	    value: function getComponent(name) {
	      if (COMPONENTS.contains(name)) {
	        return COMPONENTS.get(name);
	      } else {
	        return false;
	      }
	    }
	  }, {
	    key: "initField",
	    value: function initField(list) {
	      var _this = this;

	      var fields = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
	      list.forEach(function (item) {
	        fields.forEach(function (field) {
	          if (!Object.prototype.hasOwnProperty.call(item, field)) {
	            item[field] = _this.DEFAULT[field];
	          }
	        });

	        if (Object.prototype.hasOwnProperty.call(item, 'items')) {
	          _this.initField(item.items, fields);
	        }
	      });
	    }
	  }, {
	    key: "sortList",
	    value: function sortList(list) {
	      var _this2 = this;

	      list.sort(function (item1, item2) {
	        if (Object.prototype.hasOwnProperty.call(item1, 'items')) {
	          _this2.sortList(item1.items);
	        }

	        if (Object.prototype.hasOwnProperty.call(item2, 'items')) {
	          _this2.sortList(item2.items);
	        }

	        if (item1.priority === item2.priority) {
	          return item1.title > item2.title ? 1 : -1;
	        } else {
	          return item1.priority < item2.priority ? 1 : -1;
	        }
	      });
	    }
	  }, {
	    key: "removeDublicates",
	    value: function removeDublicates(sections) {
	      var _loop = function _loop(i) {
	        var priority = sections[i].priority;
	        sections.filter(function (section) {
	          return section.id === sections[i].id;
	        }).forEach(function (item, indx) {
	          if (indx === 0) {
	            return;
	          }

	          if (item.priority < priority) {
	            priority = item.priority;
	          }

	          sections.splice(sections.indexOf(item), 1);
	        });
	        sections[i].priority = priority;
	      };

	      for (var i = 0; i < sections.length; i++) {
	        _loop(i);
	      }

	      return sections;
	    }
	  }, {
	    key: "prepareData",
	    value: function prepareData() {
	      var items = [];
	      items.push.apply(items, _toConsumableArray(this.getOptions().items));
	      var sections = [];
	      sections.push.apply(sections, _toConsumableArray(this.getOptions().sections));
	      this.initField(sections, ['priority']);
	      this.removeDublicates(sections);
	      this.initField(items, ['priority', 'section', 'type']);
	      this.sortList(sections);
	      sections.push({
	        id: this.DEFAULT.section,
	        title: this.DEFAULT.sectionTitle
	      });
	      this.sortList(items);
	      this.sections = sections;
	      this.items = items;
	    }
	  }, {
	    key: "remove",
	    value: function remove() {
	      if (this.menu) {
	        this.menu.$destroy();
	        this.menu = null;
	        clearInterval(this.interval);
	      }
	    }
	  }, {
	    key: "updateIndicator",
	    value: function updateIndicator(sectionId, itemId, state) {
	      this.updateSection(sectionId, function (section) {
	        section.indicator.state = state;
	      });
	      this.updateItem(itemId, function (item) {
	        item.indicator.state = state;
	      });
	    }
	  }, {
	    key: "updateTag",
	    value: function updateTag(sectionId, itemId, tag) {
	      this.updateSection(sectionId, function (section) {
	        section.tag = tag;
	      });
	      this.updateItem(itemId, function (item) {
	        item.tag = tag;
	      });
	    }
	  }, {
	    key: "updateSectionTag",
	    value: function updateSectionTag(sectionId, tag) {
	      this.updateSection(sectionId, function (section) {
	        section.tag = _objectSpread2(_objectSpread2({}, section.tag), tag);
	      });
	    }
	  }, {
	    key: "updateItemTag",
	    value: function updateItemTag(itemId, tag) {
	      this.updateItem(itemId, function (item) {
	        item.tag = _objectSpread2(_objectSpread2({}, item.tag), tag);
	      });
	    }
	  }, {
	    key: "updateSection",
	    value: function updateSection(sectionId, proc) {
	      if (this.sections && sectionId) {
	        for (var section in this.sections) {
	          if (this.sections[section].id !== sectionId) continue;
	          proc(this.sections[section]);
	        }

	        if (this.menu) {
	          this.menu.$set({
	            sections: this.sections
	          });
	        }
	      }
	    }
	  }, {
	    key: "updateSectionItems",
	    value: function updateSectionItems(sectionId, proc) {
	      if (this.sections && sectionId) {
	        var _this$items;

	        var oldList = this.items.filter(function (item) {
	          return item.section === sectionId;
	        });

	        var _iterator = _createForOfIteratorHelper(oldList),
	            _step;

	        try {
	          for (_iterator.s(); !(_step = _iterator.n()).done;) {
	            var i = _step.value;
	            this.items.splice(this.items.indexOf(i), 1);
	          }
	        } catch (err) {
	          _iterator.e(err);
	        } finally {
	          _iterator.f();
	        }

	        (_this$items = this.items).push.apply(_this$items, _toConsumableArray(proc(oldList)));

	        if (this.menu) {
	          this.menu.$set({
	            items: this.items
	          });
	        }
	      }
	    }
	  }, {
	    key: "updateItem",
	    value: function updateItem(itemId, proc) {
	      if (itemId && this.items) {
	        this.items.forEach(function (item) {
	          if (item.id !== itemId) return;
	          proc(item);
	        });

	        if (this.menu) {
	          this.menu.$set({
	            items: this.items
	          });
	        }
	      }
	    }
	  }, {
	    key: "isTouch",
	    value: function isTouch() {
	      return window.innerWidth <= this.MAX_TOUCH_WIDTH;
	    }
	  }, {
	    key: "getSectionComponent",
	    value: function getSectionComponent() {}
	  }]);

	  return Menu;
	}();

	_defineProperty(Menu, "MAX_TOUCH_WIDTH", 1023);

	_defineProperty(Menu, "DEFAULT", {
	  section: 'any',
	  sectionTitle: 'ÐÐµÐ½Ñ',
	  priority: 0,
	  //link, button, dropdown, component
	  type: 'link'
	});

	_defineProperty(Menu, "app", false);

	_defineProperty(Menu, "directNavigation", false);

	_defineProperty(Menu, "menu", void 0);

	_defineProperty(Menu, "options", {
	  directNavigation: false,
	  navigate: function navigate(urls) {
	    Menu.hide();

	    if (!Menu.isDirectNavigation() && Menu.app) {
	      var func = Menu.app.getWorking('router');

	      if (func) {
	        return func.navigate(urls.short);
	      }
	    }

	    document.location.assign(urls.full);
	  }
	});

	_defineProperty(Menu, "items", []);

	_defineProperty(Menu, "sections", []);

	_defineProperty(Menu, "location", void 0);

	_defineProperty(Menu, "interval", void 0);

	/* src/frame/components/navigation/side/ui.item.without.children.svelte generated by Svelte v3.44.3 */

	function create_else_block$l(ctx) {
		let li;
		let t0_value = /*$LOCALE*/ ctx[2][/*item*/ ctx[1].title] + "";
		let t0;
		let t1;
		let t2;
		let li_class_value;
		let current;
		let if_block0 = /*item*/ ctx[1].tag && create_if_block_4$b(ctx);
		let if_block1 = /*item*/ ctx[1].indicator && create_if_block_3$d(ctx);

		return {
			c() {
				li = element("li");
				t0 = text(t0_value);
				t1 = space();
				if (if_block0) if_block0.c();
				t2 = space();
				if (if_block1) if_block1.c();
				attr(li, "class", li_class_value = "is-no-follow-subtitle " + /*item*/ ctx[1].classes);
			},
			m(target, anchor) {
				insert(target, li, anchor);
				append(li, t0);
				append(li, t1);
				if (if_block0) if_block0.m(li, null);
				append(li, t2);
				if (if_block1) if_block1.m(li, null);
				current = true;
			},
			p(ctx, dirty) {
				if ((!current || dirty & /*$LOCALE, item*/ 6) && t0_value !== (t0_value = /*$LOCALE*/ ctx[2][/*item*/ ctx[1].title] + "")) set_data(t0, t0_value);

				if (/*item*/ ctx[1].tag) {
					if (if_block0) {
						if_block0.p(ctx, dirty);

						if (dirty & /*item*/ 2) {
							transition_in(if_block0, 1);
						}
					} else {
						if_block0 = create_if_block_4$b(ctx);
						if_block0.c();
						transition_in(if_block0, 1);
						if_block0.m(li, t2);
					}
				} else if (if_block0) {
					group_outros();

					transition_out(if_block0, 1, 1, () => {
						if_block0 = null;
					});

					check_outros();
				}

				if (/*item*/ ctx[1].indicator) {
					if (if_block1) {
						if_block1.p(ctx, dirty);

						if (dirty & /*item*/ 2) {
							transition_in(if_block1, 1);
						}
					} else {
						if_block1 = create_if_block_3$d(ctx);
						if_block1.c();
						transition_in(if_block1, 1);
						if_block1.m(li, null);
					}
				} else if (if_block1) {
					group_outros();

					transition_out(if_block1, 1, 1, () => {
						if_block1 = null;
					});

					check_outros();
				}

				if (!current || dirty & /*item*/ 2 && li_class_value !== (li_class_value = "is-no-follow-subtitle " + /*item*/ ctx[1].classes)) {
					attr(li, "class", li_class_value);
				}
			},
			i(local) {
				if (current) return;
				transition_in(if_block0);
				transition_in(if_block1);
				current = true;
			},
			o(local) {
				transition_out(if_block0);
				transition_out(if_block1);
				current = false;
			},
			d(detaching) {
				if (detaching) detach(li);
				if (if_block0) if_block0.d();
				if (if_block1) if_block1.d();
			}
		};
	}

	// (22:0) {#if (typeof item.url !== 'undefined' && item.url!==false) }
	function create_if_block$s(ctx) {
		let li;
		let a;
		let t0_value = /*$LOCALE*/ ctx[2][/*item*/ ctx[1].title] + "";
		let t0;
		let t1;
		let t2;
		let a_href_value;
		let a_data_href_value;
		let li_class_value;
		let current;
		let mounted;
		let dispose;
		let if_block0 = /*item*/ ctx[1].tag && create_if_block_2$e(ctx);
		let if_block1 = /*item*/ ctx[1].indicator && create_if_block_1$l(ctx);

		return {
			c() {
				li = element("li");
				a = element("a");
				t0 = text(t0_value);
				t1 = space();
				if (if_block0) if_block0.c();
				t2 = space();
				if (if_block1) if_block1.c();
				attr(a, "href", a_href_value = "" + (/*root*/ ctx[0] + /*item*/ ctx[1].url));
				attr(a, "data-href", a_data_href_value = /*item*/ ctx[1].url);
				attr(li, "class", li_class_value = /*item*/ ctx[1].classes);
			},
			m(target, anchor) {
				insert(target, li, anchor);
				append(li, a);
				append(a, t0);
				append(a, t1);
				if (if_block0) if_block0.m(a, null);
				append(a, t2);
				if (if_block1) if_block1.m(a, null);
				current = true;

				if (!mounted) {
					dispose = listen(a, "click", /*onClick*/ ctx[3]);
					mounted = true;
				}
			},
			p(ctx, dirty) {
				if ((!current || dirty & /*$LOCALE, item*/ 6) && t0_value !== (t0_value = /*$LOCALE*/ ctx[2][/*item*/ ctx[1].title] + "")) set_data(t0, t0_value);

				if (/*item*/ ctx[1].tag) {
					if (if_block0) {
						if_block0.p(ctx, dirty);

						if (dirty & /*item*/ 2) {
							transition_in(if_block0, 1);
						}
					} else {
						if_block0 = create_if_block_2$e(ctx);
						if_block0.c();
						transition_in(if_block0, 1);
						if_block0.m(a, t2);
					}
				} else if (if_block0) {
					group_outros();

					transition_out(if_block0, 1, 1, () => {
						if_block0 = null;
					});

					check_outros();
				}

				if (/*item*/ ctx[1].indicator) {
					if (if_block1) {
						if_block1.p(ctx, dirty);

						if (dirty & /*item*/ 2) {
							transition_in(if_block1, 1);
						}
					} else {
						if_block1 = create_if_block_1$l(ctx);
						if_block1.c();
						transition_in(if_block1, 1);
						if_block1.m(a, null);
					}
				} else if (if_block1) {
					group_outros();

					transition_out(if_block1, 1, 1, () => {
						if_block1 = null;
					});

					check_outros();
				}

				if (!current || dirty & /*root, item*/ 3 && a_href_value !== (a_href_value = "" + (/*root*/ ctx[0] + /*item*/ ctx[1].url))) {
					attr(a, "href", a_href_value);
				}

				if (!current || dirty & /*item*/ 2 && a_data_href_value !== (a_data_href_value = /*item*/ ctx[1].url)) {
					attr(a, "data-href", a_data_href_value);
				}

				if (!current || dirty & /*item*/ 2 && li_class_value !== (li_class_value = /*item*/ ctx[1].classes)) {
					attr(li, "class", li_class_value);
				}
			},
			i(local) {
				if (current) return;
				transition_in(if_block0);
				transition_in(if_block1);
				current = true;
			},
			o(local) {
				transition_out(if_block0);
				transition_out(if_block1);
				current = false;
			},
			d(detaching) {
				if (detaching) detach(li);
				if (if_block0) if_block0.d();
				if (if_block1) if_block1.d();
				mounted = false;
				dispose();
			}
		};
	}

	// (36:2) {#if item.tag }
	function create_if_block_4$b(ctx) {
		let uiindicator;
		let current;
		const uiindicator_spread_levels = [{ id: /*item*/ ctx[1].id }, /*item*/ ctx[1].tag];
		let uiindicator_props = {};

		for (let i = 0; i < uiindicator_spread_levels.length; i += 1) {
			uiindicator_props = assign(uiindicator_props, uiindicator_spread_levels[i]);
		}

		uiindicator = new Ui_indicator({ props: uiindicator_props });

		return {
			c() {
				create_component(uiindicator.$$.fragment);
			},
			m(target, anchor) {
				mount_component(uiindicator, target, anchor);
				current = true;
			},
			p(ctx, dirty) {
				const uiindicator_changes = (dirty & /*item*/ 2)
				? get_spread_update(uiindicator_spread_levels, [{ id: /*item*/ ctx[1].id }, get_spread_object(/*item*/ ctx[1].tag)])
				: {};

				uiindicator.$set(uiindicator_changes);
			},
			i(local) {
				if (current) return;
				transition_in(uiindicator.$$.fragment, local);
				current = true;
			},
			o(local) {
				transition_out(uiindicator.$$.fragment, local);
				current = false;
			},
			d(detaching) {
				destroy_component(uiindicator, detaching);
			}
		};
	}

	// (39:2) {#if item.indicator }
	function create_if_block_3$d(ctx) {
		let uiindicator;
		let current;
		const uiindicator_spread_levels = [{ id: /*item*/ ctx[1].id }, /*item*/ ctx[1].indicator];
		let uiindicator_props = {};

		for (let i = 0; i < uiindicator_spread_levels.length; i += 1) {
			uiindicator_props = assign(uiindicator_props, uiindicator_spread_levels[i]);
		}

		uiindicator = new Ui_indicator({ props: uiindicator_props });

		return {
			c() {
				create_component(uiindicator.$$.fragment);
			},
			m(target, anchor) {
				mount_component(uiindicator, target, anchor);
				current = true;
			},
			p(ctx, dirty) {
				const uiindicator_changes = (dirty & /*item*/ 2)
				? get_spread_update(uiindicator_spread_levels, [{ id: /*item*/ ctx[1].id }, get_spread_object(/*item*/ ctx[1].indicator)])
				: {};

				uiindicator.$set(uiindicator_changes);
			},
			i(local) {
				if (current) return;
				transition_in(uiindicator.$$.fragment, local);
				current = true;
			},
			o(local) {
				transition_out(uiindicator.$$.fragment, local);
				current = false;
			},
			d(detaching) {
				destroy_component(uiindicator, detaching);
			}
		};
	}

	// (26:2) {#if item.tag }
	function create_if_block_2$e(ctx) {
		let uiindicator;
		let current;
		const uiindicator_spread_levels = [{ id: /*item*/ ctx[1].id }, /*item*/ ctx[1].tag];
		let uiindicator_props = {};

		for (let i = 0; i < uiindicator_spread_levels.length; i += 1) {
			uiindicator_props = assign(uiindicator_props, uiindicator_spread_levels[i]);
		}

		uiindicator = new Ui_indicator({ props: uiindicator_props });

		return {
			c() {
				create_component(uiindicator.$$.fragment);
			},
			m(target, anchor) {
				mount_component(uiindicator, target, anchor);
				current = true;
			},
			p(ctx, dirty) {
				const uiindicator_changes = (dirty & /*item*/ 2)
				? get_spread_update(uiindicator_spread_levels, [{ id: /*item*/ ctx[1].id }, get_spread_object(/*item*/ ctx[1].tag)])
				: {};

				uiindicator.$set(uiindicator_changes);
			},
			i(local) {
				if (current) return;
				transition_in(uiindicator.$$.fragment, local);
				current = true;
			},
			o(local) {
				transition_out(uiindicator.$$.fragment, local);
				current = false;
			},
			d(detaching) {
				destroy_component(uiindicator, detaching);
			}
		};
	}

	// (29:2) {#if item.indicator }
	function create_if_block_1$l(ctx) {
		let uiindicator;
		let current;
		const uiindicator_spread_levels = [{ id: /*item*/ ctx[1].id }, /*item*/ ctx[1].indicator];
		let uiindicator_props = {};

		for (let i = 0; i < uiindicator_spread_levels.length; i += 1) {
			uiindicator_props = assign(uiindicator_props, uiindicator_spread_levels[i]);
		}

		uiindicator = new Ui_indicator({ props: uiindicator_props });

		return {
			c() {
				create_component(uiindicator.$$.fragment);
			},
			m(target, anchor) {
				mount_component(uiindicator, target, anchor);
				current = true;
			},
			p(ctx, dirty) {
				const uiindicator_changes = (dirty & /*item*/ 2)
				? get_spread_update(uiindicator_spread_levels, [{ id: /*item*/ ctx[1].id }, get_spread_object(/*item*/ ctx[1].indicator)])
				: {};

				uiindicator.$set(uiindicator_changes);
			},
			i(local) {
				if (current) return;
				transition_in(uiindicator.$$.fragment, local);
				current = true;
			},
			o(local) {
				transition_out(uiindicator.$$.fragment, local);
				current = false;
			},
			d(detaching) {
				destroy_component(uiindicator, detaching);
			}
		};
	}

	function create_fragment$H(ctx) {
		let current_block_type_index;
		let if_block;
		let if_block_anchor;
		let current;
		const if_block_creators = [create_if_block$s, create_else_block$l];
		const if_blocks = [];

		function select_block_type(ctx, dirty) {
			if (typeof /*item*/ ctx[1].url !== 'undefined' && /*item*/ ctx[1].url !== false) return 0;
			return 1;
		}

		current_block_type_index = select_block_type(ctx);
		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

		return {
			c() {
				if_block.c();
				if_block_anchor = empty();
			},
			m(target, anchor) {
				if_blocks[current_block_type_index].m(target, anchor);
				insert(target, if_block_anchor, anchor);
				current = true;
			},
			p(ctx, [dirty]) {
				let previous_block_index = current_block_type_index;
				current_block_type_index = select_block_type(ctx);

				if (current_block_type_index === previous_block_index) {
					if_blocks[current_block_type_index].p(ctx, dirty);
				} else {
					group_outros();

					transition_out(if_blocks[previous_block_index], 1, 1, () => {
						if_blocks[previous_block_index] = null;
					});

					check_outros();
					if_block = if_blocks[current_block_type_index];

					if (!if_block) {
						if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
						if_block.c();
					} else {
						if_block.p(ctx, dirty);
					}

					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			},
			i(local) {
				if (current) return;
				transition_in(if_block);
				current = true;
			},
			o(local) {
				transition_out(if_block);
				current = false;
			},
			d(detaching) {
				if_blocks[current_block_type_index].d(detaching);
				if (detaching) detach(if_block_anchor);
			}
		};
	}

	function instance$H($$self, $$props, $$invalidate) {
		let $LOCALE;
		component_subscribe($$self, LOCALE, $$value => $$invalidate(2, $LOCALE = $$value));
		const dispatch = createEventDispatcher();
		let { root = '' } = $$props;
		let { item = {} } = $$props;

		function onClick(ev) {
			ev.preventDefault();

			dispatch('navigate', {
				full: ev.target.getAttribute('href'),
				short: ev.target.dataset.href
			});

			return false;
		}

		$$self.$$set = $$props => {
			if ('root' in $$props) $$invalidate(0, root = $$props.root);
			if ('item' in $$props) $$invalidate(1, item = $$props.item);
		};

		return [root, item, $LOCALE, onClick];
	}

	class Ui_item_without_children extends SvelteComponent {
		constructor(options) {
			super();
			init(this, options, instance$H, create_fragment$H, safe_not_equal, { root: 0, item: 1 });
		}
	}

	/* src/frame/components/navigation/side/ui.trigger.svelte generated by Svelte v3.44.3 */

	function create_fragment$G(ctx) {
		let span;
		let i;
		let i_class_value;
		let mounted;
		let dispose;

		return {
			c() {
				span = element("span");
				i = element("i");

				attr(i, "class", i_class_value = "fas " + (/*closed*/ ctx[0]
				? /*icon_closed*/ ctx[2]
				: /*icon_opened*/ ctx[1]));

				attr(i, "aria-hidden", "true");
				attr(span, "class", "icon is-small is-toggle-submenu is-pulled-right");
			},
			m(target, anchor) {
				insert(target, span, anchor);
				append(span, i);

				if (!mounted) {
					dispose = listen(span, "click", /*onClick*/ ctx[3]);
					mounted = true;
				}
			},
			p(ctx, [dirty]) {
				if (dirty & /*closed, icon_closed, icon_opened*/ 7 && i_class_value !== (i_class_value = "fas " + (/*closed*/ ctx[0]
				? /*icon_closed*/ ctx[2]
				: /*icon_opened*/ ctx[1]))) {
					attr(i, "class", i_class_value);
				}
			},
			i: noop,
			o: noop,
			d(detaching) {
				if (detaching) detach(span);
				mounted = false;
				dispose();
			}
		};
	}

	function instance$G($$self, $$props, $$invalidate) {
		const dispatch = createEventDispatcher();

		const CLASS_ICON = {
			OPENED: 'fa-angle-down',
			CLOSED: 'fa-angle-up'
		};

		let { icon_opened = CLASS_ICON.OPENED } = $$props;
		let { icon_closed = CLASS_ICON.CLOSED } = $$props;
		let { closed = false } = $$props;

		function onClick(e) {
			e && e.preventDefault() && e.stopPropagation();
			$$invalidate(0, closed = !closed);
			dispatch('toggle', { closed });
			return false;
		}

		$$self.$$set = $$props => {
			if ('icon_opened' in $$props) $$invalidate(1, icon_opened = $$props.icon_opened);
			if ('icon_closed' in $$props) $$invalidate(2, icon_closed = $$props.icon_closed);
			if ('closed' in $$props) $$invalidate(0, closed = $$props.closed);
		};

		return [closed, icon_opened, icon_closed, onClick];
	}

	class Ui_trigger extends SvelteComponent {
		constructor(options) {
			super();

			init(this, options, instance$G, create_fragment$G, safe_not_equal, {
				icon_opened: 1,
				icon_closed: 2,
				closed: 0
			});
		}
	}

	/* src/elements/icon/ui.icon.font.svelte generated by Svelte v3.44.3 */

	function create_else_block$k(ctx) {
		let span;
		let i;
		let i_class_value;
		let span_class_value;

		return {
			c() {
				span = element("span");
				i = element("i");
				attr(i, "class", i_class_value = "fas fa-" + /*font*/ ctx[1]);
				attr(span, "class", span_class_value = "icon " + (/*size*/ ctx[2] ? `is-${/*size*/ ctx[2]}` : '') + " " + (/*size*/ ctx[2] == 'medium' ? 'fa-lg' : '') + " " + (/*size*/ ctx[2] == 'large' ? 'fa-2x' : ''));
			},
			m(target, anchor) {
				insert(target, span, anchor);
				append(span, i);
			},
			p(ctx, dirty) {
				if (dirty & /*font*/ 2 && i_class_value !== (i_class_value = "fas fa-" + /*font*/ ctx[1])) {
					attr(i, "class", i_class_value);
				}

				if (dirty & /*size*/ 4 && span_class_value !== (span_class_value = "icon " + (/*size*/ ctx[2] ? `is-${/*size*/ ctx[2]}` : '') + " " + (/*size*/ ctx[2] == 'medium' ? 'fa-lg' : '') + " " + (/*size*/ ctx[2] == 'large' ? 'fa-2x' : ''))) {
					attr(span, "class", span_class_value);
				}
			},
			d(detaching) {
				if (detaching) detach(span);
			}
		};
	}

	// (8:0) {#if title}
	function create_if_block$r(ctx) {
		let span2;
		let span0;
		let i;
		let i_class_value;
		let span0_class_value;
		let t0;
		let span1;
		let t1_value = /*$LOCALE*/ ctx[3][/*title*/ ctx[0]] + "";
		let t1;

		return {
			c() {
				span2 = element("span");
				span0 = element("span");
				i = element("i");
				t0 = space();
				span1 = element("span");
				t1 = text(t1_value);
				attr(i, "class", i_class_value = "fas fa-" + /*font*/ ctx[1] + " " + (/*size*/ ctx[2] == 'medium' ? 'fa-lg' : '') + " " + (/*size*/ ctx[2] == 'large' ? 'fa-2x' : '') + "");
				attr(span0, "class", span0_class_value = "icon " + (/*size*/ ctx[2] ? `is-${/*size*/ ctx[2]}` : ''));
				attr(span2, "class", "icon-text");
			},
			m(target, anchor) {
				insert(target, span2, anchor);
				append(span2, span0);
				append(span0, i);
				append(span2, t0);
				append(span2, span1);
				append(span1, t1);
			},
			p(ctx, dirty) {
				if (dirty & /*font, size*/ 6 && i_class_value !== (i_class_value = "fas fa-" + /*font*/ ctx[1] + " " + (/*size*/ ctx[2] == 'medium' ? 'fa-lg' : '') + " " + (/*size*/ ctx[2] == 'large' ? 'fa-2x' : '') + "")) {
					attr(i, "class", i_class_value);
				}

				if (dirty & /*size*/ 4 && span0_class_value !== (span0_class_value = "icon " + (/*size*/ ctx[2] ? `is-${/*size*/ ctx[2]}` : ''))) {
					attr(span0, "class", span0_class_value);
				}

				if (dirty & /*$LOCALE, title*/ 9 && t1_value !== (t1_value = /*$LOCALE*/ ctx[3][/*title*/ ctx[0]] + "")) set_data(t1, t1_value);
			},
			d(detaching) {
				if (detaching) detach(span2);
			}
		};
	}

	function create_fragment$F(ctx) {
		let if_block_anchor;

		function select_block_type(ctx, dirty) {
			if (/*title*/ ctx[0]) return create_if_block$r;
			return create_else_block$k;
		}

		let current_block_type = select_block_type(ctx);
		let if_block = current_block_type(ctx);

		return {
			c() {
				if_block.c();
				if_block_anchor = empty();
			},
			m(target, anchor) {
				if_block.m(target, anchor);
				insert(target, if_block_anchor, anchor);
			},
			p(ctx, [dirty]) {
				if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block.d(1);
					if_block = current_block_type(ctx);

					if (if_block) {
						if_block.c();
						if_block.m(if_block_anchor.parentNode, if_block_anchor);
					}
				}
			},
			i: noop,
			o: noop,
			d(detaching) {
				if_block.d(detaching);
				if (detaching) detach(if_block_anchor);
			}
		};
	}

	function instance$F($$self, $$props, $$invalidate) {
		let $LOCALE;
		component_subscribe($$self, LOCALE, $$value => $$invalidate(3, $LOCALE = $$value));
		let { title = '' } = $$props;
		let { font = '' } = $$props;
		let { size = '' } = $$props;

		$$self.$$set = $$props => {
			if ('title' in $$props) $$invalidate(0, title = $$props.title);
			if ('font' in $$props) $$invalidate(1, font = $$props.font);
			if ('size' in $$props) $$invalidate(2, size = $$props.size);
		};

		return [title, font, size, $LOCALE];
	}

	class Ui_icon_font extends SvelteComponent {
		constructor(options) {
			super();
			init(this, options, instance$F, create_fragment$F, safe_not_equal, { title: 0, font: 1, size: 2 });
		}
	}

	/* src/elements/various/ui.tag.svelte generated by Svelte v3.44.3 */

	function create_if_block$q(ctx) {
		let span;
		let t_value = /*$LOCALE*/ ctx[12][/*title*/ ctx[0]] + "";
		let t;
		let span_id_value;
		let span_class_value;

		return {
			c() {
				span = element("span");
				t = text(t_value);
				attr(span, "id", span_id_value = "tag-" + /*id*/ ctx[1]);

				attr(span, "class", span_class_value = "tag " + (/*bold*/ ctx[5] ? 'has-text-weight-bold' : '') + " " + (/*padding*/ ctx[4] !== 'normal'
				? `is-padded-${/*padding*/ ctx[4]}`
				: '') + " is-" + /*size*/ ctx[3] + " is-" + /*color*/ ctx[2] + " " + (/*sided*/ ctx[11] ? 'is-sided' : '') + " " + (/*right*/ ctx[6] ? 'is-sided-right' : '') + " " + (/*left*/ ctx[7] ? 'is-sided-left' : '') + " " + (/*top*/ ctx[8] ? 'is-sided-top' : '') + " " + (/*bottom*/ ctx[9] ? 'is-sided-bottom' : '') + " " + /*classes*/ ctx[10]);
			},
			m(target, anchor) {
				insert(target, span, anchor);
				append(span, t);
			},
			p(ctx, dirty) {
				if (dirty & /*$LOCALE, title*/ 4097 && t_value !== (t_value = /*$LOCALE*/ ctx[12][/*title*/ ctx[0]] + "")) set_data(t, t_value);

				if (dirty & /*id*/ 2 && span_id_value !== (span_id_value = "tag-" + /*id*/ ctx[1])) {
					attr(span, "id", span_id_value);
				}

				if (dirty & /*bold, padding, size, color, sided, right, left, top, bottom, classes*/ 4092 && span_class_value !== (span_class_value = "tag " + (/*bold*/ ctx[5] ? 'has-text-weight-bold' : '') + " " + (/*padding*/ ctx[4] !== 'normal'
				? `is-padded-${/*padding*/ ctx[4]}`
				: '') + " is-" + /*size*/ ctx[3] + " is-" + /*color*/ ctx[2] + " " + (/*sided*/ ctx[11] ? 'is-sided' : '') + " " + (/*right*/ ctx[6] ? 'is-sided-right' : '') + " " + (/*left*/ ctx[7] ? 'is-sided-left' : '') + " " + (/*top*/ ctx[8] ? 'is-sided-top' : '') + " " + (/*bottom*/ ctx[9] ? 'is-sided-bottom' : '') + " " + /*classes*/ ctx[10])) {
					attr(span, "class", span_class_value);
				}
			},
			d(detaching) {
				if (detaching) detach(span);
			}
		};
	}

	function create_fragment$E(ctx) {
		let if_block_anchor;
		let if_block = /*title*/ ctx[0] && create_if_block$q(ctx);

		return {
			c() {
				if (if_block) if_block.c();
				if_block_anchor = empty();
			},
			m(target, anchor) {
				if (if_block) if_block.m(target, anchor);
				insert(target, if_block_anchor, anchor);
			},
			p(ctx, [dirty]) {
				if (/*title*/ ctx[0]) {
					if (if_block) {
						if_block.p(ctx, dirty);
					} else {
						if_block = create_if_block$q(ctx);
						if_block.c();
						if_block.m(if_block_anchor.parentNode, if_block_anchor);
					}
				} else if (if_block) {
					if_block.d(1);
					if_block = null;
				}
			},
			i: noop,
			o: noop,
			d(detaching) {
				if (if_block) if_block.d(detaching);
				if (detaching) detach(if_block_anchor);
			}
		};
	}

	function instance$E($$self, $$props, $$invalidate) {
		let $LOCALE;
		component_subscribe($$self, LOCALE, $$value => $$invalidate(12, $LOCALE = $$value));
		let { id = 'tagId' } = $$props;
		let { title = 'tag' } = $$props;
		let { color = 'info' } = $$props;
		let { size = 'normal' } = $$props;
		let { padding = 'normal' } = $$props;
		let { bold = false } = $$props;
		let { right = false } = $$props;
		let { left = false } = $$props;
		let { top = false } = $$props;
		let { bottom = false } = $$props;
		let { classes = '' } = $$props;
		let sided = false;
		let { events = {} } = $$props;
		let { register = notCommon.registerWidgetEvents.bind(notCommon) } = $$props;

		let { onUpdate = data => {
			if (Object.prototype.hasOwnProperty.call(data, 'title')) {
				$$invalidate(0, title = data.title);
			}
		} } = $$props;

		function getStandartUpdateEventName() {
			return `tag-${id}:update`;
		}

		onMount(() => {
			if (!Object.prototype.hasOwnProperty.call(events, getStandartUpdateEventName())) {
				$$invalidate(13, events[getStandartUpdateEventName()] = onUpdate, events);
			}

			register(events);
		});

		$$self.$$set = $$props => {
			if ('id' in $$props) $$invalidate(1, id = $$props.id);
			if ('title' in $$props) $$invalidate(0, title = $$props.title);
			if ('color' in $$props) $$invalidate(2, color = $$props.color);
			if ('size' in $$props) $$invalidate(3, size = $$props.size);
			if ('padding' in $$props) $$invalidate(4, padding = $$props.padding);
			if ('bold' in $$props) $$invalidate(5, bold = $$props.bold);
			if ('right' in $$props) $$invalidate(6, right = $$props.right);
			if ('left' in $$props) $$invalidate(7, left = $$props.left);
			if ('top' in $$props) $$invalidate(8, top = $$props.top);
			if ('bottom' in $$props) $$invalidate(9, bottom = $$props.bottom);
			if ('classes' in $$props) $$invalidate(10, classes = $$props.classes);
			if ('events' in $$props) $$invalidate(13, events = $$props.events);
			if ('register' in $$props) $$invalidate(14, register = $$props.register);
			if ('onUpdate' in $$props) $$invalidate(15, onUpdate = $$props.onUpdate);
		};

		$$self.$$.update = () => {
			if ($$self.$$.dirty & /*right, left, top, bottom*/ 960) {
				$$invalidate(11, sided = right || left || top || bottom);
			}
		};

		return [
			title,
			id,
			color,
			size,
			padding,
			bold,
			right,
			left,
			top,
			bottom,
			classes,
			sided,
			$LOCALE,
			events,
			register,
			onUpdate
		];
	}

	class Ui_tag$1 extends SvelteComponent {
		constructor(options) {
			super();

			init(this, options, instance$E, create_fragment$E, safe_not_equal, {
				id: 1,
				title: 0,
				color: 2,
				size: 3,
				padding: 4,
				bold: 5,
				right: 6,
				left: 7,
				top: 8,
				bottom: 9,
				classes: 10,
				events: 13,
				register: 14,
				onUpdate: 15
			});
		}
	}

	/* src/frame/components/navigation/side/ui.item.label.svelte generated by Svelte v3.44.3 */

	function create_else_block$j(ctx) {
		let span;
		let t_value = /*$LOCALE*/ ctx[1][/*item*/ ctx[0].title] + "";
		let t;

		return {
			c() {
				span = element("span");
				t = text(t_value);
				attr(span, "class", "is-no-link");
			},
			m(target, anchor) {
				insert(target, span, anchor);
				append(span, t);
			},
			p(ctx, dirty) {
				if (dirty & /*$LOCALE, item*/ 3 && t_value !== (t_value = /*$LOCALE*/ ctx[1][/*item*/ ctx[0].title] + "")) set_data(t, t_value);
			},
			i: noop,
			o: noop,
			d(detaching) {
				if (detaching) detach(span);
			}
		};
	}

	// (14:94) 
	function create_if_block_3$c(ctx) {
		let switch_instance;
		let switch_instance_anchor;
		let current;
		const switch_instance_spread_levels = [{ id: /*item*/ ctx[0].id }, /*item*/ ctx[0].props];
		var switch_value = COMPONENTS.get(/*item*/ ctx[0].component);

		function switch_props(ctx) {
			let switch_instance_props = {};

			for (let i = 0; i < switch_instance_spread_levels.length; i += 1) {
				switch_instance_props = assign(switch_instance_props, switch_instance_spread_levels[i]);
			}

			return { props: switch_instance_props };
		}

		if (switch_value) {
			switch_instance = new switch_value(switch_props());
		}

		return {
			c() {
				if (switch_instance) create_component(switch_instance.$$.fragment);
				switch_instance_anchor = empty();
			},
			m(target, anchor) {
				if (switch_instance) {
					mount_component(switch_instance, target, anchor);
				}

				insert(target, switch_instance_anchor, anchor);
				current = true;
			},
			p(ctx, dirty) {
				const switch_instance_changes = (dirty & /*item*/ 1)
				? get_spread_update(switch_instance_spread_levels, [{ id: /*item*/ ctx[0].id }, get_spread_object(/*item*/ ctx[0].props)])
				: {};

				if (switch_value !== (switch_value = COMPONENTS.get(/*item*/ ctx[0].component))) {
					if (switch_instance) {
						group_outros();
						const old_component = switch_instance;

						transition_out(old_component.$$.fragment, 1, 0, () => {
							destroy_component(old_component, 1);
						});

						check_outros();
					}

					if (switch_value) {
						switch_instance = new switch_value(switch_props());
						create_component(switch_instance.$$.fragment);
						transition_in(switch_instance.$$.fragment, 1);
						mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
					} else {
						switch_instance = null;
					}
				} else if (switch_value) {
					switch_instance.$set(switch_instance_changes);
				}
			},
			i(local) {
				if (current) return;
				if (switch_instance) transition_in(switch_instance.$$.fragment, local);
				current = true;
			},
			o(local) {
				if (switch_instance) transition_out(switch_instance.$$.fragment, local);
				current = false;
			},
			d(detaching) {
				if (detaching) detach(switch_instance_anchor);
				if (switch_instance) destroy_component(switch_instance, detaching);
			}
		};
	}

	// (12:0) {#if item.icon }
	function create_if_block_2$d(ctx) {
		let uiicon;
		let current;
		const uiicon_spread_levels = [/*item*/ ctx[0].icon];
		let uiicon_props = {};

		for (let i = 0; i < uiicon_spread_levels.length; i += 1) {
			uiicon_props = assign(uiicon_props, uiicon_spread_levels[i]);
		}

		uiicon = new Ui_icon_font({ props: uiicon_props });

		return {
			c() {
				create_component(uiicon.$$.fragment);
			},
			m(target, anchor) {
				mount_component(uiicon, target, anchor);
				current = true;
			},
			p(ctx, dirty) {
				const uiicon_changes = (dirty & /*item*/ 1)
				? get_spread_update(uiicon_spread_levels, [get_spread_object(/*item*/ ctx[0].icon)])
				: {};

				uiicon.$set(uiicon_changes);
			},
			i(local) {
				if (current) return;
				transition_in(uiicon.$$.fragment, local);
				current = true;
			},
			o(local) {
				transition_out(uiicon.$$.fragment, local);
				current = false;
			},
			d(detaching) {
				destroy_component(uiicon, detaching);
			}
		};
	}

	// (23:0) {#if item.tag }
	function create_if_block_1$k(ctx) {
		let uitag;
		let current;
		const uitag_spread_levels = [{ id: /*item*/ ctx[0].id }, /*item*/ ctx[0].tag];
		let uitag_props = {};

		for (let i = 0; i < uitag_spread_levels.length; i += 1) {
			uitag_props = assign(uitag_props, uitag_spread_levels[i]);
		}

		uitag = new Ui_tag$1({ props: uitag_props });

		return {
			c() {
				create_component(uitag.$$.fragment);
			},
			m(target, anchor) {
				mount_component(uitag, target, anchor);
				current = true;
			},
			p(ctx, dirty) {
				const uitag_changes = (dirty & /*item*/ 1)
				? get_spread_update(uitag_spread_levels, [{ id: /*item*/ ctx[0].id }, get_spread_object(/*item*/ ctx[0].tag)])
				: {};

				uitag.$set(uitag_changes);
			},
			i(local) {
				if (current) return;
				transition_in(uitag.$$.fragment, local);
				current = true;
			},
			o(local) {
				transition_out(uitag.$$.fragment, local);
				current = false;
			},
			d(detaching) {
				destroy_component(uitag, detaching);
			}
		};
	}

	// (26:0) {#if item.indicator }
	function create_if_block$p(ctx) {
		let uiindicator;
		let current;
		const uiindicator_spread_levels = [{ id: /*item*/ ctx[0].id }, /*item*/ ctx[0].indicator];
		let uiindicator_props = {};

		for (let i = 0; i < uiindicator_spread_levels.length; i += 1) {
			uiindicator_props = assign(uiindicator_props, uiindicator_spread_levels[i]);
		}

		uiindicator = new Ui_indicator({ props: uiindicator_props });

		return {
			c() {
				create_component(uiindicator.$$.fragment);
			},
			m(target, anchor) {
				mount_component(uiindicator, target, anchor);
				current = true;
			},
			p(ctx, dirty) {
				const uiindicator_changes = (dirty & /*item*/ 1)
				? get_spread_update(uiindicator_spread_levels, [{ id: /*item*/ ctx[0].id }, get_spread_object(/*item*/ ctx[0].indicator)])
				: {};

				uiindicator.$set(uiindicator_changes);
			},
			i(local) {
				if (current) return;
				transition_in(uiindicator.$$.fragment, local);
				current = true;
			},
			o(local) {
				transition_out(uiindicator.$$.fragment, local);
				current = false;
			},
			d(detaching) {
				destroy_component(uiindicator, detaching);
			}
		};
	}

	function create_fragment$D(ctx) {
		let show_if;
		let current_block_type_index;
		let if_block0;
		let t0;
		let t1;
		let t2;
		let current;
		const if_block_creators = [create_if_block_2$d, create_if_block_3$c, create_else_block$j];
		const if_blocks = [];

		function select_block_type(ctx, dirty) {
			if (/*item*/ ctx[0].icon) return 0;
			if (show_if == null || dirty & /*item*/ 1) show_if = !!(/*item*/ ctx[0].type === 'component' && /*item*/ ctx[0].component && COMPONENTS.contains(/*item*/ ctx[0].component));
			if (show_if) return 1;
			return 2;
		}

		current_block_type_index = select_block_type(ctx, -1);
		if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
		let if_block1 = /*item*/ ctx[0].tag && create_if_block_1$k(ctx);
		let if_block2 = /*item*/ ctx[0].indicator && create_if_block$p(ctx);
		const default_slot_template = /*#slots*/ ctx[3].default;
		const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[2], null);

		return {
			c() {
				if_block0.c();
				t0 = space();
				if (if_block1) if_block1.c();
				t1 = space();
				if (if_block2) if_block2.c();
				t2 = space();
				if (default_slot) default_slot.c();
			},
			m(target, anchor) {
				if_blocks[current_block_type_index].m(target, anchor);
				insert(target, t0, anchor);
				if (if_block1) if_block1.m(target, anchor);
				insert(target, t1, anchor);
				if (if_block2) if_block2.m(target, anchor);
				insert(target, t2, anchor);

				if (default_slot) {
					default_slot.m(target, anchor);
				}

				current = true;
			},
			p(ctx, [dirty]) {
				let previous_block_index = current_block_type_index;
				current_block_type_index = select_block_type(ctx, dirty);

				if (current_block_type_index === previous_block_index) {
					if_blocks[current_block_type_index].p(ctx, dirty);
				} else {
					group_outros();

					transition_out(if_blocks[previous_block_index], 1, 1, () => {
						if_blocks[previous_block_index] = null;
					});

					check_outros();
					if_block0 = if_blocks[current_block_type_index];

					if (!if_block0) {
						if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
						if_block0.c();
					} else {
						if_block0.p(ctx, dirty);
					}

					transition_in(if_block0, 1);
					if_block0.m(t0.parentNode, t0);
				}

				if (/*item*/ ctx[0].tag) {
					if (if_block1) {
						if_block1.p(ctx, dirty);

						if (dirty & /*item*/ 1) {
							transition_in(if_block1, 1);
						}
					} else {
						if_block1 = create_if_block_1$k(ctx);
						if_block1.c();
						transition_in(if_block1, 1);
						if_block1.m(t1.parentNode, t1);
					}
				} else if (if_block1) {
					group_outros();

					transition_out(if_block1, 1, 1, () => {
						if_block1 = null;
					});

					check_outros();
				}

				if (/*item*/ ctx[0].indicator) {
					if (if_block2) {
						if_block2.p(ctx, dirty);

						if (dirty & /*item*/ 1) {
							transition_in(if_block2, 1);
						}
					} else {
						if_block2 = create_if_block$p(ctx);
						if_block2.c();
						transition_in(if_block2, 1);
						if_block2.m(t2.parentNode, t2);
					}
				} else if (if_block2) {
					group_outros();

					transition_out(if_block2, 1, 1, () => {
						if_block2 = null;
					});

					check_outros();
				}

				if (default_slot) {
					if (default_slot.p && (!current || dirty & /*$$scope*/ 4)) {
						update_slot_base(
							default_slot,
							default_slot_template,
							ctx,
							/*$$scope*/ ctx[2],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[2])
							: get_slot_changes(default_slot_template, /*$$scope*/ ctx[2], dirty, null),
							null
						);
					}
				}
			},
			i(local) {
				if (current) return;
				transition_in(if_block0);
				transition_in(if_block1);
				transition_in(if_block2);
				transition_in(default_slot, local);
				current = true;
			},
			o(local) {
				transition_out(if_block0);
				transition_out(if_block1);
				transition_out(if_block2);
				transition_out(default_slot, local);
				current = false;
			},
			d(detaching) {
				if_blocks[current_block_type_index].d(detaching);
				if (detaching) detach(t0);
				if (if_block1) if_block1.d(detaching);
				if (detaching) detach(t1);
				if (if_block2) if_block2.d(detaching);
				if (detaching) detach(t2);
				if (default_slot) default_slot.d(detaching);
			}
		};
	}

	function instance$D($$self, $$props, $$invalidate) {
		let $LOCALE;
		component_subscribe($$self, LOCALE, $$value => $$invalidate(1, $LOCALE = $$value));
		let { $$slots: slots = {}, $$scope } = $$props;
		let { item = {} } = $$props;

		$$self.$$set = $$props => {
			if ('item' in $$props) $$invalidate(0, item = $$props.item);
			if ('$$scope' in $$props) $$invalidate(2, $$scope = $$props.$$scope);
		};

		return [item, $LOCALE, $$scope, slots];
	}

	class Ui_item_label extends SvelteComponent {
		constructor(options) {
			super();
			init(this, options, instance$D, create_fragment$D, safe_not_equal, { item: 0 });
		}
	}

	/* src/frame/components/navigation/side/ui.items.svelte generated by Svelte v3.44.3 */

	function get_each_context$8(ctx, list, i) {
		const child_ctx = ctx.slice();
		child_ctx[11] = list[i];
		child_ctx[12] = list;
		child_ctx[13] = i;
		return child_ctx;
	}

	// (48:1) {:else}
	function create_else_block_1$1(ctx) {
		let uisidemenuitemwithoutchildren;
		let current;

		uisidemenuitemwithoutchildren = new Ui_item_without_children({
				props: {
					root: /*root*/ ctx[0],
					item: /*item*/ ctx[11]
				}
			});

		uisidemenuitemwithoutchildren.$on("navigate", /*navigate_handler_1*/ ctx[9]);

		return {
			c() {
				create_component(uisidemenuitemwithoutchildren.$$.fragment);
			},
			m(target, anchor) {
				mount_component(uisidemenuitemwithoutchildren, target, anchor);
				current = true;
			},
			p(ctx, dirty) {
				const uisidemenuitemwithoutchildren_changes = {};
				if (dirty & /*root*/ 1) uisidemenuitemwithoutchildren_changes.root = /*root*/ ctx[0];
				if (dirty & /*items*/ 2) uisidemenuitemwithoutchildren_changes.item = /*item*/ ctx[11];
				uisidemenuitemwithoutchildren.$set(uisidemenuitemwithoutchildren_changes);
			},
			i(local) {
				if (current) return;
				transition_in(uisidemenuitemwithoutchildren.$$.fragment, local);
				current = true;
			},
			o(local) {
				transition_out(uisidemenuitemwithoutchildren.$$.fragment, local);
				current = false;
			},
			d(detaching) {
				destroy_component(uisidemenuitemwithoutchildren, detaching);
			}
		};
	}

	// (33:1) {#if item.items && item.items.length }
	function create_if_block$o(ctx) {
		let li;
		let current_block_type_index;
		let if_block;
		let t0;
		let ui_items;
		let updating_closed;
		let t1;
		let li_class_value;
		let current;
		const if_block_creators = [create_if_block_1$j, create_else_block$i];
		const if_blocks = [];

		function select_block_type_1(ctx, dirty) {
			if (typeof /*item*/ ctx[11].url !== 'undefined' && /*item*/ ctx[11].url !== false) return 0;
			return 1;
		}

		current_block_type_index = select_block_type_1(ctx);
		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

		function ui_items_closed_binding(value) {
			/*ui_items_closed_binding*/ ctx[7](value, /*index*/ ctx[13]);
		}

		let ui_items_props = {
			root: /*root*/ ctx[0],
			items: /*item*/ ctx[11].items
		};

		if (/*closedChildren*/ ctx[3][/*index*/ ctx[13]] !== void 0) {
			ui_items_props.closed = /*closedChildren*/ ctx[3][/*index*/ ctx[13]];
		}

		ui_items = new Ui_items({ props: ui_items_props });
		binding_callbacks.push(() => bind$2(ui_items, 'closed', ui_items_closed_binding));
		ui_items.$on("navigate", /*navigate_handler*/ ctx[8]);

		return {
			c() {
				li = element("li");
				if_block.c();
				t0 = space();
				create_component(ui_items.$$.fragment);
				t1 = space();
				attr(li, "class", li_class_value = "is-no-follow-subtitle " + /*item*/ ctx[11].classes);
			},
			m(target, anchor) {
				insert(target, li, anchor);
				if_blocks[current_block_type_index].m(li, null);
				append(li, t0);
				mount_component(ui_items, li, null);
				append(li, t1);
				current = true;
			},
			p(new_ctx, dirty) {
				ctx = new_ctx;
				let previous_block_index = current_block_type_index;
				current_block_type_index = select_block_type_1(ctx);

				if (current_block_type_index === previous_block_index) {
					if_blocks[current_block_type_index].p(ctx, dirty);
				} else {
					group_outros();

					transition_out(if_blocks[previous_block_index], 1, 1, () => {
						if_blocks[previous_block_index] = null;
					});

					check_outros();
					if_block = if_blocks[current_block_type_index];

					if (!if_block) {
						if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
						if_block.c();
					} else {
						if_block.p(ctx, dirty);
					}

					transition_in(if_block, 1);
					if_block.m(li, t0);
				}

				const ui_items_changes = {};
				if (dirty & /*root*/ 1) ui_items_changes.root = /*root*/ ctx[0];
				if (dirty & /*items*/ 2) ui_items_changes.items = /*item*/ ctx[11].items;

				if (!updating_closed && dirty & /*closedChildren*/ 8) {
					updating_closed = true;
					ui_items_changes.closed = /*closedChildren*/ ctx[3][/*index*/ ctx[13]];
					add_flush_callback(() => updating_closed = false);
				}

				ui_items.$set(ui_items_changes);

				if (!current || dirty & /*items*/ 2 && li_class_value !== (li_class_value = "is-no-follow-subtitle " + /*item*/ ctx[11].classes)) {
					attr(li, "class", li_class_value);
				}
			},
			i(local) {
				if (current) return;
				transition_in(if_block);
				transition_in(ui_items.$$.fragment, local);
				current = true;
			},
			o(local) {
				transition_out(if_block);
				transition_out(ui_items.$$.fragment, local);
				current = false;
			},
			d(detaching) {
				if (detaching) detach(li);
				if_blocks[current_block_type_index].d();
				destroy_component(ui_items);
			}
		};
	}

	// (41:2) {:else}
	function create_else_block$i(ctx) {
		let uisidemenuitemlabel;
		let current;

		uisidemenuitemlabel = new Ui_item_label({
				props: {
					item: /*item*/ ctx[11],
					$$slots: { default: [create_default_slot_1$1] },
					$$scope: { ctx }
				}
			});

		return {
			c() {
				create_component(uisidemenuitemlabel.$$.fragment);
			},
			m(target, anchor) {
				mount_component(uisidemenuitemlabel, target, anchor);
				current = true;
			},
			p(ctx, dirty) {
				const uisidemenuitemlabel_changes = {};
				if (dirty & /*items*/ 2) uisidemenuitemlabel_changes.item = /*item*/ ctx[11];

				if (dirty & /*$$scope, closedChildren*/ 16392) {
					uisidemenuitemlabel_changes.$$scope = { dirty, ctx };
				}

				uisidemenuitemlabel.$set(uisidemenuitemlabel_changes);
			},
			i(local) {
				if (current) return;
				transition_in(uisidemenuitemlabel.$$.fragment, local);
				current = true;
			},
			o(local) {
				transition_out(uisidemenuitemlabel.$$.fragment, local);
				current = false;
			},
			d(detaching) {
				destroy_component(uisidemenuitemlabel, detaching);
			}
		};
	}

	// (35:2) {#if (typeof item.url !== 'undefined' && item.url!==false) }
	function create_if_block_1$j(ctx) {
		let a;
		let uisidemenuitemlabel;
		let a_href_value;
		let a_data_href_value;
		let current;
		let mounted;
		let dispose;

		uisidemenuitemlabel = new Ui_item_label({
				props: {
					item: /*item*/ ctx[11],
					$$slots: { default: [create_default_slot$1] },
					$$scope: { ctx }
				}
			});

		return {
			c() {
				a = element("a");
				create_component(uisidemenuitemlabel.$$.fragment);
				attr(a, "href", a_href_value = "" + (/*root*/ ctx[0] + /*item*/ ctx[11].url));
				attr(a, "data-href", a_data_href_value = /*item*/ ctx[11].url);
				attr(a, "class", "has-subitems");
			},
			m(target, anchor) {
				insert(target, a, anchor);
				mount_component(uisidemenuitemlabel, a, null);
				current = true;

				if (!mounted) {
					dispose = listen(a, "click", /*onClick*/ ctx[4]);
					mounted = true;
				}
			},
			p(ctx, dirty) {
				const uisidemenuitemlabel_changes = {};
				if (dirty & /*items*/ 2) uisidemenuitemlabel_changes.item = /*item*/ ctx[11];

				if (dirty & /*$$scope, closedChildren*/ 16392) {
					uisidemenuitemlabel_changes.$$scope = { dirty, ctx };
				}

				uisidemenuitemlabel.$set(uisidemenuitemlabel_changes);

				if (!current || dirty & /*root, items*/ 3 && a_href_value !== (a_href_value = "" + (/*root*/ ctx[0] + /*item*/ ctx[11].url))) {
					attr(a, "href", a_href_value);
				}

				if (!current || dirty & /*items*/ 2 && a_data_href_value !== (a_data_href_value = /*item*/ ctx[11].url)) {
					attr(a, "data-href", a_data_href_value);
				}
			},
			i(local) {
				if (current) return;
				transition_in(uisidemenuitemlabel.$$.fragment, local);
				current = true;
			},
			o(local) {
				transition_out(uisidemenuitemlabel.$$.fragment, local);
				current = false;
			},
			d(detaching) {
				if (detaching) detach(a);
				destroy_component(uisidemenuitemlabel);
				mounted = false;
				dispose();
			}
		};
	}

	// (42:3) <UISideMenuItemLabel {item} >
	function create_default_slot_1$1(ctx) {
		let uisidemenutrigger;
		let current;

		function toggle_handler_1(...args) {
			return /*toggle_handler_1*/ ctx[6](/*index*/ ctx[13], ...args);
		}

		uisidemenutrigger = new Ui_trigger({});
		uisidemenutrigger.$on("toggle", toggle_handler_1);

		return {
			c() {
				create_component(uisidemenutrigger.$$.fragment);
			},
			m(target, anchor) {
				mount_component(uisidemenutrigger, target, anchor);
				current = true;
			},
			p(new_ctx, dirty) {
				ctx = new_ctx;
			},
			i(local) {
				if (current) return;
				transition_in(uisidemenutrigger.$$.fragment, local);
				current = true;
			},
			o(local) {
				transition_out(uisidemenutrigger.$$.fragment, local);
				current = false;
			},
			d(detaching) {
				destroy_component(uisidemenutrigger, detaching);
			}
		};
	}

	// (37:3) <UISideMenuItemLabel {item} >
	function create_default_slot$1(ctx) {
		let uisidemenutrigger;
		let current;

		function toggle_handler(...args) {
			return /*toggle_handler*/ ctx[5](/*index*/ ctx[13], ...args);
		}

		uisidemenutrigger = new Ui_trigger({});
		uisidemenutrigger.$on("toggle", toggle_handler);

		return {
			c() {
				create_component(uisidemenutrigger.$$.fragment);
			},
			m(target, anchor) {
				mount_component(uisidemenutrigger, target, anchor);
				current = true;
			},
			p(new_ctx, dirty) {
				ctx = new_ctx;
			},
			i(local) {
				if (current) return;
				transition_in(uisidemenutrigger.$$.fragment, local);
				current = true;
			},
			o(local) {
				transition_out(uisidemenutrigger.$$.fragment, local);
				current = false;
			},
			d(detaching) {
				destroy_component(uisidemenutrigger, detaching);
			}
		};
	}

	// (32:0) {#each items as item, index}
	function create_each_block$8(ctx) {
		let current_block_type_index;
		let if_block;
		let if_block_anchor;
		let current;
		const if_block_creators = [create_if_block$o, create_else_block_1$1];
		const if_blocks = [];

		function select_block_type(ctx, dirty) {
			if (/*item*/ ctx[11].items && /*item*/ ctx[11].items.length) return 0;
			return 1;
		}

		current_block_type_index = select_block_type(ctx);
		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

		return {
			c() {
				if_block.c();
				if_block_anchor = empty();
			},
			m(target, anchor) {
				if_blocks[current_block_type_index].m(target, anchor);
				insert(target, if_block_anchor, anchor);
				current = true;
			},
			p(ctx, dirty) {
				let previous_block_index = current_block_type_index;
				current_block_type_index = select_block_type(ctx);

				if (current_block_type_index === previous_block_index) {
					if_blocks[current_block_type_index].p(ctx, dirty);
				} else {
					group_outros();

					transition_out(if_blocks[previous_block_index], 1, 1, () => {
						if_blocks[previous_block_index] = null;
					});

					check_outros();
					if_block = if_blocks[current_block_type_index];

					if (!if_block) {
						if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
						if_block.c();
					} else {
						if_block.p(ctx, dirty);
					}

					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			},
			i(local) {
				if (current) return;
				transition_in(if_block);
				current = true;
			},
			o(local) {
				transition_out(if_block);
				current = false;
			},
			d(detaching) {
				if_blocks[current_block_type_index].d(detaching);
				if (detaching) detach(if_block_anchor);
			}
		};
	}

	function create_fragment$C(ctx) {
		let ul;
		let ul_class_value;
		let current;
		let each_value = /*items*/ ctx[1];
		let each_blocks = [];

		for (let i = 0; i < each_value.length; i += 1) {
			each_blocks[i] = create_each_block$8(get_each_context$8(ctx, each_value, i));
		}

		const out = i => transition_out(each_blocks[i], 1, 1, () => {
			each_blocks[i] = null;
		});

		return {
			c() {
				ul = element("ul");

				for (let i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].c();
				}

				attr(ul, "class", ul_class_value = "menu-list " + (/*closed*/ ctx[2] ? 'is-closed' : ''));
			},
			m(target, anchor) {
				insert(target, ul, anchor);

				for (let i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].m(ul, null);
				}

				current = true;
			},
			p(ctx, [dirty]) {
				if (dirty & /*items, root, closedChildren, onClick*/ 27) {
					each_value = /*items*/ ctx[1];
					let i;

					for (i = 0; i < each_value.length; i += 1) {
						const child_ctx = get_each_context$8(ctx, each_value, i);

						if (each_blocks[i]) {
							each_blocks[i].p(child_ctx, dirty);
							transition_in(each_blocks[i], 1);
						} else {
							each_blocks[i] = create_each_block$8(child_ctx);
							each_blocks[i].c();
							transition_in(each_blocks[i], 1);
							each_blocks[i].m(ul, null);
						}
					}

					group_outros();

					for (i = each_value.length; i < each_blocks.length; i += 1) {
						out(i);
					}

					check_outros();
				}

				if (!current || dirty & /*closed*/ 4 && ul_class_value !== (ul_class_value = "menu-list " + (/*closed*/ ctx[2] ? 'is-closed' : ''))) {
					attr(ul, "class", ul_class_value);
				}
			},
			i(local) {
				if (current) return;

				for (let i = 0; i < each_value.length; i += 1) {
					transition_in(each_blocks[i]);
				}

				current = true;
			},
			o(local) {
				each_blocks = each_blocks.filter(Boolean);

				for (let i = 0; i < each_blocks.length; i += 1) {
					transition_out(each_blocks[i]);
				}

				current = false;
			},
			d(detaching) {
				if (detaching) detach(ul);
				destroy_each(each_blocks, detaching);
			}
		};
	}

	function instance$C($$self, $$props, $$invalidate) {
		const dispatch = createEventDispatcher();
		let closedChildren = {};
		let { root = '' } = $$props;
		let { items = [] } = $$props;
		let { closed = false } = $$props;

		function onClick(ev) {
			ev.preventDefault();

			dispatch('navigate', {
				full: ev.target.getAttribute('href'),
				short: ev.target.dataset.href
			});

			return false;
		}

		const toggle_handler = (index, { detail }) => {
			$$invalidate(3, closedChildren[index] = detail.closed, closedChildren);
		};

		const toggle_handler_1 = (index, { detail }) => {
			$$invalidate(3, closedChildren[index] = detail.closed, closedChildren);
		};

		function ui_items_closed_binding(value, index) {
			if ($$self.$$.not_equal(closedChildren[index], value)) {
				closedChildren[index] = value;
				$$invalidate(3, closedChildren);
			}
		}

		function navigate_handler(event) {
			bubble.call(this, $$self, event);
		}

		function navigate_handler_1(event) {
			bubble.call(this, $$self, event);
		}

		$$self.$$set = $$props => {
			if ('root' in $$props) $$invalidate(0, root = $$props.root);
			if ('items' in $$props) $$invalidate(1, items = $$props.items);
			if ('closed' in $$props) $$invalidate(2, closed = $$props.closed);
		};

		return [
			root,
			items,
			closed,
			closedChildren,
			onClick,
			toggle_handler,
			toggle_handler_1,
			ui_items_closed_binding,
			navigate_handler,
			navigate_handler_1
		];
	}

	class Ui_items extends SvelteComponent {
		constructor(options) {
			super();
			init(this, options, instance$C, create_fragment$C, safe_not_equal, { root: 0, items: 1, closed: 2 });
		}
	}

	/* src/frame/components/navigation/side/ui.section.svelte generated by Svelte v3.44.3 */

	function create_if_block_1$i(ctx) {
		let if_block_anchor;
		let current;
		let if_block = (/*sectionItems*/ ctx[2].length || /*section*/ ctx[0].component || /*section*/ ctx[0].tag || /*section*/ ctx[0].indicator) && create_if_block_2$c(ctx);

		return {
			c() {
				if (if_block) if_block.c();
				if_block_anchor = empty();
			},
			m(target, anchor) {
				if (if_block) if_block.m(target, anchor);
				insert(target, if_block_anchor, anchor);
				current = true;
			},
			p(ctx, dirty) {
				if (/*sectionItems*/ ctx[2].length || /*section*/ ctx[0].component || /*section*/ ctx[0].tag || /*section*/ ctx[0].indicator) {
					if (if_block) {
						if_block.p(ctx, dirty);

						if (dirty & /*sectionItems, section*/ 5) {
							transition_in(if_block, 1);
						}
					} else {
						if_block = create_if_block_2$c(ctx);
						if_block.c();
						transition_in(if_block, 1);
						if_block.m(if_block_anchor.parentNode, if_block_anchor);
					}
				} else if (if_block) {
					group_outros();

					transition_out(if_block, 1, 1, () => {
						if_block = null;
					});

					check_outros();
				}
			},
			i(local) {
				if (current) return;
				transition_in(if_block);
				current = true;
			},
			o(local) {
				transition_out(if_block);
				current = false;
			},
			d(detaching) {
				if (if_block) if_block.d(detaching);
				if (detaching) detach(if_block_anchor);
			}
		};
	}

	// (15:0) {#if sectionItems.length || section.component || section.tag || section.indicator }
	function create_if_block_2$c(ctx) {
		let p;
		let show_if;
		let current_block_type_index;
		let if_block0;
		let t0;
		let t1;
		let p_class_value;
		let current;
		const if_block_creators = [create_if_block_5$3, create_else_block$h];
		const if_blocks = [];

		function select_block_type(ctx, dirty) {
			if (show_if == null || dirty & /*section*/ 1) show_if = !!(/*section*/ ctx[0].type === 'component' && /*section*/ ctx[0].component && COMPONENTS.contains(/*section*/ ctx[0].component));
			if (show_if) return 0;
			return 1;
		}

		current_block_type_index = select_block_type(ctx, -1);
		if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
		let if_block1 = /*section*/ ctx[0].tag && create_if_block_4$a(ctx);
		let if_block2 = /*section*/ ctx[0].indicator && create_if_block_3$b(ctx);

		return {
			c() {
				p = element("p");
				if_block0.c();
				t0 = space();
				if (if_block1) if_block1.c();
				t1 = space();
				if (if_block2) if_block2.c();
				attr(p, "class", p_class_value = "menu-label " + /*section*/ ctx[0].classes);
			},
			m(target, anchor) {
				insert(target, p, anchor);
				if_blocks[current_block_type_index].m(p, null);
				append(p, t0);
				if (if_block1) if_block1.m(p, null);
				append(p, t1);
				if (if_block2) if_block2.m(p, null);
				current = true;
			},
			p(ctx, dirty) {
				let previous_block_index = current_block_type_index;
				current_block_type_index = select_block_type(ctx, dirty);

				if (current_block_type_index === previous_block_index) {
					if_blocks[current_block_type_index].p(ctx, dirty);
				} else {
					group_outros();

					transition_out(if_blocks[previous_block_index], 1, 1, () => {
						if_blocks[previous_block_index] = null;
					});

					check_outros();
					if_block0 = if_blocks[current_block_type_index];

					if (!if_block0) {
						if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
						if_block0.c();
					} else {
						if_block0.p(ctx, dirty);
					}

					transition_in(if_block0, 1);
					if_block0.m(p, t0);
				}

				if (/*section*/ ctx[0].tag) {
					if (if_block1) {
						if_block1.p(ctx, dirty);

						if (dirty & /*section*/ 1) {
							transition_in(if_block1, 1);
						}
					} else {
						if_block1 = create_if_block_4$a(ctx);
						if_block1.c();
						transition_in(if_block1, 1);
						if_block1.m(p, t1);
					}
				} else if (if_block1) {
					group_outros();

					transition_out(if_block1, 1, 1, () => {
						if_block1 = null;
					});

					check_outros();
				}

				if (/*section*/ ctx[0].indicator) {
					if (if_block2) {
						if_block2.p(ctx, dirty);

						if (dirty & /*section*/ 1) {
							transition_in(if_block2, 1);
						}
					} else {
						if_block2 = create_if_block_3$b(ctx);
						if_block2.c();
						transition_in(if_block2, 1);
						if_block2.m(p, null);
					}
				} else if (if_block2) {
					group_outros();

					transition_out(if_block2, 1, 1, () => {
						if_block2 = null;
					});

					check_outros();
				}

				if (!current || dirty & /*section*/ 1 && p_class_value !== (p_class_value = "menu-label " + /*section*/ ctx[0].classes)) {
					attr(p, "class", p_class_value);
				}
			},
			i(local) {
				if (current) return;
				transition_in(if_block0);
				transition_in(if_block1);
				transition_in(if_block2);
				current = true;
			},
			o(local) {
				transition_out(if_block0);
				transition_out(if_block1);
				transition_out(if_block2);
				current = false;
			},
			d(detaching) {
				if (detaching) detach(p);
				if_blocks[current_block_type_index].d();
				if (if_block1) if_block1.d();
				if (if_block2) if_block2.d();
			}
		};
	}

	// (23:2) {:else}
	function create_else_block$h(ctx) {
		let t_value = /*$LOCALE*/ ctx[3][/*section*/ ctx[0].title] + "";
		let t;

		return {
			c() {
				t = text(t_value);
			},
			m(target, anchor) {
				insert(target, t, anchor);
			},
			p(ctx, dirty) {
				if (dirty & /*$LOCALE, section*/ 9 && t_value !== (t_value = /*$LOCALE*/ ctx[3][/*section*/ ctx[0].title] + "")) set_data(t, t_value);
			},
			i: noop,
			o: noop,
			d(detaching) {
				if (detaching) detach(t);
			}
		};
	}

	// (17:2) {#if (section.type==='component' && section.component && COMPONENTS.contains(section.component)) }
	function create_if_block_5$3(ctx) {
		let switch_instance;
		let switch_instance_anchor;
		let current;
		const switch_instance_spread_levels = [{ id: /*section*/ ctx[0].id }, /*section*/ ctx[0].props];
		var switch_value = COMPONENTS.get(/*section*/ ctx[0].component);

		function switch_props(ctx) {
			let switch_instance_props = {};

			for (let i = 0; i < switch_instance_spread_levels.length; i += 1) {
				switch_instance_props = assign(switch_instance_props, switch_instance_spread_levels[i]);
			}

			return { props: switch_instance_props };
		}

		if (switch_value) {
			switch_instance = new switch_value(switch_props());
		}

		return {
			c() {
				if (switch_instance) create_component(switch_instance.$$.fragment);
				switch_instance_anchor = empty();
			},
			m(target, anchor) {
				if (switch_instance) {
					mount_component(switch_instance, target, anchor);
				}

				insert(target, switch_instance_anchor, anchor);
				current = true;
			},
			p(ctx, dirty) {
				const switch_instance_changes = (dirty & /*section*/ 1)
				? get_spread_update(switch_instance_spread_levels, [
						{ id: /*section*/ ctx[0].id },
						get_spread_object(/*section*/ ctx[0].props)
					])
				: {};

				if (switch_value !== (switch_value = COMPONENTS.get(/*section*/ ctx[0].component))) {
					if (switch_instance) {
						group_outros();
						const old_component = switch_instance;

						transition_out(old_component.$$.fragment, 1, 0, () => {
							destroy_component(old_component, 1);
						});

						check_outros();
					}

					if (switch_value) {
						switch_instance = new switch_value(switch_props());
						create_component(switch_instance.$$.fragment);
						transition_in(switch_instance.$$.fragment, 1);
						mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
					} else {
						switch_instance = null;
					}
				} else if (switch_value) {
					switch_instance.$set(switch_instance_changes);
				}
			},
			i(local) {
				if (current) return;
				if (switch_instance) transition_in(switch_instance.$$.fragment, local);
				current = true;
			},
			o(local) {
				if (switch_instance) transition_out(switch_instance.$$.fragment, local);
				current = false;
			},
			d(detaching) {
				if (detaching) detach(switch_instance_anchor);
				if (switch_instance) destroy_component(switch_instance, detaching);
			}
		};
	}

	// (26:2) {#if section.tag }
	function create_if_block_4$a(ctx) {
		let uiindicator;
		let current;
		const uiindicator_spread_levels = [{ id: /*section*/ ctx[0].id }, /*section*/ ctx[0].tag];
		let uiindicator_props = {};

		for (let i = 0; i < uiindicator_spread_levels.length; i += 1) {
			uiindicator_props = assign(uiindicator_props, uiindicator_spread_levels[i]);
		}

		uiindicator = new Ui_indicator({ props: uiindicator_props });

		return {
			c() {
				create_component(uiindicator.$$.fragment);
			},
			m(target, anchor) {
				mount_component(uiindicator, target, anchor);
				current = true;
			},
			p(ctx, dirty) {
				const uiindicator_changes = (dirty & /*section*/ 1)
				? get_spread_update(uiindicator_spread_levels, [{ id: /*section*/ ctx[0].id }, get_spread_object(/*section*/ ctx[0].tag)])
				: {};

				uiindicator.$set(uiindicator_changes);
			},
			i(local) {
				if (current) return;
				transition_in(uiindicator.$$.fragment, local);
				current = true;
			},
			o(local) {
				transition_out(uiindicator.$$.fragment, local);
				current = false;
			},
			d(detaching) {
				destroy_component(uiindicator, detaching);
			}
		};
	}

	// (29:2) {#if section.indicator }
	function create_if_block_3$b(ctx) {
		let uiindicator;
		let current;
		const uiindicator_spread_levels = [{ id: /*section*/ ctx[0].id }, /*section*/ ctx[0].indicator];
		let uiindicator_props = {};

		for (let i = 0; i < uiindicator_spread_levels.length; i += 1) {
			uiindicator_props = assign(uiindicator_props, uiindicator_spread_levels[i]);
		}

		uiindicator = new Ui_indicator({ props: uiindicator_props });

		return {
			c() {
				create_component(uiindicator.$$.fragment);
			},
			m(target, anchor) {
				mount_component(uiindicator, target, anchor);
				current = true;
			},
			p(ctx, dirty) {
				const uiindicator_changes = (dirty & /*section*/ 1)
				? get_spread_update(uiindicator_spread_levels, [
						{ id: /*section*/ ctx[0].id },
						get_spread_object(/*section*/ ctx[0].indicator)
					])
				: {};

				uiindicator.$set(uiindicator_changes);
			},
			i(local) {
				if (current) return;
				transition_in(uiindicator.$$.fragment, local);
				current = true;
			},
			o(local) {
				transition_out(uiindicator.$$.fragment, local);
				current = false;
			},
			d(detaching) {
				destroy_component(uiindicator, detaching);
			}
		};
	}

	// (35:0) {#if sectionItems.length }
	function create_if_block$n(ctx) {
		let uisidemenuitems;
		let current;

		uisidemenuitems = new Ui_items({
				props: {
					root: /*root*/ ctx[1],
					items: /*sectionItems*/ ctx[2]
				}
			});

		uisidemenuitems.$on("navigate", /*navigate_handler*/ ctx[5]);

		return {
			c() {
				create_component(uisidemenuitems.$$.fragment);
			},
			m(target, anchor) {
				mount_component(uisidemenuitems, target, anchor);
				current = true;
			},
			p(ctx, dirty) {
				const uisidemenuitems_changes = {};
				if (dirty & /*root*/ 2) uisidemenuitems_changes.root = /*root*/ ctx[1];
				if (dirty & /*sectionItems*/ 4) uisidemenuitems_changes.items = /*sectionItems*/ ctx[2];
				uisidemenuitems.$set(uisidemenuitems_changes);
			},
			i(local) {
				if (current) return;
				transition_in(uisidemenuitems.$$.fragment, local);
				current = true;
			},
			o(local) {
				transition_out(uisidemenuitems.$$.fragment, local);
				current = false;
			},
			d(detaching) {
				destroy_component(uisidemenuitems, detaching);
			}
		};
	}

	function create_fragment$B(ctx) {
		let t;
		let if_block1_anchor;
		let current;
		let if_block0 = /*section*/ ctx[0] && create_if_block_1$i(ctx);
		let if_block1 = /*sectionItems*/ ctx[2].length && create_if_block$n(ctx);

		return {
			c() {
				if (if_block0) if_block0.c();
				t = space();
				if (if_block1) if_block1.c();
				if_block1_anchor = empty();
			},
			m(target, anchor) {
				if (if_block0) if_block0.m(target, anchor);
				insert(target, t, anchor);
				if (if_block1) if_block1.m(target, anchor);
				insert(target, if_block1_anchor, anchor);
				current = true;
			},
			p(ctx, [dirty]) {
				if (/*section*/ ctx[0]) {
					if (if_block0) {
						if_block0.p(ctx, dirty);

						if (dirty & /*section*/ 1) {
							transition_in(if_block0, 1);
						}
					} else {
						if_block0 = create_if_block_1$i(ctx);
						if_block0.c();
						transition_in(if_block0, 1);
						if_block0.m(t.parentNode, t);
					}
				} else if (if_block0) {
					group_outros();

					transition_out(if_block0, 1, 1, () => {
						if_block0 = null;
					});

					check_outros();
				}

				if (/*sectionItems*/ ctx[2].length) {
					if (if_block1) {
						if_block1.p(ctx, dirty);

						if (dirty & /*sectionItems*/ 4) {
							transition_in(if_block1, 1);
						}
					} else {
						if_block1 = create_if_block$n(ctx);
						if_block1.c();
						transition_in(if_block1, 1);
						if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
					}
				} else if (if_block1) {
					group_outros();

					transition_out(if_block1, 1, 1, () => {
						if_block1 = null;
					});

					check_outros();
				}
			},
			i(local) {
				if (current) return;
				transition_in(if_block0);
				transition_in(if_block1);
				current = true;
			},
			o(local) {
				transition_out(if_block0);
				transition_out(if_block1);
				current = false;
			},
			d(detaching) {
				if (if_block0) if_block0.d(detaching);
				if (detaching) detach(t);
				if (if_block1) if_block1.d(detaching);
				if (detaching) detach(if_block1_anchor);
			}
		};
	}

	function instance$B($$self, $$props, $$invalidate) {
		let sectionItems;
		let $LOCALE;
		component_subscribe($$self, LOCALE, $$value => $$invalidate(3, $LOCALE = $$value));
		let { section } = $$props;
		let { items = [] } = $$props;
		let { root = '' } = $$props;

		function navigate_handler(event) {
			bubble.call(this, $$self, event);
		}

		$$self.$$set = $$props => {
			if ('section' in $$props) $$invalidate(0, section = $$props.section);
			if ('items' in $$props) $$invalidate(4, items = $$props.items);
			if ('root' in $$props) $$invalidate(1, root = $$props.root);
		};

		$$self.$$.update = () => {
			if ($$self.$$.dirty & /*items, section*/ 17) {
				$$invalidate(2, sectionItems = items.filter(item => section.id === item.section));
			}
		};

		return [section, root, sectionItems, $LOCALE, items, navigate_handler];
	}

	class Ui_section$2 extends SvelteComponent {
		constructor(options) {
			super();
			init(this, options, instance$B, create_fragment$B, safe_not_equal, { section: 0, items: 4, root: 1 });
		}
	}

	/* src/frame/components/navigation/side/ui.side.menu.svelte generated by Svelte v3.44.3 */

	function get_each_context$7(ctx, list, i) {
		const child_ctx = ctx.slice();
		child_ctx[5] = list[i];
		return child_ctx;
	}

	// (16:0) {#each sections as section}
	function create_each_block$7(ctx) {
		let uisidemenusection;
		let current;

		uisidemenusection = new Ui_section$2({
				props: {
					section: /*section*/ ctx[5],
					items: /*items*/ ctx[1],
					root: /*root*/ ctx[0]
				}
			});

		uisidemenusection.$on("navigate", /*onClick*/ ctx[3]);

		return {
			c() {
				create_component(uisidemenusection.$$.fragment);
			},
			m(target, anchor) {
				mount_component(uisidemenusection, target, anchor);
				current = true;
			},
			p(ctx, dirty) {
				const uisidemenusection_changes = {};
				if (dirty & /*sections*/ 4) uisidemenusection_changes.section = /*section*/ ctx[5];
				if (dirty & /*items*/ 2) uisidemenusection_changes.items = /*items*/ ctx[1];
				if (dirty & /*root*/ 1) uisidemenusection_changes.root = /*root*/ ctx[0];
				uisidemenusection.$set(uisidemenusection_changes);
			},
			i(local) {
				if (current) return;
				transition_in(uisidemenusection.$$.fragment, local);
				current = true;
			},
			o(local) {
				transition_out(uisidemenusection.$$.fragment, local);
				current = false;
			},
			d(detaching) {
				destroy_component(uisidemenusection, detaching);
			}
		};
	}

	function create_fragment$A(ctx) {
		let each_1_anchor;
		let current;
		let each_value = /*sections*/ ctx[2];
		let each_blocks = [];

		for (let i = 0; i < each_value.length; i += 1) {
			each_blocks[i] = create_each_block$7(get_each_context$7(ctx, each_value, i));
		}

		const out = i => transition_out(each_blocks[i], 1, 1, () => {
			each_blocks[i] = null;
		});

		return {
			c() {
				for (let i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].c();
				}

				each_1_anchor = empty();
			},
			m(target, anchor) {
				for (let i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].m(target, anchor);
				}

				insert(target, each_1_anchor, anchor);
				current = true;
			},
			p(ctx, [dirty]) {
				if (dirty & /*sections, items, root, onClick*/ 15) {
					each_value = /*sections*/ ctx[2];
					let i;

					for (i = 0; i < each_value.length; i += 1) {
						const child_ctx = get_each_context$7(ctx, each_value, i);

						if (each_blocks[i]) {
							each_blocks[i].p(child_ctx, dirty);
							transition_in(each_blocks[i], 1);
						} else {
							each_blocks[i] = create_each_block$7(child_ctx);
							each_blocks[i].c();
							transition_in(each_blocks[i], 1);
							each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
						}
					}

					group_outros();

					for (i = each_value.length; i < each_blocks.length; i += 1) {
						out(i);
					}

					check_outros();
				}
			},
			i(local) {
				if (current) return;

				for (let i = 0; i < each_value.length; i += 1) {
					transition_in(each_blocks[i]);
				}

				current = true;
			},
			o(local) {
				each_blocks = each_blocks.filter(Boolean);

				for (let i = 0; i < each_blocks.length; i += 1) {
					transition_out(each_blocks[i]);
				}

				current = false;
			},
			d(detaching) {
				destroy_each(each_blocks, detaching);
				if (detaching) detach(each_1_anchor);
			}
		};
	}

	function instance$A($$self, $$props, $$invalidate) {
		let { root = '' } = $$props;
		let { items = [] } = $$props;
		let { sections = [] } = $$props;
		let { navigate = null } = $$props;

		function onClick(ev) {
			if (typeof navigate === 'function') {
				navigate(ev.detail);
			}
		}

		$$self.$$set = $$props => {
			if ('root' in $$props) $$invalidate(0, root = $$props.root);
			if ('items' in $$props) $$invalidate(1, items = $$props.items);
			if ('sections' in $$props) $$invalidate(2, sections = $$props.sections);
			if ('navigate' in $$props) $$invalidate(4, navigate = $$props.navigate);
		};

		return [root, items, sections, onClick, navigate];
	}

	class Ui_side_menu extends SvelteComponent {
		constructor(options) {
			super();

			init(this, options, instance$A, create_fragment$A, safe_not_equal, {
				root: 0,
				items: 1,
				sections: 2,
				navigate: 4
			});
		}
	}

	var TYPE$1 = 'side';

	var SideMenu = /*#__PURE__*/function (_Menu) {
	  _inherits(SideMenu, _Menu);

	  var _super = _createSuper(SideMenu);

	  function SideMenu() {
	    _classCallCheck(this, SideMenu);

	    return _super.apply(this, arguments);
	  }

	  _createClass(SideMenu, null, [{
	    key: "render",
	    value: function render(app) {
	      if (app) {
	        this.setApp(app);
	      }

	      this.prepareData();

	      if (!this.menu) {
	        this.createUI();
	      }
	    }
	  }, {
	    key: "update",
	    value: function update() {
	      if (this.menu) {
	        this.menu.$destroy();
	        this.createUI();
	      }
	    }
	  }, {
	    key: "createUI",
	    value: function createUI() {
	      var target = document.querySelector(this.getOptions().targetSelector);

	      if (!target) {
	        return;
	      }

	      this.menu = new Ui_side_menu({
	        target: target,
	        props: {
	          items: this.items,
	          sections: this.sections,
	          root: this.getOptions().root,
	          navigate: this.getOptions().navigate
	        }
	      });
	      this.initSizeResponse();
	      this.interval = setInterval(this.updateMenuActiveItem.bind(this), 200);
	      this.bindToggle();
	    }
	  }, {
	    key: "itemIsActive",
	    value: function itemIsActive(itemURL) {
	      return (this.location + '/').indexOf(itemURL + '/') > -1;
	    }
	  }, {
	    key: "updateMenu",
	    value: function updateMenu() {
	      var _this = this;

	      Array.from(document.querySelectorAll(this.getOptions().targetSelector + ' a')).forEach(function (item) {
	        if (_this.itemIsActive(item.getAttribute('href'))) {
	          item.classList.add('is-active');
	        } else {
	          item.classList.remove('is-active');
	        }
	      });
	    }
	  }, {
	    key: "updateMenuActiveItem",
	    value: function updateMenuActiveItem() {
	      var url = window.location.toString(),
	          lastLocation = this.location;

	      if (lastLocation) {
	        if (url !== lastLocation) {
	          this.location = url;
	          this.updateMenu();
	        }
	      } else {
	        this.location = url;
	        this.updateMenu();
	      }
	    }
	  }, {
	    key: "initSizeResponse",
	    value: function initSizeResponse() {
	      this.nav = document.querySelector('nav.navbar');
	      this.aside = document.querySelector('aside');
	      this.main = document.querySelector('main');
	      this.resizeAsideAndMain(this.aside, this.main, this.nav);
	      this.resizeMain(this.main, this.aside);
	      window.addEventListener('resize', this.resizeMain.bind(this));

	      if (this.getOptions().open) {
	        this.show();
	      } else {
	        this.hide();
	      }
	    }
	  }, {
	    key: "resizeMain",
	    value: function resizeMain() {
	      if (this.isTouch()) {
	        if (this.aside.classList.contains('is-active')) {
	          this.main.style.display = 'none';
	        } else {
	          this.main.style.display = 'block';
	          this.main.style.marginLeft = '0px';
	        }
	      } else {
	        var rect = this.aside.getBoundingClientRect();
	        this.main.style.display = 'block';

	        if (this.main.style.height === '0px') {
	          this.main.style.height = 'auto';
	        }

	        this.main.style.marginLeft = rect.width + rect.left + 'px';
	      }
	    }
	  }, {
	    key: "resizeAside",
	    value: function resizeAside() {
	      if (this.aside.style.display !== 'none') {
	        var rect = this.nav.getBoundingClientRect();
	        this.aside.style.height = window.innerHeight - rect.height + 'px';
	        this.aside.style.marginTop = rect.height + 'px';
	      }
	    }
	  }, {
	    key: "resizeAsideAndMain",
	    value: function resizeAsideAndMain() {
	      var rect = this.nav.getBoundingClientRect();
	      this.aside.style.height = window.innerHeight - rect.height + 'px'; //this.aside.style.paddingTop = (rect.height) + 'px';

	      this.main.style.marginTop = rect.height + 'px';
	    }
	  }, {
	    key: "bindToggle",
	    value: function bindToggle() {
	      var _this2 = this;

	      var els = document.querySelectorAll(this.getOptions().toggleSelector);
	      Array.from(els).forEach(function (el) {
	        el.removeEventListener('click', _this2.toggle.bind(_this2));
	        el.addEventListener('click', _this2.toggle.bind(_this2));
	      });
	    }
	  }, {
	    key: "toggle",
	    value: function toggle(e) {
	      e && e.preventDefault();
	      this.aside.classList.toggle('is-active');
	      this.resizeMain();
	      return false;
	    }
	  }, {
	    key: "hide",
	    value: function hide(e) {
	      e && e.preventDefault();
	      this.aside.classList.remove('is-active');
	      this.resizeMain();
	      return false;
	    }
	  }, {
	    key: "show",
	    value: function show(e) {
	      e && e.preventDefault();
	      this.classList.add('is-active');
	      this.resizeMain();
	      return false;
	    }
	  }, {
	    key: "isOpen",
	    value: function isOpen() {
	      if (this.aside) {
	        return this.aside.classList.contains('is-active');
	      } else {
	        return true;
	      }
	    }
	  }]);

	  return SideMenu;
	}(Menu);

	_defineProperty(SideMenu, "nav", void 0);

	_defineProperty(SideMenu, "main", void 0);

	_defineProperty(SideMenu, "aside", void 0);

	_defineProperty(SideMenu, "DEFAULT", {
	  section: 'any',
	  sectionTitle: 'ÐÐµÐ½Ñ',
	  priority: 0,
	  open: false
	});

	_defineProperty(SideMenu, "options", {
	  type: TYPE$1,
	  items: [],
	  sections: [],
	  targetSelector: "#".concat(TYPE$1, "-menu"),
	  toggleSelector: ".".concat(TYPE$1, "-menu-toggle"),
	  root: '/',
	  open: false,
	  navigate: function navigate(urls) {
	    SideMenu.hide();

	    if (!SideMenu.isDirectNavigation() && SideMenu.app) {
	      var func = SideMenu.app.getWorking('router');

	      if (func) {
	        return func.navigate(urls.short);
	      }
	    }

	    document.location.assign(urls.full);
	  }
	});

	/* src/elements/icon/ui.icon.svelte generated by Svelte v3.44.3 */

	function create_if_block_2$b(ctx) {
		let figure;
		let img;
		let img_src_value;
		let figure_class_value;

		return {
			c() {
				figure = element("figure");
				img = element("img");
				if (!src_url_equal(img.src, img_src_value = /*src*/ ctx[4])) attr(img, "src", img_src_value);
				attr(img, "title", /*title*/ ctx[0]);
				attr(img, "alt", /*title*/ ctx[0]);
				attr(img, "width", /*width*/ ctx[5]);
				attr(img, "height", /*height*/ ctx[6]);

				attr(figure, "class", figure_class_value = "image " + (/*width*/ ctx[5] && /*height*/ ctx[6]
				? `is-${/*width*/ ctx[5]}x${/*height*/ ctx[6]}`
				: '') + "");
			},
			m(target, anchor) {
				insert(target, figure, anchor);
				append(figure, img);
			},
			p(ctx, dirty) {
				if (dirty & /*src*/ 16 && !src_url_equal(img.src, img_src_value = /*src*/ ctx[4])) {
					attr(img, "src", img_src_value);
				}

				if (dirty & /*title*/ 1) {
					attr(img, "title", /*title*/ ctx[0]);
				}

				if (dirty & /*title*/ 1) {
					attr(img, "alt", /*title*/ ctx[0]);
				}

				if (dirty & /*width*/ 32) {
					attr(img, "width", /*width*/ ctx[5]);
				}

				if (dirty & /*height*/ 64) {
					attr(img, "height", /*height*/ ctx[6]);
				}

				if (dirty & /*width, height*/ 96 && figure_class_value !== (figure_class_value = "image " + (/*width*/ ctx[5] && /*height*/ ctx[6]
				? `is-${/*width*/ ctx[5]}x${/*height*/ ctx[6]}`
				: '') + "")) {
					attr(figure, "class", figure_class_value);
				}
			},
			i: noop,
			o: noop,
			d(detaching) {
				if (detaching) detach(figure);
			}
		};
	}

	// (18:15) 
	function create_if_block_1$h(ctx) {
		let span;

		return {
			c() {
				span = element("span");
				attr(span, "class", "icon");
			},
			m(target, anchor) {
				insert(target, span, anchor);
				span.innerHTML = /*svg*/ ctx[3];
			},
			p(ctx, dirty) {
				if (dirty & /*svg*/ 8) span.innerHTML = /*svg*/ ctx[3];		},
			i: noop,
			o: noop,
			d(detaching) {
				if (detaching) detach(span);
			}
		};
	}

	// (16:0) {#if font }
	function create_if_block$m(ctx) {
		let uiiconfont;
		let current;

		uiiconfont = new Ui_icon_font({
				props: {
					font: /*font*/ ctx[2],
					size: /*size*/ ctx[1],
					title: /*title*/ ctx[0]
				}
			});

		return {
			c() {
				create_component(uiiconfont.$$.fragment);
			},
			m(target, anchor) {
				mount_component(uiiconfont, target, anchor);
				current = true;
			},
			p(ctx, dirty) {
				const uiiconfont_changes = {};
				if (dirty & /*font*/ 4) uiiconfont_changes.font = /*font*/ ctx[2];
				if (dirty & /*size*/ 2) uiiconfont_changes.size = /*size*/ ctx[1];
				if (dirty & /*title*/ 1) uiiconfont_changes.title = /*title*/ ctx[0];
				uiiconfont.$set(uiiconfont_changes);
			},
			i(local) {
				if (current) return;
				transition_in(uiiconfont.$$.fragment, local);
				current = true;
			},
			o(local) {
				transition_out(uiiconfont.$$.fragment, local);
				current = false;
			},
			d(detaching) {
				destroy_component(uiiconfont, detaching);
			}
		};
	}

	function create_fragment$z(ctx) {
		let current_block_type_index;
		let if_block;
		let if_block_anchor;
		let current;
		const if_block_creators = [create_if_block$m, create_if_block_1$h, create_if_block_2$b];
		const if_blocks = [];

		function select_block_type(ctx, dirty) {
			if (/*font*/ ctx[2]) return 0;
			if (/*svg*/ ctx[3]) return 1;
			if (/*src*/ ctx[4]) return 2;
			return -1;
		}

		if (~(current_block_type_index = select_block_type(ctx))) {
			if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
		}

		return {
			c() {
				if (if_block) if_block.c();
				if_block_anchor = empty();
			},
			m(target, anchor) {
				if (~current_block_type_index) {
					if_blocks[current_block_type_index].m(target, anchor);
				}

				insert(target, if_block_anchor, anchor);
				current = true;
			},
			p(ctx, [dirty]) {
				let previous_block_index = current_block_type_index;
				current_block_type_index = select_block_type(ctx);

				if (current_block_type_index === previous_block_index) {
					if (~current_block_type_index) {
						if_blocks[current_block_type_index].p(ctx, dirty);
					}
				} else {
					if (if_block) {
						group_outros();

						transition_out(if_blocks[previous_block_index], 1, 1, () => {
							if_blocks[previous_block_index] = null;
						});

						check_outros();
					}

					if (~current_block_type_index) {
						if_block = if_blocks[current_block_type_index];

						if (!if_block) {
							if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
							if_block.c();
						} else {
							if_block.p(ctx, dirty);
						}

						transition_in(if_block, 1);
						if_block.m(if_block_anchor.parentNode, if_block_anchor);
					} else {
						if_block = null;
					}
				}
			},
			i(local) {
				if (current) return;
				transition_in(if_block);
				current = true;
			},
			o(local) {
				transition_out(if_block);
				current = false;
			},
			d(detaching) {
				if (~current_block_type_index) {
					if_blocks[current_block_type_index].d(detaching);
				}

				if (detaching) detach(if_block_anchor);
			}
		};
	}

	function instance$z($$self, $$props, $$invalidate) {
		let { title = '' } = $$props;
		let { size = '' } = $$props;
		let { font = '' } = $$props;
		let { svg = '' } = $$props;
		let { src = '' } = $$props;
		let { width } = $$props;
		let { height } = $$props;

		$$self.$$set = $$props => {
			if ('title' in $$props) $$invalidate(0, title = $$props.title);
			if ('size' in $$props) $$invalidate(1, size = $$props.size);
			if ('font' in $$props) $$invalidate(2, font = $$props.font);
			if ('svg' in $$props) $$invalidate(3, svg = $$props.svg);
			if ('src' in $$props) $$invalidate(4, src = $$props.src);
			if ('width' in $$props) $$invalidate(5, width = $$props.width);
			if ('height' in $$props) $$invalidate(6, height = $$props.height);
		};

		return [title, size, font, svg, src, width, height];
	}

	class Ui_icon extends SvelteComponent {
		constructor(options) {
			super();

			init(this, options, instance$z, create_fragment$z, safe_not_equal, {
				title: 0,
				size: 1,
				font: 2,
				svg: 3,
				src: 4,
				width: 5,
				height: 6
			});
		}
	}

	/* src/frame/components/navigation/top/ui.brand.svelte generated by Svelte v3.44.3 */

	function create_fragment$y(ctx) {
		let a;
		let uiicon;
		let t_value = (/*title*/ ctx[1] ? ` ${/*title*/ ctx[1]}` : '') + "";
		let t;
		let current;
		const uiicon_spread_levels = [/*icon*/ ctx[2]];
		let uiicon_props = {};

		for (let i = 0; i < uiicon_spread_levels.length; i += 1) {
			uiicon_props = assign(uiicon_props, uiicon_spread_levels[i]);
		}

		uiicon = new Ui_icon({ props: uiicon_props });

		return {
			c() {
				a = element("a");
				create_component(uiicon.$$.fragment);
				t = text(t_value);
				attr(a, "class", "navbar-item");
				attr(a, "href", /*url*/ ctx[0]);
			},
			m(target, anchor) {
				insert(target, a, anchor);
				mount_component(uiicon, a, null);
				append(a, t);
				current = true;
			},
			p(ctx, [dirty]) {
				const uiicon_changes = (dirty & /*icon*/ 4)
				? get_spread_update(uiicon_spread_levels, [get_spread_object(/*icon*/ ctx[2])])
				: {};

				uiicon.$set(uiicon_changes);
				if ((!current || dirty & /*title*/ 2) && t_value !== (t_value = (/*title*/ ctx[1] ? ` ${/*title*/ ctx[1]}` : '') + "")) set_data(t, t_value);

				if (!current || dirty & /*url*/ 1) {
					attr(a, "href", /*url*/ ctx[0]);
				}
			},
			i(local) {
				if (current) return;
				transition_in(uiicon.$$.fragment, local);
				current = true;
			},
			o(local) {
				transition_out(uiicon.$$.fragment, local);
				current = false;
			},
			d(detaching) {
				if (detaching) detach(a);
				destroy_component(uiicon);
			}
		};
	}

	function instance$y($$self, $$props, $$invalidate) {
		let { url = '/' } = $$props;
		let { title = '' } = $$props;

		let { icon = {
			src: 'https://via.placeholder.com/56x28',
			width: 28,
			height: 56
		} } = $$props;

		$$self.$$set = $$props => {
			if ('url' in $$props) $$invalidate(0, url = $$props.url);
			if ('title' in $$props) $$invalidate(1, title = $$props.title);
			if ('icon' in $$props) $$invalidate(2, icon = $$props.icon);
		};

		return [url, title, icon];
	}

	class Ui_brand extends SvelteComponent {
		constructor(options) {
			super();
			init(this, options, instance$y, create_fragment$y, safe_not_equal, { url: 0, title: 1, icon: 2 });
		}
	}

	/* src/frame/components/navigation/top/ui.item.content.svelte generated by Svelte v3.44.3 */

	function create_else_block$g(ctx) {
		let t_value = /*$LOCALE*/ ctx[1][/*item*/ ctx[0].title] + "";
		let t;

		return {
			c() {
				t = text(t_value);
			},
			m(target, anchor) {
				insert(target, t, anchor);
			},
			p(ctx, dirty) {
				if (dirty & /*$LOCALE, item*/ 3 && t_value !== (t_value = /*$LOCALE*/ ctx[1][/*item*/ ctx[0].title] + "")) set_data(t, t_value);
			},
			i: noop,
			o: noop,
			d(detaching) {
				if (detaching) detach(t);
			}
		};
	}

	// (24:94) 
	function create_if_block_3$a(ctx) {
		let switch_instance;
		let switch_instance_anchor;
		let current;
		const switch_instance_spread_levels = [{ id: /*item*/ ctx[0].id }, /*item*/ ctx[0].props];
		var switch_value = COMPONENTS.get(/*item*/ ctx[0].component);

		function switch_props(ctx) {
			let switch_instance_props = {};

			for (let i = 0; i < switch_instance_spread_levels.length; i += 1) {
				switch_instance_props = assign(switch_instance_props, switch_instance_spread_levels[i]);
			}

			return { props: switch_instance_props };
		}

		if (switch_value) {
			switch_instance = new switch_value(switch_props());
		}

		return {
			c() {
				if (switch_instance) create_component(switch_instance.$$.fragment);
				switch_instance_anchor = empty();
			},
			m(target, anchor) {
				if (switch_instance) {
					mount_component(switch_instance, target, anchor);
				}

				insert(target, switch_instance_anchor, anchor);
				current = true;
			},
			p(ctx, dirty) {
				const switch_instance_changes = (dirty & /*item*/ 1)
				? get_spread_update(switch_instance_spread_levels, [{ id: /*item*/ ctx[0].id }, get_spread_object(/*item*/ ctx[0].props)])
				: {};

				if (switch_value !== (switch_value = COMPONENTS.get(/*item*/ ctx[0].component))) {
					if (switch_instance) {
						group_outros();
						const old_component = switch_instance;

						transition_out(old_component.$$.fragment, 1, 0, () => {
							destroy_component(old_component, 1);
						});

						check_outros();
					}

					if (switch_value) {
						switch_instance = new switch_value(switch_props());
						create_component(switch_instance.$$.fragment);
						transition_in(switch_instance.$$.fragment, 1);
						mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
					} else {
						switch_instance = null;
					}
				} else if (switch_value) {
					switch_instance.$set(switch_instance_changes);
				}
			},
			i(local) {
				if (current) return;
				if (switch_instance) transition_in(switch_instance.$$.fragment, local);
				current = true;
			},
			o(local) {
				if (switch_instance) transition_out(switch_instance.$$.fragment, local);
				current = false;
			},
			d(detaching) {
				if (detaching) detach(switch_instance_anchor);
				if (switch_instance) destroy_component(switch_instance, detaching);
			}
		};
	}

	// (22:0) {#if item.icon}
	function create_if_block_2$a(ctx) {
		let uiicon;
		let current;
		const uiicon_spread_levels = [/*item*/ ctx[0].icon];
		let uiicon_props = {};

		for (let i = 0; i < uiicon_spread_levels.length; i += 1) {
			uiicon_props = assign(uiicon_props, uiicon_spread_levels[i]);
		}

		uiicon = new Ui_icon({ props: uiicon_props });

		return {
			c() {
				create_component(uiicon.$$.fragment);
			},
			m(target, anchor) {
				mount_component(uiicon, target, anchor);
				current = true;
			},
			p(ctx, dirty) {
				const uiicon_changes = (dirty & /*item*/ 1)
				? get_spread_update(uiicon_spread_levels, [get_spread_object(/*item*/ ctx[0].icon)])
				: {};

				uiicon.$set(uiicon_changes);
			},
			i(local) {
				if (current) return;
				transition_in(uiicon.$$.fragment, local);
				current = true;
			},
			o(local) {
				transition_out(uiicon.$$.fragment, local);
				current = false;
			},
			d(detaching) {
				destroy_component(uiicon, detaching);
			}
		};
	}

	// (34:0) {#if item.tag }
	function create_if_block_1$g(ctx) {
		let uitag;
		let current;

		const uitag_spread_levels = [
			{ top: true },
			{ right: true },
			{ size: "small" },
			{ id: /*item*/ ctx[0].id },
			/*item*/ ctx[0].tag
		];

		let uitag_props = {};

		for (let i = 0; i < uitag_spread_levels.length; i += 1) {
			uitag_props = assign(uitag_props, uitag_spread_levels[i]);
		}

		uitag = new Ui_tag$1({ props: uitag_props });

		return {
			c() {
				create_component(uitag.$$.fragment);
			},
			m(target, anchor) {
				mount_component(uitag, target, anchor);
				current = true;
			},
			p(ctx, dirty) {
				const uitag_changes = (dirty & /*item*/ 1)
				? get_spread_update(uitag_spread_levels, [
						uitag_spread_levels[0],
						uitag_spread_levels[1],
						uitag_spread_levels[2],
						{ id: /*item*/ ctx[0].id },
						get_spread_object(/*item*/ ctx[0].tag)
					])
				: {};

				uitag.$set(uitag_changes);
			},
			i(local) {
				if (current) return;
				transition_in(uitag.$$.fragment, local);
				current = true;
			},
			o(local) {
				transition_out(uitag.$$.fragment, local);
				current = false;
			},
			d(detaching) {
				destroy_component(uitag, detaching);
			}
		};
	}

	// (38:0) {#if item.indicator }
	function create_if_block$l(ctx) {
		let uiindicator;
		let current;
		const uiindicator_spread_levels = [{ id: /*item*/ ctx[0].id }, /*item*/ ctx[0].indicator];
		let uiindicator_props = {};

		for (let i = 0; i < uiindicator_spread_levels.length; i += 1) {
			uiindicator_props = assign(uiindicator_props, uiindicator_spread_levels[i]);
		}

		uiindicator = new Ui_indicator({ props: uiindicator_props });

		return {
			c() {
				create_component(uiindicator.$$.fragment);
			},
			m(target, anchor) {
				mount_component(uiindicator, target, anchor);
				current = true;
			},
			p(ctx, dirty) {
				const uiindicator_changes = (dirty & /*item*/ 1)
				? get_spread_update(uiindicator_spread_levels, [{ id: /*item*/ ctx[0].id }, get_spread_object(/*item*/ ctx[0].indicator)])
				: {};

				uiindicator.$set(uiindicator_changes);
			},
			i(local) {
				if (current) return;
				transition_in(uiindicator.$$.fragment, local);
				current = true;
			},
			o(local) {
				transition_out(uiindicator.$$.fragment, local);
				current = false;
			},
			d(detaching) {
				destroy_component(uiindicator, detaching);
			}
		};
	}

	function create_fragment$x(ctx) {
		let show_if;
		let current_block_type_index;
		let if_block0;
		let t0;
		let t1;
		let if_block2_anchor;
		let current;
		const if_block_creators = [create_if_block_2$a, create_if_block_3$a, create_else_block$g];
		const if_blocks = [];

		function select_block_type(ctx, dirty) {
			if (/*item*/ ctx[0].icon) return 0;
			if (show_if == null || dirty & /*item*/ 1) show_if = !!(/*item*/ ctx[0].type === 'component' && /*item*/ ctx[0].component && COMPONENTS.contains(/*item*/ ctx[0].component));
			if (show_if) return 1;
			return 2;
		}

		current_block_type_index = select_block_type(ctx, -1);
		if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
		let if_block1 = /*item*/ ctx[0].tag && create_if_block_1$g(ctx);
		let if_block2 = /*item*/ ctx[0].indicator && create_if_block$l(ctx);

		return {
			c() {
				if_block0.c();
				t0 = space();
				if (if_block1) if_block1.c();
				t1 = space();
				if (if_block2) if_block2.c();
				if_block2_anchor = empty();
			},
			m(target, anchor) {
				if_blocks[current_block_type_index].m(target, anchor);
				insert(target, t0, anchor);
				if (if_block1) if_block1.m(target, anchor);
				insert(target, t1, anchor);
				if (if_block2) if_block2.m(target, anchor);
				insert(target, if_block2_anchor, anchor);
				current = true;
			},
			p(ctx, [dirty]) {
				let previous_block_index = current_block_type_index;
				current_block_type_index = select_block_type(ctx, dirty);

				if (current_block_type_index === previous_block_index) {
					if_blocks[current_block_type_index].p(ctx, dirty);
				} else {
					group_outros();

					transition_out(if_blocks[previous_block_index], 1, 1, () => {
						if_blocks[previous_block_index] = null;
					});

					check_outros();
					if_block0 = if_blocks[current_block_type_index];

					if (!if_block0) {
						if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
						if_block0.c();
					} else {
						if_block0.p(ctx, dirty);
					}

					transition_in(if_block0, 1);
					if_block0.m(t0.parentNode, t0);
				}

				if (/*item*/ ctx[0].tag) {
					if (if_block1) {
						if_block1.p(ctx, dirty);

						if (dirty & /*item*/ 1) {
							transition_in(if_block1, 1);
						}
					} else {
						if_block1 = create_if_block_1$g(ctx);
						if_block1.c();
						transition_in(if_block1, 1);
						if_block1.m(t1.parentNode, t1);
					}
				} else if (if_block1) {
					group_outros();

					transition_out(if_block1, 1, 1, () => {
						if_block1 = null;
					});

					check_outros();
				}

				if (/*item*/ ctx[0].indicator) {
					if (if_block2) {
						if_block2.p(ctx, dirty);

						if (dirty & /*item*/ 1) {
							transition_in(if_block2, 1);
						}
					} else {
						if_block2 = create_if_block$l(ctx);
						if_block2.c();
						transition_in(if_block2, 1);
						if_block2.m(if_block2_anchor.parentNode, if_block2_anchor);
					}
				} else if (if_block2) {
					group_outros();

					transition_out(if_block2, 1, 1, () => {
						if_block2 = null;
					});

					check_outros();
				}
			},
			i(local) {
				if (current) return;
				transition_in(if_block0);
				transition_in(if_block1);
				transition_in(if_block2);
				current = true;
			},
			o(local) {
				transition_out(if_block0);
				transition_out(if_block1);
				transition_out(if_block2);
				current = false;
			},
			d(detaching) {
				if_blocks[current_block_type_index].d(detaching);
				if (detaching) detach(t0);
				if (if_block1) if_block1.d(detaching);
				if (detaching) detach(t1);
				if (if_block2) if_block2.d(detaching);
				if (detaching) detach(if_block2_anchor);
			}
		};
	}

	function instance$x($$self, $$props, $$invalidate) {
		let $LOCALE;
		component_subscribe($$self, LOCALE, $$value => $$invalidate(1, $LOCALE = $$value));
		let { item } = $$props;

		$$self.$$set = $$props => {
			if ('item' in $$props) $$invalidate(0, item = $$props.item);
		};

		return [item, $LOCALE];
	}

	class Ui_item_content extends SvelteComponent {
		constructor(options) {
			super();
			init(this, options, instance$x, create_fragment$x, safe_not_equal, { item: 0 });
		}
	}

	/* src/frame/components/navigation/top/ui.item.svelte generated by Svelte v3.44.3 */

	function create_if_block_1$f(ctx) {
		let hr;
		let hr_class_value;

		return {
			c() {
				hr = element("hr");

				attr(hr, "class", hr_class_value = "navbar-divider " + (/*hidden*/ ctx[2]
				? `is-hidden-${/*hidden*/ ctx[2]}`
				: '') + "");
			},
			m(target, anchor) {
				insert(target, hr, anchor);
			},
			p(ctx, dirty) {
				if (dirty & /*hidden*/ 4 && hr_class_value !== (hr_class_value = "navbar-divider " + (/*hidden*/ ctx[2]
				? `is-hidden-${/*hidden*/ ctx[2]}`
				: '') + "")) {
					attr(hr, "class", hr_class_value);
				}
			},
			d(detaching) {
				if (detaching) detach(hr);
			}
		};
	}

	// (32:0) {:else}
	function create_else_block$f(ctx) {
		let div;
		let uiitemcontent;
		let div_class_value;
		let current;
		let mounted;
		let dispose;
		uiitemcontent = new Ui_item_content({ props: { item: /*item*/ ctx[1] } });

		return {
			c() {
				div = element("div");
				create_component(uiitemcontent.$$.fragment);

				attr(div, "class", div_class_value = "navbar-item " + (/*hidden*/ ctx[2]
				? `is-hidden-${/*hidden*/ ctx[2]}`
				: '') + " " + /*item*/ ctx[1].classes + " " + /*classes*/ ctx[3]);
			},
			m(target, anchor) {
				insert(target, div, anchor);
				mount_component(uiitemcontent, div, null);
				current = true;

				if (!mounted) {
					dispose = listen(div, "click", /*onClick*/ ctx[4]);
					mounted = true;
				}
			},
			p(ctx, dirty) {
				const uiitemcontent_changes = {};
				if (dirty & /*item*/ 2) uiitemcontent_changes.item = /*item*/ ctx[1];
				uiitemcontent.$set(uiitemcontent_changes);

				if (!current || dirty & /*hidden, item, classes*/ 14 && div_class_value !== (div_class_value = "navbar-item " + (/*hidden*/ ctx[2]
				? `is-hidden-${/*hidden*/ ctx[2]}`
				: '') + " " + /*item*/ ctx[1].classes + " " + /*classes*/ ctx[3])) {
					attr(div, "class", div_class_value);
				}
			},
			i(local) {
				if (current) return;
				transition_in(uiitemcontent.$$.fragment, local);
				current = true;
			},
			o(local) {
				transition_out(uiitemcontent.$$.fragment, local);
				current = false;
			},
			d(detaching) {
				if (detaching) detach(div);
				destroy_component(uiitemcontent);
				mounted = false;
				dispose();
			}
		};
	}

	// (23:0) {#if item.url }
	function create_if_block$k(ctx) {
		let a;
		let uiitemcontent;
		let a_class_value;
		let a_href_value;
		let a_data_href_value;
		let current;
		let mounted;
		let dispose;
		uiitemcontent = new Ui_item_content({ props: { item: /*item*/ ctx[1] } });

		return {
			c() {
				a = element("a");
				create_component(uiitemcontent.$$.fragment);

				attr(a, "class", a_class_value = "navbar-item " + (/*hidden*/ ctx[2]
				? `is-hidden-${/*hidden*/ ctx[2]}`
				: '') + " " + /*item*/ ctx[1].classes + " " + /*classes*/ ctx[3] + "");

				attr(a, "href", a_href_value = "" + (/*root*/ ctx[0] + /*item*/ ctx[1].url));
				attr(a, "data-href", a_data_href_value = /*item*/ ctx[1].url);
			},
			m(target, anchor) {
				insert(target, a, anchor);
				mount_component(uiitemcontent, a, null);
				current = true;

				if (!mounted) {
					dispose = listen(a, "click", /*onClick*/ ctx[4]);
					mounted = true;
				}
			},
			p(ctx, dirty) {
				const uiitemcontent_changes = {};
				if (dirty & /*item*/ 2) uiitemcontent_changes.item = /*item*/ ctx[1];
				uiitemcontent.$set(uiitemcontent_changes);

				if (!current || dirty & /*hidden, item, classes*/ 14 && a_class_value !== (a_class_value = "navbar-item " + (/*hidden*/ ctx[2]
				? `is-hidden-${/*hidden*/ ctx[2]}`
				: '') + " " + /*item*/ ctx[1].classes + " " + /*classes*/ ctx[3] + "")) {
					attr(a, "class", a_class_value);
				}

				if (!current || dirty & /*root, item*/ 3 && a_href_value !== (a_href_value = "" + (/*root*/ ctx[0] + /*item*/ ctx[1].url))) {
					attr(a, "href", a_href_value);
				}

				if (!current || dirty & /*item*/ 2 && a_data_href_value !== (a_data_href_value = /*item*/ ctx[1].url)) {
					attr(a, "data-href", a_data_href_value);
				}
			},
			i(local) {
				if (current) return;
				transition_in(uiitemcontent.$$.fragment, local);
				current = true;
			},
			o(local) {
				transition_out(uiitemcontent.$$.fragment, local);
				current = false;
			},
			d(detaching) {
				if (detaching) detach(a);
				destroy_component(uiitemcontent);
				mounted = false;
				dispose();
			}
		};
	}

	function create_fragment$w(ctx) {
		let t;
		let current_block_type_index;
		let if_block1;
		let if_block1_anchor;
		let current;
		let if_block0 = /*item*/ ctx[1].break && create_if_block_1$f(ctx);
		const if_block_creators = [create_if_block$k, create_else_block$f];
		const if_blocks = [];

		function select_block_type(ctx, dirty) {
			if (/*item*/ ctx[1].url) return 0;
			return 1;
		}

		current_block_type_index = select_block_type(ctx);
		if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

		return {
			c() {
				if (if_block0) if_block0.c();
				t = space();
				if_block1.c();
				if_block1_anchor = empty();
			},
			m(target, anchor) {
				if (if_block0) if_block0.m(target, anchor);
				insert(target, t, anchor);
				if_blocks[current_block_type_index].m(target, anchor);
				insert(target, if_block1_anchor, anchor);
				current = true;
			},
			p(ctx, [dirty]) {
				if (/*item*/ ctx[1].break) {
					if (if_block0) {
						if_block0.p(ctx, dirty);
					} else {
						if_block0 = create_if_block_1$f(ctx);
						if_block0.c();
						if_block0.m(t.parentNode, t);
					}
				} else if (if_block0) {
					if_block0.d(1);
					if_block0 = null;
				}

				let previous_block_index = current_block_type_index;
				current_block_type_index = select_block_type(ctx);

				if (current_block_type_index === previous_block_index) {
					if_blocks[current_block_type_index].p(ctx, dirty);
				} else {
					group_outros();

					transition_out(if_blocks[previous_block_index], 1, 1, () => {
						if_blocks[previous_block_index] = null;
					});

					check_outros();
					if_block1 = if_blocks[current_block_type_index];

					if (!if_block1) {
						if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
						if_block1.c();
					} else {
						if_block1.p(ctx, dirty);
					}

					transition_in(if_block1, 1);
					if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
				}
			},
			i(local) {
				if (current) return;
				transition_in(if_block1);
				current = true;
			},
			o(local) {
				transition_out(if_block1);
				current = false;
			},
			d(detaching) {
				if (if_block0) if_block0.d(detaching);
				if (detaching) detach(t);
				if_blocks[current_block_type_index].d(detaching);
				if (detaching) detach(if_block1_anchor);
			}
		};
	}

	function instance$w($$self, $$props, $$invalidate) {
		const dispatch = createEventDispatcher();
		let { root = '' } = $$props;
		let { item = {} } = $$props;
		let { hidden = '' } = $$props;
		let { classes = '' } = $$props;

		function onClick(event) {
			dispatch('click', { event, element: item });
		}

		$$self.$$set = $$props => {
			if ('root' in $$props) $$invalidate(0, root = $$props.root);
			if ('item' in $$props) $$invalidate(1, item = $$props.item);
			if ('hidden' in $$props) $$invalidate(2, hidden = $$props.hidden);
			if ('classes' in $$props) $$invalidate(3, classes = $$props.classes);
		};

		return [root, item, hidden, classes, onClick];
	}

	class Ui_item extends SvelteComponent {
		constructor(options) {
			super();
			init(this, options, instance$w, create_fragment$w, safe_not_equal, { root: 0, item: 1, hidden: 2, classes: 3 });
		}
	}

	/* src/frame/components/navigation/top/ui.section.svelte generated by Svelte v3.44.3 */

	function get_each_context$6(ctx, list, i) {
		const child_ctx = ctx.slice();
		child_ctx[10] = list[i];
		return child_ctx;
	}

	// (47:0) {:else}
	function create_else_block$e(ctx) {
		let div;
		let uiitemcontent;
		let div_class_value;
		let current;
		let mounted;
		let dispose;
		uiitemcontent = new Ui_item_content({ props: { item: /*section*/ ctx[1] } });

		return {
			c() {
				div = element("div");
				create_component(uiitemcontent.$$.fragment);

				attr(div, "class", div_class_value = "navbar-item " + (/*hidden*/ ctx[3]
				? `is-hidden-${/*hidden*/ ctx[3]}`
				: '') + "");
			},
			m(target, anchor) {
				insert(target, div, anchor);
				mount_component(uiitemcontent, div, null);
				current = true;

				if (!mounted) {
					dispose = listen(div, "click", /*onClick*/ ctx[7]);
					mounted = true;
				}
			},
			p(ctx, dirty) {
				const uiitemcontent_changes = {};
				if (dirty & /*section*/ 2) uiitemcontent_changes.item = /*section*/ ctx[1];
				uiitemcontent.$set(uiitemcontent_changes);

				if (!current || dirty & /*hidden*/ 8 && div_class_value !== (div_class_value = "navbar-item " + (/*hidden*/ ctx[3]
				? `is-hidden-${/*hidden*/ ctx[3]}`
				: '') + "")) {
					attr(div, "class", div_class_value);
				}
			},
			i(local) {
				if (current) return;
				transition_in(uiitemcontent.$$.fragment, local);
				current = true;
			},
			o(local) {
				transition_out(uiitemcontent.$$.fragment, local);
				current = false;
			},
			d(detaching) {
				if (detaching) detach(div);
				destroy_component(uiitemcontent);
				mounted = false;
				dispose();
			}
		};
	}

	// (39:0) {#if section.url }
	function create_if_block_1$e(ctx) {
		let a;
		let uiitemcontent;
		let a_class_value;
		let a_href_value;
		let a_data_href_value;
		let current;
		let mounted;
		let dispose;
		uiitemcontent = new Ui_item_content({ props: { item: /*section*/ ctx[1] } });

		return {
			c() {
				a = element("a");
				create_component(uiitemcontent.$$.fragment);

				attr(a, "class", a_class_value = "navbar-item " + (/*hidden*/ ctx[3]
				? `is-hidden-${/*hidden*/ ctx[3]}`
				: '') + "");

				attr(a, "href", a_href_value = "" + (/*root*/ ctx[0] + /*section*/ ctx[1].url));
				attr(a, "data-href", a_data_href_value = /*section*/ ctx[1].url);
			},
			m(target, anchor) {
				insert(target, a, anchor);
				mount_component(uiitemcontent, a, null);
				current = true;

				if (!mounted) {
					dispose = listen(a, "click", /*onClick*/ ctx[7]);
					mounted = true;
				}
			},
			p(ctx, dirty) {
				const uiitemcontent_changes = {};
				if (dirty & /*section*/ 2) uiitemcontent_changes.item = /*section*/ ctx[1];
				uiitemcontent.$set(uiitemcontent_changes);

				if (!current || dirty & /*hidden*/ 8 && a_class_value !== (a_class_value = "navbar-item " + (/*hidden*/ ctx[3]
				? `is-hidden-${/*hidden*/ ctx[3]}`
				: '') + "")) {
					attr(a, "class", a_class_value);
				}

				if (!current || dirty & /*root, section*/ 3 && a_href_value !== (a_href_value = "" + (/*root*/ ctx[0] + /*section*/ ctx[1].url))) {
					attr(a, "href", a_href_value);
				}

				if (!current || dirty & /*section*/ 2 && a_data_href_value !== (a_data_href_value = /*section*/ ctx[1].url)) {
					attr(a, "data-href", a_data_href_value);
				}
			},
			i(local) {
				if (current) return;
				transition_in(uiitemcontent.$$.fragment, local);
				current = true;
			},
			o(local) {
				transition_out(uiitemcontent.$$.fragment, local);
				current = false;
			},
			d(detaching) {
				if (detaching) detach(a);
				destroy_component(uiitemcontent);
				mounted = false;
				dispose();
			}
		};
	}

	// (23:0) {#if items.length }
	function create_if_block$j(ctx) {
		let div1;
		let a;
		let uiitemcontent;
		let a_class_value;
		let t;
		let div0;
		let each_blocks = [];
		let each_1_lookup = new Map();
		let div0_class_value;
		let div1_class_value;
		let current;
		let mounted;
		let dispose;
		uiitemcontent = new Ui_item_content({ props: { item: /*section*/ ctx[1] } });
		let each_value = /*items*/ ctx[2];
		const get_key = ctx => /*item*/ ctx[10].id;

		for (let i = 0; i < each_value.length; i += 1) {
			let child_ctx = get_each_context$6(ctx, each_value, i);
			let key = get_key(child_ctx);
			each_1_lookup.set(key, each_blocks[i] = create_each_block$6(key, child_ctx));
		}

		return {
			c() {
				div1 = element("div");
				a = element("a");
				create_component(uiitemcontent.$$.fragment);
				t = space();
				div0 = element("div");

				for (let i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].c();
				}

				attr(a, "href", "");
				attr(a, "class", a_class_value = "navbar-link " + (/*arrowless*/ ctx[5] ? 'is-arrowless' : ''));
				attr(div0, "class", div0_class_value = "navbar-dropdown " + (/*right*/ ctx[6] ? 'is-right' : ''));

				attr(div1, "class", div1_class_value = "navbar-item has-dropdown " + (/*hoverable*/ ctx[4] ? 'is-hoverable' : '') + " " + (/*hidden*/ ctx[3]
				? `is-hidden-${/*hidden*/ ctx[3]}`
				: '') + "");
			},
			m(target, anchor) {
				insert(target, div1, anchor);
				append(div1, a);
				mount_component(uiitemcontent, a, null);
				append(div1, t);
				append(div1, div0);

				for (let i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].m(div0, null);
				}

				current = true;

				if (!mounted) {
					dispose = listen(a, "click", /*onClick*/ ctx[7]);
					mounted = true;
				}
			},
			p(ctx, dirty) {
				const uiitemcontent_changes = {};
				if (dirty & /*section*/ 2) uiitemcontent_changes.item = /*section*/ ctx[1];
				uiitemcontent.$set(uiitemcontent_changes);

				if (!current || dirty & /*arrowless*/ 32 && a_class_value !== (a_class_value = "navbar-link " + (/*arrowless*/ ctx[5] ? 'is-arrowless' : ''))) {
					attr(a, "class", a_class_value);
				}

				if (dirty & /*root, items*/ 5) {
					each_value = /*items*/ ctx[2];
					group_outros();
					each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, div0, outro_and_destroy_block, create_each_block$6, null, get_each_context$6);
					check_outros();
				}

				if (!current || dirty & /*right*/ 64 && div0_class_value !== (div0_class_value = "navbar-dropdown " + (/*right*/ ctx[6] ? 'is-right' : ''))) {
					attr(div0, "class", div0_class_value);
				}

				if (!current || dirty & /*hoverable, hidden*/ 24 && div1_class_value !== (div1_class_value = "navbar-item has-dropdown " + (/*hoverable*/ ctx[4] ? 'is-hoverable' : '') + " " + (/*hidden*/ ctx[3]
				? `is-hidden-${/*hidden*/ ctx[3]}`
				: '') + "")) {
					attr(div1, "class", div1_class_value);
				}
			},
			i(local) {
				if (current) return;
				transition_in(uiitemcontent.$$.fragment, local);

				for (let i = 0; i < each_value.length; i += 1) {
					transition_in(each_blocks[i]);
				}

				current = true;
			},
			o(local) {
				transition_out(uiitemcontent.$$.fragment, local);

				for (let i = 0; i < each_blocks.length; i += 1) {
					transition_out(each_blocks[i]);
				}

				current = false;
			},
			d(detaching) {
				if (detaching) detach(div1);
				destroy_component(uiitemcontent);

				for (let i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].d();
				}

				mounted = false;
				dispose();
			}
		};
	}

	// (33:4) {#each items as item(item.id)}
	function create_each_block$6(key_1, ctx) {
		let first;
		let uiitem;
		let current;

		uiitem = new Ui_item({
				props: {
					root: /*root*/ ctx[0],
					item: /*item*/ ctx[10]
				}
			});

		uiitem.$on("click", /*click_handler*/ ctx[8]);

		return {
			key: key_1,
			first: null,
			c() {
				first = empty();
				create_component(uiitem.$$.fragment);
				this.first = first;
			},
			m(target, anchor) {
				insert(target, first, anchor);
				mount_component(uiitem, target, anchor);
				current = true;
			},
			p(new_ctx, dirty) {
				ctx = new_ctx;
				const uiitem_changes = {};
				if (dirty & /*root*/ 1) uiitem_changes.root = /*root*/ ctx[0];
				if (dirty & /*items*/ 4) uiitem_changes.item = /*item*/ ctx[10];
				uiitem.$set(uiitem_changes);
			},
			i(local) {
				if (current) return;
				transition_in(uiitem.$$.fragment, local);
				current = true;
			},
			o(local) {
				transition_out(uiitem.$$.fragment, local);
				current = false;
			},
			d(detaching) {
				if (detaching) detach(first);
				destroy_component(uiitem, detaching);
			}
		};
	}

	function create_fragment$v(ctx) {
		let current_block_type_index;
		let if_block;
		let if_block_anchor;
		let current;
		const if_block_creators = [create_if_block$j, create_if_block_1$e, create_else_block$e];
		const if_blocks = [];

		function select_block_type(ctx, dirty) {
			if (/*items*/ ctx[2].length) return 0;
			if (/*section*/ ctx[1].url) return 1;
			return 2;
		}

		current_block_type_index = select_block_type(ctx);
		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

		return {
			c() {
				if_block.c();
				if_block_anchor = empty();
			},
			m(target, anchor) {
				if_blocks[current_block_type_index].m(target, anchor);
				insert(target, if_block_anchor, anchor);
				current = true;
			},
			p(ctx, [dirty]) {
				let previous_block_index = current_block_type_index;
				current_block_type_index = select_block_type(ctx);

				if (current_block_type_index === previous_block_index) {
					if_blocks[current_block_type_index].p(ctx, dirty);
				} else {
					group_outros();

					transition_out(if_blocks[previous_block_index], 1, 1, () => {
						if_blocks[previous_block_index] = null;
					});

					check_outros();
					if_block = if_blocks[current_block_type_index];

					if (!if_block) {
						if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
						if_block.c();
					} else {
						if_block.p(ctx, dirty);
					}

					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			},
			i(local) {
				if (current) return;
				transition_in(if_block);
				current = true;
			},
			o(local) {
				transition_out(if_block);
				current = false;
			},
			d(detaching) {
				if_blocks[current_block_type_index].d(detaching);
				if (detaching) detach(if_block_anchor);
			}
		};
	}

	function instance$v($$self, $$props, $$invalidate) {
		const dispatch = createEventDispatcher();
		let { root = '' } = $$props;
		let { section = {} } = $$props;
		let { items = [] } = $$props;
		let { hidden = '' } = $$props;
		let { hoverable = true } = $$props;
		let { arrowless = false } = $$props;
		let { right = false } = $$props;

		function onClick(event) {
			dispatch('click', { event, element: section });
		}

		function click_handler(event) {
			bubble.call(this, $$self, event);
		}

		$$self.$$set = $$props => {
			if ('root' in $$props) $$invalidate(0, root = $$props.root);
			if ('section' in $$props) $$invalidate(1, section = $$props.section);
			if ('items' in $$props) $$invalidate(2, items = $$props.items);
			if ('hidden' in $$props) $$invalidate(3, hidden = $$props.hidden);
			if ('hoverable' in $$props) $$invalidate(4, hoverable = $$props.hoverable);
			if ('arrowless' in $$props) $$invalidate(5, arrowless = $$props.arrowless);
			if ('right' in $$props) $$invalidate(6, right = $$props.right);
		};

		return [
			root,
			section,
			items,
			hidden,
			hoverable,
			arrowless,
			right,
			onClick,
			click_handler
		];
	}

	class Ui_section$1 extends SvelteComponent {
		constructor(options) {
			super();

			init(this, options, instance$v, create_fragment$v, safe_not_equal, {
				root: 0,
				section: 1,
				items: 2,
				hidden: 3,
				hoverable: 4,
				arrowless: 5,
				right: 6
			});
		}
	}

	/* src/frame/components/navigation/top/ui.burger.svelte generated by Svelte v3.44.3 */

	function create_fragment$u(ctx) {
		let a;
		let span0;
		let t0;
		let span1;
		let t1;
		let span2;
		let a_class_value;
		let mounted;
		let dispose;

		return {
			c() {
				a = element("a");
				span0 = element("span");
				t0 = space();
				span1 = element("span");
				t1 = space();
				span2 = element("span");
				attr(span0, "aria-hidden", "true");
				attr(span1, "aria-hidden", "true");
				attr(span2, "aria-hidden", "true");
				attr(a, "href", "");
				attr(a, "role", "button");
				attr(a, "class", a_class_value = "navbar-burger " + (/*closed*/ ctx[0] ? '' : 'is-active'));
				attr(a, "aria-label", "menu");
				attr(a, "aria-expanded", "false");
				attr(a, "data-target", "navbar");
			},
			m(target, anchor) {
				insert(target, a, anchor);
				append(a, span0);
				append(a, t0);
				append(a, span1);
				append(a, t1);
				append(a, span2);

				if (!mounted) {
					dispose = listen(a, "click", /*toggle*/ ctx[1]);
					mounted = true;
				}
			},
			p(ctx, [dirty]) {
				if (dirty & /*closed*/ 1 && a_class_value !== (a_class_value = "navbar-burger " + (/*closed*/ ctx[0] ? '' : 'is-active'))) {
					attr(a, "class", a_class_value);
				}
			},
			i: noop,
			o: noop,
			d(detaching) {
				if (detaching) detach(a);
				mounted = false;
				dispose();
			}
		};
	}

	const COMPONENT_NAME = 'top-navbar-burger';

	function getStandartUpdateEventName() {
		return COMPONENT_NAME + ':update';
	}

	function instance$u($$self, $$props, $$invalidate) {
		const dispatch = createEventDispatcher();
		let { events = {} } = $$props;
		let { register = notCommon.registerWidgetEvents.bind(notCommon) } = $$props;
		let { closed = true } = $$props;

		function toggle(e) {
			e.preventDefault();
			$$invalidate(0, closed = !closed);
			dispatch('toggle', { closed });
			return false;
		}

		let { onUpdate = data => {
			$$invalidate(0, closed = data.closed);
		} } = $$props;

		onMount(() => {
			if (!Object.prototype.hasOwnProperty.call(events, getStandartUpdateEventName())) {
				$$invalidate(2, events[getStandartUpdateEventName()] = onUpdate, events);
			}

			register(events);
		});

		$$self.$$set = $$props => {
			if ('events' in $$props) $$invalidate(2, events = $$props.events);
			if ('register' in $$props) $$invalidate(3, register = $$props.register);
			if ('closed' in $$props) $$invalidate(0, closed = $$props.closed);
			if ('onUpdate' in $$props) $$invalidate(4, onUpdate = $$props.onUpdate);
		};

		return [closed, toggle, events, register, onUpdate];
	}

	class Ui_burger extends SvelteComponent {
		constructor(options) {
			super();

			init(this, options, instance$u, create_fragment$u, safe_not_equal, {
				events: 2,
				register: 3,
				closed: 0,
				onUpdate: 4
			});
		}
	}

	/* src/frame/components/navigation/top/ui.top.svelte generated by Svelte v3.44.3 */

	function get_each_context$5(ctx, list, i) {
		const child_ctx = ctx.slice();
		child_ctx[13] = list[i];
		return child_ctx;
	}

	function get_each_context_1$3(ctx, list, i) {
		const child_ctx = ctx.slice();
		child_ctx[16] = list[i];
		return child_ctx;
	}

	function get_each_context_2$1(ctx, list, i) {
		const child_ctx = ctx.slice();
		child_ctx[16] = list[i];
		return child_ctx;
	}

	function get_each_context_3(ctx, list, i) {
		const child_ctx = ctx.slice();
		child_ctx[13] = list[i];
		return child_ctx;
	}

	// (67:2) {#if brand }
	function create_if_block_5$2(ctx) {
		let uibrand;
		let current;
		const uibrand_spread_levels = [/*brand*/ ctx[3]];
		let uibrand_props = {};

		for (let i = 0; i < uibrand_spread_levels.length; i += 1) {
			uibrand_props = assign(uibrand_props, uibrand_spread_levels[i]);
		}

		uibrand = new Ui_brand({ props: uibrand_props });

		return {
			c() {
				create_component(uibrand.$$.fragment);
			},
			m(target, anchor) {
				mount_component(uibrand, target, anchor);
				current = true;
			},
			p(ctx, dirty) {
				const uibrand_changes = (dirty & /*brand*/ 8)
				? get_spread_update(uibrand_spread_levels, [get_spread_object(/*brand*/ ctx[3])])
				: {};

				uibrand.$set(uibrand_changes);
			},
			i(local) {
				if (current) return;
				transition_in(uibrand.$$.fragment, local);
				current = true;
			},
			o(local) {
				transition_out(uibrand.$$.fragment, local);
				current = false;
			},
			d(detaching) {
				destroy_component(uibrand, detaching);
			}
		};
	}

	// (71:2) {#if section.showOnTouch}
	function create_if_block_4$9(ctx) {
		let uinavbaritem;
		let current;

		uinavbaritem = new Ui_item({
				props: {
					hidden: "desktop",
					item: /*section*/ ctx[13],
					root: /*root*/ ctx[2]
				}
			});

		uinavbaritem.$on("click", /*onClick*/ ctx[8]);

		return {
			c() {
				create_component(uinavbaritem.$$.fragment);
			},
			m(target, anchor) {
				mount_component(uinavbaritem, target, anchor);
				current = true;
			},
			p(ctx, dirty) {
				const uinavbaritem_changes = {};
				if (dirty & /*sections*/ 1) uinavbaritem_changes.item = /*section*/ ctx[13];
				if (dirty & /*root*/ 4) uinavbaritem_changes.root = /*root*/ ctx[2];
				uinavbaritem.$set(uinavbaritem_changes);
			},
			i(local) {
				if (current) return;
				transition_in(uinavbaritem.$$.fragment, local);
				current = true;
			},
			o(local) {
				transition_out(uinavbaritem.$$.fragment, local);
				current = false;
			},
			d(detaching) {
				destroy_component(uinavbaritem, detaching);
			}
		};
	}

	// (70:2) {#each sections as section(section.id)}
	function create_each_block_3(key_1, ctx) {
		let first;
		let if_block_anchor;
		let current;
		let if_block = /*section*/ ctx[13].showOnTouch && create_if_block_4$9(ctx);

		return {
			key: key_1,
			first: null,
			c() {
				first = empty();
				if (if_block) if_block.c();
				if_block_anchor = empty();
				this.first = first;
			},
			m(target, anchor) {
				insert(target, first, anchor);
				if (if_block) if_block.m(target, anchor);
				insert(target, if_block_anchor, anchor);
				current = true;
			},
			p(new_ctx, dirty) {
				ctx = new_ctx;

				if (/*section*/ ctx[13].showOnTouch) {
					if (if_block) {
						if_block.p(ctx, dirty);

						if (dirty & /*sections*/ 1) {
							transition_in(if_block, 1);
						}
					} else {
						if_block = create_if_block_4$9(ctx);
						if_block.c();
						transition_in(if_block, 1);
						if_block.m(if_block_anchor.parentNode, if_block_anchor);
					}
				} else if (if_block) {
					group_outros();

					transition_out(if_block, 1, 1, () => {
						if_block = null;
					});

					check_outros();
				}
			},
			i(local) {
				if (current) return;
				transition_in(if_block);
				current = true;
			},
			o(local) {
				transition_out(if_block);
				current = false;
			},
			d(detaching) {
				if (detaching) detach(first);
				if (if_block) if_block.d(detaching);
				if (detaching) detach(if_block_anchor);
			}
		};
	}

	// (76:2) {#if item.showOnTouch}
	function create_if_block_3$9(ctx) {
		let uinavbaritem;
		let current;

		uinavbaritem = new Ui_item({
				props: {
					hidden: "desktop",
					item: /*item*/ ctx[16],
					root: /*root*/ ctx[2]
				}
			});

		uinavbaritem.$on("click", /*onClick*/ ctx[8]);

		return {
			c() {
				create_component(uinavbaritem.$$.fragment);
			},
			m(target, anchor) {
				mount_component(uinavbaritem, target, anchor);
				current = true;
			},
			p(ctx, dirty) {
				const uinavbaritem_changes = {};
				if (dirty & /*items*/ 2) uinavbaritem_changes.item = /*item*/ ctx[16];
				if (dirty & /*root*/ 4) uinavbaritem_changes.root = /*root*/ ctx[2];
				uinavbaritem.$set(uinavbaritem_changes);
			},
			i(local) {
				if (current) return;
				transition_in(uinavbaritem.$$.fragment, local);
				current = true;
			},
			o(local) {
				transition_out(uinavbaritem.$$.fragment, local);
				current = false;
			},
			d(detaching) {
				destroy_component(uinavbaritem, detaching);
			}
		};
	}

	// (75:2) {#each items as item(item.id)}
	function create_each_block_2$1(key_1, ctx) {
		let first;
		let if_block_anchor;
		let current;
		let if_block = /*item*/ ctx[16].showOnTouch && create_if_block_3$9(ctx);

		return {
			key: key_1,
			first: null,
			c() {
				first = empty();
				if (if_block) if_block.c();
				if_block_anchor = empty();
				this.first = first;
			},
			m(target, anchor) {
				insert(target, first, anchor);
				if (if_block) if_block.m(target, anchor);
				insert(target, if_block_anchor, anchor);
				current = true;
			},
			p(new_ctx, dirty) {
				ctx = new_ctx;

				if (/*item*/ ctx[16].showOnTouch) {
					if (if_block) {
						if_block.p(ctx, dirty);

						if (dirty & /*items*/ 2) {
							transition_in(if_block, 1);
						}
					} else {
						if_block = create_if_block_3$9(ctx);
						if_block.c();
						transition_in(if_block, 1);
						if_block.m(if_block_anchor.parentNode, if_block_anchor);
					}
				} else if (if_block) {
					group_outros();

					transition_out(if_block, 1, 1, () => {
						if_block = null;
					});

					check_outros();
				}
			},
			i(local) {
				if (current) return;
				transition_in(if_block);
				current = true;
			},
			o(local) {
				transition_out(if_block);
				current = false;
			},
			d(detaching) {
				if (detaching) detach(first);
				if (if_block) if_block.d(detaching);
				if (detaching) detach(if_block_anchor);
			}
		};
	}

	// (80:2) {#if showBurger}
	function create_if_block_2$9(ctx) {
		let uinavbarburger;
		let current;
		uinavbarburger = new Ui_burger({});
		uinavbarburger.$on("toggle", /*toggleBurger*/ ctx[9]);

		return {
			c() {
				create_component(uinavbarburger.$$.fragment);
			},
			m(target, anchor) {
				mount_component(uinavbarburger, target, anchor);
				current = true;
			},
			p: noop,
			i(local) {
				if (current) return;
				transition_in(uinavbarburger.$$.fragment, local);
				current = true;
			},
			o(local) {
				transition_out(uinavbarburger.$$.fragment, local);
				current = false;
			},
			d(detaching) {
				destroy_component(uinavbarburger, detaching);
			}
		};
	}

	// (87:4) {#if item.place === 'start' }
	function create_if_block_1$d(ctx) {
		let uinavbaritem;
		let current;

		uinavbaritem = new Ui_item({
				props: { hidden: "touch", item: /*item*/ ctx[16] }
			});

		uinavbaritem.$on("click", /*onClick*/ ctx[8]);

		return {
			c() {
				create_component(uinavbaritem.$$.fragment);
			},
			m(target, anchor) {
				mount_component(uinavbaritem, target, anchor);
				current = true;
			},
			p(ctx, dirty) {
				const uinavbaritem_changes = {};
				if (dirty & /*items*/ 2) uinavbaritem_changes.item = /*item*/ ctx[16];
				uinavbaritem.$set(uinavbaritem_changes);
			},
			i(local) {
				if (current) return;
				transition_in(uinavbaritem.$$.fragment, local);
				current = true;
			},
			o(local) {
				transition_out(uinavbaritem.$$.fragment, local);
				current = false;
			},
			d(detaching) {
				destroy_component(uinavbaritem, detaching);
			}
		};
	}

	// (86:4) {#each items as item}
	function create_each_block_1$3(ctx) {
		let if_block_anchor;
		let current;
		let if_block = /*item*/ ctx[16].place === 'start' && create_if_block_1$d(ctx);

		return {
			c() {
				if (if_block) if_block.c();
				if_block_anchor = empty();
			},
			m(target, anchor) {
				if (if_block) if_block.m(target, anchor);
				insert(target, if_block_anchor, anchor);
				current = true;
			},
			p(ctx, dirty) {
				if (/*item*/ ctx[16].place === 'start') {
					if (if_block) {
						if_block.p(ctx, dirty);

						if (dirty & /*items*/ 2) {
							transition_in(if_block, 1);
						}
					} else {
						if_block = create_if_block_1$d(ctx);
						if_block.c();
						transition_in(if_block, 1);
						if_block.m(if_block_anchor.parentNode, if_block_anchor);
					}
				} else if (if_block) {
					group_outros();

					transition_out(if_block, 1, 1, () => {
						if_block = null;
					});

					check_outros();
				}
			},
			i(local) {
				if (current) return;
				transition_in(if_block);
				current = true;
			},
			o(local) {
				transition_out(if_block);
				current = false;
			},
			d(detaching) {
				if (if_block) if_block.d(detaching);
				if (detaching) detach(if_block_anchor);
			}
		};
	}

	// (94:4) {#if (sectionsItemsCount[section.id] || section.indicator || section.tag) && section.place=='end' }
	function create_if_block$i(ctx) {
		let uinavbarsection;
		let current;

		uinavbarsection = new Ui_section$1({
				props: {
					right: true,
					hidden: /*section*/ ctx[13].hidden,
					root: /*root*/ ctx[2],
					section: /*section*/ ctx[13],
					items: /*sectionsItems*/ ctx[7][/*section*/ ctx[13].id]
				}
			});

		uinavbarsection.$on("click", /*onClick*/ ctx[8]);

		return {
			c() {
				create_component(uinavbarsection.$$.fragment);
			},
			m(target, anchor) {
				mount_component(uinavbarsection, target, anchor);
				current = true;
			},
			p(ctx, dirty) {
				const uinavbarsection_changes = {};
				if (dirty & /*sections*/ 1) uinavbarsection_changes.hidden = /*section*/ ctx[13].hidden;
				if (dirty & /*root*/ 4) uinavbarsection_changes.root = /*root*/ ctx[2];
				if (dirty & /*sections*/ 1) uinavbarsection_changes.section = /*section*/ ctx[13];
				if (dirty & /*sectionsItems, sections*/ 129) uinavbarsection_changes.items = /*sectionsItems*/ ctx[7][/*section*/ ctx[13].id];
				uinavbarsection.$set(uinavbarsection_changes);
			},
			i(local) {
				if (current) return;
				transition_in(uinavbarsection.$$.fragment, local);
				current = true;
			},
			o(local) {
				transition_out(uinavbarsection.$$.fragment, local);
				current = false;
			},
			d(detaching) {
				destroy_component(uinavbarsection, detaching);
			}
		};
	}

	// (93:4) {#each sections as section(section.id) }
	function create_each_block$5(key_1, ctx) {
		let first;
		let if_block_anchor;
		let current;
		let if_block = (/*sectionsItemsCount*/ ctx[6][/*section*/ ctx[13].id] || /*section*/ ctx[13].indicator || /*section*/ ctx[13].tag) && /*section*/ ctx[13].place == 'end' && create_if_block$i(ctx);

		return {
			key: key_1,
			first: null,
			c() {
				first = empty();
				if (if_block) if_block.c();
				if_block_anchor = empty();
				this.first = first;
			},
			m(target, anchor) {
				insert(target, first, anchor);
				if (if_block) if_block.m(target, anchor);
				insert(target, if_block_anchor, anchor);
				current = true;
			},
			p(new_ctx, dirty) {
				ctx = new_ctx;

				if ((/*sectionsItemsCount*/ ctx[6][/*section*/ ctx[13].id] || /*section*/ ctx[13].indicator || /*section*/ ctx[13].tag) && /*section*/ ctx[13].place == 'end') {
					if (if_block) {
						if_block.p(ctx, dirty);

						if (dirty & /*sectionsItemsCount, sections*/ 65) {
							transition_in(if_block, 1);
						}
					} else {
						if_block = create_if_block$i(ctx);
						if_block.c();
						transition_in(if_block, 1);
						if_block.m(if_block_anchor.parentNode, if_block_anchor);
					}
				} else if (if_block) {
					group_outros();

					transition_out(if_block, 1, 1, () => {
						if_block = null;
					});

					check_outros();
				}
			},
			i(local) {
				if (current) return;
				transition_in(if_block);
				current = true;
			},
			o(local) {
				transition_out(if_block);
				current = false;
			},
			d(detaching) {
				if (detaching) detach(first);
				if (if_block) if_block.d(detaching);
				if (detaching) detach(if_block_anchor);
			}
		};
	}

	function create_fragment$t(ctx) {
		let div0;
		let t0;
		let each_blocks_3 = [];
		let each0_lookup = new Map();
		let t1;
		let each_blocks_2 = [];
		let each1_lookup = new Map();
		let t2;
		let t3;
		let div3;
		let div1;
		let t4;
		let div2;
		let each_blocks = [];
		let each3_lookup = new Map();
		let div3_class_value;
		let current;
		let if_block0 = /*brand*/ ctx[3] && create_if_block_5$2(ctx);
		let each_value_3 = /*sections*/ ctx[0];
		const get_key = ctx => /*section*/ ctx[13].id;

		for (let i = 0; i < each_value_3.length; i += 1) {
			let child_ctx = get_each_context_3(ctx, each_value_3, i);
			let key = get_key(child_ctx);
			each0_lookup.set(key, each_blocks_3[i] = create_each_block_3(key, child_ctx));
		}

		let each_value_2 = /*items*/ ctx[1];
		const get_key_1 = ctx => /*item*/ ctx[16].id;

		for (let i = 0; i < each_value_2.length; i += 1) {
			let child_ctx = get_each_context_2$1(ctx, each_value_2, i);
			let key = get_key_1(child_ctx);
			each1_lookup.set(key, each_blocks_2[i] = create_each_block_2$1(key, child_ctx));
		}

		let if_block1 = /*showBurger*/ ctx[4] && create_if_block_2$9(ctx);
		let each_value_1 = /*items*/ ctx[1];
		let each_blocks_1 = [];

		for (let i = 0; i < each_value_1.length; i += 1) {
			each_blocks_1[i] = create_each_block_1$3(get_each_context_1$3(ctx, each_value_1, i));
		}

		const out = i => transition_out(each_blocks_1[i], 1, 1, () => {
			each_blocks_1[i] = null;
		});

		let each_value = /*sections*/ ctx[0];
		const get_key_2 = ctx => /*section*/ ctx[13].id;

		for (let i = 0; i < each_value.length; i += 1) {
			let child_ctx = get_each_context$5(ctx, each_value, i);
			let key = get_key_2(child_ctx);
			each3_lookup.set(key, each_blocks[i] = create_each_block$5(key, child_ctx));
		}

		return {
			c() {
				div0 = element("div");
				if (if_block0) if_block0.c();
				t0 = space();

				for (let i = 0; i < each_blocks_3.length; i += 1) {
					each_blocks_3[i].c();
				}

				t1 = space();

				for (let i = 0; i < each_blocks_2.length; i += 1) {
					each_blocks_2[i].c();
				}

				t2 = space();
				if (if_block1) if_block1.c();
				t3 = space();
				div3 = element("div");
				div1 = element("div");

				for (let i = 0; i < each_blocks_1.length; i += 1) {
					each_blocks_1[i].c();
				}

				t4 = space();
				div2 = element("div");

				for (let i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].c();
				}

				attr(div0, "class", "navbar-brand");
				attr(div1, "class", "navbar-start");
				attr(div2, "class", "navbar-end");
				attr(div3, "id", "navbar");
				attr(div3, "class", div3_class_value = "navbar-menu " + (/*menuClosed*/ ctx[5] ? '' : 'is-active'));
			},
			m(target, anchor) {
				insert(target, div0, anchor);
				if (if_block0) if_block0.m(div0, null);
				append(div0, t0);

				for (let i = 0; i < each_blocks_3.length; i += 1) {
					each_blocks_3[i].m(div0, null);
				}

				append(div0, t1);

				for (let i = 0; i < each_blocks_2.length; i += 1) {
					each_blocks_2[i].m(div0, null);
				}

				append(div0, t2);
				if (if_block1) if_block1.m(div0, null);
				insert(target, t3, anchor);
				insert(target, div3, anchor);
				append(div3, div1);

				for (let i = 0; i < each_blocks_1.length; i += 1) {
					each_blocks_1[i].m(div1, null);
				}

				append(div3, t4);
				append(div3, div2);

				for (let i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].m(div2, null);
				}

				current = true;
			},
			p(ctx, [dirty]) {
				if (/*brand*/ ctx[3]) {
					if (if_block0) {
						if_block0.p(ctx, dirty);

						if (dirty & /*brand*/ 8) {
							transition_in(if_block0, 1);
						}
					} else {
						if_block0 = create_if_block_5$2(ctx);
						if_block0.c();
						transition_in(if_block0, 1);
						if_block0.m(div0, t0);
					}
				} else if (if_block0) {
					group_outros();

					transition_out(if_block0, 1, 1, () => {
						if_block0 = null;
					});

					check_outros();
				}

				if (dirty & /*sections, root, onClick*/ 261) {
					each_value_3 = /*sections*/ ctx[0];
					group_outros();
					each_blocks_3 = update_keyed_each(each_blocks_3, dirty, get_key, 1, ctx, each_value_3, each0_lookup, div0, outro_and_destroy_block, create_each_block_3, t1, get_each_context_3);
					check_outros();
				}

				if (dirty & /*items, root, onClick*/ 262) {
					each_value_2 = /*items*/ ctx[1];
					group_outros();
					each_blocks_2 = update_keyed_each(each_blocks_2, dirty, get_key_1, 1, ctx, each_value_2, each1_lookup, div0, outro_and_destroy_block, create_each_block_2$1, t2, get_each_context_2$1);
					check_outros();
				}

				if (/*showBurger*/ ctx[4]) {
					if (if_block1) {
						if_block1.p(ctx, dirty);

						if (dirty & /*showBurger*/ 16) {
							transition_in(if_block1, 1);
						}
					} else {
						if_block1 = create_if_block_2$9(ctx);
						if_block1.c();
						transition_in(if_block1, 1);
						if_block1.m(div0, null);
					}
				} else if (if_block1) {
					group_outros();

					transition_out(if_block1, 1, 1, () => {
						if_block1 = null;
					});

					check_outros();
				}

				if (dirty & /*items, onClick*/ 258) {
					each_value_1 = /*items*/ ctx[1];
					let i;

					for (i = 0; i < each_value_1.length; i += 1) {
						const child_ctx = get_each_context_1$3(ctx, each_value_1, i);

						if (each_blocks_1[i]) {
							each_blocks_1[i].p(child_ctx, dirty);
							transition_in(each_blocks_1[i], 1);
						} else {
							each_blocks_1[i] = create_each_block_1$3(child_ctx);
							each_blocks_1[i].c();
							transition_in(each_blocks_1[i], 1);
							each_blocks_1[i].m(div1, null);
						}
					}

					group_outros();

					for (i = each_value_1.length; i < each_blocks_1.length; i += 1) {
						out(i);
					}

					check_outros();
				}

				if (dirty & /*sections, root, sectionsItems, onClick, sectionsItemsCount*/ 453) {
					each_value = /*sections*/ ctx[0];
					group_outros();
					each_blocks = update_keyed_each(each_blocks, dirty, get_key_2, 1, ctx, each_value, each3_lookup, div2, outro_and_destroy_block, create_each_block$5, null, get_each_context$5);
					check_outros();
				}

				if (!current || dirty & /*menuClosed*/ 32 && div3_class_value !== (div3_class_value = "navbar-menu " + (/*menuClosed*/ ctx[5] ? '' : 'is-active'))) {
					attr(div3, "class", div3_class_value);
				}
			},
			i(local) {
				if (current) return;
				transition_in(if_block0);

				for (let i = 0; i < each_value_3.length; i += 1) {
					transition_in(each_blocks_3[i]);
				}

				for (let i = 0; i < each_value_2.length; i += 1) {
					transition_in(each_blocks_2[i]);
				}

				transition_in(if_block1);

				for (let i = 0; i < each_value_1.length; i += 1) {
					transition_in(each_blocks_1[i]);
				}

				for (let i = 0; i < each_value.length; i += 1) {
					transition_in(each_blocks[i]);
				}

				current = true;
			},
			o(local) {
				transition_out(if_block0);

				for (let i = 0; i < each_blocks_3.length; i += 1) {
					transition_out(each_blocks_3[i]);
				}

				for (let i = 0; i < each_blocks_2.length; i += 1) {
					transition_out(each_blocks_2[i]);
				}

				transition_out(if_block1);
				each_blocks_1 = each_blocks_1.filter(Boolean);

				for (let i = 0; i < each_blocks_1.length; i += 1) {
					transition_out(each_blocks_1[i]);
				}

				for (let i = 0; i < each_blocks.length; i += 1) {
					transition_out(each_blocks[i]);
				}

				current = false;
			},
			d(detaching) {
				if (detaching) detach(div0);
				if (if_block0) if_block0.d();

				for (let i = 0; i < each_blocks_3.length; i += 1) {
					each_blocks_3[i].d();
				}

				for (let i = 0; i < each_blocks_2.length; i += 1) {
					each_blocks_2[i].d();
				}

				if (if_block1) if_block1.d();
				if (detaching) detach(t3);
				if (detaching) detach(div3);
				destroy_each(each_blocks_1, detaching);

				for (let i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].d();
				}
			}
		};
	}

	function instance$t($$self, $$props, $$invalidate) {
		const dispatch = createEventDispatcher();
		let { sections = [] } = $$props;
		let { items = [] } = $$props;
		let { root = '' } = $$props;
		let { navigate = null } = $$props;
		let { brand = false } = $$props;
		let { showBurger = true } = $$props;
		let { burgerControlsSidemenu = true } = $$props;
		let menuClosed = true;

		function onClick({ detail }) {
			let { event, element } = detail;

			if (Object.prototype.hasOwnProperty.call(element, 'action')) {
				return element.action(event, element);
			}

			event.preventDefault();

			if (typeof navigate === 'function') {
				navigate({
					full: event.currentTarget.getAttribute('href'),
					short: event.currentTarget.dataset.href
				});
			}

			return false;
		}

		let sectionsItemsCount = {};
		let sectionsItems = {};

		beforeUpdate(() => {
			for (let section of sections) {
				$$invalidate(7, sectionsItems[section.id] = items.filter(t => t.section === section.id), sectionsItems);
				$$invalidate(6, sectionsItemsCount[section.id] = items.filter(t => t.section === section.id).length, sectionsItemsCount);
			}
		});

		function toggleBurger({ detail }) {
			if (burgerControlsSidemenu) {
				SideMenu.toggle();
			} else {
				dispatch('toggleBurger', detail);
				$$invalidate(5, menuClosed = detail.closed);
			}
		}

		$$self.$$set = $$props => {
			if ('sections' in $$props) $$invalidate(0, sections = $$props.sections);
			if ('items' in $$props) $$invalidate(1, items = $$props.items);
			if ('root' in $$props) $$invalidate(2, root = $$props.root);
			if ('navigate' in $$props) $$invalidate(10, navigate = $$props.navigate);
			if ('brand' in $$props) $$invalidate(3, brand = $$props.brand);
			if ('showBurger' in $$props) $$invalidate(4, showBurger = $$props.showBurger);
			if ('burgerControlsSidemenu' in $$props) $$invalidate(11, burgerControlsSidemenu = $$props.burgerControlsSidemenu);
		};

		return [
			sections,
			items,
			root,
			brand,
			showBurger,
			menuClosed,
			sectionsItemsCount,
			sectionsItems,
			onClick,
			toggleBurger,
			navigate,
			burgerControlsSidemenu
		];
	}

	class Ui_top extends SvelteComponent {
		constructor(options) {
			super();

			init(this, options, instance$t, create_fragment$t, safe_not_equal, {
				sections: 0,
				items: 1,
				root: 2,
				navigate: 10,
				brand: 3,
				showBurger: 4,
				burgerControlsSidemenu: 11
			});
		}
	}

	var TYPE = 'top';

	var TopMenu = /*#__PURE__*/function (_Menu) {
	  _inherits(TopMenu, _Menu);

	  var _super = _createSuper(TopMenu);

	  function TopMenu() {
	    _classCallCheck(this, TopMenu);

	    return _super.apply(this, arguments);
	  }

	  _createClass(TopMenu, null, [{
	    key: "render",
	    value: function render(app) {
	      if (app) {
	        this.setApp(app);
	      }

	      this.prepareData();

	      if (!this.menu) {
	        var target = document.querySelector(this.getOptions().targetSelector);

	        if (!target) {
	          return;
	        }

	        this.menu = new Ui_top({
	          target: target,
	          props: {
	            brand: this.getOptions().brand,
	            items: this.items,
	            sections: this.sections,
	            root: this.getOptions().root,
	            navigate: this.getOptions().navigate
	          }
	        });
	        this.interval = setInterval(this.updateMenuActiveItem.bind(this), 200);
	      }
	    }
	  }, {
	    key: "updateMenu",
	    value: function updateMenu(url) {
	      Array.from(document.querySelectorAll(this.getOptions().targetSelector + ' aside.menu a')).forEach(function (item) {
	        if (item.href == url || url.href && url.href.indexOf(item.href) == 0) {
	          item.classList.add('is-active');
	        } else {
	          item.classList.remove('is-active');
	        }
	      });
	    }
	  }, {
	    key: "updateMenuActiveItem",
	    value: function updateMenuActiveItem() {
	      var url = window.location.toString(),
	          lastLocation = this.location;

	      if (lastLocation) {
	        if (url !== lastLocation) {
	          this.location = url;
	          this.updateMenu(url);
	        }
	      } else {
	        this.location = url;
	        this.updateMenu(url);
	      }
	    }
	  }, {
	    key: "toggle",
	    value: function toggle() {
	      var el = document.querySelector(this.getOptions().targetSelector);
	      el.classList.toggle('is-active');
	    }
	  }, {
	    key: "hide",
	    value: function hide() {
	      var el = document.querySelector(this.getOptions().targetSelector);
	      el.classList.remove('is-active');
	    }
	  }, {
	    key: "setBurgerState",
	    value: function setBurgerState(menuClosed) {
	      this.menu.$set({
	        menuClosed: menuClosed
	      });
	    }
	  }]);

	  return TopMenu;
	}(Menu);

	_defineProperty(TopMenu, "DEFAULT", {
	  section: 'any',
	  sectionTitle: 'ÐÐµÐ½Ñ',
	  priority: 0,
	  //link, button, dropdown, component
	  type: 'link',
	  place: 'main'
	});

	_defineProperty(TopMenu, "options", {
	  brand: false,
	  type: TYPE,
	  items: [],
	  sections: [],
	  targetSelector: "#".concat(TYPE, "-menu"),
	  root: '/',
	  directNavigation: false,
	  navigate: function navigate(urls) {
	    TopMenu.hide();

	    if (!TopMenu.isDirectNavigation() && TopMenu.app) {
	      var func = TopMenu.app.getWorking('router');

	      if (func) {
	        return func.navigate(urls.short);
	      }
	    }

	    document.location.assign(urls.full);
	  }
	});

	var BREADCRUMBS = [];

	var notCRUD = /*#__PURE__*/function (_notController) {
	  _inherits(notCRUD, _notController);

	  var _super = _createSuper(notCRUD);

	  function notCRUD(app, name) {
	    var _this;

	    _classCallCheck(this, notCRUD);

	    _this = _super.call(this, app, "CRUD.".concat(name));
	    _this.ui = {};
	    _this.validator = {};
	    _this.els = {};

	    _this.setOptions('names', {
	      module: '',
	      plural: 'plural',
	      single: 'single'
	    });

	    _this.setOptions('containerSelector', _this.app.getOptions('crud.containerSelector'));

	    _this.buildFrame();

	    return _possibleConstructorReturn(_this, _assertThisInitialized(_this));
	  }

	  _createClass(notCRUD, [{
	    key: "start",
	    value: function start() {
	      var _this2 = this;

	      var newHead = [];

	      if (this.getModuleName() && this.getOptions('names.module')) {
	        newHead.push({
	          title: this.getOptions('names.module'),
	          url: false
	        });
	      }

	      newHead.push({
	        title: this.getOptions('names.plural'),
	        url: this.getModelURL()
	      });
	      BREADCRUMBS.splice.apply(BREADCRUMBS, [0, BREADCRUMBS.length].concat(newHead));
	      Breadcrumbs.setHead(BREADCRUMBS).render({
	        root: '',
	        target: this.els.top,
	        navigate: function navigate(url) {
	          return _this2.app.getWorking('router').navigate(url);
	        }
	      });
	      this.route(this.getOptions('params'));
	    }
	  }, {
	    key: "setBreadcrumbs",
	    value: function setBreadcrumbs(tail) {
	      Breadcrumbs.setTail(tail).update();
	    }
	  }, {
	    key: "backToList",
	    value: function backToList() {
	      this.app.getWorking('router').navigate(this.linkBackToList());
	    }
	  }, {
	    key: "afterAction",
	    value: function afterAction() {
	      var action = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'list';
	      var navBack = this.app.getOptions('crud.navigateBackAfter', []);

	      if (navBack && Array.isArray(navBack) && navBack.indexOf(action) > -1) {
	        window.history.back();
	      } else {
	        this.backToList();
	      }
	    }
	  }, {
	    key: "linkBackToList",
	    value: function linkBackToList() {
	      return this.getModelURL();
	    }
	  }, {
	    key: "buildFrame",
	    value: function buildFrame() {
	      var el = document.querySelector(this.app.getOptions('crud.containerSelector', 'body'));

	      while (el.firstChild) {
	        el.removeChild(el.firstChild);
	      }

	      this.els.top = document.createElement('div');
	      this.els.top.id = 'crud-top';
	      this.els.top.classList.add('box');
	      el.appendChild(this.els.top);
	      this.els.main = document.createElement('div');
	      this.els.main.id = 'crud-main';
	      this.els.main.classList.add('box');
	      el.appendChild(this.els.main);
	      this.els.bottom = document.createElement('div');
	      this.els.bottom.id = 'crud-bottom';
	      this.els.bottom.classList.add('box');
	      el.appendChild(this.els.bottom);
	    }
	  }, {
	    key: "preloadVariants",
	    value: function () {
	      var _preloadVariants = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
	        var _this3 = this;

	        var type,
	            preload,
	            libProps,
	            proms,
	            results,
	            i,
	            _args = arguments;
	        return regeneratorRuntime.wrap(function _callee$(_context) {
	          while (1) {
	            switch (_context.prev = _context.next) {
	              case 0:
	                type = _args.length > 0 && _args[0] !== undefined ? _args[0] : 'list';
	                _context.prev = 1;

	                if (!(['create', 'update', 'list', 'delete', 'details'].indexOf(type) === -1)) {
	                  _context.next = 4;
	                  break;
	                }

	                return _context.abrupt("return");

	              case 4:
	                preload = this.getOptions("".concat(type, ".preload"), {});

	                if (Object.keys(preload).length == 0) {
	                  preload = this.getOptions("preload", {});
	                }

	                if (!(Object.keys(preload).length > 0)) {
	                  _context.next = 14;
	                  break;
	                }

	                libProps = Object.keys(preload);
	                proms = [];
	                libProps.forEach(function (prop) {
	                  var modelName = notCommon.lowerFirstLetter(preload[prop]);

	                  var Model = _this3.make[modelName]({});

	                  proms.push(Model.$listAll());
	                });
	                _context.next = 12;
	                return Promise.all(proms);

	              case 12:
	                results = _context.sent;

	                for (i = 0; i < libProps.length; i++) {
	                  if (Array.isArray(results[i])) {
	                    Form.addVariants(libProps[i], results[i].map(function (item) {
	                      return {
	                        id: item._id,
	                        title: item.title
	                      };
	                    }));
	                  }
	                }

	              case 14:
	                this.log('preload finished');
	                _context.next = 21;
	                break;

	              case 17:
	                _context.prev = 17;
	                _context.t0 = _context["catch"](1);
	                this.report(_context.t0);
	                this.showErrorMessage(_context.t0);

	              case 21:
	              case "end":
	                return _context.stop();
	            }
	          }
	        }, _callee, this, [[1, 17]]);
	      }));

	      function preloadVariants() {
	        return _preloadVariants.apply(this, arguments);
	      }

	      return preloadVariants;
	    }()
	  }, {
	    key: "getTitleFromLib",
	    value: function getTitleFromLib(propName, id) {
	      return Form.getVariantTitle(propName, id);
	    }
	  }, {
	    key: "createDefault",
	    value: function createDefault() {
	      var newRecord = this.getModel({
	        '_id': null,
	        title: this.getOptions('names.single'),
	        products: []
	      });
	      return newRecord;
	    }
	  }, {
	    key: "getItemTitle",
	    value: function getItemTitle(item) {
	      if (Object.prototype.hasOwnProperty.call(item, 'title') && typeof item.title === 'string') {
	        return item.title;
	      } else if (Object.prototype.hasOwnProperty.call(item, 'label') && typeof item.label === 'string') {
	        return item.label;
	      } else if (Object.prototype.hasOwnProperty.call(item, 'id') && typeof item.id === 'string') {
	        return item.id;
	      } else if (Object.prototype.hasOwnProperty.call(item, 'name') && typeof item.name === 'string') {
	        return item.name;
	      }
	    }
	  }, {
	    key: "route",
	    value: function route() {
	      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

	      try {
	        if (params.length == 1) {
	          if (params[0] === 'create') {
	            return this.runCreate(params);
	          } else {
	            return this.runDetails(params);
	          }
	        } else if (params.length > 1) {
	          if (params[1] === 'delete') {
	            return this.runDelete(params);
	          } else if (params[1] === 'update') {
	            return this.runUpdate(params);
	          } else {
	            var routeRunnerName = 'run' + notCommon.capitalizeFirstLetter(params[1]);

	            if (this[routeRunnerName] && typeof this[routeRunnerName] === 'function') {
	              return this[routeRunnerName](params);
	            }
	          }
	        }

	        return this.runList(params);
	      } catch (e) {
	        notCommon.report(e);
	        this.showErrorMessage(e);
	      }
	    }
	  }, {
	    key: "runCreate",
	    value: function () {
	      var _runCreate = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
	        var _this4 = this;

	        var defData, manifest, _Form$build, ui, validator;

	        return regeneratorRuntime.wrap(function _callee3$(_context3) {
	          while (1) {
	            switch (_context3.prev = _context3.next) {
	              case 0:
	                _context3.prev = 0;
	                _context3.next = 3;
	                return this.preloadVariants('create');

	              case 3:
	                this.setBreadcrumbs([{
	                  title: 'ÐÐ¾Ð±Ð°Ð²Ð»ÐµÐ½Ð¸Ðµ',
	                  url: this.getModelActionURL(false, 'create')
	                }]);

	                if (!this.ui.create) {
	                  _context3.next = 8;
	                  break;
	                }

	                return _context3.abrupt("return");

	              case 8:
	                this.$destroyUI();

	              case 9:
	                defData = this.createDefault();

	                if (defData.getData) {
	                  defData = defData.getData();
	                }

	                manifest = this.app.getInterfaceManifest()[this.getModelName()];
	                _Form$build = Form.build({
	                  target: this.els.main,
	                  manifest: manifest,
	                  action: 'create',
	                  options: this.getOptions('create.options', {}),
	                  validators: this.getOptions('Validators'),
	                  data: defData
	                }), ui = _Form$build.ui, validator = _Form$build.validator;
	                this.ui.create = ui;
	                this.validator.create = validator;
	                this.ui.create.$on('submit', /*#__PURE__*/function () {
	                  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(ev) {
	                    var createActionName, success;
	                    return regeneratorRuntime.wrap(function _callee2$(_context2) {
	                      while (1) {
	                        switch (_context2.prev = _context2.next) {
	                          case 0:
	                            createActionName = _this4.getOptions('create.actionName', 'create');
	                            _context2.next = 3;
	                            return _this4.onActionSubmit(createActionName, ev.detail);

	                          case 3:
	                            success = _context2.sent;

	                            if (success) {
	                              setTimeout(function () {
	                                return _this4.goList();
	                              }, 1000);
	                            }

	                          case 5:
	                          case "end":
	                            return _context2.stop();
	                        }
	                      }
	                    }, _callee2);
	                  }));

	                  return function (_x) {
	                    return _ref.apply(this, arguments);
	                  };
	                }());
	                this.ui.create.$on('reject', this.goList.bind(this));
	                this.emit('after:render:create');
	                _context3.next = 24;
	                break;

	              case 20:
	                _context3.prev = 20;
	                _context3.t0 = _context3["catch"](0);
	                notCommon.report(_context3.t0);
	                this.showErrorMessage(_context3.t0);

	              case 24:
	              case "end":
	                return _context3.stop();
	            }
	          }
	        }, _callee3, this, [[0, 20]]);
	      }));

	      function runCreate() {
	        return _runCreate.apply(this, arguments);
	      }

	      return runCreate;
	    }()
	  }, {
	    key: "runDetails",
	    value: function () {
	      var _runDetails = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(params) {
	        var idField, query, manifest, detailsActionName, res, title, _Form$build2, ui, validator;

	        return regeneratorRuntime.wrap(function _callee4$(_context4) {
	          while (1) {
	            switch (_context4.prev = _context4.next) {
	              case 0:
	                _context4.prev = 0;
	                idField = this.getOptions('details.idField', '_id'), query = {};
	                _context4.next = 4;
	                return this.preloadVariants('details');

	              case 4:
	                this.setBreadcrumbs([{
	                  title: 'ÐÑÐ¾ÑÐ¼Ð¾ÑÑ',
	                  url: this.getModelActionURL(params[0], false)
	                }]);

	                if (!this.ui.details) {
	                  _context4.next = 9;
	                  break;
	                }

	                return _context4.abrupt("return");

	              case 9:
	                this.$destroyUI();

	              case 10:
	                manifest = this.app.getInterfaceManifest()[this.getModelName()];
	                query[idField] = params[0];
	                detailsActionName = this.getOptions('details.actionName', 'get');
	                _context4.next = 15;
	                return this.getModel(query)["$".concat(detailsActionName)]();

	              case 15:
	                res = _context4.sent;

	                if (res.status === 'ok') {
	                  title = this.getItemTitle(res.result);
	                  this.setBreadcrumbs([{
	                    title: "\u041F\u0440\u043E\u0441\u043C\u043E\u0442\u0440 \"".concat(title, "\""),
	                    url: this.getModelActionURL(params[0], false)
	                  }]);
	                  _Form$build2 = Form.build({
	                    target: this.els.main,
	                    manifest: manifest,
	                    action: 'get',
	                    options: {
	                      readonly: true
	                    },
	                    validators: this.getOptions('Validators'),
	                    data: res.result
	                  }), ui = _Form$build2.ui, validator = _Form$build2.validator;
	                  this.ui.details = ui;
	                  this.validator.details = validator;
	                  this.emit('after:render:details');
	                  this.ui.details.$on('reject', this.goList.bind(this));
	                } else {
	                  this.showErrorMessage(res);
	                }

	                _context4.next = 23;
	                break;

	              case 19:
	                _context4.prev = 19;
	                _context4.t0 = _context4["catch"](0);
	                notCommon.report(_context4.t0);
	                this.showErrorMessage(_context4.t0);

	              case 23:
	              case "end":
	                return _context4.stop();
	            }
	          }
	        }, _callee4, this, [[0, 19]]);
	      }));

	      function runDetails(_x2) {
	        return _runDetails.apply(this, arguments);
	      }

	      return runDetails;
	    }()
	  }, {
	    key: "runUpdate",
	    value: function () {
	      var _runUpdate = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(params) {
	        var _this5 = this;

	        var idField, query, id, manifest, getActionName, res, title, _Form$build3, ui, validator;

	        return regeneratorRuntime.wrap(function _callee6$(_context6) {
	          while (1) {
	            switch (_context6.prev = _context6.next) {
	              case 0:
	                _context6.prev = 0;
	                idField = this.getOptions('update.idField', '_id'), query = {}, id = params[0];
	                _context6.next = 4;
	                return this.preloadVariants('update');

	              case 4:
	                this.setBreadcrumbs([{
	                  title: 'Ð ÐµÐ´Ð°ÐºÑÐ¸ÑÐ¾Ð²Ð°Ð½Ð¸Ðµ',
	                  url: this.getModelActionURL(id, 'update')
	                }]);

	                if (!this.ui.update) {
	                  _context6.next = 9;
	                  break;
	                }

	                return _context6.abrupt("return");

	              case 9:
	                this.$destroyUI();

	              case 10:
	                manifest = this.app.getInterfaceManifest()[this.getModelName()];
	                query[idField] = params[0];
	                getActionName = this.getOptions('update.actionName', 'getRaw');
	                _context6.next = 15;
	                return this.getModel(query)["$".concat(getActionName)]();

	              case 15:
	                res = _context6.sent;

	                if (res.status === 'ok') {
	                  title = this.getItemTitle(res.result);
	                  this.setBreadcrumbs([{
	                    title: "\u0420\u0435\u0434\u0430\u043A\u0442\u0438\u0440\u043E\u0432\u0430\u043D\u0438\u0435 \"".concat(title, "\""),
	                    url: this.getModelActionURL(params[0], 'update')
	                  }]);
	                  _Form$build3 = Form.build({
	                    target: this.els.main,
	                    manifest: manifest,
	                    action: 'update',
	                    options: this.getOptions('update.options', {}),
	                    validators: this.getOptions('Validators'),
	                    data: notCommon.stripProxy(res.result)
	                  }), ui = _Form$build3.ui, validator = _Form$build3.validator;
	                  this.ui.update = ui;
	                  this.validator.update = validator;
	                  this.ui.update.$on('submit', /*#__PURE__*/function () {
	                    var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(ev) {
	                      var success;
	                      return regeneratorRuntime.wrap(function _callee5$(_context5) {
	                        while (1) {
	                          switch (_context5.prev = _context5.next) {
	                            case 0:
	                              _context5.next = 2;
	                              return _this5.onActionSubmit('update', ev.detail);

	                            case 2:
	                              success = _context5.sent;

	                              if (success) {
	                                setTimeout(function () {
	                                  return _this5.goDetails(id);
	                                }, 1000);
	                              }

	                            case 4:
	                            case "end":
	                              return _context5.stop();
	                          }
	                        }
	                      }, _callee5);
	                    }));

	                    return function (_x4) {
	                      return _ref2.apply(this, arguments);
	                    };
	                  }());
	                  this.ui.update.$on('reject', this.goList.bind(this));
	                  this.emit('after:render:update');
	                } else {
	                  this.showErrorMessage(res);
	                }

	                _context6.next = 23;
	                break;

	              case 19:
	                _context6.prev = 19;
	                _context6.t0 = _context6["catch"](0);
	                notCommon.report(_context6.t0);
	                this.showErrorMessage(_context6.t0);

	              case 23:
	              case "end":
	                return _context6.stop();
	            }
	          }
	        }, _callee6, this, [[0, 19]]);
	      }));

	      function runUpdate(_x3) {
	        return _runUpdate.apply(this, arguments);
	      }

	      return runUpdate;
	    }()
	  }, {
	    key: "runDelete",
	    value: function () {
	      var _runDelete = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(params) {
	        var deleteActionName, success;
	        return regeneratorRuntime.wrap(function _callee7$(_context7) {
	          while (1) {
	            switch (_context7.prev = _context7.next) {
	              case 0:
	                _context7.prev = 0;
	                _context7.next = 3;
	                return this.preloadVariants('delete');

	              case 3:
	                this.setBreadcrumbs([{
	                  title: 'Ð£Ð´Ð°Ð»ÐµÐ½Ð¸Ðµ',
	                  url: this.getModelActionURL(params[0], 'delete')
	                }]);

	                if (!confirm('Ð£Ð´Ð°Ð»Ð¸ÑÑ Ð·Ð°Ð¿Ð¸ÑÑ?')) {
	                  _context7.next = 12;
	                  break;
	                }

	                deleteActionName = this.getOptions('delete.actionName', 'delete');
	                _context7.next = 8;
	                return this.onActionSubmit(deleteActionName, {
	                  _id: params[0]
	                });

	              case 8:
	                success = _context7.sent;

	                if (success) {
	                  this.goList();
	                }

	                _context7.next = 13;
	                break;

	              case 12:
	                this.goList();

	              case 13:
	                _context7.next = 19;
	                break;

	              case 15:
	                _context7.prev = 15;
	                _context7.t0 = _context7["catch"](0);
	                notCommon.report(_context7.t0);
	                this.showErrorMessage(_context7.t0);

	              case 19:
	              case "end":
	                return _context7.stop();
	            }
	          }
	        }, _callee7, this, [[0, 15]]);
	      }));

	      function runDelete(_x5) {
	        return _runDelete.apply(this, arguments);
	      }

	      return runDelete;
	    }()
	  }, {
	    key: "runList",
	    value: function () {
	      var _runList = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8() {
	        var _this6 = this;

	        var DEFAULT_OPTIONS_TABLE, TABLE_OPTIONS;
	        return regeneratorRuntime.wrap(function _callee8$(_context8) {
	          while (1) {
	            switch (_context8.prev = _context8.next) {
	              case 0:
	                _context8.prev = 0;
	                _context8.next = 3;
	                return this.preloadVariants('list');

	              case 3:
	                this.setBreadcrumbs([{
	                  title: 'Ð¡Ð¿Ð¸ÑÐ¾Ðº',
	                  url: this.getModelURL()
	                }]);

	                if (!this.ui.list) {
	                  _context8.next = 8;
	                  break;
	                }

	                return _context8.abrupt("return");

	              case 8:
	                this.$destroyUI();

	              case 9:
	                DEFAULT_OPTIONS_TABLE = {
	                  interface: {
	                    combined: true,
	                    factory: this.getInterface()
	                  },
	                  fields: undefined,
	                  showSelect: undefined,
	                  getItemId: undefined,
	                  idField: undefined,
	                  preload: {},
	                  pager: {
	                    size: 50,
	                    page: 0
	                  },
	                  sorter: {
	                    id: -1
	                  },
	                  filter: undefined
	                };
	                TABLE_OPTIONS = {
	                  options: {
	                    targetEl: this.els.main,
	                    endless: false,
	                    actions: [{
	                      title: 'Ð¡Ð¾Ð·Ð´Ð°ÑÑ',
	                      action: this.goCreate.bind(this)
	                    }].concat(_toConsumableArray(this.getOptions('list.actions', [])))
	                  }
	                };
	                Object.keys(DEFAULT_OPTIONS_TABLE).forEach(function (key) {
	                  var optVal = _this6.getOptions("list.".concat(key), DEFAULT_OPTIONS_TABLE[key]);

	                  if (typeof optVal !== 'undefined') {
	                    TABLE_OPTIONS.options[key] = optVal;
	                  }
	                });
	                this.ui.list = new notTable(TABLE_OPTIONS);
	                this.emit('after:render:list');
	                _context8.next = 20;
	                break;

	              case 16:
	                _context8.prev = 16;
	                _context8.t0 = _context8["catch"](0);
	                notCommon.report(_context8.t0);
	                this.showErrorMessage(_context8.t0);

	              case 20:
	              case "end":
	                return _context8.stop();
	            }
	          }
	        }, _callee8, this, [[0, 16]]);
	      }));

	      function runList() {
	        return _runList.apply(this, arguments);
	      }

	      return runList;
	    }()
	  }, {
	    key: "goCreate",
	    value: function goCreate() {
	      this.app.getWorking('router').navigate(this.getModelActionURL(false, 'create'));
	    }
	  }, {
	    key: "goDetails",
	    value: function goDetails(value) {
	      this.app.getWorking('router').navigate(this.getModelActionURL(value, false));
	    }
	  }, {
	    key: "goUpdate",
	    value: function goUpdate(value) {
	      this.app.getWorking('router').navigate(this.getModelActionURL(value, 'update'));
	    }
	  }, {
	    key: "goDelete",
	    value: function goDelete(value) {
	      this.app.getWorking('router').navigate(this.getModelActionURL(value, 'delete'));
	    }
	  }, {
	    key: "goList",
	    value: function goList() {
	      this.app.getWorking('router').navigate(this.getModelURL());
	    }
	  }, {
	    key: "onActionSubmit",
	    value: function () {
	      var _onActionSubmit = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(action, item) {
	        var result;
	        return regeneratorRuntime.wrap(function _callee9$(_context9) {
	          while (1) {
	            switch (_context9.prev = _context9.next) {
	              case 0:
	                _context9.prev = 0;
	                this.ui[action] && this.ui[action].setLoading();
	                _context9.next = 4;
	                return this.getModel(item)["$".concat(action)]();

	              case 4:
	                result = _context9.sent;
	                return _context9.abrupt("return", this.processResult(this.ui[action], result));

	              case 8:
	                _context9.prev = 8;
	                _context9.t0 = _context9["catch"](0);
	                this.processResult(this.ui[action], _context9.t0);
	                return _context9.abrupt("return", false);

	              case 12:
	                _context9.prev = 12;
	                this.ui[action] && this.ui[action].resetLoading();
	                return _context9.finish(12);

	              case 15:
	              case "end":
	                return _context9.stop();
	            }
	          }
	        }, _callee9, this, [[0, 8, 12, 15]]);
	      }));

	      function onActionSubmit(_x6, _x7) {
	        return _onActionSubmit.apply(this, arguments);
	      }

	      return onActionSubmit;
	    }()
	  }, {
	    key: "processResult",
	    value: function processResult(ui, result) {
	      var ifSuccess = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function () {};

	      if (result.status === 'ok') {
	        ui.showSuccess();
	        ifSuccess && ifSuccess();
	        return true;
	      } else {
	        this.setFormErrors(ui, result);
	        return false;
	      }
	    }
	  }, {
	    key: "setFormErrors",
	    value: function setFormErrors(ui, result) {
	      var status = {
	        form: [],
	        fields: {}
	      };

	      if (result.message) {
	        status.form.push(result.message);
	      }

	      if (result.errors && Object.keys(result.errors).length > 0) {
	        status.fields = _objectSpread2({}, result.errors);
	      }

	      ui.updateFormValidationStatus(status);
	    }
	  }, {
	    key: "$destroyUI",
	    value: function $destroyUI() {
	      for (var name in this.ui) {
	        this.ui[name].$destroy && this.ui[name].$destroy();
	        delete this.ui[name];
	      }

	      for (var _name in this.validator) {
	        delete this.validator[_name];
	      }
	    }
	  }, {
	    key: "showErrorMessage",
	    value: function showErrorMessage(res) {
	      this.error(res);
	      this.ui.error = new Ui_error({
	        target: this.els.main,
	        props: {
	          title: 'ÐÑÐ¾Ð¸Ð·Ð¾ÑÐ»Ð° Ð¾ÑÐ¸Ð±ÐºÐ°',
	          message: res.message ? res.message : UICommon$1.ERROR_DEFAULT
	        }
	      });
	    }
	  }, {
	    key: "showSuccessMessage",
	    value: function showSuccessMessage(title, message) {
	      this.ui.success = new Ui_success({
	        target: this.els.main,
	        props: {
	          title: title,
	          message: message
	        }
	      });
	    }
	  }]);

	  return notCRUD;
	}(notController);

	_defineProperty(notCRUD, "ERROR_DEFAULT", UICommon$1.ERROR_DEFAULT);

	//import 'babel-polyfill/dist/polyfill';
	var ncCRUD = notCRUD; //legacy alias

	var index$5 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		notCommon: notCommon,
		notPath: notPath,
		notController: notController,
		notBase: notBase,
		notRouter: notRouter$1,
		notRecord: notRecord,
		notInterface: notInterface,
		notApp: notApp,
		notAPI: index$7,
		notForm: notForm,
		notFormUtils: notFormUtils,
		notCRUD: notCRUD,
		ncCRUD: ncCRUD,
		COMPONENTS: COMPONENTS,
		FIELDS: FIELDS,
		VARIANTS: VARIANTS
	});

	/* src/elements/various/ui.indicator.svelte generated by Svelte v3.44.3 */

	function create_fragment$s(ctx) {
		let span;
		let t_value = /*labels*/ ctx[2][/*state*/ ctx[0]] + "";
		let t;
		let span_class_value;

		return {
			c() {
				span = element("span");
				t = text(t_value);

				attr(span, "class", span_class_value = "tag is-" + /*size*/ ctx[1] + " " + (/*bold*/ ctx[5] ? 'has-text-weight-bold' : '') + " " + (/*padding*/ ctx[4] !== 'normal'
				? `is-padded-${/*padding*/ ctx[4]}`
				: '') + " " + (/*sided*/ ctx[10] ? 'is-sided' : '') + " " + (/*right*/ ctx[6] ? 'is-sided-right' : '') + " " + (/*left*/ ctx[7] ? 'is-sided-left' : '') + " " + (/*top*/ ctx[8] ? 'is-sided-top' : '') + " " + (/*bottom*/ ctx[9] ? 'is-sided-bottom' : '') + " is-" + /*state*/ ctx[0] + " " + /*classes*/ ctx[3] + "");
			},
			m(target, anchor) {
				insert(target, span, anchor);
				append(span, t);
			},
			p(ctx, [dirty]) {
				if (dirty & /*labels, state*/ 5 && t_value !== (t_value = /*labels*/ ctx[2][/*state*/ ctx[0]] + "")) set_data(t, t_value);

				if (dirty & /*size, bold, padding, sided, right, left, top, bottom, state, classes*/ 2043 && span_class_value !== (span_class_value = "tag is-" + /*size*/ ctx[1] + " " + (/*bold*/ ctx[5] ? 'has-text-weight-bold' : '') + " " + (/*padding*/ ctx[4] !== 'normal'
				? `is-padded-${/*padding*/ ctx[4]}`
				: '') + " " + (/*sided*/ ctx[10] ? 'is-sided' : '') + " " + (/*right*/ ctx[6] ? 'is-sided-right' : '') + " " + (/*left*/ ctx[7] ? 'is-sided-left' : '') + " " + (/*top*/ ctx[8] ? 'is-sided-top' : '') + " " + (/*bottom*/ ctx[9] ? 'is-sided-bottom' : '') + " is-" + /*state*/ ctx[0] + " " + /*classes*/ ctx[3] + "")) {
					attr(span, "class", span_class_value);
				}
			},
			i: noop,
			o: noop,
			d(detaching) {
				if (detaching) detach(span);
			}
		};
	}

	function instance$s($$self, $$props, $$invalidate) {
		let { id = 'tagId' } = $$props;
		let { state = 'light' } = $$props;
		let { size = 'normal' } = $$props;

		let { labels = {
			black: 'black',
			dark: 'dark',
			light: 'light',
			white: 'white',
			primary: 'primary',
			link: 'link',
			info: 'info',
			success: 'success',
			warning: 'warning',
			danger: 'danger'
		} } = $$props;

		let { classes = 'mx-1' } = $$props;
		let { padding = 'normal' } = $$props;
		let { bold = false } = $$props;
		let { right = false } = $$props;
		let { left = false } = $$props;
		let { top = false } = $$props;
		let { bottom = false } = $$props;
		let sided = false;
		let { events = {} } = $$props;
		let { register = notCommon.registerWidgetEvents.bind(notCommon) } = $$props;

		let { onUpdate = data => {
			if (Object.prototype.hasOwnProperty.call(data, 'state')) {
				$$invalidate(0, state = data.state);
			}
		} } = $$props;

		function getStandartUpdateEventName() {
			return `indicator-${id}:update`;
		}

		onMount(() => {
			if (!Object.prototype.hasOwnProperty.call(events, getStandartUpdateEventName())) {
				$$invalidate(11, events[getStandartUpdateEventName()] = onUpdate, events);
			}

			register(events);
		});

		$$self.$$set = $$props => {
			if ('id' in $$props) $$invalidate(12, id = $$props.id);
			if ('state' in $$props) $$invalidate(0, state = $$props.state);
			if ('size' in $$props) $$invalidate(1, size = $$props.size);
			if ('labels' in $$props) $$invalidate(2, labels = $$props.labels);
			if ('classes' in $$props) $$invalidate(3, classes = $$props.classes);
			if ('padding' in $$props) $$invalidate(4, padding = $$props.padding);
			if ('bold' in $$props) $$invalidate(5, bold = $$props.bold);
			if ('right' in $$props) $$invalidate(6, right = $$props.right);
			if ('left' in $$props) $$invalidate(7, left = $$props.left);
			if ('top' in $$props) $$invalidate(8, top = $$props.top);
			if ('bottom' in $$props) $$invalidate(9, bottom = $$props.bottom);
			if ('events' in $$props) $$invalidate(11, events = $$props.events);
			if ('register' in $$props) $$invalidate(13, register = $$props.register);
			if ('onUpdate' in $$props) $$invalidate(14, onUpdate = $$props.onUpdate);
		};

		$$self.$$.update = () => {
			if ($$self.$$.dirty & /*right, left, top, bottom*/ 960) {
				$$invalidate(10, sided = right || left || top || bottom);
			}
		};

		return [
			state,
			size,
			labels,
			classes,
			padding,
			bold,
			right,
			left,
			top,
			bottom,
			sided,
			events,
			id,
			register,
			onUpdate
		];
	}

	class Ui_indicator extends SvelteComponent {
		constructor(options) {
			super();

			init(this, options, instance$s, create_fragment$s, safe_not_equal, {
				id: 12,
				state: 0,
				size: 1,
				labels: 2,
				classes: 3,
				padding: 4,
				bold: 5,
				right: 6,
				left: 7,
				top: 8,
				bottom: 9,
				events: 11,
				register: 13,
				onUpdate: 14
			});
		}
	}

	/* src/elements/various/ui.progress.svelte generated by Svelte v3.44.3 */

	function create_fragment$r(ctx) {
		let progress;
		let t0;
		let t1;
		let progress_class_value;

		return {
			c() {
				progress = element("progress");
				t0 = text(/*value*/ ctx[0]);
				t1 = text("%");
				attr(progress, "class", progress_class_value = "progress " + /*classes*/ ctx[4] + " " + (/*color*/ ctx[2] ? `is-${/*color*/ ctx[2]}` : '') + " " + (/*size*/ ctx[3] ? `is-${/*size*/ ctx[3]}` : ''));
				progress.value = /*value*/ ctx[0];
				attr(progress, "max", /*max*/ ctx[1]);
			},
			m(target, anchor) {
				insert(target, progress, anchor);
				append(progress, t0);
				append(progress, t1);
			},
			p(ctx, [dirty]) {
				if (dirty & /*value*/ 1) set_data(t0, /*value*/ ctx[0]);

				if (dirty & /*classes, color, size*/ 28 && progress_class_value !== (progress_class_value = "progress " + /*classes*/ ctx[4] + " " + (/*color*/ ctx[2] ? `is-${/*color*/ ctx[2]}` : '') + " " + (/*size*/ ctx[3] ? `is-${/*size*/ ctx[3]}` : ''))) {
					attr(progress, "class", progress_class_value);
				}

				if (dirty & /*value*/ 1) {
					progress.value = /*value*/ ctx[0];
				}

				if (dirty & /*max*/ 2) {
					attr(progress, "max", /*max*/ ctx[1]);
				}
			},
			i: noop,
			o: noop,
			d(detaching) {
				if (detaching) detach(progress);
			}
		};
	}

	function instance$r($$self, $$props, $$invalidate) {
		let { value } = $$props;
		let { max = 100 } = $$props;
		let { color = '' } = $$props;
		let { size = '' } = $$props;
		let { classes = '' } = $$props;

		$$self.$$set = $$props => {
			if ('value' in $$props) $$invalidate(0, value = $$props.value);
			if ('max' in $$props) $$invalidate(1, max = $$props.max);
			if ('color' in $$props) $$invalidate(2, color = $$props.color);
			if ('size' in $$props) $$invalidate(3, size = $$props.size);
			if ('classes' in $$props) $$invalidate(4, classes = $$props.classes);
		};

		return [value, max, color, size, classes];
	}

	class Ui_progress extends SvelteComponent {
		constructor(options) {
			super();

			init(this, options, instance$r, create_fragment$r, safe_not_equal, {
				value: 0,
				max: 1,
				color: 2,
				size: 3,
				classes: 4
			});
		}
	}

	/* src/elements/various/ui.title.svelte generated by Svelte v3.44.3 */

	function create_if_block$h(ctx) {
		let html_tag;
		let html_anchor;

		return {
			c() {
				html_tag = new HtmlTag();
				html_anchor = empty();
				html_tag.a = html_anchor;
			},
			m(target, anchor) {
				html_tag.m(/*resultSubtitle*/ ctx[1], target, anchor);
				insert(target, html_anchor, anchor);
			},
			p(ctx, dirty) {
				if (dirty & /*resultSubtitle*/ 2) html_tag.p(/*resultSubtitle*/ ctx[1]);
			},
			d(detaching) {
				if (detaching) detach(html_anchor);
				if (detaching) html_tag.d();
			}
		};
	}

	function create_fragment$q(ctx) {
		let html_tag;
		let t;
		let if_block_anchor;
		let if_block = /*subtitle*/ ctx[0] && create_if_block$h(ctx);

		return {
			c() {
				html_tag = new HtmlTag();
				t = space();
				if (if_block) if_block.c();
				if_block_anchor = empty();
				html_tag.a = t;
			},
			m(target, anchor) {
				html_tag.m(/*resultTitle*/ ctx[2], target, anchor);
				insert(target, t, anchor);
				if (if_block) if_block.m(target, anchor);
				insert(target, if_block_anchor, anchor);
			},
			p(ctx, [dirty]) {
				if (dirty & /*resultTitle*/ 4) html_tag.p(/*resultTitle*/ ctx[2]);

				if (/*subtitle*/ ctx[0]) {
					if (if_block) {
						if_block.p(ctx, dirty);
					} else {
						if_block = create_if_block$h(ctx);
						if_block.c();
						if_block.m(if_block_anchor.parentNode, if_block_anchor);
					}
				} else if (if_block) {
					if_block.d(1);
					if_block = null;
				}
			},
			i: noop,
			o: noop,
			d(detaching) {
				if (detaching) html_tag.d();
				if (detaching) detach(t);
				if (if_block) if_block.d(detaching);
				if (detaching) detach(if_block_anchor);
			}
		};
	}

	function instance$q($$self, $$props, $$invalidate) {
		let spacedStyle;
		let resultTitle;
		let resultSubtitle;
		let $LOCALE;
		component_subscribe($$self, LOCALE, $$value => $$invalidate(9, $LOCALE = $$value));
		let { title = '' } = $$props;
		let { subtitle } = $$props;
		let { size = 1 } = $$props;
		let { subsize } = $$props;
		let { spaced = false } = $$props;
		let size2;

		$$self.$$set = $$props => {
			if ('title' in $$props) $$invalidate(3, title = $$props.title);
			if ('subtitle' in $$props) $$invalidate(0, subtitle = $$props.subtitle);
			if ('size' in $$props) $$invalidate(4, size = $$props.size);
			if ('subsize' in $$props) $$invalidate(5, subsize = $$props.subsize);
			if ('spaced' in $$props) $$invalidate(6, spaced = $$props.spaced);
		};

		$$self.$$.update = () => {
			if ($$self.$$.dirty & /*subsize, size*/ 48) {
				$$invalidate(7, size2 = subsize ? subsize : size < 6 ? size + 1 : size);
			}

			if ($$self.$$.dirty & /*spaced*/ 64) {
				$$invalidate(8, spacedStyle = spaced ? 'is-spaced' : '');
			}

			if ($$self.$$.dirty & /*size, spacedStyle, $LOCALE, title*/ 792) {
				$$invalidate(2, resultTitle = `<h${size} class="title ${spacedStyle} is-${size}">${$LOCALE[title]}</h${size}>`);
			}

			if ($$self.$$.dirty & /*size2, $LOCALE, subtitle*/ 641) {
				$$invalidate(1, resultSubtitle = `<h${size2} class="subtitle is-${size2}">${$LOCALE[subtitle]}</h${size2}>`);
			}
		};

		return [
			subtitle,
			resultSubtitle,
			resultTitle,
			title,
			size,
			subsize,
			spaced,
			size2,
			spacedStyle,
			$LOCALE
		];
	}

	class Ui_title extends SvelteComponent {
		constructor(options) {
			super();

			init(this, options, instance$q, create_fragment$q, safe_not_equal, {
				title: 3,
				subtitle: 0,
				size: 4,
				subsize: 5,
				spaced: 6
			});
		}
	}

	/* src/elements/various/ui.user.card.svelte generated by Svelte v3.44.3 */

	function create_fragment$p(ctx) {
		let article;
		let figure;
		let p0;
		let img;
		let img_src_value;
		let t0;
		let div1;
		let div0;
		let p1;
		let strong0;
		let t1;
		let t2;
		let small;
		let t4;
		let strong1;
		let t5;

		return {
			c() {
				article = element("article");
				figure = element("figure");
				p0 = element("p");
				img = element("img");
				t0 = space();
				div1 = element("div");
				div0 = element("div");
				p1 = element("p");
				strong0 = element("strong");
				t1 = text(/*username*/ ctx[0]);
				t2 = space();
				small = element("small");
				small.textContent = "@";
				t4 = space();
				strong1 = element("strong");
				t5 = text(/*role*/ ctx[1]);
				if (!src_url_equal(img.src, img_src_value = /*image*/ ctx[2])) attr(img, "src", img_src_value);
				attr(img, "alt", /*username*/ ctx[0]);
				attr(p0, "class", "image is-32x32");
				attr(figure, "class", "media-left");
				attr(div0, "class", "content");
				attr(div1, "class", "media-content");
				attr(article, "id", /*getCompId*/ ctx[3]());
				attr(article, "class", "media");
			},
			m(target, anchor) {
				insert(target, article, anchor);
				append(article, figure);
				append(figure, p0);
				append(p0, img);
				append(article, t0);
				append(article, div1);
				append(div1, div0);
				append(div0, p1);
				append(p1, strong0);
				append(strong0, t1);
				append(p1, t2);
				append(p1, small);
				append(p1, t4);
				append(p1, strong1);
				append(strong1, t5);
			},
			p(ctx, [dirty]) {
				if (dirty & /*image*/ 4 && !src_url_equal(img.src, img_src_value = /*image*/ ctx[2])) {
					attr(img, "src", img_src_value);
				}

				if (dirty & /*username*/ 1) {
					attr(img, "alt", /*username*/ ctx[0]);
				}

				if (dirty & /*username*/ 1) set_data(t1, /*username*/ ctx[0]);
				if (dirty & /*role*/ 2) set_data(t5, /*role*/ ctx[1]);
			},
			i: noop,
			o: noop,
			d(detaching) {
				if (detaching) detach(article);
			}
		};
	}

	function instance$p($$self, $$props, $$invalidate) {
		let { id = 'userCard' } = $$props;
		let { image = 'https://bulma.io/images/placeholders/32x32.png' } = $$props;
		let { username = 'John Doe' } = $$props;
		let { role = 'admin' } = $$props;
		let { events = {} } = $$props;
		let { register = notCommon.registerWidgetEvents } = $$props;

		let { onUpdate = data => {
			if (Object.prototype.hasOwnProperty.call(data, 'username')) {
				$$invalidate(0, username = data.username);
			}

			if (Object.prototype.hasOwnProperty.call(data, 'role')) {
				$$invalidate(1, role = data.role);
			}
		} } = $$props;

		function getCompId() {
			return `usercard-${id}`;
		}

		function getStandartUpdateEventName() {
			let compId = getCompId();
			return `${compId}:update`;
		}

		onMount(() => {
			if (!Object.prototype.hasOwnProperty.call(events, getStandartUpdateEventName())) {
				$$invalidate(4, events[getStandartUpdateEventName()] = onUpdate, events);
			}

			register(events);
		});

		$$self.$$set = $$props => {
			if ('id' in $$props) $$invalidate(5, id = $$props.id);
			if ('image' in $$props) $$invalidate(2, image = $$props.image);
			if ('username' in $$props) $$invalidate(0, username = $$props.username);
			if ('role' in $$props) $$invalidate(1, role = $$props.role);
			if ('events' in $$props) $$invalidate(4, events = $$props.events);
			if ('register' in $$props) $$invalidate(6, register = $$props.register);
			if ('onUpdate' in $$props) $$invalidate(7, onUpdate = $$props.onUpdate);
		};

		return [username, role, image, getCompId, events, id, register, onUpdate];
	}

	class Ui_user_card extends SvelteComponent {
		constructor(options) {
			super();

			init(this, options, instance$p, create_fragment$p, safe_not_equal, {
				id: 5,
				image: 2,
				username: 0,
				role: 1,
				events: 4,
				register: 6,
				onUpdate: 7
			});
		}
	}

	/* node_modules/simple-svelte-autocomplete/src/SimpleAutocomplete.svelte generated by Svelte v3.44.3 */

	const get_no_results_slot_changes = dirty => ({
		noResultsText: dirty[0] & /*noResultsText*/ 2048
	});

	const get_no_results_slot_context = ctx => ({ noResultsText: /*noResultsText*/ ctx[11] });

	const get_create_slot_changes = dirty => ({
		createText: dirty[0] & /*createText*/ 8192
	});

	const get_create_slot_context = ctx => ({ createText: /*createText*/ ctx[13] });

	const get_loading_slot_changes = dirty => ({
		loadingText: dirty[0] & /*loadingText*/ 4096
	});

	const get_loading_slot_context = ctx => ({ loadingText: /*loadingText*/ ctx[12] });

	function get_each_context$4(ctx, list, i) {
		const child_ctx = ctx.slice();
		child_ctx[108] = list[i];
		child_ctx[110] = i;
		return child_ctx;
	}

	const get_item_slot_changes = dirty => ({
		item: dirty[0] & /*filteredListItems*/ 134217728,
		label: dirty[0] & /*filteredListItems*/ 134217728
	});

	const get_item_slot_context = ctx => ({
		item: /*listItem*/ ctx[108].item,
		label: /*listItem*/ ctx[108].highlighted
		? /*listItem*/ ctx[108].highlighted
		: /*listItem*/ ctx[108].label
	});

	function get_each_context_1$2(ctx, list, i) {
		const child_ctx = ctx.slice();
		child_ctx[111] = list[i];
		return child_ctx;
	}

	const get_tag_slot_changes = dirty => ({
		label: dirty[0] & /*selectedItem*/ 2,
		item: dirty[0] & /*selectedItem*/ 2
	});

	const get_tag_slot_context = ctx => ({
		label: /*safeLabelFunction*/ ctx[34](/*tagItem*/ ctx[111]),
		item: /*tagItem*/ ctx[111],
		unselectItem: /*unselectItem*/ ctx[41]
	});

	function get_each_context_2(ctx, list, i) {
		const child_ctx = ctx.slice();
		child_ctx[110] = list[i];
		return child_ctx;
	}

	// (1144:39) 
	function create_if_block_11(ctx) {
		let each_1_anchor;
		let each_value_2 = /*selectedItem*/ ctx[1];
		let each_blocks = [];

		for (let i = 0; i < each_value_2.length; i += 1) {
			each_blocks[i] = create_each_block_2(get_each_context_2(ctx, each_value_2, i));
		}

		return {
			c() {
				for (let i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].c();
				}

				each_1_anchor = empty();
			},
			m(target, anchor) {
				for (let i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].m(target, anchor);
				}

				insert(target, each_1_anchor, anchor);
			},
			p(ctx, dirty) {
				if (dirty[0] & /*valueFunction, selectedItem*/ 18 | dirty[1] & /*safeLabelFunction*/ 8) {
					each_value_2 = /*selectedItem*/ ctx[1];
					let i;

					for (i = 0; i < each_value_2.length; i += 1) {
						const child_ctx = get_each_context_2(ctx, each_value_2, i);

						if (each_blocks[i]) {
							each_blocks[i].p(child_ctx, dirty);
						} else {
							each_blocks[i] = create_each_block_2(child_ctx);
							each_blocks[i].c();
							each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
						}
					}

					for (; i < each_blocks.length; i += 1) {
						each_blocks[i].d(1);
					}

					each_blocks.length = each_value_2.length;
				}
			},
			d(detaching) {
				destroy_each(each_blocks, detaching);
				if (detaching) detach(each_1_anchor);
			}
		};
	}

	// (1142:4) {#if !multiple && value}
	function create_if_block_10(ctx) {
		let option;
		let t;

		return {
			c() {
				option = element("option");
				t = text(/*text*/ ctx[3]);
				option.__value = /*value*/ ctx[2];
				option.value = option.__value;
				option.selected = true;
				attr(option, "class", "svelte-lduj97");
			},
			m(target, anchor) {
				insert(target, option, anchor);
				append(option, t);
			},
			p(ctx, dirty) {
				if (dirty[0] & /*text*/ 8) set_data(t, /*text*/ ctx[3]);

				if (dirty[0] & /*value*/ 4) {
					option.__value = /*value*/ ctx[2];
					option.value = option.__value;
				}
			},
			d(detaching) {
				if (detaching) detach(option);
			}
		};
	}

	// (1145:6) {#each selectedItem as i}
	function create_each_block_2(ctx) {
		let option;
		let t0_value = /*safeLabelFunction*/ ctx[34](/*i*/ ctx[110]) + "";
		let t0;
		let t1;
		let option_value_value;

		return {
			c() {
				option = element("option");
				t0 = text(t0_value);
				t1 = space();
				option.__value = option_value_value = /*valueFunction*/ ctx[4](/*i*/ ctx[110], true);
				option.value = option.__value;
				option.selected = true;
				attr(option, "class", "svelte-lduj97");
			},
			m(target, anchor) {
				insert(target, option, anchor);
				append(option, t0);
				append(option, t1);
			},
			p(ctx, dirty) {
				if (dirty[0] & /*selectedItem*/ 2 && t0_value !== (t0_value = /*safeLabelFunction*/ ctx[34](/*i*/ ctx[110]) + "")) set_data(t0, t0_value);

				if (dirty[0] & /*valueFunction, selectedItem*/ 18 && option_value_value !== (option_value_value = /*valueFunction*/ ctx[4](/*i*/ ctx[110], true))) {
					option.__value = option_value_value;
					option.value = option.__value;
				}
			},
			d(detaching) {
				if (detaching) detach(option);
			}
		};
	}

	// (1153:4) {#if multiple && selectedItem}
	function create_if_block_9$1(ctx) {
		let each_1_anchor;
		let current;
		let each_value_1 = /*selectedItem*/ ctx[1];
		let each_blocks = [];

		for (let i = 0; i < each_value_1.length; i += 1) {
			each_blocks[i] = create_each_block_1$2(get_each_context_1$2(ctx, each_value_1, i));
		}

		const out = i => transition_out(each_blocks[i], 1, 1, () => {
			each_blocks[i] = null;
		});

		return {
			c() {
				for (let i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].c();
				}

				each_1_anchor = empty();
			},
			m(target, anchor) {
				for (let i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].m(target, anchor);
				}

				insert(target, each_1_anchor, anchor);
				current = true;
			},
			p(ctx, dirty) {
				if (dirty[0] & /*selectedItem*/ 2 | dirty[1] & /*unselectItem, safeLabelFunction*/ 1032 | dirty[2] & /*$$scope*/ 8192) {
					each_value_1 = /*selectedItem*/ ctx[1];
					let i;

					for (i = 0; i < each_value_1.length; i += 1) {
						const child_ctx = get_each_context_1$2(ctx, each_value_1, i);

						if (each_blocks[i]) {
							each_blocks[i].p(child_ctx, dirty);
							transition_in(each_blocks[i], 1);
						} else {
							each_blocks[i] = create_each_block_1$2(child_ctx);
							each_blocks[i].c();
							transition_in(each_blocks[i], 1);
							each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
						}
					}

					group_outros();

					for (i = each_value_1.length; i < each_blocks.length; i += 1) {
						out(i);
					}

					check_outros();
				}
			},
			i(local) {
				if (current) return;

				for (let i = 0; i < each_value_1.length; i += 1) {
					transition_in(each_blocks[i]);
				}

				current = true;
			},
			o(local) {
				each_blocks = each_blocks.filter(Boolean);

				for (let i = 0; i < each_blocks.length; i += 1) {
					transition_out(each_blocks[i]);
				}

				current = false;
			},
			d(detaching) {
				destroy_each(each_blocks, detaching);
				if (detaching) detach(each_1_anchor);
			}
		};
	}

	// (1159:25)            
	function fallback_block_4(ctx) {
		let div;
		let span0;
		let t0_value = /*safeLabelFunction*/ ctx[34](/*tagItem*/ ctx[111]) + "";
		let t0;
		let t1;
		let span1;
		let t2;
		let mounted;
		let dispose;

		return {
			c() {
				div = element("div");
				span0 = element("span");
				t0 = text(t0_value);
				t1 = space();
				span1 = element("span");
				t2 = space();
				attr(span0, "class", "tag svelte-lduj97");
				attr(span1, "class", "tag is-delete svelte-lduj97");
				attr(div, "class", "tags has-addons svelte-lduj97");
			},
			m(target, anchor) {
				insert(target, div, anchor);
				append(div, span0);
				append(span0, t0);
				append(div, t1);
				append(div, span1);
				insert(target, t2, anchor);

				if (!mounted) {
					dispose = listen(span1, "click", prevent_default(function () {
						if (is_function(/*unselectItem*/ ctx[41](/*tagItem*/ ctx[111]))) /*unselectItem*/ ctx[41](/*tagItem*/ ctx[111]).apply(this, arguments);
					}));

					mounted = true;
				}
			},
			p(new_ctx, dirty) {
				ctx = new_ctx;
				if (dirty[0] & /*selectedItem*/ 2 && t0_value !== (t0_value = /*safeLabelFunction*/ ctx[34](/*tagItem*/ ctx[111]) + "")) set_data(t0, t0_value);
			},
			d(detaching) {
				if (detaching) detach(div);
				if (detaching) detach(t2);
				mounted = false;
				dispose();
			}
		};
	}

	// (1154:6) {#each selectedItem as tagItem}
	function create_each_block_1$2(ctx) {
		let current;
		const tag_slot_template = /*#slots*/ ctx[76].tag;
		const tag_slot = create_slot(tag_slot_template, ctx, /*$$scope*/ ctx[75], get_tag_slot_context);
		const tag_slot_or_fallback = tag_slot || fallback_block_4(ctx);

		return {
			c() {
				if (tag_slot_or_fallback) tag_slot_or_fallback.c();
			},
			m(target, anchor) {
				if (tag_slot_or_fallback) {
					tag_slot_or_fallback.m(target, anchor);
				}

				current = true;
			},
			p(ctx, dirty) {
				if (tag_slot) {
					if (tag_slot.p && (!current || dirty[0] & /*selectedItem*/ 2 | dirty[2] & /*$$scope*/ 8192)) {
						update_slot_base(
							tag_slot,
							tag_slot_template,
							ctx,
							/*$$scope*/ ctx[75],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[75])
							: get_slot_changes(tag_slot_template, /*$$scope*/ ctx[75], dirty, get_tag_slot_changes),
							get_tag_slot_context
						);
					}
				} else {
					if (tag_slot_or_fallback && tag_slot_or_fallback.p && (!current || dirty[0] & /*selectedItem*/ 2)) {
						tag_slot_or_fallback.p(ctx, !current ? [-1, -1, -1, -1] : dirty);
					}
				}
			},
			i(local) {
				if (current) return;
				transition_in(tag_slot_or_fallback, local);
				current = true;
			},
			o(local) {
				transition_out(tag_slot_or_fallback, local);
				current = false;
			},
			d(detaching) {
				if (tag_slot_or_fallback) tag_slot_or_fallback.d(detaching);
			}
		};
	}

	// (1187:4) {#if clearable}
	function create_if_block_8$1(ctx) {
		let span;
		let mounted;
		let dispose;

		return {
			c() {
				span = element("span");
				span.textContent = "â";
				attr(span, "class", "autocomplete-clear-button svelte-lduj97");
			},
			m(target, anchor) {
				insert(target, span, anchor);

				if (!mounted) {
					dispose = listen(span, "click", /*clear*/ ctx[45]);
					mounted = true;
				}
			},
			p: noop,
			d(detaching) {
				if (detaching) detach(span);
				mounted = false;
				dispose();
			}
		};
	}

	// (1234:28) 
	function create_if_block_7$1(ctx) {
		let div;
		let current;
		const no_results_slot_template = /*#slots*/ ctx[76]["no-results"];
		const no_results_slot = create_slot(no_results_slot_template, ctx, /*$$scope*/ ctx[75], get_no_results_slot_context);
		const no_results_slot_or_fallback = no_results_slot || fallback_block_3(ctx);

		return {
			c() {
				div = element("div");
				if (no_results_slot_or_fallback) no_results_slot_or_fallback.c();
				attr(div, "class", "autocomplete-list-item-no-results svelte-lduj97");
			},
			m(target, anchor) {
				insert(target, div, anchor);

				if (no_results_slot_or_fallback) {
					no_results_slot_or_fallback.m(div, null);
				}

				current = true;
			},
			p(ctx, dirty) {
				if (no_results_slot) {
					if (no_results_slot.p && (!current || dirty[0] & /*noResultsText*/ 2048 | dirty[2] & /*$$scope*/ 8192)) {
						update_slot_base(
							no_results_slot,
							no_results_slot_template,
							ctx,
							/*$$scope*/ ctx[75],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[75])
							: get_slot_changes(no_results_slot_template, /*$$scope*/ ctx[75], dirty, get_no_results_slot_changes),
							get_no_results_slot_context
						);
					}
				} else {
					if (no_results_slot_or_fallback && no_results_slot_or_fallback.p && (!current || dirty[0] & /*noResultsText*/ 2048)) {
						no_results_slot_or_fallback.p(ctx, !current ? [-1, -1, -1, -1] : dirty);
					}
				}
			},
			i(local) {
				if (current) return;
				transition_in(no_results_slot_or_fallback, local);
				current = true;
			},
			o(local) {
				transition_out(no_results_slot_or_fallback, local);
				current = false;
			},
			d(detaching) {
				if (detaching) detach(div);
				if (no_results_slot_or_fallback) no_results_slot_or_fallback.d(detaching);
			}
		};
	}

	// (1230:21) 
	function create_if_block_6$1(ctx) {
		let div;
		let current;
		let mounted;
		let dispose;
		const create_slot_template = /*#slots*/ ctx[76].create;
		const create_slot_1 = create_slot(create_slot_template, ctx, /*$$scope*/ ctx[75], get_create_slot_context);
		const create_slot_or_fallback = create_slot_1 || fallback_block_2(ctx);

		return {
			c() {
				div = element("div");
				if (create_slot_or_fallback) create_slot_or_fallback.c();
				attr(div, "class", "autocomplete-list-item-create svelte-lduj97");
			},
			m(target, anchor) {
				insert(target, div, anchor);

				if (create_slot_or_fallback) {
					create_slot_or_fallback.m(div, null);
				}

				current = true;

				if (!mounted) {
					dispose = listen(div, "click", /*selectItem*/ ctx[35]);
					mounted = true;
				}
			},
			p(ctx, dirty) {
				if (create_slot_1) {
					if (create_slot_1.p && (!current || dirty[0] & /*createText*/ 8192 | dirty[2] & /*$$scope*/ 8192)) {
						update_slot_base(
							create_slot_1,
							create_slot_template,
							ctx,
							/*$$scope*/ ctx[75],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[75])
							: get_slot_changes(create_slot_template, /*$$scope*/ ctx[75], dirty, get_create_slot_changes),
							get_create_slot_context
						);
					}
				} else {
					if (create_slot_or_fallback && create_slot_or_fallback.p && (!current || dirty[0] & /*createText*/ 8192)) {
						create_slot_or_fallback.p(ctx, !current ? [-1, -1, -1, -1] : dirty);
					}
				}
			},
			i(local) {
				if (current) return;
				transition_in(create_slot_or_fallback, local);
				current = true;
			},
			o(local) {
				transition_out(create_slot_or_fallback, local);
				current = false;
			},
			d(detaching) {
				if (detaching) detach(div);
				if (create_slot_or_fallback) create_slot_or_fallback.d(detaching);
				mounted = false;
				dispose();
			}
		};
	}

	// (1226:37) 
	function create_if_block_5$1(ctx) {
		let div;
		let current;
		const loading_slot_template = /*#slots*/ ctx[76].loading;
		const loading_slot = create_slot(loading_slot_template, ctx, /*$$scope*/ ctx[75], get_loading_slot_context);
		const loading_slot_or_fallback = loading_slot || fallback_block_1(ctx);

		return {
			c() {
				div = element("div");
				if (loading_slot_or_fallback) loading_slot_or_fallback.c();
				attr(div, "class", "autocomplete-list-item-loading svelte-lduj97");
			},
			m(target, anchor) {
				insert(target, div, anchor);

				if (loading_slot_or_fallback) {
					loading_slot_or_fallback.m(div, null);
				}

				current = true;
			},
			p(ctx, dirty) {
				if (loading_slot) {
					if (loading_slot.p && (!current || dirty[0] & /*loadingText*/ 4096 | dirty[2] & /*$$scope*/ 8192)) {
						update_slot_base(
							loading_slot,
							loading_slot_template,
							ctx,
							/*$$scope*/ ctx[75],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[75])
							: get_slot_changes(loading_slot_template, /*$$scope*/ ctx[75], dirty, get_loading_slot_changes),
							get_loading_slot_context
						);
					}
				} else {
					if (loading_slot_or_fallback && loading_slot_or_fallback.p && (!current || dirty[0] & /*loadingText*/ 4096)) {
						loading_slot_or_fallback.p(ctx, !current ? [-1, -1, -1, -1] : dirty);
					}
				}
			},
			i(local) {
				if (current) return;
				transition_in(loading_slot_or_fallback, local);
				current = true;
			},
			o(local) {
				transition_out(loading_slot_or_fallback, local);
				current = false;
			},
			d(detaching) {
				if (detaching) detach(div);
				if (loading_slot_or_fallback) loading_slot_or_fallback.d(detaching);
			}
		};
	}

	// (1195:4) {#if filteredListItems && filteredListItems.length > 0}
	function create_if_block$g(ctx) {
		let t;
		let if_block_anchor;
		let current;
		let each_value = /*filteredListItems*/ ctx[27];
		let each_blocks = [];

		for (let i = 0; i < each_value.length; i += 1) {
			each_blocks[i] = create_each_block$4(get_each_context$4(ctx, each_value, i));
		}

		const out = i => transition_out(each_blocks[i], 1, 1, () => {
			each_blocks[i] = null;
		});

		let if_block = /*maxItemsToShowInList*/ ctx[5] > 0 && /*filteredListItems*/ ctx[27].length > /*maxItemsToShowInList*/ ctx[5] && create_if_block_1$c(ctx);

		return {
			c() {
				for (let i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].c();
				}

				t = space();
				if (if_block) if_block.c();
				if_block_anchor = empty();
			},
			m(target, anchor) {
				for (let i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].m(target, anchor);
				}

				insert(target, t, anchor);
				if (if_block) if_block.m(target, anchor);
				insert(target, if_block_anchor, anchor);
				current = true;
			},
			p(ctx, dirty) {
				if (dirty[0] & /*highlightIndex, filteredListItems, maxItemsToShowInList*/ 201326624 | dirty[1] & /*isConfirmed, onListItemClick*/ 32800 | dirty[2] & /*$$scope*/ 8192) {
					each_value = /*filteredListItems*/ ctx[27];
					let i;

					for (i = 0; i < each_value.length; i += 1) {
						const child_ctx = get_each_context$4(ctx, each_value, i);

						if (each_blocks[i]) {
							each_blocks[i].p(child_ctx, dirty);
							transition_in(each_blocks[i], 1);
						} else {
							each_blocks[i] = create_each_block$4(child_ctx);
							each_blocks[i].c();
							transition_in(each_blocks[i], 1);
							each_blocks[i].m(t.parentNode, t);
						}
					}

					group_outros();

					for (i = each_value.length; i < each_blocks.length; i += 1) {
						out(i);
					}

					check_outros();
				}

				if (/*maxItemsToShowInList*/ ctx[5] > 0 && /*filteredListItems*/ ctx[27].length > /*maxItemsToShowInList*/ ctx[5]) {
					if (if_block) {
						if_block.p(ctx, dirty);
					} else {
						if_block = create_if_block_1$c(ctx);
						if_block.c();
						if_block.m(if_block_anchor.parentNode, if_block_anchor);
					}
				} else if (if_block) {
					if_block.d(1);
					if_block = null;
				}
			},
			i(local) {
				if (current) return;

				for (let i = 0; i < each_value.length; i += 1) {
					transition_in(each_blocks[i]);
				}

				current = true;
			},
			o(local) {
				each_blocks = each_blocks.filter(Boolean);

				for (let i = 0; i < each_blocks.length; i += 1) {
					transition_out(each_blocks[i]);
				}

				current = false;
			},
			d(detaching) {
				destroy_each(each_blocks, detaching);
				if (detaching) detach(t);
				if (if_block) if_block.d(detaching);
				if (detaching) detach(if_block_anchor);
			}
		};
	}

	// (1236:48) {noResultsText}
	function fallback_block_3(ctx) {
		let t;

		return {
			c() {
				t = text(/*noResultsText*/ ctx[11]);
			},
			m(target, anchor) {
				insert(target, t, anchor);
			},
			p(ctx, dirty) {
				if (dirty[0] & /*noResultsText*/ 2048) set_data(t, /*noResultsText*/ ctx[11]);
			},
			d(detaching) {
				if (detaching) detach(t);
			}
		};
	}

	// (1232:41) {createText}
	function fallback_block_2(ctx) {
		let t;

		return {
			c() {
				t = text(/*createText*/ ctx[13]);
			},
			m(target, anchor) {
				insert(target, t, anchor);
			},
			p(ctx, dirty) {
				if (dirty[0] & /*createText*/ 8192) set_data(t, /*createText*/ ctx[13]);
			},
			d(detaching) {
				if (detaching) detach(t);
			}
		};
	}

	// (1228:43) {loadingText}
	function fallback_block_1(ctx) {
		let t;

		return {
			c() {
				t = text(/*loadingText*/ ctx[12]);
			},
			m(target, anchor) {
				insert(target, t, anchor);
			},
			p(ctx, dirty) {
				if (dirty[0] & /*loadingText*/ 4096) set_data(t, /*loadingText*/ ctx[12]);
			},
			d(detaching) {
				if (detaching) detach(t);
			}
		};
	}

	// (1197:8) {#if listItem && (maxItemsToShowInList <= 0 || i < maxItemsToShowInList)}
	function create_if_block_2$8(ctx) {
		let if_block_anchor;
		let current;
		let if_block = /*listItem*/ ctx[108] && create_if_block_3$8(ctx);

		return {
			c() {
				if (if_block) if_block.c();
				if_block_anchor = empty();
			},
			m(target, anchor) {
				if (if_block) if_block.m(target, anchor);
				insert(target, if_block_anchor, anchor);
				current = true;
			},
			p(ctx, dirty) {
				if (/*listItem*/ ctx[108]) {
					if (if_block) {
						if_block.p(ctx, dirty);

						if (dirty[0] & /*filteredListItems*/ 134217728) {
							transition_in(if_block, 1);
						}
					} else {
						if_block = create_if_block_3$8(ctx);
						if_block.c();
						transition_in(if_block, 1);
						if_block.m(if_block_anchor.parentNode, if_block_anchor);
					}
				} else if (if_block) {
					group_outros();

					transition_out(if_block, 1, 1, () => {
						if_block = null;
					});

					check_outros();
				}
			},
			i(local) {
				if (current) return;
				transition_in(if_block);
				current = true;
			},
			o(local) {
				transition_out(if_block);
				current = false;
			},
			d(detaching) {
				if (if_block) if_block.d(detaching);
				if (detaching) detach(if_block_anchor);
			}
		};
	}

	// (1198:10) {#if listItem}
	function create_if_block_3$8(ctx) {
		let div;
		let div_class_value;
		let current;
		let mounted;
		let dispose;
		const item_slot_template = /*#slots*/ ctx[76].item;
		const item_slot = create_slot(item_slot_template, ctx, /*$$scope*/ ctx[75], get_item_slot_context);
		const item_slot_or_fallback = item_slot || fallback_block(ctx);

		function click_handler() {
			return /*click_handler*/ ctx[79](/*listItem*/ ctx[108]);
		}

		function pointerenter_handler() {
			return /*pointerenter_handler*/ ctx[80](/*i*/ ctx[110]);
		}

		return {
			c() {
				div = element("div");
				if (item_slot_or_fallback) item_slot_or_fallback.c();

				attr(div, "class", div_class_value = "autocomplete-list-item " + (/*i*/ ctx[110] === /*highlightIndex*/ ctx[26]
				? 'selected'
				: '') + " svelte-lduj97");

				toggle_class(div, "confirmed", /*isConfirmed*/ ctx[46](/*listItem*/ ctx[108].item));
			},
			m(target, anchor) {
				insert(target, div, anchor);

				if (item_slot_or_fallback) {
					item_slot_or_fallback.m(div, null);
				}

				current = true;

				if (!mounted) {
					dispose = [
						listen(div, "click", click_handler),
						listen(div, "pointerenter", pointerenter_handler)
					];

					mounted = true;
				}
			},
			p(new_ctx, dirty) {
				ctx = new_ctx;

				if (item_slot) {
					if (item_slot.p && (!current || dirty[0] & /*filteredListItems*/ 134217728 | dirty[2] & /*$$scope*/ 8192)) {
						update_slot_base(
							item_slot,
							item_slot_template,
							ctx,
							/*$$scope*/ ctx[75],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[75])
							: get_slot_changes(item_slot_template, /*$$scope*/ ctx[75], dirty, get_item_slot_changes),
							get_item_slot_context
						);
					}
				} else {
					if (item_slot_or_fallback && item_slot_or_fallback.p && (!current || dirty[0] & /*filteredListItems*/ 134217728)) {
						item_slot_or_fallback.p(ctx, !current ? [-1, -1, -1, -1] : dirty);
					}
				}

				if (!current || dirty[0] & /*highlightIndex*/ 67108864 && div_class_value !== (div_class_value = "autocomplete-list-item " + (/*i*/ ctx[110] === /*highlightIndex*/ ctx[26]
				? 'selected'
				: '') + " svelte-lduj97")) {
					attr(div, "class", div_class_value);
				}

				if (dirty[0] & /*highlightIndex, filteredListItems*/ 201326592 | dirty[1] & /*isConfirmed*/ 32768) {
					toggle_class(div, "confirmed", /*isConfirmed*/ ctx[46](/*listItem*/ ctx[108].item));
				}
			},
			i(local) {
				if (current) return;
				transition_in(item_slot_or_fallback, local);
				current = true;
			},
			o(local) {
				transition_out(item_slot_or_fallback, local);
				current = false;
			},
			d(detaching) {
				if (detaching) detach(div);
				if (item_slot_or_fallback) item_slot_or_fallback.d(detaching);
				mounted = false;
				run_all(dispose);
			}
		};
	}

	// (1212:16) {:else}
	function create_else_block$d(ctx) {
		let html_tag;
		let raw_value = /*listItem*/ ctx[108].label + "";
		let html_anchor;

		return {
			c() {
				html_tag = new HtmlTag();
				html_anchor = empty();
				html_tag.a = html_anchor;
			},
			m(target, anchor) {
				html_tag.m(raw_value, target, anchor);
				insert(target, html_anchor, anchor);
			},
			p(ctx, dirty) {
				if (dirty[0] & /*filteredListItems*/ 134217728 && raw_value !== (raw_value = /*listItem*/ ctx[108].label + "")) html_tag.p(raw_value);
			},
			d(detaching) {
				if (detaching) detach(html_anchor);
				if (detaching) html_tag.d();
			}
		};
	}

	// (1210:16) {#if listItem.highlighted}
	function create_if_block_4$8(ctx) {
		let html_tag;
		let raw_value = /*listItem*/ ctx[108].highlighted + "";
		let html_anchor;

		return {
			c() {
				html_tag = new HtmlTag();
				html_anchor = empty();
				html_tag.a = html_anchor;
			},
			m(target, anchor) {
				html_tag.m(raw_value, target, anchor);
				insert(target, html_anchor, anchor);
			},
			p(ctx, dirty) {
				if (dirty[0] & /*filteredListItems*/ 134217728 && raw_value !== (raw_value = /*listItem*/ ctx[108].highlighted + "")) html_tag.p(raw_value);
			},
			d(detaching) {
				if (detaching) detach(html_anchor);
				if (detaching) html_tag.d();
			}
		};
	}

	// (1209:85)                  
	function fallback_block(ctx) {
		let if_block_anchor;

		function select_block_type_2(ctx, dirty) {
			if (/*listItem*/ ctx[108].highlighted) return create_if_block_4$8;
			return create_else_block$d;
		}

		let current_block_type = select_block_type_2(ctx);
		let if_block = current_block_type(ctx);

		return {
			c() {
				if_block.c();
				if_block_anchor = empty();
			},
			m(target, anchor) {
				if_block.m(target, anchor);
				insert(target, if_block_anchor, anchor);
			},
			p(ctx, dirty) {
				if (current_block_type === (current_block_type = select_block_type_2(ctx)) && if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block.d(1);
					if_block = current_block_type(ctx);

					if (if_block) {
						if_block.c();
						if_block.m(if_block_anchor.parentNode, if_block_anchor);
					}
				}
			},
			d(detaching) {
				if_block.d(detaching);
				if (detaching) detach(if_block_anchor);
			}
		};
	}

	// (1196:6) {#each filteredListItems as listItem, i}
	function create_each_block$4(ctx) {
		let if_block_anchor;
		let current;
		let if_block = /*listItem*/ ctx[108] && (/*maxItemsToShowInList*/ ctx[5] <= 0 || /*i*/ ctx[110] < /*maxItemsToShowInList*/ ctx[5]) && create_if_block_2$8(ctx);

		return {
			c() {
				if (if_block) if_block.c();
				if_block_anchor = empty();
			},
			m(target, anchor) {
				if (if_block) if_block.m(target, anchor);
				insert(target, if_block_anchor, anchor);
				current = true;
			},
			p(ctx, dirty) {
				if (/*listItem*/ ctx[108] && (/*maxItemsToShowInList*/ ctx[5] <= 0 || /*i*/ ctx[110] < /*maxItemsToShowInList*/ ctx[5])) {
					if (if_block) {
						if_block.p(ctx, dirty);

						if (dirty[0] & /*filteredListItems, maxItemsToShowInList*/ 134217760) {
							transition_in(if_block, 1);
						}
					} else {
						if_block = create_if_block_2$8(ctx);
						if_block.c();
						transition_in(if_block, 1);
						if_block.m(if_block_anchor.parentNode, if_block_anchor);
					}
				} else if (if_block) {
					group_outros();

					transition_out(if_block, 1, 1, () => {
						if_block = null;
					});

					check_outros();
				}
			},
			i(local) {
				if (current) return;
				transition_in(if_block);
				current = true;
			},
			o(local) {
				transition_out(if_block);
				current = false;
			},
			d(detaching) {
				if (if_block) if_block.d(detaching);
				if (detaching) detach(if_block_anchor);
			}
		};
	}

	// (1221:6) {#if maxItemsToShowInList > 0 && filteredListItems.length > maxItemsToShowInList}
	function create_if_block_1$c(ctx) {
		let div;
		let t0;
		let t1_value = /*filteredListItems*/ ctx[27].length - /*maxItemsToShowInList*/ ctx[5] + "";
		let t1;
		let t2;

		return {
			c() {
				div = element("div");
				t0 = text("...");
				t1 = text(t1_value);
				t2 = text(" results not shown");
				attr(div, "class", "autocomplete-list-item-no-results svelte-lduj97");
			},
			m(target, anchor) {
				insert(target, div, anchor);
				append(div, t0);
				append(div, t1);
				append(div, t2);
			},
			p(ctx, dirty) {
				if (dirty[0] & /*filteredListItems, maxItemsToShowInList*/ 134217760 && t1_value !== (t1_value = /*filteredListItems*/ ctx[27].length - /*maxItemsToShowInList*/ ctx[5] + "")) set_data(t1, t1_value);
			},
			d(detaching) {
				if (detaching) detach(div);
			}
		};
	}

	function create_fragment$o(ctx) {
		let div2;
		let select;
		let t0;
		let div0;
		let t1;
		let input_1;
		let input_1_class_value;
		let input_1_id_value;
		let input_1_autocomplete_value;
		let input_1_readonly_value;
		let t2;
		let t3;
		let div1;
		let current_block_type_index;
		let if_block3;
		let div1_class_value;
		let div2_class_value;
		let current;
		let mounted;
		let dispose;

		function select_block_type(ctx, dirty) {
			if (!/*multiple*/ ctx[6] && /*value*/ ctx[2]) return create_if_block_10;
			if (/*multiple*/ ctx[6] && /*selectedItem*/ ctx[1]) return create_if_block_11;
		}

		let current_block_type = select_block_type(ctx);
		let if_block0 = current_block_type && current_block_type(ctx);
		let if_block1 = /*multiple*/ ctx[6] && /*selectedItem*/ ctx[1] && create_if_block_9$1(ctx);
		let if_block2 = /*clearable*/ ctx[31] && create_if_block_8$1(ctx);
		const if_block_creators = [create_if_block$g, create_if_block_5$1, create_if_block_6$1, create_if_block_7$1];
		const if_blocks = [];

		function select_block_type_1(ctx, dirty) {
			if (/*filteredListItems*/ ctx[27] && /*filteredListItems*/ ctx[27].length > 0) return 0;
			if (/*loading*/ ctx[30] && /*loadingText*/ ctx[12]) return 1;
			if (/*create*/ ctx[7]) return 2;
			if (/*noResultsText*/ ctx[11]) return 3;
			return -1;
		}

		if (~(current_block_type_index = select_block_type_1(ctx))) {
			if_block3 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
		}

		return {
			c() {
				div2 = element("div");
				select = element("select");
				if (if_block0) if_block0.c();
				t0 = space();
				div0 = element("div");
				if (if_block1) if_block1.c();
				t1 = space();
				input_1 = element("input");
				t2 = space();
				if (if_block2) if_block2.c();
				t3 = space();
				div1 = element("div");
				if (if_block3) if_block3.c();
				attr(select, "name", /*selectName*/ ctx[19]);
				attr(select, "id", /*selectId*/ ctx[20]);
				select.multiple = /*multiple*/ ctx[6];
				attr(select, "class", "svelte-lduj97");
				attr(input_1, "type", "text");

				attr(input_1, "class", input_1_class_value = "" + ((/*inputClassName*/ ctx[16]
				? /*inputClassName*/ ctx[16]
				: '') + " input autocomplete-input" + " svelte-lduj97"));

				attr(input_1, "id", input_1_id_value = /*inputId*/ ctx[17] ? /*inputId*/ ctx[17] : '');
				attr(input_1, "autocomplete", input_1_autocomplete_value = /*html5autocomplete*/ ctx[22] ? 'on' : 'some-other-text');
				attr(input_1, "placeholder", /*placeholder*/ ctx[14]);
				attr(input_1, "name", /*name*/ ctx[18]);
				input_1.disabled = /*disabled*/ ctx[25];
				attr(input_1, "title", /*title*/ ctx[21]);
				input_1.readOnly = input_1_readonly_value = /*readonly*/ ctx[23] || /*lock*/ ctx[8] && /*selectedItem*/ ctx[1];
				attr(div0, "class", "input-container svelte-lduj97");

				attr(div1, "class", div1_class_value = "" + ((/*dropdownClassName*/ ctx[24]
				? /*dropdownClassName*/ ctx[24]
				: '') + " autocomplete-list " + (/*showList*/ ctx[32] ? '' : 'hidden') + " is-fullwidth" + " svelte-lduj97"));

				attr(div2, "class", div2_class_value = "" + ((/*className*/ ctx[15] ? /*className*/ ctx[15] : '') + " " + (/*hideArrow*/ ctx[9] || !/*items*/ ctx[0].length
				? 'hide-arrow'
				: '') + " " + (/*multiple*/ ctx[6] ? 'is-multiple' : '') + " autocomplete select is-fullwidth " + /*uniqueId*/ ctx[33] + " svelte-lduj97"));

				toggle_class(div2, "show-clear", /*clearable*/ ctx[31]);
				toggle_class(div2, "is-loading", /*showLoadingIndicator*/ ctx[10] && /*loading*/ ctx[30]);
			},
			m(target, anchor) {
				insert(target, div2, anchor);
				append(div2, select);
				if (if_block0) if_block0.m(select, null);
				append(div2, t0);
				append(div2, div0);
				if (if_block1) if_block1.m(div0, null);
				append(div0, t1);
				append(div0, input_1);
				/*input_1_binding*/ ctx[77](input_1);
				set_input_value(input_1, /*text*/ ctx[3]);
				append(div0, t2);
				if (if_block2) if_block2.m(div0, null);
				append(div2, t3);
				append(div2, div1);

				if (~current_block_type_index) {
					if_blocks[current_block_type_index].m(div1, null);
				}

				/*div1_binding*/ ctx[81](div1);
				current = true;

				if (!mounted) {
					dispose = [
						listen(window, "click", /*onDocumentClick*/ ctx[37]),
						listen(input_1, "input", /*input_1_input_handler*/ ctx[78]),
						listen(input_1, "input", /*onInput*/ ctx[40]),
						listen(input_1, "focus", /*onFocusInternal*/ ctx[43]),
						listen(input_1, "blur", /*onBlurInternal*/ ctx[44]),
						listen(input_1, "keydown", /*onKeyDown*/ ctx[38]),
						listen(input_1, "click", /*onInputClick*/ ctx[42]),
						listen(input_1, "keypress", /*onKeyPress*/ ctx[39])
					];

					mounted = true;
				}
			},
			p(ctx, dirty) {
				if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if (if_block0) if_block0.d(1);
					if_block0 = current_block_type && current_block_type(ctx);

					if (if_block0) {
						if_block0.c();
						if_block0.m(select, null);
					}
				}

				if (!current || dirty[0] & /*selectName*/ 524288) {
					attr(select, "name", /*selectName*/ ctx[19]);
				}

				if (!current || dirty[0] & /*selectId*/ 1048576) {
					attr(select, "id", /*selectId*/ ctx[20]);
				}

				if (!current || dirty[0] & /*multiple*/ 64) {
					select.multiple = /*multiple*/ ctx[6];
				}

				if (/*multiple*/ ctx[6] && /*selectedItem*/ ctx[1]) {
					if (if_block1) {
						if_block1.p(ctx, dirty);

						if (dirty[0] & /*multiple, selectedItem*/ 66) {
							transition_in(if_block1, 1);
						}
					} else {
						if_block1 = create_if_block_9$1(ctx);
						if_block1.c();
						transition_in(if_block1, 1);
						if_block1.m(div0, t1);
					}
				} else if (if_block1) {
					group_outros();

					transition_out(if_block1, 1, 1, () => {
						if_block1 = null;
					});

					check_outros();
				}

				if (!current || dirty[0] & /*inputClassName*/ 65536 && input_1_class_value !== (input_1_class_value = "" + ((/*inputClassName*/ ctx[16]
				? /*inputClassName*/ ctx[16]
				: '') + " input autocomplete-input" + " svelte-lduj97"))) {
					attr(input_1, "class", input_1_class_value);
				}

				if (!current || dirty[0] & /*inputId*/ 131072 && input_1_id_value !== (input_1_id_value = /*inputId*/ ctx[17] ? /*inputId*/ ctx[17] : '')) {
					attr(input_1, "id", input_1_id_value);
				}

				if (!current || dirty[0] & /*html5autocomplete*/ 4194304 && input_1_autocomplete_value !== (input_1_autocomplete_value = /*html5autocomplete*/ ctx[22] ? 'on' : 'some-other-text')) {
					attr(input_1, "autocomplete", input_1_autocomplete_value);
				}

				if (!current || dirty[0] & /*placeholder*/ 16384) {
					attr(input_1, "placeholder", /*placeholder*/ ctx[14]);
				}

				if (!current || dirty[0] & /*name*/ 262144) {
					attr(input_1, "name", /*name*/ ctx[18]);
				}

				if (!current || dirty[0] & /*disabled*/ 33554432) {
					input_1.disabled = /*disabled*/ ctx[25];
				}

				if (!current || dirty[0] & /*title*/ 2097152) {
					attr(input_1, "title", /*title*/ ctx[21]);
				}

				if (!current || dirty[0] & /*readonly, lock, selectedItem*/ 8388866 && input_1_readonly_value !== (input_1_readonly_value = /*readonly*/ ctx[23] || /*lock*/ ctx[8] && /*selectedItem*/ ctx[1])) {
					input_1.readOnly = input_1_readonly_value;
				}

				if (dirty[0] & /*text*/ 8 && input_1.value !== /*text*/ ctx[3]) {
					set_input_value(input_1, /*text*/ ctx[3]);
				}

				if (/*clearable*/ ctx[31]) {
					if (if_block2) {
						if_block2.p(ctx, dirty);
					} else {
						if_block2 = create_if_block_8$1(ctx);
						if_block2.c();
						if_block2.m(div0, null);
					}
				} else if (if_block2) {
					if_block2.d(1);
					if_block2 = null;
				}

				let previous_block_index = current_block_type_index;
				current_block_type_index = select_block_type_1(ctx);

				if (current_block_type_index === previous_block_index) {
					if (~current_block_type_index) {
						if_blocks[current_block_type_index].p(ctx, dirty);
					}
				} else {
					if (if_block3) {
						group_outros();

						transition_out(if_blocks[previous_block_index], 1, 1, () => {
							if_blocks[previous_block_index] = null;
						});

						check_outros();
					}

					if (~current_block_type_index) {
						if_block3 = if_blocks[current_block_type_index];

						if (!if_block3) {
							if_block3 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
							if_block3.c();
						} else {
							if_block3.p(ctx, dirty);
						}

						transition_in(if_block3, 1);
						if_block3.m(div1, null);
					} else {
						if_block3 = null;
					}
				}

				if (!current || dirty[0] & /*dropdownClassName*/ 16777216 | dirty[1] & /*showList*/ 2 && div1_class_value !== (div1_class_value = "" + ((/*dropdownClassName*/ ctx[24]
				? /*dropdownClassName*/ ctx[24]
				: '') + " autocomplete-list " + (/*showList*/ ctx[32] ? '' : 'hidden') + " is-fullwidth" + " svelte-lduj97"))) {
					attr(div1, "class", div1_class_value);
				}

				if (!current || dirty[0] & /*className, hideArrow, items, multiple*/ 33345 && div2_class_value !== (div2_class_value = "" + ((/*className*/ ctx[15] ? /*className*/ ctx[15] : '') + " " + (/*hideArrow*/ ctx[9] || !/*items*/ ctx[0].length
				? 'hide-arrow'
				: '') + " " + (/*multiple*/ ctx[6] ? 'is-multiple' : '') + " autocomplete select is-fullwidth " + /*uniqueId*/ ctx[33] + " svelte-lduj97"))) {
					attr(div2, "class", div2_class_value);
				}

				if (dirty[0] & /*className, hideArrow, items, multiple*/ 33345 | dirty[1] & /*clearable*/ 1) {
					toggle_class(div2, "show-clear", /*clearable*/ ctx[31]);
				}

				if (dirty[0] & /*className, hideArrow, items, multiple, showLoadingIndicator, loading*/ 1073776193) {
					toggle_class(div2, "is-loading", /*showLoadingIndicator*/ ctx[10] && /*loading*/ ctx[30]);
				}
			},
			i(local) {
				if (current) return;
				transition_in(if_block1);
				transition_in(if_block3);
				current = true;
			},
			o(local) {
				transition_out(if_block1);
				transition_out(if_block3);
				current = false;
			},
			d(detaching) {
				if (detaching) detach(div2);

				if (if_block0) {
					if_block0.d();
				}

				if (if_block1) if_block1.d();
				/*input_1_binding*/ ctx[77](null);
				if (if_block2) if_block2.d();

				if (~current_block_type_index) {
					if_blocks[current_block_type_index].d();
				}

				/*div1_binding*/ ctx[81](null);
				mounted = false;
				run_all(dispose);
			}
		};
	}

	function safeStringFunction(theFunction, argument) {
		if (typeof theFunction !== "function") {
			console.error("Not a function: " + theFunction + ", argument: " + argument);
		}

		let originalResult;

		try {
			originalResult = theFunction(argument);
		} catch(error) {
			console.warn("Error executing Autocomplete function on value: " + argument + " function: " + theFunction);
		}

		let result = originalResult;

		if (result === undefined || result === null) {
			result = "";
		}

		if (typeof result !== "string") {
			result = result.toString();
		}

		return result;
	}

	function numberOfMatches(listItem, searchWords) {
		if (!listItem) {
			return 0;
		}

		const itemKeywords = listItem.keywords;
		let matches = 0;

		searchWords.forEach(searchWord => {
			if (itemKeywords.includes(searchWord)) {
				matches++;
			}
		});

		return matches;
	}

	function defaultItemSortFunction(obj1, obj2, searchWords) {
		return numberOfMatches(obj2, searchWords) - numberOfMatches(obj1, searchWords);
	}

	function removeAccents(str) {
		return str.normalize("NFD").replace(/[\u0300-\u036f]/g, "");
	}

	function instance$o($$self, $$props, $$invalidate) {
		let showList;
		let clearable;
		let { $$slots: slots = {}, $$scope } = $$props;
		let { items = [] } = $$props;
		let { searchFunction = false } = $$props;
		let { labelFieldName = undefined } = $$props;
		let { keywordsFieldName = labelFieldName } = $$props;
		let { valueFieldName = undefined } = $$props;

		let { labelFunction = function (item) {
			if (item === undefined || item === null) {
				return "";
			}

			return labelFieldName ? item[labelFieldName] : item;
		} } = $$props;

		let { keywordsFunction = function (item) {
			if (item === undefined || item === null) {
				return "";
			}

			return keywordsFieldName
			? item[keywordsFieldName]
			: labelFunction(item);
		} } = $$props;

		let { valueFunction = function (item, forceSingle = false) {
			if (item === undefined || item === null) {
				return item;
			}

			if (!multiple || forceSingle) {
				return valueFieldName ? item[valueFieldName] : item;
			} else {
				return item.map(i => valueFieldName ? i[valueFieldName] : i);
			}
		} } = $$props;

		let { keywordsCleanFunction = function (keywords) {
			return keywords;
		} } = $$props;

		let { textCleanFunction = function (userEnteredText) {
			return userEnteredText;
		} } = $$props;

		let { beforeChange = function (oldSelectedItem, newSelectedItem) {
			return true;
		} } = $$props;

		let { onChange = function (newSelectedItem) {
			
		} } = $$props;

		let { onFocus = function () {
			
		} } = $$props;

		let { onBlur = function () {
			
		} } = $$props;

		let { onCreate = function (text) {
			if (debug) {
				console.log("onCreate: " + text);
			}
		} } = $$props;

		let { selectFirstIfEmpty = false } = $$props;
		let { minCharactersToSearch = 1 } = $$props;
		let { maxItemsToShowInList = 0 } = $$props;
		let { multiple = false } = $$props;
		let { create = false } = $$props;
		let { ignoreAccents = true } = $$props;
		let { matchAllKeywords = true } = $$props;
		let { sortByMatchedKeywords = false } = $$props;
		let { itemFilterFunction = undefined } = $$props;
		let { itemSortFunction = undefined } = $$props;
		let { lock = false } = $$props;
		let { delay = 0 } = $$props;
		let { localFiltering = true } = $$props;
		let { hideArrow = false } = $$props;
		let { showClear = false } = $$props;
		let { showLoadingIndicator = false } = $$props;
		let { noResultsText = "No results found" } = $$props;
		let { loadingText = "Loading results..." } = $$props;
		let { createText = "Not found, add anyway?" } = $$props;
		let { placeholder = undefined } = $$props;
		let { className = undefined } = $$props;
		let { inputClassName = undefined } = $$props;
		let { inputId = undefined } = $$props;
		let { name = undefined } = $$props;
		let { selectName = undefined } = $$props;
		let { selectId = undefined } = $$props;
		let { title = undefined } = $$props;
		let { html5autocomplete = undefined } = $$props;
		let { readonly = undefined } = $$props;
		let { dropdownClassName = undefined } = $$props;
		let { disabled = false } = $$props;
		let { debug = false } = $$props;
		let { selectedItem = multiple ? [] : undefined } = $$props;
		let { value = undefined } = $$props;
		let { highlightedItem = undefined } = $$props;

		// --- Internal State ----
		const uniqueId = "sautocomplete-" + Math.floor(Math.random() * 1000);

		// HTML elements
		let input;

		let list;

		// UI state
		let opened = false;

		let loading = false;
		let highlightIndex = -1;
		let { text } = $$props;
		let filteredTextLength = 0;

		// view model
		let filteredListItems;

		let listItems = [];

		// requests/responses counters
		let lastRequestId = 0;

		let lastResponseId = 0;

		// other state
		let inputDelayTimeout;

		function safeLabelFunction(item) {
			// console.log("labelFunction: " + labelFunction);
			// console.log("safeLabelFunction, item: " + item);
			return safeStringFunction(labelFunction, item);
		}

		function safeKeywordsFunction(item) {
			// console.log("safeKeywordsFunction");
			const keywords = safeStringFunction(keywordsFunction, item);

			let result = safeStringFunction(keywordsCleanFunction, keywords);
			result = result.toLowerCase().trim();

			if (ignoreAccents) {
				result = removeAccents(result);
			}

			if (debug) {
				console.log("Extracted keywords: '" + result + "' from item: " + JSON.stringify(item));
			}

			return result;
		}

		function prepareListItems() {
			let timerId;

			if (debug) {
				timerId = `Autocomplete prepare list ${inputId ? `(id: ${inputId})` : ""}`;
				console.time(timerId);
				console.log("Prepare items to search");
				console.log("items: " + JSON.stringify(items));
			}

			if (!Array.isArray(items)) {
				console.warn("Autocomplete items / search function did not return array but", items);
				$$invalidate(0, items = []);
			}

			const length = items ? items.length : 0;
			listItems = new Array(length);

			if (length > 0) {
				items.forEach((item, i) => {
					const listItem = getListItem(item);

					if (listItem == undefined) {
						console.log("Undefined item for: ", item);
					}

					listItems[i] = listItem;
				});
			}

			if (debug) {
				console.log(listItems.length + " items to search");
				console.timeEnd(timerId);
			}
		}

		function getListItem(item) {
			return {
				// keywords representation of the item
				keywords: safeKeywordsFunction(item),
				// item label
				label: safeLabelFunction(item),
				// store reference to the origial item
				item
			};
		}

		function onSelectedItemChanged() {
			$$invalidate(2, value = valueFunction(selectedItem));
			$$invalidate(3, text = !multiple ? safeLabelFunction(selectedItem) : "");
			$$invalidate(27, filteredListItems = listItems);
			onChange(selectedItem);
		}

		function prepareUserEnteredText(userEnteredText) {
			if (userEnteredText === undefined || userEnteredText === null) {
				return "";
			}

			const textFiltered = userEnteredText.replace(/[&/\\#,+()$~%.'":*?<>{}]/g, " ").trim();
			$$invalidate(74, filteredTextLength = textFiltered.length);

			if (minCharactersToSearch > 1) {
				if (filteredTextLength < minCharactersToSearch) {
					return "";
				}
			}

			const cleanUserEnteredText = textCleanFunction(textFiltered);
			const textFilteredLowerCase = cleanUserEnteredText.toLowerCase().trim();

			if (debug) {
				console.log("Change user entered text '" + userEnteredText + "' into '" + textFilteredLowerCase + "'");
			}

			return textFilteredLowerCase;
		}

		async function search() {
			let timerId;

			if (debug) {
				timerId = `Autocomplete search ${inputId ? `(id: ${inputId})` : ""})`;
				console.time(timerId);
				console.log("Searching user entered text: '" + text + "'");
			}

			const textFiltered = prepareUserEnteredText(text);

			if (textFiltered === "") {
				if (searchFunction) {
					// we will need to rerun the search
					$$invalidate(0, items = []);

					if (debug) {
						console.log("User entered text is empty clear list of items");
					}
				} else {
					$$invalidate(27, filteredListItems = listItems);

					if (debug) {
						console.log("User entered text is empty set the list of items to all items");
					}
				}

				closeIfMinCharsToSearchReached();

				if (debug) {
					console.timeEnd(timerId);
				}

				return;
			}

			if (!searchFunction) {
				processListItems(textFiltered);
			} else // external search which provides items
			{
				lastRequestId = lastRequestId + 1;
				const currentRequestId = lastRequestId;
				$$invalidate(30, loading = true);

				// searchFunction is a generator
				if (searchFunction.constructor.name === "AsyncGeneratorFunction") {
					for await (const chunk of searchFunction(textFiltered)) {
						// a chunk of an old response: throw it away
						if (currentRequestId < lastResponseId) {
							return false;
						}

						// a chunk for a new response: reset the item list
						if (currentRequestId > lastResponseId) {
							$$invalidate(0, items = []);
						}

						lastResponseId = currentRequestId;
						$$invalidate(0, items = [...items, ...chunk]);
						processListItems(textFiltered);
					}

					// there was nothing in the chunk
					if (lastResponseId < currentRequestId) {
						lastResponseId = currentRequestId;
						$$invalidate(0, items = []);
						processListItems(textFiltered);
					}
				} else // searchFunction is a regular function
				{
					let result = await searchFunction(textFiltered);

					// If a response to a newer request has been received
					// while responses to this request were being loaded,
					// then we can just throw away this outdated results.
					if (currentRequestId < lastResponseId) {
						return false;
					}

					lastResponseId = currentRequestId;
					$$invalidate(0, items = result);
					processListItems(textFiltered);
				}

				$$invalidate(30, loading = false);
			}

			if (debug) {
				console.timeEnd(timerId);
				console.log("Search found " + filteredListItems.length + " items");
			}
		}

		function defaultItemFilterFunction(listItem, searchWords) {
			var matches = numberOfMatches(listItem, searchWords);

			if (matchAllKeywords) {
				return matches >= searchWords.length;
			} else {
				return matches > 0;
			}
		}

		function processListItems(textFiltered) {
			// cleans, filters, orders, and highlights the list items
			prepareListItems();

			const textFilteredWithoutAccents = ignoreAccents
			? removeAccents(textFiltered)
			: textFiltered;

			const searchWords = textFilteredWithoutAccents.split(/\s+/g);

			// local search
			let tempfilteredListItems;

			if (localFiltering) {
				if (itemFilterFunction) {
					tempfilteredListItems = listItems.filter(item => itemFilterFunction(item.item, searchWords));
				} else {
					tempfilteredListItems = listItems.filter(item => defaultItemFilterFunction(item, searchWords));
				}

				if (itemSortFunction) {
					tempfilteredListItems = tempfilteredListItems.sort((item1, item2) => itemSortFunction(item1.item, item2.item, searchWords));
				} else {
					if (sortByMatchedKeywords) {
						tempfilteredListItems = tempfilteredListItems.sort((item1, item2) => defaultItemSortFunction(item1, item2, searchWords));
					}
				}
			} else {
				tempfilteredListItems = listItems;
			}

			const hlfilter = highlightFilter(searchWords, "label");
			const filteredListItemsHighlighted = tempfilteredListItems.map(hlfilter);
			$$invalidate(27, filteredListItems = filteredListItemsHighlighted);
			closeIfMinCharsToSearchReached();
			return true;
		}

		// $: text, search();
		function selectListItem(listItem) {
			if (debug) {
				console.log("selectListItem", listItem);
			}

			if ("undefined" === typeof listItem && create) {
				// allow undefined items if create is enabled
				const createdItem = onCreate(text);

				if ("undefined" !== typeof createdItem) {
					prepareListItems();
					$$invalidate(27, filteredListItems = listItems);
					const index = findItemIndex(createdItem, filteredListItems);

					if (index >= 0) {
						$$invalidate(26, highlightIndex = index);
						listItem = filteredListItems[highlightIndex];
					}
				}
			}

			if ("undefined" === typeof listItem) {
				if (debug) {
					console.log(`listItem is undefined. Can not select.`);
				}

				return false;
			}

			const newSelectedItem = listItem.item;

			if (beforeChange(selectedItem, newSelectedItem)) {
				// simple selection
				if (!multiple) {
					$$invalidate(1, selectedItem = undefined); // triggers change even if the the same item is selected
					$$invalidate(1, selectedItem = newSelectedItem);
				} else // first selection of multiple ones
				if (!selectedItem) {
					$$invalidate(1, selectedItem = [newSelectedItem]);
				} else // selecting something already selected => unselect it
				if (selectedItem.includes(newSelectedItem)) {
					$$invalidate(1, selectedItem = selectedItem.filter(i => i !== newSelectedItem));
				} else // adds the element to the selection
				{
					$$invalidate(1, selectedItem = [...selectedItem, newSelectedItem]);
				}
			}

			return true;
		}

		function selectItem() {
			if (debug) {
				console.log("selectItem", highlightIndex);
			}

			const listItem = filteredListItems[highlightIndex];

			if (selectListItem(listItem)) {
				close();

				if (multiple) {
					input.focus();
				}
			}
		}

		function up() {
			if (debug) {
				console.log("up");
			}

			open();

			if (highlightIndex > 0) {
				$$invalidate(26, highlightIndex--, highlightIndex);
			}

			highlight();
		}

		function down() {
			if (debug) {
				console.log("down");
			}

			open();

			if (highlightIndex < filteredListItems.length - 1) {
				$$invalidate(26, highlightIndex++, highlightIndex);
			}

			highlight();
		}

		function highlight() {
			if (debug) {
				console.log("highlight");
			}

			const query = ".selected";

			if (debug) {
				console.log("Seaching DOM element: " + query + " in " + list);
			}

			const el = list && list.querySelector(query);

			if (el) {
				if (typeof el.scrollIntoViewIfNeeded === "function") {
					if (debug) {
						console.log("Scrolling selected item into view");
					}

					el.scrollIntoViewIfNeeded();
				} else {
					if (debug) {
						console.warn("Could not scroll selected item into view, scrollIntoViewIfNeeded not supported");
					}
				}
			} else {
				if (debug) {
					console.warn("Selected item not found to scroll into view");
				}
			}
		}

		function onListItemClick(listItem) {
			if (debug) {
				console.log("onListItemClick");
			}

			if (selectListItem(listItem)) {
				close();

				if (multiple) {
					input.focus();
				}
			}
		}

		function onDocumentClick(e) {
			if (debug) {
				console.log("onDocumentClick: " + JSON.stringify(e.composedPath()));
			}

			if (e.composedPath().some(path => path.classList && path.classList.contains(uniqueId))) {
				if (debug) {
					console.log("onDocumentClick inside");
				}

				// resetListToAllItemsAndOpen();
				highlight();
			} else {
				if (debug) {
					console.log("onDocumentClick outside");
				}

				close();
			}
		}

		function onKeyDown(e) {
			if (debug) {
				console.log("onKeyDown");
			}

			let key = e.key;
			if (key === "Tab" && e.shiftKey) key = "ShiftTab";

			const fnmap = {
				Tab: opened ? down.bind(this) : null,
				ShiftTab: opened ? up.bind(this) : null,
				ArrowDown: down.bind(this),
				ArrowUp: up.bind(this),
				Escape: onEsc.bind(this),
				Backspace: multiple && selectedItem && selectedItem.length && !text
				? onBackspace.bind(this)
				: null
			};

			const fn = fnmap[key];

			if (typeof fn === "function") {
				fn(e);
			}
		}

		function onKeyPress(e) {
			if (debug) {
				console.log("onKeyPress");
			}

			if (e.key === "Enter" && opened) {
				e.preventDefault();
				onEnter();
			}
		}

		function onEnter() {
			selectItem();
		}

		function onInput(e) {
			if (debug) {
				console.log("onInput");
			}

			$$invalidate(3, text = e.target.value);

			if (inputDelayTimeout) {
				clearTimeout(inputDelayTimeout);
			}

			if (delay) {
				inputDelayTimeout = setTimeout(processInput, delay);
			} else {
				processInput();
			}
		}

		function unselectItem(tag) {
			if (debug) {
				console.log("unselectItem", tag);
			}

			$$invalidate(1, selectedItem = selectedItem.filter(i => i !== tag));
			input.focus();
		}

		function processInput() {
			if (search()) {
				$$invalidate(26, highlightIndex = 0);
				open();
			}
		}

		function onInputClick() {
			if (debug) {
				console.log("onInputClick");
			}

			resetListToAllItemsAndOpen();
		}

		function onEsc(e) {
			if (debug) {
				console.log("onEsc");
			}

			//if (text) return clear();
			e.stopPropagation();

			if (opened) {
				input.focus();
				close();
			}
		}

		function onBackspace(e) {
			if (debug) {
				console.log("onBackspace");
			}

			unselectItem(selectedItem[selectedItem.length - 1]);
		}

		function onFocusInternal() {
			if (debug) {
				console.log("onFocus");
			}

			onFocus();
			resetListToAllItemsAndOpen();
		}

		function onBlurInternal() {
			if (debug) {
				console.log("onBlur");
			}

			onBlur();
		}

		function resetListToAllItemsAndOpen() {
			if (debug) {
				console.log("resetListToAllItemsAndOpen");
			}

			if (!text) {
				$$invalidate(27, filteredListItems = listItems);
			} else // When an async component is initialized, the item list
			// must be loaded when the input is focused.
			if (!listItems.length && selectedItem && searchFunction) {
				search();
			}

			open();

			// find selected item
			if (selectedItem) {
				if (debug) {
					console.log("Searching currently selected item: " + JSON.stringify(selectedItem));
				}

				const index = findItemIndex(selectedItem, filteredListItems);

				if (index >= 0) {
					$$invalidate(26, highlightIndex = index);
					highlight();
				}
			}
		}

		function findItemIndex(item, items) {
			if (debug) {
				console.log("Finding index for item", item);
			}

			let index = -1;

			for (let i = 0; i < items.length; i++) {
				const listItem = items[i];

				if ("undefined" === typeof listItem) {
					if (debug) {
						console.log(`listItem ${i} is undefined. Skipping.`);
					}

					continue;
				}

				if (debug) {
					console.log("Item " + i + ": " + JSON.stringify(listItem));
				}

				if (item == listItem.item) {
					index = i;
					break;
				}
			}

			if (debug) {
				if (index >= 0) {
					console.log("Found index for item: " + index);
				} else {
					console.warn("Not found index for item: " + item);
				}
			}

			return index;
		}

		function open() {
			if (debug) {
				console.log("open");
			}

			// check if the search text has more than the min chars required
			if (isMinCharsToSearchReached()) {
				return;
			}

			$$invalidate(73, opened = true);
		}

		function close() {
			if (debug) {
				console.log("close");
			}

			$$invalidate(73, opened = false);
			$$invalidate(30, loading = false);

			if (!text && selectFirstIfEmpty) {
				$$invalidate(26, highlightIndex = 0);
				selectItem();
			}
		}

		function isMinCharsToSearchReached() {
			return minCharactersToSearch > 1 && filteredTextLength < minCharactersToSearch;
		}

		function closeIfMinCharsToSearchReached() {
			if (isMinCharsToSearchReached()) {
				close();
			}
		}

		function clear() {
			if (debug) {
				console.log("clear");
			}

			$$invalidate(3, text = "");
			$$invalidate(1, selectedItem = multiple ? [] : undefined);

			setTimeout(() => {
				input.focus();
				close();
			});
		}

		function highlightFilter(keywords, field) {
			return item => {
				let label = item[field];
				const newItem = Object.assign({ highlighted: undefined }, item);
				newItem.highlighted = label;
				const labelLowercase = label.toLowerCase();

				const labelLowercaseNoAc = ignoreAccents
				? removeAccents(labelLowercase)
				: labelLowercase;

				if (keywords && keywords.length) {
					const positions = [];

					for (let i = 0; i < keywords.length; i++) {
						let keyword = keywords[i];

						if (ignoreAccents) {
							keyword = removeAccents(keyword);
						}

						const keywordLen = keyword.length;
						let pos1 = 0;

						do {
							pos1 = labelLowercaseNoAc.indexOf(keyword, pos1);

							if (pos1 >= 0) {
								let pos2 = pos1 + keywordLen;
								positions.push([pos1, pos2]);
								pos1 = pos2;
							}
						} while (pos1 !== -1);
					}

					if (positions.length > 0) {
						const keywordPatterns = new Set();

						for (let i = 0; i < positions.length; i++) {
							const pair = positions[i];
							const pos1 = pair[0];
							const pos2 = pair[1];
							const keywordPattern = labelLowercase.substring(pos1, pos2);
							keywordPatterns.add(keywordPattern);
						}

						for (let keywordPattern of keywordPatterns) {
							// FIXME pst: workarond for wrong replacement <b> tags
							if (keywordPattern === "b") {
								continue;
							}

							const reg = new RegExp("(" + keywordPattern + ")", "ig");
							const newHighlighted = newItem.highlighted.replace(reg, "<b>$1</b>");
							newItem.highlighted = newHighlighted;
						}
					}
				}

				return newItem;
			};
		}

		function isConfirmed(listItem) {
			if (!selectedItem) {
				return false;
			}

			if (multiple) {
				return selectedItem.includes(listItem);
			} else {
				return listItem == selectedItem;
			}
		}

		function input_1_binding($$value) {
			binding_callbacks[$$value ? 'unshift' : 'push'](() => {
				input = $$value;
				$$invalidate(28, input);
			});
		}

		function input_1_input_handler() {
			text = this.value;
			$$invalidate(3, text);
		}

		const click_handler = listItem => onListItemClick(listItem);

		const pointerenter_handler = i => {
			$$invalidate(26, highlightIndex = i);
		};

		function div1_binding($$value) {
			binding_callbacks[$$value ? 'unshift' : 'push'](() => {
				list = $$value;
				$$invalidate(29, list);
			});
		}

		$$self.$$set = $$props => {
			if ('items' in $$props) $$invalidate(0, items = $$props.items);
			if ('searchFunction' in $$props) $$invalidate(48, searchFunction = $$props.searchFunction);
			if ('labelFieldName' in $$props) $$invalidate(49, labelFieldName = $$props.labelFieldName);
			if ('keywordsFieldName' in $$props) $$invalidate(50, keywordsFieldName = $$props.keywordsFieldName);
			if ('valueFieldName' in $$props) $$invalidate(51, valueFieldName = $$props.valueFieldName);
			if ('labelFunction' in $$props) $$invalidate(52, labelFunction = $$props.labelFunction);
			if ('keywordsFunction' in $$props) $$invalidate(53, keywordsFunction = $$props.keywordsFunction);
			if ('valueFunction' in $$props) $$invalidate(4, valueFunction = $$props.valueFunction);
			if ('keywordsCleanFunction' in $$props) $$invalidate(54, keywordsCleanFunction = $$props.keywordsCleanFunction);
			if ('textCleanFunction' in $$props) $$invalidate(55, textCleanFunction = $$props.textCleanFunction);
			if ('beforeChange' in $$props) $$invalidate(56, beforeChange = $$props.beforeChange);
			if ('onChange' in $$props) $$invalidate(57, onChange = $$props.onChange);
			if ('onFocus' in $$props) $$invalidate(58, onFocus = $$props.onFocus);
			if ('onBlur' in $$props) $$invalidate(59, onBlur = $$props.onBlur);
			if ('onCreate' in $$props) $$invalidate(60, onCreate = $$props.onCreate);
			if ('selectFirstIfEmpty' in $$props) $$invalidate(61, selectFirstIfEmpty = $$props.selectFirstIfEmpty);
			if ('minCharactersToSearch' in $$props) $$invalidate(62, minCharactersToSearch = $$props.minCharactersToSearch);
			if ('maxItemsToShowInList' in $$props) $$invalidate(5, maxItemsToShowInList = $$props.maxItemsToShowInList);
			if ('multiple' in $$props) $$invalidate(6, multiple = $$props.multiple);
			if ('create' in $$props) $$invalidate(7, create = $$props.create);
			if ('ignoreAccents' in $$props) $$invalidate(63, ignoreAccents = $$props.ignoreAccents);
			if ('matchAllKeywords' in $$props) $$invalidate(64, matchAllKeywords = $$props.matchAllKeywords);
			if ('sortByMatchedKeywords' in $$props) $$invalidate(65, sortByMatchedKeywords = $$props.sortByMatchedKeywords);
			if ('itemFilterFunction' in $$props) $$invalidate(66, itemFilterFunction = $$props.itemFilterFunction);
			if ('itemSortFunction' in $$props) $$invalidate(67, itemSortFunction = $$props.itemSortFunction);
			if ('lock' in $$props) $$invalidate(8, lock = $$props.lock);
			if ('delay' in $$props) $$invalidate(68, delay = $$props.delay);
			if ('localFiltering' in $$props) $$invalidate(69, localFiltering = $$props.localFiltering);
			if ('hideArrow' in $$props) $$invalidate(9, hideArrow = $$props.hideArrow);
			if ('showClear' in $$props) $$invalidate(70, showClear = $$props.showClear);
			if ('showLoadingIndicator' in $$props) $$invalidate(10, showLoadingIndicator = $$props.showLoadingIndicator);
			if ('noResultsText' in $$props) $$invalidate(11, noResultsText = $$props.noResultsText);
			if ('loadingText' in $$props) $$invalidate(12, loadingText = $$props.loadingText);
			if ('createText' in $$props) $$invalidate(13, createText = $$props.createText);
			if ('placeholder' in $$props) $$invalidate(14, placeholder = $$props.placeholder);
			if ('className' in $$props) $$invalidate(15, className = $$props.className);
			if ('inputClassName' in $$props) $$invalidate(16, inputClassName = $$props.inputClassName);
			if ('inputId' in $$props) $$invalidate(17, inputId = $$props.inputId);
			if ('name' in $$props) $$invalidate(18, name = $$props.name);
			if ('selectName' in $$props) $$invalidate(19, selectName = $$props.selectName);
			if ('selectId' in $$props) $$invalidate(20, selectId = $$props.selectId);
			if ('title' in $$props) $$invalidate(21, title = $$props.title);
			if ('html5autocomplete' in $$props) $$invalidate(22, html5autocomplete = $$props.html5autocomplete);
			if ('readonly' in $$props) $$invalidate(23, readonly = $$props.readonly);
			if ('dropdownClassName' in $$props) $$invalidate(24, dropdownClassName = $$props.dropdownClassName);
			if ('disabled' in $$props) $$invalidate(25, disabled = $$props.disabled);
			if ('debug' in $$props) $$invalidate(71, debug = $$props.debug);
			if ('selectedItem' in $$props) $$invalidate(1, selectedItem = $$props.selectedItem);
			if ('value' in $$props) $$invalidate(2, value = $$props.value);
			if ('highlightedItem' in $$props) $$invalidate(47, highlightedItem = $$props.highlightedItem);
			if ('text' in $$props) $$invalidate(3, text = $$props.text);
			if ('$$scope' in $$props) $$invalidate(75, $$scope = $$props.$$scope);
		};

		$$self.$$.update = () => {
			if ($$self.$$.dirty[0] & /*items*/ 1) {
				// -- Reactivity --
				(prepareListItems());
			}

			if ($$self.$$.dirty[0] & /*selectedItem*/ 2) {
				(onSelectedItemChanged());
			}

			if ($$self.$$.dirty[0] & /*filteredListItems, highlightIndex*/ 201326592) {
				$$invalidate(47, highlightedItem = filteredListItems && highlightIndex && highlightIndex >= 0 && highlightIndex < filteredListItems.length
				? filteredListItems[highlightIndex].item
				: null);
			}

			if ($$self.$$.dirty[0] & /*items*/ 1 | $$self.$$.dirty[2] & /*opened, filteredTextLength*/ 6144) {
				$$invalidate(32, showList = opened && (items && items.length > 0 || filteredTextLength > 0));
			}

			if ($$self.$$.dirty[0] & /*lock, multiple, selectedItem*/ 322 | $$self.$$.dirty[2] & /*showClear*/ 256) {
				$$invalidate(31, clearable = showClear || (lock || multiple) && selectedItem);
			}
		};

		return [
			items,
			selectedItem,
			value,
			text,
			valueFunction,
			maxItemsToShowInList,
			multiple,
			create,
			lock,
			hideArrow,
			showLoadingIndicator,
			noResultsText,
			loadingText,
			createText,
			placeholder,
			className,
			inputClassName,
			inputId,
			name,
			selectName,
			selectId,
			title,
			html5autocomplete,
			readonly,
			dropdownClassName,
			disabled,
			highlightIndex,
			filteredListItems,
			input,
			list,
			loading,
			clearable,
			showList,
			uniqueId,
			safeLabelFunction,
			selectItem,
			onListItemClick,
			onDocumentClick,
			onKeyDown,
			onKeyPress,
			onInput,
			unselectItem,
			onInputClick,
			onFocusInternal,
			onBlurInternal,
			clear,
			isConfirmed,
			highlightedItem,
			searchFunction,
			labelFieldName,
			keywordsFieldName,
			valueFieldName,
			labelFunction,
			keywordsFunction,
			keywordsCleanFunction,
			textCleanFunction,
			beforeChange,
			onChange,
			onFocus,
			onBlur,
			onCreate,
			selectFirstIfEmpty,
			minCharactersToSearch,
			ignoreAccents,
			matchAllKeywords,
			sortByMatchedKeywords,
			itemFilterFunction,
			itemSortFunction,
			delay,
			localFiltering,
			showClear,
			debug,
			highlightFilter,
			opened,
			filteredTextLength,
			$$scope,
			slots,
			input_1_binding,
			input_1_input_handler,
			click_handler,
			pointerenter_handler,
			div1_binding
		];
	}

	class SimpleAutocomplete extends SvelteComponent {
		constructor(options) {
			super();

			init(
				this,
				options,
				instance$o,
				create_fragment$o,
				safe_not_equal,
				{
					items: 0,
					searchFunction: 48,
					labelFieldName: 49,
					keywordsFieldName: 50,
					valueFieldName: 51,
					labelFunction: 52,
					keywordsFunction: 53,
					valueFunction: 4,
					keywordsCleanFunction: 54,
					textCleanFunction: 55,
					beforeChange: 56,
					onChange: 57,
					onFocus: 58,
					onBlur: 59,
					onCreate: 60,
					selectFirstIfEmpty: 61,
					minCharactersToSearch: 62,
					maxItemsToShowInList: 5,
					multiple: 6,
					create: 7,
					ignoreAccents: 63,
					matchAllKeywords: 64,
					sortByMatchedKeywords: 65,
					itemFilterFunction: 66,
					itemSortFunction: 67,
					lock: 8,
					delay: 68,
					localFiltering: 69,
					hideArrow: 9,
					showClear: 70,
					showLoadingIndicator: 10,
					noResultsText: 11,
					loadingText: 12,
					createText: 13,
					placeholder: 14,
					className: 15,
					inputClassName: 16,
					inputId: 17,
					name: 18,
					selectName: 19,
					selectId: 20,
					title: 21,
					html5autocomplete: 22,
					readonly: 23,
					dropdownClassName: 24,
					disabled: 25,
					debug: 71,
					selectedItem: 1,
					value: 2,
					highlightedItem: 47,
					text: 3,
					highlightFilter: 72
				},
				null,
				[-1, -1, -1, -1]
			);
		}

		get highlightFilter() {
			return this.$$.ctx[72];
		}
	}

	/* src/elements/form/ui.textfield.svelte generated by Svelte v3.44.3 */

	function create_if_block_4$7(ctx) {
		let span;
		let i;
		let i_class_value;

		return {
			c() {
				span = element("span");
				i = element("i");
				attr(i, "class", i_class_value = "fas fa-" + /*icon*/ ctx[4]);
				attr(span, "class", "icon is-small is-left");
			},
			m(target, anchor) {
				insert(target, span, anchor);
				append(span, i);
			},
			p(ctx, dirty) {
				if (dirty & /*icon*/ 16 && i_class_value !== (i_class_value = "fas fa-" + /*icon*/ ctx[4])) {
					attr(i, "class", i_class_value);
				}
			},
			d(detaching) {
				if (detaching) detach(span);
			}
		};
	}

	// (64:4) {#if validated === true }
	function create_if_block_1$b(ctx) {
		let span;

		function select_block_type(ctx, dirty) {
			if (/*valid*/ ctx[8] === true) return create_if_block_2$7;
			if (/*valid*/ ctx[8] === false) return create_if_block_3$7;
		}

		let current_block_type = select_block_type(ctx);
		let if_block = current_block_type && current_block_type(ctx);

		return {
			c() {
				span = element("span");
				if (if_block) if_block.c();
				attr(span, "class", "icon is-small is-right");
			},
			m(target, anchor) {
				insert(target, span, anchor);
				if (if_block) if_block.m(span, null);
			},
			p(ctx, dirty) {
				if (current_block_type !== (current_block_type = select_block_type(ctx))) {
					if (if_block) if_block.d(1);
					if_block = current_block_type && current_block_type(ctx);

					if (if_block) {
						if_block.c();
						if_block.m(span, null);
					}
				}
			},
			d(detaching) {
				if (detaching) detach(span);

				if (if_block) {
					if_block.d();
				}
			}
		};
	}

	// (68:35) 
	function create_if_block_3$7(ctx) {
		let i;

		return {
			c() {
				i = element("i");
				attr(i, "class", "fas fa-exclamation-triangle");
			},
			m(target, anchor) {
				insert(target, i, anchor);
			},
			d(detaching) {
				if (detaching) detach(i);
			}
		};
	}

	// (66:6) {#if valid === true }
	function create_if_block_2$7(ctx) {
		let i;

		return {
			c() {
				i = element("i");
				attr(i, "class", "fas fa-check");
			},
			m(target, anchor) {
				insert(target, i, anchor);
			},
			d(detaching) {
				if (detaching) detach(i);
			}
		};
	}

	// (77:4) {:else}
	function create_else_block$c(ctx) {
		let t;

		return {
			c() {
				t = text("Â ");
			},
			m(target, anchor) {
				insert(target, t, anchor);
			},
			p: noop,
			d(detaching) {
				if (detaching) detach(t);
			}
		};
	}

	// (75:4) {#if !(validated && valid) && (inputStarted) }
	function create_if_block$f(ctx) {
		let t;

		return {
			c() {
				t = text(/*helper*/ ctx[12]);
			},
			m(target, anchor) {
				insert(target, t, anchor);
			},
			p(ctx, dirty) {
				if (dirty & /*helper*/ 4096) set_data(t, /*helper*/ ctx[12]);
			},
			d(detaching) {
				if (detaching) detach(t);
			}
		};
	}

	function create_fragment$n(ctx) {
		let div;
		let input;
		let input_id_value;
		let input_class_value;
		let input_aria_controls_value;
		let input_aria_describedby_value;
		let t0;
		let t1;
		let div_class_value;
		let t2;
		let p;
		let p_class_value;
		let p_id_value;
		let mounted;
		let dispose;
		let if_block0 = /*icon*/ ctx[4] && create_if_block_4$7(ctx);
		let if_block1 = /*validated*/ ctx[9] === true && create_if_block_1$b(ctx);

		function select_block_type_1(ctx, dirty) {
			if (!(/*validated*/ ctx[9] && /*valid*/ ctx[8]) && /*inputStarted*/ ctx[0]) return create_if_block$f;
			return create_else_block$c;
		}

		let current_block_type = select_block_type_1(ctx);
		let if_block2 = current_block_type(ctx);

		return {
			c() {
				div = element("div");
				input = element("input");
				t0 = space();
				if (if_block0) if_block0.c();
				t1 = space();
				if (if_block1) if_block1.c();
				t2 = space();
				p = element("p");
				if_block2.c();
				attr(input, "id", input_id_value = "form-field-textfield-" + /*fieldname*/ ctx[3]);
				attr(input, "class", input_class_value = "input " + /*validationClasses*/ ctx[10]);
				attr(input, "type", "text");
				attr(input, "name", /*fieldname*/ ctx[3]);
				attr(input, "invalid", /*invalid*/ ctx[11]);
				input.disabled = /*disabled*/ ctx[6];
				input.required = /*required*/ ctx[5];
				input.readOnly = /*readonly*/ ctx[7];
				attr(input, "placeholder", /*placeholder*/ ctx[2]);
				attr(input, "autocomplete", /*fieldname*/ ctx[3]);
				attr(input, "aria-controls", input_aria_controls_value = "input-field-helper-" + /*fieldname*/ ctx[3]);
				attr(input, "aria-describedby", input_aria_describedby_value = "input-field-helper-" + /*fieldname*/ ctx[3]);
				attr(div, "class", div_class_value = "control " + /*iconClasses*/ ctx[13]);
				attr(p, "class", p_class_value = "help " + /*validationClasses*/ ctx[10]);
				attr(p, "id", p_id_value = "input-field-helper-" + /*fieldname*/ ctx[3]);
			},
			m(target, anchor) {
				insert(target, div, anchor);
				append(div, input);
				set_input_value(input, /*value*/ ctx[1]);
				append(div, t0);
				if (if_block0) if_block0.m(div, null);
				append(div, t1);
				if (if_block1) if_block1.m(div, null);
				insert(target, t2, anchor);
				insert(target, p, anchor);
				if_block2.m(p, null);

				if (!mounted) {
					dispose = [
						listen(input, "input", /*input_input_handler*/ ctx[20]),
						listen(input, "change", /*onBlur*/ ctx[14]),
						listen(input, "input", /*onInput*/ ctx[15])
					];

					mounted = true;
				}
			},
			p(ctx, [dirty]) {
				if (dirty & /*fieldname*/ 8 && input_id_value !== (input_id_value = "form-field-textfield-" + /*fieldname*/ ctx[3])) {
					attr(input, "id", input_id_value);
				}

				if (dirty & /*validationClasses*/ 1024 && input_class_value !== (input_class_value = "input " + /*validationClasses*/ ctx[10])) {
					attr(input, "class", input_class_value);
				}

				if (dirty & /*fieldname*/ 8) {
					attr(input, "name", /*fieldname*/ ctx[3]);
				}

				if (dirty & /*invalid*/ 2048) {
					attr(input, "invalid", /*invalid*/ ctx[11]);
				}

				if (dirty & /*disabled*/ 64) {
					input.disabled = /*disabled*/ ctx[6];
				}

				if (dirty & /*required*/ 32) {
					input.required = /*required*/ ctx[5];
				}

				if (dirty & /*readonly*/ 128) {
					input.readOnly = /*readonly*/ ctx[7];
				}

				if (dirty & /*placeholder*/ 4) {
					attr(input, "placeholder", /*placeholder*/ ctx[2]);
				}

				if (dirty & /*fieldname*/ 8) {
					attr(input, "autocomplete", /*fieldname*/ ctx[3]);
				}

				if (dirty & /*fieldname*/ 8 && input_aria_controls_value !== (input_aria_controls_value = "input-field-helper-" + /*fieldname*/ ctx[3])) {
					attr(input, "aria-controls", input_aria_controls_value);
				}

				if (dirty & /*fieldname*/ 8 && input_aria_describedby_value !== (input_aria_describedby_value = "input-field-helper-" + /*fieldname*/ ctx[3])) {
					attr(input, "aria-describedby", input_aria_describedby_value);
				}

				if (dirty & /*value*/ 2 && input.value !== /*value*/ ctx[1]) {
					set_input_value(input, /*value*/ ctx[1]);
				}

				if (/*icon*/ ctx[4]) {
					if (if_block0) {
						if_block0.p(ctx, dirty);
					} else {
						if_block0 = create_if_block_4$7(ctx);
						if_block0.c();
						if_block0.m(div, t1);
					}
				} else if (if_block0) {
					if_block0.d(1);
					if_block0 = null;
				}

				if (/*validated*/ ctx[9] === true) {
					if (if_block1) {
						if_block1.p(ctx, dirty);
					} else {
						if_block1 = create_if_block_1$b(ctx);
						if_block1.c();
						if_block1.m(div, null);
					}
				} else if (if_block1) {
					if_block1.d(1);
					if_block1 = null;
				}

				if (dirty & /*iconClasses*/ 8192 && div_class_value !== (div_class_value = "control " + /*iconClasses*/ ctx[13])) {
					attr(div, "class", div_class_value);
				}

				if (current_block_type === (current_block_type = select_block_type_1(ctx)) && if_block2) {
					if_block2.p(ctx, dirty);
				} else {
					if_block2.d(1);
					if_block2 = current_block_type(ctx);

					if (if_block2) {
						if_block2.c();
						if_block2.m(p, null);
					}
				}

				if (dirty & /*validationClasses*/ 1024 && p_class_value !== (p_class_value = "help " + /*validationClasses*/ ctx[10])) {
					attr(p, "class", p_class_value);
				}

				if (dirty & /*fieldname*/ 8 && p_id_value !== (p_id_value = "input-field-helper-" + /*fieldname*/ ctx[3])) {
					attr(p, "id", p_id_value);
				}
			},
			i: noop,
			o: noop,
			d(detaching) {
				if (detaching) detach(div);
				if (if_block0) if_block0.d();
				if (if_block1) if_block1.d();
				if (detaching) detach(t2);
				if (detaching) detach(p);
				if_block2.d();
				mounted = false;
				run_all(dispose);
			}
		};
	}

	function instance$n($$self, $$props, $$invalidate) {
		let iconClasses;
		let allErrors;
		let helper;
		let invalid;
		let validationClasses;
		let dispatch = createEventDispatcher();
		let { inputStarted = false } = $$props;
		let { value = '' } = $$props;
		let { placeholder = 'input some text here, please' } = $$props;
		let { fieldname = 'textfield' } = $$props;
		let { icon = false } = $$props;
		let { required = true } = $$props;
		let { disabled = false } = $$props;
		let { readonly = false } = $$props;
		let { valid = true } = $$props;
		let { validated = false } = $$props;
		let { errors = false } = $$props;
		let { formErrors = false } = $$props;
		let { formLevelError = false } = $$props;

		function onBlur() /*ev*/ {
			let data = { field: fieldname, value };
			$$invalidate(0, inputStarted = true);
			dispatch('change', data);
			return true;
		}

		function onInput(ev) {
			let data = {
				field: fieldname,
				value: ev.currentTarget.value
			};

			$$invalidate(0, inputStarted = true);
			dispatch('change', data);
			return true;
		}

		function input_input_handler() {
			value = this.value;
			$$invalidate(1, value);
		}

		$$self.$$set = $$props => {
			if ('inputStarted' in $$props) $$invalidate(0, inputStarted = $$props.inputStarted);
			if ('value' in $$props) $$invalidate(1, value = $$props.value);
			if ('placeholder' in $$props) $$invalidate(2, placeholder = $$props.placeholder);
			if ('fieldname' in $$props) $$invalidate(3, fieldname = $$props.fieldname);
			if ('icon' in $$props) $$invalidate(4, icon = $$props.icon);
			if ('required' in $$props) $$invalidate(5, required = $$props.required);
			if ('disabled' in $$props) $$invalidate(6, disabled = $$props.disabled);
			if ('readonly' in $$props) $$invalidate(7, readonly = $$props.readonly);
			if ('valid' in $$props) $$invalidate(8, valid = $$props.valid);
			if ('validated' in $$props) $$invalidate(9, validated = $$props.validated);
			if ('errors' in $$props) $$invalidate(16, errors = $$props.errors);
			if ('formErrors' in $$props) $$invalidate(17, formErrors = $$props.formErrors);
			if ('formLevelError' in $$props) $$invalidate(18, formLevelError = $$props.formLevelError);
		};

		$$self.$$.update = () => {
			if ($$self.$$.dirty & /*icon*/ 16) {
				$$invalidate(13, iconClasses = (icon ? ' has-icons-left ' : '') + ' has-icons-right ');
			}

			if ($$self.$$.dirty & /*errors, formErrors*/ 196608) {
				$$invalidate(19, allErrors = [].concat(errors ? errors : [], formErrors ? formErrors : []));
			}

			if ($$self.$$.dirty & /*allErrors, placeholder*/ 524292) {
				$$invalidate(12, helper = allErrors ? allErrors.join(', ') : placeholder);
			}

			if ($$self.$$.dirty & /*valid, formLevelError*/ 262400) {
				$$invalidate(11, invalid = valid === false || formLevelError);
			}

			if ($$self.$$.dirty & /*valid, inputStarted*/ 257) {
				$$invalidate(10, validationClasses = valid === true || !inputStarted
				? UICommon$1.CLASS_OK
				: UICommon$1.CLASS_ERR);
			}
		};

		return [
			inputStarted,
			value,
			placeholder,
			fieldname,
			icon,
			required,
			disabled,
			readonly,
			valid,
			validated,
			validationClasses,
			invalid,
			helper,
			iconClasses,
			onBlur,
			onInput,
			errors,
			formErrors,
			formLevelError,
			allErrors,
			input_input_handler
		];
	}

	class Ui_textfield extends SvelteComponent {
		constructor(options) {
			super();

			init(this, options, instance$n, create_fragment$n, safe_not_equal, {
				inputStarted: 0,
				value: 1,
				placeholder: 2,
				fieldname: 3,
				icon: 4,
				required: 5,
				disabled: 6,
				readonly: 7,
				valid: 8,
				validated: 9,
				errors: 16,
				formErrors: 17,
				formLevelError: 18
			});
		}
	}

	/* src/elements/form/ui.autocomplete.svelte generated by Svelte v3.44.3 */

	function create_else_block$b(ctx) {
		let div;
		let autocomplete;
		let updating_selectedItem;
		let t;
		let if_block_anchor;
		let current;

		function autocomplete_selectedItem_binding(value) {
			/*autocomplete_selectedItem_binding*/ ctx[24](value);
		}

		let autocomplete_props = {
			showClear: /*showClear*/ ctx[8],
			disabled: /*disabled*/ ctx[11],
			placeholder: /*placeholder*/ ctx[9],
			noResultsText: /*noResultsText*/ ctx[7],
			onChange: /*onChange*/ ctx[19],
			searchFunction: /*searchFunction*/ ctx[16],
			hideArrow: true,
			labelFieldName: /*labelField*/ ctx[3],
			valueFieldName: /*idField*/ ctx[2],
			minCharactersToSearch: /*minCharactersToSearch*/ ctx[4],
			selectFirstIfEmpty: /*selectFirstIfEmpty*/ ctx[5],
			maxItemsToShowInList: /*maxItemsToShowInList*/ ctx[6]
		};

		if (/*value*/ ctx[1] !== void 0) {
			autocomplete_props.selectedItem = /*value*/ ctx[1];
		}

		autocomplete = new SimpleAutocomplete({ props: autocomplete_props });
		binding_callbacks.push(() => bind$2(autocomplete, 'selectedItem', autocomplete_selectedItem_binding));
		let if_block = !(/*validated*/ ctx[15] && /*valid*/ ctx[14]) && /*inputStarted*/ ctx[0] && create_if_block_1$a(ctx);

		return {
			c() {
				div = element("div");
				create_component(autocomplete.$$.fragment);
				t = space();
				if (if_block) if_block.c();
				if_block_anchor = empty();
				attr(div, "class", "control");
			},
			m(target, anchor) {
				insert(target, div, anchor);
				mount_component(autocomplete, div, null);
				insert(target, t, anchor);
				if (if_block) if_block.m(target, anchor);
				insert(target, if_block_anchor, anchor);
				current = true;
			},
			p(ctx, dirty) {
				const autocomplete_changes = {};
				if (dirty & /*showClear*/ 256) autocomplete_changes.showClear = /*showClear*/ ctx[8];
				if (dirty & /*disabled*/ 2048) autocomplete_changes.disabled = /*disabled*/ ctx[11];
				if (dirty & /*placeholder*/ 512) autocomplete_changes.placeholder = /*placeholder*/ ctx[9];
				if (dirty & /*noResultsText*/ 128) autocomplete_changes.noResultsText = /*noResultsText*/ ctx[7];
				if (dirty & /*searchFunction*/ 65536) autocomplete_changes.searchFunction = /*searchFunction*/ ctx[16];
				if (dirty & /*labelField*/ 8) autocomplete_changes.labelFieldName = /*labelField*/ ctx[3];
				if (dirty & /*idField*/ 4) autocomplete_changes.valueFieldName = /*idField*/ ctx[2];
				if (dirty & /*minCharactersToSearch*/ 16) autocomplete_changes.minCharactersToSearch = /*minCharactersToSearch*/ ctx[4];
				if (dirty & /*selectFirstIfEmpty*/ 32) autocomplete_changes.selectFirstIfEmpty = /*selectFirstIfEmpty*/ ctx[5];
				if (dirty & /*maxItemsToShowInList*/ 64) autocomplete_changes.maxItemsToShowInList = /*maxItemsToShowInList*/ ctx[6];

				if (!updating_selectedItem && dirty & /*value*/ 2) {
					updating_selectedItem = true;
					autocomplete_changes.selectedItem = /*value*/ ctx[1];
					add_flush_callback(() => updating_selectedItem = false);
				}

				autocomplete.$set(autocomplete_changes);

				if (!(/*validated*/ ctx[15] && /*valid*/ ctx[14]) && /*inputStarted*/ ctx[0]) {
					if (if_block) {
						if_block.p(ctx, dirty);
					} else {
						if_block = create_if_block_1$a(ctx);
						if_block.c();
						if_block.m(if_block_anchor.parentNode, if_block_anchor);
					}
				} else if (if_block) {
					if_block.d(1);
					if_block = null;
				}
			},
			i(local) {
				if (current) return;
				transition_in(autocomplete.$$.fragment, local);
				current = true;
			},
			o(local) {
				transition_out(autocomplete.$$.fragment, local);
				current = false;
			},
			d(detaching) {
				if (detaching) detach(div);
				destroy_component(autocomplete);
				if (detaching) detach(t);
				if (if_block) if_block.d(detaching);
				if (detaching) detach(if_block_anchor);
			}
		};
	}

	// (57:0) {#if readonly }
	function create_if_block$e(ctx) {
		let uitextfield;
		let current;

		uitextfield = new Ui_textfield({
				props: {
					value: /*value*/ ctx[1] ? /*value*/ ctx[1].title : '',
					fieldname: /*fieldname*/ ctx[10],
					placeholder: /*placeholder*/ ctx[9],
					icon: /*icon*/ ctx[13]
				}
			});

		return {
			c() {
				create_component(uitextfield.$$.fragment);
			},
			m(target, anchor) {
				mount_component(uitextfield, target, anchor);
				current = true;
			},
			p(ctx, dirty) {
				const uitextfield_changes = {};
				if (dirty & /*value*/ 2) uitextfield_changes.value = /*value*/ ctx[1] ? /*value*/ ctx[1].title : '';
				if (dirty & /*fieldname*/ 1024) uitextfield_changes.fieldname = /*fieldname*/ ctx[10];
				if (dirty & /*placeholder*/ 512) uitextfield_changes.placeholder = /*placeholder*/ ctx[9];
				if (dirty & /*icon*/ 8192) uitextfield_changes.icon = /*icon*/ ctx[13];
				uitextfield.$set(uitextfield_changes);
			},
			i(local) {
				if (current) return;
				transition_in(uitextfield.$$.fragment, local);
				current = true;
			},
			o(local) {
				transition_out(uitextfield.$$.fragment, local);
				current = false;
			},
			d(detaching) {
				destroy_component(uitextfield, detaching);
			}
		};
	}

	// (77:0) {#if !(validated && valid) && (inputStarted) }
	function create_if_block_1$a(ctx) {
		let p;
		let t;
		let p_class_value;
		let p_id_value;

		return {
			c() {
				p = element("p");
				t = text(/*helper*/ ctx[18]);
				attr(p, "class", p_class_value = "help " + /*validationClasses*/ ctx[17]);
				attr(p, "id", p_id_value = "input-field-helper-" + /*fieldname*/ ctx[10]);
			},
			m(target, anchor) {
				insert(target, p, anchor);
				append(p, t);
			},
			p(ctx, dirty) {
				if (dirty & /*helper*/ 262144) set_data(t, /*helper*/ ctx[18]);

				if (dirty & /*validationClasses*/ 131072 && p_class_value !== (p_class_value = "help " + /*validationClasses*/ ctx[17])) {
					attr(p, "class", p_class_value);
				}

				if (dirty & /*fieldname*/ 1024 && p_id_value !== (p_id_value = "input-field-helper-" + /*fieldname*/ ctx[10])) {
					attr(p, "id", p_id_value);
				}
			},
			d(detaching) {
				if (detaching) detach(p);
			}
		};
	}

	function create_fragment$m(ctx) {
		let current_block_type_index;
		let if_block;
		let if_block_anchor;
		let current;
		const if_block_creators = [create_if_block$e, create_else_block$b];
		const if_blocks = [];

		function select_block_type(ctx, dirty) {
			if (/*readonly*/ ctx[12]) return 0;
			return 1;
		}

		current_block_type_index = select_block_type(ctx);
		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

		return {
			c() {
				if_block.c();
				if_block_anchor = empty();
			},
			m(target, anchor) {
				if_blocks[current_block_type_index].m(target, anchor);
				insert(target, if_block_anchor, anchor);
				current = true;
			},
			p(ctx, [dirty]) {
				let previous_block_index = current_block_type_index;
				current_block_type_index = select_block_type(ctx);

				if (current_block_type_index === previous_block_index) {
					if_blocks[current_block_type_index].p(ctx, dirty);
				} else {
					group_outros();

					transition_out(if_blocks[previous_block_index], 1, 1, () => {
						if_blocks[previous_block_index] = null;
					});

					check_outros();
					if_block = if_blocks[current_block_type_index];

					if (!if_block) {
						if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
						if_block.c();
					} else {
						if_block.p(ctx, dirty);
					}

					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			},
			i(local) {
				if (current) return;
				transition_in(if_block);
				current = true;
			},
			o(local) {
				transition_out(if_block);
				current = false;
			},
			d(detaching) {
				if_blocks[current_block_type_index].d(detaching);
				if (detaching) detach(if_block_anchor);
			}
		};
	}

	function instance$m($$self, $$props, $$invalidate) {
		let allErrors;
		let helper;
		let validationClasses;
		let dispatch = createEventDispatcher();
		let { idField = '_id' } = $$props;
		let { labelField = 'title' } = $$props;
		let { minCharactersToSearch = 3 } = $$props;
		let { selectFirstIfEmpty = false } = $$props;
		let { maxItemsToShowInList = 20 } = $$props;
		let { noResultsText = 'ÐÐ¸ÑÐµÐ³Ð¾ Ð½Ðµ Ð½Ð°Ð¹Ð´ÐµÐ½Ð¾' } = $$props;
		let { showClear = true } = $$props;
		let { value } = $$props;
		let { placeholder = '' } = $$props;
		let { fieldname = 'checkbox-list' } = $$props;
		let { disabled = false } = $$props;
		let { readonly = false } = $$props;
		let { icon = false } = $$props;
		let { inputStarted = false } = $$props;
		let { valid = true } = $$props;
		let { validated = false } = $$props;
		let { errors = false } = $$props;
		let { formErrors = false } = $$props;
		let { formLevelError = false } = $$props;

		let { searchFunction = () => /*term*/ {
			return [];
		} } = $$props;

		function onChange() {
			let data = { field: fieldname, value };
			$$invalidate(0, inputStarted = true);
			dispatch('change', data);
			return true;
		}

		function autocomplete_selectedItem_binding(value$1) {
			value = value$1;
			$$invalidate(1, value);
		}

		$$self.$$set = $$props => {
			if ('idField' in $$props) $$invalidate(2, idField = $$props.idField);
			if ('labelField' in $$props) $$invalidate(3, labelField = $$props.labelField);
			if ('minCharactersToSearch' in $$props) $$invalidate(4, minCharactersToSearch = $$props.minCharactersToSearch);
			if ('selectFirstIfEmpty' in $$props) $$invalidate(5, selectFirstIfEmpty = $$props.selectFirstIfEmpty);
			if ('maxItemsToShowInList' in $$props) $$invalidate(6, maxItemsToShowInList = $$props.maxItemsToShowInList);
			if ('noResultsText' in $$props) $$invalidate(7, noResultsText = $$props.noResultsText);
			if ('showClear' in $$props) $$invalidate(8, showClear = $$props.showClear);
			if ('value' in $$props) $$invalidate(1, value = $$props.value);
			if ('placeholder' in $$props) $$invalidate(9, placeholder = $$props.placeholder);
			if ('fieldname' in $$props) $$invalidate(10, fieldname = $$props.fieldname);
			if ('disabled' in $$props) $$invalidate(11, disabled = $$props.disabled);
			if ('readonly' in $$props) $$invalidate(12, readonly = $$props.readonly);
			if ('icon' in $$props) $$invalidate(13, icon = $$props.icon);
			if ('inputStarted' in $$props) $$invalidate(0, inputStarted = $$props.inputStarted);
			if ('valid' in $$props) $$invalidate(14, valid = $$props.valid);
			if ('validated' in $$props) $$invalidate(15, validated = $$props.validated);
			if ('errors' in $$props) $$invalidate(20, errors = $$props.errors);
			if ('formErrors' in $$props) $$invalidate(21, formErrors = $$props.formErrors);
			if ('formLevelError' in $$props) $$invalidate(22, formLevelError = $$props.formLevelError);
			if ('searchFunction' in $$props) $$invalidate(16, searchFunction = $$props.searchFunction);
		};

		$$self.$$.update = () => {
			if ($$self.$$.dirty & /*icon*/ 8192) ;

			if ($$self.$$.dirty & /*errors, formErrors*/ 3145728) {
				$$invalidate(23, allErrors = [].concat(errors ? errors : [], formErrors ? formErrors : []));
			}

			if ($$self.$$.dirty & /*allErrors, placeholder*/ 8389120) {
				$$invalidate(18, helper = allErrors ? allErrors.join(', ') : placeholder);
			}

			if ($$self.$$.dirty & /*valid, formLevelError*/ 4210688) ;

			if ($$self.$$.dirty & /*valid, inputStarted*/ 16385) {
				$$invalidate(17, validationClasses = valid === true || !inputStarted
				? UICommon$1.CLASS_OK
				: UICommon$1.CLASS_ERR);
			}
		};

		return [
			inputStarted,
			value,
			idField,
			labelField,
			minCharactersToSearch,
			selectFirstIfEmpty,
			maxItemsToShowInList,
			noResultsText,
			showClear,
			placeholder,
			fieldname,
			disabled,
			readonly,
			icon,
			valid,
			validated,
			searchFunction,
			validationClasses,
			helper,
			onChange,
			errors,
			formErrors,
			formLevelError,
			allErrors,
			autocomplete_selectedItem_binding
		];
	}

	class Ui_autocomplete extends SvelteComponent {
		constructor(options) {
			super();

			init(this, options, instance$m, create_fragment$m, safe_not_equal, {
				idField: 2,
				labelField: 3,
				minCharactersToSearch: 4,
				selectFirstIfEmpty: 5,
				maxItemsToShowInList: 6,
				noResultsText: 7,
				showClear: 8,
				value: 1,
				placeholder: 9,
				fieldname: 10,
				disabled: 11,
				readonly: 12,
				icon: 13,
				inputStarted: 0,
				valid: 14,
				validated: 15,
				errors: 20,
				formErrors: 21,
				formLevelError: 22,
				searchFunction: 16
			});
		}
	}

	/* src/elements/form/ui.checkbox.list.svelte generated by Svelte v3.44.3 */

	function get_each_context$3(ctx, list, i) {
		const child_ctx = ctx.slice();
		child_ctx[20] = list[i];
		child_ctx[21] = list;
		child_ctx[22] = i;
		return child_ctx;
	}

	// (56:2) {#each value as item(item.id) }
	function create_each_block$3(key_1, ctx) {
		let label;
		let input;
		let input_data_id_value;
		let input_id_value;
		let input_placeholder_value;
		let input_name_value;
		let input_aria_controls_value;
		let input_aria_describedby_value;
		let input_disabled_value;
		let t0;
		let t1_value = /*$LOCALE*/ ctx[10][/*item*/ ctx[20].label] + "";
		let t1;
		let t2;
		let label_disabled_value;
		let label_for_value;
		let mounted;
		let dispose;

		function input_change_handler() {
			/*input_change_handler*/ ctx[18].call(input, /*each_value*/ ctx[21], /*item_index*/ ctx[22]);
		}

		return {
			key: key_1,
			first: null,
			c() {
				label = element("label");
				input = element("input");
				t0 = space();
				t1 = text(t1_value);
				t2 = space();
				attr(input, "data-id", input_data_id_value = /*item*/ ctx[20].id);
				attr(input, "id", input_id_value = "form-field-checkboxlist-" + (/*fieldname*/ ctx[2] + '_' + /*item*/ ctx[20].id));
				attr(input, "type", "checkbox");
				attr(input, "placeholder", input_placeholder_value = /*item*/ ctx[20].placeholder);
				attr(input, "name", input_name_value = /*fieldname*/ ctx[2] + '_' + /*item*/ ctx[20].id);
				input.readOnly = /*readonly*/ ctx[3];
				attr(input, "invalid", /*invalid*/ ctx[8]);
				attr(input, "aria-controls", input_aria_controls_value = "input-field-helper-" + (/*fieldname*/ ctx[2] + '_' + /*item*/ ctx[20].id));
				attr(input, "aria-describedby", input_aria_describedby_value = "input-field-helper-" + (/*fieldname*/ ctx[2] + '_' + /*item*/ ctx[20].id));
				input.disabled = input_disabled_value = /*disabled*/ ctx[4] || /*item*/ ctx[20].disabled;
				attr(label, "class", "checkbox pr-2");
				attr(label, "disabled", label_disabled_value = /*disabled*/ ctx[4] || /*item*/ ctx[20].disabled);
				attr(label, "for", label_for_value = "form-field-checkbox-" + (/*fieldname*/ ctx[2] + '_' + /*item*/ ctx[20].id));
				this.first = label;
			},
			m(target, anchor) {
				insert(target, label, anchor);
				append(label, input);
				input.checked = /*item*/ ctx[20].value;
				append(label, t0);
				append(label, t1);
				append(label, t2);

				if (!mounted) {
					dispose = [
						listen(input, "change", input_change_handler),
						listen(input, "change", /*onBlur*/ ctx[11]),
						listen(input, "input", /*onInput*/ ctx[12])
					];

					mounted = true;
				}
			},
			p(new_ctx, dirty) {
				ctx = new_ctx;

				if (dirty & /*value*/ 2 && input_data_id_value !== (input_data_id_value = /*item*/ ctx[20].id)) {
					attr(input, "data-id", input_data_id_value);
				}

				if (dirty & /*fieldname, value*/ 6 && input_id_value !== (input_id_value = "form-field-checkboxlist-" + (/*fieldname*/ ctx[2] + '_' + /*item*/ ctx[20].id))) {
					attr(input, "id", input_id_value);
				}

				if (dirty & /*value*/ 2 && input_placeholder_value !== (input_placeholder_value = /*item*/ ctx[20].placeholder)) {
					attr(input, "placeholder", input_placeholder_value);
				}

				if (dirty & /*fieldname, value*/ 6 && input_name_value !== (input_name_value = /*fieldname*/ ctx[2] + '_' + /*item*/ ctx[20].id)) {
					attr(input, "name", input_name_value);
				}

				if (dirty & /*readonly*/ 8) {
					input.readOnly = /*readonly*/ ctx[3];
				}

				if (dirty & /*invalid*/ 256) {
					attr(input, "invalid", /*invalid*/ ctx[8]);
				}

				if (dirty & /*fieldname, value*/ 6 && input_aria_controls_value !== (input_aria_controls_value = "input-field-helper-" + (/*fieldname*/ ctx[2] + '_' + /*item*/ ctx[20].id))) {
					attr(input, "aria-controls", input_aria_controls_value);
				}

				if (dirty & /*fieldname, value*/ 6 && input_aria_describedby_value !== (input_aria_describedby_value = "input-field-helper-" + (/*fieldname*/ ctx[2] + '_' + /*item*/ ctx[20].id))) {
					attr(input, "aria-describedby", input_aria_describedby_value);
				}

				if (dirty & /*disabled, value*/ 18 && input_disabled_value !== (input_disabled_value = /*disabled*/ ctx[4] || /*item*/ ctx[20].disabled)) {
					input.disabled = input_disabled_value;
				}

				if (dirty & /*value*/ 2) {
					input.checked = /*item*/ ctx[20].value;
				}

				if (dirty & /*$LOCALE, value*/ 1026 && t1_value !== (t1_value = /*$LOCALE*/ ctx[10][/*item*/ ctx[20].label] + "")) set_data(t1, t1_value);

				if (dirty & /*disabled, value*/ 18 && label_disabled_value !== (label_disabled_value = /*disabled*/ ctx[4] || /*item*/ ctx[20].disabled)) {
					attr(label, "disabled", label_disabled_value);
				}

				if (dirty & /*fieldname, value*/ 6 && label_for_value !== (label_for_value = "form-field-checkbox-" + (/*fieldname*/ ctx[2] + '_' + /*item*/ ctx[20].id))) {
					attr(label, "for", label_for_value);
				}
			},
			d(detaching) {
				if (detaching) detach(label);
				mounted = false;
				run_all(dispose);
			}
		};
	}

	// (80:2) {:else}
	function create_else_block$a(ctx) {
		let t;

		return {
			c() {
				t = text("Â ");
			},
			m(target, anchor) {
				insert(target, t, anchor);
			},
			p: noop,
			d(detaching) {
				if (detaching) detach(t);
			}
		};
	}

	// (78:2) {#if !(validated && valid) && (inputStarted) }
	function create_if_block$d(ctx) {
		let t;

		return {
			c() {
				t = text(/*helper*/ ctx[9]);
			},
			m(target, anchor) {
				insert(target, t, anchor);
			},
			p(ctx, dirty) {
				if (dirty & /*helper*/ 512) set_data(t, /*helper*/ ctx[9]);
			},
			d(detaching) {
				if (detaching) detach(t);
			}
		};
	}

	function create_fragment$l(ctx) {
		let div;
		let each_blocks = [];
		let each_1_lookup = new Map();
		let t;
		let p;
		let p_class_value;
		let p_id_value;
		let each_value = /*value*/ ctx[1];
		const get_key = ctx => /*item*/ ctx[20].id;

		for (let i = 0; i < each_value.length; i += 1) {
			let child_ctx = get_each_context$3(ctx, each_value, i);
			let key = get_key(child_ctx);
			each_1_lookup.set(key, each_blocks[i] = create_each_block$3(key, child_ctx));
		}

		function select_block_type(ctx, dirty) {
			if (!(/*validated*/ ctx[6] && /*valid*/ ctx[5]) && /*inputStarted*/ ctx[0]) return create_if_block$d;
			return create_else_block$a;
		}

		let current_block_type = select_block_type(ctx);
		let if_block = current_block_type(ctx);

		return {
			c() {
				div = element("div");

				for (let i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].c();
				}

				t = space();
				p = element("p");
				if_block.c();
				attr(div, "class", "control");
				attr(p, "class", p_class_value = "help " + /*validationClasses*/ ctx[7]);
				attr(p, "id", p_id_value = "form-field-helper-" + /*fieldname*/ ctx[2]);
			},
			m(target, anchor) {
				insert(target, div, anchor);

				for (let i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].m(div, null);
				}

				insert(target, t, anchor);
				insert(target, p, anchor);
				if_block.m(p, null);
			},
			p(ctx, [dirty]) {
				if (dirty & /*disabled, value, fieldname, $LOCALE, readonly, invalid, onBlur, onInput*/ 7454) {
					each_value = /*value*/ ctx[1];
					each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, div, destroy_block, create_each_block$3, null, get_each_context$3);
				}

				if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block.d(1);
					if_block = current_block_type(ctx);

					if (if_block) {
						if_block.c();
						if_block.m(p, null);
					}
				}

				if (dirty & /*validationClasses*/ 128 && p_class_value !== (p_class_value = "help " + /*validationClasses*/ ctx[7])) {
					attr(p, "class", p_class_value);
				}

				if (dirty & /*fieldname*/ 4 && p_id_value !== (p_id_value = "form-field-helper-" + /*fieldname*/ ctx[2])) {
					attr(p, "id", p_id_value);
				}
			},
			i: noop,
			o: noop,
			d(detaching) {
				if (detaching) detach(div);

				for (let i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].d();
				}

				if (detaching) detach(t);
				if (detaching) detach(p);
				if_block.d();
			}
		};
	}

	function instance$l($$self, $$props, $$invalidate) {
		let allErrors;
		let helper;
		let invalid;
		let validationClasses;
		let $LOCALE;
		component_subscribe($$self, LOCALE, $$value => $$invalidate(10, $LOCALE = $$value));
		let dispatch = createEventDispatcher();
		let { inputStarted = false } = $$props;
		let { value = [] } = $$props;
		let { fieldname = 'checkbox-list' } = $$props;
		let { placeholder = '' } = $$props;
		let { readonly = false } = $$props;
		let { disabled = false } = $$props;
		let { valid = true } = $$props;
		let { validated = false } = $$props;
		let { errors = false } = $$props;
		let { formErrors = false } = $$props;
		let { formLevelError = false } = $$props;

		function onBlur(ev) {
			let id = parseInt(ev.currentTarget.dataset.id);
			let copy = [...value];
			copy.find(itm => itm.id == id).value = ev.currentTarget.checked;
			let data = { id, field: fieldname, value: copy };
			$$invalidate(0, inputStarted = true);
			dispatch('change', data);
			return true;
		}

		function onInput(ev) {
			let id = parseInt(ev.currentTarget.dataset.id);
			let copy = [...value];
			copy.find(itm => itm.id === id).value = ev.currentTarget.checked;
			let data = { id, field: fieldname, value: copy };
			$$invalidate(0, inputStarted = true);
			dispatch('change', data);
			return true;
		}

		function input_change_handler(each_value, item_index) {
			each_value[item_index].value = this.checked;
			$$invalidate(1, value);
		}

		$$self.$$set = $$props => {
			if ('inputStarted' in $$props) $$invalidate(0, inputStarted = $$props.inputStarted);
			if ('value' in $$props) $$invalidate(1, value = $$props.value);
			if ('fieldname' in $$props) $$invalidate(2, fieldname = $$props.fieldname);
			if ('placeholder' in $$props) $$invalidate(13, placeholder = $$props.placeholder);
			if ('readonly' in $$props) $$invalidate(3, readonly = $$props.readonly);
			if ('disabled' in $$props) $$invalidate(4, disabled = $$props.disabled);
			if ('valid' in $$props) $$invalidate(5, valid = $$props.valid);
			if ('validated' in $$props) $$invalidate(6, validated = $$props.validated);
			if ('errors' in $$props) $$invalidate(14, errors = $$props.errors);
			if ('formErrors' in $$props) $$invalidate(15, formErrors = $$props.formErrors);
			if ('formLevelError' in $$props) $$invalidate(16, formLevelError = $$props.formLevelError);
		};

		$$self.$$.update = () => {
			if ($$self.$$.dirty & /*errors, formErrors*/ 49152) {
				$$invalidate(17, allErrors = [].concat(errors ? errors : [], formErrors ? formErrors : []));
			}

			if ($$self.$$.dirty & /*allErrors, placeholder*/ 139264) {
				$$invalidate(9, helper = allErrors ? allErrors.join(', ') : placeholder);
			}

			if ($$self.$$.dirty & /*valid, formLevelError*/ 65568) {
				$$invalidate(8, invalid = valid === false || formLevelError);
			}

			if ($$self.$$.dirty & /*valid, inputStarted*/ 33) {
				$$invalidate(7, validationClasses = valid === true || !inputStarted
				? UICommon$1.CLASS_OK
				: UICommon$1.CLASS_ERR);
			}
		};

		return [
			inputStarted,
			value,
			fieldname,
			readonly,
			disabled,
			valid,
			validated,
			validationClasses,
			invalid,
			helper,
			$LOCALE,
			onBlur,
			onInput,
			placeholder,
			errors,
			formErrors,
			formLevelError,
			allErrors,
			input_change_handler
		];
	}

	class Ui_checkbox_list extends SvelteComponent {
		constructor(options) {
			super();

			init(this, options, instance$l, create_fragment$l, safe_not_equal, {
				inputStarted: 0,
				value: 1,
				fieldname: 2,
				placeholder: 13,
				readonly: 3,
				disabled: 4,
				valid: 5,
				validated: 6,
				errors: 14,
				formErrors: 15,
				formLevelError: 16
			});
		}
	}

	/* src/elements/form/ui.checkbox.svelte generated by Svelte v3.44.3 */

	function create_else_block$9(ctx) {
		let t;

		return {
			c() {
				t = text("Â ");
			},
			m(target, anchor) {
				insert(target, t, anchor);
			},
			p: noop,
			d(detaching) {
				if (detaching) detach(t);
			}
		};
	}

	// (59:2) {#if !(validated && valid) && (inputStarted) }
	function create_if_block$c(ctx) {
		let t;

		return {
			c() {
				t = text(/*helper*/ ctx[12]);
			},
			m(target, anchor) {
				insert(target, t, anchor);
			},
			p(ctx, dirty) {
				if (dirty & /*helper*/ 4096) set_data(t, /*helper*/ ctx[12]);
			},
			d(detaching) {
				if (detaching) detach(t);
			}
		};
	}

	function create_fragment$k(ctx) {
		let div;
		let label_1;
		let input;
		let input_id_value;
		let input_aria_controls_value;
		let input_aria_describedby_value;
		let t0;
		let t1_value = /*$LOCALE*/ ctx[14][/*label*/ ctx[2]] + "";
		let t1;
		let label_1_for_value;
		let div_class_value;
		let t2;
		let p;
		let p_class_value;
		let p_id_value;
		let mounted;
		let dispose;

		function select_block_type(ctx, dirty) {
			if (!(/*validated*/ ctx[9] && /*valid*/ ctx[8]) && /*inputStarted*/ ctx[0]) return create_if_block$c;
			return create_else_block$9;
		}

		let current_block_type = select_block_type(ctx);
		let if_block = current_block_type(ctx);

		return {
			c() {
				div = element("div");
				label_1 = element("label");
				input = element("input");
				t0 = space();
				t1 = text(t1_value);
				t2 = space();
				p = element("p");
				if_block.c();
				attr(input, "type", "checkbox");
				attr(input, "id", input_id_value = "form-field-checkbox-" + /*fieldname*/ ctx[4]);
				attr(input, "placeholder", /*placeholder*/ ctx[3]);
				attr(input, "name", /*fieldname*/ ctx[4]);
				input.required = /*required*/ ctx[5];
				input.readOnly = /*readonly*/ ctx[6];
				attr(input, "invalid", /*invalid*/ ctx[11]);
				attr(input, "aria-controls", input_aria_controls_value = "input-field-helper-" + /*fieldname*/ ctx[4]);
				attr(input, "aria-describedby", input_aria_describedby_value = "input-field-helper-" + /*fieldname*/ ctx[4]);
				input.disabled = /*disabled*/ ctx[7];
				attr(label_1, "class", "checkbox");
				attr(label_1, "disabled", /*disabled*/ ctx[7]);
				attr(label_1, "for", label_1_for_value = "form-field-checkbox-" + /*fieldname*/ ctx[4]);
				attr(div, "class", div_class_value = "control " + /*iconClasses*/ ctx[13]);
				attr(p, "class", p_class_value = "help " + /*validationClasses*/ ctx[10]);
				attr(p, "id", p_id_value = "form-field-helper-" + /*fieldname*/ ctx[4]);
			},
			m(target, anchor) {
				insert(target, div, anchor);
				append(div, label_1);
				append(label_1, input);
				input.checked = /*value*/ ctx[1];
				append(label_1, t0);
				append(label_1, t1);
				insert(target, t2, anchor);
				insert(target, p, anchor);
				if_block.m(p, null);

				if (!mounted) {
					dispose = [
						listen(input, "change", /*input_change_handler*/ ctx[22]),
						listen(input, "change", /*onBlur*/ ctx[15]),
						listen(input, "input", /*onInput*/ ctx[16])
					];

					mounted = true;
				}
			},
			p(ctx, [dirty]) {
				if (dirty & /*fieldname*/ 16 && input_id_value !== (input_id_value = "form-field-checkbox-" + /*fieldname*/ ctx[4])) {
					attr(input, "id", input_id_value);
				}

				if (dirty & /*placeholder*/ 8) {
					attr(input, "placeholder", /*placeholder*/ ctx[3]);
				}

				if (dirty & /*fieldname*/ 16) {
					attr(input, "name", /*fieldname*/ ctx[4]);
				}

				if (dirty & /*required*/ 32) {
					input.required = /*required*/ ctx[5];
				}

				if (dirty & /*readonly*/ 64) {
					input.readOnly = /*readonly*/ ctx[6];
				}

				if (dirty & /*invalid*/ 2048) {
					attr(input, "invalid", /*invalid*/ ctx[11]);
				}

				if (dirty & /*fieldname*/ 16 && input_aria_controls_value !== (input_aria_controls_value = "input-field-helper-" + /*fieldname*/ ctx[4])) {
					attr(input, "aria-controls", input_aria_controls_value);
				}

				if (dirty & /*fieldname*/ 16 && input_aria_describedby_value !== (input_aria_describedby_value = "input-field-helper-" + /*fieldname*/ ctx[4])) {
					attr(input, "aria-describedby", input_aria_describedby_value);
				}

				if (dirty & /*disabled*/ 128) {
					input.disabled = /*disabled*/ ctx[7];
				}

				if (dirty & /*value*/ 2) {
					input.checked = /*value*/ ctx[1];
				}

				if (dirty & /*$LOCALE, label*/ 16388 && t1_value !== (t1_value = /*$LOCALE*/ ctx[14][/*label*/ ctx[2]] + "")) set_data(t1, t1_value);

				if (dirty & /*disabled*/ 128) {
					attr(label_1, "disabled", /*disabled*/ ctx[7]);
				}

				if (dirty & /*fieldname*/ 16 && label_1_for_value !== (label_1_for_value = "form-field-checkbox-" + /*fieldname*/ ctx[4])) {
					attr(label_1, "for", label_1_for_value);
				}

				if (dirty & /*iconClasses*/ 8192 && div_class_value !== (div_class_value = "control " + /*iconClasses*/ ctx[13])) {
					attr(div, "class", div_class_value);
				}

				if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block.d(1);
					if_block = current_block_type(ctx);

					if (if_block) {
						if_block.c();
						if_block.m(p, null);
					}
				}

				if (dirty & /*validationClasses*/ 1024 && p_class_value !== (p_class_value = "help " + /*validationClasses*/ ctx[10])) {
					attr(p, "class", p_class_value);
				}

				if (dirty & /*fieldname*/ 16 && p_id_value !== (p_id_value = "form-field-helper-" + /*fieldname*/ ctx[4])) {
					attr(p, "id", p_id_value);
				}
			},
			i: noop,
			o: noop,
			d(detaching) {
				if (detaching) detach(div);
				if (detaching) detach(t2);
				if (detaching) detach(p);
				if_block.d();
				mounted = false;
				run_all(dispose);
			}
		};
	}

	function instance$k($$self, $$props, $$invalidate) {
		let iconClasses;
		let allErrors;
		let helper;
		let invalid;
		let validationClasses;
		let $LOCALE;
		component_subscribe($$self, LOCALE, $$value => $$invalidate(14, $LOCALE = $$value));
		let dispatch = createEventDispatcher();
		let { inputStarted = false } = $$props;
		let { value = false } = $$props;
		let { label = 'checkbox' } = $$props;
		let { placeholder = 'checkbox placeholder' } = $$props;
		let { fieldname = 'checkbox' } = $$props;
		let { icon = false } = $$props;
		let { required = true } = $$props;
		let { readonly = false } = $$props;
		let { disabled = false } = $$props;
		let { valid = true } = $$props;
		let { validated = false } = $$props;
		let { errors = false } = $$props;
		let { formErrors = false } = $$props;
		let { formLevelError = false } = $$props;

		function onBlur(ev) {
			let data = {
				field: fieldname,
				value: ev.currentTarget.type === 'checkbox'
				? ev.currentTarget.checked
				: value
			};

			$$invalidate(0, inputStarted = true);
			dispatch('change', data);
			return true;
		}

		function onInput(ev) {
			let data = {
				field: fieldname,
				value: ev.currentTarget.type === 'checkbox'
				? ev.currentTarget.checked
				: value
			};

			$$invalidate(0, inputStarted = true);
			dispatch('change', data);
			return true;
		}

		function input_change_handler() {
			value = this.checked;
			$$invalidate(1, value);
		}

		$$self.$$set = $$props => {
			if ('inputStarted' in $$props) $$invalidate(0, inputStarted = $$props.inputStarted);
			if ('value' in $$props) $$invalidate(1, value = $$props.value);
			if ('label' in $$props) $$invalidate(2, label = $$props.label);
			if ('placeholder' in $$props) $$invalidate(3, placeholder = $$props.placeholder);
			if ('fieldname' in $$props) $$invalidate(4, fieldname = $$props.fieldname);
			if ('icon' in $$props) $$invalidate(17, icon = $$props.icon);
			if ('required' in $$props) $$invalidate(5, required = $$props.required);
			if ('readonly' in $$props) $$invalidate(6, readonly = $$props.readonly);
			if ('disabled' in $$props) $$invalidate(7, disabled = $$props.disabled);
			if ('valid' in $$props) $$invalidate(8, valid = $$props.valid);
			if ('validated' in $$props) $$invalidate(9, validated = $$props.validated);
			if ('errors' in $$props) $$invalidate(18, errors = $$props.errors);
			if ('formErrors' in $$props) $$invalidate(19, formErrors = $$props.formErrors);
			if ('formLevelError' in $$props) $$invalidate(20, formLevelError = $$props.formLevelError);
		};

		$$self.$$.update = () => {
			if ($$self.$$.dirty & /*icon*/ 131072) {
				$$invalidate(13, iconClasses = (icon ? ' has-icons-left ' : '') + ' has-icons-right ');
			}

			if ($$self.$$.dirty & /*errors, formErrors*/ 786432) {
				$$invalidate(21, allErrors = [].concat(errors ? errors : [], formErrors ? formErrors : []));
			}

			if ($$self.$$.dirty & /*allErrors, placeholder*/ 2097160) {
				$$invalidate(12, helper = allErrors ? allErrors.join(', ') : placeholder);
			}

			if ($$self.$$.dirty & /*valid, formLevelError*/ 1048832) {
				$$invalidate(11, invalid = valid === false || formLevelError);
			}

			if ($$self.$$.dirty & /*valid, inputStarted*/ 257) {
				$$invalidate(10, validationClasses = valid === true || !inputStarted
				? UICommon$1.CLASS_OK
				: UICommon$1.CLASS_ERR);
			}
		};

		return [
			inputStarted,
			value,
			label,
			placeholder,
			fieldname,
			required,
			readonly,
			disabled,
			valid,
			validated,
			validationClasses,
			invalid,
			helper,
			iconClasses,
			$LOCALE,
			onBlur,
			onInput,
			icon,
			errors,
			formErrors,
			formLevelError,
			allErrors,
			input_change_handler
		];
	}

	class Ui_checkbox extends SvelteComponent {
		constructor(options) {
			super();

			init(this, options, instance$k, create_fragment$k, safe_not_equal, {
				inputStarted: 0,
				value: 1,
				label: 2,
				placeholder: 3,
				fieldname: 4,
				icon: 17,
				required: 5,
				readonly: 6,
				disabled: 7,
				valid: 8,
				validated: 9,
				errors: 18,
				formErrors: 19,
				formLevelError: 20
			});
		}
	}

	/* src/elements/form/ui.color.svelte generated by Svelte v3.44.3 */

	function create_if_block_4$6(ctx) {
		let span;
		let i;
		let i_class_value;

		return {
			c() {
				span = element("span");
				i = element("i");
				attr(i, "class", i_class_value = "fas fa-" + /*icon*/ ctx[4]);
				attr(span, "class", "icon is-small is-left");
			},
			m(target, anchor) {
				insert(target, span, anchor);
				append(span, i);
			},
			p(ctx, dirty) {
				if (dirty & /*icon*/ 16 && i_class_value !== (i_class_value = "fas fa-" + /*icon*/ ctx[4])) {
					attr(i, "class", i_class_value);
				}
			},
			d(detaching) {
				if (detaching) detach(span);
			}
		};
	}

	// (61:4) {#if validated === true }
	function create_if_block_1$9(ctx) {
		let span;

		function select_block_type(ctx, dirty) {
			if (/*valid*/ ctx[7] === true) return create_if_block_2$6;
			if (/*valid*/ ctx[7] === false) return create_if_block_3$6;
		}

		let current_block_type = select_block_type(ctx);
		let if_block = current_block_type && current_block_type(ctx);

		return {
			c() {
				span = element("span");
				if (if_block) if_block.c();
				attr(span, "class", "icon is-small is-right");
			},
			m(target, anchor) {
				insert(target, span, anchor);
				if (if_block) if_block.m(span, null);
			},
			p(ctx, dirty) {
				if (current_block_type !== (current_block_type = select_block_type(ctx))) {
					if (if_block) if_block.d(1);
					if_block = current_block_type && current_block_type(ctx);

					if (if_block) {
						if_block.c();
						if_block.m(span, null);
					}
				}
			},
			d(detaching) {
				if (detaching) detach(span);

				if (if_block) {
					if_block.d();
				}
			}
		};
	}

	// (65:35) 
	function create_if_block_3$6(ctx) {
		let i;

		return {
			c() {
				i = element("i");
				attr(i, "class", "fas fa-exclamation-triangle");
			},
			m(target, anchor) {
				insert(target, i, anchor);
			},
			d(detaching) {
				if (detaching) detach(i);
			}
		};
	}

	// (63:6) {#if valid === true }
	function create_if_block_2$6(ctx) {
		let i;

		return {
			c() {
				i = element("i");
				attr(i, "class", "fas fa-check");
			},
			m(target, anchor) {
				insert(target, i, anchor);
			},
			d(detaching) {
				if (detaching) detach(i);
			}
		};
	}

	// (74:4) {:else}
	function create_else_block$8(ctx) {
		let t;

		return {
			c() {
				t = text("Â ");
			},
			m(target, anchor) {
				insert(target, t, anchor);
			},
			p: noop,
			d(detaching) {
				if (detaching) detach(t);
			}
		};
	}

	// (72:4) {#if !(validated && valid) && (inputStarted) }
	function create_if_block$b(ctx) {
		let t;

		return {
			c() {
				t = text(/*helper*/ ctx[11]);
			},
			m(target, anchor) {
				insert(target, t, anchor);
			},
			p(ctx, dirty) {
				if (dirty & /*helper*/ 2048) set_data(t, /*helper*/ ctx[11]);
			},
			d(detaching) {
				if (detaching) detach(t);
			}
		};
	}

	function create_fragment$j(ctx) {
		let div;
		let input;
		let input_id_value;
		let input_class_value;
		let input_aria_controls_value;
		let input_aria_describedby_value;
		let t0;
		let t1;
		let div_class_value;
		let t2;
		let p;
		let p_class_value;
		let p_id_value;
		let mounted;
		let dispose;
		let if_block0 = /*icon*/ ctx[4] && create_if_block_4$6(ctx);
		let if_block1 = /*validated*/ ctx[8] === true && create_if_block_1$9(ctx);

		function select_block_type_1(ctx, dirty) {
			if (!(/*validated*/ ctx[8] && /*valid*/ ctx[7]) && /*inputStarted*/ ctx[0]) return create_if_block$b;
			return create_else_block$8;
		}

		let current_block_type = select_block_type_1(ctx);
		let if_block2 = current_block_type(ctx);

		return {
			c() {
				div = element("div");
				input = element("input");
				t0 = space();
				if (if_block0) if_block0.c();
				t1 = space();
				if (if_block1) if_block1.c();
				t2 = space();
				p = element("p");
				if_block2.c();
				attr(input, "id", input_id_value = "form-field-color-" + /*fieldname*/ ctx[3]);
				attr(input, "class", input_class_value = "input " + /*validationClasses*/ ctx[9]);
				attr(input, "type", "color");
				attr(input, "name", /*fieldname*/ ctx[3]);
				attr(input, "invalid", /*invalid*/ ctx[10]);
				input.required = /*required*/ ctx[5];
				attr(input, "placeholder", /*placeholder*/ ctx[2]);
				attr(input, "autocomplete", /*fieldname*/ ctx[3]);
				attr(input, "aria-controls", input_aria_controls_value = "input-field-helper-" + /*fieldname*/ ctx[3]);
				input.readOnly = /*readonly*/ ctx[6];
				attr(input, "aria-describedby", input_aria_describedby_value = "input-field-helper-" + /*fieldname*/ ctx[3]);
				attr(div, "class", div_class_value = "control " + /*iconClasses*/ ctx[12]);
				attr(p, "class", p_class_value = "help " + /*validationClasses*/ ctx[9]);
				attr(p, "id", p_id_value = "input-field-helper-" + /*fieldname*/ ctx[3]);
			},
			m(target, anchor) {
				insert(target, div, anchor);
				append(div, input);
				set_input_value(input, /*value*/ ctx[1]);
				append(div, t0);
				if (if_block0) if_block0.m(div, null);
				append(div, t1);
				if (if_block1) if_block1.m(div, null);
				insert(target, t2, anchor);
				insert(target, p, anchor);
				if_block2.m(p, null);

				if (!mounted) {
					dispose = [
						listen(input, "input", /*input_input_handler*/ ctx[19]),
						listen(input, "change", /*onBlur*/ ctx[13]),
						listen(input, "input", /*onInput*/ ctx[14])
					];

					mounted = true;
				}
			},
			p(ctx, [dirty]) {
				if (dirty & /*fieldname*/ 8 && input_id_value !== (input_id_value = "form-field-color-" + /*fieldname*/ ctx[3])) {
					attr(input, "id", input_id_value);
				}

				if (dirty & /*validationClasses*/ 512 && input_class_value !== (input_class_value = "input " + /*validationClasses*/ ctx[9])) {
					attr(input, "class", input_class_value);
				}

				if (dirty & /*fieldname*/ 8) {
					attr(input, "name", /*fieldname*/ ctx[3]);
				}

				if (dirty & /*invalid*/ 1024) {
					attr(input, "invalid", /*invalid*/ ctx[10]);
				}

				if (dirty & /*required*/ 32) {
					input.required = /*required*/ ctx[5];
				}

				if (dirty & /*placeholder*/ 4) {
					attr(input, "placeholder", /*placeholder*/ ctx[2]);
				}

				if (dirty & /*fieldname*/ 8) {
					attr(input, "autocomplete", /*fieldname*/ ctx[3]);
				}

				if (dirty & /*fieldname*/ 8 && input_aria_controls_value !== (input_aria_controls_value = "input-field-helper-" + /*fieldname*/ ctx[3])) {
					attr(input, "aria-controls", input_aria_controls_value);
				}

				if (dirty & /*readonly*/ 64) {
					input.readOnly = /*readonly*/ ctx[6];
				}

				if (dirty & /*fieldname*/ 8 && input_aria_describedby_value !== (input_aria_describedby_value = "input-field-helper-" + /*fieldname*/ ctx[3])) {
					attr(input, "aria-describedby", input_aria_describedby_value);
				}

				if (dirty & /*value*/ 2) {
					set_input_value(input, /*value*/ ctx[1]);
				}

				if (/*icon*/ ctx[4]) {
					if (if_block0) {
						if_block0.p(ctx, dirty);
					} else {
						if_block0 = create_if_block_4$6(ctx);
						if_block0.c();
						if_block0.m(div, t1);
					}
				} else if (if_block0) {
					if_block0.d(1);
					if_block0 = null;
				}

				if (/*validated*/ ctx[8] === true) {
					if (if_block1) {
						if_block1.p(ctx, dirty);
					} else {
						if_block1 = create_if_block_1$9(ctx);
						if_block1.c();
						if_block1.m(div, null);
					}
				} else if (if_block1) {
					if_block1.d(1);
					if_block1 = null;
				}

				if (dirty & /*iconClasses*/ 4096 && div_class_value !== (div_class_value = "control " + /*iconClasses*/ ctx[12])) {
					attr(div, "class", div_class_value);
				}

				if (current_block_type === (current_block_type = select_block_type_1(ctx)) && if_block2) {
					if_block2.p(ctx, dirty);
				} else {
					if_block2.d(1);
					if_block2 = current_block_type(ctx);

					if (if_block2) {
						if_block2.c();
						if_block2.m(p, null);
					}
				}

				if (dirty & /*validationClasses*/ 512 && p_class_value !== (p_class_value = "help " + /*validationClasses*/ ctx[9])) {
					attr(p, "class", p_class_value);
				}

				if (dirty & /*fieldname*/ 8 && p_id_value !== (p_id_value = "input-field-helper-" + /*fieldname*/ ctx[3])) {
					attr(p, "id", p_id_value);
				}
			},
			i: noop,
			o: noop,
			d(detaching) {
				if (detaching) detach(div);
				if (if_block0) if_block0.d();
				if (if_block1) if_block1.d();
				if (detaching) detach(t2);
				if (detaching) detach(p);
				if_block2.d();
				mounted = false;
				run_all(dispose);
			}
		};
	}

	function instance$j($$self, $$props, $$invalidate) {
		let iconClasses;
		let allErrors;
		let helper;
		let invalid;
		let validationClasses;
		let dispatch = createEventDispatcher();
		let { inputStarted = false } = $$props;
		let { value = '' } = $$props;
		let { placeholder = 'Select you favorite color' } = $$props;
		let { fieldname = 'color' } = $$props;
		let { icon = false } = $$props;
		let { required = true } = $$props;
		let { readonly = false } = $$props;
		let { valid = true } = $$props;
		let { validated = false } = $$props;
		let { errors = false } = $$props;
		let { formErrors = false } = $$props;
		let { formLevelError = false } = $$props;

		function onBlur(ev) {
			let data = {
				field: fieldname,
				value: ev.currentTarget.value
			};

			$$invalidate(0, inputStarted = true);
			dispatch('change', data);
			return true;
		}

		function onInput(ev) {
			let data = {
				field: fieldname,
				value: ev.currentTarget.value
			};

			$$invalidate(0, inputStarted = true);
			dispatch('change', data);
			return true;
		}

		function input_input_handler() {
			value = this.value;
			$$invalidate(1, value);
		}

		$$self.$$set = $$props => {
			if ('inputStarted' in $$props) $$invalidate(0, inputStarted = $$props.inputStarted);
			if ('value' in $$props) $$invalidate(1, value = $$props.value);
			if ('placeholder' in $$props) $$invalidate(2, placeholder = $$props.placeholder);
			if ('fieldname' in $$props) $$invalidate(3, fieldname = $$props.fieldname);
			if ('icon' in $$props) $$invalidate(4, icon = $$props.icon);
			if ('required' in $$props) $$invalidate(5, required = $$props.required);
			if ('readonly' in $$props) $$invalidate(6, readonly = $$props.readonly);
			if ('valid' in $$props) $$invalidate(7, valid = $$props.valid);
			if ('validated' in $$props) $$invalidate(8, validated = $$props.validated);
			if ('errors' in $$props) $$invalidate(15, errors = $$props.errors);
			if ('formErrors' in $$props) $$invalidate(16, formErrors = $$props.formErrors);
			if ('formLevelError' in $$props) $$invalidate(17, formLevelError = $$props.formLevelError);
		};

		$$self.$$.update = () => {
			if ($$self.$$.dirty & /*icon*/ 16) {
				$$invalidate(12, iconClasses = (icon ? ' has-icons-left ' : '') + ' has-icons-right ');
			}

			if ($$self.$$.dirty & /*errors, formErrors*/ 98304) {
				$$invalidate(18, allErrors = [].concat(errors ? errors : [], formErrors ? formErrors : []));
			}

			if ($$self.$$.dirty & /*allErrors, placeholder*/ 262148) {
				$$invalidate(11, helper = allErrors ? allErrors.join(', ') : placeholder);
			}

			if ($$self.$$.dirty & /*valid, formLevelError*/ 131200) {
				$$invalidate(10, invalid = valid === false || formLevelError);
			}

			if ($$self.$$.dirty & /*valid, inputStarted*/ 129) {
				$$invalidate(9, validationClasses = valid === true || !inputStarted
				? UICommon$1.CLASS_OK
				: UICommon$1.CLASS_ERR);
			}
		};

		return [
			inputStarted,
			value,
			placeholder,
			fieldname,
			icon,
			required,
			readonly,
			valid,
			validated,
			validationClasses,
			invalid,
			helper,
			iconClasses,
			onBlur,
			onInput,
			errors,
			formErrors,
			formLevelError,
			allErrors,
			input_input_handler
		];
	}

	class Ui_color extends SvelteComponent {
		constructor(options) {
			super();

			init(this, options, instance$j, create_fragment$j, safe_not_equal, {
				inputStarted: 0,
				value: 1,
				placeholder: 2,
				fieldname: 3,
				icon: 4,
				required: 5,
				readonly: 6,
				valid: 7,
				validated: 8,
				errors: 15,
				formErrors: 16,
				formLevelError: 17
			});
		}
	}

	/* src/elements/form/ui.date.svelte generated by Svelte v3.44.3 */

	function create_if_block_4$5(ctx) {
		let span;
		let i;
		let i_class_value;

		return {
			c() {
				span = element("span");
				i = element("i");
				attr(i, "class", i_class_value = "fas fa-" + /*icon*/ ctx[4]);
				attr(span, "class", "icon is-small is-left");
			},
			m(target, anchor) {
				insert(target, span, anchor);
				append(span, i);
			},
			p(ctx, dirty) {
				if (dirty & /*icon*/ 16 && i_class_value !== (i_class_value = "fas fa-" + /*icon*/ ctx[4])) {
					attr(i, "class", i_class_value);
				}
			},
			d(detaching) {
				if (detaching) detach(span);
			}
		};
	}

	// (62:4) {#if validated === true }
	function create_if_block_1$8(ctx) {
		let span;

		function select_block_type(ctx, dirty) {
			if (/*valid*/ ctx[7] === true) return create_if_block_2$5;
			if (/*valid*/ ctx[7] === false) return create_if_block_3$5;
		}

		let current_block_type = select_block_type(ctx);
		let if_block = current_block_type && current_block_type(ctx);

		return {
			c() {
				span = element("span");
				if (if_block) if_block.c();
				attr(span, "class", "icon is-small is-right");
			},
			m(target, anchor) {
				insert(target, span, anchor);
				if (if_block) if_block.m(span, null);
			},
			p(ctx, dirty) {
				if (current_block_type !== (current_block_type = select_block_type(ctx))) {
					if (if_block) if_block.d(1);
					if_block = current_block_type && current_block_type(ctx);

					if (if_block) {
						if_block.c();
						if_block.m(span, null);
					}
				}
			},
			d(detaching) {
				if (detaching) detach(span);

				if (if_block) {
					if_block.d();
				}
			}
		};
	}

	// (66:35) 
	function create_if_block_3$5(ctx) {
		let i;

		return {
			c() {
				i = element("i");
				attr(i, "class", "fas fa-exclamation-triangle");
			},
			m(target, anchor) {
				insert(target, i, anchor);
			},
			d(detaching) {
				if (detaching) detach(i);
			}
		};
	}

	// (64:6) {#if valid === true }
	function create_if_block_2$5(ctx) {
		let i;

		return {
			c() {
				i = element("i");
				attr(i, "class", "fas fa-check");
			},
			m(target, anchor) {
				insert(target, i, anchor);
			},
			d(detaching) {
				if (detaching) detach(i);
			}
		};
	}

	// (75:4) {:else}
	function create_else_block$7(ctx) {
		let t;

		return {
			c() {
				t = text("Â ");
			},
			m(target, anchor) {
				insert(target, t, anchor);
			},
			p: noop,
			d(detaching) {
				if (detaching) detach(t);
			}
		};
	}

	// (73:4) {#if !(validated && valid) && (inputStarted) }
	function create_if_block$a(ctx) {
		let t;

		return {
			c() {
				t = text(/*helper*/ ctx[11]);
			},
			m(target, anchor) {
				insert(target, t, anchor);
			},
			p(ctx, dirty) {
				if (dirty & /*helper*/ 2048) set_data(t, /*helper*/ ctx[11]);
			},
			d(detaching) {
				if (detaching) detach(t);
			}
		};
	}

	function create_fragment$i(ctx) {
		let div;
		let input;
		let input_class_value;
		let input_id_value;
		let input_aria_controls_value;
		let input_aria_describedby_value;
		let t0;
		let t1;
		let div_class_value;
		let t2;
		let p;
		let p_class_value;
		let p_id_value;
		let mounted;
		let dispose;
		let if_block0 = /*icon*/ ctx[4] && create_if_block_4$5(ctx);
		let if_block1 = /*validated*/ ctx[8] === true && create_if_block_1$8(ctx);

		function select_block_type_1(ctx, dirty) {
			if (!(/*validated*/ ctx[8] && /*valid*/ ctx[7]) && /*inputStarted*/ ctx[0]) return create_if_block$a;
			return create_else_block$7;
		}

		let current_block_type = select_block_type_1(ctx);
		let if_block2 = current_block_type(ctx);

		return {
			c() {
				div = element("div");
				input = element("input");
				t0 = space();
				if (if_block0) if_block0.c();
				t1 = space();
				if (if_block1) if_block1.c();
				t2 = space();
				p = element("p");
				if_block2.c();
				attr(input, "class", input_class_value = "input " + /*validationClasses*/ ctx[9]);
				attr(input, "id", input_id_value = "form-field-date-" + /*fieldname*/ ctx[3]);
				attr(input, "type", "date");
				attr(input, "name", /*fieldname*/ ctx[3]);
				attr(input, "invalid", /*invalid*/ ctx[10]);
				input.required = /*required*/ ctx[5];
				attr(input, "placeholder", /*placeholder*/ ctx[2]);
				input.readOnly = /*readonly*/ ctx[6];
				attr(input, "autocomplete", /*fieldname*/ ctx[3]);
				attr(input, "aria-controls", input_aria_controls_value = "input-field-helper-" + /*fieldname*/ ctx[3]);
				attr(input, "aria-describedby", input_aria_describedby_value = "input-field-helper-" + /*fieldname*/ ctx[3]);
				attr(div, "class", div_class_value = "control " + /*iconClasses*/ ctx[12]);
				attr(p, "class", p_class_value = "help " + /*validationClasses*/ ctx[9]);
				attr(p, "id", p_id_value = "input-field-helper-" + /*fieldname*/ ctx[3]);
			},
			m(target, anchor) {
				insert(target, div, anchor);
				append(div, input);
				set_input_value(input, /*value*/ ctx[1]);
				append(div, t0);
				if (if_block0) if_block0.m(div, null);
				append(div, t1);
				if (if_block1) if_block1.m(div, null);
				insert(target, t2, anchor);
				insert(target, p, anchor);
				if_block2.m(p, null);

				if (!mounted) {
					dispose = [
						listen(input, "input", /*input_input_handler*/ ctx[19]),
						listen(input, "change", /*onBlur*/ ctx[13]),
						listen(input, "input", /*onInput*/ ctx[14])
					];

					mounted = true;
				}
			},
			p(ctx, [dirty]) {
				if (dirty & /*validationClasses*/ 512 && input_class_value !== (input_class_value = "input " + /*validationClasses*/ ctx[9])) {
					attr(input, "class", input_class_value);
				}

				if (dirty & /*fieldname*/ 8 && input_id_value !== (input_id_value = "form-field-date-" + /*fieldname*/ ctx[3])) {
					attr(input, "id", input_id_value);
				}

				if (dirty & /*fieldname*/ 8) {
					attr(input, "name", /*fieldname*/ ctx[3]);
				}

				if (dirty & /*invalid*/ 1024) {
					attr(input, "invalid", /*invalid*/ ctx[10]);
				}

				if (dirty & /*required*/ 32) {
					input.required = /*required*/ ctx[5];
				}

				if (dirty & /*placeholder*/ 4) {
					attr(input, "placeholder", /*placeholder*/ ctx[2]);
				}

				if (dirty & /*readonly*/ 64) {
					input.readOnly = /*readonly*/ ctx[6];
				}

				if (dirty & /*fieldname*/ 8) {
					attr(input, "autocomplete", /*fieldname*/ ctx[3]);
				}

				if (dirty & /*fieldname*/ 8 && input_aria_controls_value !== (input_aria_controls_value = "input-field-helper-" + /*fieldname*/ ctx[3])) {
					attr(input, "aria-controls", input_aria_controls_value);
				}

				if (dirty & /*fieldname*/ 8 && input_aria_describedby_value !== (input_aria_describedby_value = "input-field-helper-" + /*fieldname*/ ctx[3])) {
					attr(input, "aria-describedby", input_aria_describedby_value);
				}

				if (dirty & /*value*/ 2) {
					set_input_value(input, /*value*/ ctx[1]);
				}

				if (/*icon*/ ctx[4]) {
					if (if_block0) {
						if_block0.p(ctx, dirty);
					} else {
						if_block0 = create_if_block_4$5(ctx);
						if_block0.c();
						if_block0.m(div, t1);
					}
				} else if (if_block0) {
					if_block0.d(1);
					if_block0 = null;
				}

				if (/*validated*/ ctx[8] === true) {
					if (if_block1) {
						if_block1.p(ctx, dirty);
					} else {
						if_block1 = create_if_block_1$8(ctx);
						if_block1.c();
						if_block1.m(div, null);
					}
				} else if (if_block1) {
					if_block1.d(1);
					if_block1 = null;
				}

				if (dirty & /*iconClasses*/ 4096 && div_class_value !== (div_class_value = "control " + /*iconClasses*/ ctx[12])) {
					attr(div, "class", div_class_value);
				}

				if (current_block_type === (current_block_type = select_block_type_1(ctx)) && if_block2) {
					if_block2.p(ctx, dirty);
				} else {
					if_block2.d(1);
					if_block2 = current_block_type(ctx);

					if (if_block2) {
						if_block2.c();
						if_block2.m(p, null);
					}
				}

				if (dirty & /*validationClasses*/ 512 && p_class_value !== (p_class_value = "help " + /*validationClasses*/ ctx[9])) {
					attr(p, "class", p_class_value);
				}

				if (dirty & /*fieldname*/ 8 && p_id_value !== (p_id_value = "input-field-helper-" + /*fieldname*/ ctx[3])) {
					attr(p, "id", p_id_value);
				}
			},
			i: noop,
			o: noop,
			d(detaching) {
				if (detaching) detach(div);
				if (if_block0) if_block0.d();
				if (if_block1) if_block1.d();
				if (detaching) detach(t2);
				if (detaching) detach(p);
				if_block2.d();
				mounted = false;
				run_all(dispose);
			}
		};
	}

	function instance$i($$self, $$props, $$invalidate) {
		let iconClasses;
		let allErrors;
		let helper;
		let invalid;
		let validationClasses;
		let dispatch = createEventDispatcher();
		let { inputStarted = false } = $$props;
		let { value = '' } = $$props;
		let { placeholder = 'Date and time of event' } = $$props;
		let { fieldname = 'datetime' } = $$props;
		let { icon = false } = $$props;
		let { required = true } = $$props;
		let { readonly = false } = $$props;
		let { valid = true } = $$props;
		let { validated = false } = $$props;
		let { errors = false } = $$props;
		let { formErrors = false } = $$props;
		let { formLevelError = false } = $$props;

		function onBlur(ev) {
			let data = {
				field: fieldname,
				value: ev.currentTarget.value
			};

			$$invalidate(0, inputStarted = true);
			dispatch('change', data);
			return true;
		}

		function onInput(ev) {
			let data = {
				field: fieldname,
				value: ev.currentTarget.value
			};

			$$invalidate(0, inputStarted = true);
			dispatch('change', data);
			return true;
		}

		function input_input_handler() {
			value = this.value;
			$$invalidate(1, value);
		}

		$$self.$$set = $$props => {
			if ('inputStarted' in $$props) $$invalidate(0, inputStarted = $$props.inputStarted);
			if ('value' in $$props) $$invalidate(1, value = $$props.value);
			if ('placeholder' in $$props) $$invalidate(2, placeholder = $$props.placeholder);
			if ('fieldname' in $$props) $$invalidate(3, fieldname = $$props.fieldname);
			if ('icon' in $$props) $$invalidate(4, icon = $$props.icon);
			if ('required' in $$props) $$invalidate(5, required = $$props.required);
			if ('readonly' in $$props) $$invalidate(6, readonly = $$props.readonly);
			if ('valid' in $$props) $$invalidate(7, valid = $$props.valid);
			if ('validated' in $$props) $$invalidate(8, validated = $$props.validated);
			if ('errors' in $$props) $$invalidate(15, errors = $$props.errors);
			if ('formErrors' in $$props) $$invalidate(16, formErrors = $$props.formErrors);
			if ('formLevelError' in $$props) $$invalidate(17, formLevelError = $$props.formLevelError);
		};

		$$self.$$.update = () => {
			if ($$self.$$.dirty & /*icon*/ 16) {
				$$invalidate(12, iconClasses = (icon ? ' has-icons-left ' : '') + ' has-icons-right ');
			}

			if ($$self.$$.dirty & /*errors, formErrors*/ 98304) {
				$$invalidate(18, allErrors = [].concat(errors ? errors : [], formErrors ? formErrors : []));
			}

			if ($$self.$$.dirty & /*allErrors, placeholder*/ 262148) {
				$$invalidate(11, helper = allErrors ? allErrors.join(', ') : placeholder);
			}

			if ($$self.$$.dirty & /*valid, formLevelError*/ 131200) {
				$$invalidate(10, invalid = valid === false || formLevelError);
			}

			if ($$self.$$.dirty & /*valid, inputStarted*/ 129) {
				$$invalidate(9, validationClasses = valid === true || !inputStarted
				? UICommon$1.CLASS_OK
				: UICommon$1.CLASS_ERR);
			}
		};

		return [
			inputStarted,
			value,
			placeholder,
			fieldname,
			icon,
			required,
			readonly,
			valid,
			validated,
			validationClasses,
			invalid,
			helper,
			iconClasses,
			onBlur,
			onInput,
			errors,
			formErrors,
			formLevelError,
			allErrors,
			input_input_handler
		];
	}

	class Ui_date extends SvelteComponent {
		constructor(options) {
			super();

			init(this, options, instance$i, create_fragment$i, safe_not_equal, {
				inputStarted: 0,
				value: 1,
				placeholder: 2,
				fieldname: 3,
				icon: 4,
				required: 5,
				readonly: 6,
				valid: 7,
				validated: 8,
				errors: 15,
				formErrors: 16,
				formLevelError: 17
			});
		}
	}

	/* src/elements/form/ui.email.svelte generated by Svelte v3.44.3 */

	function create_if_block_4$4(ctx) {
		let span;
		let i;
		let i_class_value;

		return {
			c() {
				span = element("span");
				i = element("i");
				attr(i, "class", i_class_value = "fas fa-" + /*icon*/ ctx[4]);
				attr(span, "class", "icon is-small is-left");
			},
			m(target, anchor) {
				insert(target, span, anchor);
				append(span, i);
			},
			p(ctx, dirty) {
				if (dirty & /*icon*/ 16 && i_class_value !== (i_class_value = "fas fa-" + /*icon*/ ctx[4])) {
					attr(i, "class", i_class_value);
				}
			},
			d(detaching) {
				if (detaching) detach(span);
			}
		};
	}

	// (67:4) {#if validated === true }
	function create_if_block_1$7(ctx) {
		let span;

		function select_block_type(ctx, dirty) {
			if (/*valid*/ ctx[8] === true) return create_if_block_2$4;
			if (/*valid*/ ctx[8] === false) return create_if_block_3$4;
		}

		let current_block_type = select_block_type(ctx);
		let if_block = current_block_type && current_block_type(ctx);

		return {
			c() {
				span = element("span");
				if (if_block) if_block.c();
				attr(span, "class", "icon is-small is-right");
			},
			m(target, anchor) {
				insert(target, span, anchor);
				if (if_block) if_block.m(span, null);
			},
			p(ctx, dirty) {
				if (current_block_type !== (current_block_type = select_block_type(ctx))) {
					if (if_block) if_block.d(1);
					if_block = current_block_type && current_block_type(ctx);

					if (if_block) {
						if_block.c();
						if_block.m(span, null);
					}
				}
			},
			d(detaching) {
				if (detaching) detach(span);

				if (if_block) {
					if_block.d();
				}
			}
		};
	}

	// (71:35) 
	function create_if_block_3$4(ctx) {
		let i;

		return {
			c() {
				i = element("i");
				attr(i, "class", "fas fa-exclamation-triangle");
			},
			m(target, anchor) {
				insert(target, i, anchor);
			},
			d(detaching) {
				if (detaching) detach(i);
			}
		};
	}

	// (69:6) {#if valid === true }
	function create_if_block_2$4(ctx) {
		let i;

		return {
			c() {
				i = element("i");
				attr(i, "class", "fas fa-check");
			},
			m(target, anchor) {
				insert(target, i, anchor);
			},
			d(detaching) {
				if (detaching) detach(i);
			}
		};
	}

	// (80:4) {:else}
	function create_else_block$6(ctx) {
		let t;

		return {
			c() {
				t = text("Â ");
			},
			m(target, anchor) {
				insert(target, t, anchor);
			},
			p: noop,
			d(detaching) {
				if (detaching) detach(t);
			}
		};
	}

	// (78:4) {#if !(validated && valid) && (inputStarted) }
	function create_if_block$9(ctx) {
		let t;

		return {
			c() {
				t = text(/*helper*/ ctx[12]);
			},
			m(target, anchor) {
				insert(target, t, anchor);
			},
			p(ctx, dirty) {
				if (dirty & /*helper*/ 4096) set_data(t, /*helper*/ ctx[12]);
			},
			d(detaching) {
				if (detaching) detach(t);
			}
		};
	}

	function create_fragment$h(ctx) {
		let div;
		let input;
		let input_class_value;
		let input_id_value;
		let input_aria_controls_value;
		let input_aria_describedby_value;
		let t0;
		let t1;
		let div_class_value;
		let t2;
		let p;
		let p_class_value;
		let p_id_value;
		let mounted;
		let dispose;
		let if_block0 = /*icon*/ ctx[4] && create_if_block_4$4(ctx);
		let if_block1 = /*validated*/ ctx[9] === true && create_if_block_1$7(ctx);

		function select_block_type_1(ctx, dirty) {
			if (!(/*validated*/ ctx[9] && /*valid*/ ctx[8]) && /*inputStarted*/ ctx[0]) return create_if_block$9;
			return create_else_block$6;
		}

		let current_block_type = select_block_type_1(ctx);
		let if_block2 = current_block_type(ctx);

		return {
			c() {
				div = element("div");
				input = element("input");
				t0 = space();
				if (if_block0) if_block0.c();
				t1 = space();
				if (if_block1) if_block1.c();
				t2 = space();
				p = element("p");
				if_block2.c();
				attr(input, "class", input_class_value = "input " + /*validationClasses*/ ctx[10]);
				attr(input, "id", input_id_value = "form-field-email-" + /*fieldname*/ ctx[3]);
				attr(input, "type", "email");
				attr(input, "name", /*fieldname*/ ctx[3]);
				attr(input, "invalid", /*invalid*/ ctx[11]);
				input.required = /*required*/ ctx[5];
				input.readOnly = /*readonly*/ ctx[6];
				input.disabled = /*disabled*/ ctx[7];
				attr(input, "placeholder", /*placeholder*/ ctx[2]);
				attr(input, "autocomplete", /*fieldname*/ ctx[3]);
				attr(input, "aria-controls", input_aria_controls_value = "input-field-helper-" + /*fieldname*/ ctx[3]);
				attr(input, "aria-describedby", input_aria_describedby_value = "input-field-helper-" + /*fieldname*/ ctx[3]);
				attr(div, "class", div_class_value = "control " + /*iconClasses*/ ctx[13]);
				attr(p, "class", p_class_value = "help " + /*validationClasses*/ ctx[10]);
				attr(p, "id", p_id_value = "input-field-helper-" + /*fieldname*/ ctx[3]);
			},
			m(target, anchor) {
				insert(target, div, anchor);
				append(div, input);
				set_input_value(input, /*value*/ ctx[1]);
				append(div, t0);
				if (if_block0) if_block0.m(div, null);
				append(div, t1);
				if (if_block1) if_block1.m(div, null);
				insert(target, t2, anchor);
				insert(target, p, anchor);
				if_block2.m(p, null);

				if (!mounted) {
					dispose = [
						listen(input, "input", /*input_input_handler*/ ctx[20]),
						listen(input, "change", /*onBlur*/ ctx[14]),
						listen(input, "input", /*onInput*/ ctx[15])
					];

					mounted = true;
				}
			},
			p(ctx, [dirty]) {
				if (dirty & /*validationClasses*/ 1024 && input_class_value !== (input_class_value = "input " + /*validationClasses*/ ctx[10])) {
					attr(input, "class", input_class_value);
				}

				if (dirty & /*fieldname*/ 8 && input_id_value !== (input_id_value = "form-field-email-" + /*fieldname*/ ctx[3])) {
					attr(input, "id", input_id_value);
				}

				if (dirty & /*fieldname*/ 8) {
					attr(input, "name", /*fieldname*/ ctx[3]);
				}

				if (dirty & /*invalid*/ 2048) {
					attr(input, "invalid", /*invalid*/ ctx[11]);
				}

				if (dirty & /*required*/ 32) {
					input.required = /*required*/ ctx[5];
				}

				if (dirty & /*readonly*/ 64) {
					input.readOnly = /*readonly*/ ctx[6];
				}

				if (dirty & /*disabled*/ 128) {
					input.disabled = /*disabled*/ ctx[7];
				}

				if (dirty & /*placeholder*/ 4) {
					attr(input, "placeholder", /*placeholder*/ ctx[2]);
				}

				if (dirty & /*fieldname*/ 8) {
					attr(input, "autocomplete", /*fieldname*/ ctx[3]);
				}

				if (dirty & /*fieldname*/ 8 && input_aria_controls_value !== (input_aria_controls_value = "input-field-helper-" + /*fieldname*/ ctx[3])) {
					attr(input, "aria-controls", input_aria_controls_value);
				}

				if (dirty & /*fieldname*/ 8 && input_aria_describedby_value !== (input_aria_describedby_value = "input-field-helper-" + /*fieldname*/ ctx[3])) {
					attr(input, "aria-describedby", input_aria_describedby_value);
				}

				if (dirty & /*value*/ 2 && input.value !== /*value*/ ctx[1]) {
					set_input_value(input, /*value*/ ctx[1]);
				}

				if (/*icon*/ ctx[4]) {
					if (if_block0) {
						if_block0.p(ctx, dirty);
					} else {
						if_block0 = create_if_block_4$4(ctx);
						if_block0.c();
						if_block0.m(div, t1);
					}
				} else if (if_block0) {
					if_block0.d(1);
					if_block0 = null;
				}

				if (/*validated*/ ctx[9] === true) {
					if (if_block1) {
						if_block1.p(ctx, dirty);
					} else {
						if_block1 = create_if_block_1$7(ctx);
						if_block1.c();
						if_block1.m(div, null);
					}
				} else if (if_block1) {
					if_block1.d(1);
					if_block1 = null;
				}

				if (dirty & /*iconClasses*/ 8192 && div_class_value !== (div_class_value = "control " + /*iconClasses*/ ctx[13])) {
					attr(div, "class", div_class_value);
				}

				if (current_block_type === (current_block_type = select_block_type_1(ctx)) && if_block2) {
					if_block2.p(ctx, dirty);
				} else {
					if_block2.d(1);
					if_block2 = current_block_type(ctx);

					if (if_block2) {
						if_block2.c();
						if_block2.m(p, null);
					}
				}

				if (dirty & /*validationClasses*/ 1024 && p_class_value !== (p_class_value = "help " + /*validationClasses*/ ctx[10])) {
					attr(p, "class", p_class_value);
				}

				if (dirty & /*fieldname*/ 8 && p_id_value !== (p_id_value = "input-field-helper-" + /*fieldname*/ ctx[3])) {
					attr(p, "id", p_id_value);
				}
			},
			i: noop,
			o: noop,
			d(detaching) {
				if (detaching) detach(div);
				if (if_block0) if_block0.d();
				if (if_block1) if_block1.d();
				if (detaching) detach(t2);
				if (detaching) detach(p);
				if_block2.d();
				mounted = false;
				run_all(dispose);
			}
		};
	}

	function instance$h($$self, $$props, $$invalidate) {
		let iconClasses;
		let allErrors;
		let helper;
		let invalid;
		let validationClasses;
		let dispatch = createEventDispatcher();
		let { inputStarted = false } = $$props;
		let { value = '' } = $$props;
		let { placeholder = '' } = $$props;
		let { fieldname = 'email' } = $$props;
		let { icon = false } = $$props;
		let { required = true } = $$props;
		let { readonly = false } = $$props;
		let { disabled = false } = $$props;
		let { valid = true } = $$props;
		let { validated = false } = $$props;
		let { errors = false } = $$props;
		let { formErrors = false } = $$props;
		let { formLevelError = false } = $$props;

		function onBlur(ev) {
			let data = {
				field: fieldname,
				value: ev.currentTarget.value
			};

			$$invalidate(0, inputStarted = true);
			dispatch('change', data);
			return true;
		}

		function onInput(ev) {
			let data = {
				field: fieldname,
				value: ev.currentTarget.value
			};

			$$invalidate(0, inputStarted = true);
			dispatch('change', data);
			return true;
		}

		function input_input_handler() {
			value = this.value;
			$$invalidate(1, value);
		}

		$$self.$$set = $$props => {
			if ('inputStarted' in $$props) $$invalidate(0, inputStarted = $$props.inputStarted);
			if ('value' in $$props) $$invalidate(1, value = $$props.value);
			if ('placeholder' in $$props) $$invalidate(2, placeholder = $$props.placeholder);
			if ('fieldname' in $$props) $$invalidate(3, fieldname = $$props.fieldname);
			if ('icon' in $$props) $$invalidate(4, icon = $$props.icon);
			if ('required' in $$props) $$invalidate(5, required = $$props.required);
			if ('readonly' in $$props) $$invalidate(6, readonly = $$props.readonly);
			if ('disabled' in $$props) $$invalidate(7, disabled = $$props.disabled);
			if ('valid' in $$props) $$invalidate(8, valid = $$props.valid);
			if ('validated' in $$props) $$invalidate(9, validated = $$props.validated);
			if ('errors' in $$props) $$invalidate(16, errors = $$props.errors);
			if ('formErrors' in $$props) $$invalidate(17, formErrors = $$props.formErrors);
			if ('formLevelError' in $$props) $$invalidate(18, formLevelError = $$props.formLevelError);
		};

		$$self.$$.update = () => {
			if ($$self.$$.dirty & /*icon*/ 16) {
				$$invalidate(13, iconClasses = (icon ? ' has-icons-left ' : '') + ' has-icons-right ');
			}

			if ($$self.$$.dirty & /*errors, formErrors*/ 196608) {
				$$invalidate(19, allErrors = [].concat(errors ? errors : [], formErrors ? formErrors : []));
			}

			if ($$self.$$.dirty & /*allErrors, placeholder*/ 524292) {
				$$invalidate(12, helper = allErrors ? allErrors.join(', ') : placeholder);
			}

			if ($$self.$$.dirty & /*valid, formLevelError*/ 262400) {
				$$invalidate(11, invalid = valid === false || formLevelError);
			}

			if ($$self.$$.dirty & /*valid, inputStarted*/ 257) {
				$$invalidate(10, validationClasses = valid === true || !inputStarted
				? UICommon$1.CLASS_OK
				: UICommon$1.CLASS_ERR);
			}
		};

		return [
			inputStarted,
			value,
			placeholder,
			fieldname,
			icon,
			required,
			readonly,
			disabled,
			valid,
			validated,
			validationClasses,
			invalid,
			helper,
			iconClasses,
			onBlur,
			onInput,
			errors,
			formErrors,
			formLevelError,
			allErrors,
			input_input_handler
		];
	}

	class Ui_email extends SvelteComponent {
		constructor(options) {
			super();

			init(this, options, instance$h, create_fragment$h, safe_not_equal, {
				inputStarted: 0,
				value: 1,
				placeholder: 2,
				fieldname: 3,
				icon: 4,
				required: 5,
				readonly: 6,
				disabled: 7,
				valid: 8,
				validated: 9,
				errors: 16,
				formErrors: 17,
				formLevelError: 18
			});
		}
	}

	/* src/elements/form/ui.hidden.svelte generated by Svelte v3.44.3 */

	function create_fragment$g(ctx) {
		let input;
		let mounted;
		let dispose;

		return {
			c() {
				input = element("input");
				attr(input, "type", "hidden");
				input.required = /*required*/ ctx[2];
				input.readOnly = /*readonly*/ ctx[3];
				attr(input, "name", /*fieldname*/ ctx[1]);
			},
			m(target, anchor) {
				insert(target, input, anchor);
				set_input_value(input, /*value*/ ctx[0]);

				if (!mounted) {
					dispose = listen(input, "input", /*input_input_handler*/ ctx[4]);
					mounted = true;
				}
			},
			p(ctx, [dirty]) {
				if (dirty & /*required*/ 4) {
					input.required = /*required*/ ctx[2];
				}

				if (dirty & /*readonly*/ 8) {
					input.readOnly = /*readonly*/ ctx[3];
				}

				if (dirty & /*fieldname*/ 2) {
					attr(input, "name", /*fieldname*/ ctx[1]);
				}

				if (dirty & /*value*/ 1) {
					set_input_value(input, /*value*/ ctx[0]);
				}
			},
			i: noop,
			o: noop,
			d(detaching) {
				if (detaching) detach(input);
				mounted = false;
				dispose();
			}
		};
	}

	function instance$g($$self, $$props, $$invalidate) {
		let { value = '' } = $$props;
		let { fieldname = 'hidden' } = $$props;
		let { required = true } = $$props;
		let { readonly = false } = $$props;

		function input_input_handler() {
			value = this.value;
			$$invalidate(0, value);
		}

		$$self.$$set = $$props => {
			if ('value' in $$props) $$invalidate(0, value = $$props.value);
			if ('fieldname' in $$props) $$invalidate(1, fieldname = $$props.fieldname);
			if ('required' in $$props) $$invalidate(2, required = $$props.required);
			if ('readonly' in $$props) $$invalidate(3, readonly = $$props.readonly);
		};

		return [value, fieldname, required, readonly, input_input_handler];
	}

	class Ui_hidden extends SvelteComponent {
		constructor(options) {
			super();

			init(this, options, instance$g, create_fragment$g, safe_not_equal, {
				value: 0,
				fieldname: 1,
				required: 2,
				readonly: 3
			});
		}
	}

	/* src/elements/form/ui.password.svelte generated by Svelte v3.44.3 */

	function create_if_block_4$3(ctx) {
		let span;
		let i;
		let i_class_value;

		return {
			c() {
				span = element("span");
				i = element("i");
				attr(i, "class", i_class_value = "fas fa-" + /*icon*/ ctx[4]);
				attr(span, "class", "icon is-small is-left");
			},
			m(target, anchor) {
				insert(target, span, anchor);
				append(span, i);
			},
			p(ctx, dirty) {
				if (dirty & /*icon*/ 16 && i_class_value !== (i_class_value = "fas fa-" + /*icon*/ ctx[4])) {
					attr(i, "class", i_class_value);
				}
			},
			d(detaching) {
				if (detaching) detach(span);
			}
		};
	}

	// (58:4) {#if validated === true }
	function create_if_block_1$6(ctx) {
		let span;

		function select_block_type(ctx, dirty) {
			if (/*valid*/ ctx[7] === true) return create_if_block_2$3;
			if (/*valid*/ ctx[7] === false) return create_if_block_3$3;
		}

		let current_block_type = select_block_type(ctx);
		let if_block = current_block_type && current_block_type(ctx);

		return {
			c() {
				span = element("span");
				if (if_block) if_block.c();
				attr(span, "class", "icon is-small is-right");
			},
			m(target, anchor) {
				insert(target, span, anchor);
				if (if_block) if_block.m(span, null);
			},
			p(ctx, dirty) {
				if (current_block_type !== (current_block_type = select_block_type(ctx))) {
					if (if_block) if_block.d(1);
					if_block = current_block_type && current_block_type(ctx);

					if (if_block) {
						if_block.c();
						if_block.m(span, null);
					}
				}
			},
			d(detaching) {
				if (detaching) detach(span);

				if (if_block) {
					if_block.d();
				}
			}
		};
	}

	// (62:35) 
	function create_if_block_3$3(ctx) {
		let i;

		return {
			c() {
				i = element("i");
				attr(i, "class", "fas fa-exclamation-triangle");
			},
			m(target, anchor) {
				insert(target, i, anchor);
			},
			d(detaching) {
				if (detaching) detach(i);
			}
		};
	}

	// (60:6) {#if valid === true }
	function create_if_block_2$3(ctx) {
		let i;

		return {
			c() {
				i = element("i");
				attr(i, "class", "fas fa-check");
			},
			m(target, anchor) {
				insert(target, i, anchor);
			},
			d(detaching) {
				if (detaching) detach(i);
			}
		};
	}

	// (71:4) {:else}
	function create_else_block$5(ctx) {
		let t;

		return {
			c() {
				t = text("Â ");
			},
			m(target, anchor) {
				insert(target, t, anchor);
			},
			p: noop,
			d(detaching) {
				if (detaching) detach(t);
			}
		};
	}

	// (69:4) {#if !(validated && valid) && (inputStarted) }
	function create_if_block$8(ctx) {
		let t;

		return {
			c() {
				t = text(/*helper*/ ctx[11]);
			},
			m(target, anchor) {
				insert(target, t, anchor);
			},
			p(ctx, dirty) {
				if (dirty & /*helper*/ 2048) set_data(t, /*helper*/ ctx[11]);
			},
			d(detaching) {
				if (detaching) detach(t);
			}
		};
	}

	function create_fragment$f(ctx) {
		let div;
		let input;
		let input_class_value;
		let input_id_value;
		let input_aria_controls_value;
		let input_aria_describedby_value;
		let t0;
		let t1;
		let div_class_value;
		let t2;
		let p;
		let p_class_value;
		let p_id_value;
		let mounted;
		let dispose;
		let if_block0 = /*icon*/ ctx[4] && create_if_block_4$3(ctx);
		let if_block1 = /*validated*/ ctx[8] === true && create_if_block_1$6(ctx);

		function select_block_type_1(ctx, dirty) {
			if (!(/*validated*/ ctx[8] && /*valid*/ ctx[7]) && /*inputStarted*/ ctx[0]) return create_if_block$8;
			return create_else_block$5;
		}

		let current_block_type = select_block_type_1(ctx);
		let if_block2 = current_block_type(ctx);

		return {
			c() {
				div = element("div");
				input = element("input");
				t0 = space();
				if (if_block0) if_block0.c();
				t1 = space();
				if (if_block1) if_block1.c();
				t2 = space();
				p = element("p");
				if_block2.c();
				attr(input, "class", input_class_value = "input " + /*validationClasses*/ ctx[9]);
				input.readOnly = /*readonly*/ ctx[6];
				attr(input, "id", input_id_value = "form-field-password-" + /*fieldname*/ ctx[3]);
				attr(input, "type", "password");
				attr(input, "name", /*fieldname*/ ctx[3]);
				attr(input, "invalid", /*invalid*/ ctx[10]);
				input.required = /*required*/ ctx[5];
				attr(input, "placeholder", /*placeholder*/ ctx[2]);
				attr(input, "autocomplete", /*fieldname*/ ctx[3]);
				attr(input, "aria-controls", input_aria_controls_value = "input-field-helper-" + /*fieldname*/ ctx[3]);
				attr(input, "aria-describedby", input_aria_describedby_value = "input-field-helper-" + /*fieldname*/ ctx[3]);
				attr(div, "class", div_class_value = "control " + /*iconClasses*/ ctx[12]);
				attr(p, "class", p_class_value = "help " + /*validationClasses*/ ctx[9]);
				attr(p, "id", p_id_value = "input-field-helper-" + /*fieldname*/ ctx[3]);
			},
			m(target, anchor) {
				insert(target, div, anchor);
				append(div, input);
				set_input_value(input, /*value*/ ctx[1]);
				append(div, t0);
				if (if_block0) if_block0.m(div, null);
				append(div, t1);
				if (if_block1) if_block1.m(div, null);
				insert(target, t2, anchor);
				insert(target, p, anchor);
				if_block2.m(p, null);

				if (!mounted) {
					dispose = [
						listen(input, "input", /*input_input_handler*/ ctx[19]),
						listen(input, "change", /*onBlur*/ ctx[13]),
						listen(input, "input", /*onInput*/ ctx[14])
					];

					mounted = true;
				}
			},
			p(ctx, [dirty]) {
				if (dirty & /*validationClasses*/ 512 && input_class_value !== (input_class_value = "input " + /*validationClasses*/ ctx[9])) {
					attr(input, "class", input_class_value);
				}

				if (dirty & /*readonly*/ 64) {
					input.readOnly = /*readonly*/ ctx[6];
				}

				if (dirty & /*fieldname*/ 8 && input_id_value !== (input_id_value = "form-field-password-" + /*fieldname*/ ctx[3])) {
					attr(input, "id", input_id_value);
				}

				if (dirty & /*fieldname*/ 8) {
					attr(input, "name", /*fieldname*/ ctx[3]);
				}

				if (dirty & /*invalid*/ 1024) {
					attr(input, "invalid", /*invalid*/ ctx[10]);
				}

				if (dirty & /*required*/ 32) {
					input.required = /*required*/ ctx[5];
				}

				if (dirty & /*placeholder*/ 4) {
					attr(input, "placeholder", /*placeholder*/ ctx[2]);
				}

				if (dirty & /*fieldname*/ 8) {
					attr(input, "autocomplete", /*fieldname*/ ctx[3]);
				}

				if (dirty & /*fieldname*/ 8 && input_aria_controls_value !== (input_aria_controls_value = "input-field-helper-" + /*fieldname*/ ctx[3])) {
					attr(input, "aria-controls", input_aria_controls_value);
				}

				if (dirty & /*fieldname*/ 8 && input_aria_describedby_value !== (input_aria_describedby_value = "input-field-helper-" + /*fieldname*/ ctx[3])) {
					attr(input, "aria-describedby", input_aria_describedby_value);
				}

				if (dirty & /*value*/ 2 && input.value !== /*value*/ ctx[1]) {
					set_input_value(input, /*value*/ ctx[1]);
				}

				if (/*icon*/ ctx[4]) {
					if (if_block0) {
						if_block0.p(ctx, dirty);
					} else {
						if_block0 = create_if_block_4$3(ctx);
						if_block0.c();
						if_block0.m(div, t1);
					}
				} else if (if_block0) {
					if_block0.d(1);
					if_block0 = null;
				}

				if (/*validated*/ ctx[8] === true) {
					if (if_block1) {
						if_block1.p(ctx, dirty);
					} else {
						if_block1 = create_if_block_1$6(ctx);
						if_block1.c();
						if_block1.m(div, null);
					}
				} else if (if_block1) {
					if_block1.d(1);
					if_block1 = null;
				}

				if (dirty & /*iconClasses*/ 4096 && div_class_value !== (div_class_value = "control " + /*iconClasses*/ ctx[12])) {
					attr(div, "class", div_class_value);
				}

				if (current_block_type === (current_block_type = select_block_type_1(ctx)) && if_block2) {
					if_block2.p(ctx, dirty);
				} else {
					if_block2.d(1);
					if_block2 = current_block_type(ctx);

					if (if_block2) {
						if_block2.c();
						if_block2.m(p, null);
					}
				}

				if (dirty & /*validationClasses*/ 512 && p_class_value !== (p_class_value = "help " + /*validationClasses*/ ctx[9])) {
					attr(p, "class", p_class_value);
				}

				if (dirty & /*fieldname*/ 8 && p_id_value !== (p_id_value = "input-field-helper-" + /*fieldname*/ ctx[3])) {
					attr(p, "id", p_id_value);
				}
			},
			i: noop,
			o: noop,
			d(detaching) {
				if (detaching) detach(div);
				if (if_block0) if_block0.d();
				if (if_block1) if_block1.d();
				if (detaching) detach(t2);
				if (detaching) detach(p);
				if_block2.d();
				mounted = false;
				run_all(dispose);
			}
		};
	}

	function instance$f($$self, $$props, $$invalidate) {
		let iconClasses;
		let allErrors;
		let helper;
		let invalid;
		let validationClasses;
		let dispatch = createEventDispatcher();
		let { inputStarted = false } = $$props;
		let { value = '' } = $$props;
		let { placeholder = 'input some text here, please' } = $$props;
		let { fieldname = 'password' } = $$props;
		let { icon = false } = $$props;
		let { required = true } = $$props;
		let { readonly = false } = $$props;
		let { valid = true } = $$props;
		let { validated = false } = $$props;
		let { errors = false } = $$props;
		let { formErrors = false } = $$props;
		let { formLevelError = false } = $$props;

		function onBlur(ev) {
			let data = {
				field: fieldname,
				value: ev.currentTarget.value
			};

			$$invalidate(0, inputStarted = true);
			dispatch('change', data);
			return true;
		}

		function onInput(ev) {
			let data = {
				field: fieldname,
				value: ev.currentTarget.value
			};

			$$invalidate(0, inputStarted = true);
			dispatch('change', data);
			return true;
		}

		function input_input_handler() {
			value = this.value;
			$$invalidate(1, value);
		}

		$$self.$$set = $$props => {
			if ('inputStarted' in $$props) $$invalidate(0, inputStarted = $$props.inputStarted);
			if ('value' in $$props) $$invalidate(1, value = $$props.value);
			if ('placeholder' in $$props) $$invalidate(2, placeholder = $$props.placeholder);
			if ('fieldname' in $$props) $$invalidate(3, fieldname = $$props.fieldname);
			if ('icon' in $$props) $$invalidate(4, icon = $$props.icon);
			if ('required' in $$props) $$invalidate(5, required = $$props.required);
			if ('readonly' in $$props) $$invalidate(6, readonly = $$props.readonly);
			if ('valid' in $$props) $$invalidate(7, valid = $$props.valid);
			if ('validated' in $$props) $$invalidate(8, validated = $$props.validated);
			if ('errors' in $$props) $$invalidate(15, errors = $$props.errors);
			if ('formErrors' in $$props) $$invalidate(16, formErrors = $$props.formErrors);
			if ('formLevelError' in $$props) $$invalidate(17, formLevelError = $$props.formLevelError);
		};

		$$self.$$.update = () => {
			if ($$self.$$.dirty & /*icon*/ 16) {
				$$invalidate(12, iconClasses = (icon ? ' has-icons-left ' : '') + ' has-icons-right ');
			}

			if ($$self.$$.dirty & /*errors, formErrors*/ 98304) {
				$$invalidate(18, allErrors = [].concat(errors ? errors : [], formErrors ? formErrors : []));
			}

			if ($$self.$$.dirty & /*allErrors, placeholder*/ 262148) {
				$$invalidate(11, helper = allErrors ? allErrors.join(', ') : placeholder);
			}

			if ($$self.$$.dirty & /*valid, formLevelError*/ 131200) {
				$$invalidate(10, invalid = valid === false || formLevelError);
			}

			if ($$self.$$.dirty & /*valid, inputStarted*/ 129) {
				$$invalidate(9, validationClasses = valid === true || !inputStarted
				? UICommon$1.CLASS_OK
				: UICommon$1.CLASS_ERR);
			}
		};

		return [
			inputStarted,
			value,
			placeholder,
			fieldname,
			icon,
			required,
			readonly,
			valid,
			validated,
			validationClasses,
			invalid,
			helper,
			iconClasses,
			onBlur,
			onInput,
			errors,
			formErrors,
			formLevelError,
			allErrors,
			input_input_handler
		];
	}

	class Ui_password extends SvelteComponent {
		constructor(options) {
			super();

			init(this, options, instance$f, create_fragment$f, safe_not_equal, {
				inputStarted: 0,
				value: 1,
				placeholder: 2,
				fieldname: 3,
				icon: 4,
				required: 5,
				readonly: 6,
				valid: 7,
				validated: 8,
				errors: 15,
				formErrors: 16,
				formLevelError: 17
			});
		}
	}

	/* src/elements/form/ui.select.svelte generated by Svelte v3.44.3 */

	function get_each_context_1$1(ctx, list, i) {
		const child_ctx = ctx.slice();
		child_ctx[26] = list[i];
		return child_ctx;
	}

	function get_each_context$2(ctx, list, i) {
		const child_ctx = ctx.slice();
		child_ctx[26] = list[i];
		return child_ctx;
	}

	// (94:6) {:else}
	function create_else_block_2(ctx) {
		let select;
		let if_block_anchor;
		let select_id_value;
		let mounted;
		let dispose;
		let if_block = /*placeholder*/ ctx[3].length > 0 && create_if_block_8(ctx);
		let each_value_1 = /*variants*/ ctx[2];
		let each_blocks = [];

		for (let i = 0; i < each_value_1.length; i += 1) {
			each_blocks[i] = create_each_block_1$1(get_each_context_1$1(ctx, each_value_1, i));
		}

		return {
			c() {
				select = element("select");
				if (if_block) if_block.c();
				if_block_anchor = empty();

				for (let i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].c();
				}

				attr(select, "id", select_id_value = "form-field-select-" + /*fieldname*/ ctx[4]);
				attr(select, "name", /*fieldname*/ ctx[4]);
				attr(select, "readonly", /*readonly*/ ctx[7]);
				if (/*value*/ ctx[1] === void 0) add_render_callback(() => /*select_change_handler*/ ctx[23].call(select));
			},
			m(target, anchor) {
				insert(target, select, anchor);
				if (if_block) if_block.m(select, null);
				append(select, if_block_anchor);

				for (let i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].m(select, null);
				}

				select_option(select, /*value*/ ctx[1]);

				if (!mounted) {
					dispose = [
						listen(select, "change", /*select_change_handler*/ ctx[23]),
						listen(select, "blur", /*onBlur*/ ctx[17]),
						listen(select, "input", /*onInput*/ ctx[18])
					];

					mounted = true;
				}
			},
			p(ctx, dirty) {
				if (/*placeholder*/ ctx[3].length > 0) {
					if (if_block) {
						if_block.p(ctx, dirty);
					} else {
						if_block = create_if_block_8(ctx);
						if_block.c();
						if_block.m(select, if_block_anchor);
					}
				} else if (if_block) {
					if_block.d(1);
					if_block = null;
				}

				if (dirty & /*variants, value, $LOCALE*/ 65542) {
					each_value_1 = /*variants*/ ctx[2];
					let i;

					for (i = 0; i < each_value_1.length; i += 1) {
						const child_ctx = get_each_context_1$1(ctx, each_value_1, i);

						if (each_blocks[i]) {
							each_blocks[i].p(child_ctx, dirty);
						} else {
							each_blocks[i] = create_each_block_1$1(child_ctx);
							each_blocks[i].c();
							each_blocks[i].m(select, null);
						}
					}

					for (; i < each_blocks.length; i += 1) {
						each_blocks[i].d(1);
					}

					each_blocks.length = each_value_1.length;
				}

				if (dirty & /*fieldname*/ 16 && select_id_value !== (select_id_value = "form-field-select-" + /*fieldname*/ ctx[4])) {
					attr(select, "id", select_id_value);
				}

				if (dirty & /*fieldname*/ 16) {
					attr(select, "name", /*fieldname*/ ctx[4]);
				}

				if (dirty & /*readonly*/ 128) {
					attr(select, "readonly", /*readonly*/ ctx[7]);
				}

				if (dirty & /*value, variants, CLEAR_MACRO*/ 6) {
					select_option(select, /*value*/ ctx[1]);
				}
			},
			d(detaching) {
				if (detaching) detach(select);
				if (if_block) if_block.d();
				destroy_each(each_blocks, detaching);
				mounted = false;
				run_all(dispose);
			}
		};
	}

	// (78:6) {#if multiple }
	function create_if_block_5(ctx) {
		let select;
		let if_block_anchor;
		let select_id_value;
		let mounted;
		let dispose;
		let if_block = /*placeholder*/ ctx[3].length > 0 && create_if_block_6(ctx);
		let each_value = /*variants*/ ctx[2];
		let each_blocks = [];

		for (let i = 0; i < each_value.length; i += 1) {
			each_blocks[i] = create_each_block$2(get_each_context$2(ctx, each_value, i));
		}

		return {
			c() {
				select = element("select");
				if (if_block) if_block.c();
				if_block_anchor = empty();

				for (let i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].c();
				}

				attr(select, "id", select_id_value = "form-field-select-" + /*fieldname*/ ctx[4]);
				attr(select, "name", /*fieldname*/ ctx[4]);
				attr(select, "size", /*size*/ ctx[9]);
				attr(select, "readonly", /*readonly*/ ctx[7]);
				select.required = /*required*/ ctx[6];
				select.multiple = true;
			},
			m(target, anchor) {
				insert(target, select, anchor);
				if (if_block) if_block.m(select, null);
				append(select, if_block_anchor);

				for (let i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].m(select, null);
				}

				if (!mounted) {
					dispose = [
						listen(select, "blur", /*onBlur*/ ctx[17]),
						listen(select, "input", /*onInput*/ ctx[18])
					];

					mounted = true;
				}
			},
			p(ctx, dirty) {
				if (/*placeholder*/ ctx[3].length > 0) {
					if (if_block) {
						if_block.p(ctx, dirty);
					} else {
						if_block = create_if_block_6(ctx);
						if_block.c();
						if_block.m(select, if_block_anchor);
					}
				} else if (if_block) {
					if_block.d(1);
					if_block = null;
				}

				if (dirty & /*variants, value, $LOCALE*/ 65542) {
					each_value = /*variants*/ ctx[2];
					let i;

					for (i = 0; i < each_value.length; i += 1) {
						const child_ctx = get_each_context$2(ctx, each_value, i);

						if (each_blocks[i]) {
							each_blocks[i].p(child_ctx, dirty);
						} else {
							each_blocks[i] = create_each_block$2(child_ctx);
							each_blocks[i].c();
							each_blocks[i].m(select, null);
						}
					}

					for (; i < each_blocks.length; i += 1) {
						each_blocks[i].d(1);
					}

					each_blocks.length = each_value.length;
				}

				if (dirty & /*fieldname*/ 16 && select_id_value !== (select_id_value = "form-field-select-" + /*fieldname*/ ctx[4])) {
					attr(select, "id", select_id_value);
				}

				if (dirty & /*fieldname*/ 16) {
					attr(select, "name", /*fieldname*/ ctx[4]);
				}

				if (dirty & /*size*/ 512) {
					attr(select, "size", /*size*/ ctx[9]);
				}

				if (dirty & /*readonly*/ 128) {
					attr(select, "readonly", /*readonly*/ ctx[7]);
				}

				if (dirty & /*required*/ 64) {
					select.required = /*required*/ ctx[6];
				}
			},
			d(detaching) {
				if (detaching) detach(select);
				if (if_block) if_block.d();
				destroy_each(each_blocks, detaching);
				mounted = false;
				run_all(dispose);
			}
		};
	}

	// (97:8) {#if placeholder.length > 0 }
	function create_if_block_8(ctx) {
		let if_block_anchor;

		function select_block_type_2(ctx, dirty) {
			if (/*value*/ ctx[1]) return create_if_block_9;
			return create_else_block_3;
		}

		let current_block_type = select_block_type_2(ctx);
		let if_block = current_block_type(ctx);

		return {
			c() {
				if_block.c();
				if_block_anchor = empty();
			},
			m(target, anchor) {
				if_block.m(target, anchor);
				insert(target, if_block_anchor, anchor);
			},
			p(ctx, dirty) {
				if (current_block_type === (current_block_type = select_block_type_2(ctx)) && if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block.d(1);
					if_block = current_block_type(ctx);

					if (if_block) {
						if_block.c();
						if_block.m(if_block_anchor.parentNode, if_block_anchor);
					}
				}
			},
			d(detaching) {
				if_block.d(detaching);
				if (detaching) detach(if_block_anchor);
			}
		};
	}

	// (100:8) {:else}
	function create_else_block_3(ctx) {
		let option;
		let t_value = /*$LOCALE*/ ctx[16][/*placeholder*/ ctx[3]] + "";
		let t;

		return {
			c() {
				option = element("option");
				t = text(t_value);
				option.__value = CLEAR_MACRO;
				option.value = option.__value;
				option.selected = "selected";
			},
			m(target, anchor) {
				insert(target, option, anchor);
				append(option, t);
			},
			p(ctx, dirty) {
				if (dirty & /*$LOCALE, placeholder*/ 65544 && t_value !== (t_value = /*$LOCALE*/ ctx[16][/*placeholder*/ ctx[3]] + "")) set_data(t, t_value);
			},
			d(detaching) {
				if (detaching) detach(option);
			}
		};
	}

	// (98:8) {#if value }
	function create_if_block_9(ctx) {
		let option;
		let t_value = /*$LOCALE*/ ctx[16][/*placeholder*/ ctx[3]] + "";
		let t;

		return {
			c() {
				option = element("option");
				t = text(t_value);
				option.__value = CLEAR_MACRO;
				option.value = option.__value;
			},
			m(target, anchor) {
				insert(target, option, anchor);
				append(option, t);
			},
			p(ctx, dirty) {
				if (dirty & /*$LOCALE, placeholder*/ 65544 && t_value !== (t_value = /*$LOCALE*/ ctx[16][/*placeholder*/ ctx[3]] + "")) set_data(t, t_value);
			},
			d(detaching) {
				if (detaching) detach(option);
			}
		};
	}

	// (104:8) {#each variants as variant}
	function create_each_block_1$1(ctx) {
		let option;
		let t_value = /*$LOCALE*/ ctx[16][/*variant*/ ctx[26].title] + "";
		let t;
		let option_value_value;
		let option_selected_value;

		return {
			c() {
				option = element("option");
				t = text(t_value);
				option.__value = option_value_value = /*variant*/ ctx[26].id;
				option.value = option.__value;
				option.selected = option_selected_value = /*value*/ ctx[1] == /*variant*/ ctx[26].id;
			},
			m(target, anchor) {
				insert(target, option, anchor);
				append(option, t);
			},
			p(ctx, dirty) {
				if (dirty & /*$LOCALE, variants*/ 65540 && t_value !== (t_value = /*$LOCALE*/ ctx[16][/*variant*/ ctx[26].title] + "")) set_data(t, t_value);

				if (dirty & /*variants*/ 4 && option_value_value !== (option_value_value = /*variant*/ ctx[26].id)) {
					option.__value = option_value_value;
					option.value = option.__value;
				}

				if (dirty & /*value, variants, CLEAR_MACRO*/ 6 && option_selected_value !== (option_selected_value = /*value*/ ctx[1] == /*variant*/ ctx[26].id)) {
					option.selected = option_selected_value;
				}
			},
			d(detaching) {
				if (detaching) detach(option);
			}
		};
	}

	// (83:8) {#if placeholder.length > 0 }
	function create_if_block_6(ctx) {
		let if_block_anchor;

		function select_block_type_1(ctx, dirty) {
			if (/*value*/ ctx[1]) return create_if_block_7;
			return create_else_block_1;
		}

		let current_block_type = select_block_type_1(ctx);
		let if_block = current_block_type(ctx);

		return {
			c() {
				if_block.c();
				if_block_anchor = empty();
			},
			m(target, anchor) {
				if_block.m(target, anchor);
				insert(target, if_block_anchor, anchor);
			},
			p(ctx, dirty) {
				if (current_block_type === (current_block_type = select_block_type_1(ctx)) && if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block.d(1);
					if_block = current_block_type(ctx);

					if (if_block) {
						if_block.c();
						if_block.m(if_block_anchor.parentNode, if_block_anchor);
					}
				}
			},
			d(detaching) {
				if_block.d(detaching);
				if (detaching) detach(if_block_anchor);
			}
		};
	}

	// (86:8) {:else}
	function create_else_block_1(ctx) {
		let option;
		let t_value = /*$LOCALE*/ ctx[16][/*placeholder*/ ctx[3]] + "";
		let t;

		return {
			c() {
				option = element("option");
				t = text(t_value);
				option.__value = CLEAR_MACRO;
				option.value = option.__value;
				option.selected = "selected";
			},
			m(target, anchor) {
				insert(target, option, anchor);
				append(option, t);
			},
			p(ctx, dirty) {
				if (dirty & /*$LOCALE, placeholder*/ 65544 && t_value !== (t_value = /*$LOCALE*/ ctx[16][/*placeholder*/ ctx[3]] + "")) set_data(t, t_value);
			},
			d(detaching) {
				if (detaching) detach(option);
			}
		};
	}

	// (84:8) {#if value }
	function create_if_block_7(ctx) {
		let option;
		let t_value = /*$LOCALE*/ ctx[16][/*placeholder*/ ctx[3]] + "";
		let t;

		return {
			c() {
				option = element("option");
				t = text(t_value);
				option.__value = CLEAR_MACRO;
				option.value = option.__value;
			},
			m(target, anchor) {
				insert(target, option, anchor);
				append(option, t);
			},
			p(ctx, dirty) {
				if (dirty & /*$LOCALE, placeholder*/ 65544 && t_value !== (t_value = /*$LOCALE*/ ctx[16][/*placeholder*/ ctx[3]] + "")) set_data(t, t_value);
			},
			d(detaching) {
				if (detaching) detach(option);
			}
		};
	}

	// (90:8) {#each variants as variant}
	function create_each_block$2(ctx) {
		let option;
		let t_value = /*$LOCALE*/ ctx[16][/*variant*/ ctx[26].title] + "";
		let t;
		let option_value_value;
		let option_selected_value;

		return {
			c() {
				option = element("option");
				t = text(t_value);
				option.__value = option_value_value = /*variant*/ ctx[26].id;
				option.value = option.__value;
				option.selected = option_selected_value = /*value*/ ctx[1] && /*value*/ ctx[1].indexOf(/*variant*/ ctx[26].id) > -1;
			},
			m(target, anchor) {
				insert(target, option, anchor);
				append(option, t);
			},
			p(ctx, dirty) {
				if (dirty & /*$LOCALE, variants*/ 65540 && t_value !== (t_value = /*$LOCALE*/ ctx[16][/*variant*/ ctx[26].title] + "")) set_data(t, t_value);

				if (dirty & /*variants*/ 4 && option_value_value !== (option_value_value = /*variant*/ ctx[26].id)) {
					option.__value = option_value_value;
					option.value = option.__value;
				}

				if (dirty & /*value, variants, CLEAR_MACRO*/ 6 && option_selected_value !== (option_selected_value = /*value*/ ctx[1] && /*value*/ ctx[1].indexOf(/*variant*/ ctx[26].id) > -1)) {
					option.selected = option_selected_value;
				}
			},
			d(detaching) {
				if (detaching) detach(option);
			}
		};
	}

	// (110:4) {#if icon }
	function create_if_block_4$2(ctx) {
		let span;
		let i;
		let i_class_value;

		return {
			c() {
				span = element("span");
				i = element("i");
				attr(i, "class", i_class_value = "fas fa-" + /*icon*/ ctx[5]);
				attr(span, "class", "icon is-small is-left");
			},
			m(target, anchor) {
				insert(target, span, anchor);
				append(span, i);
			},
			p(ctx, dirty) {
				if (dirty & /*icon*/ 32 && i_class_value !== (i_class_value = "fas fa-" + /*icon*/ ctx[5])) {
					attr(i, "class", i_class_value);
				}
			},
			d(detaching) {
				if (detaching) detach(span);
			}
		};
	}

	// (113:4) {#if validated === true }
	function create_if_block_1$5(ctx) {
		let span;

		function select_block_type_3(ctx, dirty) {
			if (/*valid*/ ctx[10] === true) return create_if_block_2$2;
			if (/*valid*/ ctx[10] === false) return create_if_block_3$2;
		}

		let current_block_type = select_block_type_3(ctx);
		let if_block = current_block_type && current_block_type(ctx);

		return {
			c() {
				span = element("span");
				if (if_block) if_block.c();
				attr(span, "class", "icon is-small is-right");
			},
			m(target, anchor) {
				insert(target, span, anchor);
				if (if_block) if_block.m(span, null);
			},
			p(ctx, dirty) {
				if (current_block_type !== (current_block_type = select_block_type_3(ctx))) {
					if (if_block) if_block.d(1);
					if_block = current_block_type && current_block_type(ctx);

					if (if_block) {
						if_block.c();
						if_block.m(span, null);
					}
				}
			},
			d(detaching) {
				if (detaching) detach(span);

				if (if_block) {
					if_block.d();
				}
			}
		};
	}

	// (117:35) 
	function create_if_block_3$2(ctx) {
		let i;

		return {
			c() {
				i = element("i");
				attr(i, "class", "fas fa-exclamation-triangle");
			},
			m(target, anchor) {
				insert(target, i, anchor);
			},
			d(detaching) {
				if (detaching) detach(i);
			}
		};
	}

	// (115:6) {#if valid === true }
	function create_if_block_2$2(ctx) {
		let i;

		return {
			c() {
				i = element("i");
				attr(i, "class", "fas fa-check");
			},
			m(target, anchor) {
				insert(target, i, anchor);
			},
			d(detaching) {
				if (detaching) detach(i);
			}
		};
	}

	// (126:4) {:else}
	function create_else_block$4(ctx) {
		let t;

		return {
			c() {
				t = text("Â ");
			},
			m(target, anchor) {
				insert(target, t, anchor);
			},
			p: noop,
			d(detaching) {
				if (detaching) detach(t);
			}
		};
	}

	// (124:4) {#if !(validated && valid) && (inputStarted) }
	function create_if_block$7(ctx) {
		let t;

		return {
			c() {
				t = text(/*helper*/ ctx[14]);
			},
			m(target, anchor) {
				insert(target, t, anchor);
			},
			p(ctx, dirty) {
				if (dirty & /*helper*/ 16384) set_data(t, /*helper*/ ctx[14]);
			},
			d(detaching) {
				if (detaching) detach(t);
			}
		};
	}

	function create_fragment$e(ctx) {
		let div1;
		let div0;
		let div0_class_value;
		let t0;
		let t1;
		let div1_class_value;
		let t2;
		let p;
		let p_class_value;
		let p_id_value;

		function select_block_type(ctx, dirty) {
			if (/*multiple*/ ctx[8]) return create_if_block_5;
			return create_else_block_2;
		}

		let current_block_type = select_block_type(ctx);
		let if_block0 = current_block_type(ctx);
		let if_block1 = /*icon*/ ctx[5] && create_if_block_4$2(ctx);
		let if_block2 = /*validated*/ ctx[11] === true && create_if_block_1$5(ctx);

		function select_block_type_4(ctx, dirty) {
			if (!(/*validated*/ ctx[11] && /*valid*/ ctx[10]) && /*inputStarted*/ ctx[0]) return create_if_block$7;
			return create_else_block$4;
		}

		let current_block_type_1 = select_block_type_4(ctx);
		let if_block3 = current_block_type_1(ctx);

		return {
			c() {
				div1 = element("div");
				div0 = element("div");
				if_block0.c();
				t0 = space();
				if (if_block1) if_block1.c();
				t1 = space();
				if (if_block2) if_block2.c();
				t2 = space();
				p = element("p");
				if_block3.c();
				attr(div0, "class", div0_class_value = "select " + /*validationClasses*/ ctx[13] + " " + /*multipleClass*/ ctx[12]);
				attr(div1, "class", div1_class_value = "control " + /*iconClasses*/ ctx[15]);
				attr(p, "class", p_class_value = "help " + /*validationClasses*/ ctx[13]);
				attr(p, "id", p_id_value = "input-field-helper-" + /*fieldname*/ ctx[4]);
			},
			m(target, anchor) {
				insert(target, div1, anchor);
				append(div1, div0);
				if_block0.m(div0, null);
				append(div1, t0);
				if (if_block1) if_block1.m(div1, null);
				append(div1, t1);
				if (if_block2) if_block2.m(div1, null);
				insert(target, t2, anchor);
				insert(target, p, anchor);
				if_block3.m(p, null);
			},
			p(ctx, [dirty]) {
				if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0.d(1);
					if_block0 = current_block_type(ctx);

					if (if_block0) {
						if_block0.c();
						if_block0.m(div0, null);
					}
				}

				if (dirty & /*validationClasses, multipleClass*/ 12288 && div0_class_value !== (div0_class_value = "select " + /*validationClasses*/ ctx[13] + " " + /*multipleClass*/ ctx[12])) {
					attr(div0, "class", div0_class_value);
				}

				if (/*icon*/ ctx[5]) {
					if (if_block1) {
						if_block1.p(ctx, dirty);
					} else {
						if_block1 = create_if_block_4$2(ctx);
						if_block1.c();
						if_block1.m(div1, t1);
					}
				} else if (if_block1) {
					if_block1.d(1);
					if_block1 = null;
				}

				if (/*validated*/ ctx[11] === true) {
					if (if_block2) {
						if_block2.p(ctx, dirty);
					} else {
						if_block2 = create_if_block_1$5(ctx);
						if_block2.c();
						if_block2.m(div1, null);
					}
				} else if (if_block2) {
					if_block2.d(1);
					if_block2 = null;
				}

				if (dirty & /*iconClasses*/ 32768 && div1_class_value !== (div1_class_value = "control " + /*iconClasses*/ ctx[15])) {
					attr(div1, "class", div1_class_value);
				}

				if (current_block_type_1 === (current_block_type_1 = select_block_type_4(ctx)) && if_block3) {
					if_block3.p(ctx, dirty);
				} else {
					if_block3.d(1);
					if_block3 = current_block_type_1(ctx);

					if (if_block3) {
						if_block3.c();
						if_block3.m(p, null);
					}
				}

				if (dirty & /*validationClasses*/ 8192 && p_class_value !== (p_class_value = "help " + /*validationClasses*/ ctx[13])) {
					attr(p, "class", p_class_value);
				}

				if (dirty & /*fieldname*/ 16 && p_id_value !== (p_id_value = "input-field-helper-" + /*fieldname*/ ctx[4])) {
					attr(p, "id", p_id_value);
				}
			},
			i: noop,
			o: noop,
			d(detaching) {
				if (detaching) detach(div1);
				if_block0.d();
				if (if_block1) if_block1.d();
				if (if_block2) if_block2.d();
				if (detaching) detach(t2);
				if (detaching) detach(p);
				if_block3.d();
			}
		};
	}

	const CLEAR_MACRO = '__CLEAR__';

	function instance$e($$self, $$props, $$invalidate) {
		let iconClasses;
		let allErrors;
		let helper;
		let validationClasses;
		let multipleClass;
		let $LOCALE;
		component_subscribe($$self, LOCALE, $$value => $$invalidate(16, $LOCALE = $$value));
		let dispatch = createEventDispatcher();
		let { inputStarted = false } = $$props;
		let { value = '' } = $$props;
		let { variants = [] } = $$props;
		let { placeholder = 'empty select item' } = $$props;
		let { fieldname = 'select' } = $$props;
		let { icon = false } = $$props;
		let { required = true } = $$props;
		let { readonly = false } = $$props;
		let { multiple = false } = $$props;
		let { size = 8 } = $$props;
		let { valid = true } = $$props;
		let { validated = false } = $$props;
		let { errors = false } = $$props;
		let { formErrors = false } = $$props;
		let { formLevelError = false } = $$props;

		function onBlur(ev) {
			let data = {
				field: fieldname,
				value: ev.currentTarget.value
			};

			if (multiple) {
				$$invalidate(1, value = Array.from(ev.target.selectedOptions).map(el => el.value));

				if (value.indexOf(CLEAR_MACRO) > -1) {
					$$invalidate(1, value = []);
				}

				data.value = value;
			} else {
				if (data.value === CLEAR_MACRO) {
					$$invalidate(1, value = '');
				}
			}

			$$invalidate(0, inputStarted = true);
			dispatch('change', data);
			return true;
		}

		function onInput(ev) {
			let data = {
				field: fieldname,
				value: ev.currentTarget.value
			};

			if (multiple) {
				$$invalidate(1, value = Array.from(ev.target.selectedOptions).map(el => el.value));

				if (value.indexOf(CLEAR_MACRO) > -1) {
					$$invalidate(1, value = []);
				}

				data.value = value;
			} else {
				if (data.value === CLEAR_MACRO) {
					$$invalidate(1, value = '');
				}
			}

			$$invalidate(0, inputStarted = true);
			dispatch('change', data);
			return true;
		}

		function select_change_handler() {
			value = select_value(this);
			$$invalidate(1, value);
			$$invalidate(2, variants);
		}

		$$self.$$set = $$props => {
			if ('inputStarted' in $$props) $$invalidate(0, inputStarted = $$props.inputStarted);
			if ('value' in $$props) $$invalidate(1, value = $$props.value);
			if ('variants' in $$props) $$invalidate(2, variants = $$props.variants);
			if ('placeholder' in $$props) $$invalidate(3, placeholder = $$props.placeholder);
			if ('fieldname' in $$props) $$invalidate(4, fieldname = $$props.fieldname);
			if ('icon' in $$props) $$invalidate(5, icon = $$props.icon);
			if ('required' in $$props) $$invalidate(6, required = $$props.required);
			if ('readonly' in $$props) $$invalidate(7, readonly = $$props.readonly);
			if ('multiple' in $$props) $$invalidate(8, multiple = $$props.multiple);
			if ('size' in $$props) $$invalidate(9, size = $$props.size);
			if ('valid' in $$props) $$invalidate(10, valid = $$props.valid);
			if ('validated' in $$props) $$invalidate(11, validated = $$props.validated);
			if ('errors' in $$props) $$invalidate(19, errors = $$props.errors);
			if ('formErrors' in $$props) $$invalidate(20, formErrors = $$props.formErrors);
			if ('formLevelError' in $$props) $$invalidate(21, formLevelError = $$props.formLevelError);
		};

		$$self.$$.update = () => {
			if ($$self.$$.dirty & /*icon*/ 32) {
				$$invalidate(15, iconClasses = (icon ? ' has-icons-left ' : '') + ' has-icons-right ');
			}

			if ($$self.$$.dirty & /*errors, formErrors*/ 1572864) {
				$$invalidate(22, allErrors = [].concat(errors ? errors : [], formErrors ? formErrors : []));
			}

			if ($$self.$$.dirty & /*allErrors, placeholder*/ 4194312) {
				$$invalidate(14, helper = allErrors ? allErrors.join(', ') : placeholder);
			}

			if ($$self.$$.dirty & /*valid, formLevelError*/ 2098176) ;

			if ($$self.$$.dirty & /*valid, inputStarted*/ 1025) {
				$$invalidate(13, validationClasses = valid === true || !inputStarted
				? UICommon$1.CLASS_OK
				: UICommon$1.CLASS_ERR);
			}

			if ($$self.$$.dirty & /*multiple*/ 256) {
				$$invalidate(12, multipleClass = multiple ? ' is-multiple ' : '');
			}
		};

		return [
			inputStarted,
			value,
			variants,
			placeholder,
			fieldname,
			icon,
			required,
			readonly,
			multiple,
			size,
			valid,
			validated,
			multipleClass,
			validationClasses,
			helper,
			iconClasses,
			$LOCALE,
			onBlur,
			onInput,
			errors,
			formErrors,
			formLevelError,
			allErrors,
			select_change_handler
		];
	}

	class Ui_select extends SvelteComponent {
		constructor(options) {
			super();

			init(this, options, instance$e, create_fragment$e, safe_not_equal, {
				inputStarted: 0,
				value: 1,
				variants: 2,
				placeholder: 3,
				fieldname: 4,
				icon: 5,
				required: 6,
				readonly: 7,
				multiple: 8,
				size: 9,
				valid: 10,
				validated: 11,
				errors: 19,
				formErrors: 20,
				formLevelError: 21
			});
		}
	}

	/* src/elements/form/ui.switch.svelte generated by Svelte v3.44.3 */

	function create_else_block$3(ctx) {
		let t;

		return {
			c() {
				t = text("Â ");
			},
			m(target, anchor) {
				insert(target, t, anchor);
			},
			p: noop,
			d(detaching) {
				if (detaching) detach(t);
			}
		};
	}

	// (69:4) {#if !(validated && valid) && (inputStarted) }
	function create_if_block$6(ctx) {
		let t;

		return {
			c() {
				t = text(/*helper*/ ctx[13]);
			},
			m(target, anchor) {
				insert(target, t, anchor);
			},
			p(ctx, dirty) {
				if (dirty & /*helper*/ 8192) set_data(t, /*helper*/ ctx[13]);
			},
			d(detaching) {
				if (detaching) detach(t);
			}
		};
	}

	function create_fragment$d(ctx) {
		let div;
		let input;
		let input_class_value;
		let input_id_value;
		let input_aria_controls_value;
		let input_aria_describedby_value;
		let t0;
		let label_1;
		let t1_value = /*$LOCALE*/ ctx[14][/*label*/ ctx[2]] + "";
		let t1;
		let label_1_for_value;
		let t2;
		let p;
		let p_class_value;
		let p_id_value;
		let mounted;
		let dispose;

		function select_block_type(ctx, dirty) {
			if (!(/*validated*/ ctx[10] && /*valid*/ ctx[8]) && /*inputStarted*/ ctx[0]) return create_if_block$6;
			return create_else_block$3;
		}

		let current_block_type = select_block_type(ctx);
		let if_block = current_block_type(ctx);

		return {
			c() {
				div = element("div");
				input = element("input");
				t0 = space();
				label_1 = element("label");
				t1 = text(t1_value);
				t2 = space();
				p = element("p");
				if_block.c();
				attr(input, "type", "checkbox");
				attr(input, "class", input_class_value = "switch " + /*styling*/ ctx[9]);
				attr(input, "id", input_id_value = "form-field-switch-" + /*fieldname*/ ctx[4]);
				attr(input, "placeholder", /*placeholder*/ ctx[3]);
				attr(input, "name", /*fieldname*/ ctx[4]);
				input.disabled = /*disabled*/ ctx[7];
				input.required = /*required*/ ctx[5];
				input.readOnly = /*readonly*/ ctx[6];
				attr(input, "invalid", /*invalid*/ ctx[12]);
				attr(input, "aria-controls", input_aria_controls_value = "input-field-helper-" + /*fieldname*/ ctx[4]);
				attr(input, "aria-describedby", input_aria_describedby_value = "input-field-helper-" + /*fieldname*/ ctx[4]);
				attr(label_1, "class", "label");
				attr(label_1, "for", label_1_for_value = "form-field-switch-" + /*fieldname*/ ctx[4]);
				attr(div, "class", "control");
				attr(p, "class", p_class_value = "help " + /*validationClasses*/ ctx[11]);
				attr(p, "id", p_id_value = "form-field-helper-" + /*fieldname*/ ctx[4]);
			},
			m(target, anchor) {
				insert(target, div, anchor);
				append(div, input);
				input.checked = /*value*/ ctx[1];
				append(div, t0);
				append(div, label_1);
				append(label_1, t1);
				insert(target, t2, anchor);
				insert(target, p, anchor);
				if_block.m(p, null);

				if (!mounted) {
					dispose = [
						listen(input, "change", /*input_change_handler*/ ctx[22]),
						listen(input, "blur", /*onBlur*/ ctx[15]),
						listen(input, "input", /*onInput*/ ctx[16])
					];

					mounted = true;
				}
			},
			p(ctx, [dirty]) {
				if (dirty & /*styling*/ 512 && input_class_value !== (input_class_value = "switch " + /*styling*/ ctx[9])) {
					attr(input, "class", input_class_value);
				}

				if (dirty & /*fieldname*/ 16 && input_id_value !== (input_id_value = "form-field-switch-" + /*fieldname*/ ctx[4])) {
					attr(input, "id", input_id_value);
				}

				if (dirty & /*placeholder*/ 8) {
					attr(input, "placeholder", /*placeholder*/ ctx[3]);
				}

				if (dirty & /*fieldname*/ 16) {
					attr(input, "name", /*fieldname*/ ctx[4]);
				}

				if (dirty & /*disabled*/ 128) {
					input.disabled = /*disabled*/ ctx[7];
				}

				if (dirty & /*required*/ 32) {
					input.required = /*required*/ ctx[5];
				}

				if (dirty & /*readonly*/ 64) {
					input.readOnly = /*readonly*/ ctx[6];
				}

				if (dirty & /*invalid*/ 4096) {
					attr(input, "invalid", /*invalid*/ ctx[12]);
				}

				if (dirty & /*fieldname*/ 16 && input_aria_controls_value !== (input_aria_controls_value = "input-field-helper-" + /*fieldname*/ ctx[4])) {
					attr(input, "aria-controls", input_aria_controls_value);
				}

				if (dirty & /*fieldname*/ 16 && input_aria_describedby_value !== (input_aria_describedby_value = "input-field-helper-" + /*fieldname*/ ctx[4])) {
					attr(input, "aria-describedby", input_aria_describedby_value);
				}

				if (dirty & /*value*/ 2) {
					input.checked = /*value*/ ctx[1];
				}

				if (dirty & /*$LOCALE, label*/ 16388 && t1_value !== (t1_value = /*$LOCALE*/ ctx[14][/*label*/ ctx[2]] + "")) set_data(t1, t1_value);

				if (dirty & /*fieldname*/ 16 && label_1_for_value !== (label_1_for_value = "form-field-switch-" + /*fieldname*/ ctx[4])) {
					attr(label_1, "for", label_1_for_value);
				}

				if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block.d(1);
					if_block = current_block_type(ctx);

					if (if_block) {
						if_block.c();
						if_block.m(p, null);
					}
				}

				if (dirty & /*validationClasses*/ 2048 && p_class_value !== (p_class_value = "help " + /*validationClasses*/ ctx[11])) {
					attr(p, "class", p_class_value);
				}

				if (dirty & /*fieldname*/ 16 && p_id_value !== (p_id_value = "form-field-helper-" + /*fieldname*/ ctx[4])) {
					attr(p, "id", p_id_value);
				}
			},
			i: noop,
			o: noop,
			d(detaching) {
				if (detaching) detach(div);
				if (detaching) detach(t2);
				if (detaching) detach(p);
				if_block.d();
				mounted = false;
				run_all(dispose);
			}
		};
	}

	function instance$d($$self, $$props, $$invalidate) {
		let allErrors;
		let helper;
		let invalid;
		let validationClasses;
		let $LOCALE;
		component_subscribe($$self, LOCALE, $$value => $$invalidate(14, $LOCALE = $$value));
		let dispatch = createEventDispatcher();
		let { inputStarted = false } = $$props;
		let { value = false } = $$props;
		let { label = 'textfield' } = $$props;
		let { placeholder = 'input some text here, please' } = $$props;
		let { fieldname = 'textfield' } = $$props;
		let { icon = false } = $$props;
		let { required = true } = $$props;
		let { readonly = false } = $$props;
		let { disabled = false } = $$props;
		let { valid = true } = $$props;
		let { styling = " is-rounded is-success " } = $$props;
		let { validated = false } = $$props;
		let { errors = false } = $$props;
		let { formErrors = false } = $$props;
		let { formLevelError = false } = $$props;

		function onBlur(ev) {
			let data = {
				field: fieldname,
				value: ev.currentTarget.type === 'checkbox'
				? ev.currentTarget.checked
				: value
			};

			$$invalidate(0, inputStarted = true);
			dispatch('change', data);
			return true;
		}

		function onInput(ev) {
			let data = {
				field: fieldname,
				value: ev.currentTarget.type === 'checkbox'
				? ev.currentTarget.checked
				: value
			};

			$$invalidate(0, inputStarted = true);
			dispatch('change', data);
			return true;
		}

		function input_change_handler() {
			value = this.checked;
			$$invalidate(1, value);
		}

		$$self.$$set = $$props => {
			if ('inputStarted' in $$props) $$invalidate(0, inputStarted = $$props.inputStarted);
			if ('value' in $$props) $$invalidate(1, value = $$props.value);
			if ('label' in $$props) $$invalidate(2, label = $$props.label);
			if ('placeholder' in $$props) $$invalidate(3, placeholder = $$props.placeholder);
			if ('fieldname' in $$props) $$invalidate(4, fieldname = $$props.fieldname);
			if ('icon' in $$props) $$invalidate(17, icon = $$props.icon);
			if ('required' in $$props) $$invalidate(5, required = $$props.required);
			if ('readonly' in $$props) $$invalidate(6, readonly = $$props.readonly);
			if ('disabled' in $$props) $$invalidate(7, disabled = $$props.disabled);
			if ('valid' in $$props) $$invalidate(8, valid = $$props.valid);
			if ('styling' in $$props) $$invalidate(9, styling = $$props.styling);
			if ('validated' in $$props) $$invalidate(10, validated = $$props.validated);
			if ('errors' in $$props) $$invalidate(18, errors = $$props.errors);
			if ('formErrors' in $$props) $$invalidate(19, formErrors = $$props.formErrors);
			if ('formLevelError' in $$props) $$invalidate(20, formLevelError = $$props.formLevelError);
		};

		$$self.$$.update = () => {
			if ($$self.$$.dirty & /*icon*/ 131072) ;

			if ($$self.$$.dirty & /*errors, formErrors*/ 786432) {
				$$invalidate(21, allErrors = [].concat(errors ? errors : [], formErrors ? formErrors : []));
			}

			if ($$self.$$.dirty & /*allErrors, placeholder*/ 2097160) {
				$$invalidate(13, helper = allErrors ? allErrors.join(', ') : placeholder);
			}

			if ($$self.$$.dirty & /*valid, formLevelError*/ 1048832) {
				$$invalidate(12, invalid = valid === false || formLevelError);
			}

			if ($$self.$$.dirty & /*valid, inputStarted*/ 257) {
				$$invalidate(11, validationClasses = valid === true || !inputStarted
				? UICommon$1.CLASS_OK
				: UICommon$1.CLASS_ERR);
			}
		};

		return [
			inputStarted,
			value,
			label,
			placeholder,
			fieldname,
			required,
			readonly,
			disabled,
			valid,
			styling,
			validated,
			validationClasses,
			invalid,
			helper,
			$LOCALE,
			onBlur,
			onInput,
			icon,
			errors,
			formErrors,
			formLevelError,
			allErrors,
			input_change_handler
		];
	}

	class Ui_switch extends SvelteComponent {
		constructor(options) {
			super();

			init(this, options, instance$d, create_fragment$d, safe_not_equal, {
				inputStarted: 0,
				value: 1,
				label: 2,
				placeholder: 3,
				fieldname: 4,
				icon: 17,
				required: 5,
				readonly: 6,
				disabled: 7,
				valid: 8,
				styling: 9,
				validated: 10,
				errors: 18,
				formErrors: 19,
				formLevelError: 20
			});
		}
	}

	/* src/elements/form/ui.tag.svelte generated by Svelte v3.44.3 */

	function get_each_context$1(ctx, list, i) {
		const child_ctx = ctx.slice();
		child_ctx[10] = list[i];
		return child_ctx;
	}

	function get_each_context_1(ctx, list, i) {
		const child_ctx = ctx.slice();
		child_ctx[13] = list[i];
		return child_ctx;
	}

	// (56:6) {#if !readonly }
	function create_if_block_1$4(ctx) {
		let button;
		let button_data_id_value;
		let mounted;
		let dispose;

		return {
			c() {
				button = element("button");
				attr(button, "data-id", button_data_id_value = /*item*/ ctx[13].id);
				attr(button, "class", "delete is-small");
			},
			m(target, anchor) {
				insert(target, button, anchor);

				if (!mounted) {
					dispose = listen(button, "click", /*remove*/ ctx[5]);
					mounted = true;
				}
			},
			p(ctx, dirty) {
				if (dirty & /*items*/ 1 && button_data_id_value !== (button_data_id_value = /*item*/ ctx[13].id)) {
					attr(button, "data-id", button_data_id_value);
				}
			},
			d(detaching) {
				if (detaching) detach(button);
				mounted = false;
				dispose();
			}
		};
	}

	// (54:4) {#each items as item (item.id)}
	function create_each_block_1(key_1, ctx) {
		let span;
		let t0_value = /*$LOCALE*/ ctx[4][/*item*/ ctx[13].title] + "";
		let t0;
		let t1;
		let t2;
		let span_class_value;
		let if_block = !/*readonly*/ ctx[2] && create_if_block_1$4(ctx);

		return {
			key: key_1,
			first: null,
			c() {
				span = element("span");
				t0 = text(t0_value);
				t1 = space();
				if (if_block) if_block.c();
				t2 = space();
				attr(span, "class", span_class_value = "mx-1 tag is-" + /*item*/ ctx[13].type);
				this.first = span;
			},
			m(target, anchor) {
				insert(target, span, anchor);
				append(span, t0);
				append(span, t1);
				if (if_block) if_block.m(span, null);
				append(span, t2);
			},
			p(new_ctx, dirty) {
				ctx = new_ctx;
				if (dirty & /*$LOCALE, items*/ 17 && t0_value !== (t0_value = /*$LOCALE*/ ctx[4][/*item*/ ctx[13].title] + "")) set_data(t0, t0_value);

				if (!/*readonly*/ ctx[2]) {
					if (if_block) {
						if_block.p(ctx, dirty);
					} else {
						if_block = create_if_block_1$4(ctx);
						if_block.c();
						if_block.m(span, t2);
					}
				} else if (if_block) {
					if_block.d(1);
					if_block = null;
				}

				if (dirty & /*items*/ 1 && span_class_value !== (span_class_value = "mx-1 tag is-" + /*item*/ ctx[13].type)) {
					attr(span, "class", span_class_value);
				}
			},
			d(detaching) {
				if (detaching) detach(span);
				if (if_block) if_block.d();
			}
		};
	}

	// (62:2) {#if !readonly }
	function create_if_block$5(ctx) {
		let div2;
		let div1;
		let div0;
		let select;
		let option;
		let t0_value = /*$LOCALE*/ ctx[4]['ÐÑÐ±ÐµÑÐ¸ÑÐµ Ð¸Ð· ÑÐ¿Ð¸ÑÐºÐ°...'] + "";
		let t0;
		let t1;
		let button;
		let t2_value = /*$LOCALE*/ ctx[4]['ÐÐ¾Ð±Ð°Ð²Ð¸ÑÑ'] + "";
		let t2;
		let mounted;
		let dispose;
		let each_value = /*variants*/ ctx[1];
		let each_blocks = [];

		for (let i = 0; i < each_value.length; i += 1) {
			each_blocks[i] = create_each_block$1(get_each_context$1(ctx, each_value, i));
		}

		return {
			c() {
				div2 = element("div");
				div1 = element("div");
				div0 = element("div");
				select = element("select");
				option = element("option");
				t0 = text(t0_value);

				for (let i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].c();
				}

				t1 = space();
				button = element("button");
				t2 = text(t2_value);
				option.__value = "-1";
				option.value = option.__value;
				option.selected = true;
				attr(div0, "class", "select is-small");
				attr(button, "class", "button is-primary is-small");
				attr(div1, "class", "control");
				attr(div2, "class", "column");
			},
			m(target, anchor) {
				insert(target, div2, anchor);
				append(div2, div1);
				append(div1, div0);
				append(div0, select);
				append(select, option);
				append(option, t0);

				for (let i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].m(select, null);
				}

				append(div1, t1);
				append(div1, button);
				append(button, t2);

				if (!mounted) {
					dispose = listen(button, "click", /*add*/ ctx[6]);
					mounted = true;
				}
			},
			p(ctx, dirty) {
				if (dirty & /*$LOCALE*/ 16 && t0_value !== (t0_value = /*$LOCALE*/ ctx[4]['ÐÑÐ±ÐµÑÐ¸ÑÐµ Ð¸Ð· ÑÐ¿Ð¸ÑÐºÐ°...'] + "")) set_data(t0, t0_value);

				if (dirty & /*variants, $LOCALE*/ 18) {
					each_value = /*variants*/ ctx[1];
					let i;

					for (i = 0; i < each_value.length; i += 1) {
						const child_ctx = get_each_context$1(ctx, each_value, i);

						if (each_blocks[i]) {
							each_blocks[i].p(child_ctx, dirty);
						} else {
							each_blocks[i] = create_each_block$1(child_ctx);
							each_blocks[i].c();
							each_blocks[i].m(select, null);
						}
					}

					for (; i < each_blocks.length; i += 1) {
						each_blocks[i].d(1);
					}

					each_blocks.length = each_value.length;
				}

				if (dirty & /*$LOCALE*/ 16 && t2_value !== (t2_value = /*$LOCALE*/ ctx[4]['ÐÐ¾Ð±Ð°Ð²Ð¸ÑÑ'] + "")) set_data(t2, t2_value);
			},
			d(detaching) {
				if (detaching) detach(div2);
				destroy_each(each_blocks, detaching);
				mounted = false;
				dispose();
			}
		};
	}

	// (68:10) {#each variants as variant}
	function create_each_block$1(ctx) {
		let option;
		let t_value = /*$LOCALE*/ ctx[4][/*variant*/ ctx[10].title] + "";
		let t;
		let option_value_value;

		return {
			c() {
				option = element("option");
				t = text(t_value);
				option.__value = option_value_value = /*variant*/ ctx[10].id;
				option.value = option.__value;
			},
			m(target, anchor) {
				insert(target, option, anchor);
				append(option, t);
			},
			p(ctx, dirty) {
				if (dirty & /*$LOCALE, variants*/ 18 && t_value !== (t_value = /*$LOCALE*/ ctx[4][/*variant*/ ctx[10].title] + "")) set_data(t, t_value);

				if (dirty & /*variants*/ 2 && option_value_value !== (option_value_value = /*variant*/ ctx[10].id)) {
					option.__value = option_value_value;
					option.value = option.__value;
				}
			},
			d(detaching) {
				if (detaching) detach(option);
			}
		};
	}

	function create_fragment$c(ctx) {
		let div1;
		let div0;
		let each_blocks = [];
		let each_1_lookup = new Map();
		let div0_class_value;
		let t;
		let each_value_1 = /*items*/ ctx[0];
		const get_key = ctx => /*item*/ ctx[13].id;

		for (let i = 0; i < each_value_1.length; i += 1) {
			let child_ctx = get_each_context_1(ctx, each_value_1, i);
			let key = get_key(child_ctx);
			each_1_lookup.set(key, each_blocks[i] = create_each_block_1(key, child_ctx));
		}

		let if_block = !/*readonly*/ ctx[2] && create_if_block$5(ctx);

		return {
			c() {
				div1 = element("div");
				div0 = element("div");

				for (let i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].c();
				}

				t = space();
				if (if_block) if_block.c();
				attr(div0, "class", div0_class_value = "column " + /*classes*/ ctx[3]);
				attr(div1, "class", "columns");
			},
			m(target, anchor) {
				insert(target, div1, anchor);
				append(div1, div0);

				for (let i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].m(div0, null);
				}

				append(div1, t);
				if (if_block) if_block.m(div1, null);
			},
			p(ctx, [dirty]) {
				if (dirty & /*items, remove, readonly, $LOCALE*/ 53) {
					each_value_1 = /*items*/ ctx[0];
					each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value_1, each_1_lookup, div0, destroy_block, create_each_block_1, null, get_each_context_1);
				}

				if (dirty & /*classes*/ 8 && div0_class_value !== (div0_class_value = "column " + /*classes*/ ctx[3])) {
					attr(div0, "class", div0_class_value);
				}

				if (!/*readonly*/ ctx[2]) {
					if (if_block) {
						if_block.p(ctx, dirty);
					} else {
						if_block = create_if_block$5(ctx);
						if_block.c();
						if_block.m(div1, null);
					}
				} else if (if_block) {
					if_block.d(1);
					if_block = null;
				}
			},
			i: noop,
			o: noop,
			d(detaching) {
				if (detaching) detach(div1);

				for (let i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].d();
				}

				if (if_block) if_block.d();
			}
		};
	}

	function instance$c($$self, $$props, $$invalidate) {
		let classes;
		let $LOCALE;
		component_subscribe($$self, LOCALE, $$value => $$invalidate(4, $LOCALE = $$value));
		let dispatch = createEventDispatcher();
		let { items = [] } = $$props;
		let { variants = [] } = $$props;
		let { error = false } = $$props;
		let { readonly = false } = $$props;

		let { beforeAdd = () => /*item, list*/ {
			return true;
		} } = $$props;

		function remove(e) {
			e && e.preventDefault();
			let id = parseInt(e.currentTarget.dataset.id);
			let item = items.find(el => el.id === id);

			if (item) {
				items.splice(items.indexOf(item), 1);
				$$invalidate(0, items);
				dispatch('change', items);
			}

			return false;
		}

		function add(e) {
			e && e.preventDefault();
			let id = parseInt(e.currentTarget.parentNode.querySelector('select').value);
			let item = variants.find(el => el.id === id);

			if (!beforeAdd(item, items)) {
				return false;
			}

			if (item && items.indexOf(item) === -1) {
				items.push(item);
				$$invalidate(0, items);
				dispatch('change', items);
			}

			return false;
		}

		$$self.$$set = $$props => {
			if ('items' in $$props) $$invalidate(0, items = $$props.items);
			if ('variants' in $$props) $$invalidate(1, variants = $$props.variants);
			if ('error' in $$props) $$invalidate(7, error = $$props.error);
			if ('readonly' in $$props) $$invalidate(2, readonly = $$props.readonly);
			if ('beforeAdd' in $$props) $$invalidate(8, beforeAdd = $$props.beforeAdd);
		};

		$$self.$$.update = () => {
			if ($$self.$$.dirty & /*error*/ 128) {
				$$invalidate(3, classes = error ? 'is-danger' : '');
			}
		};

		return [items, variants, readonly, classes, $LOCALE, remove, add, error, beforeAdd];
	}

	class Ui_tag extends SvelteComponent {
		constructor(options) {
			super();

			init(this, options, instance$c, create_fragment$c, safe_not_equal, {
				items: 0,
				variants: 1,
				error: 7,
				readonly: 2,
				beforeAdd: 8
			});
		}
	}

	/* src/elements/form/ui.telephone.svelte generated by Svelte v3.44.3 */

	function create_if_block_4$1(ctx) {
		let span;
		let i;
		let i_class_value;

		return {
			c() {
				span = element("span");
				i = element("i");
				attr(i, "class", i_class_value = "fas fa-" + /*icon*/ ctx[4]);
				attr(span, "class", "icon is-small is-left");
			},
			m(target, anchor) {
				insert(target, span, anchor);
				append(span, i);
			},
			p(ctx, dirty) {
				if (dirty & /*icon*/ 16 && i_class_value !== (i_class_value = "fas fa-" + /*icon*/ ctx[4])) {
					attr(i, "class", i_class_value);
				}
			},
			d(detaching) {
				if (detaching) detach(span);
			}
		};
	}

	// (74:4) {#if validated === true }
	function create_if_block_1$3(ctx) {
		let span;

		function select_block_type(ctx, dirty) {
			if (/*valid*/ ctx[7] === true) return create_if_block_2$1;
			if (/*valid*/ ctx[7] === false) return create_if_block_3$1;
		}

		let current_block_type = select_block_type(ctx);
		let if_block = current_block_type && current_block_type(ctx);

		return {
			c() {
				span = element("span");
				if (if_block) if_block.c();
				attr(span, "class", "icon is-small is-right");
			},
			m(target, anchor) {
				insert(target, span, anchor);
				if (if_block) if_block.m(span, null);
			},
			p(ctx, dirty) {
				if (current_block_type !== (current_block_type = select_block_type(ctx))) {
					if (if_block) if_block.d(1);
					if_block = current_block_type && current_block_type(ctx);

					if (if_block) {
						if_block.c();
						if_block.m(span, null);
					}
				}
			},
			d(detaching) {
				if (detaching) detach(span);

				if (if_block) {
					if_block.d();
				}
			}
		};
	}

	// (78:35) 
	function create_if_block_3$1(ctx) {
		let i;

		return {
			c() {
				i = element("i");
				attr(i, "class", "fas fa-exclamation-triangle");
			},
			m(target, anchor) {
				insert(target, i, anchor);
			},
			d(detaching) {
				if (detaching) detach(i);
			}
		};
	}

	// (76:6) {#if valid === true }
	function create_if_block_2$1(ctx) {
		let i;

		return {
			c() {
				i = element("i");
				attr(i, "class", "fas fa-check");
			},
			m(target, anchor) {
				insert(target, i, anchor);
			},
			d(detaching) {
				if (detaching) detach(i);
			}
		};
	}

	// (87:4) {:else}
	function create_else_block$2(ctx) {
		let t;

		return {
			c() {
				t = text("Â ");
			},
			m(target, anchor) {
				insert(target, t, anchor);
			},
			p: noop,
			d(detaching) {
				if (detaching) detach(t);
			}
		};
	}

	// (85:4) {#if !(validated && valid) && (inputStarted) }
	function create_if_block$4(ctx) {
		let t;

		return {
			c() {
				t = text(/*helper*/ ctx[11]);
			},
			m(target, anchor) {
				insert(target, t, anchor);
			},
			p(ctx, dirty) {
				if (dirty & /*helper*/ 2048) set_data(t, /*helper*/ ctx[11]);
			},
			d(detaching) {
				if (detaching) detach(t);
			}
		};
	}

	function create_fragment$b(ctx) {
		let div;
		let input;
		let input_id_value;
		let input_class_value;
		let input_aria_controls_value;
		let input_aria_describedby_value;
		let t0;
		let t1;
		let div_class_value;
		let t2;
		let p;
		let p_class_value;
		let p_id_value;
		let mounted;
		let dispose;
		let if_block0 = /*icon*/ ctx[4] && create_if_block_4$1(ctx);
		let if_block1 = /*validated*/ ctx[8] === true && create_if_block_1$3(ctx);

		function select_block_type_1(ctx, dirty) {
			if (!(/*validated*/ ctx[8] && /*valid*/ ctx[7]) && /*inputStarted*/ ctx[0]) return create_if_block$4;
			return create_else_block$2;
		}

		let current_block_type = select_block_type_1(ctx);
		let if_block2 = current_block_type(ctx);

		return {
			c() {
				div = element("div");
				input = element("input");
				t0 = space();
				if (if_block0) if_block0.c();
				t1 = space();
				if (if_block1) if_block1.c();
				t2 = space();
				p = element("p");
				if_block2.c();
				attr(input, "id", input_id_value = "form-field-telephone-" + /*fieldname*/ ctx[3]);
				attr(input, "class", input_class_value = "input " + /*validationClasses*/ ctx[9]);
				attr(input, "type", "tel");
				attr(input, "name", /*fieldname*/ ctx[3]);
				attr(input, "invalid", /*invalid*/ ctx[10]);
				input.required = /*required*/ ctx[5];
				input.readOnly = /*readonly*/ ctx[6];
				attr(input, "placeholder", /*placeholder*/ ctx[2]);
				attr(input, "autocomplete", /*fieldname*/ ctx[3]);
				attr(input, "aria-controls", input_aria_controls_value = "input-field-helper-" + /*fieldname*/ ctx[3]);
				attr(input, "aria-describedby", input_aria_describedby_value = "input-field-helper-" + /*fieldname*/ ctx[3]);
				attr(div, "class", div_class_value = "control " + /*iconClasses*/ ctx[12]);
				attr(p, "class", p_class_value = "help " + /*validationClasses*/ ctx[9]);
				attr(p, "id", p_id_value = "input-field-helper-" + /*fieldname*/ ctx[3]);
			},
			m(target, anchor) {
				insert(target, div, anchor);
				append(div, input);
				set_input_value(input, /*value*/ ctx[1]);
				append(div, t0);
				if (if_block0) if_block0.m(div, null);
				append(div, t1);
				if (if_block1) if_block1.m(div, null);
				insert(target, t2, anchor);
				insert(target, p, anchor);
				if_block2.m(p, null);

				if (!mounted) {
					dispose = [
						listen(input, "input", /*input_input_handler*/ ctx[19]),
						listen(input, "change", /*onBlur*/ ctx[13]),
						listen(input, "input", /*onInput*/ ctx[14])
					];

					mounted = true;
				}
			},
			p(ctx, [dirty]) {
				if (dirty & /*fieldname*/ 8 && input_id_value !== (input_id_value = "form-field-telephone-" + /*fieldname*/ ctx[3])) {
					attr(input, "id", input_id_value);
				}

				if (dirty & /*validationClasses*/ 512 && input_class_value !== (input_class_value = "input " + /*validationClasses*/ ctx[9])) {
					attr(input, "class", input_class_value);
				}

				if (dirty & /*fieldname*/ 8) {
					attr(input, "name", /*fieldname*/ ctx[3]);
				}

				if (dirty & /*invalid*/ 1024) {
					attr(input, "invalid", /*invalid*/ ctx[10]);
				}

				if (dirty & /*required*/ 32) {
					input.required = /*required*/ ctx[5];
				}

				if (dirty & /*readonly*/ 64) {
					input.readOnly = /*readonly*/ ctx[6];
				}

				if (dirty & /*placeholder*/ 4) {
					attr(input, "placeholder", /*placeholder*/ ctx[2]);
				}

				if (dirty & /*fieldname*/ 8) {
					attr(input, "autocomplete", /*fieldname*/ ctx[3]);
				}

				if (dirty & /*fieldname*/ 8 && input_aria_controls_value !== (input_aria_controls_value = "input-field-helper-" + /*fieldname*/ ctx[3])) {
					attr(input, "aria-controls", input_aria_controls_value);
				}

				if (dirty & /*fieldname*/ 8 && input_aria_describedby_value !== (input_aria_describedby_value = "input-field-helper-" + /*fieldname*/ ctx[3])) {
					attr(input, "aria-describedby", input_aria_describedby_value);
				}

				if (dirty & /*value*/ 2) {
					set_input_value(input, /*value*/ ctx[1]);
				}

				if (/*icon*/ ctx[4]) {
					if (if_block0) {
						if_block0.p(ctx, dirty);
					} else {
						if_block0 = create_if_block_4$1(ctx);
						if_block0.c();
						if_block0.m(div, t1);
					}
				} else if (if_block0) {
					if_block0.d(1);
					if_block0 = null;
				}

				if (/*validated*/ ctx[8] === true) {
					if (if_block1) {
						if_block1.p(ctx, dirty);
					} else {
						if_block1 = create_if_block_1$3(ctx);
						if_block1.c();
						if_block1.m(div, null);
					}
				} else if (if_block1) {
					if_block1.d(1);
					if_block1 = null;
				}

				if (dirty & /*iconClasses*/ 4096 && div_class_value !== (div_class_value = "control " + /*iconClasses*/ ctx[12])) {
					attr(div, "class", div_class_value);
				}

				if (current_block_type === (current_block_type = select_block_type_1(ctx)) && if_block2) {
					if_block2.p(ctx, dirty);
				} else {
					if_block2.d(1);
					if_block2 = current_block_type(ctx);

					if (if_block2) {
						if_block2.c();
						if_block2.m(p, null);
					}
				}

				if (dirty & /*validationClasses*/ 512 && p_class_value !== (p_class_value = "help " + /*validationClasses*/ ctx[9])) {
					attr(p, "class", p_class_value);
				}

				if (dirty & /*fieldname*/ 8 && p_id_value !== (p_id_value = "input-field-helper-" + /*fieldname*/ ctx[3])) {
					attr(p, "id", p_id_value);
				}
			},
			i: noop,
			o: noop,
			d(detaching) {
				if (detaching) detach(div);
				if (if_block0) if_block0.d();
				if (if_block1) if_block1.d();
				if (detaching) detach(t2);
				if (detaching) detach(p);
				if_block2.d();
				mounted = false;
				run_all(dispose);
			}
		};
	}

	function instance$b($$self, $$props, $$invalidate) {
		let iconClasses;
		let allErrors;
		let helper;
		let invalid;
		let validationClasses;
		let dispatch = createEventDispatcher();
		let { inputStarted = false } = $$props;
		let { value = '' } = $$props;
		let { placeholder = '+7 (987) 654-32-10' } = $$props;
		let { fieldname = 'telephone' } = $$props;
		let { icon = false } = $$props;
		let { required = true } = $$props;
		let { readonly = false } = $$props;
		let { valid = true } = $$props;
		let { validated = false } = $$props;
		let { errors = false } = $$props;
		let { formErrors = false } = $$props;
		let { formLevelError = false } = $$props;

		function onBlur(ev) {
			ev.preventDefault();
			let val = UICommon$1.formatPhone(ev.currentTarget.value);
			let data = { field: fieldname, value: val };
			$$invalidate(1, value = val);
			$$invalidate(0, inputStarted = true);
			dispatch('change', data);
			return false;
		}

		function onInput(ev) {
			ev.preventDefault();
			let val = UICommon$1.formatPhone(ev.currentTarget.value);
			let data = { field: fieldname, value: val };
			$$invalidate(1, value = val);
			$$invalidate(0, inputStarted = true);
			dispatch('change', data);
			return false;
		}

		function input_input_handler() {
			value = this.value;
			$$invalidate(1, value);
		}

		$$self.$$set = $$props => {
			if ('inputStarted' in $$props) $$invalidate(0, inputStarted = $$props.inputStarted);
			if ('value' in $$props) $$invalidate(1, value = $$props.value);
			if ('placeholder' in $$props) $$invalidate(2, placeholder = $$props.placeholder);
			if ('fieldname' in $$props) $$invalidate(3, fieldname = $$props.fieldname);
			if ('icon' in $$props) $$invalidate(4, icon = $$props.icon);
			if ('required' in $$props) $$invalidate(5, required = $$props.required);
			if ('readonly' in $$props) $$invalidate(6, readonly = $$props.readonly);
			if ('valid' in $$props) $$invalidate(7, valid = $$props.valid);
			if ('validated' in $$props) $$invalidate(8, validated = $$props.validated);
			if ('errors' in $$props) $$invalidate(15, errors = $$props.errors);
			if ('formErrors' in $$props) $$invalidate(16, formErrors = $$props.formErrors);
			if ('formLevelError' in $$props) $$invalidate(17, formLevelError = $$props.formLevelError);
		};

		$$self.$$.update = () => {
			if ($$self.$$.dirty & /*icon*/ 16) {
				$$invalidate(12, iconClasses = (icon ? ' has-icons-left ' : '') + ' has-icons-right ');
			}

			if ($$self.$$.dirty & /*errors, formErrors*/ 98304) {
				$$invalidate(18, allErrors = [].concat(errors ? errors : [], formErrors ? formErrors : []));
			}

			if ($$self.$$.dirty & /*allErrors, placeholder*/ 262148) {
				$$invalidate(11, helper = allErrors ? allErrors.join(', ') : placeholder);
			}

			if ($$self.$$.dirty & /*valid, formLevelError*/ 131200) {
				$$invalidate(10, invalid = valid === false || formLevelError);
			}

			if ($$self.$$.dirty & /*valid, inputStarted*/ 129) {
				$$invalidate(9, validationClasses = valid === true || !inputStarted
				? UICommon$1.CLASS_OK
				: UICommon$1.CLASS_ERR);
			}
		};

		return [
			inputStarted,
			value,
			placeholder,
			fieldname,
			icon,
			required,
			readonly,
			valid,
			validated,
			validationClasses,
			invalid,
			helper,
			iconClasses,
			onBlur,
			onInput,
			errors,
			formErrors,
			formLevelError,
			allErrors,
			input_input_handler
		];
	}

	class Ui_telephone extends SvelteComponent {
		constructor(options) {
			super();

			init(this, options, instance$b, create_fragment$b, safe_not_equal, {
				inputStarted: 0,
				value: 1,
				placeholder: 2,
				fieldname: 3,
				icon: 4,
				required: 5,
				readonly: 6,
				valid: 7,
				validated: 8,
				errors: 15,
				formErrors: 16,
				formLevelError: 17
			});
		}
	}

	/* src/elements/form/ui.textarea.svelte generated by Svelte v3.44.3 */

	function create_if_block_4(ctx) {
		let span;
		let i;
		let i_class_value;

		return {
			c() {
				span = element("span");
				i = element("i");
				attr(i, "class", i_class_value = "fas fa-" + /*icon*/ ctx[4]);
				attr(span, "class", "icon is-small is-left");
			},
			m(target, anchor) {
				insert(target, span, anchor);
				append(span, i);
			},
			p(ctx, dirty) {
				if (dirty & /*icon*/ 16 && i_class_value !== (i_class_value = "fas fa-" + /*icon*/ ctx[4])) {
					attr(i, "class", i_class_value);
				}
			},
			d(detaching) {
				if (detaching) detach(span);
			}
		};
	}

	// (67:4) {#if validated === true }
	function create_if_block_1$2(ctx) {
		let span;

		function select_block_type(ctx, dirty) {
			if (/*valid*/ ctx[9] === true) return create_if_block_2;
			if (/*valid*/ ctx[9] === false) return create_if_block_3;
		}

		let current_block_type = select_block_type(ctx);
		let if_block = current_block_type && current_block_type(ctx);

		return {
			c() {
				span = element("span");
				if (if_block) if_block.c();
				attr(span, "class", "icon is-small is-right");
			},
			m(target, anchor) {
				insert(target, span, anchor);
				if (if_block) if_block.m(span, null);
			},
			p(ctx, dirty) {
				if (current_block_type !== (current_block_type = select_block_type(ctx))) {
					if (if_block) if_block.d(1);
					if_block = current_block_type && current_block_type(ctx);

					if (if_block) {
						if_block.c();
						if_block.m(span, null);
					}
				}
			},
			d(detaching) {
				if (detaching) detach(span);

				if (if_block) {
					if_block.d();
				}
			}
		};
	}

	// (71:35) 
	function create_if_block_3(ctx) {
		let i;

		return {
			c() {
				i = element("i");
				attr(i, "class", "fas fa-exclamation-triangle");
			},
			m(target, anchor) {
				insert(target, i, anchor);
			},
			d(detaching) {
				if (detaching) detach(i);
			}
		};
	}

	// (69:6) {#if valid === true }
	function create_if_block_2(ctx) {
		let i;

		return {
			c() {
				i = element("i");
				attr(i, "class", "fas fa-check");
			},
			m(target, anchor) {
				insert(target, i, anchor);
			},
			d(detaching) {
				if (detaching) detach(i);
			}
		};
	}

	// (80:4) {:else}
	function create_else_block$1(ctx) {
		let t;

		return {
			c() {
				t = text("Â ");
			},
			m(target, anchor) {
				insert(target, t, anchor);
			},
			p: noop,
			d(detaching) {
				if (detaching) detach(t);
			}
		};
	}

	// (78:4) {#if !(validated && valid) && (inputStarted) }
	function create_if_block$3(ctx) {
		let t;

		return {
			c() {
				t = text(/*helper*/ ctx[13]);
			},
			m(target, anchor) {
				insert(target, t, anchor);
			},
			p(ctx, dirty) {
				if (dirty & /*helper*/ 8192) set_data(t, /*helper*/ ctx[13]);
			},
			d(detaching) {
				if (detaching) detach(t);
			}
		};
	}

	function create_fragment$a(ctx) {
		let div;
		let textarea;
		let textarea_id_value;
		let textarea_class_value;
		let textarea_aria_controls_value;
		let textarea_aria_describedby_value;
		let t0;
		let t1;
		let div_class_value;
		let t2;
		let p;
		let p_class_value;
		let p_id_value;
		let mounted;
		let dispose;
		let if_block0 = /*icon*/ ctx[4] && create_if_block_4(ctx);
		let if_block1 = /*validated*/ ctx[10] === true && create_if_block_1$2(ctx);

		function select_block_type_1(ctx, dirty) {
			if (!(/*validated*/ ctx[10] && /*valid*/ ctx[9]) && /*inputStarted*/ ctx[0]) return create_if_block$3;
			return create_else_block$1;
		}

		let current_block_type = select_block_type_1(ctx);
		let if_block2 = current_block_type(ctx);

		return {
			c() {
				div = element("div");
				textarea = element("textarea");
				t0 = space();
				if (if_block0) if_block0.c();
				t1 = space();
				if (if_block1) if_block1.c();
				t2 = space();
				p = element("p");
				if_block2.c();
				attr(textarea, "id", textarea_id_value = "form-field-textarea-" + /*fieldname*/ ctx[3]);
				attr(textarea, "invalid", /*invalid*/ ctx[12]);
				textarea.disabled = /*disabled*/ ctx[8];
				textarea.required = /*required*/ ctx[6];
				textarea.readOnly = /*readonly*/ ctx[7];
				attr(textarea, "class", textarea_class_value = "textarea " + /*validationClasses*/ ctx[11]);
				attr(textarea, "name", /*fieldname*/ ctx[3]);
				attr(textarea, "placeholder", /*placeholder*/ ctx[2]);
				attr(textarea, "rows", /*rows*/ ctx[5]);
				attr(textarea, "aria-controls", textarea_aria_controls_value = "input-field-helper-" + /*fieldname*/ ctx[3]);
				attr(textarea, "aria-describedby", textarea_aria_describedby_value = "input-field-helper-" + /*fieldname*/ ctx[3]);
				attr(div, "class", div_class_value = "control " + /*iconClasses*/ ctx[14]);
				attr(p, "class", p_class_value = "help " + /*validationClasses*/ ctx[11]);
				attr(p, "id", p_id_value = "input-field-helper-" + /*fieldname*/ ctx[3]);
			},
			m(target, anchor) {
				insert(target, div, anchor);
				append(div, textarea);
				set_input_value(textarea, /*value*/ ctx[1]);
				append(div, t0);
				if (if_block0) if_block0.m(div, null);
				append(div, t1);
				if (if_block1) if_block1.m(div, null);
				insert(target, t2, anchor);
				insert(target, p, anchor);
				if_block2.m(p, null);

				if (!mounted) {
					dispose = [
						listen(textarea, "blur", /*onBlur*/ ctx[15]),
						listen(textarea, "input", /*textarea_input_handler*/ ctx[20])
					];

					mounted = true;
				}
			},
			p(ctx, [dirty]) {
				if (dirty & /*fieldname*/ 8 && textarea_id_value !== (textarea_id_value = "form-field-textarea-" + /*fieldname*/ ctx[3])) {
					attr(textarea, "id", textarea_id_value);
				}

				if (dirty & /*invalid*/ 4096) {
					attr(textarea, "invalid", /*invalid*/ ctx[12]);
				}

				if (dirty & /*disabled*/ 256) {
					textarea.disabled = /*disabled*/ ctx[8];
				}

				if (dirty & /*required*/ 64) {
					textarea.required = /*required*/ ctx[6];
				}

				if (dirty & /*readonly*/ 128) {
					textarea.readOnly = /*readonly*/ ctx[7];
				}

				if (dirty & /*validationClasses*/ 2048 && textarea_class_value !== (textarea_class_value = "textarea " + /*validationClasses*/ ctx[11])) {
					attr(textarea, "class", textarea_class_value);
				}

				if (dirty & /*fieldname*/ 8) {
					attr(textarea, "name", /*fieldname*/ ctx[3]);
				}

				if (dirty & /*placeholder*/ 4) {
					attr(textarea, "placeholder", /*placeholder*/ ctx[2]);
				}

				if (dirty & /*rows*/ 32) {
					attr(textarea, "rows", /*rows*/ ctx[5]);
				}

				if (dirty & /*fieldname*/ 8 && textarea_aria_controls_value !== (textarea_aria_controls_value = "input-field-helper-" + /*fieldname*/ ctx[3])) {
					attr(textarea, "aria-controls", textarea_aria_controls_value);
				}

				if (dirty & /*fieldname*/ 8 && textarea_aria_describedby_value !== (textarea_aria_describedby_value = "input-field-helper-" + /*fieldname*/ ctx[3])) {
					attr(textarea, "aria-describedby", textarea_aria_describedby_value);
				}

				if (dirty & /*value*/ 2) {
					set_input_value(textarea, /*value*/ ctx[1]);
				}

				if (/*icon*/ ctx[4]) {
					if (if_block0) {
						if_block0.p(ctx, dirty);
					} else {
						if_block0 = create_if_block_4(ctx);
						if_block0.c();
						if_block0.m(div, t1);
					}
				} else if (if_block0) {
					if_block0.d(1);
					if_block0 = null;
				}

				if (/*validated*/ ctx[10] === true) {
					if (if_block1) {
						if_block1.p(ctx, dirty);
					} else {
						if_block1 = create_if_block_1$2(ctx);
						if_block1.c();
						if_block1.m(div, null);
					}
				} else if (if_block1) {
					if_block1.d(1);
					if_block1 = null;
				}

				if (dirty & /*iconClasses*/ 16384 && div_class_value !== (div_class_value = "control " + /*iconClasses*/ ctx[14])) {
					attr(div, "class", div_class_value);
				}

				if (current_block_type === (current_block_type = select_block_type_1(ctx)) && if_block2) {
					if_block2.p(ctx, dirty);
				} else {
					if_block2.d(1);
					if_block2 = current_block_type(ctx);

					if (if_block2) {
						if_block2.c();
						if_block2.m(p, null);
					}
				}

				if (dirty & /*validationClasses*/ 2048 && p_class_value !== (p_class_value = "help " + /*validationClasses*/ ctx[11])) {
					attr(p, "class", p_class_value);
				}

				if (dirty & /*fieldname*/ 8 && p_id_value !== (p_id_value = "input-field-helper-" + /*fieldname*/ ctx[3])) {
					attr(p, "id", p_id_value);
				}
			},
			i: noop,
			o: noop,
			d(detaching) {
				if (detaching) detach(div);
				if (if_block0) if_block0.d();
				if (if_block1) if_block1.d();
				if (detaching) detach(t2);
				if (detaching) detach(p);
				if_block2.d();
				mounted = false;
				run_all(dispose);
			}
		};
	}

	function instance$a($$self, $$props, $$invalidate) {
		let iconClasses;
		let allErrors;
		let helper;
		let invalid;
		let validationClasses;
		let dispatch = createEventDispatcher();
		let { inputStarted = false } = $$props;
		let { value = '' } = $$props;
		let { placeholder = 'input some text here, please' } = $$props;
		let { fieldname = 'textarea' } = $$props;
		let { icon = false } = $$props;
		let { rows = 10 } = $$props;
		let { required = true } = $$props;
		let { readonly = false } = $$props;
		let { disabled = false } = $$props;
		let { valid = true } = $$props;
		let { validated = false } = $$props;
		let { errors = false } = $$props;
		let { formErrors = false } = $$props;
		let { formLevelError = false } = $$props;

		function onBlur(ev) {
			let data = {
				field: fieldname,
				value: ev.target.type === 'checkbox'
				? ev.target.checked
				: ev.target.value
			};

			$$invalidate(0, inputStarted = true);
			dispatch('change', data);
			return true;
		}

		function textarea_input_handler() {
			value = this.value;
			$$invalidate(1, value);
		}

		$$self.$$set = $$props => {
			if ('inputStarted' in $$props) $$invalidate(0, inputStarted = $$props.inputStarted);
			if ('value' in $$props) $$invalidate(1, value = $$props.value);
			if ('placeholder' in $$props) $$invalidate(2, placeholder = $$props.placeholder);
			if ('fieldname' in $$props) $$invalidate(3, fieldname = $$props.fieldname);
			if ('icon' in $$props) $$invalidate(4, icon = $$props.icon);
			if ('rows' in $$props) $$invalidate(5, rows = $$props.rows);
			if ('required' in $$props) $$invalidate(6, required = $$props.required);
			if ('readonly' in $$props) $$invalidate(7, readonly = $$props.readonly);
			if ('disabled' in $$props) $$invalidate(8, disabled = $$props.disabled);
			if ('valid' in $$props) $$invalidate(9, valid = $$props.valid);
			if ('validated' in $$props) $$invalidate(10, validated = $$props.validated);
			if ('errors' in $$props) $$invalidate(16, errors = $$props.errors);
			if ('formErrors' in $$props) $$invalidate(17, formErrors = $$props.formErrors);
			if ('formLevelError' in $$props) $$invalidate(18, formLevelError = $$props.formLevelError);
		};

		$$self.$$.update = () => {
			if ($$self.$$.dirty & /*icon*/ 16) {
				$$invalidate(14, iconClasses = (icon ? ' has-icons-left ' : '') + ' has-icons-right ');
			}

			if ($$self.$$.dirty & /*errors, formErrors*/ 196608) {
				$$invalidate(19, allErrors = [].concat(errors ? errors : [], formErrors ? formErrors : []));
			}

			if ($$self.$$.dirty & /*allErrors, placeholder*/ 524292) {
				$$invalidate(13, helper = allErrors ? allErrors.join(', ') : placeholder);
			}

			if ($$self.$$.dirty & /*valid, formLevelError*/ 262656) {
				$$invalidate(12, invalid = valid === false || formLevelError);
			}

			if ($$self.$$.dirty & /*valid, inputStarted*/ 513) {
				$$invalidate(11, validationClasses = valid === true || !inputStarted
				? UICommon$1.CLASS_OK
				: UICommon$1.CLASS_ERR);
			}
		};

		return [
			inputStarted,
			value,
			placeholder,
			fieldname,
			icon,
			rows,
			required,
			readonly,
			disabled,
			valid,
			validated,
			validationClasses,
			invalid,
			helper,
			iconClasses,
			onBlur,
			errors,
			formErrors,
			formLevelError,
			allErrors,
			textarea_input_handler
		];
	}

	class Ui_textarea extends SvelteComponent {
		constructor(options) {
			super();

			init(this, options, instance$a, create_fragment$a, safe_not_equal, {
				inputStarted: 0,
				value: 1,
				placeholder: 2,
				fieldname: 3,
				icon: 4,
				rows: 5,
				required: 6,
				readonly: 7,
				disabled: 8,
				valid: 9,
				validated: 10,
				errors: 16,
				formErrors: 17,
				formLevelError: 18
			});
		}
	}

	var index$4 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		UIAutocomplete: Ui_autocomplete,
		UICheckboxList: Ui_checkbox_list,
		UICheckbox: Ui_checkbox,
		UIColor: Ui_color,
		UIDate: Ui_date,
		UIEmail: Ui_email,
		UIHidden: Ui_hidden,
		UILabel: Ui_label,
		UIPassword: Ui_password,
		UISelect: Ui_select,
		UISwitch: Ui_switch,
		UITag: Ui_tag,
		UITelephone: Ui_telephone,
		UITextarea: Ui_textarea,
		UITextfield: Ui_textfield
	});

	/* src/elements/icon/ui.icon.button.with.tag.svelte generated by Svelte v3.44.3 */

	function create_fragment$9(ctx) {
		let uibutton;
		let t;
		let uitag;
		let current;
		const uibutton_spread_levels = [/*button*/ ctx[0]];
		let uibutton_props = {};

		for (let i = 0; i < uibutton_spread_levels.length; i += 1) {
			uibutton_props = assign(uibutton_props, uibutton_spread_levels[i]);
		}

		uibutton = new Ui_button({ props: uibutton_props });
		const uitag_spread_levels = [/*tag*/ ctx[1], { classes: "is-top-right" }];
		let uitag_props = {};

		for (let i = 0; i < uitag_spread_levels.length; i += 1) {
			uitag_props = assign(uitag_props, uitag_spread_levels[i]);
		}

		uitag = new Ui_tag$1({ props: uitag_props });

		return {
			c() {
				create_component(uibutton.$$.fragment);
				t = space();
				create_component(uitag.$$.fragment);
			},
			m(target, anchor) {
				mount_component(uibutton, target, anchor);
				insert(target, t, anchor);
				mount_component(uitag, target, anchor);
				current = true;
			},
			p(ctx, [dirty]) {
				const uibutton_changes = (dirty & /*button*/ 1)
				? get_spread_update(uibutton_spread_levels, [get_spread_object(/*button*/ ctx[0])])
				: {};

				uibutton.$set(uibutton_changes);

				const uitag_changes = (dirty & /*tag*/ 2)
				? get_spread_update(uitag_spread_levels, [get_spread_object(/*tag*/ ctx[1]), uitag_spread_levels[1]])
				: {};

				uitag.$set(uitag_changes);
			},
			i(local) {
				if (current) return;
				transition_in(uibutton.$$.fragment, local);
				transition_in(uitag.$$.fragment, local);
				current = true;
			},
			o(local) {
				transition_out(uibutton.$$.fragment, local);
				transition_out(uitag.$$.fragment, local);
				current = false;
			},
			d(detaching) {
				destroy_component(uibutton, detaching);
				if (detaching) detach(t);
				destroy_component(uitag, detaching);
			}
		};
	}

	function instance$9($$self, $$props, $$invalidate) {
		let { button = {} } = $$props;
		let { tag = {} } = $$props;

		$$self.$$set = $$props => {
			if ('button' in $$props) $$invalidate(0, button = $$props.button);
			if ('tag' in $$props) $$invalidate(1, tag = $$props.tag);
		};

		return [button, tag];
	}

	class Ui_icon_button_with_tag extends SvelteComponent {
		constructor(options) {
			super();
			init(this, options, instance$9, create_fragment$9, safe_not_equal, { button: 0, tag: 1 });
		}
	}

	/* src/elements/icon/ui.icon.floating.svelte generated by Svelte v3.44.3 */

	function create_fragment$8(ctx) {
		let div;
		let uibutton;
		let current;
		const uibutton_spread_levels = [{ action: toggle }, /*trigger*/ ctx[0]];
		let uibutton_props = {};

		for (let i = 0; i < uibutton_spread_levels.length; i += 1) {
			uibutton_props = assign(uibutton_props, uibutton_spread_levels[i]);
		}

		uibutton = new Ui_button({ props: uibutton_props });

		return {
			c() {
				div = element("div");
				create_component(uibutton.$$.fragment);
				attr(div, "class", "is-fab svelte-1haul9u");
				attr(div, "style", /*positionStyle*/ ctx[1]);
			},
			m(target, anchor) {
				insert(target, div, anchor);
				mount_component(uibutton, div, null);
				current = true;
			},
			p(ctx, [dirty]) {
				const uibutton_changes = (dirty & /*toggle, trigger*/ 1)
				? get_spread_update(uibutton_spread_levels, [
						dirty & /*toggle*/ 0 && { action: toggle },
						dirty & /*trigger*/ 1 && get_spread_object(/*trigger*/ ctx[0])
					])
				: {};

				uibutton.$set(uibutton_changes);

				if (!current || dirty & /*positionStyle*/ 2) {
					attr(div, "style", /*positionStyle*/ ctx[1]);
				}
			},
			i(local) {
				if (current) return;
				transition_in(uibutton.$$.fragment, local);
				current = true;
			},
			o(local) {
				transition_out(uibutton.$$.fragment, local);
				current = false;
			},
			d(detaching) {
				if (detaching) detach(div);
				destroy_component(uibutton);
			}
		};
	}

	function toggle() {
		
	}

	function instance$8($$self, $$props, $$invalidate) {
		let { trigger = {
			title: 'Click me!',
			icon: 'plus',
			color: 'primary',
			size: 'medium'
		} } = $$props;

		let positionStyle = '';

		onMount(() => {
			$$invalidate(1, positionStyle = '');
		});

		$$self.$$set = $$props => {
			if ('trigger' in $$props) $$invalidate(0, trigger = $$props.trigger);
		};

		return [trigger, positionStyle];
	}

	class Ui_icon_floating extends SvelteComponent {
		constructor(options) {
			super();
			init(this, options, instance$8, create_fragment$8, safe_not_equal, { trigger: 0 });
		}
	}

	var index$3 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		UIIconButtonWithTag: Ui_icon_button_with_tag,
		UIIconFloating: Ui_icon_floating,
		UIIconFont: Ui_icon_font,
		UIIcon: Ui_icon
	});

	/* src/elements/image/ui.images.svelte generated by Svelte v3.44.3 */

	function get_each_context(ctx, list, i) {
		const child_ctx = ctx.slice();
		child_ctx[1] = list[i];
		return child_ctx;
	}

	// (12:0) {:else}
	function create_else_block(ctx) {
		let figure;
		let img;
		let img_alt_value;
		let img_src_value;
		let img_crossorigin_value;
		let t;

		return {
			c() {
				figure = element("figure");
				img = element("img");
				t = space();
				attr(img, "class", "");
				attr(img, "alt", img_alt_value = /*item*/ ctx[1].title);
				if (!src_url_equal(img.src, img_src_value = /*item*/ ctx[1].url)) attr(img, "src", img_src_value);
				attr(img, "crossorigin", img_crossorigin_value = /*item*/ ctx[1].cors);
				attr(figure, "class", "image is-64x64");
			},
			m(target, anchor) {
				insert(target, figure, anchor);
				append(figure, img);
				append(figure, t);
			},
			p(ctx, dirty) {
				if (dirty & /*values*/ 1 && img_alt_value !== (img_alt_value = /*item*/ ctx[1].title)) {
					attr(img, "alt", img_alt_value);
				}

				if (dirty & /*values*/ 1 && !src_url_equal(img.src, img_src_value = /*item*/ ctx[1].url)) {
					attr(img, "src", img_src_value);
				}

				if (dirty & /*values*/ 1 && img_crossorigin_value !== (img_crossorigin_value = /*item*/ ctx[1].cors)) {
					attr(img, "crossorigin", img_crossorigin_value);
				}
			},
			d(detaching) {
				if (detaching) detach(figure);
			}
		};
	}

	// (6:0) {#if item.urlFull }
	function create_if_block$2(ctx) {
		let a;
		let figure;
		let img;
		let img_alt_value;
		let img_src_value;
		let img_crossorigin_value;
		let t;
		let a_href_value;
		let a_alt_value;

		return {
			c() {
				a = element("a");
				figure = element("figure");
				img = element("img");
				t = space();
				attr(img, "class", "");
				attr(img, "alt", img_alt_value = /*item*/ ctx[1].title);
				if (!src_url_equal(img.src, img_src_value = /*item*/ ctx[1].url)) attr(img, "src", img_src_value);
				attr(img, "crossorigin", img_crossorigin_value = /*item*/ ctx[1].cors);
				attr(figure, "class", "image is-64x64");
				attr(a, "href", a_href_value = /*item*/ ctx[1].urlFull);
				attr(a, "alt", a_alt_value = /*item*/ ctx[1].title);
			},
			m(target, anchor) {
				insert(target, a, anchor);
				append(a, figure);
				append(figure, img);
				append(a, t);
			},
			p(ctx, dirty) {
				if (dirty & /*values*/ 1 && img_alt_value !== (img_alt_value = /*item*/ ctx[1].title)) {
					attr(img, "alt", img_alt_value);
				}

				if (dirty & /*values*/ 1 && !src_url_equal(img.src, img_src_value = /*item*/ ctx[1].url)) {
					attr(img, "src", img_src_value);
				}

				if (dirty & /*values*/ 1 && img_crossorigin_value !== (img_crossorigin_value = /*item*/ ctx[1].cors)) {
					attr(img, "crossorigin", img_crossorigin_value);
				}

				if (dirty & /*values*/ 1 && a_href_value !== (a_href_value = /*item*/ ctx[1].urlFull)) {
					attr(a, "href", a_href_value);
				}

				if (dirty & /*values*/ 1 && a_alt_value !== (a_alt_value = /*item*/ ctx[1].title)) {
					attr(a, "alt", a_alt_value);
				}
			},
			d(detaching) {
				if (detaching) detach(a);
			}
		};
	}

	// (5:0) {#each values as item (item.url) }
	function create_each_block(key_1, ctx) {
		let first;
		let if_block_anchor;

		function select_block_type(ctx, dirty) {
			if (/*item*/ ctx[1].urlFull) return create_if_block$2;
			return create_else_block;
		}

		let current_block_type = select_block_type(ctx);
		let if_block = current_block_type(ctx);

		return {
			key: key_1,
			first: null,
			c() {
				first = empty();
				if_block.c();
				if_block_anchor = empty();
				this.first = first;
			},
			m(target, anchor) {
				insert(target, first, anchor);
				if_block.m(target, anchor);
				insert(target, if_block_anchor, anchor);
			},
			p(new_ctx, dirty) {
				ctx = new_ctx;

				if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block.d(1);
					if_block = current_block_type(ctx);

					if (if_block) {
						if_block.c();
						if_block.m(if_block_anchor.parentNode, if_block_anchor);
					}
				}
			},
			d(detaching) {
				if (detaching) detach(first);
				if_block.d(detaching);
				if (detaching) detach(if_block_anchor);
			}
		};
	}

	function create_fragment$7(ctx) {
		let each_blocks = [];
		let each_1_lookup = new Map();
		let each_1_anchor;
		let each_value = /*values*/ ctx[0];
		const get_key = ctx => /*item*/ ctx[1].url;

		for (let i = 0; i < each_value.length; i += 1) {
			let child_ctx = get_each_context(ctx, each_value, i);
			let key = get_key(child_ctx);
			each_1_lookup.set(key, each_blocks[i] = create_each_block(key, child_ctx));
		}

		return {
			c() {
				for (let i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].c();
				}

				each_1_anchor = empty();
			},
			m(target, anchor) {
				for (let i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].m(target, anchor);
				}

				insert(target, each_1_anchor, anchor);
			},
			p(ctx, [dirty]) {
				if (dirty & /*values*/ 1) {
					each_value = /*values*/ ctx[0];
					each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, each_1_anchor.parentNode, destroy_block, create_each_block, each_1_anchor, get_each_context);
				}
			},
			i: noop,
			o: noop,
			d(detaching) {
				for (let i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].d(detaching);
				}

				if (detaching) detach(each_1_anchor);
			}
		};
	}

	function instance$7($$self, $$props, $$invalidate) {
		let { values = [] } = $$props;

		$$self.$$set = $$props => {
			if ('values' in $$props) $$invalidate(0, values = $$props.values);
		};

		return [values];
	}

	class Ui_images extends SvelteComponent {
		constructor(options) {
			super();
			init(this, options, instance$7, create_fragment$7, safe_not_equal, { values: 0 });
		}
	}

	/* src/elements/layout/ui.column.svelte generated by Svelte v3.44.3 */

	function create_fragment$6(ctx) {
		let div;
		let div_class_value;
		let current;
		const default_slot_template = /*#slots*/ ctx[2].default;
		const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[1], null);

		return {
			c() {
				div = element("div");
				if (default_slot) default_slot.c();
				attr(div, "class", div_class_value = "column " + /*classes*/ ctx[0]);
			},
			m(target, anchor) {
				insert(target, div, anchor);

				if (default_slot) {
					default_slot.m(div, null);
				}

				current = true;
			},
			p(ctx, [dirty]) {
				if (default_slot) {
					if (default_slot.p && (!current || dirty & /*$$scope*/ 2)) {
						update_slot_base(
							default_slot,
							default_slot_template,
							ctx,
							/*$$scope*/ ctx[1],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[1])
							: get_slot_changes(default_slot_template, /*$$scope*/ ctx[1], dirty, null),
							null
						);
					}
				}

				if (!current || dirty & /*classes*/ 1 && div_class_value !== (div_class_value = "column " + /*classes*/ ctx[0])) {
					attr(div, "class", div_class_value);
				}
			},
			i(local) {
				if (current) return;
				transition_in(default_slot, local);
				current = true;
			},
			o(local) {
				transition_out(default_slot, local);
				current = false;
			},
			d(detaching) {
				if (detaching) detach(div);
				if (default_slot) default_slot.d(detaching);
			}
		};
	}

	function instance$6($$self, $$props, $$invalidate) {
		let { $$slots: slots = {}, $$scope } = $$props;
		let { classes = "" } = $$props;

		$$self.$$set = $$props => {
			if ('classes' in $$props) $$invalidate(0, classes = $$props.classes);
			if ('$$scope' in $$props) $$invalidate(1, $$scope = $$props.$$scope);
		};

		return [classes, $$scope, slots];
	}

	class Ui_column extends SvelteComponent {
		constructor(options) {
			super();
			init(this, options, instance$6, create_fragment$6, safe_not_equal, { classes: 0 });
		}
	}

	/* src/elements/layout/ui.columns.svelte generated by Svelte v3.44.3 */

	function create_fragment$5(ctx) {
		let div;
		let div_class_value;
		let current;
		const default_slot_template = /*#slots*/ ctx[2].default;
		const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[1], null);

		return {
			c() {
				div = element("div");
				if (default_slot) default_slot.c();
				attr(div, "class", div_class_value = "columns " + /*classes*/ ctx[0]);
			},
			m(target, anchor) {
				insert(target, div, anchor);

				if (default_slot) {
					default_slot.m(div, null);
				}

				current = true;
			},
			p(ctx, [dirty]) {
				if (default_slot) {
					if (default_slot.p && (!current || dirty & /*$$scope*/ 2)) {
						update_slot_base(
							default_slot,
							default_slot_template,
							ctx,
							/*$$scope*/ ctx[1],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[1])
							: get_slot_changes(default_slot_template, /*$$scope*/ ctx[1], dirty, null),
							null
						);
					}
				}

				if (!current || dirty & /*classes*/ 1 && div_class_value !== (div_class_value = "columns " + /*classes*/ ctx[0])) {
					attr(div, "class", div_class_value);
				}
			},
			i(local) {
				if (current) return;
				transition_in(default_slot, local);
				current = true;
			},
			o(local) {
				transition_out(default_slot, local);
				current = false;
			},
			d(detaching) {
				if (detaching) detach(div);
				if (default_slot) default_slot.d(detaching);
			}
		};
	}

	function instance$5($$self, $$props, $$invalidate) {
		let { $$slots: slots = {}, $$scope } = $$props;
		let { classes = "" } = $$props;

		$$self.$$set = $$props => {
			if ('classes' in $$props) $$invalidate(0, classes = $$props.classes);
			if ('$$scope' in $$props) $$invalidate(1, $$scope = $$props.$$scope);
		};

		return [classes, $$scope, slots];
	}

	class Ui_columns extends SvelteComponent {
		constructor(options) {
			super();
			init(this, options, instance$5, create_fragment$5, safe_not_equal, { classes: 0 });
		}
	}

	/* src/elements/layout/ui.container.svelte generated by Svelte v3.44.3 */

	function create_fragment$4(ctx) {
		let div;
		let div_class_value;
		let current;
		const default_slot_template = /*#slots*/ ctx[8].default;
		const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[7], null);

		return {
			c() {
				div = element("div");
				if (default_slot) default_slot.c();
				attr(div, "id", /*id*/ ctx[0]);
				attr(div, "class", div_class_value = "container " + /*classes*/ ctx[1]);
				toggle_class(div, "is-widescreen", /*widescreen*/ ctx[2]);
				toggle_class(div, "is-fullhd", /*fullhd*/ ctx[3]);
				toggle_class(div, "is-max-desktop", /*maxDesktop*/ ctx[4]);
				toggle_class(div, "is-max-widescreen", /*maxWidescreen*/ ctx[5]);
				toggle_class(div, "is-fluid", /*fluid*/ ctx[6]);
			},
			m(target, anchor) {
				insert(target, div, anchor);

				if (default_slot) {
					default_slot.m(div, null);
				}

				current = true;
			},
			p(ctx, [dirty]) {
				if (default_slot) {
					if (default_slot.p && (!current || dirty & /*$$scope*/ 128)) {
						update_slot_base(
							default_slot,
							default_slot_template,
							ctx,
							/*$$scope*/ ctx[7],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[7])
							: get_slot_changes(default_slot_template, /*$$scope*/ ctx[7], dirty, null),
							null
						);
					}
				}

				if (!current || dirty & /*id*/ 1) {
					attr(div, "id", /*id*/ ctx[0]);
				}

				if (!current || dirty & /*classes*/ 2 && div_class_value !== (div_class_value = "container " + /*classes*/ ctx[1])) {
					attr(div, "class", div_class_value);
				}

				if (dirty & /*classes, widescreen*/ 6) {
					toggle_class(div, "is-widescreen", /*widescreen*/ ctx[2]);
				}

				if (dirty & /*classes, fullhd*/ 10) {
					toggle_class(div, "is-fullhd", /*fullhd*/ ctx[3]);
				}

				if (dirty & /*classes, maxDesktop*/ 18) {
					toggle_class(div, "is-max-desktop", /*maxDesktop*/ ctx[4]);
				}

				if (dirty & /*classes, maxWidescreen*/ 34) {
					toggle_class(div, "is-max-widescreen", /*maxWidescreen*/ ctx[5]);
				}

				if (dirty & /*classes, fluid*/ 66) {
					toggle_class(div, "is-fluid", /*fluid*/ ctx[6]);
				}
			},
			i(local) {
				if (current) return;
				transition_in(default_slot, local);
				current = true;
			},
			o(local) {
				transition_out(default_slot, local);
				current = false;
			},
			d(detaching) {
				if (detaching) detach(div);
				if (default_slot) default_slot.d(detaching);
			}
		};
	}

	function instance$4($$self, $$props, $$invalidate) {
		let { $$slots: slots = {}, $$scope } = $$props;
		let { id = '' } = $$props;
		let { classes = '' } = $$props;
		let { widescreen = false } = $$props;
		let { fullhd = false } = $$props;
		let { maxDesktop = false } = $$props;
		let { maxWidescreen = false } = $$props;
		let { fluid = false } = $$props;

		$$self.$$set = $$props => {
			if ('id' in $$props) $$invalidate(0, id = $$props.id);
			if ('classes' in $$props) $$invalidate(1, classes = $$props.classes);
			if ('widescreen' in $$props) $$invalidate(2, widescreen = $$props.widescreen);
			if ('fullhd' in $$props) $$invalidate(3, fullhd = $$props.fullhd);
			if ('maxDesktop' in $$props) $$invalidate(4, maxDesktop = $$props.maxDesktop);
			if ('maxWidescreen' in $$props) $$invalidate(5, maxWidescreen = $$props.maxWidescreen);
			if ('fluid' in $$props) $$invalidate(6, fluid = $$props.fluid);
			if ('$$scope' in $$props) $$invalidate(7, $$scope = $$props.$$scope);
		};

		return [
			id,
			classes,
			widescreen,
			fullhd,
			maxDesktop,
			maxWidescreen,
			fluid,
			$$scope,
			slots
		];
	}

	class Ui_container extends SvelteComponent {
		constructor(options) {
			super();

			init(this, options, instance$4, create_fragment$4, safe_not_equal, {
				id: 0,
				classes: 1,
				widescreen: 2,
				fullhd: 3,
				maxDesktop: 4,
				maxWidescreen: 5,
				fluid: 6
			});
		}
	}

	/* src/elements/layout/ui.footer.svelte generated by Svelte v3.44.3 */

	function create_fragment$3(ctx) {
		let footer;
		let footer_class_value;
		let current;
		const default_slot_template = /*#slots*/ ctx[3].default;
		const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[2], null);

		return {
			c() {
				footer = element("footer");
				if (default_slot) default_slot.c();
				attr(footer, "id", /*id*/ ctx[0]);
				attr(footer, "class", footer_class_value = "footer " + /*classes*/ ctx[1] + "");
			},
			m(target, anchor) {
				insert(target, footer, anchor);

				if (default_slot) {
					default_slot.m(footer, null);
				}

				current = true;
			},
			p(ctx, [dirty]) {
				if (default_slot) {
					if (default_slot.p && (!current || dirty & /*$$scope*/ 4)) {
						update_slot_base(
							default_slot,
							default_slot_template,
							ctx,
							/*$$scope*/ ctx[2],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[2])
							: get_slot_changes(default_slot_template, /*$$scope*/ ctx[2], dirty, null),
							null
						);
					}
				}

				if (!current || dirty & /*id*/ 1) {
					attr(footer, "id", /*id*/ ctx[0]);
				}

				if (!current || dirty & /*classes*/ 2 && footer_class_value !== (footer_class_value = "footer " + /*classes*/ ctx[1] + "")) {
					attr(footer, "class", footer_class_value);
				}
			},
			i(local) {
				if (current) return;
				transition_in(default_slot, local);
				current = true;
			},
			o(local) {
				transition_out(default_slot, local);
				current = false;
			},
			d(detaching) {
				if (detaching) detach(footer);
				if (default_slot) default_slot.d(detaching);
			}
		};
	}

	function instance$3($$self, $$props, $$invalidate) {
		let { $$slots: slots = {}, $$scope } = $$props;
		let { id = '' } = $$props;
		let { classes = '' } = $$props;

		$$self.$$set = $$props => {
			if ('id' in $$props) $$invalidate(0, id = $$props.id);
			if ('classes' in $$props) $$invalidate(1, classes = $$props.classes);
			if ('$$scope' in $$props) $$invalidate(2, $$scope = $$props.$$scope);
		};

		return [id, classes, $$scope, slots];
	}

	class Ui_footer extends SvelteComponent {
		constructor(options) {
			super();
			init(this, options, instance$3, create_fragment$3, safe_not_equal, { id: 0, classes: 1 });
		}
	}

	/* src/elements/layout/ui.section.svelte generated by Svelte v3.44.3 */

	function create_fragment$2(ctx) {
		let section;
		let section_class_value;
		let current;
		const default_slot_template = /*#slots*/ ctx[4].default;
		const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[3], null);

		return {
			c() {
				section = element("section");
				if (default_slot) default_slot.c();
				attr(section, "id", /*id*/ ctx[0]);
				attr(section, "class", section_class_value = "section " + (/*size*/ ctx[1] ? 'is-' + /*size*/ ctx[1] : '') + " " + /*classes*/ ctx[2]);
			},
			m(target, anchor) {
				insert(target, section, anchor);

				if (default_slot) {
					default_slot.m(section, null);
				}

				current = true;
			},
			p(ctx, [dirty]) {
				if (default_slot) {
					if (default_slot.p && (!current || dirty & /*$$scope*/ 8)) {
						update_slot_base(
							default_slot,
							default_slot_template,
							ctx,
							/*$$scope*/ ctx[3],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[3])
							: get_slot_changes(default_slot_template, /*$$scope*/ ctx[3], dirty, null),
							null
						);
					}
				}

				if (!current || dirty & /*id*/ 1) {
					attr(section, "id", /*id*/ ctx[0]);
				}

				if (!current || dirty & /*size, classes*/ 6 && section_class_value !== (section_class_value = "section " + (/*size*/ ctx[1] ? 'is-' + /*size*/ ctx[1] : '') + " " + /*classes*/ ctx[2])) {
					attr(section, "class", section_class_value);
				}
			},
			i(local) {
				if (current) return;
				transition_in(default_slot, local);
				current = true;
			},
			o(local) {
				transition_out(default_slot, local);
				current = false;
			},
			d(detaching) {
				if (detaching) detach(section);
				if (default_slot) default_slot.d(detaching);
			}
		};
	}

	function instance$2($$self, $$props, $$invalidate) {
		let { $$slots: slots = {}, $$scope } = $$props;
		let { id = '' } = $$props;
		let { size } = $$props;
		let { classes = '' } = $$props;

		$$self.$$set = $$props => {
			if ('id' in $$props) $$invalidate(0, id = $$props.id);
			if ('size' in $$props) $$invalidate(1, size = $$props.size);
			if ('classes' in $$props) $$invalidate(2, classes = $$props.classes);
			if ('$$scope' in $$props) $$invalidate(3, $$scope = $$props.$$scope);
		};

		return [id, size, classes, $$scope, slots];
	}

	class Ui_section extends SvelteComponent {
		constructor(options) {
			super();
			init(this, options, instance$2, create_fragment$2, safe_not_equal, { id: 0, size: 1, classes: 2 });
		}
	}

	var index$2 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		UIColumn: Ui_column,
		UIColumns: Ui_columns,
		UIContainer: Ui_container,
		UIFooter: Ui_footer,
		UISection: Ui_section
	});

	function fade(node, { delay = 0, duration = 400, easing = identity } = {}) {
	    const o = +getComputedStyle(node).opacity;
	    return {
	        delay,
	        duration,
	        easing,
	        css: t => `opacity: ${t * o}`
	    };
	}

	/* src/elements/modal/ui.overlay.svelte generated by Svelte v3.44.3 */

	function create_if_block$1(ctx) {
		let div;
		let t;
		let div_transition;
		let current;
		let mounted;
		let dispose;
		let if_block = /*closeButton*/ ctx[0] && create_if_block_1$1(ctx);
		const default_slot_template = /*#slots*/ ctx[9].default;
		const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[8], null);

		return {
			c() {
				div = element("div");
				if (if_block) if_block.c();
				t = space();
				if (default_slot) default_slot.c();
				attr(div, "class", "is-overlay not-overlay");
				set_style(div, "z-index", zIndexStep * /*layer*/ ctx[3]);
			},
			m(target, anchor) {
				insert(target, div, anchor);
				if (if_block) if_block.m(div, null);
				append(div, t);

				if (default_slot) {
					default_slot.m(div, null);
				}

				current = true;

				if (!mounted) {
					dispose = listen(div, "click", /*overlayClick*/ ctx[4]);
					mounted = true;
				}
			},
			p(ctx, dirty) {
				if (/*closeButton*/ ctx[0]) {
					if (if_block) {
						if_block.p(ctx, dirty);
					} else {
						if_block = create_if_block_1$1(ctx);
						if_block.c();
						if_block.m(div, t);
					}
				} else if (if_block) {
					if_block.d(1);
					if_block = null;
				}

				if (default_slot) {
					if (default_slot.p && (!current || dirty & /*$$scope*/ 256)) {
						update_slot_base(
							default_slot,
							default_slot_template,
							ctx,
							/*$$scope*/ ctx[8],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[8])
							: get_slot_changes(default_slot_template, /*$$scope*/ ctx[8], dirty, null),
							null
						);
					}
				}

				if (!current || dirty & /*layer*/ 8) {
					set_style(div, "z-index", zIndexStep * /*layer*/ ctx[3]);
				}
			},
			i(local) {
				if (current) return;
				transition_in(default_slot, local);

				add_render_callback(() => {
					if (!div_transition) div_transition = create_bidirectional_transition(div, fade, {}, true);
					div_transition.run(1);
				});

				current = true;
			},
			o(local) {
				transition_out(default_slot, local);
				if (!div_transition) div_transition = create_bidirectional_transition(div, fade, {}, false);
				div_transition.run(0);
				current = false;
			},
			d(detaching) {
				if (detaching) detach(div);
				if (if_block) if_block.d();
				if (default_slot) default_slot.d(detaching);
				if (detaching && div_transition) div_transition.end();
				mounted = false;
				dispose();
			}
		};
	}

	// (66:1) {#if closeButton}
	function create_if_block_1$1(ctx) {
		let button;
		let button_class_value;
		let mounted;
		let dispose;

		return {
			c() {
				button = element("button");
				attr(button, "class", button_class_value = "delete is-" + /*closeSize*/ ctx[2]);
			},
			m(target, anchor) {
				insert(target, button, anchor);

				if (!mounted) {
					dispose = listen(button, "click", /*closeButtonClick*/ ctx[5]);
					mounted = true;
				}
			},
			p(ctx, dirty) {
				if (dirty & /*closeSize*/ 4 && button_class_value !== (button_class_value = "delete is-" + /*closeSize*/ ctx[2])) {
					attr(button, "class", button_class_value);
				}
			},
			d(detaching) {
				if (detaching) detach(button);
				mounted = false;
				dispose();
			}
		};
	}

	function create_fragment$1(ctx) {
		let if_block_anchor;
		let current;
		let if_block = /*show*/ ctx[1] && create_if_block$1(ctx);

		return {
			c() {
				if (if_block) if_block.c();
				if_block_anchor = empty();
			},
			m(target, anchor) {
				if (if_block) if_block.m(target, anchor);
				insert(target, if_block_anchor, anchor);
				current = true;
			},
			p(ctx, [dirty]) {
				if (/*show*/ ctx[1]) {
					if (if_block) {
						if_block.p(ctx, dirty);

						if (dirty & /*show*/ 2) {
							transition_in(if_block, 1);
						}
					} else {
						if_block = create_if_block$1(ctx);
						if_block.c();
						transition_in(if_block, 1);
						if_block.m(if_block_anchor.parentNode, if_block_anchor);
					}
				} else if (if_block) {
					group_outros();

					transition_out(if_block, 1, 1, () => {
						if_block = null;
					});

					check_outros();
				}
			},
			i(local) {
				if (current) return;
				transition_in(if_block);
				current = true;
			},
			o(local) {
				transition_out(if_block);
				current = false;
			},
			d(detaching) {
				if (if_block) if_block.d(detaching);
				if (detaching) detach(if_block_anchor);
			}
		};
	}

	const zIndexStep = 1000;

	function instance$1($$self, $$props, $$invalidate) {
		let { $$slots: slots = {}, $$scope } = $$props;
		let overflowSave = '';
		const dispatch = createEventDispatcher();
		let { closeButton = false } = $$props;
		let { show = true } = $$props;
		let { closeOnClick = true } = $$props;
		let { closeSize = 'normal' } = $$props;
		let { layer = 1 } = $$props;

		function overlayClick(e) {
			if (closeOnClick) {
				closeOverlay(e);
			}
		}

		function closeButtonClick() {
			rejectOverlay();
		}

		function closeOverlay(e) {
			if (e && e.originalTarget && e.originalTarget.classList && e.originalTarget.classList.contains('is-overlay')) {
				rejectOverlay();
			}
		}

		function rejectOverlay(data = {}) {
			dispatch('reject', data);
		}

		/*
		function resolveOverlay(data = {}) {
		  dispatch('resolve', data);
		}
	*/
		onMount(() => {
			$$invalidate(7, overflowSave = document.body.style.overflow);
		});

		onDestroy(() => {
			document.body.style.overflow = overflowSave;
		});

		$$self.$$set = $$props => {
			if ('closeButton' in $$props) $$invalidate(0, closeButton = $$props.closeButton);
			if ('show' in $$props) $$invalidate(1, show = $$props.show);
			if ('closeOnClick' in $$props) $$invalidate(6, closeOnClick = $$props.closeOnClick);
			if ('closeSize' in $$props) $$invalidate(2, closeSize = $$props.closeSize);
			if ('layer' in $$props) $$invalidate(3, layer = $$props.layer);
			if ('$$scope' in $$props) $$invalidate(8, $$scope = $$props.$$scope);
		};

		$$self.$$.update = () => {
			if ($$self.$$.dirty & /*show, overflowSave*/ 130) {
				if (show) {
					document.body.style.overflow = 'hidden';
				} else {
					document.body.style.overflow = overflowSave;
				}
			}
		};

		return [
			closeButton,
			show,
			closeSize,
			layer,
			overlayClick,
			closeButtonClick,
			closeOnClick,
			overflowSave,
			$$scope,
			slots
		];
	}

	class Ui_overlay extends SvelteComponent {
		constructor(options) {
			super();

			init(this, options, instance$1, create_fragment$1, safe_not_equal, {
				closeButton: 0,
				show: 1,
				closeOnClick: 6,
				closeSize: 2,
				layer: 3
			});
		}
	}

	/* src/elements/modal/ui.modal.svelte generated by Svelte v3.44.3 */

	function create_if_block_1(ctx) {
		let uibutton;
		let current;
		const uibutton_spread_levels = [/*closeButton*/ ctx[0]];
		let uibutton_props = {};

		for (let i = 0; i < uibutton_spread_levels.length; i += 1) {
			uibutton_props = assign(uibutton_props, uibutton_spread_levels[i]);
		}

		uibutton = new Ui_button({ props: uibutton_props });

		return {
			c() {
				create_component(uibutton.$$.fragment);
			},
			m(target, anchor) {
				mount_component(uibutton, target, anchor);
				current = true;
			},
			p(ctx, dirty) {
				const uibutton_changes = (dirty & /*closeButton*/ 1)
				? get_spread_update(uibutton_spread_levels, [get_spread_object(/*closeButton*/ ctx[0])])
				: {};

				uibutton.$set(uibutton_changes);
			},
			i(local) {
				if (current) return;
				transition_in(uibutton.$$.fragment, local);
				current = true;
			},
			o(local) {
				transition_out(uibutton.$$.fragment, local);
				current = false;
			},
			d(detaching) {
				destroy_component(uibutton, detaching);
			}
		};
	}

	// (34:10) {#if applyButton}
	function create_if_block(ctx) {
		let uibutton;
		let current;
		const uibutton_spread_levels = [/*applyButton*/ ctx[1]];
		let uibutton_props = {};

		for (let i = 0; i < uibutton_spread_levels.length; i += 1) {
			uibutton_props = assign(uibutton_props, uibutton_spread_levels[i]);
		}

		uibutton = new Ui_button({ props: uibutton_props });

		return {
			c() {
				create_component(uibutton.$$.fragment);
			},
			m(target, anchor) {
				mount_component(uibutton, target, anchor);
				current = true;
			},
			p(ctx, dirty) {
				const uibutton_changes = (dirty & /*applyButton*/ 2)
				? get_spread_update(uibutton_spread_levels, [get_spread_object(/*applyButton*/ ctx[1])])
				: {};

				uibutton.$set(uibutton_changes);
			},
			i(local) {
				if (current) return;
				transition_in(uibutton.$$.fragment, local);
				current = true;
			},
			o(local) {
				transition_out(uibutton.$$.fragment, local);
				current = false;
			},
			d(detaching) {
				destroy_component(uibutton, detaching);
			}
		};
	}

	// (27:3) <UIContent>
	function create_default_slot_2(ctx) {
		let div0;
		let span;
		let t0_value = /*$LOCALE*/ ctx[8][/*WAITING_TEXT*/ ctx[7]] + "";
		let t0;
		let div0_class_value;
		let t1;
		let t2;
		let div1;
		let t3;
		let current;
		const default_slot_template = /*#slots*/ ctx[9].default;
		const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], null);
		let if_block0 = /*closeButton*/ ctx[0] && create_if_block_1(ctx);
		let if_block1 = /*applyButton*/ ctx[1] && create_if_block(ctx);

		return {
			c() {
				div0 = element("div");
				span = element("span");
				t0 = text(t0_value);
				t1 = space();
				if (default_slot) default_slot.c();
				t2 = space();
				div1 = element("div");
				if (if_block0) if_block0.c();
				t3 = space();
				if (if_block1) if_block1.c();
				attr(span, "class", "title");
				attr(div0, "class", div0_class_value = "pageloader " + (/*loading*/ ctx[3] ? 'is-active' : ''));
				attr(div1, "class", "buttons is-grouped is-centered mt-4");
			},
			m(target, anchor) {
				insert(target, div0, anchor);
				append(div0, span);
				append(span, t0);
				insert(target, t1, anchor);

				if (default_slot) {
					default_slot.m(target, anchor);
				}

				insert(target, t2, anchor);
				insert(target, div1, anchor);
				if (if_block0) if_block0.m(div1, null);
				append(div1, t3);
				if (if_block1) if_block1.m(div1, null);
				current = true;
			},
			p(ctx, dirty) {
				if ((!current || dirty & /*$LOCALE, WAITING_TEXT*/ 384) && t0_value !== (t0_value = /*$LOCALE*/ ctx[8][/*WAITING_TEXT*/ ctx[7]] + "")) set_data(t0, t0_value);

				if (!current || dirty & /*loading*/ 8 && div0_class_value !== (div0_class_value = "pageloader " + (/*loading*/ ctx[3] ? 'is-active' : ''))) {
					attr(div0, "class", div0_class_value);
				}

				if (default_slot) {
					if (default_slot.p && (!current || dirty & /*$$scope*/ 1024)) {
						update_slot_base(
							default_slot,
							default_slot_template,
							ctx,
							/*$$scope*/ ctx[10],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[10])
							: get_slot_changes(default_slot_template, /*$$scope*/ ctx[10], dirty, null),
							null
						);
					}
				}

				if (/*closeButton*/ ctx[0]) {
					if (if_block0) {
						if_block0.p(ctx, dirty);

						if (dirty & /*closeButton*/ 1) {
							transition_in(if_block0, 1);
						}
					} else {
						if_block0 = create_if_block_1(ctx);
						if_block0.c();
						transition_in(if_block0, 1);
						if_block0.m(div1, t3);
					}
				} else if (if_block0) {
					group_outros();

					transition_out(if_block0, 1, 1, () => {
						if_block0 = null;
					});

					check_outros();
				}

				if (/*applyButton*/ ctx[1]) {
					if (if_block1) {
						if_block1.p(ctx, dirty);

						if (dirty & /*applyButton*/ 2) {
							transition_in(if_block1, 1);
						}
					} else {
						if_block1 = create_if_block(ctx);
						if_block1.c();
						transition_in(if_block1, 1);
						if_block1.m(div1, null);
					}
				} else if (if_block1) {
					group_outros();

					transition_out(if_block1, 1, 1, () => {
						if_block1 = null;
					});

					check_outros();
				}
			},
			i(local) {
				if (current) return;
				transition_in(default_slot, local);
				transition_in(if_block0);
				transition_in(if_block1);
				current = true;
			},
			o(local) {
				transition_out(default_slot, local);
				transition_out(if_block0);
				transition_out(if_block1);
				current = false;
			},
			d(detaching) {
				if (detaching) detach(div0);
				if (detaching) detach(t1);
				if (default_slot) default_slot.d(detaching);
				if (detaching) detach(t2);
				if (detaching) detach(div1);
				if (if_block0) if_block0.d();
				if (if_block1) if_block1.d();
			}
		};
	}

	// (25:2) <UIBox {classes}>
	function create_default_slot_1(ctx) {
		let uititle;
		let t;
		let uicontent;
		let current;

		uititle = new Ui_title({
				props: {
					size: "2",
					title: /*$LOCALE*/ ctx[8][/*title*/ ctx[4]],
					subtitle: /*$LOCALE*/ ctx[8][/*subtitle*/ ctx[5]]
				}
			});

		uicontent = new Ui_content({
				props: {
					$$slots: { default: [create_default_slot_2] },
					$$scope: { ctx }
				}
			});

		return {
			c() {
				create_component(uititle.$$.fragment);
				t = space();
				create_component(uicontent.$$.fragment);
			},
			m(target, anchor) {
				mount_component(uititle, target, anchor);
				insert(target, t, anchor);
				mount_component(uicontent, target, anchor);
				current = true;
			},
			p(ctx, dirty) {
				const uititle_changes = {};
				if (dirty & /*$LOCALE, title*/ 272) uititle_changes.title = /*$LOCALE*/ ctx[8][/*title*/ ctx[4]];
				if (dirty & /*$LOCALE, subtitle*/ 288) uititle_changes.subtitle = /*$LOCALE*/ ctx[8][/*subtitle*/ ctx[5]];
				uititle.$set(uititle_changes);
				const uicontent_changes = {};

				if (dirty & /*$$scope, applyButton, closeButton, loading, $LOCALE, WAITING_TEXT*/ 1419) {
					uicontent_changes.$$scope = { dirty, ctx };
				}

				uicontent.$set(uicontent_changes);
			},
			i(local) {
				if (current) return;
				transition_in(uititle.$$.fragment, local);
				transition_in(uicontent.$$.fragment, local);
				current = true;
			},
			o(local) {
				transition_out(uititle.$$.fragment, local);
				transition_out(uicontent.$$.fragment, local);
				current = false;
			},
			d(detaching) {
				destroy_component(uititle, detaching);
				if (detaching) detach(t);
				destroy_component(uicontent, detaching);
			}
		};
	}

	// (24:0) <UIOverlay {show} closeOnClick={false} closeButton={false} >
	function create_default_slot(ctx) {
		let uibox;
		let current;

		uibox = new Ui_box({
				props: {
					classes: /*classes*/ ctx[6],
					$$slots: { default: [create_default_slot_1] },
					$$scope: { ctx }
				}
			});

		return {
			c() {
				create_component(uibox.$$.fragment);
			},
			m(target, anchor) {
				mount_component(uibox, target, anchor);
				current = true;
			},
			p(ctx, dirty) {
				const uibox_changes = {};
				if (dirty & /*classes*/ 64) uibox_changes.classes = /*classes*/ ctx[6];

				if (dirty & /*$$scope, applyButton, closeButton, loading, $LOCALE, WAITING_TEXT, title, subtitle*/ 1467) {
					uibox_changes.$$scope = { dirty, ctx };
				}

				uibox.$set(uibox_changes);
			},
			i(local) {
				if (current) return;
				transition_in(uibox.$$.fragment, local);
				current = true;
			},
			o(local) {
				transition_out(uibox.$$.fragment, local);
				current = false;
			},
			d(detaching) {
				destroy_component(uibox, detaching);
			}
		};
	}

	function create_fragment(ctx) {
		let uioverlay;
		let current;

		uioverlay = new Ui_overlay({
				props: {
					show: /*show*/ ctx[2],
					closeOnClick: false,
					closeButton: false,
					$$slots: { default: [create_default_slot] },
					$$scope: { ctx }
				}
			});

		return {
			c() {
				create_component(uioverlay.$$.fragment);
			},
			m(target, anchor) {
				mount_component(uioverlay, target, anchor);
				current = true;
			},
			p(ctx, [dirty]) {
				const uioverlay_changes = {};
				if (dirty & /*show*/ 4) uioverlay_changes.show = /*show*/ ctx[2];

				if (dirty & /*$$scope, classes, applyButton, closeButton, loading, $LOCALE, WAITING_TEXT, title, subtitle*/ 1531) {
					uioverlay_changes.$$scope = { dirty, ctx };
				}

				uioverlay.$set(uioverlay_changes);
			},
			i(local) {
				if (current) return;
				transition_in(uioverlay.$$.fragment, local);
				current = true;
			},
			o(local) {
				transition_out(uioverlay.$$.fragment, local);
				current = false;
			},
			d(detaching) {
				destroy_component(uioverlay, detaching);
			}
		};
	}

	function instance($$self, $$props, $$invalidate) {
		let $LOCALE;
		component_subscribe($$self, LOCALE, $$value => $$invalidate(8, $LOCALE = $$value));
		let { $$slots: slots = {}, $$scope } = $$props;
		let { closeButton = false } = $$props;
		let { applyButton = false } = $$props;
		let { show = false } = $$props;
		let { loading = false } = $$props;
		let { title = 'Modal window' } = $$props;
		let { subtitle = '' } = $$props;
		let { classes = '' } = $$props;
		let { WAITING_TEXT = 'ÐÐ±ÑÐ°Ð±Ð¾ÑÐºÐ°' } = $$props;

		$$self.$$set = $$props => {
			if ('closeButton' in $$props) $$invalidate(0, closeButton = $$props.closeButton);
			if ('applyButton' in $$props) $$invalidate(1, applyButton = $$props.applyButton);
			if ('show' in $$props) $$invalidate(2, show = $$props.show);
			if ('loading' in $$props) $$invalidate(3, loading = $$props.loading);
			if ('title' in $$props) $$invalidate(4, title = $$props.title);
			if ('subtitle' in $$props) $$invalidate(5, subtitle = $$props.subtitle);
			if ('classes' in $$props) $$invalidate(6, classes = $$props.classes);
			if ('WAITING_TEXT' in $$props) $$invalidate(7, WAITING_TEXT = $$props.WAITING_TEXT);
			if ('$$scope' in $$props) $$invalidate(10, $$scope = $$props.$$scope);
		};

		return [
			closeButton,
			applyButton,
			show,
			loading,
			title,
			subtitle,
			classes,
			WAITING_TEXT,
			$LOCALE,
			slots,
			$$scope
		];
	}

	class Ui_modal extends SvelteComponent {
		constructor(options) {
			super();

			init(this, options, instance, create_fragment, safe_not_equal, {
				closeButton: 0,
				applyButton: 1,
				show: 2,
				loading: 3,
				title: 4,
				subtitle: 5,
				classes: 6,
				WAITING_TEXT: 7
			});
		}
	}

	var index$1 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		UIModal: Ui_modal,
		UIOverlay: Ui_overlay
	});

	//block elements

	var index = /*#__PURE__*/Object.freeze({
		__proto__: null,
		Blocks: index$8,
		Elements: Elements,
		Buttons: Buttons,
		Forms: index$4,
		Icons: index$3,
		Images: Images,
		Layouts: index$2,
		Links: Links,
		Modals: index$1,
		Notifications: index$6
	});

	var Locale = {
	  LOCALE: LOCALE,
	  say: say,
	  notLocale: notLocale$1
	};
	Object.keys(index$4).forEach(function (fieldtype) {
	  notFormUtils.addComponent(fieldtype, index$4[fieldtype]);
	});

	exports.Elements = index;
	exports.Frame = index$5;
	exports.LOCALE = LOCALE;
	exports.Locale = Locale;
	exports.notLocale = notLocale$1;
	exports.say = say;

	Object.defineProperty(exports, '__esModule', { value: true });

	return exports;

})({}, path$1, buffer, fs, https, http);
